#define NATIVIZED_CODE_AVAILABLE

// First occurrence: playMusic, line 34
static void exec_d76acf46f718c565(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: playMusic, line 36
static void exec_73f71da72409cdee(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	*context.getParameter<uint32*>(4) = (uint32)var0;
}

// First occurrence: ChangeMusicTempo, line 73
static void exec_8f994c348b7b9912(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: ChangeMusicTempo, line 74
static void exec_9420c1e8a5291f33(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: ChangeMusicTempo, line 76
static void exec_6d619579b8d162a0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = OpcodeExecUtils::safeDivide<uint8>((uint8)var0, (uint8)context.getParameter<int64>(8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: ChangeMusicTempo, line 77
static void exec_937947952ed5cba3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)context.getParameter<int64>(4), (uint32)var2);
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: ChangeMusicTempo, line 79
static void exec_6f371f2fa738f894(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: popAll, line 36
static void exec_5f971bf34600fba2(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>() = (uint32)context.readValueStack<uint32>(-1);
	context.moveValueStack(-1);
}

// First occurrence: pow, line 144
static void exec_746a748db1b03951(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: pow, line 146
static void exec_1576974d1628df13(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
}

// First occurrence: pow, line 147
static void exec_8846895ac0a5fa92(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
}

// First occurrence: pow, line 147
static void exec_62b6308e8464a5f8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: pow, line 149
static void exec_b8725eb0861e3767(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var2 = ((uint32)(var0) * (uint32)(var1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var2);
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const int8 var4 = 1;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: LookupSinCos, line 157
static void exec_d2f81be51434c9a2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var0);
}

// First occurrence: LookupSinCos, line 158
static void exec_28fd6fa94b2457d7(const RuntimeOpcodeContext context)
{
	*context.getParameter<int16*>() = (uint16)context.readValueStack<int16>(-1);
	context.moveValueStack(-1);
}

// First occurrence: lookupSin, line 164
static void exec_204812ae11dd1df3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var2 = (uint16)var0;
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(12)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6));
	context.moveValueStack(1);
}

// First occurrence: lookupCos, line 169
static void exec_c97e5b406ec696b2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var2 = (uint16)var0;
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8));
	context.moveValueStack(1);
}

// First occurrence: LookupAngleByVector, line 176
static void exec_2014d78e16315665(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	context.writeValueStack<int16>(1, (int16)(uint16)*context.getParameter<int16*>(8));
	context.moveValueStack(2);
}

// First occurrence: LookupAngleByVector, line 176
static void exec_7f67cc3e0625772f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	*context.getParameter<uint16*>() = (uint16)var0;
	context.moveValueStack(-1);
}

// First occurrence: lookupAngleByVector, line 179
static void exec_c3a1a3a0c471c27d(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)context.readValueStack<int16>(-1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<int16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: lookupAngleByVector, line 181
static void exec_a2ebdc0491b2fdbc(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: lookupAngleByVector, line 186
static void exec_79448f1cc38f4e46(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-1);
}

// First occurrence: lookupAngleByVector, line 189
static void exec_d50ce60a630f7033(const RuntimeOpcodeContext context)
{
}

// First occurrence: lookupAngleByVector, line 190
static void exec_81019b3fba446e48(const RuntimeOpcodeContext context)
{
}

// First occurrence: lookupAngleByVector, line 193
static void exec_c774169389f69f02(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)var3);
	const int16 var5 = (uint16)var4;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var5);
}

// First occurrence: lookupAngleByVector, line 194
static void exec_e8b5dc41a1cd3670(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: lookupAngleByVector, line 199
static void exec_573a2262ea9ffe10(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var6 = ((uint8)(context.getParameter<int64>()) - (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var6);
}

// First occurrence: lookupAngleByVector, line 202
static void exec_893c85af96cedd1e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: lookupAngleByVector, line 204
static void exec_524fa008ed97bd77(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: lookupAngleByVector, line 208
static void exec_867c7e7c5844055d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)-(signed)var0;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var1);
}

// First occurrence: LookupHighPrecisionSinCos, line 218
static void exec_bf86a7aeb04c5aff(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: LookupHighPrecisionSinCos, line 219
static void exec_2f863bba83614a66(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(12)));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: LookupHighPrecisionSinCos, line 220
static void exec_6d5013480a2b3667(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	*context.getParameter<uint16*>(12) = (uint16)var4;
}

// First occurrence: checkBoxOverlap, line 225
static void exec_0cdc61744c0727dd(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)context.readValueStack<int16>(-1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<int16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<int16>(-6));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)context.readValueStack<uint32>(-7));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)context.readValueStack<uint32>(-8));
	context.moveValueStack(-8);
}

// First occurrence: checkBoxOverlap, line 227
static void exec_d278fb3d27bd8c5c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)var2);
}

// First occurrence: checkBoxOverlap, line 230
static void exec_dd72b0e257b97ec8(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = (uint16)-(signed)var1;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) >= (int32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: checkBoxOverlap, line 230
static void exec_8ddfeee91ffaf671(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int32>(0, (int32)((int32)(var0) <= (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: tableLookupAddress, line 239
static void exec_e4f161c177ff1adc(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)context.readValueStack<int16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: tableLookupAddress, line 244
static void exec_6f07091b9717628e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: tableLookupAddress, line 246
static void exec_fd11d8382e4bda55(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(var0) + (uint32)(var5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var7);
}

// First occurrence: tableLookupAddress, line 247
static void exec_5e3724e95f647ebf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: tableLookupAddress, line 248
static void exec_47940b50d7cb6a43(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(1, (int16)(uint16)var0);
	context.moveValueStack(2);
}

// First occurrence: tableLookupAddressLog, line 260
static void exec_2c9378fcf03b85d2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: GetRandomNumber, line 273
static void exec_3134cd3c8bbea023(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: GetRandomNumber, line 274
static void exec_c7e53bc223595393(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: GetRandomNumber, line 274
static void exec_d166eb080de073df(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>(8) = (uint32)context.getParameter<int64>();
}

// First occurrence: GetRandomNumber, line 277
static void exec_c2d94c061cf0ab27(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: GetRandomNumber, line 278
static void exec_b04ec59fdb68cce0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: GetRandomNumber, line 279
static void exec_9343f3b23df467c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: GetRandomNumber, line 282
static void exec_faec371794844685(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	*context.getParameter<uint16*>(8) = (uint16)var0;
}

// First occurrence: GetRandomNumber, line 283
static void exec_ddcc69f91454f81b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var6 = ((uint32)(var2) + (uint32)(var5));
	*context.getParameter<uint32*>(32) = (uint32)var6;
}

// First occurrence: GetRandomNumber, line 284
static void exec_0d9b49f68e5bd7fc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: GetRandomNumber, line 287
static void exec_ca821c23b1bcbb67(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)var0);
}

// First occurrence: unpackColor, line 310
static void exec_85c679ddf3d36154(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: unpackColor, line 313
static void exec_fa4441fc00c25c6d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) * (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(20));
	context.moveValueStack(2);
}

// First occurrence: unpackColor, line 314
static void exec_3c117c53c03f5f95(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(12)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var4) * (uint16)(context.getParameter<int64>(20))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(28));
	context.moveValueStack(2);
}

// First occurrence: unpackColor, line 316
static void exec_6ec61dc81076faff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = ((uint32)(var0) + (uint32)(var3));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(20)) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var4) + (uint32)(var7)));
	context.moveValueStack(1);
}

// First occurrence: unpackColor, line 322
static void exec_bc38e35b77dc3a47(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) >> (uint32)((var2) & 0x1f));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var7 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var7);
}

// First occurrence: unpackColor, line 323
static void exec_1189e4bb1a9b3890(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var7);
}

// First occurrence: packColor, line 331
static void exec_3c749cf6e2499261(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(20));
	const int16 var7 = (uint16)var6;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: packColor, line 332
static void exec_37b0b64a7ee70c7e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	const uint32 var8 = OpcodeExecUtils::safeDivide<uint32>((uint32)var6, (uint32)context.getParameter<int64>(28));
	const int16 var9 = (uint16)var8;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var9);
}

// First occurrence: packColor, line 334
static void exec_25f439fbade6f690(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 1;
	const uint16 var2 = ((uint16)(var0) << (uint16)((var1) & 0x0f));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var5 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var9 = ((uint16)(var7) << (uint16)((context.getParameter<int64>(20)) & 0x0f));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var6) + (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: packColorExt, line 343
static void exec_0f2a978165431a07(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var7 = ((uint16)(var5) << (uint16)((context.getParameter<int64>(20)) & 0x0f));
	const uint16 var8 = ((uint16)(var4) + (uint16)(var7));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var8) + (uint16)(context.getParameter<int64>(28))));
	context.moveValueStack(1);
}

// First occurrence: blendColorsPacked, line 347
static void exec_cb1b7e290babe392(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.moveValueStack(-3);
}

// First occurrence: blendColors, line 359
static void exec_d965f4b1d2552776(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.moveValueStack(-3);
}

// First occurrence: blendColors_BGR32, line 366
static void exec_eefd1339bb6b8cac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint32 var6 = ((uint32)(context.getParameter<int64>(12)) - (uint32)(var4));
	const uint32 var7 = ((uint32)(var2) * (uint32)(var6));
	const uint32 var8 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var10 = ((uint32)(var8) & (uint32)(context.getParameter<int64>(28)));
	const uint16 var11 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36));
	const uint32 var13 = ((uint32)(var10) * (uint32)(var11));
	const uint32 var14 = ((uint32)(var7) + (uint32)(var13));
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(40)));
	const uint32 var18 = ((uint32)(var16) >> (uint32)((context.getParameter<int64>(48)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(56), (uint32)var18);
}

// First occurrence: blendColors_BGR32, line 367
static void exec_2c04910f80847ef8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	const uint32 var8 = ((uint32)(context.getParameter<int64>(20)) - (uint32)(var6));
	const uint32 var9 = ((uint32)(var4) * (uint32)(var8));
	const uint32 var10 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(32));
	const uint32 var12 = ((uint32)(var10) >> (uint32)((context.getParameter<int64>(36)) & 0x1f));
	const uint32 var14 = ((uint32)(var12) & (uint32)(context.getParameter<int64>(44)));
	const uint16 var15 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(52));
	const uint32 var17 = ((uint32)(var14) * (uint32)(var15));
	const uint32 var18 = ((uint32)(var9) + (uint32)(var17));
	const uint32 var20 = ((uint32)(var18) + (uint32)(context.getParameter<int64>(56)));
	const uint32 var22 = ((uint32)(var20) >> (uint32)((context.getParameter<int64>(64)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(72), (uint32)var22);
}

// First occurrence: blendColors_RGBA32, line 378
static void exec_31137484ebb14af5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = ((uint32)(var2) + (uint32)(var5));
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var9 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(28)) & 0x1f));
	const uint32 var10 = ((uint32)(var6) + (uint32)(var9));
	const uint32 var11 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var10) + (uint32)(var11)));
	context.moveValueStack(1);
}

// First occurrence: convertColors32, line 384
static void exec_8b30c3d150f13f4f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(12)) & 0x1f));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20));
	const uint32 var7 = ((uint32)(var5) & (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var10 = ((uint32)(var4) + (uint32)(var9));
	const uint32 var11 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(40));
	const uint32 var13 = ((uint32)(var11) & (uint32)(context.getParameter<int64>(44)));
	const uint32 var15 = ((uint32)(var13) >> (uint32)((context.getParameter<int64>(52)) & 0x1f));
	const uint32 var16 = ((uint32)(var10) + (uint32)(var15));
	const uint32 var17 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(60));
	const uint32 var19 = ((uint32)(var17) & (uint32)(context.getParameter<int64>(64)));
	const uint32 var21 = ((uint32)(var19) >> (uint32)((context.getParameter<int64>(72)) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var16) + (uint32)(var21)));
	context.moveValueStack(1);
}

// First occurrence: VDPHelper.getDirectWriteCode, line 395
static void exec_51b546933f973425(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint32 var6 = ((uint32)(var3) | (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var6);
}

// First occurrence: VDPHelper.getDirectWriteCode, line 396
static void exec_967bb14d0f8505dd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(12)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var5);
}

// First occurrence: VDPHelper.getDirectWriteCode, line 397
static void exec_2bf68ad7018326c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) + (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 407
static void exec_ce299094559b4ff1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 408
static void exec_0d9cad3a91f5b68d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 409
static void exec_9cd7dc267fb3350a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var8 = ((uint32)(var2) + (uint32)(var7));
	context.writeValueStack<int16>(0, (int16)(uint16)var8);
	context.moveValueStack(1);
}

// First occurrence: VDP.Config.enableHInt, line 417
static void exec_01f65b96d4fc13da(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)(uint8)!var0);
	context.moveValueStack(1);
}

// First occurrence: VDP.Config.enableHInt, line 420
static void exec_69fe009be9d9b35b(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 650
static void exec_42307eb83f3880ea(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 652
static void exec_e89375035c49b947(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)var0);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 652
static void exec_f7ac386ec822af99(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 654
static void exec_1aef154009e3130c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 655
static void exec_0e46fe158c996efb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 655
static void exec_7b7b2d639cf64dfb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
}

// First occurrence: checkForMultiReturn, line 715
static void exec_2bb6072d6b7886f1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: checkForMultiReturn, line 717
static void exec_65d7022203f98b98(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: signalMultiReturn, line 728
static void exec_59314229697c1db3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: debugDrawOutlineRect, line 737
static void exec_56c7aa664c8c4397(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<int32>(-2));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<int32>(-3));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<int32>(-4));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(16), (uint32)context.readValueStack<int32>(-5));
	context.moveValueStack(-5);
}

// First occurrence: debugDrawOutlineRect, line 740
static void exec_b474954f2b72c674(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int32>(0, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>()));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 741
static void exec_631a1f1093d4603e(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var1 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4));
	const int32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int64 var3 = 1;
	context.writeValueStack<int32>(0, (int32)((uint32)(var2) - (uint32)(var3)));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 742
static void exec_48e90ac51e81a43a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int32>(0, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>()));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 743
static void exec_98f50d2765e379e0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int32>(0, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>()));
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4));
	const int32 var1 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8));
	const int32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int64 var3 = 1;
	context.writeValueStack<int32>(1, (int32)((uint32)(var2) - (uint32)(var3)));
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: CompetitionMode.drawBackground, line 15
static void exec_3156da18aee014a5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.drawBackground, line 16
static void exec_d4fda07ec0e33965(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.MainMenu, line 42
static void exec_5f35d590c33baea5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.MainMenu, line 47
static void exec_82c7316e3ac3bfa3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
}

// First occurrence: CompetitionMode.MainMenu, line 48
static void exec_15da65d34245951f(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 50
static void exec_072da0e4475c4ffa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 52
static void exec_697711159c1c67db(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var0);
}

// First occurrence: CompetitionMode.MainMenu, line 55
static void exec_241786c029ed3b85(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.MainMenu, line 56
static void exec_16cdcbee3e0b7625(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.MainMenu, line 84
static void exec_3e5068847e3f38dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	*context.getParameter<uint16*>(32) = (uint16)var5;
}

// First occurrence: CompetitionMode.MainMenu, line 85
static void exec_88226fedb0812d7a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 87
static void exec_ceb30dd51a65bb24(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var5);
}

// First occurrence: CompetitionMode.MainMenu, line 88
static void exec_958b96145c810980(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 89
static void exec_08586daefaed33d0(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 90
static void exec_2e944aeb61741627(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.MainMenu, line 91
static void exec_48679c85bff9cb07(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: CompetitionMode.MainMenu, line 92
static void exec_982dd2233d48e6e5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: CompetitionMode.MainMenu, line 94
static void exec_355bc5d0fabd5c48(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: CompetitionMode.MainMenu, line 95
static void exec_0f41db49be447757(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: CompetitionMode.MainMenu, line 115
static void exec_82ab322a30679e90(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int8 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
}

// First occurrence: CompetitionMode.MainMenu, line 120
static void exec_62991d0a657d8042(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: CompetitionMode.MainMenu, line 122
static void exec_aeefe3610d3d0b57(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 132
static void exec_2b5b1e7cd5062bba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var0);
}

// First occurrence: CompetitionMode.MainMenu, line 134
static void exec_100df808ca31d03c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	*context.getParameter<uint32*>(4) = (uint32)var0;
}

// First occurrence: CompetitionMode.MainMenu, line 144
static void exec_9c1ac7205fcb4676(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: CompetitionMode.MainMenu, line 145
static void exec_9a2010d1575cf887(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int64>(0, (int64)((uint64)(var0) + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 149
static void exec_a0726357bfd0b12b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	*context.getParameter<uint8*>(8) = (uint8)var0;
}

// First occurrence: CompetitionMode.MainMenu, line 150
static void exec_99865d175d3fe53c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 153
static void exec_878d0ebe27f0ce18(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 153
static void exec_faf9fb27b51bfdd4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: CompetitionMode.MainMenu, line 150
static void exec_e49ddde8c0dc8adb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 161
static void exec_e3e45a7f6f9c3c6f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: CompetitionMode.MainMenu, line 162
static void exec_16bd3d632d840eb3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 162
static void exec_ca14282e430ad55f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	*context.getParameter<uint32*>() = (uint32)var0;
}

// First occurrence: CompetitionMode.MainMenu, line 165
static void exec_0be093bacfffd5c3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var0);
}

// First occurrence: fn00aa36, line 210
static void exec_75c3d01a840a4cff(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var0);
}

// First occurrence: fn00aa36, line 211
static void exec_62b8d7bbeab04e13(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00aa36, line 211
static void exec_363e9726ee7437ee(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00aa74, line 233
static void exec_834e20f488810b23(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: fn00aadc, line 286
static void exec_d2787d566df5761c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn00aadc, line 287
static void exec_a07e151322333dbe(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00aadc, line 289
static void exec_36197448eacb0161(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn00aadc, line 290
static void exec_ef642f307d101242(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00aadc, line 291
static void exec_8e68b9781d5560e8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) | (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn00ab00, line 300
static void exec_4d721ec09a99b567(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 302
static void exec_355d169c37b05bcb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	const uint16 var5 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn00ab00, line 303
static void exec_bac2cc97a5a7bdbe(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 305
static void exec_4acc6c8a5d8690ab(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 309
static void exec_327c910b136a787f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const int64 var1 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(var0));
	const int16 var2 = (uint16)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>();
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 349
static void exec_55df20a0cddbf6e3(const RuntimeOpcodeContext context)
{
	const int8 var0 = 0;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var0);
}

// First occurrence: CompetitionMode.StageSelect, line 354
static void exec_8a49e1f1973f39d9(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: CompetitionMode.StageSelect, line 357
static void exec_189286caf3ee54b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.StageSelect, line 368
static void exec_637ecec846e6ca30(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: CompetitionMode.StageSelect, line 369
static void exec_e42445ce1325d20b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var0);
}

// First occurrence: CompetitionMode.StageSelect, line 404
static void exec_30cbc95f3de08689(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 406
static void exec_229543c0f13f042a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: CompetitionMode.StageSelect, line 408
static void exec_15c53dec699783c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(32)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: CompetitionMode.StageSelect, line 416
static void exec_0e5cac9cacb99cac(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: CompetitionMode.StageSelect, line 418
static void exec_5056b269a0602cba(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 436
static void exec_028ba6844d09e1c7(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.StageSelect, line 438
static void exec_41a2257a27060dda(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: CompetitionMode.StageSelect, line 439
static void exec_245b828c25d47c65(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: CompetitionMode.StageSelect, line 448
static void exec_cf5a06bdb5ede605(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.StageSelect, line 466
static void exec_d38b31bd17b63322(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 472
static void exec_139729983dcc96e1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	*context.getParameter<uint16*>(8) = (uint16)var0;
}

// First occurrence: CompetitionMode.StageSelect, line 475
static void exec_4a86c582b3f90d5f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: CompetitionMode.StageSelect, line 480
static void exec_9c6cff0f76dc73f7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 482
static void exec_1d11c8e02b47b05b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.StageSelect, line 482
static void exec_9983f21b368d8698(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) == (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 486
static void exec_e67e35ded9d45442(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: CompetitionMode.StageSelect, line 491
static void exec_737e149bbea50dc1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) != (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 493
static void exec_33633ae6d947200d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: CompetitionMode.StageSelect, line 501
static void exec_ae35e56d287532f5(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 503
static void exec_ed809d71b2b9e028(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	*context.getParameter<int16*>(8) = (uint16)var1;
}

// First occurrence: CompetitionMode.StageSelect, line 505
static void exec_b9798f0244b33e3a(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: CompetitionMode.StageSelect, line 506
static void exec_5dee1ffeea5ef3e5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: CompetitionMode.StageSelect, line 511
static void exec_9c69990f76d990ce(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)*context.getParameter<uint8*>());
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 513
static void exec_7c9607023889ee67(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 522
static void exec_fb1848927bae7aba(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)((uint64)(context.getParameter<int64>()) | (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 530
static void exec_f50e5d79ab4afcee(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: CompetitionMode.StageSelect, line 531
static void exec_79d8b203266c46b4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: CompetitionMode.StageSelect, line 534
static void exec_2ae4aacca7ad87e1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 536
static void exec_d4ded43a527b0b8e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 539
static void exec_10e26f3013e7d607(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var2);
}

// First occurrence: CompetitionMode.StageSelect, line 540
static void exec_3481186ba05745c1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 542
static void exec_2ea9c23a5ebf3eab(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.StageSelect, line 549
static void exec_577b4fb4dad5fb0e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 552
static void exec_419a29d9919c4bda(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: CompetitionMode.StageSelect, line 555
static void exec_02e3bd0c06f906bc(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)-(signed)context.getParameter<int64>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: CompetitionMode.StageSelect, line 568
static void exec_8422ae372b73342a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var4);
}

// First occurrence: fn00af24, line 581
static void exec_1a76d825818c3e9f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00af24, line 583
static void exec_bf61ed5a6a916715(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var6 = ((uint16)(context.getParameter<int64>(16)) - (uint16)(var5));
	const uint32 var8 = ((uint32)(var3) + (uint32)(var6));
	const int16 var9 = (uint16)var8;
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn00af58, line 598
static void exec_9c84e03997c7b4fd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn00af58, line 601
static void exec_737dd33217ac88a5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn00af58, line 602
static void exec_81906562074c7e26(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn00afb2, line 614
static void exec_f4931955072784c4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) - (uint8)(var1)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: fn00afb2, line 614
static void exec_aa7572093b91e032(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-1);
}

// First occurrence: fn00afc8, line 623
static void exec_c08206c070abfdf4(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: fn00afc8, line 625
static void exec_85941578c55a3d1a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
}

// First occurrence: fn00afc8, line 625
static void exec_6fc7e166b7f2c7a6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00afc8, line 630
static void exec_772556a4af7b1369(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: fn00afc8, line 632
static void exec_21ef52a297768134(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: fn00b006, line 645
static void exec_cfc7b9eb2e88cf2f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var9;
}

// First occurrence: fn00b006, line 647
static void exec_2a4a08ea2871ed91(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b006, line 649
static void exec_6d8fc8302e2a12e8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00b036, line 663
static void exec_5f2a64cf4af9b3dd(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: fn00b066, line 696
static void exec_c59f4228169ea3df(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: fn00b066, line 699
static void exec_87c770d7168860cf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	*context.getParameter<uint8*>(8) = (uint8)var0;
}

// First occurrence: fn00b066, line 709
static void exec_ec059e8eccfdce27(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>(8) = (uint8)context.getParameter<int64>();
}

// First occurrence: fn00b0a6, line 730
static void exec_626f57b21af7f9a0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn00b0c2, line 738
static void exec_863be7ab2eece97b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00b0d4, line 751
static void exec_5fb918d00c90278e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00b0d4, line 752
static void exec_42ecbd8096ac9bd5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
	const uint32 var9 = ((uint32)(var7) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var4);
}

// First occurrence: fn00b0d4, line 753
static void exec_545505d2a9be575a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn00b2cc, line 844
static void exec_5e63d7b2643b142e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: fn00b4f6, line 907
static void exec_29ed2de56a0647ea(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn00b508, line 929
static void exec_6948a9b706a1c417(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var1) < (int8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 952
static void exec_866b1159a9e712dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 954
static void exec_4a562561256e1b54(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
}

// First occurrence: fn00b538, line 956
static void exec_915c4d39eec7771b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) == (uint32)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: fn00b538, line 956
static void exec_547db2d182bf67d5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = ((uint8)(context.readValueStack<uint8>(-2)) | (uint8)(context.readValueStack<uint8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn00b538, line 960
static void exec_cbc709f850f2b8bc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn00b538, line 961
static void exec_49b0215ace051987(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)context.getParameter<int64>());
}

// First occurrence: fn00b538, line 967
static void exec_605e67da31f8d3b4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 969
static void exec_958fefc57d1948ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 981
static void exec_f30d75ace036fc56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint16 var4 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn00b538, line 984
static void exec_6b44b8e1b7f4403c(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)context.getParameter<int64>());
}

// First occurrence: fn00b538, line 985
static void exec_492931d48047ce07(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: fn00b538, line 990
static void exec_7dbea04a27b211a7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
}

// First occurrence: fn00b538, line 997
static void exec_446693abd205a2c9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn00b538, line 999
static void exec_7abfe9df3e026bf4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) == (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1001
static void exec_458b61b6d4d37ca3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn00b538, line 1002
static void exec_3a8fea72a9251259(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	*context.getParameter<uint8*>(8) = (uint8)var3;
}

// First occurrence: fn00b538, line 1005
static void exec_57c660dec4686eef(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: fn00b538, line 1007
static void exec_64a99bd0ab6030ff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1010
static void exec_e2be20c3c4521f38(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn00b538, line 1015
static void exec_d7ec402fd4451d7e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) - (uint8)(var2));
	*context.getParameter<uint8*>(8) = (uint8)var3;
}

// First occurrence: fn00b538, line 1016
static void exec_e01ee4e794ee843d(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1020
static void exec_0aa3bb6838c503b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1020
static void exec_5d7583a69c712712(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	*context.getParameter<int16*>(8) = (uint16)var0;
}

// First occurrence: fn00b538, line 1030
static void exec_a4f5d34ccf4b9c5e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn00b538, line 1032
static void exec_532794afb435eae9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) >= (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1035
static void exec_c4e4066fc71f8e5a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1043
static void exec_c579c55194a47df7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00b538, line 1044
static void exec_de782cc4c1ec95b0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1051
static void exec_3f43f363ba4c6934(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn00b538, line 1056
static void exec_d3a8f87993c40446(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	*context.getParameter<uint32*>() = (uint32)var0;
}

// First occurrence: fn00b538, line 1059
static void exec_fc7ac7031447bf3e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn00b656, line 1105
static void exec_1c9ee85f9b273197(const RuntimeOpcodeContext context)
{
	const int32 var1 = (uint32)-(signed)context.getParameter<int64>();
	*context.getParameter<int32*>(8) = (uint32)var1;
}

// First occurrence: fn00b656, line 1106
static void exec_a6b231406c88ca2a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn00b656, line 1115
static void exec_4cfd6288baef7076(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var7 = (uint8)*context.getParameter<uint8*>(24);
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	*context.getParameter<uint8*>(32) = (uint8)var8;
}

// First occurrence: fn00b656, line 1117
static void exec_d89e855e6cc62ecf(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn00b656, line 1118
static void exec_1bf4b6520532ef92(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn00b656, line 1121
static void exec_848b5d974438658d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn00c02a, line 1133
static void exec_b92f43e6a5d65f74(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
}

// First occurrence: fn00c02a, line 1133
static void exec_0684da350e5cd456(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00c02a, line 1135
static void exec_0a3158a19817e7c2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int8 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)var2);
}

// First occurrence: fn00c04c, line 1148
static void exec_7f3f54900d6c9050(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(32));
	const int8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) + (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(36), (uint8)var7);
}

// First occurrence: fn00c088, line 1171
static void exec_10cdbe7adf955f1e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	*context.getParameter<uint32*>(32) = (uint32)var5;
}

// First occurrence: fn00c088, line 1172
static void exec_991e1c5673cdc49e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	*context.getParameter<uint32*>(32) = (uint32)var5;
}

// First occurrence: fn00c088, line 1175
static void exec_9b157c624d23c34b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(16);
	const int64 var1 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) + (uint16)(var1)));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(24);
	const int64 var3 = 1;
	context.writeValueStack<uint16>(3, (uint16)((uint16)(var2) + (uint16)(var3)));
	context.moveValueStack(4);
}

// First occurrence: fn00c0b8, line 1203
static void exec_fa58fad1030dcb9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) | (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn00c0b8, line 1204
static void exec_acbc3bd8a32dfd93(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)~context.getParameter<int64>(16);
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var6);
}

// First occurrence: fn00c0ea, line 1212
static void exec_3e8a5e675744f942(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn00c0ea, line 1219
static void exec_3ea58e67575c128a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn00c104, line 1231
static void exec_100b282480c05358(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
}

// First occurrence: fn00b74e, line 1277
static void exec_ab7b13cd6ce83964(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	*context.getParameter<uint16*>() = (uint16)var0;
}

// First occurrence: fn00b74e, line 1338
static void exec_1357e198b387697c(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1362
static void exec_72d5cbbd647c40aa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1375
static void exec_0e2de8fb0493730a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1377
static void exec_9f282cefb1a4359d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn00b74e, line 1384
static void exec_e289724a5b2d13f6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn00b74e, line 1387
static void exec_042bec2951bca839(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1388
static void exec_503a0b6667d1fe3f(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(8)));
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1390
static void exec_7175a9bd91a258d9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1392
static void exec_977b873d098ad1b0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b9a6, line 1430
static void exec_4385cfd09a185499(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00b9ca, line 1451
static void exec_fade35abd3db5a0a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b9ca, line 1451
static void exec_c7b5e901de414b5e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00b9ca, line 1465
static void exec_5627ad37a01122a2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1492
static void exec_74145e5c2dd069d7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) <= (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1494
static void exec_342f9687badb6424(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1515
static void exec_42fd3c498f9b69a2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1517
static void exec_75b8c8f384d9132e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1544
static void exec_1b54aafcfce95412(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn00ba04, line 1557
static void exec_52730cc0b6f736a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var7) | (uint16)(context.getParameter<int64>(40)));
	*context.getParameter<uint16*>(48) = (uint16)var9;
}

// First occurrence: fn00ba04, line 1558
static void exec_0c2c82d8e0fa0cc8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var0);
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40));
	const int8 var7 = 1;
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), (uint8)var8);
}

// First occurrence: fn00baf0, line 1575
static void exec_b1f467be7fbc353c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: fn00baf0, line 1576
static void exec_b8fbef9f41cdc99c(const RuntimeOpcodeContext context)
{
	const int16 var0 = 0;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)var0);
}

// First occurrence: fn00baf0, line 1576
static void exec_505272983531b8b4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00baf0, line 1580
static void exec_2f4bb043e2e80561(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const int16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(28), (uint16)var5);
}

// First occurrence: fn00bb04, line 1588
static void exec_1553764cf488499f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var0);
}

// First occurrence: fn00bb04, line 1593
static void exec_ed2ffec0b33e9d10(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn00bb04, line 1594
static void exec_a6b9ce680b464240(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00bb04, line 1596
static void exec_7f723ace06385bd8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) - (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: fn00bb04, line 1597
static void exec_61adf2d98690eec9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn00bb04, line 1599
static void exec_04ec66bc4044367f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn00bc08, line 1649
static void exec_66cc5b956f48e70e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn00bc08, line 1656
static void exec_21be99af87fa9c43(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var8 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var7);
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn00bc08, line 1657
static void exec_a41c28d9c117fef6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn00beb2, line 1787
static void exec_418d40a77783247f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn00bef8, line 1811
static void exec_3613fb7f6bafcf6d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn00bef8, line 1812
static void exec_4a81b73cabb44313(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00bf3e, line 1827
static void exec_a6450c9f435c533c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 25
static void exec_4347e07f643c1564(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(context.getParameter<int64>()) + (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 27
static void exec_94a1bf182da82b9f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 49
static void exec_c82ff10fd52ba12b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 52
static void exec_1d0e73764799e6bf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>()));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var2);
	const uint8 var9 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var10 = 1;
	const uint8 var11 = ((uint8)(var9) + (uint8)(var10));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var11);
	context.moveValueStack(-1);
}

// First occurrence: fn05b36c, line 74
static void exec_ff1b53dba58a3c01(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	*context.getParameter<uint32*>(8) = (uint32)var1;
}

// First occurrence: fn05b36c, line 75
static void exec_5f045862d8c7be51(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: fn05b36c, line 76
static void exec_c66f8e929a0a639f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 81
static void exec_490c0a0d2265531f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 83
static void exec_4a01d52b2cd5820e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var0);
}

// First occurrence: fn05b36c, line 85
static void exec_7a324beba0a18ec8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int8 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn05b36c, line 95
static void exec_8ce6d852902fdb9a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: fn05b36c, line 124
static void exec_c88fe2d427d27b67(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn05b36c, line 125
static void exec_7c5872096a5bf20b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn05b36c, line 129
static void exec_73aebdcb0bcfae9a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(12) = (uint16)var3;
}

// First occurrence: fn05b36c, line 130
static void exec_64c47fc9df0b4433(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 132
static void exec_8b22f30ae9617f4a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(48)));
	*context.getParameter<uint32*>(56) = (uint32)var10;
	const uint32 var12 = ((uint32)(var10) - (uint32)(context.getParameter<int64>(64)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var7);
}

// First occurrence: fn05b36c, line 130
static void exec_55fd5b11bcf78dc0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn05c2e0, line 191
static void exec_90ca64758cee628a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05c2e0, line 194
static void exec_d71fb6f77f7351e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05c4e6, line 287
static void exec_26801859edc89949(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05c4e6, line 292
static void exec_d580c8b7b6331a68(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	*context.getParameter<int8*>(8) = (uint8)var2;
}

// First occurrence: fn05c55c, line 336
static void exec_d26fa82295fd5fd6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn05c55c, line 337
static void exec_3b80fee1111e0399(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn05c588, line 353
static void exec_8a879e3aa4faae15(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: fn05c5ac, line 366
static void exec_3dee302b8bd7f1f2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn05c5d0, line 380
static void exec_0fdabb7a9c22d7cc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn05c5d0, line 385
static void exec_88fd0489726f5e61(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn05c5d0, line 386
static void exec_22ff608daa7713f6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05c5d0, line 389
static void exec_a2113456cacdc69f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn05c5d0, line 390
static void exec_d6c90617857f58d8(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: fn05c5d0, line 396
static void exec_b0b1a6f822becd62(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn05c5d0, line 398
static void exec_5c11d68c88dedb4c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) != (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn05c5d0, line 398
static void exec_b6b3c0535c828aa3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) | (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn05c5d0, line 398
static void exec_4c4f598e5cfc58e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var6);
}

// First occurrence: fn05c62c, line 412
static void exec_05b2cc425a2a1ba7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn05c62c, line 413
static void exec_6bef97fff118af72(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn05c642, line 427
static void exec_6aae92751a37df0d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) >= (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn05c6f4, line 507
static void exec_449b1cf5a243d992(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) < (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn05c6f4, line 515
static void exec_e84eda37c3e64fa0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var0);
}

// First occurrence: fn05c7e2, line 592
static void exec_92030d7f690cb4ed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn05c82c, line 630
static void exec_0432cb9dbe18fdab(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = (uint8)~context.getParameter<int64>(16);
	const uint8 var4 = ((uint8)(var1) & (uint8)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var4);
}

// First occurrence: fn05c932, line 736
static void exec_f5f4dbe5572d79fb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: fn05c932, line 739
static void exec_a5cce145b386522d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn05c932, line 752
static void exec_9d1353a009e72e1f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05c972, line 783
static void exec_95d79b1f9a046a58(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn05c972, line 784
static void exec_96bbb9851746b4f5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn05ca1a, line 834
static void exec_ef7a8505f14d52ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn05ca5c, line 851
static void exec_1d6f5eeac51590f0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn05ca5c, line 852
static void exec_909db0d19398e8cd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn05caae, line 863
static void exec_38424a5b1f052daa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn05caae, line 864
static void exec_76e18884ab4072db(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn05caae, line 866
static void exec_3cc92da6e250ec70(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var2);
}

// First occurrence: fn05caae, line 868
static void exec_8a8353bd530413db(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var5;
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var2);
}

// First occurrence: fn05cb1c, line 895
static void exec_8b68839f06312d83(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: fn05cb1c, line 903
static void exec_07f618ab0b705840(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05cb4a, line 917
static void exec_9d964afea0c3c0cb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6));
	context.moveValueStack(1);
}

// First occurrence: fn05cb6a, line 930
static void exec_f0bdcb226ccb5d10(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn05cb6a, line 931
static void exec_68c91a7eedeaf523(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7, (uint32)var4);
}

// First occurrence: fn00c006, line 30
static void exec_0fbe01e00d221d2b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn00c006, line 31
static void exec_f5237ecb3044dc08(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) >> (uint32)((var3) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn00c890, line 77
static void exec_7a825d2f0fd6c597(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00c890, line 78
static void exec_689a869fc4053a49(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn00c890, line 83
static void exec_297179e293b84b08(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var1) >= (int8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn00c890, line 104
static void exec_73dcda5619fab704(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn00c890, line 116
static void exec_7268199a82d94711(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn00c890, line 117
static void exec_c59ca658ca199a10(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn00c890, line 128
static void exec_cf8c6b8c2974f8eb(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn00c97a, line 157
static void exec_f6a8eb35a3bfd6b0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: fn00c97a, line 165
static void exec_9ec25470bc2aa60d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
}

// First occurrence: fn00c97a, line 175
static void exec_0e10bec99340c474(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(20) = (uint32)var5;
}

// First occurrence: fn00c97a, line 185
static void exec_59134f155e6d3248(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ca14, line 221
static void exec_231a908daa8e2d3e(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ca14, line 228
static void exec_be8a686948e88560(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f)));
	context.moveValueStack(1);
}

// First occurrence: fn00ca14, line 229
static void exec_9d417e3728e1e208(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var4);
}

// First occurrence: fn00ca14, line 230
static void exec_c28a7e1c90fc22ab(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn00ca14, line 231
static void exec_d09c982718ddf255(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: DataSelect.setup, line 247
static void exec_1cc4c3e65f179d05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: DataSelect.setup, line 258
static void exec_5958b901a5505572(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: DataSelect.setup, line 350
static void exec_881a69ae7ee580a7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: DataSelect.setup, line 351
static void exec_10038d10fcc5843f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: DataSelect.setup, line 359
static void exec_5c0ae6feca1495b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: DataSelect.setup, line 359
static void exec_678e80783b4a77c3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var0);
	context.moveValueStack(-3);
}

// First occurrence: DataSelect.setup, line 360
static void exec_c319ef7b959ec218(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var0);
	context.moveValueStack(-3);
}

// First occurrence: DataSelect.update, line 392
static void exec_f376c932af54e718(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)-(signed)var0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: DataSelect.update, line 397
static void exec_c319311f81cfa6f6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.update, line 401
static void exec_09c005dbbcbda57c(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) >= (uint32)(var0)));
}

// First occurrence: DataSelect.update, line 409
static void exec_bb7312862ab44cb3(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.update, line 409
static void exec_2ae8bfeb5da33af4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(var0));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: DataSelect.update, line 412
static void exec_415c9a9a15161f7e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: DataSelect.update, line 413
static void exec_6909d8bc435853b0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) >> (uint16)((context.getParameter<int64>(12)) & 0x0f));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var8);
}

// First occurrence: DataSelect.update, line 415
static void exec_d048a6d6732108d8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) * (uint16)(var1));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(context.getParameter<int64>(8)) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(20)));
	const uint16 var8 = ((uint16)(var2) + (uint16)(var7));
	const uint16 var10 = OpcodeExecUtils::safeDivide<uint16>((uint16)var8, (uint16)context.getParameter<int64>(28));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var10);
}

// First occurrence: DataSelect.update, line 418
static void exec_f967b78e765b9963(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var7 = ((uint16)(var5) << (uint16)((context.getParameter<int64>(20)) & 0x0f));
	const uint16 var8 = ((uint16)(var4) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(28);
	const uint8 var10 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(36));
	const uint32 var12 = ((uint32)(var9) + (uint32)(var10));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var8);
	const uint8 var13 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40));
	const uint8 var15 = ((uint8)(var13) + (uint8)(context.getParameter<int64>(44)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(52), (uint8)var15);
}

// First occurrence: fn00c866, line 487
static void exec_dcb49370378657e5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00c866, line 489
static void exec_4ffe037401d68a2d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	*context.getParameter<uint32*>(8) = (uint32)var1;
}

// First occurrence: fn00c866, line 494
static void exec_a98c3b0897983f81(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var5);
}

// First occurrence: fn000c3e, line 520
static void exec_0abc711e28e36884(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)(uint32)var0);
	context.moveValueStack(1);
}

// First occurrence: fn00d1b6, line 541
static void exec_c29f1c23f3ab8fae(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn00d1b6, line 543
static void exec_b26b22b330cb2ddc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) - (uint32)(var2));
	*context.getParameter<uint32*>(8) = (uint32)var3;
}

// First occurrence: fn00d1b6, line 549
static void exec_cbd2bec52b6ecb04(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) > (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1b6, line 549
static void exec_bf97679aae818c13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) <= (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1b6, line 564
static void exec_de2cd73a9e49c4dc(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: fn00d1fa, line 598
static void exec_85688e54ebce9d80(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 610
static void exec_4e553ca78e2c941f(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)-(signed)context.getParameter<int64>();
	*context.getParameter<uint32*>(8) = (uint32)var1;
}

// First occurrence: fn00d1fa, line 629
static void exec_5f62b0d573e624a9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 644
static void exec_89b744d811a5e8c1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: fn00d1fa, line 645
static void exec_4a45a1db24a3f4a1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 647
static void exec_5bab1631d226639a(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-2, (int16)((int16)(context.readValueStack<int16>(-2)) > (int16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 649
static void exec_d7d7d05b0bd59ebf(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: fn00d1fa, line 650
static void exec_1d1894e02b4d76ad(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int16>(1, (int16)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn00d1fa, line 650
static void exec_e4d7b3e76d3916a5(const RuntimeOpcodeContext context)
{
	const int16 var0 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(context.readValueStack<int16>(-1)));
	context.writeValueStack<int16>(-3, (int16)((int16)(context.readValueStack<int16>(-3)) > (int16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1fa, line 652
static void exec_8af2cb530c62d2f4(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: fn00d1fa, line 656
static void exec_bc1f57eee02da242(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: fn00d1fa, line 662
static void exec_a7c46930c202e1ec(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-2, (int16)((int16)(context.readValueStack<int16>(-2)) < (int16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 665
static void exec_feea614917bc3d90(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)-(signed)context.readValueStack<int16>(-1);
	context.writeValueStack<int16>(-2, (int16)((int16)(context.readValueStack<int16>(-2)) < (int16)(var0)));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 684
static void exec_094681d2216b7965(const RuntimeOpcodeContext context)
{
	*context.getParameter<int16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: fn00d1fa, line 688
static void exec_380619ddfe534cc8(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)-(signed)context.getParameter<int64>();
	*context.getParameter<int16*>(8) = (uint16)var1;
}

// First occurrence: DataSelect.sharedNewGameStartup, line 723
static void exec_0ec75504afb9279d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) % (uint32)(context.getParameter<int64>()));
	const uint32 var2 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var1));
	const int8 var3 = (uint8)var2;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var3);
	context.moveValueStack(-2);
}

// First occurrence: fn00d30c, line 736
static void exec_af65953b02cb2abd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const int8 var3 = (uint8)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn00d30c, line 742
static void exec_e4c47f28e8374967(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var0);
}

// First occurrence: fn00d30c, line 757
static void exec_2a8a22d32d0da2d9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn00d30c, line 766
static void exec_f60de72af57f8200(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn00d39e, line 786
static void exec_782803d55dabd970(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn00d39e, line 787
static void exec_2d7ee39442a406a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: fn00d39e, line 789
static void exec_b3a48993df862139(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn00d39e, line 792
static void exec_b371657899fe40ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn00d39e, line 800
static void exec_f6b2f2b4a3e053da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) < (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d42c, line 823
static void exec_d4a9d7bbf1121460(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn00d42c, line 824
static void exec_3f7191efbfeeba70(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d42c, line 832
static void exec_d360df97349c9e40(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d42c, line 839
static void exec_cc769e12b8390a7e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var3);
}

// First occurrence: fn00d42c, line 842
static void exec_0204b6fdff4c9647(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: fn00d42c, line 843
static void exec_b316af0d5b89a7e5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var3 = (uint8)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn00d42c, line 844
static void exec_68dabec593ebac50(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: fn00d42c, line 852
static void exec_ae894f0a90d701bb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn00d42c, line 869
static void exec_a602a040ffe6b4ce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const int8 var6 = (uint8)var5;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn00d458, line 903
static void exec_657e3b6f37dcf999(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 906
static void exec_bd90822d9928d367(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 908
static void exec_d2fc6c25a6ae6029(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn00d458, line 906
static void exec_ddc1ec5fa99de434(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 921
static void exec_14bab8f9f17ebdb5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 956
static void exec_080509cf74298d00(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 970
static void exec_a89095983d914e60(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 983
static void exec_b88d7f454a1b3621(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1011
static void exec_722d1e99b52c63fc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1021
static void exec_6201ae173fd14653(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: fn00d458, line 1022
static void exec_f9c1f6b9b7f2819a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), (uint8)var5);
}

// First occurrence: fn00d458, line 1024
static void exec_fd6d2b5aa518a6e4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn00d458, line 1030
static void exec_24de38ec5f960335(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var3);
}

// First occurrence: fn00d458, line 1042
static void exec_62d690621d608d05(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1045
static void exec_2d361b303c5ec508(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) > (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1049
static void exec_504ec1d8ea72e5de(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var3);
}

// First occurrence: fn00d458, line 1059
static void exec_418ca037251ad010(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(16));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var4);
}

// First occurrence: fn00d458, line 1060
static void exec_e2ab939a01eb427b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var4);
}

// First occurrence: fn00d458, line 1061
static void exec_821e800c00cd1a75(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) == (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1064
static void exec_8b8dfb4050dab92e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(4), (uint32)var1);
}

// First occurrence: fn00d458, line 1065
static void exec_a2842ecc9ab88a4e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(8));
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	const uint32 var6 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var6);
}

// First occurrence: fn00d69e, line 1082
static void exec_c8c5c6762fee92af(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn00d69e, line 1083
static void exec_1b8888c8ce44e8d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn00d69e, line 1089
static void exec_710654f27000830d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn00d6d0, line 1122
static void exec_efc50c7e6fe8c312(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d6d0, line 1122
static void exec_55529bf12b93c46c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d6d0, line 1127
static void exec_061c6c4129da47cc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d6d0, line 1127
static void exec_626e3f1ba93f93ef(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) - (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d70c, line 1149
static void exec_8a1326e4d04aa707(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn00d70c, line 1164
static void exec_d2507bb3bb9b950b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn00d70c, line 1173
static void exec_7e0d4ba884332b00(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn00d70c, line 1174
static void exec_a7684a139c711ab7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: fn00d782, line 1194
static void exec_470b1deb3b40006c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var3) + (uint64)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d7c0, line 1268
static void exec_66cfe51595388a2d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d854, line 1344
static void exec_5cf414505857407f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn00d884, line 1357
static void exec_ef3ad40b2048c941(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn00d884, line 1357
static void exec_8ca3ddc263cc8ac4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn00d8c4, line 1415
static void exec_b2c5d19f220986cf(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)context.getParameter<int64>());
}

// First occurrence: fn00d8c4, line 1420
static void exec_b4b2eab37ac4f111(const RuntimeOpcodeContext context)
{
	const uint8 var2 = *context.getParameter<uint8*>(16);
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var2) - (uint32)(var4));
	const uint32 var6 = ((uint32)(context.getParameter<int64>(8)) * (uint32)(var5));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(context.getParameter<int64>()) + (uint32)(var6)));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: fn00d912, line 1437
static void exec_79343e2f2c242a12(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) < (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00d912, line 1445
static void exec_a204d49525d8c536(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn00d912, line 1446
static void exec_a510f527a52f45d6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn00d94a, line 1464
static void exec_7505cdd796dfc9c3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn00d96a, line 1481
static void exec_29900a5337a99c55(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
}

// First occurrence: fn00d96a, line 1483
static void exec_b3875b56b8cc3dc2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)var3;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: fn00d96a, line 1485
static void exec_d66746297549ee4c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1485
static void exec_f96d8916ac8add69(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1487
static void exec_8ad1294956f9835c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1489
static void exec_7b7d2c4facec5f03(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) - (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var7;
}

// First occurrence: fn00d96a, line 1494
static void exec_aec5913b2a237675(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1495
static void exec_7106a2f45bfe4976(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1513
static void exec_adaae573ead3338a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var5;
}

// First occurrence: fn00d9f4, line 1529
static void exec_e0c06d58cdc47925(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	*context.getParameter<uint8*>(8) = (uint8)var1;
}

// First occurrence: fn00da4e, line 1590
static void exec_100b27a171b4fe29(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: DataSelect.drawCustomPlanes, line 1602
static void exec_3f148af9c4b9e971(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: DataSelect.drawCustomPlanes, line 1605
static void exec_204fe8f4ee8a2a38(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: DataSelect.drawCustomPlanes, line 1609
static void exec_f2ddd97a18ab5ebf(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: DataSelect.drawCustomPlanes, line 1609
static void exec_605daeddc54db30d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(var0)));
}

// First occurrence: DataSelect.drawCustomPlanes, line 1614
static void exec_48308cd1b5098c7e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(2, (int16)((uint16)(context.getParameter<int64>()) - (uint16)(var1)));
	context.moveValueStack(3);
}

// First occurrence: LevelSelect.init, line 88
static void exec_9b0ee68647d7ef74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: LevelSelect.init, line 89
static void exec_af31153336de5d0e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: LevelSelect.init, line 94
static void exec_0e6fe8bdb02c9fe4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
	const uint32 var11 = ((uint32)(var9) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var5);
}

// First occurrence: LevelSelect.init, line 98
static void exec_91ed4dc3129cd453(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: LevelSelect.init, line 111
static void exec_b23ee218d44c3b4f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: LevelSelect.init, line 157
static void exec_9d0a9cb2aefa7edd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) + (uint16)(context.getParameter<int64>(8))));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var6) + (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.init, line 166
static void exec_ca945598283e34b7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f)));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.init, line 167
static void exec_bb0bf2d93cd500fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.innerUpdate, line 215
static void exec_4b97b0011dbd1aca(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) & (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.innerUpdate, line 219
static void exec_84224d4b0fa4be79(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.innerUpdate, line 226
static void exec_7464da9e3099b2d8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) == (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: LevelSelect.innerUpdate, line 230
static void exec_8c87fbf63400851b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: LevelSelect.innerUpdate, line 237
static void exec_3d5f48122e02ad3e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.startGame, line 314
static void exec_f4c5226f315404ea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(4), (uint16)var0);
}

// First occurrence: fn007d6c, line 403
static void exec_e120f764cf6e10d1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn007f62, line 414
static void exec_34b0cfef7f704f7f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn007f62, line 415
static void exec_8f484a1254382b25(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = 1;
	const uint32 var7 = ((uint32)(var5) + (uint32)(var6));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint32 var10 = ((uint32)(var4) + (uint32)(var8));
	*context.getParameter<uint32*>(24) = (uint32)var10;
}

// First occurrence: fn007f62, line 424
static void exec_1bf4c10bc64695f2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn007f62, line 433
static void exec_3779eb614d948219(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var9 = ((uint32)(var3) + (uint32)(var7));
	*context.getParameter<uint32*>(24) = (uint32)var9;
}

// First occurrence: fn007f62, line 434
static void exec_10b2fe610a3271dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn007f62, line 436
static void exec_e7938612dcfe13ee(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = 1;
	const uint32 var9 = ((uint32)(var7) + (uint32)(var8));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint32 var12 = ((uint32)(var6) + (uint32)(var10));
	*context.getParameter<uint32*>(32) = (uint32)var12;
}

// First occurrence: fn007f62, line 447
static void exec_7e2fed560ba49715(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f)));
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(16));
	context.moveValueStack(2);
}

// First occurrence: fn007f62, line 448
static void exec_60e0813e4ebf7b59(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(16));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.writeHexDigit, line 459
static void exec_6f9658d61ba6c092(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: LevelSelect.writeHexDigit, line 461
static void exec_ec876e9e3ee80fd9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)(uint8)var0);
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var1) >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.writeHexDigit, line 461
static void exec_e16e4d9e3dbccb13(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn007e64, line 471
static void exec_b0275e96707c2dce(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var2 = 1;
	const int64 var4 = ((uint64)(var2) | (uint64)(context.getParameter<int64>(8)));
	const int64 var5 = ((uint64)(var0) & (uint64)(var4));
	const int64 var6 = 0;
	context.writeValueStack<int64>(0, (int64)((uint64)(var5) == (uint64)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 474
static void exec_1c56cd4a56779196(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	const int16 var2 = ((int16)(var0) >= (int16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn007e64, line 483
static void exec_01a101d08760e841(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 489
static void exec_d03ba049ff813ccb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 500
static void exec_4d9f24cf77264d4b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 505
static void exec_0294d36c51b5f6db(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn007e64, line 509
static void exec_417ba336c1e777c2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn007e64, line 523
static void exec_2f0cb1f65fc64c27(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var4 = ((uint64)(context.getParameter<int64>(8)) | (uint64)(context.getParameter<int64>(16)));
	context.writeValueStack<int64>(0, (int64)((uint64)(var0) & (uint64)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 525
static void exec_1b3960c7dead869b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn007e64, line 540
static void exec_a4b1e63fec385b3b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Menu.FadeInAfterInit, line 14
static void exec_41539d1b8302be9e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var0);
}

// First occurrence: Menu.FadeInAfterInit, line 33
static void exec_63357f1c04b53513(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var1) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	const uint8 var3 = *context.getParameter<uint8*>(32);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(40)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(48)));
	context.writeValueStack<uint16>(5, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var8, (uint16)context.getParameter<int64>(56)));
	context.moveValueStack(6);
}

// First occurrence: Menu.FadeInAfterInit, line 49
static void exec_97946c6ad467dbaa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	*context.getParameter<uint16*>(4) = (uint16)var0;
}

// First occurrence: fn000780, line 32
static void exec_df4b302fb1ec7c68(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) == (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn0043d4, line 51
static void exec_0e746eec28690698(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0043d4, line 53
static void exec_326c77d4ef01c16d(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn0043d4, line 67
static void exec_53c3659228bad0e8(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int8 var1 = 1;
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
}

// First occurrence: fn00440c, line 77
static void exec_fa620799daf3413b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn00440c, line 84
static void exec_17596a92b61a3467(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00440c, line 86
static void exec_d949ffa45efccecb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: fn00440c, line 87
static void exec_472864d608e2d250(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn00440c, line 91
static void exec_39915505e643a3d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(12));
	context.moveValueStack(3);
}

// First occurrence: fn00440c, line 101
static void exec_30b730e7b0b9092d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00440c, line 117
static void exec_3849bac360eeec4b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	const int64 var1 = 0;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: TitleScreen, line 138
static void exec_0c2e218df70a96fe(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var0);
	context.moveValueStack(-1);
}

// First occurrence: TitleScreen, line 211
static void exec_fbe6507c4d34adb0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) >> (uint16)((var1) & 0x0f)));
	context.moveValueStack(3);
}

// First occurrence: TitleScreen, line 249
static void exec_47df1a4db8a12fc3(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var1) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(32));
	context.moveValueStack(6);
}

// First occurrence: TitleScreen, line 265
static void exec_87b438ff5094ec79(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) == (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 277
static void exec_2e22d2b41101f32b(const RuntimeOpcodeContext context)
{
	const int16 var0 = 0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
}

// First occurrence: TitleScreen, line 281
static void exec_23a318994f00c450(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
}

// First occurrence: TitleScreen, line 304
static void exec_bdc95334607ffcf7(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 315
static void exec_dc3241de43709c58(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: TitleScreen, line 316
static void exec_d826505e67e24f2f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int8 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)var2);
}

// First occurrence: TitleScreen, line 328
static void exec_e3b400b3d8515c86(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 338
static void exec_abfe1dc2af59aa63(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = *context.getParameter<uint8*>(4);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 397
static void exec_856e858767da4a1f(const RuntimeOpcodeContext context)
{
	const int16 var0 = 0;
	*context.getParameter<int16*>() = (uint16)var0;
}

// First occurrence: TitleScreen, line 416
static void exec_7d87f93452c43a37(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 473
static void exec_6f5b19f46aba46c8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: TitleScreen, line 474
static void exec_232fc0ab4e099f78(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn0007ba, line 553
static void exec_44114c6c76d04d88(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)context.getParameter<int64>(16));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: fn0007ba, line 554
static void exec_1df474c839d889a9(const RuntimeOpcodeContext context)
{
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var3 = ((uint16)(context.getParameter<int64>(8)) - (uint16)(var2));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	const uint16 var6 = ((uint16)(context.getParameter<int64>(20)) - (uint16)(var5));
	const uint16 var7 = ((uint16)(var3) * (uint16)(var6));
	const uint16 var9 = OpcodeExecUtils::safeDivide<uint16>((uint16)var7, (uint16)context.getParameter<int64>(32));
	const uint16 var10 = ((uint16)(context.getParameter<int64>()) - (uint16)(var9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: fn0007ba, line 559
static void exec_f5581765ea99c059(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5));
	context.moveValueStack(1);
}

// First occurrence: fn0007ba, line 560
static void exec_78e8b997de360e12(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: fn0007ba, line 561
static void exec_bbe13465a7cf45f8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0007ba, line 561
static void exec_00401af18d0a0adc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) | (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: fn0007ba, line 563
static void exec_d99a3d692747eabf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: fn0007ba, line 566
static void exec_0fb221bae52c9c9c(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: fn0007ba, line 569
static void exec_c670506570b79424(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	*context.getParameter<int16*>(4) = (uint16)var0;
}

// First occurrence: fn004352, line 602
static void exec_9dfddd0250618af8(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 1;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn004352, line 602
static void exec_fd482708d31e63dc(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn004352, line 635
static void exec_2b3fffe1bc8e156b(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) ^ (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: fn00486c, line 679
static void exec_b157d7a1fdecb75a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int32 var10 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var11 = ((uint32)(var3) + (uint32)(var10));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var11);
}

// First occurrence: fn00486c, line 698
static void exec_a01994d3accb3af2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const int16 var5 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn00486c, line 701
static void exec_1b90187e60376422(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = 1;
	const int16 var5 = ((int16)(var3) >> (int16)((var4) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn00486c, line 705
static void exec_a0be288a3111bf3e(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = ((uint16)(context.getParameter<int64>()) - (uint16)(var4));
	*context.getParameter<int16*>(24) = (uint16)var5;
}

// First occurrence: fn0048dc, line 730
static void exec_e43db65335809c30(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn0048dc, line 733
static void exec_740ae741de39383f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var7);
}

// First occurrence: fn0048dc, line 741
static void exec_ca40e634ff8d3d04(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int8 var1 = 1;
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: fn0048dc, line 742
static void exec_578f768ebc1188e8(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn0048dc, line 744
static void exec_82c1dd787ee951ba(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn0048dc, line 745
static void exec_4c7f93813b512975(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: fn0048dc, line 746
static void exec_9477eb2e01b97c3b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: fn0048dc, line 748
static void exec_704b7f5a9c8c6d78(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 750
static void exec_06a00a350e73ed9e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 752
static void exec_5183255a55404cdb(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(4)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::safeDivide<int16>((int16)var2, (int16)context.getParameter<int64>(12)));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 752
static void exec_9504e2fc121abc21(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int16 var4 = ((int16)(var2) * (int16)(context.getParameter<int64>(12)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::safeDivide<int16>((int16)var4, (int16)context.getParameter<int64>(20)));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 752
static void exec_76e807f1619e60b5(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn0048dc, line 753
static void exec_5187131efdf9da8b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, (int64)0);
	context.writeValueStack<uint8>(7, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(8);
}

// First occurrence: fn0048dc, line 756
static void exec_ed1b3165f5de1dd5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const int16 var3 = ((uint16)(context.getParameter<int64>(16)) - (uint16)(var2));
	context.writeValueStack<int16>(1, (int16)((int16)(var3) * (int16)(context.getParameter<int64>(28))));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: fn0048dc, line 756
static void exec_7bd9537460ea46e4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(-2, (int16)((uint16)(context.readValueStack<int16>(-2)) + (uint16)(context.readValueStack<int16>(-1))));
	context.writeValueStack<int64>(-1, (int64)0);
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.moveValueStack(2);
}

// First occurrence: fn0048dc, line 759
static void exec_35210cb4f2073ff1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn0048dc, line 763
static void exec_3336f4b581918caa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: fn004a88, line 799
static void exec_9cb9d93448f37290(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 1;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn004a88, line 804
static void exec_d4f224dea25955ec(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>() = (uint8)context.readValueStack<uint8>(-1);
	context.moveValueStack(-1);
}

// First occurrence: fn004a88, line 817
static void exec_08117b2ae4097700(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn004a88, line 824
static void exec_98ced1fd283c4093(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) != (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn00499c, line 898
static void exec_8da9f3b17e1f216c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn004a1e, line 912
static void exec_8801f7ebcf2bd834(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn004b16, line 953
static void exec_d3683e5b68ba7d97(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn004be4, line 1016
static void exec_3dfeefd5094ad442(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: TitleScreen_SK, line 56
static void exec_666e759fb0eb44ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: TitleScreen_SK, line 74
static void exec_e960aa66a4c5a45e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var1) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(40));
	const uint16 var5 = ((uint16)(context.getParameter<int64>(32)) - (uint16)(var4));
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var5) * (uint16)(context.getParameter<int64>(48))));
	context.writeValueStack<int64>(6, (int64)context.getParameter<int64>(56));
	context.moveValueStack(7);
}

// First occurrence: TitleScreen_SK, line 115
static void exec_33b01f846b85bbc2(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen_SK, line 117
static void exec_f6b03e65c41ecfb5(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: TitleScreen_SK, line 128
static void exec_8ccf17bf81a7c822(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen_SK, line 133
static void exec_4065ceaee8daec77(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen_SK, line 154
static void exec_c1f7d4946481af4d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var1);
}

// First occurrence: TitleScreen_SK, line 155
static void exec_2cccdf8d756a4f42(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var1);
}

// First occurrence: TitleScreen_SK, line 231
static void exec_47c6d7bda29731ed(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var5);
}

// First occurrence: fn00565a, line 361
static void exec_e1ff2c4ffc411429(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) != (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00565a, line 366
static void exec_fcf986db32242700(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) | (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn0057a2, line 497
static void exec_3b751081047379ce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: fn0057a2, line 512
static void exec_daf316247ba5f265(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var3);
}

// First occurrence: fn005802, line 532
static void exec_bcc0b3c0527968e9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: fn005802, line 533
static void exec_ea805b896cd18f56(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn005802, line 544
static void exec_d1d3e17cb9b4052f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00587c, line 588
static void exec_e4badf1ef0947665(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var3) - (uint16)(context.getParameter<int64>(24))));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var8) - (uint16)(context.getParameter<int64>(48))));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(56));
	context.moveValueStack(6);
}

// First occurrence: fn00587c, line 589
static void exec_9c76537a39fc71f7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(context.getParameter<int64>(8)) - (uint16)(var2)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn0058f0, line 623
static void exec_b348a323a5033d0c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<int32*>(16) = (uint32)var3;
}

// First occurrence: fn0058f0, line 625
static void exec_c90343a104274902(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: fn0058f0, line 658
static void exec_4788e0676c8fdd7d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(context.getParameter<int64>()) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn005a50, line 730
static void exec_e986b73588310670(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var3);
}

// First occurrence: fn005a50, line 735
static void exec_7ad359bde386778d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var1);
}

// First occurrence: fn005a50, line 736
static void exec_1b9719aae857e951(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(8) = (uint32)var3;
}

// First occurrence: fn005a50, line 737
static void exec_0ecff034086dc57c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const int32 var5 = ((uint32)(var3) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint8*>(16) = (uint8)var6;
}

// First occurrence: fn005a50, line 743
static void exec_80675978bf3d5917(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn005a50, line 744
static void exec_779df02a14596db5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint8*>(8) = (uint8)var3;
}

// First occurrence: fn005a50, line 755
static void exec_b3f56307aed1bd15(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn005a50, line 756
static void exec_eb1f72dfc7451b28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var5 = ((uint8)(var3) - (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn005a50, line 757
static void exec_00ae56fd5e8b56ab(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn005a50, line 762
static void exec_83c6d5da902d1e65(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn005a50, line 763
static void exec_f0f2f33f5a0476d7(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int16 var3 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn005ae4, line 783
static void exec_e9129d8231662579(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var3);
}

// First occurrence: fn005ae4, line 787
static void exec_203bb28d93c3c8de(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) & (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: fn005ae4, line 788
static void exec_9dda20f407e31f73(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) >> (uint8)((var1) & 0x07));
	const uint8 var3 = *context.getParameter<uint8*>(8);
	const uint8 var5 = ((uint8)(var3) << (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var6 = ((uint8)(var2) + (uint8)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn005b42, line 800
static void exec_1dd325fb12e73328(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn005b42, line 806
static void exec_41bb50de14dde829(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) - (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn005b42, line 807
static void exec_0db9f4fd9d3812b2(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: fn005b42, line 811
static void exec_1e9fda0deae41f1a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	*context.getParameter<uint8*>() = (uint8)var0;
}

// First occurrence: fn005b42, line 817
static void exec_334ed8b77b79a2d4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)context.getParameter<int64>());
}

// First occurrence: fn005b42, line 835
static void exec_3e3e4ac64a205ba9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: fn005b42, line 838
static void exec_c7efb107ab74960f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn005b42, line 840
static void exec_b7bab96e58de5968(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	*context.getParameter<int32*>(16) = (uint32)var3;
}

// First occurrence: fn005b42, line 842
static void exec_20bd6f9bf9e044bf(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var2;
}

// First occurrence: fn005b42, line 844
static void exec_c5ed41bfc9a50aac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn005b42, line 850
static void exec_654c06c4d694a134(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) - (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn005b42, line 853
static void exec_0ba692545dec13fe(const RuntimeOpcodeContext context)
{
}

// First occurrence: fn005b42, line 872
static void exec_d1bd6b51f4e20b0f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn005c42, line 901
static void exec_a6176e133dba0200(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn005ce2, line 967
static void exec_b284913a69ac5071(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn005ce8, line 977
static void exec_74a4be3af5992b3b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn005ce8, line 981
static void exec_9e70631f8dc4536f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn005d62, line 1062
static void exec_1d4bdcb8d82c015a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn005d62, line 1063
static void exec_01fd245825ea2674(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: fn005d62, line 1064
static void exec_bcd36e16766cf104(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var3);
}

// First occurrence: fn005d94, line 1088
static void exec_fefd766b47bb3854(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn005d94, line 1094
static void exec_cca9c9b0e77b0ba0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn005d94, line 1101
static void exec_e4cd4080fcb069b7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn005d94, line 1142
static void exec_9eaeb4e42422dbac(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = (uint16)-(signed)var0;
	*context.getParameter<uint16*>(8) = (uint16)var1;
}

// First occurrence: fn005d94, line 1146
static void exec_2c632dab4a6c1eda(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var1) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var7);
}

// First occurrence: fn005d94, line 1154
static void exec_d0d7bea7f017d485(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var1) - (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var7);
}

// First occurrence: fn005d94, line 1159
static void exec_9ad501e134863df5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(28)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(36), (uint8)var5);
}

// First occurrence: fn005d94, line 1164
static void exec_631638fe374d3cc3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: fn005d94, line 1175
static void exec_cb5268c8e63c7f66(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-2)) - (uint32)(var0));
	*context.getParameter<uint32*>() = (uint32)var1;
	context.moveValueStack(-2);
}

// First occurrence: fn005d94, line 1178
static void exec_73a9e35b6c2b37b8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn005d94, line 1186
static void exec_4cd07d4061c6ea4e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var0);
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40));
	const int8 var7 = 1;
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), (uint8)var8);
}

// First occurrence: UpdateCamera, line 33
static void exec_1ff6c58e618ca559(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)(uint16)!var0);
	context.moveValueStack(1);
}

// First occurrence: UpdateCamera, line 37
static void exec_096e4fa8b3e5ab5b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)(uint8)!var0);
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 107
static void exec_bd440ec9e48c7546(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var1);
}

// First occurrence: UpdateCameraPositionX, line 120
static void exec_0f9dce7301eba9d8(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_6965b00d0a9cc2d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) >= (uint16)(context.getParameter<int64>())));
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_9d2639015e38d063(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	const int16 var0 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(1, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_d98a9ab0bc384fc2(const RuntimeOpcodeContext context)
{
	const int16 var0 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(context.readValueStack<int16>(-1)));
	*context.getParameter<int16*>() = (uint16)var0;
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_2f1aaee1be3523eb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	const int16 var0 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(1, (int16)(uint16)-(signed)var0);
	const int64 var1 = 1;
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)var1);
	context.writeValueStack<int64>(3, (int64)1);
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 126
static void exec_3d9ff677bc5a1964(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: UpdateCameraPositionX, line 136
static void exec_ba6fc5a945d29605(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) > (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 138
static void exec_af97e7524d59084c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: UpdateCameraPositionX, line 139
static void exec_22a7141080897877(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: UpdateCameraPositionX, line 140
static void exec_358056307f704768(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint16 var6 = ((uint16)(var3) - (uint16)(var4));
	const int8 var7 = (uint8)var6;
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: UpdateCameraPositionX, line 141
static void exec_fe4a0926727797db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: UpdateCameraPositionX, line 145
static void exec_1922333c772bc13f(const RuntimeOpcodeContext context)
{
	const int64 var0 = 0;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) != (uint32)(var0)));
}

// First occurrence: UpdateCameraPositionX, line 147
static void exec_36c28c14a5932564(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 153
static void exec_2fccaf5b34abe4a5(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) == (uint32)(var0)));
}

// First occurrence: UpdateCameraPositionX, line 159
static void exec_0f886021f6cd99ff(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 163
static void exec_588628d9af09e56f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) & (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 163
static void exec_03963ab91fd65d96(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)(uint64)-(signed)context.getParameter<int64>());
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 169
static void exec_6445e0246accef7f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 169
static void exec_04d60cc2656e74ec(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_42813442d0dc3733(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var5 = (uint64)-(signed)context.getParameter<int64>(16);
	const int16 var6 = (uint16)var5;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_53508846a38ba606(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 1;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_149f88f9f167a46d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >= (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_073422442b3a5544(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 1;
	const int64 var2 = (uint64)-(signed)var1;
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 182
static void exec_b389c50365150b64(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(12));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 182
static void exec_a582a91a39dfe89d(const RuntimeOpcodeContext context)
{
	*context.getParameter<int16*>() = (uint16)context.readValueStack<int16>(-1);
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 189
static void exec_0d4b705fd5bdf1f3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(var4)));
	context.moveValueStack(2);
}

// First occurrence: UpdateCameraPositionX, line 193
static void exec_e848d0165930132d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: UpdateCameraPositionX, line 194
static void exec_d26cb69d86cb0ebb(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: UpdateCameraPositionX, line 195
static void exec_cf61a3280884a344(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const int16 var2 = ((int16)(var0) < (int16)(var1));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) > (int16)(var4));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 197
static void exec_6a9d826868ebc1af(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(12));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(20));
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 200
static void exec_7b07ad9f962d924c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 207
static void exec_eac9128498d8a92b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 208
static void exec_e6ae6d3dd28558a4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var2);
}

// First occurrence: UpdateCameraPositionX, line 213
static void exec_435fd28d92b44a01(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) > (uint16)(context.getParameter<int64>())));
}

// First occurrence: UpdateCameraPositionX, line 215
static void exec_3799c9db3d218f0d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int64 var1 = 0;
	context.writeValueStack<int16>(1, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: UpdateCameraPositionX, line 215
static void exec_375c0a2b0ce2f2ae(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int16 var1 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(var0));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)var1);
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 216
static void exec_c04eb2790ca3681c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: UpdateCameraPositionX, line 218
static void exec_9c4be3e6152cc56a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 222
static void exec_75319ad6a9c2344b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 223
static void exec_a28453606dfd160e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) > (uint16)(var0)));
}

// First occurrence: UpdateCameraPositionX, line 226
static void exec_6a25b32eda002be1(const RuntimeOpcodeContext context)
{
	const int16 var0 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(context.readValueStack<int16>(-1)));
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(-2, (int16)((uint16)(var0) - (uint16)(var1)));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>(4));
}

// First occurrence: UpdateCameraPositionX, line 230
static void exec_1fb5475bbeb88c71(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(1, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 233
static void exec_741fa7bea86dcb4d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-2, (int16)((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 234
static void exec_3ec878958a6b2e5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 256
static void exec_e17663203c185192(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: UpdateCameraPositionX, line 257
static void exec_d249a779648131e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var4);
}

// First occurrence: UpdateCameraPositionY, line 264
static void exec_c203332e00560a14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var3) - (uint16)(var5));
	*context.getParameter<int16*>(24) = (uint16)var6;
}

// First occurrence: UpdateCameraPositionY, line 267
static void exec_76215e423947f243(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = ((uint16)(var0) & (uint16)(var1));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateCameraPositionY, line 271
static void exec_b21713dc9d06df1f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateCameraPositionY, line 276
static void exec_9e0d79cc6a524d2f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) == (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 278
static void exec_c73f7fe3f008badb(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(16));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 285
static void exec_bde531833d983a25(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: UpdateCameraPositionY, line 291
static void exec_72c5f87dc1f38f1a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const int16 var3 = ((uint16)(context.getParameter<int64>(8)) - (uint16)(var2));
	const int16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: UpdateCameraPositionY, line 317
static void exec_bef3d04b7bc2722b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateCameraPositionY, line 358
static void exec_876c287e80dbbb5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: UpdateCameraPositionY, line 359
static void exec_0163529e5ec667d0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 361
static void exec_0c7a12f842e17442(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var3;
}

// First occurrence: UpdateCameraPositionY, line 362
static void exec_4af329a462642f80(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: UpdateCameraPositionY, line 359
static void exec_b50b07fc225399f7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = (uint16)-(signed)var1;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 367
static void exec_9b7696ea972cdce1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int32 var4 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var4;
}

// First occurrence: UpdateCameraPositionY, line 374
static void exec_deb7d92e7d8cd40e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) + (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: UpdateCameraPositionY, line 379
static void exec_8018648b575de573(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 381
static void exec_10b9f8aee1f69f74(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 393
static void exec_66843e365c90de1d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 395
static void exec_1ca66ebdf4d62e1e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
}

// First occurrence: UpdateCameraPositionY, line 399
static void exec_92d09f4d30599785(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: UpdateCameraPositionY, line 408
static void exec_b89288aca6e8ae43(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	*context.getParameter<uint16*>(8) = (uint16)var1;
}

// First occurrence: UpdateCameraPositionY, line 410
static void exec_9f90cac0c73f991f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1);
	const uint32 var3 = ((uint32)(var0) - (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: UpdateCameraPositionY, line 411
static void exec_f92f726a291fa809(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var6 = ((uint32)(var2) + (uint32)(var5));
	*context.getParameter<uint32*>(32) = (uint32)var6;
}

// First occurrence: UpdateCameraPositionY, line 413
static void exec_a46e39a33330042f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 441
static void exec_50ad54ee8bffa651(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var2);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 445
static void exec_29626f16f98b6e4c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: UpdateCameraPositionX_CompMode, line 453
static void exec_6e5aec7e0fc2ae8d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) - (uint16)(var2));
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) & (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 453
static void exec_5d8aa8c14631079d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 478
static void exec_5d644e3de49db548(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) - (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: UpdateCameraPositionX_CompMode, line 479
static void exec_7aed61f84e200bde(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: Enigma.Decompress, line 31
static void exec_d11bc4b8429208be(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: Enigma.Decompress, line 32
static void exec_978f5c2b272ffe7c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var9 = ((uint32)(var6) + (uint32)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: Enigma.Decompress, line 34
static void exec_c2b21eda2fa9f706(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) << (uint8)((context.getParameter<int64>(8)) & 0x07));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: Enigma.Decompress, line 35
static void exec_778e24c5f8b1c5d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint16 var12 = ((uint16)(var6) + (uint16)(var10));
	*context.getParameter<uint16*>(40) = (uint16)var12;
}

// First occurrence: Enigma.Decompress, line 42
static void exec_a5b706e560793b1f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: Enigma.Decompress, line 43
static void exec_a41caecda3cf1cbc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var0) >> (uint32)((var2) & 0x1f));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const int16 var6 = (uint16)var5;
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: Enigma.Decompress, line 54
static void exec_0504023546b15a40(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn00195a, line 149
static void exec_55e78c4a751b4c5a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn001972, line 170
static void exec_222b0ca11221b31a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn001972, line 172
static void exec_cacaac73e152ee72(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) | (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn001972, line 212
static void exec_80ec534a8e2f34e3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)var1;
	const uint16 var3 = ((uint16)(var0) >> (uint16)((var2) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn001972, line 214
static void exec_6a254f83ebe7359c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) & (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn001972, line 224
static void exec_7bc23b7ebbf63b54(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)var1;
	const uint16 var3 = ((uint16)(var0) << (uint16)((var2) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn001972, line 226
static void exec_229b2e766a270c69(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) << (uint8)((var1) & 0x07));
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(32);
	const uint8 var6 = ((uint8)(context.getParameter<int64>(24)) - (uint8)(var5));
	const uint8 var7 = ((uint8)(var3) >> (uint8)((var6) & 0x07));
	const uint8 var8 = ((uint8)(var2) | (uint8)(var7));
	*context.getParameter<uint8*>(40) = (uint8)var8;
}

// First occurrence: fn001a22, line 255
static void exec_bb9be0e0254908ce(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var2) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: getMainCharacter, line 31
static void exec_dc7092163abe1939(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	context.moveValueStack(2);
}

// First occurrence: isMainCharacter, line 61
static void exec_50d2af43fb00a790(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) == (uint8)(var0)));
}

// First occurrence: getNumPlayers, line 71
static void exec_75ab39378792ab44(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) == (uint8)(context.getParameter<int64>())));
}

// First occurrence: VInt, line 26
static void exec_8e2246e78a74bf89(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.getParameter<int64>());
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const int64 var4 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: VInt, line 46
static void exec_5321fc33e0ef411b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.getParameter<int64>());
	*context.getParameter<uint16*>(8) = (uint16)var1;
}

// First occurrence: VInt, line 94
static void exec_9c62cd0f76d3ca7c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.moveValueStack(1);
}

// First occurrence: VInt, line 120
static void exec_a8f6971331915339(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int8 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)var2);
}

// First occurrence: VInt.InnerUpdate, line 152
static void exec_ae977993bbed8098(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: VInt.getBlendFactorForScreenFlash, line 181
static void exec_f0031786c1cdf83a(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) <= (uint32)(var0)));
}

// First occurrence: VInt.getBlendFactorForScreenFlash, line 183
static void exec_3728305412bc10cb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var0) + (uint16)(var2));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) * (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: VInt.Update.MainGame, line 214
static void exec_0daf5c14268cb894(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 216
static void exec_ef9cdc5d78edecfc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 240
static void exec_21ad0e91de965603(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 250
static void exec_7a33b6bcab907feb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var7 = ((uint32)(var2) + (uint32)(var6));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.moveValueStack(2);
}

// First occurrence: VInt.Update.MainGame, line 259
static void exec_9e0abd653549b788(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>())));
}

// First occurrence: VInt.Update.MainGame, line 269
static void exec_38dcab5c37d41e03(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) ^ (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: VInt.Update.MainGame, line 276
static void exec_9f109317563b6683(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 280
static void exec_cd0152bd67817803(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)var0);
}

// First occurrence: VInt.Update.LevelLoading, line 349
static void exec_96bab6f29f7caeaf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) == (uint16)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: VInt.Update.LevelLoading, line 369
static void exec_8e32dae2ef1152dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) % (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 519
static void exec_93aa66c6d6f2dc0d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var7 = ((uint32)(var2) + (uint32)(var6));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.moveValueStack(2);
}

// First occurrence: HInt_000d10, line 556
static void exec_5c4c6724b57abd75(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var3);
	context.moveValueStack(-1);
}

// First occurrence: HInt_000d10, line 559
static void exec_5bd9be3b3b504a89(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(4));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 560
static void exec_7e49e6af6ab6003b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(4));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 561
static void exec_6865780a16dbc809(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 562
static void exec_3582e002e54d9f16(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 563
static void exec_ed31cd9437b67c8e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint16>(2, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.moveValueStack(3);
}

// First occurrence: HInt_000d10, line 566
static void exec_b6674e96c2d2bd39(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: HInt_000d10, line 566
static void exec_de7639b5c3ab3a09(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 567
static void exec_ce03ca22c182c6c8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 568
static void exec_e5c8fc8f8e80d889(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(20));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 570
static void exec_515a0c46865b55f7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint16>(2, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(3);
}

// First occurrence: HInt_000dd8, line 628
static void exec_b8be0d3721b42164(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: HInt_000dd8, line 651
static void exec_f7f3425c5ba3e521(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: HInt_000dd8, line 657
static void exec_29bf35bdd89d539a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(8));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
}

// First occurrence: HInt_000dd8, line 658
static void exec_d9900b69273f4144(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 659
static void exec_bae5c134685feeb7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 660
static void exec_6cd0be107e2e4412(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 670
static void exec_1df2e107224efc78(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.moveValueStack(2);
}

// First occurrence: HInt_001024, line 769
static void exec_446dd4d4b570f31f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: HInt_001024, line 770
static void exec_70304f5a9c755430(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: HInt_050056, line 822
static void exec_93dbd85093fbd5ae(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)*context.getParameter<uint8*>());
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: HInt_050056, line 823
static void exec_9633e4d08741c893(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)*context.getParameter<uint8*>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: HInt_050056, line 824
static void exec_d858d3a4bf86a3ee(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint8>(1, (uint8)*context.getParameter<uint8*>());
	context.moveValueStack(2);
}

// First occurrence: HInt_050056, line 824
static void exec_aebfe7813da55d5d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0)));
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: HInt_050056, line 825
static void exec_4619ccfdbd191f5c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0)));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: Kosinski.AddToDMAQueue, line 177
static void exec_bafe5ad8ce5d2f15(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) == (uint32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDMAQueue, line 186
static void exec_c819fe034c08fe98(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) != (uint32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDMAQueue, line 191
static void exec_89b1aa2cb635bdea(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 206
static void exec_dac6a285a14d8ac9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)var3);
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 207
static void exec_1517daa95a46474f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 210
static void exec_c29481cba0aa78cb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	context.moveValueStack(2);
}

// First occurrence: Kosinski.PrepareNextModules, line 221
static void exec_204f608a09580e3c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.PrepareNextModules, line 225
static void exec_ad321305d0413956(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const int8 var3 = (uint8)var2;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), (uint8)var3);
}

// First occurrence: Kosinski.PrepareNextModules, line 226
static void exec_61a8bb8f41d8309d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: Kosinski.PrepareNextModules, line 232
static void exec_4b4323d9ca595e06(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), (uint16)var2);
}

// First occurrence: Kosinski.ProcessModules, line 255
static void exec_d1c250796e027a94(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) | (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: Kosinski.ProcessModules, line 267
static void exec_6fe89e80b16ffc45(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: Kosinski.ProcessModules, line 272
static void exec_be199fe74c235389(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: Kosinski.ProcessModules, line 273
static void exec_d0cd8cdf229bedca(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(20)));
	const uint16 var5 = ((uint16)(var1) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var5);
}

// First occurrence: Kosinski.ProcessModules, line 274
static void exec_24a0f4383e315a57(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: Kosinski.ProcessModules, line 275
static void exec_c259dd2346485a3e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var2);
}

// First occurrence: Kosinski.ProcessModules, line 278
static void exec_d9260d0e3c22c19b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: Kosinski.ProcessModules, line 295
static void exec_3e9cf2513371f1d6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 320
static void exec_a0bb45523be68512(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var5);
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 321
static void exec_e8be27a3aca69890(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 322
static void exec_a2764a082ced9923(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: Kosinski.ProcessDecompressionQueue, line 344
static void exec_94681a5f92286858(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) | (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: Kosinski.ProcessDecompressionQueue, line 350
static void exec_251793c1f1082c99(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: fn001604, line 76
static void exec_e3dbb089316a72c7(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const int16 var1 = (uint16)-(signed)var0;
	*context.getParameter<int16*>() = (uint16)var1;
}

// First occurrence: fn00163c, line 120
static void exec_e20d20562305417f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00163c, line 147
static void exec_0e7332b3f58c5ea1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn00163c, line 148
static void exec_3e05f89fafd7cdfc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)*context.getParameter<uint8*>(12));
	context.moveValueStack(3);
}

// First occurrence: fn00163c, line 150
static void exec_cffee445ba312730(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn00163c, line 153
static void exec_04e54196d2a681bf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint16 var1 = (uint16)-(signed)var0;
	*context.getParameter<uint16*>() = (uint16)var1;
}

// First occurrence: fn00163c, line 166
static void exec_d9ca5dd81605fee5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) ^ (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn00163c, line 180
static void exec_e837650490ab1bd4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn00163c, line 181
static void exec_57d7a1f58024155d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	*context.getParameter<uint16*>() = (uint16)var0;
}

// First occurrence: fn001604_gatherData, line 196
static void exec_c4e35781783b092b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var0) >> (uint32)((var2) & 0x1f));
	const int16 var4 = (uint16)var3;
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn001604_gatherData, line 208
static void exec_1f456c547b6474ce(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var0) >> (uint32)((var2) & 0x1f));
	const int16 var4 = (uint16)var3;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn001604_gatherData, line 209
static void exec_fc3ea6b2426661ae(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(12)) & 0x0f));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: fn001604_gatherData, line 210
static void exec_c3005d80678a7ab4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	*context.getParameter<uint16*>(12) = (uint16)var2;
}

// First occurrence: fn001604_gatherData, line 221
static void exec_87a4c8ce0415e10c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: fn001604_gatherData, line 222
static void exec_c4617779b126cbb8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var0) - (uint16)(var5));
	*context.getParameter<uint16*>(20) = (uint16)var7;
}

// First occurrence: fn001604_gatherData, line 231
static void exec_e932265bd4443401(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var6);
}

// First occurrence: fn0016a8, line 254
static void exec_ab2ee7042330ff5f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var2) | (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0016a8, line 256
static void exec_416eaa679cfe1ee7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn0016a8, line 257
static void exec_d51847165035379e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) | (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn0016a8, line 259
static void exec_c9c18640eb6fd8b3(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn0016a8, line 261
static void exec_4b230d7bb09eb64d(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int64 var1 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) < (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0016a8, line 263
static void exec_d5e6ebc9a5421c80(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint32>(2, (uint32)((uint32)(var0) - (uint32)(var1)));
	context.moveValueStack(3);
}

// First occurrence: fn0016a8, line 267
static void exec_5e3c973702a09bb7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint16 var3 = (uint16)var1;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) << (uint32)((var4) & 0x1f));
	const int16 var6 = (uint16)var5;
	*context.getParameter<uint16*>(16) = (uint16)var6;
}

// First occurrence: fn0016a8, line 269
static void exec_4cf1d9c75af8d363(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(var1)));
	const int64 var3 = 1;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var3) << (uint32)((var4) & 0x1f)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(24));
	context.moveValueStack(3);
}

// First occurrence: LoadRequiredSpritePatterns, line 283
static void exec_6f5b0dcdc30ec9f1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LoadRequiredSpritePatterns, line 284
static void exec_22c23415a153167d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: LoadRequiredSpritePatterns, line 289
static void exec_c560bad482da9a6f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint16 var4 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = 1;
	const uint32 var7 = ((uint32)(var5) + (uint32)(var6));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var4) + (uint16)(var8));
	*context.getParameter<uint16*>(24) = (uint16)var10;
}

// First occurrence: Nemesis.LoadMultipleToVRAM, line 309
static void exec_38f8df19a98a2aa8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var3);
}

// First occurrence: Nemesis.LoadMultipleToVRAM, line 313
static void exec_db954f0e7db94c34(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var1);
}

// First occurrence: DynamicObjectsLoading, line 19
static void exec_54d7705671f00805(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var3);
}

// First occurrence: DynamicObjectsLoading, line 20
static void exec_59e07d3fe65a1451(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)(uint32)var0);
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 48
static void exec_ee3c9a8f4d19e054(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 49
static void exec_ab99a0124acc9238(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: DynamicObjectsLoading.Init, line 51
static void exec_4d1eefb66e30261a(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: DynamicObjectsLoading.Init, line 71
static void exec_f8430d38f189b9df(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	const uint8 var3 = *context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(24)));
	const uint8 var6 = ((uint8)(var2) + (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var6);
}

// First occurrence: DynamicObjectsLoading.Init, line 72
static void exec_0472e481f807fa73(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(12) = (uint32)var4;
}

// First occurrence: DynamicObjectsLoading.Init, line 106
static void exec_cd4cd92a9d88e9b9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: DynamicObjectsLoading.Init, line 106
static void exec_aa67b49a465870d1(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((uint16)(context.readValueStack<int16>(-1)) & (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: DynamicObjectsLoading.Init, line 108
static void exec_9507dccc5208d6dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) < (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 131
static void exec_cd75344527f12b19(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: DynamicObjectsLoading.Init, line 142
static void exec_a4a7bcdfd117eceb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) == (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: DynamicObjectsLoading.Init, line 151
static void exec_980a05cda1b7769b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 161
static void exec_a0af8e0bf0d613fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 178
static void exec_10fdf3aa55d3b05d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 179
static void exec_61846a9449205b6e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 185
static void exec_3a1c7f9459128a19(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int64 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 206
static void exec_9cb0952383c14a42(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 207
static void exec_ef492405199e6e0f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 209
static void exec_fb9fab2f96a2c648(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 214
static void exec_6d5147aed3d71d51(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 219
static void exec_5cc972d4be6d1e8a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 245
static void exec_80f4fb94632d3e1a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 246
static void exec_38aac0221a6ef363(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 248
static void exec_bf9d903f9fa9ddd1(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 260
static void exec_c30b1759099cf314(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) < (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 275
static void exec_bdb00d4f5453e0a6(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(4));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 298
static void exec_21cedf1c7bbe6a75(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int16 var2 = ((uint16)(var0) & (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 299
static void exec_0e06427abbc641ed(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var3 = ((uint16)(var1) & (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 316
static void exec_fa49830a916f9565(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 344
static void exec_156a3184919e002e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 355
static void exec_23dcf886ba2f872f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	*context.getParameter<uint16*>(12) = (uint16)var2;
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 358
static void exec_6738f7823a4e8803(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 361
static void exec_d1145a2104e1d854(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 379
static void exec_371e8e932c140731(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 380
static void exec_2d5a84e831f1bec2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	const int8 var8 = (uint8)var7;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 384
static void exec_6a6a278fc7fee415(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint16 var3 = (uint16)var1;
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(20);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var7);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 385
static void exec_77c4684f46ab0771(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 387
static void exec_19cc2ba789a9d6c5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: conditionalSpawnDynamicObject, line 413
static void exec_ea088977f4f989a5(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: conditionalSpawnDynamicObject, line 420
static void exec_f9840c2acf2ff9b1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: conditionalSpawnDynamicObject, line 422
static void exec_380300e83725a488(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	const uint16 var7 = ((uint16)(var5) == (uint16)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: conditionalSpawnDynamicObject, line 430
static void exec_e8efea9ab47396d6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: conditionalSpawnDynamicObject, line 444
static void exec_2bb808b20308dddc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint16 var3 = (uint16)var1;
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var7);
}

// First occurrence: conditionalSpawnDynamicObject, line 447
static void exec_f452051791241ded(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) | (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: conditionalSpawnDynamicObject, line 449
static void exec_91b08e3b1117f69a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: spawnChildObjects, line 477
static void exec_1ec28314eccec155(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: spawnChildObjects, line 486
static void exec_64d2a53dc900ef22(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	context.writeValueStack<uint32>(2, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0));
	context.moveValueStack(3);
}

// First occurrence: spawnChildObjects, line 487
static void exec_1a85705654638c59(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(3);
}

// First occurrence: spawnChildObjects, line 488
static void exec_34a05bd543104365(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(3);
}

// First occurrence: SpawnChildObjects, line 518
static void exec_cdcb54eaa0a71fe0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, (uint8)(uint8)*context.getParameter<uint8*>(4));
	context.writeValueStack<int8>(2, (int8)(uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(12)));
	context.writeValueStack<int8>(3, (int8)(uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: spawnChildObject, line 526
static void exec_a785b6f26eb8926f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int8>(context.getParameter<uint32>(), (uint8)context.readValueStack<int8>(-1));
	context.writeLocalVariable<int8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<int8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: spawnChildObject, line 539
static void exec_f24a345acdbb1c72(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: SpawnProjectileChildObjectsInDir, line 704
static void exec_ce9de12da3b2ab4e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var6) & (uint8)(var7)));
	context.moveValueStack(2);
}

// First occurrence: SpawnProjectileChildObjectsInDir, line 707
static void exec_3b8704722871bba7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var3);
	context.moveValueStack(1);
}

// First occurrence: spawnSimpleChildObjects, line 730
static void exec_2c8ff05175bc6a40(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var1) + (uint16)(var2)));
	context.moveValueStack(3);
}

// First occurrence: spawnSimpleChildObjects, line 731
static void exec_a5acabfbf6cd950a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(20)));
	context.writeValueStack<uint32>(2, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	context.moveValueStack(3);
}

// First occurrence: SpawnSimpleChildObjects, line 746
static void exec_3c27849a83ad2a49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var3);
}

// First occurrence: RequestLoadingPatterns, line 84
static void exec_32d88dee7848fd42(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: AddPatternLoadingCue, line 108
static void exec_a649ae4bc5a3b43f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var5);
}

// First occurrence: AddPatternLoadingCue, line 110
static void exec_4fdabce56faefd4e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: FillPatternLoadingCues, line 193
static void exec_a3d2c5c005e0b607(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)var1);
}

// First occurrence: FillPatternLoadingCues, line 196
static void exec_9549eefe64fc443e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int16 var4 = ((int16)(var2) * (int16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: FillPatternLoadingCues, line 197
static void exec_cee5dc77d1a83abe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: fn0017d8, line 216
static void exec_067d6f89b7e065a9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	*context.getParameter<uint32*>(8) = (uint32)var0;
}

// First occurrence: fn00180c, line 262
static void exec_5c1735b3fafc5f96(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var3);
}

// First occurrence: updateSpritePattern, line 49
static void exec_5586d8746ea253f8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	*context.getParameter<uint32*>(4) = (uint32)var0;
}

// First occurrence: UpdateSpritePattern, line 65
static void exec_239a8c8538ded978(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: updateMultipleSpritePatterns, line 100
static void exec_b6860249e69ece33(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: updateMultipleSpritePatterns, line 107
static void exec_e0e9905596c1a4bb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint32 var5 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(20)) & 0x1f));
	const uint32 var8 = ((uint32)(var0) + (uint32)(var7));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var8);
}

// First occurrence: updateMultipleSpritePatterns, line 108
static void exec_8ad5d32f31ef360b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: updateMultipleSpritePatterns, line 110
static void exec_9e789bf3a946db31(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: updateMultipleSpritePatterns, line 111
static void exec_2f5888526b260877(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const int8 var6 = 1;
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: RenderSprites, line 207
static void exec_1decb5bfab67cf06(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites, line 210
static void exec_3d530525300dc184(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: RenderSprites, line 223
static void exec_c8a1c201285ae015(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites, line 261
static void exec_b0fa82675a90d487(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: RenderSprites, line 273
static void exec_0a50b479d8efdbf9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 289
static void exec_e625806a88d8ab10(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var3));
	const int16 var5 = (uint16)var4;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: renderNextObject, line 291
static void exec_c6a14b81be6c0758(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: renderNextObject, line 306
static void exec_2ff77cd46d71c53c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int64 var3 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var2) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 328
static void exec_558089350af428ff(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	const uint16 var8 = ((uint16)(var6) - (uint16)(var7));
	const uint16 var9 = swapBytes16(*context.getParameter<uint16*>(28));
	const uint16 var10 = ((uint16)(var8) & (uint16)(var9));
	*context.getParameter<uint16*>(36) = (uint16)var10;
}

// First occurrence: renderNextObject, line 329
static void exec_b8c5daaae4aafcce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 329
static void exec_08667eab5888083c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = (uint16)var0;
	context.moveValueStack(-2);
}

// First occurrence: renderNextObject, line 330
static void exec_de935cc4c203aef8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 333
static void exec_babececcfd584bcc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var2) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: renderNextObject, line 339
static void exec_92a42ae8193b71b8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(16));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 340
static void exec_7046fbcc4b410670(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 351
static void exec_fd7dceb679f83763(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(1, (int16)((int16)(var3) * (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: renderNextObject, line 352
static void exec_5aea385605edc652(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	*context.getParameter<uint16*>(8) = (uint16)var3;
}

// First occurrence: renderNextObject, line 367
static void exec_7fcf373e1b6ae43b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: renderNextObject, line 383
static void exec_afe71840cc353c57(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: renderNextObject, line 384
static void exec_bea4c134e038a79d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(20));
	const uint16 var6 = ((uint16)(var4) & (uint16)(var5));
	*context.getParameter<uint16*>(28) = (uint16)var6;
}

// First occurrence: renderNextObject, line 386
static void exec_e555b908eea5c63e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: renderNextObject, line 398
static void exec_97b21a57a0730e8b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(12));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 426
static void exec_9295f058e5b8722c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(context.getParameter<int64>(8)) - (uint16)(var5));
	const uint16 var8 = ((uint16)(var0) + (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: renderNextObject, line 436
static void exec_4ab6797dd463ee18(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTable, line 487
static void exec_0a8a259338c8e679(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: writeToSpriteTable, line 488
static void exec_a1c02bf830fe150e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: writeToSpriteTable, line 491
static void exec_0abeeb6838dc1cfa(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTable, line 493
static void exec_bbbd594751734687(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(2, (int16)(uint16)*context.getParameter<int16*>(8));
	context.moveValueStack(3);
}

// First occurrence: writeToSpriteTable, line 501
static void exec_2086632d4aa5477c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var3);
}

// First occurrence: writeToSpriteTable, line 502
static void exec_c3f7194adf487ec6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = OpcodeExecUtils::safeDivide<uint8>((uint8)var0, (uint8)context.getParameter<int64>(4));
	const uint8 var3 = 1;
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint8 var6 = ((uint8)(var4) * (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var6);
}

// First occurrence: writeToSpriteTable, line 503
static void exec_e5c3b1177dae3673(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) % (uint8)(context.getParameter<int64>(4)));
	const uint8 var3 = 1;
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint8 var6 = ((uint8)(var4) * (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var6);
}

// First occurrence: writeToSpriteTable, line 506
static void exec_b43506f9d4e9c673(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const int16 var7 = ((uint16)(var4) + (uint16)(var5));
	const int16 var8 = ((uint16)(var0) - (uint16)(var7));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var8);
}

// First occurrence: writeToSpriteTable, line 506
static void exec_ea1e7d023cf6a2d1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = ((uint16)(var0) + (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: writeToSpriteTable, line 512
static void exec_a8bc963b9ec533e4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const int8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint16 var6 = ((uint16)(var0) - (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var6);
}

// First occurrence: writeToSpriteTable, line 512
static void exec_e5d2586b7142cb01(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var0) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: writeToSpriteTable, line 517
static void exec_2288c4fe6dc33cbe(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: writeToSpriteTable, line 518
static void exec_b2572541e9000d97(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: writeToSpriteTable, line 524
static void exec_b32f889c27535cb1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: writeToSpriteTable, line 532
static void exec_784b57d5946852f1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = 0;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: writeToSpriteTable, line 535
static void exec_4290f142c48abc40(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) & (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: writeToSpriteTableCompound, line 587
static void exec_ed93d3e0141a64b0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTableCompound, line 604
static void exec_f9d1d842b469f188(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(context.getParameter<int64>()) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: writeToSpriteTableCompound, line 605
static void exec_58656eb0b0eb6e35(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.moveValueStack(6);
}

// First occurrence: writeToSpriteTableCompound, line 618
static void exec_edaf03e014317df8(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTableCompound, line 618
static void exec_7fd49bc63ba965fa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<int16>(-3, (int16)((int16)(context.readValueStack<int16>(-3)) < (int16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: RenderSprites_CompetitionMode, line 661
static void exec_118f799d6a5a4fdd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var3);
}

// First occurrence: RenderSprites_CompetitionMode, line 678
static void exec_35783cb981f0f6cb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites_CompetitionMode, line 692
static void exec_03a7da84a03852dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites_CompetitionMode, line 695
static void exec_ad84f0776a610da8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) - (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: renderNextCompModeObject, line 712
static void exec_52002840cd6dcac4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: renderNextCompModeObject, line 714
static void exec_fcbc56336f353ffd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var8;
}

// First occurrence: renderNextCompModeObject, line 728
static void exec_41e39d6933bf97f5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var3);
}

// First occurrence: renderNextCompModeObject, line 736
static void exec_f53199900f0d2ae8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) - (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint16 var10 = swapBytes16(*context.getParameter<uint16*>(32));
	const uint16 var11 = ((uint16)(var9) & (uint16)(var10));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: renderNextCompModeObject, line 737
static void exec_701884f671ac265f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: renderNextCompModeObject, line 738
static void exec_97250716f3059dc9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(var6));
	*context.getParameter<uint16*>(24) = (uint16)var7;
	context.moveValueStack(-1);
}

// First occurrence: renderNextCompModeObject, line 742
static void exec_9329230640bbe8ce(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(20);
	const uint16 var6 = ((uint16)(var4) - (uint16)(var5));
	*context.getParameter<uint16*>(28) = (uint16)var6;
}

// First occurrence: renderNextCompModeObject, line 743
static void exec_398acea0e40fc633(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var5) + (uint16)(var9));
	const uint16 var12 = swapBytes16(*context.getParameter<uint16*>(40));
	const uint16 var13 = ((uint16)(var11) & (uint16)(var12));
	*context.getParameter<uint16*>(48) = (uint16)var13;
}

// First occurrence: renderNextCompModeObject, line 745
static void exec_cc7b293b6f843e69(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: renderNextCompModeObject, line 749
static void exec_ddabada7912cdf6e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: renderNextCompModeObject, line 759
static void exec_bdc42e89be1dc529(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: renderNextCompModeObject, line 760
static void exec_0ae0413b1780a01a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int16 var2 = 1;
	const int16 var3 = ((uint16)(var1) - (uint16)(var2));
	*context.getParameter<int16*>(8) = (uint16)var3;
}

// First occurrence: renderNextCompModeObject, line 778
static void exec_f0e2cf4d8684541c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = ((uint16)(var1) - (uint16)(var3));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var8 = ((uint16)(var6) & (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: renderNextCompModeObject, line 779
static void exec_65f4c7214e6335bc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	const uint16 var11 = swapBytes16(*context.getParameter<uint16*>(40));
	const uint16 var12 = ((uint16)(var10) & (uint16)(var11));
	*context.getParameter<uint16*>(48) = (uint16)var12;
}

// First occurrence: renderNextCompModeObject, line 825
static void exec_9191322af8157b40(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: renderNextCompModeObject, line 826
static void exec_da2d75d3033e921b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(var0) + (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: renderNextCompModeObject, line 827
static void exec_4dd32dfd2a94b25d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = 1;
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: InitSaveSlots, line 37
static void exec_0d89ab92e42252e4(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = 0;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)context.getParameter<int64>());
}

// First occurrence: InitSaveSlots, line 38
static void exec_0d02bc0c96650764(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)context.getParameter<int64>());
}

// First occurrence: InitSaveSlots, line 40
static void exec_4e175edbb9e27c61(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)context.getParameter<int64>());
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const uint8 var9 = ((uint8)(var7) + (uint8)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), (uint8)var9);
}

// First occurrence: InitSaveSlots, line 44
static void exec_e37b6c44535da849(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: InitSaveSlots, line 53
static void exec_3741abd3e94b86ac(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)context.getParameter<int64>());
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) + (uint8)(var8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var9);
}

// First occurrence: InitSaveSlots, line 59
static void exec_1e99bb14ecac1b69(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn00c320, line 259
static void exec_09b3c90e56c7d786(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn00c320, line 276
static void exec_65bb3923acd6322f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn00c320, line 278
static void exec_1805735c83f3a13f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn00c362, line 290
static void exec_8491d02c5ce88c8d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00c362, line 294
static void exec_4781b1465f3d08b1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn00c376, line 310
static void exec_c3fa61e3ca418828(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn00c376, line 328
static void exec_4b98d69a7852bce6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: SaveGameSlot, line 397
static void exec_e0b9ef89832cb720(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) != (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 397
static void exec_d40026b6b850aa49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var5) != (uint32)(var6)));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 397
static void exec_58470c7046774381(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) != (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 397
static void exec_d5aa90f5be1c5401(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) != (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 400
static void exec_27e91e6a4cd62342(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: SaveGameOnLevelFinished, line 436
static void exec_44aa0d2973888d48(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	const uint8 var3 = *context.getParameter<uint8*>(16);
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var4);
}

// First occurrence: SaveGameOnLevelFinished, line 437
static void exec_bff2d1cc7a57622e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: SaveGameOnLevelFinished, line 443
static void exec_ac2511f987d42896(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: SaveGameOnLevelFinished, line 450
static void exec_1630f4ec42c62e9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: SaveGameOnLevelFinished, line 459
static void exec_36ad474eae048295(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) >= (uint8)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: SaveGameOnLevelFinished, line 472
static void exec_47ae593702fca606(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: SaveGameOnLevelFinished, line 485
static void exec_66659d0c19b997e4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: makeNormalPackedColor, line 18
static void exec_086bc9c407e9923b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const int64 var3 = 1;
	const uint16 var4 = ((uint16)(var2) >> (uint16)((var3) & 0x0f));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var9 = ((uint16)(var7) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var10 = ((uint16)(var4) + (uint16)(var9));
	const uint16 var11 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const uint16 var13 = ((uint16)(var11) & (uint16)(context.getParameter<int64>(36)));
	const uint16 var15 = ((uint16)(var13) >> (uint16)((context.getParameter<int64>(44)) & 0x0f));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var10) + (uint16)(var15)));
	context.moveValueStack(1);
}

// First occurrence: makeExtendedPackedColor, line 25
static void exec_84ea6a4a040b03c8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: makeExtendedPackedColor, line 28
static void exec_33b735907aeb9925(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(12)));
	const int64 var4 = 1;
	const uint16 var5 = ((uint16)(var3) << (uint16)((var4) & 0x0f));
	const uint16 var6 = ((uint16)(context.getParameter<int64>()) + (uint16)(var5));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint16 var9 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var11 = ((uint16)(var9) << (uint16)((context.getParameter<int64>(32)) & 0x0f));
	const uint16 var12 = ((uint16)(var6) + (uint16)(var11));
	const uint16 var13 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40));
	const uint16 var15 = ((uint16)(var13) & (uint16)(context.getParameter<int64>(44)));
	const uint16 var17 = ((uint16)(var15) << (uint16)((context.getParameter<int64>(52)) & 0x0f));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var12) + (uint16)(var17)));
	context.moveValueStack(1);
}

// First occurrence: FadeInPalette, line 44
static void exec_71a2e06e6f126dc5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var2 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(var0));
	const int32 var3 = (uint32)var2;
	*context.getParameter<uint32*>() = (uint32)var3;
	context.moveValueStack(-2);
}

// First occurrence: FadeInPalette, line 46
static void exec_eb688d9721e6be52(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = *context.getParameter<uint8*>(4);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: FadeInPalette, line 66
static void exec_850a42c30c8976df(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: FadeInPalette, line 66
static void exec_b9a3fbdb534555d0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: FadeInColor, line 81
static void exec_04544f99456c53aa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: FadeInColor, line 88
static void exec_3a64cd0ff6a36065(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) < (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: FadeInColor, line 90
static void exec_8ff6f584b2449f62(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(20)));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(var5)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(28));
	context.moveValueStack(3);
}

// First occurrence: FadeInColor, line 90
static void exec_515e4e046d501985(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: FadeInColor, line 107
static void exec_909b5af8b19d14b3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) <= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: SetPaletteFadedOut, line 147
static void exec_0eee8869dd5776be(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(context.getParameter<int64>()) + (uint32)(var1)));
	const uint8 var3 = *context.getParameter<uint8*>(16);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var5) * (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: FadeOutScreenBlocking, line 181
static void exec_b5d6f7ba65d8772d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	*context.getParameter<uint8*>() = (uint8)var0;
}

// First occurrence: FadeOutPalette, line 221
static void exec_1c01ed9d7efb8eb5(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: FadeOutPalette, line 221
static void exec_f066143efa59381d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: FadeOutColor, line 245
static void exec_7ce5fe8519ca84e5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: FadeOutColor, line 249
static void exec_67aab013fcbe9ee9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: SetPaletteToWhite, line 270
static void exec_38e2e24098ca6f47(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var3 = ((uint8)(var1) * (uint8)(context.getParameter<int64>(12)));
	const uint8 var4 = ((uint8)(var0) + (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var4);
}

// First occurrence: SetPaletteToWhite, line 271
static void exec_9a96355f096e16a1(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)context.getParameter<int64>());
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const int8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) + (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: SetPaletteToWhite, line 279
static void exec_8cc1486132afe89f(const RuntimeOpcodeContext context)
{
	*context.getParameter<int16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: FadeColorTowardsTarget, line 343
static void exec_209a46bafba8267f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) > (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: FadeColorToWhite, line 434
static void exec_dc48115003c79b71(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) != (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: GameModeControlLoop, line 37
static void exec_bd110398e687427e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) > (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: GameModeControlLoop, line 39
static void exec_87899d765d3a028a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint8>(2, (uint8)*context.getParameter<uint8*>(8));
	context.moveValueStack(3);
}

// First occurrence: GameModeControlLoop, line 68
static void exec_db211ca8be4b8bd8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: GameModeControlLoop, line 69
static void exec_4b5da55774e56a5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: UpdateGameObjects, line 95
static void exec_d0a649352bf214b1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) >= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateGameObjects, line 95
static void exec_03ce95df218c235d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: updateGameObjectLoop, line 134
static void exec_ee0d58117a8412d7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 1;
	const uint32 var2 = ((uint32)(var0) & (uint32)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) == (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: updateGameObjectLoopRenderOnly, line 148
static void exec_0c32f5a73e799422(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int64 var1 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) >= (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: allocDynamicObjectAfterA1, line 180
static void exec_f08304f78a6569eb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) - (uint32)(var1)));
	context.moveValueStack(2);
}

// First occurrence: allocDynamicObjectAfterA0, line 204
static void exec_89d041747aa99552(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	const uint32 var4 = ((uint32)(var2) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var4);
}

// First occurrence: allocDynamicObjectAfterA0, line 205
static void exec_582b981a178f2048(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(12) = (uint16)var3;
}

// First occurrence: allocDynamicObject, line 210
static void exec_5f6392635151e3ef(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int8>(context.getParameter<uint32>(), (uint8)context.readValueStack<int8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: allocDynamicObject, line 213
static void exec_31d16ade63bcef5b(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	*context.getParameter<int16*>(4) = (uint16)var0;
}

// First occurrence: CallPlaneUpdateRoutine, line 249
static void exec_6f01c57c61f3cdf3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04e82e, line 310
static void exec_ae163904194faaf2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.moveValueStack(2);
}

// First occurrence: fn04e838, line 322
static void exec_da63918c80198ade(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) != (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn04e838, line 329
static void exec_47d600098be16ef4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 331
static void exec_f55b7d65ea9ca382(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeValueStack<uint32>(0, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5));
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 334
static void exec_13e7a9843114d6dd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(4)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 343
static void exec_e997f0f38a033101(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04e85a, line 384
static void exec_bbb8e843eec8c2c2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04e85a, line 385
static void exec_23ffa8e0ffabfd79(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04e85a, line 395
static void exec_e6648b0a814eb595(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04e8a4, line 419
static void exec_238d594fcc891f4e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)(uint16)-(signed)context.readValueStack<uint16>(-1));
	context.writeValueStack<int64>(0, (int64)0);
	context.moveValueStack(1);
}

// First occurrence: CopyRectToVRAM, line 470
static void exec_6265027b8d9c4245(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const int64 var3 = 1;
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) + (uint16)(var3)));
	context.moveValueStack(2);
}

// First occurrence: copyRectToVRAM, line 474
static void exec_af9bc6928213cd14(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: copyRectToVRAM, line 477
static void exec_d0cc744b4534150c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: copyRectToVRAM, line 486
static void exec_dce6aee8dcd5527f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var3;
}

// First occurrence: copyRectToVRAM, line 487
static void exec_c45d1b911812af9b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: fn001506, line 497
static void exec_92a5254838713f51(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn01aaa2, line 583
static void exec_325acf26b67eec93(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) > (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01aaa2, line 591
static void exec_a9222dfd6335f887(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn01aabc, line 599
static void exec_18869cec8a1400ec(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)context.getParameter<int64>());
}

// First occurrence: fn01aabc, line 600
static void exec_41b0eafc60b46c4d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var0);
}

// First occurrence: UpdateRollingDemo, line 621
static void exec_7d987ab1a304c307(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: UpdateRollingDemo, line 622
static void exec_24ff7b59d37ed85d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) | (uint8)(var4));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: UpdateRollingDemo, line 625
static void exec_eb0c8a33a5a60d2e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var3 = ((uint8)(var0) | (uint8)(var2));
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: UpdateRollingDemo, line 651
static void exec_3eb1c5380d638b78(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = (uint8)~context.getParameter<int64>(8);
	const uint8 var3 = ((uint8)(var0) & (uint8)(var2));
	const uint8 var5 = ((uint8)(var3) | (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: UpdateRollingDemo, line 656
static void exec_5b70023a41917c49(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: UpdateRollingDemo, line 657
static void exec_b425a52c5bd32597(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: BlueSphereGame.applyTailsPalette, line 25
static void exec_69693916f6be380f(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: BlueSphere.setGeneratedStage, line 99
static void exec_2750db8cabbec972(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const int8 var3 = (uint8)var2;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), (uint8)var3);
}

// First occurrence: BlueSphere.setGeneratedStage, line 100
static void exec_c718e54e986e9fe4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = 1;
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	const uint32 var6 = ((uint32)(var4) % (uint32)(context.getParameter<int64>(12)));
	const int8 var7 = (uint8)var6;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(20), (uint8)var7);
}

// First occurrence: BlueSphere.setGeneratedStage, line 101
static void exec_e9deaa773259ccb3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) % (uint32)(context.getParameter<int64>(20)));
	const int8 var7 = (uint8)var6;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(28), (uint8)var7);
}

// First occurrence: fn04cd18, line 302
static void exec_c8b3f315d6b4a6a9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) - (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn04cd18, line 313
static void exec_6129b753f350aa18(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var7 = ((uint8)(var5) - (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: fn04cd18, line 316
static void exec_00def2346dcc079b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn04cd18, line 324
static void exec_c1fcd5dc9d1d90b5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn04cd18, line 331
static void exec_2b600d5197f40047(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn04cd18, line 335
static void exec_48fa0087fb3540ed(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04cd18, line 338
static void exec_c0a248787c5c8c59(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04cd18, line 341
static void exec_fbf01873d8a4797c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn04cd18, line 342
static void exec_3e8519c28c7762af(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) << (uint32)((var1) & 0x1f));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: fn04cd18, line 346
static void exec_fa51990346a56f56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn04cd18, line 349
static void exec_038ebb467c847b5c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) - (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var6;
}

// First occurrence: fn04cd18, line 356
static void exec_f60d5710a0ee20ef(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >> (uint8)((context.getParameter<int64>(8)) & 0x07));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn04ceb6, line 399
static void exec_6833c963772ea057(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) > (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04cef8, line 436
static void exec_d9c33ce485ce087b(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) | (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: fn04cf82, line 467
static void exec_7caf3de937bedd75(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn04d03e, line 542
static void exec_b1224fff528927db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn04d09e, line 569
static void exec_1fd807b5f295fcdd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) == (uint8)(var1));
	const uint8 var3 = *context.getParameter<uint8*>(8);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) != (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn04d09e, line 571
static void exec_b72933b81b151f7f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn04d09e, line 581
static void exec_2f0003453df58fbf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) << (uint8)((var1) & 0x07));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn04d09e, line 582
static void exec_a0f15f365010829f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) << (uint16)((var1) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn04d0f6, line 611
static void exec_e7e194cea2cfd15f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn04d1aa, line 713
static void exec_b54e70395a276d3d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04d240, line 773
static void exec_7584d864e74980d2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04d240, line 775
static void exec_2e5140c050fa3d13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: fn04d240, line 783
static void exec_d488466009cc8cc4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: fn04d268, line 808
static void exec_238167cfd761b41c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint64 var4 = ((uint64)(var0) + (uint64)(var2));
	const uint64 var6 = ((uint64)(var4) >> (uint64)((context.getParameter<int64>(16)) & 0x3f));
	const int16 var7 = (uint16)var6;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: fn04d30e, line 854
static void exec_37878eb006d8a1a7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04d362, line 871
static void exec_2215af0ba0430383(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: fn04d362, line 874
static void exec_109399713690f0f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)var3);
}

// First occurrence: fn04d362, line 876
static void exec_6b486d33b85113ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var3 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)var3);
}

// First occurrence: fn04d362, line 887
static void exec_5e887e8bc0a5fa04(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn04d362, line 894
static void exec_c957bb893a5ebe7d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) ^ (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn04d3ce, line 921
static void exec_d234ab66ef6ad48c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: fn04d3ce, line 928
static void exec_daebd385e25398fd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn04d3ce, line 933
static void exec_cfe2bf1e38183ed8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const int64 var5 = (uint64)-(signed)var4;
	const int8 var6 = (uint8)var5;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn04d3ce, line 945
static void exec_ce6c120d6e86c8eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const int64 var5 = (uint64)-(signed)var4;
	const int16 var6 = (uint16)var5;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn04d488, line 983
static void exec_4740af6ee9fdf341(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04d488, line 1001
static void exec_10e2296eb6e4f364(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04d64e, line 1173
static void exec_b8e0d8bbf670aee3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn04d6b8, line 1197
static void exec_065903df5b6e0855(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(context.getParameter<int64>(8)) - (uint16)(var2)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn04d6b8, line 1206
static void exec_8bc77e5b87f5f233(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn04d6b8, line 1210
static void exec_59e9bf0bdf52c6b0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1213
static void exec_246e41bd33c03d98(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1224
static void exec_4070c8b6e49cd8a2(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1284
static void exec_d87a0afc516bbaed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn04d6b8, line 1290
static void exec_5070f0889a1b3b0e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn04d986, line 1358
static void exec_e616b676ccb1c385(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn04d986, line 1373
static void exec_2ed0aa5f3ae2b356(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: fn04da7e, line 1444
static void exec_009857eb102d4130(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(16);
	const int64 var1 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) >> (uint16)((var1) & 0x0f)));
	context.moveValueStack(3);
}

// First occurrence: fn04da7e, line 1553
static void exec_63148f1ceac6c146(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: BlueSphereGame.advanceStages, line 1567
static void exec_097019de5b7ae187(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var4);
}

// First occurrence: BlueSphereGame.advanceStages, line 1574
static void exec_5388c955335598d0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04dea2, line 1597
static void exec_7a6a23f2d809343b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn04df52, line 1680
static void exec_0d19d9bd51524b8e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) ^ (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: fn04e05c, line 1798
static void exec_d520168a1737e4a8(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn04e074, line 1812
static void exec_faad68d579500984(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var0) * (int32)(var2));
	*context.getParameter<int32*>(16) = (uint32)var4;
}

// First occurrence: fn04e074, line 1814
static void exec_45b2228533cf2557(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) + (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn04e074, line 1814
static void exec_b5b1cbb600a079e2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var0));
	const int16 var2 = (uint16)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>();
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn04e074, line 1815
static void exec_a0ef797b4e0015fb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int16 var5 = (uint16)var4;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn04e0a4, line 1851
static void exec_a1142038483919f2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn04e116, line 1864
static void exec_7e95b0d64157b82b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	*context.getParameter<uint32*>(8) = (uint32)var3;
}

// First occurrence: fn04e116, line 1872
static void exec_e2488c05ff6442bf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04e160, line 1890
static void exec_cb389146f55efbf1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) - (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn04e160, line 1891
static void exec_c5dcd58b89c88168(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var4);
}

// First occurrence: fn04e24c, line 1980
static void exec_566610271b994263(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: fn0680a4, line 2129
static void exec_5640a91da0e4bdf6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: fn02cdea, line 2241
static void exec_669f6e365ca7f765(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02cdea, line 2245
static void exec_a244e1bf6222cdd0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	const int16 var5 = (uint16)-(signed)var4;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn02ce76, line 2277
static void exec_24518400231f1890(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var8 = ((uint32)(var0) + (uint32)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn02ce76, line 2280
static void exec_340d6f4aa80a10ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn02cea2, line 2295
static void exec_3e38a441c5f9a686(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn07cff0, line 2313
static void exec_4e71a1518aa4cda0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn07cff0, line 2316
static void exec_bd0962225f550050(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00eff0, line 18
static void exec_d46382487aa29ac5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: getTileAtWorldPosition, line 27
static void exec_a5cabd1b48574507(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.moveValueStack(-3);
}

// First occurrence: getTileAtWorldPosition, line 31
static void exec_7ef938c18a9d3eef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(12));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: getTileAtWorldPosition, line 32
static void exec_4e0f7d766228e0a5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var4);
}

// First occurrence: getTileAtWorldPosition, line 35
static void exec_44f87c14f52277b5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: getTileAtWorldPosition, line 39
static void exec_651e9f79eadf446b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(context.getParameter<int64>()) + (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: getTileAtWorldPosition, line 40
static void exec_d76df42de65cd861(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var1);
}

// First occurrence: getTileAtWorldPosition, line 43
static void exec_5edfd5fb150d851e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var9);
}

// First occurrence: getTileAtWorldPosition, line 44
static void exec_80172b1d339e0cd7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: getTileAtWorldPosition, line 45
static void exec_598523f2ce23e35f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var6 = ((uint32)(var4) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var7);
}

// First occurrence: checkStaticCollisionVertical, line 57
static void exec_1cdfbdaa7be3e25f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<int16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: checkStaticCollisionVertical, line 62
static void exec_49fad1f5a9321930(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	*context.getParameter<uint32*>(4) = (uint32)var0;
}

// First occurrence: CheckStaticCollisionVertical, line 97
static void exec_13d6b35ba5b130d9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: CheckStaticCollisionVertical, line 105
static void exec_b8724f454a041cd9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: GetDistanceToStaticCollisionY2, line 118
static void exec_82b24c9ce3143f95(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: GetDistanceToStaticCollisionY2, line 123
static void exec_e7f634d9eb2ee335(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	const int16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: GetDistanceToStaticCollisionY2, line 121
static void exec_f175e97e36e18372(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int64 var3 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var2) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: GetDistanceToStaticCollisionY2, line 137
static void exec_584e197c55d92ed0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: GetDistanceToStaticCollisionY1, line 161
static void exec_f87c2841dbd280a0(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const int16 var1 = (uint16)-(signed)var0;
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var3 = ((uint16)(var1) - (uint16)(var2));
	*context.getParameter<int16*>(4) = (uint16)var3;
}

// First occurrence: GetDistanceToStaticCollisionY1, line 167
static void exec_e0d63dc048dce422(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: getTileAndAngle, line 342
static void exec_a512d2fe7dd4e090(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) != (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 369
static void exec_6ee05e3f29c1955d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) != (uint16)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 369
static void exec_21e88bce890f7a69(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const int64 var4 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) & (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 372
static void exec_b0abff7a9aebb619(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var6);
}

// First occurrence: getTileAndAngle, line 384
static void exec_9757dc701516eafa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: getCollisionIndentX, line 399
static void exec_703a0ca45b6e13e9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var8);
}

// First occurrence: getCollisionIndentX, line 404
static void exec_bb005d0c99f0b067(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: getCollisionIndentX, line 407
static void exec_744c2e16d67529dc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var9);
}

// First occurrence: getCollisionIndentX, line 410
static void exec_2463bb52720f0d9f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: getCollisionIndentX, line 413
static void exec_e5c168b1e529ea34(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)-(signed)var0;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)var1);
}

// First occurrence: fn00f61c, line 523
static void exec_4e0284a9f833ab9b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int32 var10 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var11 = ((uint32)(var3) + (uint32)(var10));
	*context.getParameter<uint32*>(40) = (uint32)var11;
}

// First occurrence: fn00f61c, line 532
static void exec_2c74eb453bf6c6bd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn00f61c, line 553
static void exec_4f9b29b80fa188f2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) <= (uint16)(context.getParameter<int64>())));
}

// First occurrence: fn00f72e, line 627
static void exec_823a566125836818(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: CheckHitboxCollisionDownwards, line 655
static void exec_cd3a57f6e3c104f5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: CheckHitboxCollisionDownwards, line 657
static void exec_d48ed208ebc1b5c5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: CheckHitboxCollisionDownwards, line 659
static void exec_5d74e4fb5ad7536c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: CheckHitboxCollisionDownwards, line 663
static void exec_43e0bb6db8164733(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CheckHitboxCollisionDownwards, line 676
static void exec_e4b2dbb502282fa7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	*context.getParameter<uint8*>() = (uint8)var0;
}

// First occurrence: fn00f828, line 724
static void exec_aa384d11d75ef506(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = (uint8)var4;
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn00f846, line 735
static void exec_0387c4282689182c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn00f898, line 754
static void exec_b7386b06d04b17bd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn00f8ea, line 800
static void exec_e84696ceb55727f6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	*context.getParameter<uint8*>() = (uint8)var0;
	context.moveValueStack(-1);
}

// First occurrence: checkGroundCollisionAtX, line 820
static void exec_18900cf7f5fd61d4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var9);
}

// First occurrence: checkGroundCollisionAtX, line 825
static void exec_0b68748a67ab56c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: fn00f994, line 837
static void exec_4194532c0df09555(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn00f9ba, line 848
static void exec_07bee1f0c397c2ce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) - (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn00faa4, line 906
static void exec_21bb622b7a6cbcae(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: CheckHitboxCollisionUpwards, line 940
static void exec_c2e57d9a718ec996(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var11 = ((uint16)(var9) ^ (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: CheckHitboxCollisionUpwards, line 942
static void exec_22ff80ec2a1f0a38(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: CheckHitboxCollisionUpwards, line 945
static void exec_903bccd72089fb26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn00fb5a, line 971
static void exec_1fbba01ab340447f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	const int16 var11 = ((uint16)(var9) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn00fb5a, line 972
static void exec_15b4ea032181087e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) - (uint16)(var8));
	const int16 var11 = ((uint16)(var9) ^ (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn00fb5a, line 976
static void exec_ff9073384d0e430b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) - (uint16)(var8));
	const int16 var11 = ((uint16)(var9) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn00fbce, line 989
static void exec_e234cfad5aa370bb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) ^ (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn00fbee, line 1002
static void exec_7c506e9c31f40d01(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = (uint8)var4;
	const uint16 var6 = ((uint16)(var0) - (uint16)(var5));
	const int16 var8 = ((uint16)(var6) ^ (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn00fdc8, line 1121
static void exec_d134eb418720119d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) - (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn00fe3c, line 1139
static void exec_b7858e538a000819(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) ^ (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn00fe6e, line 1148
static void exec_6c24e297125d3daa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn061d4c, line 35
static void exec_41f9607b0a231e3f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn0620aa, line 78
static void exec_5cebdbe35d83ae24(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)-(signed)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn0623fe, line 103
static void exec_f041934ff4857aa5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: fn0623fe, line 107
static void exec_a0a4065228352414(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn065c56, line 160
static void exec_aa35d596a53e1cd4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: fn065c78, line 179
static void exec_e09b0e712375b220(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn065cac, line 203
static void exec_bd16f2a6f761639d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)context.getParameter<int64>());
}

// First occurrence: fn065cac, line 204
static void exec_cb79b442000e4ac6(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var5 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var6 = ((uint32)(var1) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)context.getParameter<int64>());
}

// First occurrence: DebugMode.BaseUpdate, line 18
static void exec_37ad84a01e948895(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: DebugMode.Enter, line 31
static void exec_e439ca7e38eedbe2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var3);
}

// First occurrence: DebugMode.Enter, line 37
static void exec_adf0ddd1087831c1(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) & (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: DebugMode.Enter, line 56
static void exec_2e0f086a3b57367f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: DebugMode.OnSelectionChanged, line 94
static void exec_c88753c6afc8725a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var6);
}

// First occurrence: DebugMode.OnSelectionChanged, line 95
static void exec_3260342fd0223b42(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: DebugMode.OnSelectionChanged, line 96
static void exec_d9185576f80a0aa5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: DebugMode.EvaluateInput, line 105
static void exec_929ddd86b3cd8bd7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: DebugMode.EvaluateInput, line 136
static void exec_1c733bd4d1657195(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: DebugMode.EvaluateInput, line 141
static void exec_f75e91f0aa8979ba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: DebugMode.EvaluateInput, line 142
static void exec_6bb64ac47210941e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: DebugMode.EvaluateInput, line 147
static void exec_c355cbcc570d6e31(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: DebugMode.EvaluateInput, line 148
static void exec_ef3f128dc838df7d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: DebugMode.EvaluateInput, line 167
static void exec_d9ffa3c5d6465e02(const RuntimeOpcodeContext context)
{
	const int8 var0 = 0;
	context.writeLocalVariable<int8>(context.getParameter<uint32>(), (uint8)var0);
}

// First occurrence: DebugMode.EvaluateInput, line 168
static void exec_dde72f05571d0bb3(const RuntimeOpcodeContext context)
{
	const int8 var0 = 1;
	const int8 var1 = (uint8)-(signed)var0;
	context.writeLocalVariable<int8>(context.getParameter<uint32>(), (uint8)var1);
}

// First occurrence: DebugMode.EvaluateInput, line 170
static void exec_7df1f4918bbaa77f(const RuntimeOpcodeContext context)
{
	const int8 var0 = 1;
	context.writeLocalVariable<int8>(context.getParameter<uint32>(), (uint8)var0);
}

// First occurrence: DebugMode.EvaluateInput, line 176
static void exec_0d764245b95176bd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(8));
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const int8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var6 = ((int8)(var4) % (int8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(20), (uint8)var6);
}

// First occurrence: DebugMode.EvaluateInput, line 190
static void exec_15b479a51a9142e5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: DebugMode.EvaluateInput, line 193
static void exec_001557e942431dce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: DebugMode.EvaluateInput, line 194
static void exec_fa380b5ca2088b7a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var4);
}

// First occurrence: DebugMode.EvaluateInput, line 196
static void exec_3d9ad65356b81e95(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DebugMode.EvaluateInput, line 219
static void exec_66192d52b76f5f84(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: DebugMode.EvaluateInput, line 220
static void exec_886257996ccc0714(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: DebugMode.ResetSonic, line 234
static void exec_374b572e1e7dd158(const RuntimeOpcodeContext context)
{
	const int16 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: updateDebugModeRegular, line 248
static void exec_0f7e1d4d4580d040(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: updateDebugModeRegular, line 261
static void exec_a3d1fa87d1dd43c9(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<int64>(0, (int64)(uint64)-(signed)var0);
	context.moveValueStack(1);
}

// First occurrence: updateDebugModeRegular, line 268
static void exec_2d7273c00f6569dd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var4 = ((uint64)(context.getParameter<int64>(8)) | (uint64)(context.getParameter<int64>(16)));
	const int64 var5 = ((uint64)(var0) & (uint64)(var4));
	const int64 var6 = 0;
	context.writeValueStack<int64>(0, (int64)((uint64)(var5) == (uint64)(var6)));
	context.moveValueStack(1);
}

// First occurrence: updateDebugModeRegular, line 291
static void exec_84492036ad0a7f44(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	const int64 var2 = (uint64)-(signed)var1;
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: updateDebugModeInput, line 322
static void exec_2f64a56583b44164(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) ^ (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: GameMode.MainGame, line 74
static void exec_206304eb8a8beb0f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint16 var3 = ((uint16)(var0) + (uint16)(var1));
	const int64 var4 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: GameMode.MainGame, line 136
static void exec_fb20e2d3e393c318(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: GameMode.MainGame, line 164
static void exec_b896f44d0c609b39(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: GameMode.MainGame, line 168
static void exec_d490ba55995fbbb7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var4 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var6 = ((uint32)(var4) >= (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
}

// First occurrence: GameMode.MainGame, line 169
static void exec_2a6283547fc5a35e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: UpdateGamePause, line 271
static void exec_70d91609d574cfd4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateGamePause, line 283
static void exec_10d112952dbbff83(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: initializeMainGame, line 370
static void exec_4097e5a4f98bd0be(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: initializeMainGame, line 580
static void exec_37328ced48c17cc1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 1;
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var0) == (uint16)(var1)));
}

// First occurrence: initializeMainGame, line 588
static void exec_73573b1760ab70e9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: initializeMainGame, line 605
static void exec_2750391a2326f3e1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = *context.getParameter<uint8*>(24);
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var9);
}

// First occurrence: initializeMainGame, line 612
static void exec_fee2c003febb7055(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(4), (uint16)var0);
}

// First occurrence: initializeMainGame, line 649
static void exec_b2dbc13ef996074b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: initializeMainGame, line 689
static void exec_3cf338f1eda81c18(const RuntimeOpcodeContext context)
{
	const int8 var0 = 1;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var0);
}

// First occurrence: initializeMainGame, line 717
static void exec_faeb7db9ca694ab7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: MainGame.getLevelDataPointer, line 803
static void exec_7b171308b81fe464(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint16 var7 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: MainGame.getLevelDataPointer, line 805
static void exec_b4d501e913c4fb36(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(context.getParameter<int64>()) + (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: copyPaletteDataFromTable, line 958
static void exec_79f31de8350e8b54(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var5;
}

// First occurrence: copyPaletteDataFromTable, line 960
static void exec_f294f95b8860279a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: copyPaletteDataFromTable, line 961
static void exec_10ad35155273996a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: copyPaletteDataFromTable, line 963
static void exec_3308283005dce313(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: copyPaletteDataFromTable, line 974
static void exec_942153f65f6fee89(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 976
static void exec_349cf5d5430d603c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(2, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1006
static void exec_7c0a049134e5cce9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: copyPaletteDataFromTable, line 1012
static void exec_c4b8e4127856a26f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(var1)));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1013
static void exec_f2e448fd908eb546(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1014
static void exec_3b2aaca0eb78366f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1020
static void exec_587779e95e8989e7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(var1)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1021
static void exec_c43da47a9486486a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1022
static void exec_cee94277d1ab1de7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: Level.InitializeWater, line 1040
static void exec_b119d978078ad909(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Level.InitializeWater, line 1050
static void exec_089e94d49e6eb506(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) < (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: Level.InitializeWater, line 1061
static void exec_08cbfb9eecb6f776(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)!context.readValueStack<uint8>(-1);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
	context.moveValueStack(-1);
}

// First occurrence: Level.InitializeWater, line 1092
static void exec_6e5e53ac0762510d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint16 var7 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var8);
}

// First occurrence: Level.InitializeWater, line 1093
static void exec_1c510aaf824958ca(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: Level.InitializeWater.Part2, line 1164
static void exec_b10f99b24fa5f2e6(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<int64>(0, (int64)(uint64)!var0);
	context.moveValueStack(1);
}

// First occurrence: fn0076a6, line 1182
static void exec_7368f101042a9f4f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = *context.getParameter<uint8*>(24);
	const uint32 var9 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var10 = ((uint32)(var5) + (uint32)(var9));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn01bc60, line 1225
static void exec_142119d349180e0e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1264
static void exec_968818aa9bcd3f7b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint8 var5 = *context.getParameter<uint8*>(24);
	const uint32 var8 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var9 = ((uint32)(var4) + (uint32)(var8));
	const uint32 var10 = ((uint32)(var0) + (uint32)(var9));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: SetupCharacterAtStartPosition, line 1265
static void exec_8e4a67a8712acfb7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	*context.getParameter<uint32*>(8) = (uint32)var1;
}

// First occurrence: SetupCharacterAtStartPosition, line 1287
static void exec_75b2053787987196(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) == (uint32)(context.getParameter<int64>())));
}

// First occurrence: SetupCharacterAtStartPosition, line 1301
static void exec_b5fe5f48b3568afc(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1396
static void exec_c970b76339877fe3(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1411
static void exec_b9bf050045eea26b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = (uint16)var0;
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1416
static void exec_53c48908a1401e8b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<int16>(-2, (int16)((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1)));
	context.writeValueStack<int64>(-1, (int64)0);
}

// First occurrence: SetupCharacterAtStartPosition, line 1432
static void exec_5c727c25ce492bb9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint16>(2, (uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn007812, line 1520
static void exec_791fe0bfdd4290fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var3 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn007812, line 1525
static void exec_e7f85724e5b35de8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn007812, line 1526
static void exec_9d25b21dfd296664(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01c2b0, line 1555
static void exec_8226238f648d5e91(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01c2b0, line 1573
static void exec_edc29281562f8a87(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01c362, line 1605
static void exec_631ade8b5093e0c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn04ff00, line 1614
static void exec_1809fd7d06466ccd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
}

// First occurrence: fn04ff00, line 1615
static void exec_daa33b443a444c06(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: fn028c80, line 1682
static void exec_ee6e763c9b9f8f83(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdateOscillatingNumbers, line 1716
static void exec_d7cb6641246b8b84(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) > (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1721
static void exec_a9747dfca665c2b2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) & (uint32)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) == (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1723
static void exec_7387cd96f5a51a5b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: UpdateOscillatingNumbers, line 1725
static void exec_0cba4fa951d0425f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: UpdateOscillatingNumbers, line 1727
static void exec_619cbe0994cba921(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1729
static void exec_deb7d6ed80d7dd43(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) | (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: UpdateOscillatingNumbers, line 1738
static void exec_54811adf171fd99e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1740
static void exec_b2dc9140fc7207ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = (uint32)~var1;
	const uint32 var3 = ((uint32)(var0) & (uint32)(var2));
	*context.getParameter<uint32*>(12) = (uint32)var3;
}

// First occurrence: UpdateOscillatingNumbers, line 1744
static void exec_512c2a01c5901b59(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) >> (uint32)((var4) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var5);
}

// First occurrence: fn0067ee, line 1814
static void exec_782c74a315e0cc2c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	const uint16 var2 = ((uint16)(var0) == (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: RestoreShield, line 1958
static void exec_3c0ed285b19ee9e8(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) != (uint32)(var0)));
}

// First occurrence: RestoreShield, line 1962
static void exec_98c6543ff28e9fef(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: RestoreShield, line 1973
static void exec_0f541aad4abeb73c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var6 = ((uint8)(var4) | (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: RestoreShield, line 1984
static void exec_ca3b991dc986974b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: InitializeGameCharacters, line 2066
static void exec_a420cd59835aa16b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) == (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: InitializeGameCharacters, line 2093
static void exec_7ad2df2f2cf9e0ad(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn006bd8, line 2105
static void exec_3ab1a55500ae01cc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04b6aa, line 2131
static void exec_8043ee9cde36f350(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), (uint16)var5);
}

// First occurrence: fn04b6aa, line 2140
static void exec_2724b8882fbea139(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	*context.getParameter<uint32*>(24) = (uint32)var8;
	const uint32 var9 = 1;
	const uint32 var10 = ((uint32)(var8) - (uint32)(var9));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var5);
}

// First occurrence: fn04b6aa, line 2153
static void exec_447b298c400c97d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	*context.getParameter<uint32*>(48) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var10, (uint32)var5);
}

// First occurrence: fn04b6aa, line 2155
static void exec_20f2a5cfa77b3c46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) - (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn04b6aa, line 2156
static void exec_23fd1f81405d9957(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	*context.getParameter<uint32*>(48) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var5);
}

// First occurrence: fn01cade, line 2187
static void exec_3b447f88aa1f311b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn01cade, line 2188
static void exec_a1b69642ab4e34d0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01cade, line 2191
static void exec_8ca54bb5d490703c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn01cb20, line 2220
static void exec_ef9bbd2ed633eb80(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0075d2, line 2244
static void exec_7fd344515c853612(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn0075d2, line 2246
static void exec_8a641e8f175ba065(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var1);
}

// First occurrence: UpdateSpecialScrolling, line 2271
static void exec_e89b4c5a26e7142e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: addScore, line 2289
static void exec_aae3ed6e0b0c8fb4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(var1)));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: addScore, line 2292
static void exec_891447fd50814a09(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: addScore, line 2299
static void exec_42271fe3ff40612e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: AddRings, line 2320
static void exec_089b529c97a33a28(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: UpdateGlobalRingAnimation, line 24
static void exec_37cad823d58d74ae(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) % (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var4);
}

// First occurrence: UpdateGlobalRingAnimation, line 31
static void exec_8a98cce5394d403b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint8 var2 = *context.getParameter<uint8*>(16);
	const uint16 var4 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var4);
}

// First occurrence: UpdateGlobalRingAnimation, line 32
static void exec_aae83cc92c5b6bb7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) % (uint16)(context.getParameter<int64>(16)));
	const int8 var5 = (uint8)var4;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), (uint8)var5);
}

// First occurrence: UpdateListOfRingsAround_Default, line 118
static void exec_33840f609f9f921a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateListOfRingsAround_Default, line 120
static void exec_a830306d6a31e17d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: UpdateListOfRingsAround_Default, line 126
static void exec_262f6e18860b477b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(var1)));
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: UpdateListOfRingsAround_Default, line 140
static void exec_fb8ffa859c67b60f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)var0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: UpdateListOfRingsAround_Default, line 142
static void exec_a12e70ab9bb9b11c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(var0));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var3));
	*context.getParameter<uint16*>(8) = (uint16)var4;
	context.moveValueStack(-2);
}

// First occurrence: UpdateStaticRingsAnimation, line 163
static void exec_38254f41c36181a5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) != (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: UpdateStaticRingsAnimation, line 165
static void exec_b6e3b38f51108ac3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(4)));
	*context.getParameter<uint32*>(12) = (uint32)var4;
}

// First occurrence: UpdateStaticRingsAnimation, line 171
static void exec_ac50ff7ea0818185(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateStaticRingsAnimation, line 174
static void exec_74422a1529c76c74(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: UpdateListOfRingsAround_VerticalLayout, line 194
static void exec_d8bf7dc18091831e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: fn00eb1a, line 240
static void exec_5a6c1cc52a9eb6f1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(12) = (uint32)var4;
}

// First occurrence: fn00eb1a, line 251
static void exec_63ec473400226f56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) & (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 266
static void exec_2e1cd7536c5ce194(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(16));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var4);
}

// First occurrence: RenderStaticRings, line 267
static void exec_fdd80fc09c59caad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 280
static void exec_9232f017583ebc26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(20)));
	const uint16 var8 = swapBytes16(*context.getParameter<uint16*>(28));
	const uint16 var9 = ((uint16)(var7) & (uint16)(var8));
	*context.getParameter<uint16*>(36) = (uint16)var9;
}

// First occurrence: RenderStaticRings, line 281
static void exec_04a6d24439f7b473(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 284
static void exec_4ce47e7e13be506d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(12)));
	*context.getParameter<uint16*>(20) = (uint16)var5;
}

// First occurrence: RenderStaticRings, line 286
static void exec_e18a20ab9328d4a1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var3);
}

// First occurrence: RenderStaticRings, line 292
static void exec_d0238850e9036183(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var5);
}

// First occurrence: RenderStaticRings, line 294
static void exec_2ce6772e339d95a7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(12);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: RenderStaticRings, line 295
static void exec_30a703b9fbcffc27(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = 0;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var5);
}

// First occurrence: RenderStaticRings, line 296
static void exec_67e1f7845788c0d4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var3);
}

// First occurrence: RenderStaticRings, line 297
static void exec_46de435dc3102c6e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var3);
}

// First occurrence: RenderStaticRings, line 303
static void exec_43fcbee11a55d5a9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var5 = *context.getParameter<uint8*>(24);
	const uint8 var6 = ((uint8)(var4) - (uint8)(var5));
	const uint8 var8 = OpcodeExecUtils::safeDivide<uint8>((uint8)var6, (uint8)context.getParameter<int64>(32));
	const uint8 var10 = ((uint8)(var8) % (uint8)(context.getParameter<int64>(40)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), (uint8)var10);
}

// First occurrence: RenderStaticRings, line 304
static void exec_5e3058e95f5eb86d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: RenderStaticRings, line 304
static void exec_f8ba8d67aaa61dc4(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), (uint64)context.readValueStack<uint64>(-1));
	context.moveValueStack(-1);
}

// First occurrence: RenderStaticRings, line 305
static void exec_1fdbda2497cde99a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: RenderStaticRings, line 307
static void exec_03be5656e081dace(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(12));
	context.moveValueStack(6);
}

// First occurrence: RenderStaticRings, line 311
static void exec_f2d058709a0ea330(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: RenderStaticRings, line 325
static void exec_724b21c25dbad880(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: Character.Initialization.shared, line 192
static void exec_4955f06807fe1bd7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) | (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 282
static void exec_6092eeaf8e9b5998(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)!var0;
	context.writeValueStack<uint16>(0, (uint16)(uint16)var1);
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 302
static void exec_09d5568ae81bee29(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 311
static void exec_aedb0010791b9363(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = (uint8)!var0;
	context.writeValueStack<uint8>(0, (uint8)(uint8)var1);
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 311
static void exec_90f6b8df48bc8226(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) >= (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint8>(-1, (uint8)(uint8)var1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 313
static void exec_bd29ba9430ae15ad(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>(8) = (uint8)context.getParameter<int64>();
}

// First occurrence: Character.UpdateNormalState.Sonic, line 326
static void exec_d00e7f9ae3116195(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 348
static void exec_a6968f8ee5dad7f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) ^ (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: Character.sharedUpdateOnGround, line 650
static void exec_9d09712c065bbc82(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int32 var6 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: Character.sharedUpdateOnGround, line 653
static void exec_19f39089245fff74(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)var0, (int32)var1);
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)var3);
}

// First occurrence: Character.sharedUpdateOnGround, line 655
static void exec_8b2f3d718252a203(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16));
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: Character.sharedUpdateOnGround, line 656
static void exec_8f09662a5d7814a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	context.writeValueStack<uint8>(2, (uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: Character.sharedUpdateOnGround, line 656
static void exec_fc64427baa9d0075(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	context.writeValueStack<int32>(0, (int32)(uint32)-(signed)var0);
	context.moveValueStack(1);
}

// First occurrence: Character.sharedUpdateOnGround, line 656
static void exec_7cdf10d190583ea2(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-2), (uint32)context.readValueStack<uint32>(-1));
	context.moveValueStack(-2);
}

// First occurrence: Character.sharedUpdateOnGround, line 660
static void exec_ce9f93f0980c8089(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int32 var6 = ((int32)(var0) * (int32)(var4));
	const int32 var8 = ((int32)(var6) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	const int16 var9 = (uint16)var8;
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
	context.moveValueStack(-1);
}

// First occurrence: Character.sharedUpdateOnGround, line 662
static void exec_f78c6f9ec981cbcf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: Character.sharedUpdateOnGround, line 662
static void exec_58ecb82258179e00(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)context.readValueStack<int16>(-1));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
	context.moveValueStack(-1);
}

// First occurrence: partialUpdateCharacterOnGround, line 697
static void exec_ecfe99dbac3e06bd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: Character.UpdateTailsUprightInAir, line 795
static void exec_6969160d0a9fa601(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) >= (uint8)(context.getParameter<int64>())));
}

// First occurrence: UpdateTailsFlight_innerA, line 825
static void exec_28ed0dedd60f2fdd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var5 = (uint64)-(signed)context.getParameter<int64>(16);
	const int16 var6 = (uint16)var5;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >= (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerA, line 829
static void exec_65c1ae4c8aa38041(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 1;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var0) & (uint8)(var1)));
}

// First occurrence: UpdateTailsFlight_innerA, line 829
static void exec_22e4f9f7addfc49b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerA, line 858
static void exec_caac255816d4a2ea(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerA, line 884
static void exec_24214fea708db742(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: UpdateTailsFlight_innerA, line 887
static void exec_03e49ff8939292de(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerB, line 940
static void exec_7dedfe7e8b29cc70(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: Tails.UpdateCarrySonic, line 965
static void exec_0f0c49abd8b577ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = swapBytes16(*context.getParameter<int16*>(16));
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Tails.UpdateCarrySonic, line 967
static void exec_e5ec4cb96f6b748d(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Tails.UpdateCarrySonic, line 972
static void exec_20f2e76ec1b97797(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)context.getParameter<int64>());
}

// First occurrence: Tails.UpdateCarrySonic, line 983
static void exec_a983e8a9c4144ee7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	const uint8 var4 = ((uint8)(var2) != (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: Tails.UpdateCarrySonic, line 986
static void exec_696fe20d0aa56c53(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) >= (uint32)(context.getParameter<int64>())));
}

// First occurrence: Tails.UpdateCarrySonic, line 989
static void exec_c0f9dc4cd0c3582a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const int64 var5 = 0;
	const uint16 var6 = ((uint16)(var4) != (uint16)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
}

// First occurrence: Tails.UpdateCarrySonic, line 999
static void exec_ee15a616058d3e18(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)(uint16)var3);
	context.writeValueStack<uint8>(1, (uint8)*context.getParameter<uint8*>(16));
	context.moveValueStack(2);
}

// First occurrence: Tails.UpdateCarrySonic, line 999
static void exec_846bcc0d7b07e15d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: Tails.UpdateCarrySonic, line 1003
static void exec_3aaa3eea66285e63(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: Tails.UpdateCarrySonic, line 1004
static void exec_bcbe7868a629be1c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) | (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: Tails.UpdateCarrySonic, line 1050
static void exec_129fc731427984f3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: Tails.UpdateCarrySonic, line 1052
static void exec_d9f4f4e40a0036c3(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: Tails.UpdateCarrySonic, line 1066
static void exec_cb328091194ec187(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: Tails.CheckCatchSonic, line 1093
static void exec_c72eb30eb2354134(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(8)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: Tails.CheckCatchSonic, line 1108
static void exec_c2173187ce7118f7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: Tails.CheckCatchSonic, line 1109
static void exec_d511928a5cd793fc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(0, (uint16)(uint16)var10);
	context.writeValueStack<uint8>(1, (uint8)*context.getParameter<uint8*>(40));
	context.moveValueStack(2);
}

// First occurrence: Tails.CheckCatchSonic, line 1109
static void exec_3960952232f372e8(const RuntimeOpcodeContext context)
{
	const int64 var0 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(context.readValueStack<int64>(-1)));
	const int16 var1 = (uint16)var0;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var1);
	context.moveValueStack(-2);
}

// First occurrence: Tails.CheckCatchSonic, line 1116
static void exec_ab92de7d4d31984c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: fn01459e, line 1131
static void exec_542ed3d92a388c72(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn01459e, line 1137
static void exec_73bbce9d74895c73(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var6 = ((uint8)(var4) | (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = (uint8)~var6;
	const uint8 var8 = ((uint8)(var3) & (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: UpdateKnucklesGlide, line 1214
static void exec_f27cb97e8cd0414d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(4)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlide, line 1228
static void exec_e8c63db9aa13ffb2(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) + (uint8)(context.getParameter<int64>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var1);
	context.moveValueStack(-1);
}

// First occurrence: UpdateKnucklesGlide, line 1233
static void exec_3524cdf9dd90a274(const RuntimeOpcodeContext context)
{
	const uint8 var0 = ((uint8)(context.readValueStack<uint8>(-2)) - (uint8)(context.readValueStack<uint8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
	context.moveValueStack(-2);
}

// First occurrence: UpdateKnucklesGlide, line 1240
static void exec_241c3e04b4fea536(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: UpdateKnucklesGlide, line 1245
static void exec_1807f9e838996ede(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	context.writeLocalVariable<int32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-1);
}

// First occurrence: UpdateKnucklesGlide, line 1246
static void exec_7298e4818e5133c2(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int32 var6 = ((int32)(var0) * (int32)(var4));
	const int32 var8 = ((int32)(var6) >> (int32)((context.getParameter<int64>(20)) & 0x1f));
	const int16 var9 = (uint16)var8;
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(28);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(36)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: UpdateKnucklesGlide, line 1247
static void exec_38275a1a7dcdb3e5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(1, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeValueStack<int16>(2, (int16)((int16)(var6) >= (int16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlide, line 1251
static void exec_f6bd33dc3b4264e4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateKnucklesGlide, line 1252
static void exec_8c8a1bb5d47956f4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1272
static void exec_aa999fb5b403d588(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) > (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1293
static void exec_840e58924bfd9c2b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) - (uint16)(var8));
	const uint16 var10 = 1;
	const int16 var11 = ((uint16)(var9) - (uint16)(var10));
	*context.getParameter<uint16*>(32) = (uint16)var11;
}

// First occurrence: UpdateKnucklesGlideCollision, line 1310
static void exec_3678fdae4f9bca8f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) ^ (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: UpdateKnucklesGlideCollision, line 1335
static void exec_510eb8dbea5e881f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = (uint8)var7;
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	const uint16 var10 = 1;
	const int16 var11 = ((uint16)(var9) + (uint16)(var10));
	*context.getParameter<uint16*>(32) = (uint16)var11;
}

// First occurrence: UpdateKnucklesGlideCollision, line 1415
static void exec_b7c066861bdadbad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1425
static void exec_8a2e528f5f952dc6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<uint8>(2, (uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1425
static void exec_46456487957b9ad7(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-2), (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-2);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1437
static void exec_1424fca6a839b6db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: UpdateKnucklesGlideCollision, line 1464
static void exec_babc996894e965d4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(1, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) & (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1472
static void exec_7181aca4d1a832f9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) - (uint8)(var7));
	const int8 var9 = (uint8)var8;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var9);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1498
static void exec_6aa7485a5ad555aa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) < (int16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1503
static void exec_405cfe62865342cd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) >= (int16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1511
static void exec_30d260e7b0d02275(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1544
static void exec_8aa3b16647217794(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) != (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn016d10_unified, line 1644
static void exec_9a8b2f3684745507(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 1;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) & (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn016d10_unified, line 1644
static void exec_8ac970cfff155c63(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var0));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var1);
	context.moveValueStack(-3);
}

// First occurrence: fn016d10_unified, line 1645
static void exec_516afdc7cd484c2d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(20)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var8);
}

// First occurrence: fn016d10_unified, line 1648
static void exec_2d1b03b01e0d6362(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(20)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	*context.getParameter<uint16*>(28) = (uint16)var8;
}

// First occurrence: fn016d10_unified, line 1674
static void exec_df5dc83e107273e0(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn016d10_unified, line 1688
static void exec_38e2d944a36144ed(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(8));
	context.writeValueStack<int8>(0, (int8)((int8)(context.getParameter<int64>()) * (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn016d10_unified, line 1690
static void exec_94fb88323db4c110(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	const uint32 var1 = (uint32)-(signed)var0;
	*context.getParameter<uint32*>() = (uint32)var1;
}

// First occurrence: fn016e10, line 1805
static void exec_7cdc1f1455855dc7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var3 = ((uint8)(var1) | (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var0) & (uint8)(var3));
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn016e10, line 1810
static void exec_e61fd3bb7b609216(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	*context.getParameter<uint16*>() = (uint16)var0;
	context.moveValueStack(-1);
}

// First occurrence: fn016e10, line 1831
static void exec_01f3bef85695dae5(const RuntimeOpcodeContext context)
{
	const int16 var0 = 0;
	*context.getParameter<int16*>() = (uint16)var0;
}

// First occurrence: fn016e10, line 1842
static void exec_59b5c2c52969bd97(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) + (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn016e60, line 1869
static void exec_5f150e29eeaa350c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) ^ (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn016efe, line 1897
static void exec_a48b6880c3c78749(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)var3;
	const int32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn016fa8, line 1920
static void exec_5bf7c384374f25d7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var5) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn016fa8, line 1921
static void exec_b1400b6300a31704(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn01793e, line 1938
static void exec_dc5897cbe78c334d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var4);
}

// First occurrence: Character.CheckStartJump, line 2088
static void exec_d4dd470e9ff6cd21(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int8 var1 = (uint8)-(signed)var0;
	*context.getParameter<int8*>(8) = (uint8)var1;
}

// First occurrence: Character.CheckStartJump, line 2104
static void exec_13fa516eff50e795(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) != (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: Character.CheckStartJump, line 2131
static void exec_1214227765ce6c0d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) - (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: Character.CheckStartJump, line 2132
static void exec_ac7700ff7f2e6ee0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)var5);
	context.moveValueStack(-1);
}

// First occurrence: Character.CheckStartJump, line 2135
static void exec_9438a7c8c52fb755(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16));
	const int16 var5 = (uint16)var4;
	const int16 var6 = ((uint16)(var3) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: Character.CheckStartJump, line 2165
static void exec_ed5cf6186ee9b6d4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int8 var8 = ((uint8)(var3) - (uint8)(var7));
	context.writeLocalVariable<int8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: Character.CheckStartJump, line 2166
static void exec_990979e29e352128(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var0));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var1);
	context.moveValueStack(-3);
}

// First occurrence: Character.CheckStartJump, line 2172
static void exec_e07efcb596745b7f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: UpdateMovementSimple, line 2192
static void exec_a962c139d454aa47(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int32 var6 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: centerCameraYOffset, line 2223
static void exec_305691f950d854d0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: centerCameraYOffset, line 2225
static void exec_6b825a1acb77a4a6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var2) < (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, (uint32)var0);
	context.moveValueStack(3);
}

// First occurrence: getRotationQuarter, line 2232
static void exec_78f5dbbeb56343ce(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: getRotationQuarter, line 2233
static void exec_ed4695ec2faef16e(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: getRotationQuarter, line 2235
static void exec_1c2ea3713cc5dba1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeLocalVariable<int8>(context.getParameter<uint32>(4), (uint8)var0);
}

// First occurrence: setSpeedCapProperties, line 2271
static void exec_1a54164ef012e7be(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.moveValueStack(2);
}

// First occurrence: setSpeedCapProperties, line 2271
static void exec_af53206be0bb0fba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: setSpeedCapProperties, line 2272
static void exec_ea8aaaee3eadc821(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: setSpeedCapProperties, line 2272
static void exec_2299b4275899c409(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: setSpeedCapProperties, line 2281
static void exec_74c9199b7784b7f4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)context.getParameter<int64>());
}

// First occurrence: Character.UpdateRotationOnGround, line 2354
static void exec_75ccaf104620dc91(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(context.getParameter<int64>()) - (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2401
static void exec_ad28ad238a9c30b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2417
static void exec_a052dfcd53f9a2ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2417
static void exec_1fd07af497ea3a7c(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	*context.getParameter<uint8*>() = (uint8)var0;
	context.moveValueStack(-1);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2418
static void exec_65982ce927de6eee(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2420
static void exec_c79ab901de2a3216(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2413
static void exec_f725d259e729981e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0xc0, line 2476
static void exec_b82eee8574feafa1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0x40, line 2501
static void exec_3c55cee1cb4a8e4e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var12 = ((uint32)(var9) ^ (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var12;
}

// First occurrence: Character.updateRotationOnGround0x40, line 2503
static void exec_38210c9156f4f41e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: Character.UpdateControlInAir, line 2594
static void exec_d463584009a40158(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: Character.UpdateControlInAir, line 2600
static void exec_9f121704a44632b7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = (uint16)-(signed)var1;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlInAir, line 2610
static void exec_36be4c433a64b15e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlInAir, line 2624
static void exec_f0b29ee87680fd51(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(4)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: Character.UpdateGroundContact, line 2644
static void exec_b8241afee10c470c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2651
static void exec_3d9ac63f5097a7a9(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2651
static void exec_aeaa613b2a0c5d2d(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2653
static void exec_8f79258c8290c853(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) < (uint16)(context.getParameter<int64>())));
}

// First occurrence: Character.UpdateGroundContact, line 2657
static void exec_63a76fbec885e6d2(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2657
static void exec_6fe31166b809e0ee(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2659
static void exec_06013c4129c32e84(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateUprightSlopeEffect, line 2681
static void exec_015066f60a1a4587(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int32 var2 = ((int32)(var0) * (int32)(context.getParameter<int64>()));
	const int32 var4 = ((int32)(var2) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var5 = (uint16)var4;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var5);
	context.moveValueStack(-1);
}

// First occurrence: Character.UpdateUprightSlopeEffect, line 2684
static void exec_f833778f42eb1637(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int16 var5 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: Character.UpdateRollingSlopeEffect, line 2697
static void exec_6d406dbe0d7c3fe9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) >= (int16)(var4));
	const int16 var6 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int64 var7 = 0;
	const int16 var8 = ((int16)(var6) >= (int16)(var7));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateJumpMoves, line 2736
static void exec_7a667342d28e8b25(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateJumpMoves, line 2806
static void exec_6a733b1acf6753d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)1);
	context.moveValueStack(2);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2840
static void exec_7a301f9b0476bc59(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2840
static void exec_14063f01ba920796(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeValueStack<int16>(0, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2858
static void exec_9a04094631ef4151(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var7 = ((uint64)(context.getParameter<int64>(16)) | (uint64)(context.getParameter<int64>(24)));
	const int64 var8 = ((uint64)(var3) & (uint64)(var7));
	const int64 var9 = 0;
	context.writeValueStack<int64>(0, (int64)((uint64)(var8) != (uint64)(var9)));
	context.moveValueStack(1);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2862
static void exec_8a7199ab6c3684a7(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) < (uint16)(context.getParameter<int64>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var1);
	context.moveValueStack(-1);
}

// First occurrence: SonicPressedJumpInMidAir, line 2898
static void exec_1e79b4756636d07a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: SonicPressedJumpInMidAir, line 2971
static void exec_94f9210c4a5726ea(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) == (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: TailsStartFlight, line 3020
static void exec_2889dd4bbce021b0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) - (uint8)(var7));
	const int8 var9 = (uint8)var8;
	*context.getParameter<int16*>(32) = (uint16)var9;
}

// First occurrence: KnucklesPressedJumpInMidAir, line 3069
static void exec_93d129ce14781b54(const RuntimeOpcodeContext context)
{
	const int8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: Character.performSuperTransformation, line 3097
static void exec_b93c023f369c1c17(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: Character.cancelSuperTransformation, line 3242
static void exec_b8e4836688c31419(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateRotationInAir, line 3269
static void exec_3e3b178d82344703(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: Character.UpdateRotationInAir, line 3269
static void exec_c572eed81133e31a(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) - (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: Character.UpdateRotationInAir, line 3285
static void exec_41c171cb86d60d76(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) < (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: Character.UpdateRotationInAir, line 3289
static void exec_3a712a13c11a6572(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) - (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: Character.UpdateRotationInAir, line 3290
static void exec_956084de5f421d90(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) > (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: SonicUpdateRingCollection, line 3379
static void exec_43aac5bb555302ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: SonicUpdateRingCollection, line 3381
static void exec_a0dee98a2a032d48(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: SonicUpdateRingCollection, line 3396
static void exec_73b9674d9524ac7b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 0;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var3);
}

// First occurrence: SonicUpdateRingCollection, line 3410
static void exec_f6b267962e7fbaf7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int16 var2 = (uint16)-(signed)var1;
	const int16 var4 = OpcodeExecUtils::safeDivide<int16>((int16)var2, (int16)context.getParameter<int64>(12));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: SonicUpdateRingCollection, line 3412
static void exec_1c959c8fca5c2648(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: SonicUpdateRingCollection, line 3410
static void exec_8001d56efab1919c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(12));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: SonicUpdateRingCollection, line 3416
static void exec_39d56faee91bfaef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: SonicUpdateRingCollection, line 3421
static void exec_bd21c3e49ac421fd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<int16>(6, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24)));
	context.writeValueStack<int16>(7, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(28)));
	context.moveValueStack(8);
}

// First occurrence: SonicUpdateRingCollection, line 3437
static void exec_adba167ec87d6550(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) != (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: checkForExtraLifeByRings, line 3506
static void exec_a7dfdd856df77526(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var0) >> (uint16)((var2) & 0x0f));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var3);
}

// First occurrence: checkForExtraLifeByRings, line 3507
static void exec_eb2dd1fb8e8a7eb6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: checkForExtraLifeByRings, line 3508
static void exec_a431366786e00265(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: gainExtraLife, line 3554
static void exec_7f7a40fa4198957b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: Character.WriteToPositionBackup, line 3581
static void exec_fe5f7e7028574a83(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	*context.getParameter<uint32*>(12) = (uint32)var3;
}

// First occurrence: Character.WriteToPositionBackup, line 3582
static void exec_218afa60f0fa95fe(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: Character.WriteToPositionBackup, line 3587
static void exec_ad82d2755dd2f95b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: ClearPositionBackup, line 3616
static void exec_16cb92076ba07d80(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
}

// First occurrence: ClearPositionBackup, line 3618
static void exec_70b8840521458772(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var0);
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: ClearPositionBackup, line 3628
static void exec_50e9076ddf32a7b9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
	const uint16 var8 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: Character.checkForWaterSurface, line 3656
static void exec_2f697f821fed3401(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.checkForWaterSurface, line 3665
static void exec_8c25a838b65a3bdc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: Character.checkForWaterSurface, line 3666
static void exec_52647d3a1b7644da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const int16 var5 = ((int16)(var3) > (int16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: Character.checkForWaterSurface, line 3675
static void exec_a2357c3b72758bf8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: Character.checkForWaterSurface, line 3728
static void exec_32e36c9e41599a74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: UpdateMusicOnWaterTransition, line 3751
static void exec_b7b542e031afa50b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) <= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateSpindash, line 3847
static void exec_4492db712042837d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateSpindash, line 3873
static void exec_77ee9e29cc01870a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) >> (uint16)((context.getParameter<int64>(32)) & 0x0f));
	const uint16 var10 = ((uint16)(var3) - (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: Character.UpdateSpindash, line 3882
static void exec_0de341b05e64757f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: releaseSpindash, line 3913
static void exec_e152669fa11bfc82(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int8>(context.getParameter<uint32>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: releaseSpindash, line 3923
static void exec_0638f8eccfce7763(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var8 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: releaseSpindash, line 3924
static void exec_b721c60cf4b1818e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: releaseSpindash, line 3928
static void exec_39a36b4ffcfa957f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const int16 var7 = ((int16)(var5) * (int16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: releaseSpindash, line 3929
static void exec_5fa3abfc1bba1a69(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(context.getParameter<int64>()) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: releaseDropDash, line 3963
static void exec_8f75bf8c828de52a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) < (uint8)(context.getParameter<int64>())));
}

// First occurrence: releaseDropDash, line 3969
static void exec_cc178024ee885248(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: releaseDropDash, line 3972
static void exec_aed4cccd90e5f51a(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = ((uint8)(context.getParameter<int64>()) - (uint8)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: releaseDropDash, line 4006
static void exec_b808eafee0f52dc4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: releaseDropDash, line 4008
static void exec_b2dd7a35008f3545(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(20)) & 0x0f));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var6)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(28)));
	context.moveValueStack(2);
}

// First occurrence: releaseDropDash, line 4012
static void exec_5055b1e221243276(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = 1;
	const int16 var6 = ((int16)(var4) >> (int16)((var5) & 0x0f));
	const int16 var7 = ((uint16)(var0) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: releaseDropDash, line 4024
static void exec_add8e0937ee1e760(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(20)) & 0x0f));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var6)));
	const int16 var7 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(28));
	context.writeValueStack<int16>(1, (int16)(uint16)-(signed)var7);
	context.moveValueStack(2);
}

// First occurrence: Character.updateSuperPeelout, line 4072
static void exec_166b40ffe6a8ca83(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: Character.updateSuperPeelout, line 4075
static void exec_853201cd8faafe17(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var5, (uint16)context.getParameter<int64>(24)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateSuperPeelout, line 4075
static void exec_2855e9f90e1746bd(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: releaseSuperPeelout, line 4109
static void exec_3ccea2a0a1fa18da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: releaseSuperPeelout, line 4109
static void exec_d042773cb13ce530(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) * (int16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: updateCharacterControlOnGround, line 4163
static void exec_54733a3645369669(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) << (uint16)((var2) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var3;
}

// First occurrence: updateCharacterControlOnGround, line 4164
static void exec_fca1344bdcc99a13(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) >> (uint16)((var4) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: updateCharacterControlOnGround, line 4180
static void exec_02ddfe7be9b1344c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const int16 var5 = ((uint16)(var3) - (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: updateCharacterControlOnGround, line 4209
static void exec_ba432b54a48cb7a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) - (uint16)(var4)));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: updateCharacterControlOnGround, line 4209
static void exec_f0123504fa1a4ad1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) + (uint16)(var4)));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: updateCharacterControlOnGround, line 4222
static void exec_f6ad875ceb8fdd9e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const int16 var10 = ((uint16)(var3) - (uint16)(var8));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var10);
}

// First occurrence: Character.updateUprightOnGroundInner, line 4416
static void exec_567203d60802c7db(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var3 = 1;
	const int64 var4 = ((uint64)(context.getParameter<int64>(4)) | (uint64)(var3));
	context.writeValueStack<int64>(0, (int64)((uint64)(var0) & (uint64)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateUprightOnGroundInner, line 4438
static void exec_a4ed6065a692ea37(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: Character.updateUprightOnGroundInner, line 4464
static void exec_7e22461ed9aa18f9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: checkForBalancing, line 4512
static void exec_c60998463d5f1618(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const uint16 var14 = ((uint16)(var9) - (uint16)(var13));
	*context.getParameter<uint16*>(48) = (uint16)var14;
}

// First occurrence: checkForBalancing, line 4513
static void exec_4fc42468f19a242a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: checkForBalancing, line 4518
static void exec_729aa7c85c566ee8(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)-(signed)context.getParameter<int64>();
	context.writeLocalVariable<int8>(context.getParameter<uint32>(8), (uint8)var1);
}

// First occurrence: checkForBalancing, line 4524
static void exec_6ffe8dc05022c815(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: checkForBalancing, line 4597
static void exec_85dae9f863d4c736(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: checkForBalancing, line 4598
static void exec_9490bd98a0b08c3e(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const int8 var2 = ((int8)(var0) < (int8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: checkForBalancing, line 4607
static void exec_fc73efa8ed382d75(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4626
static void exec_435c6c8d92b166d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) > (uint8)(context.getParameter<int64>())));
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4635
static void exec_d7afaecaabe85e97(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4650
static void exec_2f027213b4bd32f1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var4);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4758
static void exec_37249ca54d1d5d22(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int32 var10 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var11 = ((uint32)(var3) + (uint32)(var10));
	const int32 var13 = ((int32)(var11) >> (int32)((context.getParameter<int64>(40)) & 0x1f));
	const int16 var14 = (uint16)var13;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), (uint16)var14);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4762
static void exec_d6a1c30a92e732b5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4763
static void exec_de4da2de98b760db(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4767
static void exec_5ee3d403e1ea5b0c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var3);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4765
static void exec_8d9fa9cd1a54994f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) <= (uint16)(context.getParameter<int64>(4)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4765
static void exec_6001d9b7b7b337d1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const int16 var2 = ((int16)(var0) < (int16)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4765
static void exec_198658ae6de34e48(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const int16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((int16)(var0) >= (int16)(var3));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var4);
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4773
static void exec_43c58b6db7ff2deb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4794
static void exec_1ef1238bb901061d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = ((int16)(var0) >= (int16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4799
static void exec_493b6d838d8318fa(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = ((int16)(var0) < (int16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 4824
static void exec_f08f6433e1439e73(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 4850
static void exec_375483074c2282a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 4851
static void exec_d865b82095bd81ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 4853
static void exec_9c68ee6bf7c121f2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4877
static void exec_74ca0b13af4fed62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4880
static void exec_13468aa9abdb7902(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	*context.getParameter<uint32*>(28) = (uint32)var7;
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4881
static void exec_6962e1556ddfa5a9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var1);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4882
static void exec_85dea724b0ad52f9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var3);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4886
static void exec_7c60e5fe3447f424(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 4894
static void exec_55bc3bd90dbd7341(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (uint16)(uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(3, (uint16)(uint16)*context.getParameter<uint16*>(24));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint16>(6, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.writeValueStack<uint16>(7, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(44)));
	context.moveValueStack(8);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 4956
static void exec_c96709ecba05d23e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var8);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 4958
static void exec_8bd2d07f8b15ce44(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) - (uint8)(context.getParameter<int64>()));
	*context.getParameter<uint8*>(8) = (uint8)var1;
	context.moveValueStack(-1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 4959
static void exec_f99b3e77605e19a6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >= (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5005
static void exec_fd4559f0972c2ef7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var7 = ((uint8)(var2) << (uint8)((var6) & 0x07));
	const uint8 var8 = (uint8)~var7;
	const uint8 var9 = ((uint8)(var1) & (uint8)(var8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var9);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5015
static void exec_577b64bc518768e8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5053
static void exec_1309823ae2cb65f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) < (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5058
static void exec_2ea76f54ec44647d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) >= (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5098
static void exec_bc0076d6ab170256(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Character.OnThreatCollision, line 5154
static void exec_239d694151c9c300(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) & (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: Character.OnThreatCollision, line 5179
static void exec_7d73aa3bc964551b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: Character.GettingHurt, line 5246
static void exec_b601788801021afa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-1);
}

// First occurrence: getSoundIdByObstacleAddress, line 5319
static void exec_48ecc79c1f1d96c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0103ba, line 5335
static void exec_ca9b41ada220fe01(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn0103ba, line 5336
static void exec_95d48ae62fe106cf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0103ba, line 5338
static void exec_e3d044f86cc0f15e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: UpdateShieldDeflecting, line 5375
static void exec_0437a91518f89c10(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: deflectProjectile, line 5412
static void exec_65ae0501044681a1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int32 var1 = (uint32)-(signed)var0;
	const int32 var3 = ((int32)(var1) * (int32)(context.getParameter<int64>()));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var6 = (uint16)var5;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
	context.moveValueStack(-1);
}

// First occurrence: GetGroundAngle, line 5442
static void exec_cf83fdb852af7162(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: GetGroundAngle, line 5444
static void exec_6279715f96bb8090(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) - (uint8)(var4));
	context.writeLocalVariable<int8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: Character.clearEnemiesOnScreen, line 5529
static void exec_5437cdc35a836c62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn01052e, line 5581
static void exec_0a1bc7573cd6cc4e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var4 = ((uint8)(var2) << (uint8)((var3) & 0x07));
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var1) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var6);
}

// First occurrence: fn01059c, line 5613
static void exec_2fd37b5b34b1aaf7(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) == (uint8)(var0)));
}

// First occurrence: Character.CheckCollision, line 5645
static void exec_d3d1b7476b9b54d8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: Character.CheckCollision, line 5656
static void exec_cb0575da8ea0a0f3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: Character.CheckCollision, line 5676
static void exec_29a33c99bcfeca46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const int8 var8 = (uint8)var7;
	*context.getParameter<uint8*>(32) = (uint8)var8;
}

// First occurrence: Character.CheckCollision, line 5678
static void exec_e12edf56d8f7396c(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	context.writeValueStack<int8>(0, (int8)((int8)(var0) < (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Character.CheckCollision, line 5684
static void exec_d6dfdfb6ad002aac(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: Character.LandingOnGroundStandUp, line 5891
static void exec_4ae3a9f9395c281c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) - (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: Character.LandingOnGroundStandUp, line 5893
static void exec_58c3fd895ecd600f(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: Character.LandingOnGroundStandUp, line 5894
static void exec_ae66b2b4c2072a7a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(24)));
	const uint8 var8 = ((uint8)(var6) >= (uint8)(context.getParameter<int64>(32)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: SonicLandingBubbleBounce, line 5952
static void exec_6935762181d9998e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: SonicLandingBubbleBounce, line 5956
static void exec_735788ba802890bd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(4)));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint8 var4 = ((uint8)(var2) - (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: SonicLandingBubbleBounce, line 5957
static void exec_1861bb8f23f6c2a3(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	const int16 var6 = (uint16)var5;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
	context.moveValueStack(-1);
}

// First occurrence: SonicLandingBubbleBounce, line 5964
static void exec_612e7be5c58fd9c9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	const int16 var6 = (uint16)var5;
	const int16 var7 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var7);
	context.moveValueStack(-3);
}

// First occurrence: Character.CheckFloorCollision, line 5995
static void exec_25653ccec73a988b(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	const int8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	*context.getParameter<int8*>(16) = (uint8)var2;
}

// First occurrence: Character.updateBonusEffects, line 6067
static void exec_580e3570584f9bff(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateBonusEffects, line 6099
static void exec_8195bb2470133d35(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var1);
}

// First occurrence: Character.HurtCheckForStateChange, line 6158
static void exec_cbedeec52b85e44c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<int16>(-3, (int16)((int16)(context.readValueStack<int16>(-3)) > (int16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: Character.CheckDiedStateEnd, line 6411
static void exec_5c505ad09a46290a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Character.CheckDiedStateEnd, line 6417
static void exec_4f0523a61c71ed49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateSonicSpritePatterns, line 18
static void exec_0cc312d267037b95(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: UpdateTailsSpritePatterns, line 24
static void exec_c309612861abf2b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: updateCharacterSpritePatterns, line 60
static void exec_a258f3953c1e7834(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 63
static void exec_778af3542687b198(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 65
static void exec_131b3949b1f2c2bd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 67
static void exec_5307ee6f9ba05699(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
}

// First occurrence: updateCharacterSpritePatternsInner, line 72
static void exec_11d91df2d548a926(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: updateCharacterSpritePatternsInner, line 74
static void exec_c82b861089c99d36(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: updateCharacterSpritePatternsInner, line 91
static void exec_4b804cf2422826d0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
	const int16 var5 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	const int16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fn018122, line 99
static void exec_84f312bff7dcee8e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)*context.getParameter<uint8*>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(3, (uint16)(uint16)*context.getParameter<uint16*>(24));
	context.moveValueStack(4);
}

// First occurrence: UpdateSonicAnimation, line 119
static void exec_99e983d591e8f62d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var7)));
	context.moveValueStack(1);
}

// First occurrence: UpdateSonicAnimation, line 128
static void exec_7fd2f582e77bec38(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) * (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimationStanding, line 153
static void exec_e8fea579fa0bde82(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = (uint8)*context.getParameter<uint8*>(24);
	const uint8 var7 = ((uint8)(var5) | (uint8)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: updateSonicAnimationRolling, line 186
static void exec_d74ebc0280d514a7(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((uint16)(context.getParameter<int64>()) - (uint16)(var1)));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimationRolling, line 186
static void exec_f579fc73a308c49d(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) >> (int16)((context.getParameter<int64>()) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: updateSonicAnimation_shared, line 200
static void exec_dd9f15bbb28d6e48(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var9);
}

// First occurrence: updateSonicAnimation_shared, line 202
static void exec_9adb7f6d573f1a39(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimation_shared, line 208
static void exec_8a67316e41c73921(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	*context.getParameter<uint8*>(24) = (uint8)var9;
}

// First occurrence: updateSonicAnimation_shared, line 216
static void exec_6bbd6b7143516be5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: updateSonicAnimation_shared, line 220
static void exec_f888a1f622e3e901(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var9);
}

// First occurrence: updateSonicAnimation_shared, line 221
static void exec_4eacc162c6eec3a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) - (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: updateSonicAnimation_shared, line 222
static void exec_233b31b14dd76dd2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: updateSonicAnimationRunning, line 243
static void exec_2d1aeb303c47abc0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) > (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: updateSonicAnimationRunning, line 243
static void exec_c05382dbcf50e8cb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) - (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: updateSonicAnimationRunning, line 245
static void exec_5075782f874bc9ea(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int8 var1 = (uint8)-(signed)var0;
	const int8 var2 = 1;
	const int8 var3 = ((uint8)(var1) - (uint8)(var2));
	*context.getParameter<int8*>(8) = (uint8)var3;
}

// First occurrence: updateSonicAnimationRunning, line 249
static void exec_8ef847d5e1f23d4f(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<int64>(0, (int64)((uint64)(var0) | (uint64)(context.getParameter<int64>())));
	context.moveValueStack(1);
}

// First occurrence: updateSonicAnimationRunning, line 261
static void exec_b0c3ee7ad25410bb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >> (uint8)((context.getParameter<int64>(8)) & 0x07));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: updateSonicAnimationRunning, line 273
static void exec_0d36959f38b0dd3e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: updateSonicAnimationRunning, line 338
static void exec_8e934648a97befed(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: updateSonicAnimationRunning, line 342
static void exec_604e77f987a33bec(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) >> (int16)((context.getParameter<int64>()) & 0x0f));
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: updateCharacterAnimationRunning_shared, line 350
static void exec_4d2f786e2dc0ad59(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: updateCharacterAnimationRunning_shared, line 389
static void exec_cc3bced0fce2188a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(8));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int16 var5 = (uint16)var4;
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: updateSonicAnimationPushing, line 402
static void exec_83c51096bfde7be5(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) >> (int16)((context.getParameter<int64>()) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: updateSonicAnimationPushing, line 415
static void exec_30e7c1358d199331(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: UpdateTailsAnimation_inner, line 442
static void exec_a21e8de4ee00f269(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var9 = ((uint32)(var1) + (uint32)(var8));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var0) + (uint16)(var10));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: UpdateTailsAnimation_inner, line 468
static void exec_353d20b7ba884ef8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: UpdateTailsAnimation_inner, line 491
static void exec_0053adc32ef3e472(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: UpdateKnucklesAnimation, line 508
static void exec_edb1e79b566222e1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) * (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn012872, line 541
static void exec_ef1f2e2ab26b5fc0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(8));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn012d36, line 631
static void exec_cc07773d6c9e2c72(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)~context.getParameter<int64>(16);
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint8 var11 = 1;
	const uint8 var12 = ((uint8)(var10) & (uint8)(var11));
	const uint8 var13 = ((uint8)(var6) | (uint8)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var16, (uint8)var13);
}

// First occurrence: fn012d36, line 645
static void exec_940591e8a51205eb(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn012d36, line 745
static void exec_3897ea7977e52953(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn012d36, line 766
static void exec_0552e94fd7e1f2b6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)~context.getParameter<int64>(16);
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint8 var7 = (uint8)*context.getParameter<uint8*>(24);
	const uint8 var8 = ((uint8)(var6) | (uint8)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn012d36, line 782
static void exec_0420ce75b7f9daa9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) - (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn012d36, line 788
static void exec_b24d427a66bf8806(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn01309a, line 807
static void exec_61c8bac9c46c1860(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(28)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(4);
}

// First occurrence: fn015cd6, line 843
static void exec_3f8a0b7ca0bfe95e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint8 var10 = 1;
	const uint8 var11 = ((uint8)(var9) & (uint8)(var10));
	const uint8 var12 = ((uint8)(var5) | (uint8)(var11));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var15, (uint8)var12);
}

// First occurrence: fn015cd6, line 924
static void exec_e3aab61ce471b40b(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn01607c, line 1063
static void exec_1e30753bcbebe9b4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn01607c, line 1064
static void exec_e810714eea779759(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	*context.getParameter<uint32*>(32) = (uint32)var6;
}

// First occurrence: fn01607c, line 1066
static void exec_c78b87091b217e31(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: loadCharacterPalette, line 19
static void exec_dce1fe93613109db(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: loadCharacterPalette, line 80
static void exec_cb9bf06ea545a3c8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(12));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: loadCharacterPalette, line 90
static void exec_e0510c3fa776480d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var6);
}

// First occurrence: loadCharacterPalette, line 91
static void exec_94901dbd64e885c5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)context.readValueStack<uint16>(-1));
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var7 = 1;
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var8);
	context.moveValueStack(-1);
}

// First occurrence: loadCharacterPalette, line 98
static void exec_0dccdf5395bfabe2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(var3)));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(28)));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(16)) - (uint16)(var8)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 123
static void exec_e9c57d790e08939b(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 130
static void exec_ece2af65f02af1e2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) - (uint8)(var0));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var1);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 131
static void exec_ee5bd24db92bc94d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var5);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 139
static void exec_c147e8d8c58c761a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var2) + (uint32)(var3)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 150
static void exec_8a3bb591094fa919(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var2) + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 157
static void exec_25d76fca38fa75be(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = *context.getParameter<uint8*>(4);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 159
static void exec_6067f7b0577f70ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = 0;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var5 = 0;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 160
static void exec_5e2d189c9e5381ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 187
static void exec_64b1e48d9ff19546(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) + (uint8)(var0));
	context.writeValueStack<uint8>(-1, (uint8)(uint8)var1);
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 196
static void exec_9b302ccc80319314(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 197
static void exec_4672acca0c323d94(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 225
static void exec_0f088793efe51752(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 250
static void exec_d48642f38933211b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) % (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), (uint8)var4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 336
static void exec_910acc3552314ee2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var2);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 337
static void exec_380841e36c46c6d3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 358
static void exec_5980cb90b3a9f50f(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(context.getParameter<int64>()) + (uint32)(var1)));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 399
static void exec_bf9e6461a36d83e3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 400
static void exec_78527c5fefefb1ab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) % (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var7);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 401
static void exec_56ee757b6e1103ba(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint16 var6 = OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)var4);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 403
static void exec_929ae460ab73543e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 404
static void exec_f2dd64585571908f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)1);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 410
static void exec_e991195798134def(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(4), (uint8)var2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 420
static void exec_a7652a1c516521ec(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 421
static void exec_866a4bd7509d6d68(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var3);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 422
static void exec_1130c2311ae72676(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 423
static void exec_ff898e38896f408a(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int16 var3 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int16 var6 = OpcodeExecUtils::safeDivide<int16>((int16)var3, (int16)var4);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 429
static void exec_2538f3b9a27de9e8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 430
static void exec_f94708b0fc0c3a93(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 446
static void exec_fe107cf827b63935(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) % (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var7);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 466
static void exec_96099489d0fe9c98(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) % (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 468
static void exec_5061f7f28dc45816(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int8>(0, (int8)*context.getParameter<int8*>());
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const int64 var1 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) - (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 495
static void exec_0e7128861bbb8c71(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	const int8 var2 = *context.getParameter<int8*>(8);
	const int8 var3 = ((uint8)(var1) - (uint8)(var2));
	const int8 var5 = ((int8)(var3) * (int8)(context.getParameter<int64>(16)));
	const int8 var7 = OpcodeExecUtils::safeDivide<int8>((int8)var5, (int8)context.getParameter<int64>(24));
	const uint16 var9 = ((uint16)(var0) + (uint16)(var7));
	const int16 var11 = ((int16)(var9) * (int16)(context.getParameter<int64>(32)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::safeDivide<int16>((int16)var11, (int16)context.getParameter<int64>(40)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(48));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 497
static void exec_258d30f8a41fb1d0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 501
static void exec_e5d0bdd8c7d74c30(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var1);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 502
static void exec_dc54b0eb661f4321(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)1);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 543
static void exec_9a01dc6adfe8007f(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)context.getParameter<int64>(16)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 573
static void exec_f84d801d39fcc6f5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 573
static void exec_f03545473e47783c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.readValueStack<uint16>(-1));
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 611
static void exec_2e6b98269c935fb6(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 613
static void exec_913afbc72b365d2e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>()));
	context.writeValueStack<uint32>(-1, (uint32)(uint32)var2);
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 613
static void exec_f78c0b4d6ee73099(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readValueStack<int32>(-1);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 616
static void exec_bf5348de5f4909f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 616
static void exec_3e9f489b1275e448(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var2) + (uint32)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)context.readValueStack<uint16>(-1));
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var8 = ((uint8)(var6) + (uint8)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var8);
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendTails, line 623
static void exec_ac8e1e4200140458(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = 0;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var4 = 0;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendTails, line 624
static void exec_aa533f2e46e81558(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 644
static void exec_9a6c6405a273dc7d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(0, (uint16)(uint16)var2);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 645
static void exec_e7cf2a964014a370(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int16 var3 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(0, (int16)(uint16)var3);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 646
static void exec_a75d09499af7ed43(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) % (uint16)(context.getParameter<int64>(4)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 646
static void exec_29f984c42352dcc3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) % (uint16)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 651
static void exec_99257b8a98c86dfa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)(uint8)var0);
	context.writeValueStack<uint8>(1, (uint8)*context.getParameter<uint8*>(4));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 653
static void exec_7034c10a7ae3287a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	context.writeValueStack<uint32>(0, (uint32)(uint32)var3);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 662
static void exec_eb6d0736786781a8(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(16));
	const uint16 var4 = ((uint16)(context.getParameter<int64>()) + (uint16)(var3));
	const int8 var5 = (uint8)var4;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 670
static void exec_220d631fa1fc6177(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var6);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 671
static void exec_0e41c125c5b9fa96(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)context.readValueStack<uint16>(-2));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const int8 var6 = 1;
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var7);
	context.moveValueStack(-2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 676
static void exec_920bb3831dddd9b4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var4) == (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 679
static void exec_eb2dc6ecfc4d8d3f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 684
static void exec_20f11e28233194c9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 684
static void exec_dc4b52c08cb13b62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 725
static void exec_74978ff62d9b9936(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(20)));
	context.writeValueStack<uint16>(2, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var6, (uint16)context.getParameter<int64>(28)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 725
static void exec_307f1f50bcdd9d87(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.readValueStack<uint16>(-1));
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var6);
	context.moveValueStack(-1);
}

// First occurrence: CompetitionMode.Character.BaseUpdate, line 20
static void exec_cc51b61ebb4a9265(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.Character.BaseUpdate, line 42
static void exec_06cd31376a4a4e9b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: fn010628, line 70
static void exec_5ff60f5bc262597c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var5);
}

// First occurrence: fn010740, line 135
static void exec_453dc81c6f998b4f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) == (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: fn010740, line 165
static void exec_c9fb7eca143f93fc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn010740, line 172
static void exec_251cc0f3191bac6c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn01094c, line 333
static void exec_57d65dd999819c5f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn01094c, line 334
static void exec_a7d3caf2017ac533(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn01094c, line 336
static void exec_3d21a3b41190050d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(32)));
	const uint16 var10 = ((uint16)(var8) & (uint16)(context.getParameter<int64>(40)));
	const uint16 var11 = ((uint16)(context.getParameter<int64>()) - (uint16)(var10));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(48);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var11);
}

// First occurrence: fn010a80, line 379
static void exec_2341baced3324b9f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn013166, line 414
static void exec_f3bea93a6f962c23(const RuntimeOpcodeContext context)
{
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) | (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn0133ae, line 584
static void exec_be40a23385969f79(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>()));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(8)));
	const int64 var5 = 0;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var4) == (uint8)(var5)));
}

// First occurrence: Character.TailsAI.Update, line 83
static void exec_09dbdf9c974ed997(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: updateTailsAssist, line 108
static void exec_93eb859005517e60(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = 1;
	const uint8 var2 = (uint8)~var1;
	const uint8 var3 = ((uint8)(var0) & (uint8)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var3);
}

// First occurrence: updateTailsAssist, line 112
static void exec_83317c6fa4518893(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: updateTailsAssist, line 131
static void exec_be8e116fa6298bb0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(20)) & 0x0f));
	const int16 var7 = ((uint16)(var0) - (uint16)(var6));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: updateTailsAssist, line 132
static void exec_df8bdf0c864fead7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(20)) & 0x0f));
	const int16 var7 = ((uint16)(var0) + (uint16)(var6));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: updateTailsAssist, line 133
static void exec_8dace9b4ff153257(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 133
static void exec_c7a926609c490521(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 152
static void exec_f2038b8ba916a5cc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(1, (int16)((int16)(var3) >> (int16)((context.getParameter<int64>(24)) & 0x0f)));
	context.moveValueStack(2);
}

// First occurrence: updateTailsAssist, line 152
static void exec_dc1f22e3e904ec81(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1))));
	context.writeValueStack<int64>(-1, (int64)0);
}

// First occurrence: updateTailsAssist, line 155
static void exec_6336a8301ee66447(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 161
static void exec_1101f3b9697de998(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) | (uint8)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: updateTailsAssist, line 167
static void exec_ae04dd230a22e7a6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), (uint8)var2);
}

// First occurrence: fn013b26, line 335
static void exec_4bc54645db56d06a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) != (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn013b26, line 349
static void exec_c19e5d8007974fec(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)(uint16)var0);
	context.writeValueStack<uint8>(1, (uint8)*context.getParameter<uint8*>(4));
	context.moveValueStack(2);
}

// First occurrence: fn013b26, line 349
static void exec_7b9158c554b1a984(const RuntimeOpcodeContext context)
{
	const int64 var0 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(context.readValueStack<int64>(-1)));
	const int16 var1 = (uint16)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-2);
}

// First occurrence: fn013bf8, line 421
static void exec_0840cbf7d8e8ab1d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const int8 var3 = (uint8)var2;
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn013bf8, line 422
static void exec_096015c3e6570746(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn013bf8, line 423
static void exec_2685d097b0fdaeb1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: fn013bf8, line 424
static void exec_27c6b5c0620603f4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn013bf8, line 427
static void exec_bab0fc31de08ae99(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) >> (uint16)((context.getParameter<int64>()) & 0x0f)));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.moveValueStack(1);
}

// First occurrence: fn013bf8, line 429
static void exec_065bc2fc15c061f4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	const uint8 var4 = ((uint8)(var0) + (uint8)(var3));
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn013bf8, line 462
static void exec_411e42c1e70c6d57(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const int16 var4 = ((uint16)(var0) - (uint16)(var3));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: fn013bf8, line 466
static void exec_d14bffbfee4925e0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int64 var4 = 0;
	context.writeValueStack<int16>(2, (int16)((int16)(var3) > (int16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn013bf8, line 469
static void exec_cd95cbac94031ed9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var8 = ((uint8)(var6) & (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var8;
}

// First occurrence: fn013bf8, line 492
static void exec_ce333ee99aa6e00d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var9) & (uint16)(context.getParameter<int64>(40)));
	const uint16 var12 = ((uint16)(var5) | (uint16)(var11));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15, (uint16)var12);
}

// First occurrence: fn013d4a, line 533
static void exec_d4bc69f1e9db1ae3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn013d4a, line 534
static void exec_0767de2304038cf2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: fn013d4a, line 536
static void exec_7e1c20ff5e01c5f8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
}

// First occurrence: fn013d4a, line 539
static void exec_a6adffa5dd795f5f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(20)) & 0x0f));
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: fn013d4a, line 542
static void exec_ee8c137a79739ef2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn013d4a, line 547
static void exec_fdc230e7cc4cc39a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: fn013d4a, line 567
static void exec_798c5f56221a677d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) & (uint8)(var8));
	const uint8 var10 = ((uint8)(var6) | (uint8)(var9));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var13, (uint8)var10);
}

// First occurrence: fn013d4a, line 575
static void exec_d0e88995f65a8ee0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) | (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn013d4a, line 578
static void exec_43c20d5e1ccbd0ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn013d4a, line 624
static void exec_2246cbfc7f307b49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const int64 var10 = 1;
	const uint8 var11 = ((uint8)(var9) & (uint8)(var10));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var11)));
	context.moveValueStack(1);
}

// First occurrence: fn013d4a, line 626
static void exec_c43656951eff0e9b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint8 var11 = 1;
	const uint8 var12 = ((uint8)(var10) & (uint8)(var11));
	const uint8 var13 = ((uint8)(var6) | (uint8)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var16, (uint8)var13);
}

// First occurrence: fn013efc, line 658
static void exec_5898c9f92f249c5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn013efc, line 680
static void exec_d6aa1772a8d4c8b5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: fn013f40, line 698
static void exec_1a66128541e7afdb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn013ffa, line 776
static void exec_4fbd0e652625def6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var12 = ((uint16)(var9) & (uint16)(context.getParameter<int64>(40)));
	const uint16 var13 = ((uint16)(var5) | (uint16)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16, (uint16)var13);
}

// First occurrence: fn01408a, line 798
static void exec_78d283fa5ba372b1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)!var5);
	context.moveValueStack(1);
}

// First occurrence: fn014106, line 841
static void exec_3488bf89be42243c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn0162d8, line 18
static void exec_e492942a4369a917(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn0162d8, line 27
static void exec_f9caa79059bd7692(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn016340, line 72
static void exec_3175873cd99ef011(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn016340, line 92
static void exec_8a151c14402534a7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) - (uint16)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn01640a, line 135
static void exec_408bf8b6e4b3f1ea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn01640a, line 137
static void exec_529a75b1d3376023(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn01414c, line 209
static void exec_143107c605c60650(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var3 = ((uint8)(context.getParameter<int64>(8)) | (uint8)(context.getParameter<int64>(16)));
	const uint8 var4 = ((uint8)(var0) & (uint8)(var3));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn0142e2, line 306
static void exec_9f961976797a8a25(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) >> (uint16)((context.getParameter<int64>()) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn0142e2, line 307
static void exec_0f4daf13c2f2b9ab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) >> (uint16)((var2) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: TailsTails.Update, line 50
static void exec_d51479eedde85370(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: TailsTails.Update, line 53
static void exec_a4d567a2c00e27bf(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: TailsTails.UpdateSpritePatterns, line 71
static void exec_9b3b5f9f14392d35(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(40));
	context.moveValueStack(5);
}

// First occurrence: fn016232, line 120
static void exec_fab7897ca57bd167(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn0181e8, line 74
static void exec_2f4e4f821fd61ab9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0181e8, line 77
static void exec_86088e4cc16d3aaf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) + (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: fn0181e8, line 89
static void exec_631ae664f091664c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var8));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn0182d2, line 127
static void exec_4ce8734e80d03ad8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn01841e, line 141
static void exec_a016d8aee559be49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(40), (uint32)var10);
}

// First occurrence: fn018466, line 164
static void exec_a6c12800562b403e(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn018466, line 165
static void exec_d5376d3f2ece96b0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: fn018466, line 165
static void exec_f8ac07068a6eb902(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) * (int16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-1, (int16)OpcodeExecUtils::safeDivide<int16>((int16)var1, (int16)context.getParameter<int64>(8)));
}

// First occurrence: fn018466, line 209
static void exec_d160824d86d8a4ec(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(var0));
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>();
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: fn018466, line 296
static void exec_7628690a59375d22(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const uint32 var2 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var1));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-2);
}

// First occurrence: fn018466, line 316
static void exec_ed10ac6348cd64e9(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn018466, line 331
static void exec_1ea0b69e3106256d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const int16 var2 = (uint16)var1;
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-1);
}

// First occurrence: HUD.drawSprite, line 16
static void exec_03a7115d2adeceff(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(12), (uint64)context.readValueStack<uint64>(-4));
	context.moveValueStack(-4);
}

// First occurrence: HUD.drawSprite, line 18
static void exec_ac3eb350e0a8638b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(12));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: HUD.drawDigit, line 21
static void exec_3a40bda725bb72ca(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: HUD.drawDigit, line 23
static void exec_eef901829b91a946(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: HUD.drawNumber, line 26
static void exec_4fe75d7739b80ff9(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(16), (uint64)context.readValueStack<uint64>(-5));
	context.moveValueStack(-5);
}

// First occurrence: HUD.drawNumber, line 30
static void exec_d3d88a880cdfa444(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) % (uint32)(context.getParameter<int64>(4)));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var3);
}

// First occurrence: HUD.drawNumber, line 31
static void exec_6c9720498434b2dc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: HUD.drawNumber, line 33
static void exec_11c57506ce9a9447(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: HUD.drawNumber, line 34
static void exec_0af3b2eb1a059a30(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: HUD.useMobileLivesDisplay, line 48
static void exec_f31589bcff3d8216(const RuntimeOpcodeContext context)
{
	const int64 var0 = 0;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) == (uint32)(var0)));
}

// First occurrence: RenderHUD, line 89
static void exec_1ac5a4a457fab08b(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: RenderHUD, line 93
static void exec_51a7e2c802640007(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)var0;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(4), (uint8)var1);
}

// First occurrence: RenderHUD, line 101
static void exec_4a1b49d66919d932(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	context.writeValueStack<uint16>(-1, (uint16)(uint16)!var0);
}

// First occurrence: RenderHUD, line 106
static void exec_e3c0b9b612aba4f2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 108
static void exec_b7606e669bc859b8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>(8));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) * (uint32)(context.getParameter<int64>(16))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<int16>(3, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: RenderHUD, line 113
static void exec_a1a42475795b45be(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 119
static void exec_67a01b15fde465ab(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: RenderHUD, line 122
static void exec_3f447aa981d34d51(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) < (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 125
static void exec_a2a264e49395b643(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: RenderHUD, line 127
static void exec_ccdbfb6977673b46(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) % (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: RenderHUD, line 130
static void exec_45c8803424931195(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::safeDivide<uint16>((uint16)var4, (uint16)context.getParameter<int64>(20));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var6);
}

// First occurrence: RenderHUD, line 132
static void exec_c78df6609c31ebd9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 135
static void exec_bc605b529ee6c96d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(4)));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	context.writeValueStack<int16>(2, (int16)((uint16)(var4) + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 137
static void exec_b1fff72c28cf6e52(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) % (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	context.writeValueStack<int16>(2, (int16)((uint16)(var4) + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 138
static void exec_9c413a6ba031fe40(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(12))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 162
static void exec_9dc01024b2ff4210(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) != (uint16)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 166
static void exec_22c2d3b57a0823b2(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)(uint16)var0);
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint8 var2 = (uint8)!var1;
	context.writeValueStack<uint8>(1, (uint8)(uint8)var2);
	context.moveValueStack(2);
}

// First occurrence: RenderHUD, line 167
static void exec_e7c549d9f948cc50(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var0);
}

// First occurrence: RenderHUD, line 169
static void exec_59f4c128b282d870(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) % (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 179
static void exec_4af6e165ee2c06dc(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)!context.readValueStack<int8>(-1);
	context.writeValueStack<int8>(-1, (int8)(uint8)var0);
}

// First occurrence: RenderHUD, line 182
static void exec_df6421d19b56df2e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0));
	context.writeValueStack<int16>(-1, (int16)((uint16)(var1) - (uint16)(context.getParameter<int64>(4))));
}

// First occurrence: RenderHUD, line 186
static void exec_f30ebdbcff37bbc4(const RuntimeOpcodeContext context)
{
	const int64 var0 = 0;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) == (uint8)(var0)));
}

// First occurrence: RenderHUD, line 186
static void exec_adea8c7924a87000(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), (uint64)context.getParameter<int64>());
}

// First occurrence: RenderHUD, line 192
static void exec_5e33bee95f619b96(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: RenderHUD, line 195
static void exec_144b9faa3aefd8d8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) % (uint16)(context.getParameter<int64>(16))));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var5) + (uint16)(context.getParameter<int64>(28))));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var7) + (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 197
static void exec_d92573c029a6d2ec(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) % (uint16)(context.getParameter<int64>(8))));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var3) + (uint16)(context.getParameter<int64>(20))));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var5) + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 226
static void exec_2692e6c16003d277(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: UpdateTimeAndHud, line 269
static void exec_3c6d34540847839c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) != (uint8)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: UpdateTimeAndHud, line 377
static void exec_098b1e0d182d0c91(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var3);
}

// First occurrence: fn00debe, line 443
static void exec_7806426148ec6118(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var5);
}

// First occurrence: DebugModePositionDisplay, line 462
static void exec_e98eb2146ea7cd9f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: refreshHudDisplayShared, line 514
static void exec_4feb8d54aca7ef8f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const int64 var1 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) - (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: refreshHudDisplayShared, line 518
static void exec_37df550ee95b22ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)var1);
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var3);
}

// First occurrence: refreshHudDisplayShared, line 519
static void exec_9c0f8b146f7b0915(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) % (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: UpdateHudLivesDisplay, line 553
static void exec_26628ac24516704b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateHudLivesDisplay, line 555
static void exec_1ddd4985f4fceb41(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint16 var3 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var3);
}

// First occurrence: UpdateHudLivesDisplay, line 571
static void exec_07031c363a00b557(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = OpcodeExecUtils::safeDivide<uint8>((uint8)var0, (uint8)context.getParameter<int64>(4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: fn02dae6, line 73
static void exec_0465690615527e10(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = *context.getParameter<uint8*>(8);
	const uint32 var5 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: fn02dae6, line 74
static void exec_8857377091aaaab0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) == (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn02dae6, line 116
static void exec_33c97e4cbd944b45(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const int16 var4 = (uint16)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn02dbca, line 146
static void exec_9a9419ec7433ac94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn02de04, line 400
static void exec_4c20751a3d3e24d3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02de04, line 403
static void exec_fdeea50eaab74165(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 0;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) != (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn02de04, line 410
static void exec_0200f323f0dd0093(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(20));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(28));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(5);
}

// First occurrence: fn02ddc6, line 463
static void exec_570634a851627fff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) < (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn02ddc6, line 480
static void exec_25f88b782f88cf6a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn02ddc6, line 488
static void exec_94bcef182dbf44e7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn02ddc6, line 490
static void exec_c8b1905492021593(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(var1)));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(24);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var4) - (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(4);
}

// First occurrence: fn02ddc6, line 502
static void exec_40dccd33105b3f90(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(4);
}

// First occurrence: fn02de50, line 515
static void exec_c303c9082d6d7096(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var5 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn02de50, line 522
static void exec_2b559a2093aa4713(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) - (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: fn02de50, line 523
static void exec_7bb4dd570360981b(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: fn02de50, line 525
static void exec_ce8300b5b6c3cc6c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint16 var7 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint8 var9 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const uint16 var11 = ((uint16)(var8) + (uint16)(var9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var11);
}

// First occurrence: fn02de50, line 529
static void exec_5995f79d9631d005(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint16 var4 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint16 var8 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(20)));
	const uint16 var9 = ((uint16)(var4) + (uint16)(var8));
	const uint16 var10 = ((uint16)(var0) + (uint16)(var9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var10);
}

// First occurrence: fn02de50, line 534
static void exec_9a6307b9d6c8376e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)var0;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(context.getParameter<int64>(4)) - (uint32)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var1);
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var7 = 1;
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var8);
}

// First occurrence: fn02d5c6, line 27
static void exec_7fe682b93d58cade(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) == (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var7);
}

// First occurrence: fn02d5c6, line 28
static void exec_75978437376bb5c5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn02d638, line 71
static void exec_fb17b869d1a58b92(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: TitleCard.Init, line 71
static void exec_6822bc2158fe31b5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn02f77c, line 244
static void exec_d68f0b94c2e971b9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint8 var3 = *context.getParameter<uint8*>(12);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(20)));
	const uint16 var7 = ((uint16)(var2) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: StartLoadingPatternsForZone, line 308
static void exec_c53ed8ba30cd95ea(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) * (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: TitleCard.TextElement.Init, line 365
static void exec_8f2a42106451be4a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn05e6c0, line 28
static void exec_44148f3f236d2777(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05e70e, line 75
static void exec_5d936bf76bba5c76(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn05e890, line 194
static void exec_c9630ec594e1bf25(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: fn05ea1a, line 296
static void exec_8ec47afad2dc6536(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn05ec4e, line 398
static void exec_646b8d8a9a700841(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) - (uint16)(var5));
	const uint32 var9 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var9;
}

// First occurrence: fn05ecb4, line 423
static void exec_76ebbcea624e7215(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)~context.getParameter<int64>(16);
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint8 var12 = ((uint8)(var10) & (uint8)(context.getParameter<int64>(40)));
	const uint8 var13 = ((uint8)(var6) | (uint8)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var16, (uint8)var13);
}

// First occurrence: fn05ecb4, line 440
static void exec_46204b96eb8a470a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn05ef68, line 483
static void exec_4b63a9376e5ebc2d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	const int64 var1 = 0;
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn05ef68, line 491
static void exec_4854c665b06788c5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const int8 var0 = *context.getParameter<int8*>(8);
	const int64 var1 = 0;
	context.writeValueStack<int8>(1, (int8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn05ef68, line 496
static void exec_878314ab45f18def(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var5);
}

// First occurrence: fn05f85a, line 779
static void exec_eea7437a798ab83a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05fba0, line 880
static void exec_6132e3be50cf5792(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var4);
}

// First occurrence: fn05ff1c, line 966
static void exec_71fdd4ce3072e4f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn05ff6e, line 1002
static void exec_a14dc7c05d022690(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint16 var0 = (uint16)*context.getParameter<uint16*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn05ffa6, line 1026
static void exec_c11dc73d95576072(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var3) + (uint16)(var4)));
	context.moveValueStack(3);
}

// First occurrence: fn086458, line 1057
static void exec_6a8f9a33592cfe38(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	*context.getParameter<int16*>(8) = (uint16)var1;
}

// First occurrence: fn086458, line 1062
static void exec_7ce0e6eb923722dc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var2);
}

// First occurrence: fn086458, line 1063
static void exec_1e86b218f4e3b95a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn085590, line 1115
static void exec_987192ba583fe6f5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) & (uint8)(var2));
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn085590, line 1118
static void exec_4dd2a05740652952(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var0);
}

// First occurrence: fn05928c, line 54
static void exec_a120316ce570a678(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var4);
}

// First occurrence: fn05928c, line 55
static void exec_7529a2ed1c3173d4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn05b1a2, line 82
static void exec_3ac9644539117e5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)-(signed)context.readValueStack<uint16>(-1);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn05b204, line 122
static void exec_b2e8d77e471b5c4f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: fn05b204, line 123
static void exec_cf90baa154ed13da(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = swapBytes32(*context.getParameter<uint32*>(16));
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn05b204, line 126
static void exec_46a0243a73909f56(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) != (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn05b204, line 129
static void exec_58137e0c516d8c7e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(12)));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: fn05b204, line 134
static void exec_815f4c9cd97ca915(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(8)));
	context.moveValueStack(1);
}

// First occurrence: fn05b204, line 169
static void exec_eadc4bef3efc7a8d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b2d6, line 231
static void exec_0c38263f0877c8d1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn05b514, line 269
static void exec_0728db765e31b9b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int8 var1 = *context.getParameter<int8*>(8);
	const int16 var4 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn05b514, line 278
static void exec_7b7179a07610b675(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var7);
}

// First occurrence: fn05b514, line 288
static void exec_c982f34107823c2c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn05b514, line 296
static void exec_509d7f154a0994b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05b514, line 297
static void exec_2ec61db888c96995(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)var0);
}

// First occurrence: fn05b514, line 301
static void exec_48dee7805382329a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const int8 var0 = *context.getParameter<int8*>(4);
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(12);
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(1, (int8)((uint8)(var0) == (uint8)(var3)));
	context.moveValueStack(2);
}

// First occurrence: fn05b514, line 301
static void exec_8822e8cda7ca899c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = ((uint32)(context.readValueStack<uint32>(-2)) - (uint32)(context.readValueStack<uint32>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn05b514, line 305
static void exec_df325f3cb4027709(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: fn05b514, line 309
static void exec_97f623e355120e49(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const int8 var0 = *context.getParameter<int8*>(4);
	const int64 var1 = 0;
	context.writeValueStack<int8>(1, (int8)((int8)(var0) > (int8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn05b514, line 313
static void exec_1cd5ccd3ab977ec5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20));
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var7 = ((uint32)(var5) - (uint32)(var6));
	const uint32 var8 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)var7);
	const uint32 var9 = 1;
	const uint32 var10 = ((uint32)(var8) + (uint32)(var9));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(28), (uint32)var10);
}

// First occurrence: fn05b514, line 316
static void exec_becf4480b2251c20(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(12)));
	const int32 var7 = ((int32)(var5) * (int32)(context.getParameter<int64>(20)));
	const uint32 var8 = swapBytes32(*context.getParameter<uint32*>(28));
	const int32 var9 = OpcodeExecUtils::safeDivide<int32>((int32)var7, (int32)var8);
	const uint32 var10 = ((uint32)(var2) - (uint32)(var9));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(36), (uint32)var10);
}

// First occurrence: fn05b514, line 318
static void exec_6fb7d73ea7bca435(const RuntimeOpcodeContext context)
{
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const int32 var2 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16));
	const int16 var3 = (uint16)var2;
	const int16 var4 = ((uint16)(var1) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var4);
}

// First occurrence: fn05b514, line 319
static void exec_efc56b90827f247e(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var3 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn05eb32, line 450
static void exec_812a68f56b40ece6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn05f986, line 818
static void exec_c81ee870d4e5af3e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) & (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05f986, line 833
static void exec_1bd6400ab323a12b(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn05f986, line 838
static void exec_84b49998b535a743(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn05f986, line 846
static void exec_1d88cde942abd3cf(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)context.readValueStack<uint16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: fn05f986, line 847
static void exec_2066148cd2500941(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn05f986, line 852
static void exec_29903ec4ffa1273c(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	*context.getParameter<int16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn05f986, line 855
static void exec_1222aeb69e766c73(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn05fa8c, line 884
static void exec_b0389d8637a60d7b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int16 var8 = swapBytes16(*context.getParameter<int16*>(32));
	const int16 var9 = ((uint16)(var7) + (uint16)(var8));
	const int32 var12 = ((uint32)(var9) << (uint32)((context.getParameter<int64>(40)) & 0x1f));
	const uint32 var13 = ((uint32)(var3) + (uint32)(var12));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var13);
}

// First occurrence: fn05fa8c, line 891
static void exec_726ab14415b45118(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn05fea8, line 919
static void exec_651d341aec7fa895(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(32)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(4);
}

// First occurrence: fn05fefe, line 928
static void exec_a439579bde72bdc7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var4 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn05fefe, line 929
static void exec_2565d3df6e744d9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var6;
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var11);
}

// First occurrence: fn05ffd4, line 939
static void exec_f88029220c1bcf46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var6;
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var3) + (uint16)(var9));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: fn060038, line 964
static void exec_f57d11afe30bb07a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) + (uint32)(var5));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn05d9ee, line 180
static void exec_3de62c9eb8dc150c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn05da74, line 229
static void exec_178e45511bc16ad7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn05ded4, line 408
static void exec_5dc61baf3d144adb(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: fn05df12, line 436
static void exec_3ac096796967368c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05dfb2, line 517
static void exec_214fe2904eed76e7(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn05dfd8, line 531
static void exec_2e187f4eec1d927b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05dbf6, line 562
static void exec_10e116a73da17f10(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: fn05dc2c, line 585
static void exec_6dbbcab87cdb2f70(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var3 = OpcodeExecUtils::safeDivide<int16>((int16)var1, (int16)context.getParameter<int64>(8));
	const int16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
	context.moveValueStack(-1);
}

// First occurrence: fn05dc2c, line 598
static void exec_f2eb70b87b32e778(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: fn05dc2c, line 600
static void exec_695603a619e446e7(const RuntimeOpcodeContext context)
{
	const int8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 0;
	context.writeValueStack<int8>(-1, (int8)((int8)(var0) >= (int8)(var1)));
}

// First occurrence: fn05dca6, line 628
static void exec_58a02aef1ab91732(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) <= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn05dca6, line 638
static void exec_b916d622660185f5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var3 = OpcodeExecUtils::safeDivide<int16>((int16)var1, (int16)context.getParameter<int64>(8));
	const int16 var4 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: fn05dd34, line 662
static void exec_7fb96bc63b924cb2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn05dfee, line 784
static void exec_8a2af566917c8a50(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const uint8 var1 = 1;
	const uint8 var2 = (uint8)~var1;
	const uint8 var3 = ((uint8)(var0) & (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1), (uint8)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn05e1c2, line 931
static void exec_a089313a33c2be86(const RuntimeOpcodeContext context)
{
	const int8 var0 = *context.getParameter<int8*>();
	context.writeValueStack<int8>(0, (int8)((uint8)(var0) != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05e504, line 1219
static void exec_bce84a9e8904f69d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn05e612, line 1308
static void exec_882e2e2b045eecbc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const int16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn05edac, line 1441
static void exec_b882e594dc6d8146(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<int8>(0, (int8)((uint8)(var3) - (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: fn05eec4, line 1529
static void exec_77b59dde7267acea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	*context.getParameter<int16*>(24) = (uint16)var5;
}

// First occurrence: fn05fcfc, line 1891
static void exec_296976045f3cf7bd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var8);
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var12, (uint32)var9);
}

// First occurrence: fn05fd16, line 1914
static void exec_442d78cb14e508c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn05fe1e, line 1971
static void exec_5e52d48b05b9cb59(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn05fe48, line 1983
static void exec_6e6e2cb07423c071(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn05fe48, line 1987
static void exec_910ca71e41a9ff65(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: LevelTilesAnimation, line 55
static void exec_c3716893360f41de(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var7;
}

// First occurrence: fn02788c, line 154
static void exec_07540cc23a1ceda6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint16 var1 = (uint16)-(signed)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn02797e, line 200
static void exec_5bf0f5487528ec84(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: LevelTilesAnim.HCZ2, line 226
static void exec_f83a67f9e23a21f9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: LevelTilesAnim.HCZ2, line 227
static void exec_f484ced1bf87b4e7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn027b34, line 310
static void exec_bf9a79b142c96991(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: LevelTilesAnim.CNZ, line 395
static void exec_7a35e71df673058b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var5 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: LevelTilesAnim.ICZ, line 441
static void exec_a6b9eeefa0eea53c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: LevelTilesAnim.ICZ, line 471
static void exec_17597fe87da2eded(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: LevelTilesAnim.ICZ, line 482
static void exec_6dd8a3ac890d9d5c(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: LevelTilesAnim.ICZ, line 484
static void exec_cd4a476b0cd455c0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: LevelTilesAnim.ICZ, line 485
static void exec_7fa5a6428bb97ca5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: LevelTilesAnim.ICZ, line 502
static void exec_471a4f804b933beb(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: LevelTilesAnim.LBZ1, line 521
static void exec_ff82049178722af5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelTilesAnim.LBZ1, line 526
static void exec_079c64efb01f590c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: LevelTilesAnim.LBZ1, line 583
static void exec_4733a50d629f380e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) == (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: LevelTilesAnim.LBZ1, line 585
static void exec_e5e69a30766f7c8f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn027f66, line 672
static void exec_6360e4b2807e0cc2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = (uint16)var5;
	const uint32 var9 = ((uint32)(var7) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var9;
}

// First occurrence: LevelTilesAnim.MHZ, line 748
static void exec_ec7143a170f7c312(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn028124, line 783
static void exec_79a8c285b885acc2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn028124, line 787
static void exec_447a43ff4093e1eb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn028124, line 808
static void exec_842766d3c2344fd0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: LevelTilesAnim.SOZ1, line 826
static void exec_94ca4610772034b4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: LevelTilesAnim.SOZ1, line 849
static void exec_1250154108dcf247(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: LevelTilesAnim.LRZ_shared, line 923
static void exec_c79d5d9186011c22(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: LevelTilesAnim.LRZ_shared, line 924
static void exec_23e9049bd206230d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(8));
	const uint32 var4 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) % (uint32)(context.getParameter<int64>(32)));
	const uint32 var8 = ((uint32)(var4) + (uint32)(var7));
	const int16 var9 = (uint16)var8;
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn028364, line 972
static void exec_00571ad5549f6e00(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn0286ee, line 1118
static void exec_bd1f36e8565ec1fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var6);
}

// First occurrence: fn0286ee, line 1123
static void exec_7febb6f70d866fb8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1);
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn0286ee, line 1134
static void exec_1875ee2352de7c15(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: UpdateCameraBoundsInLevel, line 62
static void exec_84adb994b24d1953(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateCameraBoundsInLevel, line 68
static void exec_e6979d0b26a72004(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraBoundsInLevel, line 77
static void exec_c091bf8baebea72d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraBoundsInLevel, line 79
static void exec_ec9b3dc87c7fedcd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: UpdateLevelDisplay, line 117
static void exec_d14f887dc81f8470(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var3)));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: LoadTileContentInDirX, line 238
static void exec_8419d606c7056094(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: LoadTileContentInDirX, line 247
static void exec_c287f9be7c2e1d0a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)var0;
	const int64 var2 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var1) >= (int8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: LoadTileContentInDirX, line 256
static void exec_720b0bab4dbee42e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
	context.moveValueStack(-2);
}

// First occurrence: LoadTileContentSingleRow, line 280
static void exec_814a594840fd9f8b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: LoadTileContentSingleRow, line 281
static void exec_e70c5364e9cf477f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(12)));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: LoadTileContentSingleRow, line 283
static void exec_83aabedec84105f2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(12));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: LoadTileContentSingleRow, line 289
static void exec_506da2983548d1fc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: LoadTileContentSingleRow, line 291
static void exec_2fef29580100d1ba(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) << (uint16)((context.getParameter<int64>(4)) & 0x0f)));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: LoadTileContentSingleRow, line 296
static void exec_007653bd52fa5e1b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) - (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fillPlanePatternsX, line 313
static void exec_da4ac73cb2f78b8e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(20)));
	const uint32 var7 = ((uint32)(var2) + (uint32)(var5));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var7) > (uint32)(context.getParameter<int64>(28))));
	context.moveValueStack(1);
}

// First occurrence: fillPlanePatternsX, line 313
static void exec_4efa7d5c3a9df68b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var3));
	const uint32 var6 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(24));
	const int16 var7 = (uint16)var6;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fillPlanePatternsX, line 317
static void exec_261296808d40f0d8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const uint16 var8 = ((uint16)(var6) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(36);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var8);
}

// First occurrence: fillPlanePatternsX, line 318
static void exec_172c87a33633fb1f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) | (uint16)(context.getParameter<int64>(4)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fillPlanePatternsX, line 325
static void exec_aeec37be096b76e7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fillPlanePatternsX, line 326
static void exec_7f1225ca051d127d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var7);
}

// First occurrence: fillPlanePatternsX, line 328
static void exec_8596c01b121ef2ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint32 var10 = ((uint32)(var4) + (uint32)(var8));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var10);
}

// First occurrence: fillPlanePatternsX, line 329
static void exec_353fa3cc6bc73286(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(12)) & 0x1f));
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20));
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint32 var12 = ((uint32)(var6) + (uint32)(var10));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var12);
}

// First occurrence: fillPlanePatternsX, line 334
static void exec_1af789c656055e5c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = ((uint32)(var2) + (uint32)(var5));
	const uint32 var8 = ((uint32)(var6) ^ (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var8);
}

// First occurrence: fillPlanePatternsX, line 341
static void exec_0ba8baba9edf2904(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) ^ (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var2);
}

// First occurrence: fillPlanePatternsX, line 356
static void exec_f101243c9a387062(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateChunkLinePointerX, line 372
static void exec_20f09e8050e44649(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(4)) & 0x0f));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: UpdateChunkLinePointerX, line 379
static void exec_02e384ccaf9be163(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var4);
}

// First occurrence: UpdateChunkLinePointerX, line 380
static void exec_73d654ed8567f61d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	const int16 var7 = (uint16)var6;
	const uint16 var8 = (uint16)var7;
	const uint32 var9 = ((uint32)(var2) | (uint32)(var8));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var9);
}

// First occurrence: UpdateChunkLinePointerX, line 381
static void exec_6b64152a401c2f66(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)var1);
}

// First occurrence: UpdateChunkLinePointerX, line 382
static void exec_c5551414c134e217(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint32 var9 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var10 = ((uint32)(var5) + (uint32)(var9));
	*context.getParameter<uint32*>(32) = (uint32)var10;
}

// First occurrence: LoadTileContentInDirY, line 391
static void exec_ab1a9f44f6101930(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: LoadTileContentInDirY, line 409
static void exec_0f940933fe34c575(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(12));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: LoadTileContentSingleLine, line 484
static void exec_520a40d99c334768(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(4)) & 0x0f));
	*context.getParameter<int16*>(12) = (uint16)var2;
}

// First occurrence: LoadTileContentSingleLine, line 488
static void exec_469040e816fd96e3(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) >> (uint16)((context.getParameter<int64>(12)) & 0x0f));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(20)));
	const uint16 var6 = ((uint16)(context.getParameter<int64>()) - (uint16)(var5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var6);
}

// First occurrence: LoadTileContentSingleLine, line 492
static void exec_b21de420ba7ca5d4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: fillPlanePatternsY, line 519
static void exec_f86e78912140efbc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const uint16 var8 = ((uint16)(var6) + (uint16)(var7));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var8);
}

// First occurrence: fillPlanePatternsY, line 521
static void exec_6e895af7eeebebb6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fillPlanePatternsY, line 525
static void exec_ea6fc9065a2e1440(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(12)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: fillPlanePatternsY, line 526
static void exec_a74cfed41da4494f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(4) = (uint16)var2;
}

// First occurrence: FillPlanePatternsY_partial, line 534
static void exec_764673d833e55eda(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
}

// First occurrence: FillPlanePatternsY_partial, line 540
static void exec_ea056e7532606655(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)var1);
}

// First occurrence: FillPlanePatternsY_partial, line 541
static void exec_bae0125821c2a7fc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var3);
}

// First occurrence: FillPlanePatternsY_partial, line 545
static void exec_6d729d91da272e3a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var5 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = ((uint32)(var2) + (uint32)(var5));
	const uint32 var8 = ((uint32)(var6) ^ (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var8);
}

// First occurrence: UpdateChunkLinePointerY, line 582
static void exec_76d4817d7a7280c1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: UpdateChunkLinePointerY, line 583
static void exec_d2bc48bf7a3878f6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(12));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: UpdateChunkLinePointerY, line 584
static void exec_8c21915c6bbbb184(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var7);
}

// First occurrence: fn04ec54, line 597
static void exec_b37011668cbfb330(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var7 = ((uint32)(var2) + (uint32)(var5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var7);
}

// First occurrence: fn04ec54, line 598
static void exec_95c9a9cc6f615461(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(20);
	const uint32 var10 = ((uint32)(var7) & (uint32)(context.getParameter<int64>(28)));
	const uint32 var11 = ((uint32)(var6) + (uint32)(var10));
	*context.getParameter<uint32*>(36) = (uint32)var11;
}

// First occurrence: fn04ecaa, line 607
static void exec_6968e0f280a363d6(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((int16)(var2) * (int16)(context.getParameter<int64>(16)));
	const int16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn04ecaa, line 616
static void exec_19c443a459fc2655(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	*context.getParameter<uint16*>(12) = (uint16)var2;
}

// First occurrence: fn04f0ce, line 693
static void exec_1a1794e42b3d9bee(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0));
	*context.getParameter<uint16*>() = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn04f0de, line 707
static void exec_67e14563c3743519(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int32 var4 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn04f0de, line 714
static void exec_3000b42297ac6a36(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	const uint16 var4 = ((uint16)(var2) != (uint16)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: fn04f0de, line 729
static void exec_c8627804e0428439(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04f0de, line 747
static void exec_83db38eee558b0d6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int16 var2 = (uint16)-(signed)var1;
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: fn04f0de, line 750
static void exec_0050b602144184c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const int16 var3 = (uint16)*context.getParameter<int16*>(24);
	const int16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<int16*>(40) = (uint16)var5;
}

// First occurrence: Level.GetCameraPosition, line 796
static void exec_cc269a5e75fa875f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn04ed62, line 821
static void exec_4401b49be68560da(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(8));
	*context.getParameter<uint32*>(16) = (uint32)var4;
	context.moveValueStack(-1);
}

// First occurrence: fn04ee20, line 950
static void exec_8e3162448a4028fd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) - (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn04ee20, line 997
static void exec_252e8f22af425476(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(32)) & 0x0f));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn04ee20, line 1013
static void exec_60e3b14b2a363092(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn04ee8e, line 1033
static void exec_f761310f04ac2acc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int64 var3 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var2) >= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn04ef56, line 1062
static void exec_9c51cf0f76c55aaf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)swapBytes16(*context.getParameter<int16*>()));
	context.moveValueStack(1);
}

// First occurrence: fn04ef64, line 1072
static void exec_c4c8d66fc7087512(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1091
static void exec_de4674934503d91a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)context.readValueStack<uint32>(-5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)context.readValueStack<uint32>(-6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)context.readValueStack<uint16>(-7));
	context.moveValueStack(-7);
}

// First occurrence: fillPlane_Default, line 1095
static void exec_1dfa00c22a5e362b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-2);
}

// First occurrence: fillPlane_Default, line 1098
static void exec_3cb71f0f0c81f373(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) >= (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1098
static void exec_253c36a205bef272(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) < (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1106
static void exec_9d93a7026251fb80(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1108
static void exec_8afc06b72bb29d97(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) - (uint32)(var3));
	const uint32 var5 = ((uint32)(var0) - (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var5);
}

// First occurrence: fillPlane_Default, line 1109
static void exec_c9ef8cd9f2bf91f1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)var0);
}

// First occurrence: fillPlane_Default, line 1118
static void exec_bbe2070bea99ffb0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: fillPlane_DefaultUncropped, line 1121
static void exec_8d6156b04768e762(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: fillPlane_DefaultUncropped, line 1124
static void exec_eb26455fb167c628(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(0, (uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var6) + (uint32)(context.getParameter<int64>(28))));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1128
static void exec_22df00ba117b2ce9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) <= (uint32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_DefaultUncropped, line 1135
static void exec_096f53fd41328f31(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var10 = ((uint32)(var8) * (uint32)(context.getParameter<int64>(28)));
	const uint32 var11 = ((uint32)(var5) + (uint32)(var10));
	const int16 var12 = (uint16)var11;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var12);
}

// First occurrence: fillPlane_DefaultUncropped, line 1136
static void exec_81faaa6d7bbce374(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(20)));
	const uint16 var9 = 1;
	const uint32 var10 = ((uint32)(var8) + (uint32)(var9));
	const uint32 var12 = ((uint32)(var10) * (uint32)(context.getParameter<int64>(28)));
	const uint32 var13 = ((uint32)(var5) + (uint32)(var12));
	const int16 var14 = (uint16)var13;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var14);
}

// First occurrence: fillPlane_DefaultUncropped, line 1140
static void exec_ecc71cb9dc2f5bab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(4));
	const uint32 var4 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var4);
}

// First occurrence: fillPlane_DefaultUncropped, line 1142
static void exec_b21c8bfbf70ac826(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	const uint32 var9 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var10 = ((uint32)(var8) + (uint32)(var9));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var10);
}

// First occurrence: fillPlane_DefaultUncropped, line 1146
static void exec_7471d03b4f8e5456(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) % (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1149
static void exec_0a4907a39b1f7bb6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	const uint32 var10 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var12 = ((uint32)(var10) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var13 = ((uint32)(var9) + (uint32)(var12));
	const uint32 var14 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(40));
	const uint32 var16 = ((uint32)(var14) * (uint32)(context.getParameter<int64>(44)));
	const uint32 var17 = ((uint32)(var13) + (uint32)(var16));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(52), (uint32)var17);
}

// First occurrence: fillPlane_DefaultUncropped, line 1153
static void exec_007546e8b94b9d0f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var7);
}

// First occurrence: fillPlane_DefaultUncropped, line 1155
static void exec_7f4705ad3b4088d9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const int64 var3 = 0;
	const uint16 var4 = ((uint16)(var2) != (uint16)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: fillPlane_DefaultUncropped, line 1159
static void exec_265a77393e2c4f2b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) << (uint16)((var3) & 0x0f));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var4);
}

// First occurrence: fillPlane_DefaultUncropped, line 1162
static void exec_409e49527c4b0ec3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var7) ^ (uint16)(var8)));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1163
static void exec_e95c83045241af13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var6 = ((uint32)(var4) - (uint32)(var5));
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var9) ^ (uint16)(var10)));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1164
static void exec_fa1ef9dbb08406d3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20));
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var9) ^ (uint16)(var10)));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1165
static void exec_3b4bf306d3186c5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	const uint32 var6 = ((uint32)(var4) - (uint32)(var5));
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var9) ^ (uint16)(var10)));
	context.moveValueStack(2);
}

// First occurrence: fillPlaneA_Default, line 1172
static void exec_7cdb0dc36ef79c6d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(3, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(5, (uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	context.writeValueStack<uint16>(6, (uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	context.moveValueStack(7);
}

// First occurrence: UpdatePaletteEffects, line 18
static void exec_72996b58dda5179b(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 114
static void exec_9de9f5cc2a8884f0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var4);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 115
static void exec_8d48de5f3feb566f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var6);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 122
static void exec_a4ba6067b143d36b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 133
static void exec_97e82108de3b4487(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) % (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 135
static void exec_8b1836bd4fdabcc7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var6);
}

// First occurrence: LevelPaletteUpdate.AIZ2, line 164
static void exec_d8eb9862db0faf02(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: LevelPaletteUpdate.AIZ2, line 165
static void exec_c8150c86681ee6e5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: LevelPaletteUpdate.HCZ1, line 200
static void exec_eecfc78f7b123b26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var4);
}

// First occurrence: LevelPaletteUpdate.HCZ1, line 201
static void exec_249190fff32e9391(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var6);
}

// First occurrence: LevelPaletteUpdate.CNZ, line 237
static void exec_1e21b6c1a43c126d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) != (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: LevelPaletteUpdate.FBZ, line 365
static void exec_fd2b62bbbb071d88(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) * (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: LevelPaletteUpdate.FBZ, line 368
static void exec_487b46fa4b395565(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) - (uint8)(context.getParameter<int64>(16)));
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(24)));
	const uint8 var6 = ((uint8)(context.getParameter<int64>()) - (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var6);
}

// First occurrence: LevelPaletteUpdate.FBZ, line 368
static void exec_fce4e049813b26ff(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) * (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var4);
}

// First occurrence: LevelPaletteUpdate.FBZ, line 373
static void exec_03552d3a27e21322(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var4 = ((uint8)(var2) | (uint8)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), (uint8)var4);
}

// First occurrence: LevelPaletteUpdate.SOZ2, line 438
static void exec_b332b1bde38c1986(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: LevelPaletteUpdate.LRZ2, line 550
static void exec_fdc8f7030d474882(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(8)) + (uint16)(var1)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: LevelPaletteUpdate.BPZ, line 697
static void exec_cac05ab208800fce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var4);
}

// First occurrence: LevelPaletteUpdate.BPZ, line 698
static void exec_e558ba068d21e9fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: LevelPaletteUpdate.CGZ, line 733
static void exec_869fa74335197ca9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), (uint32)var6);
}

// First occurrence: fn04f03e, line 39
static void exec_fc516c5953891c35(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 82
static void exec_7c45cb9db26e5c26(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 85
static void exec_d7e34083a8ab5889(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 92
static void exec_b051499014271379(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var2) - (uint32)(var4));
	*context.getParameter<uint32*>(12) = (uint32)var5;
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 93
static void exec_7104b3d33c73b26c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>() = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn04f386, line 153
static void exec_dfb2096990e64845(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: UpdateScreenShake, line 202
static void exec_4b1c54f34ab92bdf(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var0);
}

// First occurrence: UpdateScreenShake, line 209
static void exec_0b53a2256ade613d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: UpdateScreenShake, line 214
static void exec_965486ebcc05852e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: UpdateScreenShake, line 219
static void exec_fa244779a4fb2e3d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = OpcodeExecUtils::safeDivide<int16>((int16)var0, (int16)context.getParameter<int64>(8));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 239
static void exec_4c1d1842335f0355(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 246
static void exec_75b4e92280820ac7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int16 var9 = ((int16)(var6) * (int16)(context.getParameter<int64>(24)));
	const int16 var11 = OpcodeExecUtils::safeDivide<int16>((int16)var9, (int16)context.getParameter<int64>(32));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(40), (uint16)var11);
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 249
static void exec_1204971fc3d9ef83(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = OpcodeExecUtils::safeDivide<int16>((int16)var0, (int16)context.getParameter<int64>(4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 260
static void exec_6cab44169090ab54(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: InitBoss, line 296
static void exec_874837dd93074a25(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var5);
}

// First occurrence: InitBoss, line 300
static void exec_ed05a1c0b895df2f(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: InitBoss, line 303
static void exec_db78a51ee6f50841(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: InitBoss, line 303
static void exec_f469ab73e13777e7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: TriggerNextZone, line 387
static void exec_aeb7cd2a810f25fb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: UpdateWater, line 35
static void exec_dce3b7747ccae0dc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateWater, line 45
static void exec_895f3fb1eff0e056(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn00717c, line 104
static void exec_0b565f800dab260e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var7 = ((uint16)(var5) & (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn00717c, line 106
static void exec_ed4db8c2ee16de83(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn00717c, line 116
static void exec_47534daef89f2515(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0071e4, line 151
static void exec_87a967890cb9e84a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn0071e4, line 154
static void exec_be486e77f96fe7a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn00730c, line 297
static void exec_9876308451c65148(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn00730c, line 298
static void exec_36d3c25aeda7c90d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) < (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: fn00730c, line 303
static void exec_611e0c52c229dbea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >= (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: fn00730c, line 355
static void exec_573ccc13bc84a9c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var9 = ((uint8)(var7) - (uint8)(context.getParameter<int64>(32)));
	const int8 var10 = (uint8)var9;
	const uint16 var11 = ((uint16)(var3) + (uint16)(var10));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var11);
}

// First occurrence: fn00730c, line 362
static void exec_1c4d4eaae80c1189(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = (uint8)var2;
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn006f90, line 428
static void exec_8bc116a324beab06(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn006f90, line 436
static void exec_9d317a131ff4a4a4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) << (uint8)((var2) & 0x07));
	const uint8 var4 = ((uint8)(var0) & (uint8)(var3));
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel, line 519
static void exec_7222f5c1ab477c2c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel, line 521
static void exec_657ade972dfdd81b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel, line 521
static void exec_3db3c7dd39da7470(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint8 var2 = *context.getParameter<uint8*>(16);
	const uint16 var4 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var4);
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 667
static void exec_3f676917b609d2a0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 667
static void exec_a36ce9c865c9e976(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 673
static void exec_6da1a57f4cdce570(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn06852c, line 65
static void exec_11cafb83298551bf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn06852c, line 69
static void exec_c4aeafec159d4dce(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn06857a, line 135
static void exec_b3547eb682133b16(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>());
	context.moveValueStack(3);
}

// First occurrence: fn06857a, line 136
static void exec_bb2e31169aa62516(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn0502c6, line 18
static void exec_8d1d83ef1b60dd91(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn0502c6, line 27
static void exec_619ad853b78ec87e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: fn0502c6, line 31
static void exec_7ab2f8661f177687(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn0502c6, line 32
static void exec_ac1b0f8e2d3779b9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn050318, line 58
static void exec_a84e7dcf8a0b8e14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn050318, line 66
static void exec_68ead9fb17844077(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn050390, line 118
static void exec_5c0e4cfeca1778de(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, (uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn050390, line 118
static void exec_9793d00f193269cc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>());
	const uint32 var4 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(context.readValueStack<uint32>(-2)) - (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint32)var7);
	context.moveValueStack(-3);
}

// First occurrence: fn050390, line 140
static void exec_45891d344fe96d0c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = (uint16)-(signed)var1;
	const uint16 var3 = 1;
	const int16 var4 = ((int16)(var2) >> (int16)((var3) & 0x0f));
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var5);
}

// First occurrence: fn050390, line 145
static void exec_ad6d7dd53a624f00(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var7);
}

// First occurrence: fn050390, line 148
static void exec_d2781f717b685a62(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn0504b4, line 238
static void exec_709a49f7f1c3d97f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0504f8, line 296
static void exec_ea185853c81738d1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	const uint32 var8 = ((uint32)(var3) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var8);
}

// First occurrence: fn05057a, line 342
static void exec_e07b5fbc1f3ff6c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn050586, line 350
static void exec_c77b44128e139fb4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const int16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const int16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn050586, line 351
static void exec_e0cd03eddcf76c4d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int16 var3 = swapBytes16(*context.getParameter<int16*>(16));
	const int16 var4 = ((uint16)(var2) - (uint16)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn0505dc, line 381
static void exec_3dea2d1be1d83511(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn0505e4, line 399
static void exec_9839c8192d1aa325(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn050614, line 414
static void exec_ccede7c38e44904e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn050632, line 428
static void exec_a0c06f544aee7567(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var1) < (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn050632, line 435
static void exec_b2a44b875c94fb9a(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1));
	context.writeValueStack<int16>(-3, (int16)((int16)(context.readValueStack<int16>(-3)) >= (int16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn050632, line 443
static void exec_f9f5c5748dbb53ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var2);
}

// First occurrence: fn050664, line 460
static void exec_1f84f505f81c1b64(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn05068a, line 476
static void exec_1c5137eadd5f9c9d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn05068a, line 480
static void exec_987e26c38da85693(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn050700, line 540
static void exec_e1b211b842d03cf1(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int32 var3 = (uint32)var2;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) <= (int32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn0674ac, line 67
static void exec_0e3184ecb95f9cf2(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn0674ac, line 75
static void exec_4748cda55f8e1b6e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn067900, line 480
static void exec_d6c0ab331bf2f5ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn067900, line 492
static void exec_1f4a683a1659a134(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const int32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	const int16 var4 = (uint16)var3;
	const int16 var5 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var5);
	context.moveValueStack(-3);
}

// First occurrence: fn06795c, line 522
static void exec_49cfe840d817a952(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn067a08, line 585
static void exec_9fa3859b130bcb8b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var6);
}

// First occurrence: fn067a20, line 604
static void exec_c1c94227ca4a0b5b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn067a20, line 609
static void exec_3da3cea9a9a8bb89(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn061f10, line 772
static void exec_9c84097c2a750061(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)-(signed)context.getParameter<int64>();
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)var1);
}

// First occurrence: InitLevelTiles.AIZ1, line 26
static void exec_f46ada56e6c75c2a(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)context.getParameter<int64>());
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const int8 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var8);
}

// First occurrence: UpdateLevelTiles.AIZ1, line 59
static void exec_d112171fbe1a4239(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) >> (uint16)((var3) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var4;
}

// First occurrence: UpdateLevelTiles.AIZ1, line 61
static void exec_108b391bb8776a34(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var4 = ((uint16)(context.getParameter<int64>()) - (uint16)(var3));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: UpdateLevelTiles.AIZ1, line 65
static void exec_a733f936b41fd267(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04f912_internal, line 108
static void exec_f0f912daf5e7c6ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	*context.getParameter<uint32*>(28) = (uint32)var9;
}

// First occurrence: fn04f912_internal, line 109
static void exec_a7b5ebe92af4d83a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var7;
}

// First occurrence: fn04fa0c, line 128
static void exec_2dca532e6be3e93a(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn04fa0c, line 129
static void exec_c5cec63f8409af93(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(4));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(12)));
	*context.getParameter<uint16*>(20) = (uint16)var4;
}

// First occurrence: InitLevelScrolling.AIZ1, line 187
static void exec_cb5ebd9272832897(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn04fb68, line 270
static void exec_d716401cfa080286(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn04fc46, line 368
static void exec_9ffed60b5c625852(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = swapBytes32(*context.getParameter<uint32*>(16));
	const int32 var5 = ((uint32)(var3) - (uint32)(var4));
	const int32 var7 = ((int32)(var5) >> (int32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn04fc46, line 369
static void exec_6c0056c6d6424a2a(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn04fd62, line 517
static void exec_cf389bbff1369187(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: UpdateLevelTiles.AIZ2, line 632
static void exec_75575fac1823f546(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = swapBytes16(*context.getParameter<int16*>(16));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: UpdateLevelTiles.AIZ2, line 633
static void exec_f57bb121e9c27043(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int64>(0, (int64)((uint64)(var0) + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04ff3a, line 685
static void exec_9cd2c8b768dab0a3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn04ff74, line 705
static void exec_6fe97c855ff2989b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>());
	const uint32 var3 = ((uint32)(context.readValueStack<uint32>(-2)) - (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var5);
	context.moveValueStack(-2);
}

// First occurrence: fn04ff74, line 706
static void exec_aca946a70667c7f6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn05011e, line 914
static void exec_bca5036ed5bd2e77(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05011e, line 960
static void exec_d6e291c2b361c2a4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)-(signed)var0;
	*context.getParameter<int16*>(8) = (uint16)var1;
}

// First occurrence: fn01c46e, line 1107
static void exec_0ac26166e50a7634(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn01c550, line 1201
static void exec_24223fe9a9e975b4(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1), (uint16)context.readValueStack<uint16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: AIZ1a.checkPreBossArea, line 1319
static void exec_310b48baf333a601(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) < (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: AIZ1a.checkPreBossArea, line 1339
static void exec_555a2601bf297638(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const int64 var1 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(var0));
	const int16 var2 = (uint16)var1;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn01c86a, line 1583
static void exec_cd39d6b62c084b3e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn239afe, line 1632
static void exec_14087400f7f50115(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const int16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn239afe, line 1633
static void exec_9c93a1dbad645098(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	*context.getParameter<int32*>(16) = (uint32)var4;
}

// First occurrence: fn239b0a, line 1641
static void exec_93858a0b3be8763f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var10 = (uint16)*context.getParameter<uint16*>(32);
	const uint32 var13 = ((uint32)(var10) & (uint32)(context.getParameter<int64>(40)));
	const uint32 var14 = ((uint32)(var9) + (uint32)(var13));
	*context.getParameter<uint32*>(48) = (uint32)var14;
}

// First occurrence: fn239e74, line 1650
static void exec_f24cf1d7c7591cfa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: fn239e9c, line 1687
static void exec_e068efd7765c4315(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	const int16 var2 = ((int16)(var0) < (int16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn239e9c, line 1706
static void exec_d69a1c19c239ed6a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn239e9c, line 1711
static void exec_1be45f0530bbf337(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn239f18, line 1781
static void exec_062dc5c668fd3ec1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	const int16 var2 = ((int16)(var0) < (int16)(var1));
	const uint8 var4 = ((uint8)(var2) * (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn239f18, line 1799
static void exec_ac3ae5925cd36037(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn239f18, line 1823
static void exec_ab5828e12381849d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	*context.getParameter<uint32*>(48) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(56)));
	const int16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	const uint16 var12 = ((uint16)(var5) - (uint16)(var11));
	*context.getParameter<uint16*>(64) = (uint16)var12;
}

// First occurrence: fn239f18, line 1830
static void exec_407c868cc0a0a1c7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const int16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int16 var6 = (uint16)-(signed)var5;
	*context.getParameter<int16*>(32) = (uint16)var6;
}

// First occurrence: fn239f18, line 1836
static void exec_b85299f433e66841(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn23ab96, line 1870
static void exec_2f3c2ea15534c421(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn23ab96, line 1881
static void exec_e6765324204bb282(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn23ab96, line 1882
static void exec_f8dbd2565e0ccec7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn23ab96, line 1883
static void exec_7da80471d4ad406d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var4);
}

// First occurrence: fn23ab96, line 1884
static void exec_5a2b6228e9d1d964(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: fn23ab96, line 1889
static void exec_ea7f344ee7082f2b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) ^ (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: fn23afd2, line 1941
static void exec_38c57049f8ffebba(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(16));
	context.moveValueStack(3);
}

// First occurrence: fn23afd2, line 1949
static void exec_04b91274dc3ba0a7(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn23afd2, line 1964
static void exec_9bb9a401abc7a7f1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1983
static void exec_b184b6ca341c8a64(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1986
static void exec_b5d4345c1cca37c4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int32 var4 = ((int32)(var2) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1991
static void exec_2385a5124950f956(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1993
static void exec_f44ff84c5543a30a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1994
static void exec_45d2d3de6c3a96fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2003
static void exec_06d62b658fc31f94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2006
static void exec_ea1acced8ba48ee8(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const uint32 var1 = 1;
	const int32 var2 = ((int32)(var0) >> (int32)((var1) & 0x1f));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2013
static void exec_ba85950b6c8d00ba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2049
static void exec_4c0406dced6dd78b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2059
static void exec_efee09377559e3b6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2060
static void exec_545135e641befd3e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn23b152, line 2072
static void exec_be725ea48626b7ca(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: fn23b152, line 2072
static void exec_bb122df045f42913(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-1);
}

// First occurrence: fn23b17a, line 2087
static void exec_ecad48707811324e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn23b17a, line 2093
static void exec_b7e3284f0775511b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn23b17a, line 2098
static void exec_3957bd028eb0daaa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn23b626, line 2109
static void exec_2a0b52173a809f72(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int16 var3 = 1;
	const int16 var4 = ((int16)(var2) >> (int16)((var3) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn23b626, line 2110
static void exec_0f6909dcf6f4fe54(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn23b626, line 2115
static void exec_86eab499027d0575(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = 1;
	const int32 var5 = ((int32)(var3) >> (int32)((var4) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn23b626, line 2116
static void exec_ef4c113d14c4b94a(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	const int32 var4 = ((int32)(var2) * (int32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn23b626, line 2127
static void exec_4447def0e9ff0f7e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)*context.getParameter<int8*>(4);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn23b626, line 2131
static void exec_57d703c19855301c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
	const int16 var8 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(32));
	const int8 var9 = 1;
	const int16 var10 = ((uint16)(var8) + (uint16)(var9));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(36), (uint16)var10);
}

// First occurrence: fn23b680, line 2145
static void exec_47139e4578fcf535(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn23b680, line 2148
static void exec_2b9581d824808ba5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn23b680, line 2154
static void exec_e63a11036354d747(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn23b680, line 2186
static void exec_19618b983e2159c9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn23b680, line 2201
static void exec_e6925d0120774bbc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn02fda4, line 30
static void exec_933a287913da8757(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn02fe34, line 65
static void exec_907164de09de55f2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)1);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(32));
	context.moveValueStack(6);
}

// First occurrence: fn02fe5e, line 104
static void exec_0b724483b2a16396(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(-1, (uint16)(uint16)var4);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const int64 var9 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var8) == (uint8)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn02fe5e, line 111
static void exec_e74f0d9a4df98ddd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn02fe5e, line 122
static void exec_8821bec7e342b62e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn02fe5e, line 124
static void exec_46d848a7f78c46a5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn02fe5e, line 126
static void exec_e932a2541e36f06a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) - (uint16)(var1)));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (int64)1);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: InitLevelScrolling.HCZ1, line 37
static void exec_07f84a4c4495e5ac(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: UpdateBackground.HCZ1, line 234
static void exec_50862e3c82701533(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: UpdateBackground.HCZ1, line 236
static void exec_1ab3b1e838f0e51c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: UpdateBackground.HCZ1, line 256
static void exec_b683761b0b23d92c(const RuntimeOpcodeContext context)
{
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int16 var4 = ((uint16)(context.getParameter<int64>(8)) - (uint16)(var2));
	const int16 var5 = OpcodeExecUtils::safeDivide<int16>((int16)context.getParameter<int64>(), (int16)var4);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: UpdateBackground.HCZ1, line 257
static void exec_024d0cf3e0937a08(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(12)));
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var3) - (uint16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var0);
	context.moveValueStack(3);
}

// First occurrence: UpdateBackground.HCZ1, line 257
static void exec_da1b97163fa0b587(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)var0, (int32)var1);
	const int16 var4 = (uint16)var3;
	const uint16 var5 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var5);
	context.moveValueStack(-3);
}

// First occurrence: UpdateBackground.HCZ1, line 260
static void exec_c510acb7fe27ee73(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: UpdateBackground.HCZ1, line 286
static void exec_2cc5258f0faeb1fa(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackground.HCZ1, line 294
static void exec_2c33d03615673cec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var9;
	const uint32 var11 = ((uint32)(var9) - (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var6);
}

// First occurrence: UpdateBackground.HCZ1, line 300
static void exec_d8fef7e68c702d99(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackground.HCZ1, line 309
static void exec_c96f429722f7a639(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) - (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var9;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: UpdateBackground.HCZ1, line 321
static void exec_877d8d75b9b3d0a5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackground.HCZ1, line 322
static void exec_d9a5fbbc9b8c78f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: UpdateBackground.HCZ1, line 378
static void exec_3cf29f79a80cfcdf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn01c892, line 403
static void exec_4a0287517cd1bc8e(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)context.getParameter<int64>());
}

// First occurrence: fn01c8b8, line 416
static void exec_4f0d132a1682d711(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) - (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: fn050ff0, line 683
static void exec_0448418464db2df3(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn050ff0, line 704
static void exec_f03ca366558c6c65(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn050ff0, line 713
static void exec_8fa0650f2e94cb8e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: UpdateBackground.HCZ2, line 723
static void exec_6f6c0ae0d9fc353b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: UpdateBackground.HCZ2, line 725
static void exec_8d4c95d04ad738f8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: UpdateBackground.HCZ2, line 730
static void exec_0abdb56c64cf7230(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var1 = 1;
	const int32 var2 = ((int32)(var0) >> (int32)((var1) & 0x1f));
	*context.getParameter<int32*>(8) = (uint32)var2;
}

// First occurrence: UpdateBackground.HCZ2, line 738
static void exec_f8b7e97b74a7df28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: UpdateBackground.HCZ2, line 746
static void exec_9cb289d00794d04f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
}

// First occurrence: UpdateBackground.HCZ2, line 753
static void exec_338415f9c13e64ed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), (uint16)var8);
}

// First occurrence: fn05127c, line 170
static void exec_b322e2d44e386434(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(8)));
	const int64 var5 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var4) == (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: UpdateBackground.MGZ1, line 207
static void exec_8f2b5b5c730420a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var3);
}

// First occurrence: UpdateBackground.MGZ1, line 212
static void exec_9e4f07274b7e3ec3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: UpdateBackground.MGZ1, line 213
static void exec_b6bc8baba3ac459d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackground.MGZ1, line 214
static void exec_ad79925403a4e343(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn01c930, line 242
static void exec_1f64c65cc635fe71(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
	context.moveValueStack(-1);
}

// First occurrence: fn01c96e, line 256
static void exec_caa2c956feec0bc1(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) & (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn05134c, line 415
static void exec_f3ed1d8a6088458c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn05134c, line 494
static void exec_e3f4fb61d9c42b57(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn05134c, line 499
static void exec_8e56cf85c852c1c8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var7 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var7);
}

// First occurrence: fn05134c, line 522
static void exec_870ac7795b23d731(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn05134c, line 526
static void exec_b64f4baf2aaaf2ba(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(8) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var0);
}

// First occurrence: fn051560, line 670
static void exec_71b56a1deb07ff10(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-3)) + (uint16)(var0));
	*context.getParameter<uint16*>() = (uint16)var1;
	context.moveValueStack(-3);
}

// First occurrence: fn051560, line 671
static void exec_519b5f579c69047c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0515a4, line 700
static void exec_8e42f2e1b9dd62c1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0515a4, line 700
static void exec_b448d06131c5db98(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05160e, line 734
static void exec_036be738149a83b7(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn0516d2, line 863
static void exec_6376ad7d5a70ba0c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) != (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: fn051762, line 928
static void exec_964a44d04ee2d882(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn051762, line 933
static void exec_8353b7af7f59bd89(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn0517ea, line 985
static void exec_f86a2a899d31c2ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn05180a, line 1006
static void exec_c72d4af9d28f03a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int16 var6 = ((uint16)(var3) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn051926, line 1165
static void exec_dcb68585beabacdf(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn051926, line 1168
static void exec_4770b00b36a63f80(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(2, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	context.moveValueStack(3);
}

// First occurrence: fn0519b2, line 1226
static void exec_de5a3ea369628872(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn051a04, line 1292
static void exec_fb3c4d6b60070e12(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn051a04, line 1294
static void exec_016b017e23bbf0ee(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(4));
	context.moveValueStack(4);
}

// First occurrence: fn051a04, line 1295
static void exec_4bc6e2577dd5b3b0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0)));
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: fn051b1c, line 1486
static void exec_b7965822619e630e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	const uint32 var8 = ((uint32)(var3) + (uint32)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn23d1fc, line 1556
static void exec_d3e79ae6dbc35349(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn23d1fc, line 1557
static void exec_495671882d7b1b02(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn23d220, line 1576
static void exec_bf2b9b4b2ce075f9(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	*context.getParameter<uint16*>(8) = (uint16)var0;
}

// First occurrence: fn23d220, line 1577
static void exec_111ca8c74587a0f9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const int16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn23d24c, line 1636
static void exec_3b7de46e8b1f5368(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var7);
}

// First occurrence: fn06d104, line 19
static void exec_452912fd32bdb2f7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var5);
}

// First occurrence: fn06d104, line 26
static void exec_d3b2418dc7bf530c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var7);
}

// First occurrence: fn06d104, line 29
static void exec_4df62f8038aa3837(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(24)));
	const int16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	context.writeValueStack<int16>(2, (int16)((int16)(var11) * (int16)(context.getParameter<int64>(32))));
	context.moveValueStack(3);
}

// First occurrence: fn06d104, line 47
static void exec_6efe5679ef4b00fe(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn06c962, line 239
static void exec_411a1b1d260514d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: fn06d2a4, line 845
static void exec_4048a48d40d04dbf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn06d3e2, line 894
static void exec_5abaee2d6ba2d939(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) >> (uint32)((var5) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn0622e4, line 67
static void exec_71daaef19ea1da0e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: fn0622e4, line 74
static void exec_9d652f0f47a5df15(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn062480, line 194
static void exec_57160ae73aaf8546(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: UpdateLevelTiles.CNZ1, line 56
static void exec_9f7117b6c9128563(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: UpdateLevelTiles.CNZ1, line 66
static void exec_6420463ce869b015(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: UpdateLevelTiles.CNZ1, line 79
static void exec_0f4f39a12b563d4b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateLevelTiles.CNZ1, line 81
static void exec_9da27100cb04efcf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var0);
}

// First occurrence: UpdateLevelTiles.CNZ1, line 82
static void exec_1885eac63a17c66c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5, (uint32)var0);
}

// First occurrence: UpdateLevelTiles.CNZ1, line 105
static void exec_50f0ca500253e86b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint16 var3 = (uint16)var1;
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var8 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var10 = ((uint32)(var7) + (uint32)(var8));
	*context.getParameter<uint32*>(32) = (uint32)var10;
}

// First occurrence: UpdateLevelTiles.CNZ1, line 107
static void exec_e0c18210f6d1cf91(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) != (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn051d82, line 338
static void exec_5cb996db005bdca2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn051e60, line 421
static void exec_53a3ce7653e6c530(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)-(signed)context.getParameter<int64>();
	*context.getParameter<uint16*>(8) = (uint16)var1;
}

// First occurrence: UpdateBackground.CNZ1, line 477
static void exec_ce7148c4108f6dd6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var3);
}

// First occurrence: UpdateBackground.CNZ1, line 479
static void exec_2fade4ed40e1678c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = ((uint32)(var0) - (uint32)(var3));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn051fb0, line 508
static void exec_027bf4e3c1be5fe6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05215a, line 637
static void exec_33b7561d42060282(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn051ff0, line 852
static void exec_ea2bacf3c4079a4f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) - (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn052066, line 910
static void exec_afbe53ac2e23fd13(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) > (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0394a0, line 86
static void exec_02d9986e5e1b2a62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var5 = (uint64)-(signed)context.getParameter<int64>(16);
	const int16 var6 = (uint16)var5;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn039554, line 149
static void exec_a03bcd30cb565cdb(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn03969e, line 245
static void exec_9276544c5b9066a0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(20)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(4);
}

// First occurrence: fn0539ac, line 183
static void exec_d056d049ff985613(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0539ac, line 187
static void exec_f94cd1ebfcba1915(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = swapBytes32(*context.getParameter<uint32*>(16));
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn0539ac, line 188
static void exec_11ce036fd2755f1a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) - (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn23de96, line 380
static void exec_08df5d3548aa7f50(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 0;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)context.getParameter<int64>());
}

// First occurrence: fn23de96, line 392
static void exec_9504a68e0ec3be00(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 0;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: InitLevelScrolling.ICZ2, line 812
static void exec_4e03585a6fd159e0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), (uint16)var3);
}

// First occurrence: fn053d78, line 857
static void exec_1d3a83c51e514c02(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) != (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1024
static void exec_8ed920aca45c0993(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) >> (uint16)((var2) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1034
static void exec_d4f4759f5de8b1f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1037
static void exec_906de19ef52de24a(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)var1, (uint32)context.getParameter<int64>(16));
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var3));
	const int16 var5 = (uint16)var4;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1038
static void exec_1c91ab52a4c103a5(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1039
static void exec_8d8ba55d98ec79b7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var6 = ((uint16)(var4) % (uint16)(var5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var6);
	context.moveValueStack(-2);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1042
static void exec_274cc282d7331ecc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var4 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.getParameter<int64>(8), (uint16)var3);
	const uint16 var5 = ((uint16)(var1) * (uint16)(var4));
	const uint16 var6 = ((uint16)(var0) - (uint16)(var5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1045
static void exec_d1c76be49c7d23c2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var3 = ((uint32)(context.getParameter<int64>(4)) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1059
static void exec_292207cc9362e6de(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var6 = ((uint32)(context.getParameter<int64>(16)) - (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1079
static void exec_7aa13757e9dcd08d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Indoors, line 1095
static void exec_e9aa625de4ff37d9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn08cbf2, line 93
static void exec_fd17eeb13f74016b(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) > (uint8)(var0)));
}

// First occurrence: fn08cc5a, line 138
static void exec_64a6c91f49022053(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(var2) >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(-1);
}

// First occurrence: fn08d12c, line 359
static void exec_ef78b38896fa375f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)*context.getParameter<int8*>(16);
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: fn062778, line 502
static void exec_25ae42a135482d81(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = OpcodeExecUtils::safeDivide<uint16>((uint16)var5, (uint16)context.getParameter<int64>(24));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fn062778, line 509
static void exec_92e80fea01cc1e2d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int16 var9 = ((int16)(var7) >> (int16)((context.getParameter<int64>(32)) & 0x0f));
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn062778, line 511
static void exec_c68edb301bca57ea(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(12));
	const uint16 var5 = ((uint16)(var3) % (uint16)(context.getParameter<int64>(20)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(context.getParameter<int64>()) + (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn08cdf2, line 768
static void exec_d6ad10ae0aa2e93e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn08ceae, line 783
static void exec_f3f53ebdac868ee3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn08d53e, line 326
static void exec_5f4089d09228b5d4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn062964, line 424
static void exec_ce171da1aba8ff56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn0629a8, line 445
static void exec_483f55d71a188a5f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0629ce, line 470
static void exec_32520c8284c724ce(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var6);
}

// First occurrence: fn0629ce, line 471
static void exec_dc3af56b0e279803(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn05480c, line 548
static void exec_43840d6581a9075d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(24));
	const int16 var6 = ((uint16)(var4) - (uint16)(var5));
	const uint16 var7 = swapBytes16(*context.getParameter<uint16*>(32));
	const int16 var8 = ((uint16)(var6) - (uint16)(var7));
	*context.getParameter<uint16*>(40) = (uint16)var8;
}

// First occurrence: fn05480c, line 559
static void exec_aa44c888968972db(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn05480c, line 702
static void exec_f018b8a8a01ba01a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn05480c, line 708
static void exec_6176638b5f5359df(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = ((uint16)(var1) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var4);
}

// First occurrence: fn0549c6, line 722
static void exec_6756e59da0bd252b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn0549c6, line 746
static void exec_520878222053773d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn0549c6, line 763
static void exec_834fdf928466a42f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)var3);
}

// First occurrence: fn0549c6, line 764
static void exec_a50d50fc399627a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn0549c6, line 783
static void exec_7c21e62f44ca98ed(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn072c0a, line 109
static void exec_f2ad1a52e5ac57d5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const int16 var7 = ((uint16)(var2) - (uint16)(var6));
	*context.getParameter<int16*>(24) = (uint16)var7;
	context.moveValueStack(-2);
}

// First occurrence: fn072c0a, line 126
static void exec_9b79ea32bd8a4422(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var4 = ((uint8)(var2) << (uint8)((var3) & 0x07));
	const uint8 var5 = ((uint8)(var1) | (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var5);
}

// First occurrence: fn072cda, line 189
static void exec_599784e017939795(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn072d92, line 272
static void exec_a5873f8a59c7ae32(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn072e2e, line 325
static void exec_9eb4e03c54f0dd78(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: fn072e54, line 389
static void exec_2a5bc53b98140e44(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn072ef8, line 422
static void exec_0f739e93abc36e2e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var9);
}

// First occurrence: fn039b46, line 116
static void exec_b2592b047827ff5d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	*context.getParameter<int32*>(8) = (uint32)var0;
}

// First occurrence: InitLevelTiles.LBZ1, line 38
static void exec_22b486471e288a46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(32));
	const uint16 var7 = ((uint16)(var5) & (uint16)(var6));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn0540d0, line 72
static void exec_128bb1c6e0ae30e3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn0540d0, line 83
static void exec_1a31aec668d9ef28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn054146, line 111
static void exec_393585e0559a9de5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var6;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: InitLevelScrolling.LBZ1, line 127
static void exec_bedef5f9a686913a(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)context.getParameter<int64>());
}

// First occurrence: UpdateLevelTiles.LBZ1, line 224
static void exec_f03d8773d5594e5a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint64 var2 = 1ull;
	const uint64 var3 = ((uint64)(var0) >> (uint64)((var2) & 0x3f));
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var3) + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn053ff8, line 324
static void exec_f5018f7309eda684(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<int16*>(24) = (uint16)var5;
}

// First occurrence: fn053ff8, line 331
static void exec_25e79ec6164d6833(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn053ff8, line 332
static void exec_a2cf71a87aa660fc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	*context.getParameter<uint32*>(20) = (uint32)var5;
}

// First occurrence: fn053ff8, line 370
static void exec_7d7b7ed21c282fe3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 520
static void exec_17421d0a09d5f69c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 525
static void exec_db7fe2252e6fe047(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(8));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var4);
	context.moveValueStack(-1);
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 528
static void exec_7afd9d3b5c9714ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint32 var3 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var3;
}

// First occurrence: fn04ef46, line 604
static void exec_cdc5037add10d43b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn23e458, line 636
static void exec_36a31c433a4d9816(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn05427c, line 922
static void exec_e965195c9bc538e0(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var1 = (uint16)-(signed)var0;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: fn23e756, line 968
static void exec_f81a78929007675b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = ((uint32)(var0) + (uint32)(var3));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn0543a2, line 1027
static void exec_0e21117f4a4580f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) + (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var6);
}

// First occurrence: fn05455e, line 1213
static void exec_ee164dbd8e01f62a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn05455e, line 1229
static void exec_c8d32bc47c2ffe38(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn0545c4, line 1357
static void exec_b8ac1748c1626205(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: UpdateBackground.LBZ2, line 1399
static void exec_529a653542794a0d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackground.LBZ2, line 1410
static void exec_a202b5523059bca3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: UpdateBackground.LBZ2, line 1467
static void exec_31e86c9f54a3660d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
}

// First occurrence: UpdateBackground.LBZ2, line 1513
static void exec_8bbf3c06fdd20658(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: UpdateBackground.LBZ2, line 1613
static void exec_4c2612ebdefba4f6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: UpdateBackground.LBZ2, line 1622
static void exec_20888b0bd82cab97(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(24) = (uint16)var3;
}

// First occurrence: fn054a94, line 1634
static void exec_8c297a89d31e0cee(const RuntimeOpcodeContext context)
{
	const int32 var0 = swapBytes32(*context.getParameter<int32*>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int32 var3 = (uint32)var2;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn063620, line 260
static void exec_d9c3d1d9aa43cbf8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<int16>(0, (int16)((int16)(var5) <= (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: fn063620, line 272
static void exec_60ed7cedd7d89d17(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn06364e, line 327
static void exec_52167e07a047545a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)(uint32)var1);
	context.moveValueStack(1);
}

// First occurrence: fn063694, line 397
static void exec_cc97c956b76325ab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7, (uint32)var4);
}

// First occurrence: fn063694, line 419
static void exec_12b7f6b5f22f0b2c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn063694, line 420
static void exec_4c0c8daac5d4a55e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var9);
}

// First occurrence: fn063790, line 484
static void exec_ca983bbd8ae13867(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn0637ec, line 510
static void exec_674807dc17cef51f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var6 = (uint16)-(signed)var5;
	*context.getParameter<int16*>(24) = (uint16)var6;
}

// First occurrence: fn063916, line 606
static void exec_67d1f1268677187c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn06395c, line 631
static void exec_d3ca1522b661b253(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn065e02, line 721
static void exec_e4be528ac1f4a44c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)-(signed)var2;
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn065e02, line 731
static void exec_7ffd348b5746cc2b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelTiles.MHZ1, line 90
static void exec_f344953fde11e960(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) >= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: InitLevelTiles.MHZ2, line 338
static void exec_0edaa8a3026a93d2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var1);
}

// First occurrence: fn054dbe, line 420
static void exec_a5c62e8d834a329c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(12)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn054dbe, line 452
static void exec_354ffa66c4cf156e(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-2, (int16)((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1)));
	context.writeValueStack<int64>(-1, (int64)0);
}

// First occurrence: fn055008, line 517
static void exec_1a6f88f3591ff0be(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn055008, line 519
static void exec_0a8c6dd445c3716f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint64 var3 = ((uint64)(var0) * (uint64)(context.getParameter<int64>(4)));
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var3) + (uint64)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn055050, line 562
static void exec_4bf0b2ceb1daf849(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1145
static void exec_5c0e2efd3e4d4ccf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) != (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1150
static void exec_0f07e258027399d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: fn05550c, line 1161
static void exec_6d1eaef0131ca736(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var0);
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) + (uint8)(var8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var9);
}

// First occurrence: fn05550c, line 1177
static void exec_5537b459c013dc36(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn05550c, line 1178
static void exec_24fdd6c88fb0430b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)-(signed)context.readValueStack<uint16>(-1);
	context.writeValueStack<int16>(-2, (int16)((int16)(context.readValueStack<int16>(-2)) >= (int16)(var0)));
	context.moveValueStack(-1);
}

// First occurrence: fn05550c, line 1182
static void exec_2b904f166565be61(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(4)));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(12)) & 0x1f));
	const int16 var6 = (uint16)var5;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: fn05550c, line 1185
static void exec_3491dad1e7ff0b94(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int32 var5 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(8)));
	const int32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const int32 var9 = OpcodeExecUtils::safeDivide<int32>((int32)var7, (int32)context.getParameter<int64>(24));
	*context.getParameter<int32*>(32) = (uint32)var9;
}

// First occurrence: fn05550c, line 1188
static void exec_5cef0ffd541bb614(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var3 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn05550c, line 1191
static void exec_4607a6b8454f857d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const uint32 var8 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(28)));
	const uint32 var9 = ((uint32)(var4) + (uint32)(var8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var3);
}

// First occurrence: fn05550c, line 1202
static void exec_73e263600419f871(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1208
static void exec_f667a6805c727cdf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var8);
}

// First occurrence: fn05550c, line 1210
static void exec_d2d44b99656b3d13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const uint32 var5 = ((uint32)(context.getParameter<int64>(12)) * (uint32)(var3));
	const uint32 var7 = OpcodeExecUtils::safeDivide<uint32>((uint32)var5, (uint32)context.getParameter<int64>(24));
	const uint32 var8 = ((uint32)(context.getParameter<int64>(4)) - (uint32)(var7));
	const uint32 var10 = ((uint32)(var8) * (uint32)(context.getParameter<int64>(32)));
	const int16 var11 = (uint16)var10;
	const uint16 var12 = ((uint16)(var0) - (uint16)(var11));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var12);
}

// First occurrence: fn05550c, line 1212
static void exec_3751ca13c1741040(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(3);
}

// First occurrence: fn05550c, line 1236
static void exec_16f6f8da4f54d7e2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: fn05550c, line 1240
static void exec_f8ec01add30aa2cf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	const uint16 var5 = OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)context.getParameter<int64>(16));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: fn05550c, line 1241
static void exec_421556d3de700f18(const RuntimeOpcodeContext context)
{
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var4 = ((uint32)(context.getParameter<int64>(8)) * (uint32)(var2));
	const uint32 var6 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(20));
	const uint32 var7 = ((uint32)(context.getParameter<int64>()) - (uint32)(var6));
	const uint32 var9 = ((uint32)(var7) * (uint32)(context.getParameter<int64>(28)));
	const int16 var10 = (uint16)var9;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var10);
}

// First occurrence: fn05550c, line 1258
static void exec_dcdd8c841abefc2b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn05560c, line 1290
static void exec_da5d26f6457c95b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(4));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) == (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: fn05560c, line 1292
static void exec_ac3c6f01157c5661(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >= (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: fn05560c, line 1311
static void exec_ca35a9ff47f3a943(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	const uint16 var4 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: fn05560c, line 1338
static void exec_f80ae8f7813562a1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: fn05560c, line 1339
static void exec_8270e91bfdec3856(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(20), (uint16)var4);
}

// First occurrence: fn05560c, line 1344
static void exec_790322bd515b36b2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var4);
}

// First occurrence: fn062e92, line 410
static void exec_da07148107486407(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn054e9c, line 67
static void exec_bef8cfe50ca04460(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn054e9c, line 69
static void exec_4310f9bdaeb04043(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn054f8c, line 142
static void exec_831cd39b1514d2f5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn054fec, line 179
static void exec_8006f6355c87829b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn05583e, line 219
static void exec_7079a0b5fcd88e94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) == (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05583e, line 235
static void exec_9f89db47202c4daf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05583e, line 236
static void exec_a0db71e3beb2b720(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn0631a4, line 113
static void exec_578f5123fb86a16d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) | (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: fn0631a4, line 119
static void exec_54f00da23413b3e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) | (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn063324, line 267
static void exec_d9fc30ad7a94c8b8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) % (uint16)(context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = (uint16)var0;
	context.moveValueStack(-2);
}

// First occurrence: fn063324, line 276
static void exec_b52af2373677dbf3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn063324, line 281
static void exec_6754b0cb90b4d31b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn063372, line 291
static void exec_40cd92447d927fd3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var8);
}

// First occurrence: fn065eb4, line 407
static void exec_8613792f7b896a1c(const RuntimeOpcodeContext context)
{
	const int16 var0 = OpcodeExecUtils::safeDivide<int16>((int16)context.readValueStack<int16>(-2), (int16)context.readValueStack<int16>(-1));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
	context.moveValueStack(-2);
}

// First occurrence: fn0532f0, line 48
static void exec_39b5693761ed5e9a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: fn0532f0, line 57
static void exec_cf0da46b39d57410(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const int32 var2 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16));
	const uint8 var3 = *context.getParameter<uint8*>(20);
	const int32 var5 = ((int32)(var2) * (int32)(var3));
	const int32 var7 = OpcodeExecUtils::safeDivide<int32>((int32)var5, (int32)context.getParameter<int64>(28));
	const uint32 var8 = ((uint32)(var1) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var8);
}

// First occurrence: fn0532f0, line 60
static void exec_c808615f93f3160b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const int32 var2 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16));
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var3);
}

// First occurrence: fn05333a, line 102
static void exec_253265a882d9d843(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(-1);
}

// First occurrence: fn053400, line 229
static void exec_d511d4813785109e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn0534c6, line 281
static void exec_729b6de1e6e1dce9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn052810, line 605
static void exec_ca2a750cdec8f171(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn052a2a, line 914
static void exec_2d0a13ab7db24fb7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn052a2a, line 936
static void exec_10661940e4be4a74(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var0);
}

// First occurrence: fn052b30, line 1082
static void exec_017e829e5edd8118(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn052cd8, line 1403
static void exec_a01883d8d4ecfb66(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn052e7a, line 1543
static void exec_c6ef4af11fe44c13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: fn052e7a, line 1548
static void exec_1baccaf393e3a193(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: fn0530f0, line 1921
static void exec_7633cbf2181864b0(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var0);
}

// First occurrence: fn0530f0, line 1936
static void exec_625825f119c7f82b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) <= (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0530f0, line 1938
static void exec_cc3826b13582242d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn0530f0, line 1939
static void exec_0fb45005fd8beccb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
	const uint32 var6 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var8);
}

// First occurrence: fn0530f0, line 1959
static void exec_d7950d16d57b7fed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn05318c, line 1969
static void exec_16c041484b932dc7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05318c, line 1974
static void exec_843d7d4b0fbbd7c1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05318c, line 1982
static void exec_c5e0a37c51c71136(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn05318c, line 1984
static void exec_dcfa96fec2621c23(const RuntimeOpcodeContext context)
{
	const int32 var0 = swapBytes32(*context.getParameter<int32*>());
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn05318c, line 2013
static void exec_bdefda0670959035(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn05318c, line 2016
static void exec_51f17bd1363b9909(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var3) - (uint16)(var9));
	const uint16 var12 = ((uint16)(var10) & (uint16)(context.getParameter<int64>(48)));
	*context.getParameter<uint16*>(56) = (uint16)var12;
}

// First occurrence: fn04eff6, line 2126
static void exec_20b01fa410ecac74(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-1);
}

// First occurrence: fn055a9a, line 106
static void exec_296b1af953f5cb84(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)-(signed)context.getParameter<int64>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var1);
}

// First occurrence: fn055b70, line 196
static void exec_8c91017095ccc7d4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(5, (int64)1);
	context.moveValueStack(6);
}

// First occurrence: fn055b70, line 210
static void exec_1cbc4017963950f8(const RuntimeOpcodeContext context)
{
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const int16 var3 = ((uint16)(var1) | (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: fn055c84, line 367
static void exec_819598cf81824e7d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn055d56, line 390
static void exec_bd5b61bece8840ad(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn055d56, line 392
static void exec_da351758b75ba58c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int32 var4 = ((int32)(var2) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<int32*>(24) = (uint32)var4;
}

// First occurrence: fn055d94, line 418
static void exec_2978012c5d967cab(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) & (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(32));
	context.moveValueStack(4);
}

// First occurrence: fn055ebe, line 540
static void exec_159e5f300630a257(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	*context.getParameter<uint32*>(8) = (uint32)var3;
	context.moveValueStack(-1);
}

// First occurrence: fn055efc, line 561
static void exec_18fad45575ee0ce4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var1);
}

// First occurrence: fn055df2, line 593
static void exec_90ae7a03f6e91144(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn0563a6, line 1098
static void exec_c8ab51b712f7e212(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), (uint32)var2);
}

// First occurrence: fn0566d2, line 1485
static void exec_d8dc3f4004d6fff0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
}

// First occurrence: fn0566e8, line 1494
static void exec_80296a28714825fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn056706, line 1501
static void exec_44b5277b3cd525c4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var5 = ((uint16)(context.getParameter<int64>(16)) - (uint16)(var4));
	const uint16 var6 = ((uint16)(var2) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), (uint16)var6);
}

// First occurrence: fn0567b0, line 1619
static void exec_2e870c4cbe2d5c94(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn05680a, line 1669
static void exec_cdfcb7a6f2fdf6ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)var3);
}

// First occurrence: fn05680a, line 1670
static void exec_8c23f88a533e38e0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0, (uint32)var3);
}

// First occurrence: fn05680a, line 1671
static void exec_d484e92dc91ea9c7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var1) < (int32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn05687c, line 1744
static void exec_94d681595657d6a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var1) >= (int32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn056904, line 1798
static void exec_ba5495a945bb7cbd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var1) > (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn056904, line 1800
static void exec_bcec8ceb199df7db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: fn056904, line 1805
static void exec_48c78d2605b06f46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var3 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var4 = (uint16)var3;
	context.writeValueStack<int16>(0, (int16)((int16)(var1) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn056904, line 1807
static void exec_a263de5a143465f8(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var1);
}

// First occurrence: fn056936, line 1837
static void exec_3189f79dfc64e8d8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var5) + (uint16)(var7));
	const uint16 var9 = (uint16)*context.getParameter<uint16*>(40);
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	*context.getParameter<uint16*>(48) = (uint16)var10;
}

// First occurrence: fn056964, line 1851
static void exec_7432c6474df08d03(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn056a34, line 1907
static void exec_9491af15301997e2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn056a34, line 1908
static void exec_af11e812c365474e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn056a34, line 1916
static void exec_069cb2dd016fa34a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: SOZ.drawDarkSandPit, line 1950
static void exec_a5745f88e4660afa(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(var3)));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(28)));
	const uint16 var7 = swapBytes16(*context.getParameter<uint16*>(36));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var6) - (uint16)(var7)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(44));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(52));
	context.moveValueStack(6);
}

// First occurrence: fn0560a2, line 211
static void exec_6ccb86ae15e7a02c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int16 var8 = ((uint16)(var3) + (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn0560a2, line 216
static void exec_68eb1aff35cb3cd4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = 1;
	const uint16 var7 = ((uint16)(var4) & (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(24)));
	const int16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	const uint16 var12 = ((uint16)(var7) + (uint16)(var11));
	*context.getParameter<uint16*>(32) = (uint16)var12;
}

// First occurrence: fn0560a2, line 221
static void exec_5999cdb178b901f0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: fn08f0ca, line 48
static void exec_bb0705d760f1e0fb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn08f0ca, line 57
static void exec_e113af56d8e02024(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn08f26e, line 254
static void exec_a934c3b009eaa418(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn08f26e, line 255
static void exec_570df300ceb8aa62(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn08f2e0, line 291
static void exec_fa342a4c4086c2bc(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var3 = ((uint16)(context.readValueStack<uint16>(-3)) > (uint16)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var3);
	context.moveValueStack(-3);
}

// First occurrence: fn08f2e0, line 295
static void exec_6afae399448a0b52(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) < (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn08f322, line 320
static void exec_5ccf4e1146cbc7ba(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn08f3f6, line 385
static void exec_36ec06fc24ebe933(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 0;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var0) != (uint8)(var1)));
}

// First occurrence: fn08f538, line 513
static void exec_2ee00e54a7dcdf80(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: UpdateBackground.LRZ1, line 317
static void exec_cc2548abd96d0d81(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackground.LRZ1, line 320
static void exec_79c54dc79beb14de(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn056ec2, line 543
static void exec_d2196bf34f8dc4f7(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var1 = (uint32)-(signed)var0;
	*context.getParameter<int32*>(8) = (uint32)var1;
}

// First occurrence: fn056ec2, line 559
static void exec_323f9f26b667d34b(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int64 var1 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn056ec2, line 575
static void exec_1ac42fa1167bf4ba(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: RenderLevelSprites.LRZ, line 607
static void exec_c8b83ddbab1e075b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: RenderLevelSprites.LRZ, line 617
static void exec_6957676c13b2db6d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: RenderLevelSprites.LRZ, line 621
static void exec_fd9398eb514bfe85(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var3) - (uint16)(var5));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: RenderLevelSprites.LRZ, line 622
static void exec_5b2c3bb12ac13e4a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: RenderLevelSprites.LRZ, line 626
static void exec_91441cf3f4f5f8e4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: UpdateBackground.LRZ2, line 833
static void exec_3dcc59973bca79a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = swapBytes16(*context.getParameter<int16*>(16));
	const uint32 var5 = ((uint32)(var2) + (uint32)(var3));
	const int16 var6 = (uint16)var5;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var6);
}

// First occurrence: UpdateBackground.LRZ2, line 883
static void exec_54f82ad493b105ee(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn0863ec, line 897
static void exec_0653dbaf1bff7679(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) > (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn0863ec, line 917
static void exec_a11b318d0a925c6f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) >> (uint32)((var5) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn0863ec, line 918
static void exec_0b55ca572a94f5fc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) << (uint8)((var1) & 0x07));
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var6 = ((uint8)(var2) + (uint8)(var5));
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn059b1c, line 1012
static void exec_2b227e082e922086(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(8));
	const uint8 var3 = 1;
	const uint16 var4 = ((uint16)(var2) << (uint16)((var3) & 0x0f));
	const int8 var5 = (uint8)var4;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var5);
}

// First occurrence: fn059ba4, line 1080
static void exec_911c910220364966(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)context.getParameter<int64>());
}

// First occurrence: fn059ba4, line 1081
static void exec_6352b551bef19676(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)context.getParameter<int64>());
}

// First occurrence: fn059c8c, line 1231
static void exec_ce02c85b0e568465(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(context.getParameter<int64>()) + (uint16)(var1)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(12)) + (uint16)(var3)));
	context.moveValueStack(2);
}

// First occurrence: fn059c8c, line 1253
static void exec_efe4767fb1d414b5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn059d24, line 1288
static void exec_793b831e3f3e1faa(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	const int8 var4 = (uint8)var3;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
	context.moveValueStack(-1);
}

// First occurrence: fn059d24, line 1309
static void exec_4419bae8f82bf6ff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var1);
}

// First occurrence: fn059d24, line 1319
static void exec_138cd09cd5563a45(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	context.writeValueStack<uint16>(2, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	context.moveValueStack(3);
}

// First occurrence: fn059d24, line 1321
static void exec_cb01ea7341b7081b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn059d82, line 1341
static void exec_12bb979d1a838874(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((int16)(var2) * (int16)(context.getParameter<int64>(16)));
	const int16 var6 = OpcodeExecUtils::safeDivide<int16>((int16)var4, (int16)context.getParameter<int64>(24));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), (uint16)var6);
}

// First occurrence: fn059d82, line 1345
static void exec_74c8b31d6641b45a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn059dbc, line 1370
static void exec_d77393c2090e90e3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var2) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
}

// First occurrence: fn059dde, line 1390
static void exec_b8de334e904dbc35(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var5 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn059dde, line 1401
static void exec_b0311a78fd6e0b49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn059f82, line 1642
static void exec_5642d70bcb3ce9ee(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn059fdc, line 81
static void exec_3f467e9d4d64eb33(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var3));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn059fdc, line 86
static void exec_cf93afa9aceb9fee(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var3;
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 95
static void exec_1cf5e3f8378d6583(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) + (uint32)(var2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var4);
}

// First occurrence: fn059fdc, line 96
static void exec_4889c04a94378ea4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)var0;
	*context.getParameter<uint16*>(4) = (uint16)var1;
}

// First occurrence: fn059fdc, line 111
static void exec_2fc6213aac4b0e14(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) - (uint32)(var2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var4);
}

// First occurrence: fn059fdc, line 125
static void exec_fb6ac1f8a89cbc3c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 159
static void exec_285fc8a57bbfe617(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 178
static void exec_e9e778a6279bf910(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) >> (uint32)((var1) & 0x1f));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: fn07910a, line 206
static void exec_e03c3fbf09db9e60(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var5);
}

// First occurrence: fn0791fe, line 281
static void exec_c6f02f3bf2eee7a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) > (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn0791fe, line 303
static void exec_8f7dee5ab495706d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var4);
	context.moveValueStack(-1);
}

// First occurrence: fn079516, line 498
static void exec_1da5f6291239e47e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) >> (uint16)((var5) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var6;
}

// First occurrence: fn042a18, line 27
static void exec_2ae5ee8ded5b93fa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) & (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn042a68, line 45
static void exec_ea1133440312cb19(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn042a68, line 58
static void exec_bbbbd7fdcde273e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) | (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: fn065ed4, line 296
static void exec_13bbb6d00c3c45a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: fn065ed4, line 298
static void exec_b527e8277d792e26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = (uint8)*context.getParameter<uint8*>(24);
	const uint8 var8 = ((uint8)(var6) & (uint8)(context.getParameter<int64>(32)));
	const uint8 var9 = ((uint8)(var5) | (uint8)(var8));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: fn065f2e, line 336
static void exec_6c8d81635e788a03(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var6 = ((uint8)(var4) << (uint8)((var5) & 0x07));
	const uint8 var7 = ((uint8)(var3) & (uint8)(var6));
	const int64 var8 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn065f2e, line 352
static void exec_43183fea7a19bd36(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var6);
}

// First occurrence: fn065f84, line 373
static void exec_ae19099133c1a30a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var6 = ((uint8)(var4) << (uint8)((var5) & 0x07));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: fn065f84, line 390
static void exec_97ec08610bd72ce6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var0);
}

// First occurrence: fn08622c, line 422
static void exec_4862c3640246fd0b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)var1);
	const int16 var4 = (uint16)var3;
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn064422, line 90
static void exec_9cd667ce3a74a0fd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn064422, line 91
static void exec_5c352ad09a2f0fc2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn064846, line 491
static void exec_3c00e50b343de9e9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn064d5c, line 1065
static void exec_ee11483cd798dd73(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const int32 var5 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var6 = ((uint32)(var1) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var6);
}

// First occurrence: fn06628c, line 1333
static void exec_ba182623750cddc5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)-(signed)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn0662a6, line 1342
static void exec_3f7537202bcb054d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >> (uint8)((context.getParameter<int64>(8)) & 0x07));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn0662c0, line 1351
static void exec_6d0b626a76917e7b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	*context.getParameter<int16*>(16) = (uint16)var5;
}

// First occurrence: fn0662c0, line 1353
static void exec_119c9c7061f0e801(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn0662c0, line 1356
static void exec_ec52dd67db1ba0de(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn0662c0, line 1361
static void exec_8c287f1fe126fc51(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn06510c, line 1518
static void exec_b9d632f13f7b8eca(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = *context.getParameter<int8*>(16);
	const uint16 var6 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn06516e, line 1556
static void exec_fb179e11a5fab3a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn06518a, line 1568
static void exec_c52b855bd9a05f93(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn0651ac, line 1582
static void exec_8c4591a5245f101a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) & (uint32)(context.getParameter<int64>(24)));
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(32)));
	const int16 var9 = (uint16)var8;
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn0651ac, line 1583
static void exec_7fc1d009f39853e7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var8 = ((uint32)(var6) & (uint32)(context.getParameter<int64>(32)));
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(40)));
	const int16 var11 = (uint16)var10;
	const uint16 var12 = ((uint16)(var3) + (uint16)(var11));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var12);
}

// First occurrence: fn0652a2, line 1662
static void exec_1bd77fbd4be333f0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(8) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var0) + (uint16)(var6));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
	context.moveValueStack(-2);
}

// First occurrence: fn0652a2, line 1663
static void exec_49c71fb7125cc8e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
	const uint32 var6 = 1;
	const uint32 var7 = ((uint32)(var5) - (uint32)(var6));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var2) + (uint16)(var8));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn065376, line 1724
static void exec_fc2de0bb216cd78a(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: fn065376, line 1725
static void exec_1466d9ab7cb9b517(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = (uint8)-(signed)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: fn065382, line 1750
static void exec_e9b9de2b41410bd1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) * (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn065382, line 1753
static void exec_fc43adfb2ac0b36a(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(context.getParameter<int64>()) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn06549a, line 1843
static void exec_2dc180184afd22dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)*context.getParameter<int8*>(16);
	context.writeValueStack<int8>(0, (int8)((int8)(var3) > (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn06549a, line 1844
static void exec_c8dd95febbdac91c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) - (uint8)(var4));
	*context.getParameter<int8*>(24) = (uint8)var5;
}

// First occurrence: fn065564, line 1929
static void exec_3c159e85b1a4b03a(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) != (uint8)(var0)));
}

// First occurrence: InitLevelTiles.EC, line 20
static void exec_f26234087bd722c4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) | (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var2);
}

// First occurrence: InitLevelScrolling.EC, line 51
static void exec_20644540233395c3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var7);
}

// First occurrence: InitLevelScrolling.EC, line 52
static void exec_15b52d6d7a6828da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(32)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var7);
}

// First occurrence: fn090964, line 134
static void exec_3fbc81d004c6f3b8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn090a94, line 184
static void exec_888795c42826e2fe(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)~var2;
	const uint8 var4 = ((uint8)(var1) & (uint8)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var4);
}

// First occurrence: fn090b32, line 253
static void exec_ec1f2635942b1726(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn090b32, line 257
static void exec_f4292d59f68d3e12(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn090b84, line 290
static void exec_45cde9a2738a03c5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn090bd2, line 303
static void exec_2d72c83225444e00(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readValueStack<int32>(-1);
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-1);
}

// First occurrence: fn090e4e, line 586
static void exec_9a2511cafe2381ad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) - (uint8)(var7));
	*context.getParameter<uint8*>(32) = (uint8)var8;
}

// First occurrence: fn090e4e, line 595
static void exec_061b8fe2e52f51f7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint8 var9 = ((uint8)(var4) << (uint8)((var8) & 0x07));
	const uint8 var10 = ((uint8)(var3) | (uint8)(var9));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var10);
}

// First occurrence: fn090e9a, line 642
static void exec_d3e54488c428f019(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) + (uint8)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var8 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var10 = ((uint32)(var7) + (uint32)(var8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var6);
}

// First occurrence: UpdateBackground.HPZ, line 292
static void exec_4384bbde140f5a7a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const int16 var4 = ((uint16)(var2) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateBackground.HPZ, line 297
static void exec_b69cc7a1cb1398ac(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn0572ba, line 134
static void exec_8aead1fa2a1780b7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) & (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var7);
}

// First occurrence: fn0572ba, line 150
static void exec_bda5e3fc8d14b0e3(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) & (uint16)(context.getParameter<int64>()));
	*context.getParameter<int16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn057344, line 192
static void exec_49ed8ce112f7f679(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint32 var5 = 0;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)context.getParameter<int64>());
}

// First occurrence: fn057344, line 194
static void exec_49669d5ac53aaaf9(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)context.getParameter<int64>());
}

// First occurrence: fn057344, line 205
static void exec_6bfd8862966b0c21(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn057344, line 237
static void exec_338c8223ef0d9c0e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn0574dc, line 297
static void exec_c022994d5c35c467(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05750c, line 323
static void exec_e05a7328bda3f594(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var1) >= (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn05750c, line 332
static void exec_f5b0044bdd38815d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: fn05750c, line 351
static void exec_3288ff15e4693010(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var9 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn05750c, line 353
static void exec_9c892b5a06f497d2(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(context.getParameter<int64>()) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn05758a, line 391
static void exec_e8482c53e4f2c602(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0575ea, line 517
static void exec_d79a14bcef706788(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) != (uint16)(var0)));
	context.moveValueStack(-2);
}

// First occurrence: fn0578f0, line 658
static void exec_79e4e9f35ff3b71c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<int16>(0, (int16)(uint16)-(signed)var0);
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: fn0578f0, line 658
static void exec_654d7fce2c7147a8(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int16>(-1, (int16)((uint16)(var1) + (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: fn0578f0, line 661
static void exec_c8351e02e52e806a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)var0;
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var5 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var1);
	const uint8 var8 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var9 = 1;
	const uint8 var10 = ((uint8)(var8) + (uint8)(var9));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var10);
}

// First occurrence: fn0579f0, line 810
static void exec_abc9651f898bd0cf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn057a60, line 840
static void exec_246527bb97122678(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const int16 var4 = ((uint16)(var2) & (uint16)(var3));
	const int16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn057a60, line 846
static void exec_35ba81eea66c1aad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn057a60, line 847
static void exec_3c8d1d74aa682573(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var5);
}

// First occurrence: fn057a60, line 894
static void exec_e922961044b46476(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	*context.getParameter<uint32*>(32) = (uint32)var6;
}

// First occurrence: fn058b20, line 152
static void exec_7fe4a2835b79535c(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int64 var1 = 0;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn058fbc, line 379
static void exec_61fde61565585bab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn058fbc, line 404
static void exec_23fe29c9451f08c7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: fn04f15a, line 514
static void exec_d24869f320ddf5b2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn0590e4, line 642
static void exec_35e34def998a561d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn059194, line 707
static void exec_d43b66e679a50b1a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var3) < (int32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn05b42a, line 738
static void exec_a2bd7d1011e82a6d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	const int64 var1 = 0;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn07ca3a, line 804
static void exec_4af0c170b3ca0fa9(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: fn07ca3a, line 825
static void exec_718243e8d316f285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: fn07caaa, line 838
static void exec_90406ec1d934b577(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) < (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn07cb28, line 899
static void exec_cfa412964bbc0314(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) >= (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn07cd82, line 1123
static void exec_648c7e77ac3beb97(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)var3;
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn07cd82, line 1127
static void exec_1978e20171668d92(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn07cd82, line 1145
static void exec_95753a0d0f088537(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn07cd82, line 1145
static void exec_6fe35dc0500baecd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn07ce1e, line 1180
static void exec_7a1d5b90a282c4ff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) - (uint8)(var4));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: fn07d11c, line 1231
static void exec_7218a53a005ee49d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn07d11c, line 1239
static void exec_ff7b8ca147666954(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) % (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn057f3e, line 122
static void exec_3c7b38ce4ea94044(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const int64 var5 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var4) == (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn057f3e, line 129
static void exec_c1744b8b8f8fa4f1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) - (uint32)(var5));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn05806e, line 265
static void exec_dc99b8294f661f55(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) + (uint32)(var5));
	*context.getParameter<uint32*>(8) = (uint32)var6;
}

// First occurrence: fn05806e, line 298
static void exec_c111806a5ebeae23(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn05806e, line 300
static void exec_ccff530bfc7b168e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var1) - (uint32)(var3));
	*context.getParameter<uint32*>(8) = (uint32)var4;
}

// First occurrence: fn05806e, line 314
static void exec_e8a7e05646450ab4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn05806e, line 322
static void exec_8a382d6b13cbe08f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int32 var6 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<int32*>(24) = (uint32)var6;
}

// First occurrence: fn05831e, line 516
static void exec_d882f0b1321f6ff2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn0583d2, line 615
static void exec_6b384c03e128cb53(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn057cd2, line 65
static void exec_bf89036b285c6b1e(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const int16 var1 = (uint16)-(signed)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn057d64, line 117
static void exec_8a431dba536b2970(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn057d64, line 118
static void exec_1404febaec82f785(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var3) >= (int32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn057da2, line 135
static void exec_effa84d3edb7e343(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) | (uint16)(var7));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn06594a, line 475
static void exec_4814d7c52ce1ee1c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fn06594a, line 476
static void exec_75962b33c9ae85ce(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn06594a, line 480
static void exec_fd8fbcbca6c0b515(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(1, (int16)((uint16)(var3) - (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: fn06594a, line 480
static void exec_b308316e93323d20(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(var1));
	context.writeValueStack<int16>(-3, (int16)((int16)(context.readValueStack<int16>(-3)) > (int16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn065b24, line 687
static void exec_163242a657fb16f9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(context.getParameter<int64>(16))));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var8) - (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(56));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(72);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(80)));
	const uint16 var14 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var13);
	context.writeValueStack<uint16>(4, (uint16)((uint16)(context.getParameter<int64>(64)) - (uint16)(var14)));
	context.writeValueStack<int64>(5, (int64)1);
	context.moveValueStack(6);
}

// First occurrence: fn065b70, line 733
static void exec_c6d6b00455e3d219(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn065fde, line 776
static void exec_635dfd8b7f2cbf11(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) != (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn049602, line 26
static void exec_49158225628ce75f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = swapBytes16(*context.getParameter<uint16*>(32));
	const uint16 var9 = ((uint16)(var7) - (uint16)(var8));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn049602, line 32
static void exec_1edcf2b6d1e36f28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = (uint8)~context.getParameter<int64>(8);
	const uint8 var4 = ((uint8)(var1) & (uint8)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var4);
}

// First occurrence: fn04964a, line 88
static void exec_048ba24439e09b2b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn049850, line 261
static void exec_96a368e72fe766a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var6 = ((uint8)(var4) << (uint8)((var5) & 0x07));
	const uint8 var7 = (uint8)~var6;
	const uint8 var8 = ((uint8)(var3) & (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: fn049850, line 263
static void exec_e2bfdce08cd31132(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = (uint8)~var6;
	const uint8 var8 = ((uint8)(var3) & (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: fn0498d2, line 301
static void exec_b05d24432e129da6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) | (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn0498d2, line 320
static void exec_93ce08a2c503d749(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var0) + (uint16)(var2));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var4);
}

// First occurrence: fn0498d2, line 322
static void exec_189dbc689997eb8c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)(uint8)var3);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const int64 var5 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var4) & (uint8)(var5)));
	context.moveValueStack(2);
}

// First occurrence: fn0498d2, line 326
static void exec_c89e5e84a7af1064(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) >> (uint8)((var1) & 0x07));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn049a0e, line 409
static void exec_1c79465ad19a849a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn049a0e, line 419
static void exec_88f79802d5447dcb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn049a0e, line 420
static void exec_c80cd48ba2b57c8d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) >= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn049a0e, line 420
static void exec_9c95ef52c8a5580d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) - (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var6);
}

// First occurrence: InitLevelTiles.DEZBossAct, line 27
static void exec_2737da95dc2f1637(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var8 = ((uint32)(var1) * (uint32)(var6));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: InitLevelTiles.DEZBossAct, line 28
static void exec_403991b05ff02088(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint32 var10 = ((uint32)(var3) * (uint32)(var8));
	*context.getParameter<uint32*>(32) = (uint32)var10;
}

// First occurrence: InitLevelTiles.DEZBossAct, line 29
static void exec_228e11bbe0853da3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: InitLevelTiles.DEZBossAct, line 31
static void exec_0c6a05cd5ad9d80c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(8)) - (uint16)(var1)));
	context.moveValueStack(2);
}

// First occurrence: fn05a508, line 162
static void exec_8bf03993d11b2948(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn05a5b0, line 289
static void exec_dd907c90cff3ad9c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn05a5b0, line 292
static void exec_7a41e6af923bae56(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn05a76c, line 554
static void exec_d701a4790a733616(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05a76c, line 557
static void exec_c053c3762f3f6102(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: fn05a79e, line 568
static void exec_435b4b7e202dcd35(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), (uint32)var7);
}

// First occurrence: fn05a872, line 674
static void exec_ca5945bcd129b3ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const int8 var8 = (uint8)var7;
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn0810a0, line 892
static void exec_7a963905061cf5b0(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn0829d2, line 475
static void exec_e6b2cd0b26be394c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0829d2, line 491
static void exec_1bf0b4eca6b46247(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = swapBytes16(*context.getParameter<int16*>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0829d2, line 531
static void exec_a718c936b408b91f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn082772, line 617
static void exec_f728eeda8a4e3303(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn082772, line 693
static void exec_e05f4f01431f6ec2(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	const int16 var4 = OpcodeExecUtils::safeDivide<int16>((int16)var2, (int16)context.getParameter<int64>(16));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn082920, line 769
static void exec_09bea14688ff10ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int32 var1 = swapBytes32(*context.getParameter<int32*>(8));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn082920, line 788
static void exec_c1abc363d7318bc8(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var1 = (uint32)*context.getParameter<int32*>(8);
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn082920, line 792
static void exec_afa323ac2e0ce3cb(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn01bbbe, line 836
static void exec_fc363c59537202ed(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn01bbbe, line 848
static void exec_efb6ed2ed64b04c8(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn05b012, line 728
static void exec_ffba9b55d3874e79(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var3);
}

// First occurrence: fn05b0a8, line 828
static void exec_74181f530835f81d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn05b0a8, line 830
static void exec_345a5c5ce6d7e2a2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn058d44, line 875
static void exec_f6fd798303a7be00(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var7);
}

// First occurrence: fn058d44, line 877
static void exec_bb5adb4e744136b7(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: fn058d3e, line 979
static void exec_63e231b9805b1f01(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn058d3e, line 1009
static void exec_e42e19641432fdb5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var7 = ((uint32)(var3) + (uint32)(var5));
	const uint32 var9 = ((uint32)(var7) >> (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var10 = ((uint32)(var1) + (uint32)(var9));
	const int16 var11 = (uint16)var10;
	const uint16 var12 = ((uint16)(var0) + (uint16)(var11));
	*context.getParameter<uint16*>(40) = (uint16)var12;
}

// First occurrence: fn058d3e, line 1077
static void exec_8a1db7334f3155a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = ((uint32)(var4) & (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn058d3e, line 1092
static void exec_7b6d1a69e6fa7613(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var7);
}

// First occurrence: fn058d3e, line 1107
static void exec_ce74f6741ba503aa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int16 var2 = (uint16)-(signed)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn058d3e, line 1109
static void exec_d017c17ef69d884f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)-(signed)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn05975c, line 52
static void exec_11ffc078f84a0d25(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var2);
}

// First occurrence: fn05975c, line 55
static void exec_35d8ccad08890176(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: LevelTilesAnim.BonusGS, line 104
static void exec_42c41690c0e034e7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: LevelTilesAnim.BonusGS, line 111
static void exec_635040218febbf72(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint32 var5 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var7 = ((uint32)(var5) & (uint32)(var6));
	*context.getParameter<uint32*>(40) = (uint32)var7;
}

// First occurrence: LevelTilesAnim.BonusGS, line 113
static void exec_bcf23be5b5f3de2e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) | (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: LevelTilesAnim.BonusGS, line 115
static void exec_cdcb777711af8a88(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var2;
}

// First occurrence: fn0285ee, line 143
static void exec_63121ea34615fe5c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn02863e, line 188
static void exec_31ec877fee082b6d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) | (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: LevelPaletteUpdate.BonusGS, line 282
static void exec_d07f2ec5eee73bcf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var3);
}

// First occurrence: LevelPaletteUpdate.BonusSM, line 324
static void exec_5d4c9f90c24499ca(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: LevelTilesAnim.BonusGM, line 54
static void exec_e4da44802271729e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var5);
}

// First occurrence: UpdateLevelTiles.BonusGM, line 78
static void exec_e1ae819c0b4a6561(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn23efb6, line 92
static void exec_bb19c82f57476c49(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var2) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn23f012, line 138
static void exec_c5444ecb36968ef8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
}

// First occurrence: fn239d58, line 264
static void exec_202a77a3b110c48c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var0) - (uint16)(var6));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: fn239e52, line 367
static void exec_7370cd87c9c54efa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint32 var5 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var6 = ((uint32)(var1) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var0);
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) + (uint8)(var8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var9);
}

// First occurrence: fn239864, line 526
static void exec_b21a3f324e9fc9e6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn239864, line 529
static void exec_3580e6f378822a5a(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var4 = ((uint16)(var2) & (uint16)(var3));
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn239864, line 536
static void exec_d550184aa0dce31f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const int16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(32);
	const int16 var8 = ((uint16)(var6) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(40);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var8);
}

// First occurrence: fn239864, line 540
static void exec_4a37d6179f2470c9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) | (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn239864, line 552
static void exec_3fa8f948ac116f5d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const int16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(32);
	const int16 var8 = ((uint16)(var6) + (uint16)(var7));
	*context.getParameter<int16*>(40) = (uint16)var8;
}

// First occurrence: fn239864, line 567
static void exec_4966f0df6a33d820(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const int16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
}

// First occurrence: fn239900, line 595
static void exec_f1c1e6121d50d4f1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var5 = ((uint32)(var2) + (uint32)(var3));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn239900, line 607
static void exec_02b6bdb1549adb1d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) ^ (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var2);
}

// First occurrence: fn23998e, line 650
static void exec_f4126e9e0ad82a79(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn239a22, line 699
static void exec_5a7cc08964b0cc7e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var8 = ((uint16)(var6) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(40);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var8);
}

// First occurrence: fn239a22, line 714
static void exec_22e025439e9b13de(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	const uint16 var7 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var8 = ((uint16)(var6) + (uint16)(var7));
	*context.getParameter<uint16*>(40) = (uint16)var8;
}

// First occurrence: fn239a22, line 728
static void exec_56cc8bbf40cd100f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn239aa8, line 750
static void exec_093f500c50900274(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn239aa8, line 751
static void exec_ce94168e6def175d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn239b20, line 805
static void exec_e1e2ba7e62b34a38(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var0) << (uint32)((var2) & 0x1f));
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var6 = ((uint32)(var3) & (uint32)(var4));
	const int16 var7 = (uint16)var6;
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn0597aa, line 85
static void exec_58c24feb20f234d2(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 159
static void exec_d462c71160b91e50(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 160
static void exec_2152e18cb58b8370(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int32 var3 = (uint32)var2;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) < (int32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 189
static void exec_e8cc994ff6d74795(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint64 var5 = ((uint64)(var1) + (uint64)(var3));
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var5) >= (uint64)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 198
static void exec_98abc5de4430b031(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 227
static void exec_829b28bba8b0c7b4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var3) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 240
static void exec_9d3db6527b1e5fb0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) * (uint16)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 269
static void exec_aa3768c80bcf212f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: BonusSM.RenderRotatingMaze, line 326
static void exec_238b6d061a2ea0f8(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var2 = ((int32)(var0) * (int32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)var2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 328
static void exec_c5e3d21ac2becd9b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) % (int16)(context.getParameter<int64>(4)));
	const int16 var3 = (uint16)-(signed)var2;
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const int16 var5 = 1;
	const uint16 var6 = ((uint16)(var4) - (uint16)(var5));
	const int16 var8 = ((int16)(var6) * (int16)(context.getParameter<int64>(16)));
	const int16 var9 = ((uint16)(var3) - (uint16)(var8));
	*context.getParameter<int16*>(24) = (uint16)var9;
}

// First occurrence: BonusSM.RenderRotatingMaze, line 333
static void exec_49b60dcf243f76c4(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12));
	const int16 var5 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((int32)(var4) * (int32)(var5));
	const int32 var8 = ((uint32)(var3) - (uint32)(var7));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(24), (uint32)var8);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 334
static void exec_8b84b321247684f3(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12));
	const int16 var5 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((int32)(var4) * (int32)(var5));
	const int32 var8 = ((uint32)(var3) + (uint32)(var7));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(24), (uint32)var8);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 338
static void exec_55d1d56581a94ea1(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(12);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 339
static void exec_e115b7006bfd0f9e(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var2 = ((int32)(var0) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 340
static void exec_bcb8149a81bbb0ab(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var1 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4));
	const int32 var2 = ((uint32)(var0) + (uint32)(var1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)var2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 351
static void exec_6de3a279fe9b53eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int32 var4 = OpcodeExecUtils::safeDivide<int32>((int32)var1, (int32)context.getParameter<int64>(12));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	const uint32 var8 = ((uint32)(context.getParameter<int64>(20)) - (uint32)(var6));
	const uint32 var10 = OpcodeExecUtils::safeDivide<uint32>((uint32)var8, (uint32)context.getParameter<int64>(32));
	const int32 var11 = ((uint32)(var4) + (uint32)(var10));
	const uint32 var12 = ((uint32)(var0) + (uint32)(var11));
	*context.getParameter<uint32*>(40) = (uint32)var12;
}

// First occurrence: BonusSM.RenderRotatingMaze, line 352
static void exec_4df9143fad2db3f0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int32 var4 = OpcodeExecUtils::safeDivide<int32>((int32)var1, (int32)context.getParameter<int64>(12));
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	const uint32 var8 = ((uint32)(context.getParameter<int64>(20)) - (uint32)(var6));
	const uint32 var10 = OpcodeExecUtils::safeDivide<uint32>((uint32)var8, (uint32)context.getParameter<int64>(32));
	const int32 var11 = ((uint32)(var4) + (uint32)(var10));
	const int32 var13 = ((int32)(var11) * (int32)(context.getParameter<int64>(40)));
	const uint32 var14 = ((uint32)(var0) + (uint32)(var13));
	*context.getParameter<uint32*>(48) = (uint32)var14;
}

// First occurrence: BonusSM.RenderRotatingMaze, line 363
static void exec_de47c2f0790509ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var1);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 368
static void exec_adb801324eeac49b(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)var3);
	context.moveValueStack(-2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 370
static void exec_5c182834f3a84e70(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int32 var3 = (uint32)var2;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) >= (int32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 370
static void exec_d4bbe1f505cc778c(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<int32>(-2, (int32)((int32)(context.readValueStack<int32>(-2)) < (int32)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 373
static void exec_a0a44b51418d195a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var4) * (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 377
static void exec_35f109e6d2e0b3a6(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(12) = (uint16)var3;
}

// First occurrence: BonusSM.RenderRotatingMaze, line 386
static void exec_4b43dc8285c16ebc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(12));
	context.moveValueStack(6);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 397
static void exec_706b08498e88e9a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var4 = ((uint32)(context.getParameter<int64>(8)) - (uint32)(var2));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(20) = (uint32)var5;
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28));
	const int8 var7 = 1;
	const uint8 var8 = ((uint8)(var6) + (uint8)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: fn04b490, line 409
static void exec_63a874ae85135a52(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var0) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn04b490, line 419
static void exec_5693194fa323e945(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var2);
}

// First occurrence: fn04b490, line 422
static void exec_a586c6f499bb2e03(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: fn04b4c4, line 451
static void exec_ee613fac7c3988b7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn04b4c4, line 491
static void exec_f9e72c3541e7939b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), (uint8)var4);
}

// First occurrence: fn04b65a, line 622
static void exec_f167e0efc15ac23e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var4);
}

// First occurrence: fn04b65a, line 625
static void exec_61be83e8fefb53f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var3);
}

// First occurrence: fn04bf9a, line 656
static void exec_5e42d8308a06585f(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int32 var6 = ((uint32)(context.getParameter<int64>()) - (uint32)(var4));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: fn04bf9a, line 658
static void exec_ef03ea6facbcbcc1(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12));
	const int16 var5 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((int32)(var4) * (int32)(var5));
	const int32 var8 = ((uint32)(var3) - (uint32)(var7));
	const int32 var10 = ((int32)(var8) >> (int32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<int32*>(32) = (uint32)var10;
}

// First occurrence: fn04bf9a, line 659
static void exec_55f2cb81234beb76(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var4 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12));
	const int16 var5 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((int32)(var4) * (int32)(var5));
	const int32 var8 = ((uint32)(var3) + (uint32)(var7));
	const int32 var10 = ((int32)(var8) >> (int32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<int32*>(32) = (uint32)var10;
}

// First occurrence: fn04c014, line 692
static void exec_f5ad7a8ea4921369(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	context.moveValueStack(2);
}

// First occurrence: fn04c026, line 712
static void exec_12ae6e61ba15b2dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var7);
}

// First occurrence: fn04c0aa, line 814
static void exec_678cf102775eb078(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = 1;
	const int16 var6 = ((int16)(var4) >> (int16)((var5) & 0x0f));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn04c374, line 905
static void exec_06e523f291a95cdf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn04c374, line 906
static void exec_0f8019ec89537556(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) - (uint32)(var8));
	const int32 var11 = ((int32)(var9) >> (int32)((context.getParameter<int64>(40)) & 0x1f));
	const uint32 var12 = ((uint32)(var3) - (uint32)(var11));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var12);
}

// First occurrence: fn04c416, line 988
static void exec_d055b94bd6ad15f9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >> (uint8)((context.getParameter<int64>(8)) & 0x07));
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) << (uint8)((context.getParameter<int64>(24)) & 0x07));
	const uint8 var6 = ((uint8)(var2) + (uint8)(var5));
	*context.getParameter<uint8*>(32) = (uint8)var6;
}

// First occurrence: fn04c416, line 998
static void exec_099396b0a4fc2da8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn04c416, line 999
static void exec_49ce335f0dca59bf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: fn04c480, line 1020
static void exec_6da35a965baf2e49(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) - (uint8)(context.getParameter<int64>(24)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn04c480, line 1021
static void exec_3b0bdc5dadb555c1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) >> (uint8)((context.getParameter<int64>(8)) & 0x07));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(24)));
	const uint8 var8 = ((uint8)(var6) - (uint8)(context.getParameter<int64>(32)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn04c480, line 1035
static void exec_6ddee13411beae64(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn04c480, line 1037
static void exec_f6ac83b758e666eb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var3 = ((uint8)(var0) - (uint8)(var2));
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn04c480, line 1065
static void exec_d9755b120083ebcc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c480, line 1075
static void exec_c81e00162f5e59b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04c480, line 1091
static void exec_b043dd588019b92f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: fn04c480, line 1093
static void exec_b8da5d12391d838b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
}

// First occurrence: fn04c480, line 1096
static void exec_71da28554f9d5390(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) << (uint8)((context.getParameter<int64>(4)) & 0x07));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint8 var4 = ((uint8)(var2) | (uint8)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn04c540, line 1110
static void exec_5a5d2f1b17ef654e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var6 = 1;
	const uint32 var7 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn04c576, line 1134
static void exec_544a3a1b11eb9def(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn04c5c4, line 1174
static void exec_16a20d632d6cf56b(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c5e0, line 1190
static void exec_e57cc25a0c135749(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) << (uint32)((var1) & 0x1f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var6 = ((uint32)(context.getParameter<int64>(24)) - (uint32)(var5));
	const uint32 var7 = ((uint32)(var3) >> (uint32)((var6) & 0x1f));
	const uint32 var8 = ((uint32)(var2) | (uint32)(var7));
	*context.getParameter<uint32*>(40) = (uint32)var8;
}

// First occurrence: fn04c5e0, line 1193
static void exec_f330debc74cbae08(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) | (uint16)(var6));
	const uint16 var9 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(32)));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn04c602, line 1202
static void exec_d1077ddaab11c298(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) >= (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn04c602, line 1207
static void exec_f3d2ea76261fece2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<int8>(0, (int8)((int8)(var3) < (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c602, line 1213
static void exec_23100dd79d49f51d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn04c63e, line 1228
static void exec_c1929a749fcd3376(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn04c63e, line 1236
static void exec_aa7e6fb5b3ecbc40(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<int8>(0, (int8)((int8)(var3) > (int8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn04c63e, line 1236
static void exec_6c79cfaa2d980876(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c6a8, line 1258
static void exec_29b4840418269205(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn04c71a, line 1341
static void exec_6f673237e3205a76(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var1) - (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var7);
}

// First occurrence: fn04c77c, line 1374
static void exec_86d1145c69b1f135(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var7 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn04c77c, line 1378
static void exec_d0135c39549d2202(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) >> (uint16)((var3) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn04c7a2, line 1391
static void exec_8b1c8ab48cdac5cb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn04c7a2, line 1394
static void exec_e1bd681ae29ecfb0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	const uint8 var0 = (uint8)*context.getParameter<uint8*>(8);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(var4)));
	context.moveValueStack(2);
}

// First occurrence: fn04c7a2, line 1394
static void exec_dae3d4a1b9de2e7e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(context.readValueStack<uint32>(-1)));
	*context.getParameter<uint32*>() = (uint32)var0;
	context.moveValueStack(-2);
}

// First occurrence: fn04c7e0, line 1444
static void exec_109f370ab553fd05(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn04c88e, line 1532
static void exec_8d10194295b613af(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn01aa02, line 1566
static void exec_66c436c357c01fe8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn01aa02, line 1589
static void exec_84462f7b149e060f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn01aa56, line 1618
static void exec_8cebd1ae8faa95f5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var2) + (uint16)(var6));
	const int16 var8 = (uint16)var7;
	const int16 var9 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const int32 var11 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(28));
	const int32 var12 = ((int32)(var9) * (int32)(var11));
	const int16 var13 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(32));
	const int32 var15 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(36));
	const int32 var16 = ((int32)(var13) * (int32)(var15));
	const int32 var17 = ((uint32)(var12) - (uint32)(var16));
	const int32 var19 = ((int32)(var17) >> (int32)((context.getParameter<int64>(40)) & 0x1f));
	const int32 var20 = ((uint32)(var8) + (uint32)(var19));
	const int16 var21 = (uint16)var20;
	const uint32 var22 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var24 = ((uint32)(var22) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var24, (uint16)var21);
	context.moveValueStack(-2);
}

// First occurrence: fn01aa56, line 1619
static void exec_ea7592565e07bcb8(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var2) + (uint16)(var6));
	const int16 var8 = (uint16)var7;
	const int16 var9 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const int32 var11 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(28));
	const int32 var12 = ((int32)(var9) * (int32)(var11));
	const int16 var13 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(32));
	const int32 var15 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(36));
	const int32 var16 = ((int32)(var13) * (int32)(var15));
	const int32 var17 = ((uint32)(var12) + (uint32)(var16));
	const int32 var19 = ((int32)(var17) >> (int32)((context.getParameter<int64>(40)) & 0x1f));
	const int32 var20 = ((uint32)(var8) + (uint32)(var19));
	const int16 var21 = (uint16)var20;
	const uint32 var22 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var24 = ((uint32)(var22) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var24, (uint16)var21);
	context.moveValueStack(-2);
}

// First occurrence: fn04ba4e, line 126
static void exec_f190787414025c55(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const int16 var2 = swapBytes16(*context.getParameter<int16*>(16));
	const int16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var5 = ((uint16)(var1) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var5);
}

// First occurrence: fn04babc, line 185
static void exec_8e3eb6e239c056ac(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn04babc, line 188
static void exec_9c3dc6530594bfc9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int32 var7 = ((int32)(var0) * (int32)(var5));
	*context.getParameter<int32*>(24) = (uint32)var7;
}

// First occurrence: fn04bbb2, line 253
static void exec_17259cf743172d38(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var5 = (uint8)-(signed)var4;
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn04bcb0, line 344
static void exec_f79958b35c8c212b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int32 var10 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const int32 var11 = ((uint32)(var3) + (uint32)(var10));
	*context.getParameter<uint32*>(40) = (uint32)var11;
}

// First occurrence: fn04bd5a, line 414
static void exec_259d53469ddd81e7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = OpcodeExecUtils::safeDivide<uint32>((uint32)var5, (uint32)context.getParameter<int64>(32));
	const uint32 var8 = ((uint32)(var0) + (uint32)(var7));
	*context.getParameter<uint32*>(40) = (uint32)var8;
}

// First occurrence: fn04bd5a, line 415
static void exec_50f5224edc2ef48c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var7 = OpcodeExecUtils::safeDivide<uint32>((uint32)var5, (uint32)context.getParameter<int64>(32));
	const uint32 var9 = ((uint32)(var7) * (uint32)(context.getParameter<int64>(40)));
	const uint32 var10 = ((uint32)(var0) + (uint32)(var9));
	*context.getParameter<uint32*>(48) = (uint32)var10;
}

// First occurrence: fn04bdca, line 458
static void exec_85ac2c254ec101a2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = OpcodeExecUtils::safeDivide<uint32>((uint32)var7, (uint32)context.getParameter<int64>(32));
	const uint32 var10 = ((uint32)(var0) + (uint32)(var9));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn04bdca, line 459
static void exec_fdb42ca3130bf62d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = OpcodeExecUtils::safeDivide<uint32>((uint32)var7, (uint32)context.getParameter<int64>(32));
	const uint32 var11 = ((uint32)(var9) * (uint32)(context.getParameter<int64>(40)));
	const uint32 var12 = ((uint32)(var0) + (uint32)(var11));
	*context.getParameter<uint32*>(48) = (uint32)var12;
}

// First occurrence: fn04be3a, line 519
static void exec_0a0e5a38b034a450(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04be3a, line 538
static void exec_96efa33e2e338bdb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn04be3a, line 557
static void exec_f6300510e78b947c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn04be3a, line 570
static void exec_52fb0e25a2885e1e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = (uint32)-(signed)context.getParameter<int64>(8);
	const int32 var4 = ((int32)(var0) * (int32)(var3));
	*context.getParameter<int32*>(16) = (uint32)var4;
}

// First occurrence: BlueSpheres.getNextOpenStageIndex, line 297
static void exec_da3c168bc67c51b6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(16);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) != (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn0085b0, line 335
static void exec_b253cd889fedc19b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn0085b0, line 351
static void exec_d47d5d43eb11aa6b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn0085b0, line 368
static void exec_e5d2698e61f54311(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = *context.getParameter<uint8*>(24);
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	const uint8 var9 = *context.getParameter<uint8*>(32);
	const uint32 var12 = ((uint32)(var9) * (uint32)(context.getParameter<int64>(40)));
	const uint32 var13 = ((uint32)(var8) + (uint32)(var12));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(48), (uint32)var13);
}

// First occurrence: fn0085b0, line 372
static void exec_88b8e7bbb235374c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0085b0, line 380
static void exec_0eea11127d178331(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var7 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var7);
}

// First occurrence: fn0085b0, line 383
static void exec_cfe9331f7b597eda(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var6 = ((uint8)(var0) + (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var6);
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const int8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) + (uint8)(var8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var9);
}

// First occurrence: fn0085b0, line 409
static void exec_8e0369da0068a295(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint32 var5 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(20)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var1) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var8);
}

// First occurrence: fn0085b0, line 412
static void exec_6c4a2c10d83744b4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var5;
}

// First occurrence: fn0085b0, line 425
static void exec_57d3f37a2563d70d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var4);
}

// First occurrence: fn0085b0, line 426
static void exec_23fa900dfec1c2fc(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: fn0085b0, line 429
static void exec_7ff6b34979d8ed56(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn0085b0, line 433
static void exec_53e920228f9188c7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var8 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var7);
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn0085b0, line 444
static void exec_ad605a2de479eab3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) + (uint32)(context.getParameter<int64>(8))));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var2) + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: fn0087da, line 472
static void exec_c2022fe9010dd14e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	*context.getParameter<uint16*>(8) = (uint16)var0;
}

// First occurrence: fn0087da, line 476
static void exec_631532d00e7393c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn008d5c, line 571
static void exec_fa5d12784126f879(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn008d5c, line 572
static void exec_a44ce838168c41b1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn008e94, line 672
static void exec_e4517b063b58db55(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(var4)));
	context.moveValueStack(2);
}

// First occurrence: fn00903e, line 789
static void exec_2e2600e14657f9ee(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var5 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var6 = ((uint16)(context.getParameter<int64>()) - (uint16)(var5));
	const int8 var7 = (uint8)var6;
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn00903e, line 800
static void exec_36f3c39e6c495314(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = swapBytes16(*context.getParameter<int16*>(16));
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn00903e, line 853
static void exec_30e3142543e8a913(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint32 var7 = ((uint32)(var4) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var8 = ((uint32)(var3) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2, (uint32)var8);
}

// First occurrence: fn0091a2, line 894
static void exec_d50401d59b95f0fd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, (uint32)(uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint16>(2, (uint16)(uint16)*context.getParameter<uint16*>(16));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(32)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(4);
}

// First occurrence: fn00927a, line 996
static void exec_39385621be257b0e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)var0;
	const int32 var3 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var3;
}

// First occurrence: fn00937c, line 1038
static void exec_791d8fcd3cf14b8d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn009402, line 1057
static void exec_ad215c72b6fcbd50(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn009488, line 1107
static void exec_9cfd776a5217fb44(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var7 = ((uint32)(var3) + (uint32)(var5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var7);
}

// First occurrence: fn009488, line 1108
static void exec_efb39386a2e16c5f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int16 var1 = (uint16)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn00953e, line 1182
static void exec_682f418873ed44db(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)var0, (int32)var1);
	const int16 var4 = (uint16)var3;
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn009580, line 1206
static void exec_83efdae6bfe4c520(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) | (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn009580, line 1220
static void exec_ec3b823606da50fa(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const int8 var2 = *context.getParameter<int8*>(16);
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var3);
}

// First occurrence: fn009580, line 1221
static void exec_65ba2892e6d07127(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) != (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn009580, line 1254
static void exec_f0ae467491365dc4(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.moveValueStack(2);
}

// First occurrence: fn009580, line 1260
static void exec_6eb9cb55a79099cc(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(8))));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<int16>(1, (int16)(uint16)-(signed)var2);
	context.moveValueStack(2);
}

// First occurrence: fn009580, line 1289
static void exec_af24acbbe120cf03(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) | (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn009580, line 1313
static void exec_a0c1f5a825dea99e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn009580, line 1320
static void exec_01cf8af2fbe3c1e8(const RuntimeOpcodeContext context)
{
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const int16 var5 = (uint16)var4;
	const uint16 var6 = ((uint16)(var1) - (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), (uint16)var6);
}

// First occurrence: BlueSpheres.RenderSpheres, line 1477
static void exec_6fef55528c1fd4a0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: BlueSpheres.RenderSpheres, line 1481
static void exec_1314f13dae16d9d5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var3 = (uint8)var2;
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: BlueSpheres.RenderSpheres, line 1494
static void exec_89aeec5ecfa02632(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: BlueSpheres.RenderSpheres, line 1511
static void exec_cc5ba5350ab0bfe6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var4);
}

// First occurrence: BlueSpheres.RenderSingleSphereA, line 1615
static void exec_7474d80942929a40(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const int16 var4 = ((uint16)(var0) + (uint16)(var2));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var4);
}

// First occurrence: BlueSpheres.RenderSingleSphereA, line 1621
static void exec_3ad274ce3b2db6e9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<int16>(0, (int16)((uint16)(var5) - (uint16)(context.getParameter<int64>(24))));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const int16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	context.writeValueStack<int16>(1, (int16)((uint16)(var8) - (uint16)(context.getParameter<int64>(40))));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(56)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var12));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(64);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(72)));
	context.writeValueStack<uint16>(3, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var15));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(80));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1642
static void exec_5c01579c27f74e6e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const int16 var4 = ((uint16)(var0) + (uint16)(var2));
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(12));
	const int16 var6 = ((uint16)(var4) - (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(20);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1647
static void exec_e8d0825fc44f5b3c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const int16 var7 = ((uint16)(var2) - (uint16)(var6));
	*context.getParameter<uint16*>(28) = (uint16)var7;
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1649
static void exec_d5110878fae5cc00(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var0) * (int32)(var2));
	const int32 var6 = ((int32)(var4) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<int32*>(24) = (uint32)var6;
}

// First occurrence: fn009b62, line 1687
static void exec_356cf523c70e89e6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) >= (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(3);
}

// First occurrence: fn009b62, line 1705
static void exec_c7691b8c29ad6dc4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn009b62, line 1708
static void exec_18b169ec3c2e556d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn009b62, line 1714
static void exec_aea01a3c4ae577ab(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int32 var5 = ((int32)(var3) * (int32)(context.getParameter<int64>(16)));
	const int32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn009b62, line 1747
static void exec_e690fe3c7e2fbb4f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn009b62, line 1752
static void exec_4fb472865afd5aaf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) | (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var6);
}

// First occurrence: fn009d5e, line 1792
static void exec_9459e29edcb7a3c7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var3);
}

// First occurrence: fn009e04, line 1868
static void exec_ace8a547f5fa2030(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var4);
}

// First occurrence: fn009ebc, line 1986
static void exec_3a6d4a5b38e0d498(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint16 var3 = ((uint16)(var0) + (uint16)(var2));
	const int16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn009ebc, line 1988
static void exec_1c561dcc6a194b60(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn009ebc, line 2019
static void exec_ef18a08061d5f95c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn009ebc, line 2021
static void exec_25e44b8f7b7722d3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2054
static void exec_474a7066fbb63bd7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var0);
}

// First occurrence: fn009f44, line 2076
static void exec_9ef29946f2743ae0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2129
static void exec_720570aa6af3caf9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const int16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn009f44, line 2130
static void exec_e287662be9e79941(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: fn009f44, line 2140
static void exec_59e4fb3bdf460946(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2151
static void exec_0058fd7cbe16bd7a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var0) + (uint16)(var7));
	const int16 var10 = ((uint16)(var8) & (uint16)(context.getParameter<int64>(28)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var10);
}

// First occurrence: fn009f44, line 2152
static void exec_871d9c41aa728e2d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2162
static void exec_53d497d3dc8f8910(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) | (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var6);
}

// First occurrence: fn009f44, line 2175
static void exec_a37a99488af38ff1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn009f44, line 2218
static void exec_08fab55db3320861(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int16 var3 = (uint16)*context.getParameter<int16*>(16);
	const int16 var4 = ((uint16)(var2) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn009f44, line 2237
static void exec_09ba17bc32cd7dad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2282
static void exec_4699c86f94f1c181(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var6);
}

// First occurrence: fn00a24c, line 2389
static void exec_9c7c0453592d10c1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: fn00a24c, line 2390
static void exec_7ae552980a3c3200(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: fn00a24c, line 2391
static void exec_7007901f10bf11e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(20)));
	*context.getParameter<uint32*>(28) = (uint32)var7;
	const uint32 var9 = ((uint32)(var7) - (uint32)(context.getParameter<int64>(36)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var4);
}

// First occurrence: fn02df64, line 2583
static void exec_b3c536bea89d2b9f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5));
	context.moveValueStack(1);
}

// First occurrence: fn02df64, line 2595
static void exec_c23f2d7cb3e324de(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) | (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn02df64, line 2616
static void exec_6da577567cb80bbb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: BlueSpheres.renderCustomGround, line 2725
static void exec_103aebe39d1d1e7e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>())));
}

// First occurrence: BlueSpheres.renderCustomGround, line 2727
static void exec_2a2fec96a04574c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2731
static void exec_f00371b3d9b36e85(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, (int64)context.getParameter<int64>(32));
	context.moveValueStack(7);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2732
static void exec_952d1ccab34d5611(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(40));
	context.moveValueStack(6);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2735
static void exec_440610fd7e4e7c16(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var0);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2736
static void exec_3ad8842f11ee8d5f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(2, (uint8)*context.getParameter<uint8*>(16));
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24));
	context.writeValueStack<uint16>(3, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(4, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2737
static void exec_c44fdaae88de7205(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>());
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2738
static void exec_41b35f3400838285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(8));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.renderCustomCharacterShadows, line 2752
static void exec_8d7c264b5803a022(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1))));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: Game.writeBlueSpheresData, line 2765
static void exec_f999d80b8b6eb384(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, (uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	context.writeValueStack<uint16>(3, (uint16)swapBytes16(*context.getParameter<uint16*>(20)));
	context.writeValueStack<uint8>(4, (uint8)*context.getParameter<uint8*>(28));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2778
static void exec_92fac9e52a97e06b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2819
static void exec_56066c3960465ce8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint16 var4 = ((uint16)(context.getParameter<int64>(4)) - (uint16)(var2));
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = OpcodeExecUtils::safeDivide<uint16>((uint16)var6, (uint16)context.getParameter<int64>(24));
	const uint16 var9 = 1;
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	const uint16 var11 = ((uint16)(var0) - (uint16)(var10));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var11);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2822
static void exec_0c6dda2e6c814831(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2825
static void exec_5989ed2d5700c66d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int64 var3 = ((uint64)(context.readValueStack<int64>(-2)) + (uint64)(var1));
	const int16 var4 = (uint16)var3;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2827
static void exec_a54aaa7b041d0aba(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)context.getParameter<int64>(), (int32)var1);
	context.writeValueStack<int32>(0, (int32)((uint32)(var3) - (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2827
static void exec_8fe8f50dae719952(const RuntimeOpcodeContext context)
{
	const int32 var1 = ((int32)(context.readValueStack<int32>(-1)) * (int32)(context.getParameter<int64>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var1);
	context.moveValueStack(-1);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2829
static void exec_f8ebce101ef786ac(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	*context.getParameter<uint16*>(12) = (uint16)var3;
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2831
static void exec_0d0079ab399c4da5(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2836
static void exec_6c1930cf07d4ad03(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(var0) + (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2844
static void exec_962b99ac2c1e96f2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var4)));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var5) + (uint16)(var7)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = 1;
	const uint32 var11 = ((uint32)(var9) + (uint32)(var10));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var15 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14);
	const uint16 var16 = (uint16)*context.getParameter<uint16*>(56);
	context.writeValueStack<uint16>(3, (uint16)((uint16)(var15) + (uint16)(var16)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(64)));
	const uint32 var18 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(76));
	const uint32 var19 = ((uint32)(context.getParameter<int64>(68)) - (uint32)(var18));
	const uint8 var20 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(80));
	const uint32 var23 = ((uint32)(var20) << (uint32)((context.getParameter<int64>(84)) & 0x1f));
	context.writeValueStack<uint32>(5, (uint32)((uint32)(var19) + (uint32)(var23)));
	context.writeValueStack<uint32>(6, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(92)));
	context.moveValueStack(7);
}

// First occurrence: fn02e746, line 405
static void exec_ca3713e6fec87b3c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 492
static void exec_d510ab098eea7070(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 499
static void exec_0002aa8723f59a9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) & (uint32)(context.getParameter<int64>(20)));
	const uint32 var9 = ((uint32)(var0) | (uint32)(var8));
	*context.getParameter<uint32*>(28) = (uint32)var9;
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 500
static void exec_7326254f1ebeb96a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn02e9d8, line 520
static void exec_15af32ae4e27f0fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02eaa6, line 667
static void exec_fff44e96580287ed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int64 var8 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) != (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn02ebe8, line 848
static void exec_6ebb76d226bd2151(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: fn02ebe8, line 848
static void exec_e4a10d379e9f2bf6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const int8 var1 = (uint8)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
	context.moveValueStack(-2);
}

// First occurrence: fn02ecd0, line 984
static void exec_f047ee88a887d58e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn02ed2a, line 1002
static void exec_1e6a8dd3f29f206c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) * (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn02ed2a, line 1026
static void exec_40d5cba335813b8c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var5);
}

// First occurrence: fn02ed2a, line 1029
static void exec_9b9a3e5eed6d8b27(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var5);
}

// First occurrence: fn02ed2a, line 1036
static void exec_981dfdfaedfdc981(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int32 var6 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	const int64 var7 = 0;
	const int32 var8 = ((int32)(var6) < (int32)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var8);
}

// First occurrence: fn02ed2a, line 1050
static void exec_ee524f903e9019a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) >= (uint32)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: fn085a1a, line 1086
static void exec_ab1aff8bc0726de9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const int32 var5 = ((uint32)(var3) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn085a1a, line 1087
static void exec_950315f4800742bb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn032b8c, line 42
static void exec_9adf8893f487ad6d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn032b8c, line 43
static void exec_9556efb12f3101e1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: fn036be0, line 24
static void exec_5eaba193675fbcf1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn036dfc, line 162
static void exec_4f62f3620b8f70e9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) > (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 167
static void exec_87f7e1c8845c8ac9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 191
static void exec_960dd29f03b14133(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn036dfc, line 233
static void exec_ce782552479975be(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) > (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 239
static void exec_be0d270d814d555d(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int16 var3 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn036f76, line 284
static void exec_fd5a47dafcf801bd(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	const uint8 var4 = ((uint8)(var0) + (uint8)(var3));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn037092, line 48
static void exec_9c31574c71a3592b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int8>(0, (int8)*context.getParameter<int8*>());
	context.writeValueStack<int8>(1, (int8)*context.getParameter<int8*>(8));
	context.moveValueStack(2);
}

// First occurrence: fn037092, line 48
static void exec_072ce6e6f5ee07eb(const RuntimeOpcodeContext context)
{
	const int8 var1 = ((int8)(context.readValueStack<int8>(-1)) % (int8)(context.getParameter<int64>()));
	*context.getParameter<uint8*>(8) = (uint8)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn0371be, line 137
static void exec_d60668db82713d7c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0371be, line 209
static void exec_55f8ebf26d1af1c3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0371be, line 224
static void exec_532ac0e07773253b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn0371be, line 227
static void exec_366c45d46f3494f2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var0);
}

// First occurrence: fn0371be, line 228
static void exec_bd535ca07dc61209(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)var0);
}

// First occurrence: fn0371be, line 231
static void exec_fa93745258e8d4ee(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)context.getParameter<int64>());
}

// First occurrence: fn0371be, line 235
static void exec_9e3b072e87b7e70d(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6, (uint32)context.getParameter<int64>());
}

// First occurrence: fn0371be, line 238
static void exec_b5e78a11e8fe4f3b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn037430, line 301
static void exec_af38b2c42d5f0a92(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn037430, line 301
static void exec_4f9e87740cdf4761(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) < (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 454
static void exec_4f7e23620ba68a31(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var1) > (int8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 456
static void exec_178e2cd3dec9df6c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 483
static void exec_8461615c9d2291c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(8) = (uint32)var3;
}

// First occurrence: fn037d7c, line 489
static void exec_94812dd56c8a3436(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4, (uint32)var0);
}

// First occurrence: fn037d7c, line 498
static void exec_b16192c35e4d4e1b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn037d7c, line 499
static void exec_ac0110401424b163(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
	const uint32 var9 = ((uint32)(var7) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var4);
}

// First occurrence: fn037d7c, line 513
static void exec_42e4ce6c1c6eb6eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
	const uint32 var9 = ((uint32)(var7) - (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var4);
}

// First occurrence: fn0363d0, line 45
static void exec_af4af53450718f30(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int16 var6 = ((int16)(var4) * (int16)(context.getParameter<int64>(24)));
	const int16 var8 = ((int16)(var6) >> (int16)((context.getParameter<int64>(32)) & 0x0f));
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<int16*>(40) = (uint16)var9;
}

// First occurrence: fn0363d0, line 50
static void exec_142829b252f60930(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int16 var6 = ((int16)(var4) * (int16)(context.getParameter<int64>(24)));
	const int16 var8 = ((int16)(var6) >> (int16)((context.getParameter<int64>(32)) & 0x0f));
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn036a38, line 352
static void exec_b39bad1be4fc071b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var4);
}

// First occurrence: fn032c6a, line 18
static void exec_e2de2994331214b5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn032c92, line 51
static void exec_ad7cdaf9e9148872(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn035b16, line 191
static void exec_538cde7dced01e77(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var3) == (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn035b16, line 205
static void exec_a34d5e610a9661c8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn022d54, line 252
static void exec_047e23be1f395ee3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn023b38, line 284
static void exec_0298284a10954c99(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var6;
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint8 var10 = ((uint8)(var3) | (uint8)(var9));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var10);
}

// First occurrence: fn023caa, line 373
static void exec_acf2f9d75d506eb2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn023ed0, line 566
static void exec_5ee7bbefb378b00b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) != (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn035d22, line 702
static void exec_ab7c03d463c2a2fb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn038150, line 846
static void exec_cc6c4be319d92d3f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) + (uint8)(var4));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn038150, line 854
static void exec_74153cf108f142bb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var6 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var8 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var4);
}

// First occurrence: fn03818e, line 879
static void exec_18fd2953e4159c8a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)-(signed)var3;
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn03818e, line 889
static void exec_1f1832da7c352529(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn0362ce, line 1072
static void exec_e8f86c6ff72914eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var4 = ((uint8)(var2) << (uint8)((var3) & 0x07));
	const uint8 var5 = ((uint8)(var1) | (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var5);
}

// First occurrence: fn23a080, line 40
static void exec_30d35d81e4593553(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var7);
}

// First occurrence: fn23a6de, line 166
static void exec_85b2321ce2f925b0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var7 = ((uint32)(var5) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn23a6de, line 167
static void exec_33e479355e5fa3b5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)context.getParameter<int64>(), (uint32)var1);
	const int16 var4 = (uint16)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var4);
}

// First occurrence: fn23a81e, line 334
static void exec_8ae1a4c30cc8118b(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = 1;
	const int32 var4 = ((int32)(var2) >> (int32)((var3) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn23a81e, line 350
static void exec_22ba5eb50d42cede(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 0;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	*context.getParameter<uint16*>(8) = (uint16)var3;
}

// First occurrence: fn23a8b6, line 415
static void exec_38ab5bcee2b72edb(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = 1;
	const int16 var4 = ((int16)(var2) >> (int16)((var3) & 0x0f));
	const int16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn23a8c2, line 422
static void exec_6d15b83059cdede3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = 1;
	const int32 var4 = ((int32)(var2) >> (int32)((var3) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn23a912, line 459
static void exec_3d689aabc9a291b8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn23a91c, line 467
static void exec_4a53713b4ff07787(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: GenericObject.Update, line 49
static void exec_0c52c7c95801352f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn0465d6, line 121
static void exec_204721e56975fcc8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var3) > (int32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0459b4, line 145
static void exec_173e3a92b6031b1f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0459b4, line 160
static void exec_2c813c8148c0c2fd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var2);
}

// First occurrence: fn0459b4, line 161
static void exec_d46b09ab2069c834(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn0459b4, line 163
static void exec_549ebfcd5465f767(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: DrawObject, line 29
static void exec_cfbbe3f4e7d82f09(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1, (uint16)var0);
}

// First occurrence: DrawObject, line 30
static void exec_c1a71c874eb2b4d2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var0);
}

// First occurrence: shouldUnloadObjectAtPosition, line 75
static void exec_8c2ae4e60355fcf1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(12));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var4) > (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: AddAsDynamicObject, line 167
static void exec_0f48279fc0407e96(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var0);
}

// First occurrence: MoveWithParent, line 238
static void exec_600bf106a3e38e20(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn01dc74, line 312
static void exec_c7fd43dd996460f4(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) << (uint8)((var1) & 0x07));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn01dc74, line 313
static void exec_49429b2dfbaa3c8d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn01dc74, line 322
static void exec_5a13c8c32e7e921a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var9 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn01dc74, line 334
static void exec_20537dbc56c4eeb8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var6);
}

// First occurrence: fn01dcb6_internal, line 383
static void exec_6f6687bead8c10c8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	*context.getParameter<uint8*>(4) = (uint8)var0;
}

// First occurrence: fn01dcb6_internal, line 384
static void exec_0d5906d59965a2e9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) << (uint8)((var1) & 0x07));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: fn01dd24, line 455
static void exec_393608dcb8101d34(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	const uint32 var4 = ((uint32)(var0) | (uint32)(var3));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn08598a, line 485
static void exec_6444f6a2ce62311c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint32 var4 = ((uint32)(var0) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn08598a, line 505
static void exec_b56817dffdf1f86d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn0859ce, line 536
static void exec_b703a2dedb42fba2(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	context.writeValueStack<uint64>(0, (uint64)((uint64)(context.getParameter<int64>()) - (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0859e2, line 548
static void exec_8b8ae4eeafcb38c2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Object.LoadSpritePatterns, line 596
static void exec_d0d94524fd7ea5b0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: Object.LoadSpritePatterns, line 598
static void exec_67e5ae06db48adb2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var3) * (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Object.LoadSpritePatterns, line 605
static void exec_b78ae67d6f73a61d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint32 var5 = ((uint32)(var2) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var5) * (uint32)(context.getParameter<int64>(20)));
	const uint32 var8 = ((uint32)(var0) + (uint32)(var7));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), (uint32)var8);
}

// First occurrence: Object.LoadSpritePatterns, line 606
static void exec_8e40efebe4eaf609(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: fn0850a2, line 636
static void exec_27ac19469284c6db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: PlayMusicAfterLevelResults, line 897
static void exec_7f7d50119f0d6824(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: PlayMusicAfterLevelResults, line 898
static void exec_3fcd693e6b815ca9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint8*>(12) = (uint8)var4;
}

// First occurrence: PlayMusicAfterLevelResults, line 900
static void exec_4d3c77402e8ec8ea(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var0);
}

// First occurrence: Object.AnimationUpdate, line 1014
static void exec_4bc0864393aa1e28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	*context.getParameter<uint8*>(32) = (uint8)var9;
}

// First occurrence: Object.AnimationUpdate, line 1039
static void exec_8b4db518acc07fe1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint8 var11 = ((uint8)(var9) & (uint8)(context.getParameter<int64>(40)));
	const uint8 var12 = ((uint8)(var5) | (uint8)(var11));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var15, (uint8)var12);
}

// First occurrence: Object.AlternativeAnimationUpdate, line 1074
static void exec_01f4610e8c077280(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var4 = ((uint8)(var0) - (uint8)(var3));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn01df90, line 1133
static void exec_46aa24583b341573(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	const int16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn01e006, line 1174
static void exec_4ad482369d3763f2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn01e006, line 1183
static void exec_1d63f9f00e4c4414(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn01e006, line 1199
static void exec_b859f13b2804da30(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint8 var12 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11);
	const uint16 var14 = ((uint16)(var8) + (uint16)(var12));
	*context.getParameter<int16*>(48) = (uint16)var14;
}

// First occurrence: fn01e006, line 1216
static void exec_3d8f4414027d3c6f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var5 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = ((uint32)(var1) << (uint32)((var5) & 0x1f));
	const uint32 var7 = ((uint32)(var0) | (uint32)(var6));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn01e042, line 1282
static void exec_51dd82d0e09c6f2a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) >= (int16)(var4));
	const int16 var6 = (uint16)*context.getParameter<int16*>(16);
	const int64 var7 = 0;
	const int16 var8 = ((int16)(var6) > (int16)(var7));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn01e042, line 1292
static void exec_ee8162b442bc84a2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint16 var1 = (uint16)*context.getParameter<uint16*>();
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var0) << (uint16)((var3) & 0x0f));
	const int8 var5 = (uint8)var4;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: fn01e042, line 1300
static void exec_32466371e616479d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) | (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: updateSonicPositionOnMovingObjectInternal, line 1383
static void exec_1e5373f78be2679d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var9 = ((uint16)(var7) - (uint16)(var8));
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: updateSonicPositionOnMovingObjectInternal, line 1384
static void exec_16981edf3e87a48d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(24));
	const uint8 var6 = ((uint8)(var4) * (uint8)(var5));
	const int8 var7 = (uint8)var6;
	const uint16 var8 = ((uint16)(var0) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(28);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(36)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn01e21e, line 1398
static void exec_d6f24e501428a09d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var4) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn01e21e, line 1401
static void exec_de686bb802a7cf24(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) - (uint16)(var8));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	const uint8 var14 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13);
	const int16 var16 = ((uint16)(var10) - (uint16)(var14));
	*context.getParameter<uint16*>(48) = (uint16)var16;
}

// First occurrence: fn01e240, line 1413
static void exec_a86266cee6b7e517(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var9 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	const uint16 var11 = 1;
	const uint16 var12 = ((uint16)(var10) >> (uint16)((var11) & 0x0f));
	*context.getParameter<uint16*>(40) = (uint16)var12;
}

// First occurrence: fn01e240, line 1416
static void exec_e0fcd3553823742a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: PlatformCheckClimbOnForCharacterA1, line 1472
static void exec_854790afa94af8d1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = (uint16)-(signed)var1;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: CheckCharacterClimbOnObject, line 1617
static void exec_d943f9550b21f110(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(16)));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: CheckCharacterClimbOnObjectInner, line 1630
static void exec_eb0979a5e113210a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var5) - (uint16)(var9));
	const int16 var13 = ((uint16)(var11) - (uint16)(context.getParameter<int64>(40)));
	*context.getParameter<uint16*>(48) = (uint16)var13;
}

// First occurrence: CheckCharacterClimbOnObjectInner, line 1636
static void exec_f86e94681ce35e35(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn01e45a, line 1649
static void exec_1bed04f15838451c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var5) - (uint16)(var9));
	const int16 var13 = ((uint16)(var11) - (uint16)(context.getParameter<int64>(40)));
	*context.getParameter<uint16*>(48) = (uint16)var13;
}

// First occurrence: fn01e45a, line 1655
static void exec_549433a3629a11e1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn01e50e, line 1708
static void exec_90c6be7792647a48(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) - (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn01e546, line 1729
static void exec_8e08d962dd939020(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) - (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn0858f8, line 1743
static void exec_47c0208096b73560(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	*context.getParameter<uint16*>(48) = (uint16)var10;
}

// First occurrence: Object.AnimationProgress, line 1790
static void exec_c418a195450b9b95(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) + (uint32)(var7));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	*context.getParameter<uint32*>(24) = (uint32)var9;
}

// First occurrence: fn084428, line 1813
static void exec_5f13a9326b494cd0(const RuntimeOpcodeContext context)
{
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	context.writeValueStack<uint64>(0, (uint64)((uint64)(context.getParameter<int64>()) - (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn084440, line 1840
static void exec_7e3122a2e1ad396c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const int32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var9 = ((uint32)(var0) + (uint32)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn084464, line 1874
static void exec_5241ee8b588d3c4a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const int32 var5 = ((uint32)(var3) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn084464, line 1883
static void exec_d7533287bdfd339b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = (uint32)~context.getParameter<int64>(8);
	const uint32 var3 = ((uint32)(var0) & (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn01b666, line 1906
static void exec_bcccc655c0297a7d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn01e7e2, line 31
static void exec_3485af9c827a513a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn01e8c6, line 105
static void exec_61eb38490c6e4ba0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn01e8c6, line 123
static void exec_b62be08c0e127c65(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) + (uint8)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn08657a, line 67
static void exec_18f72e1cd94f8275(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: fn08662a, line 220
static void exec_65bed7a27a967a3a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)(uint16)var0);
	const uint8 var1 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var1) == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn08662a, line 221
static void exec_2610dd19bf66ee3b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: fn08662a, line 224
static void exec_d4f221a1ebdb2c1e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int64 var4 = 0;
	context.writeValueStack<int16>(2, (int16)((int16)(var3) <= (int16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn08662a, line 224
static void exec_fe613fe17a37df46(const RuntimeOpcodeContext context)
{
	const uint32 var0 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(context.readValueStack<uint32>(-1)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint32)var0);
	context.moveValueStack(-3);
}

// First occurrence: fn086a7a, line 460
static void exec_15398dad23c69472(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var6);
}

// First occurrence: fn0868b6, line 543
static void exec_734e4b0f22d65974(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)-(signed)context.getParameter<int64>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var1) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn068074, line 634
static void exec_7f0856a4f0742f7b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int64 var1 = 1;
	const uint32 var2 = ((uint32)(var0) & (uint32)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) == (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn08b616, line 698
static void exec_4af099b4827cbb37(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var2) & (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: fn02cfc0, line 49
static void exec_d158784eb67f5864(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var8 = ((uint8)(var6) & (uint8)(context.getParameter<int64>(32)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) >= (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn02d10a, line 163
static void exec_abdfecd41f8dcc49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: Checkpoint.selectBonusStage, line 220
static void exec_c2739435c51272c9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::safeDivide<uint16>((uint16)var2, (uint16)context.getParameter<int64>(16));
	const uint16 var5 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24));
	const uint16 var6 = ((uint16)(var4) % (uint16)(var5));
	const int8 var7 = (uint8)var6;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var7);
}

// First occurrence: fn02d3c8, line 276
static void exec_408e1e90e1d3fed7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn02d3c8, line 280
static void exec_c06d100331436049(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const int8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) + (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var6);
}

// First occurrence: fn02d47e, line 358
static void exec_4c392794e0ce707a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn02d47e, line 378
static void exec_7fe7ce28aed473a7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = 1;
	const int16 var2 = ((uint16)(var0) << (uint16)((var1) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var2;
}

// First occurrence: fn02d47e, line 390
static void exec_245311bd33a92450(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn02d47e, line 422
static void exec_313c7d1fd70637dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = 1;
	const uint16 var8 = ((uint16)(var6) >> (uint16)((var7) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var8;
}

// First occurrence: fn01bb7e, line 458
static void exec_6939ccc68e995c2b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: GiantRing.Init, line 27
static void exec_33f0eae18457b55d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int64 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: GiantRing.Grant50Rings, line 166
static void exec_e15d0f94a1b98237(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const uint32 var2 = 1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var8 = ((uint32)(var2) << (uint32)((var6) & 0x1f));
	const uint32 var9 = ((uint32)(var1) | (uint32)(var8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var9);
}

// First occurrence: isSonicAndKnucklesZone, line 308
static void exec_bbfd6440e462b39c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
}

// First occurrence: fn0618fc, line 344
static void exec_335f19e2d5a8a750(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var5) - (uint16)(var8));
	const uint16 var11 = ((uint16)(var9) + (uint16)(context.getParameter<int64>(40)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), (uint16)var11);
}

// First occurrence: Monitor.getRandomMonitorType, line 47
static void exec_c5c01340eb2fceae(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) ^ (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) ^ (uint16)(var10));
	const uint16 var13 = ((uint16)(var11) % (uint16)(context.getParameter<int64>(40)));
	const int8 var14 = (uint8)var13;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), (uint8)var14);
}

// First occurrence: Monitor.getRandomizedType, line 128
static void exec_5bf7cab719cd3771(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = (uint8)~context.getParameter<int64>(4);
	const uint8 var3 = ((uint8)(var0) & (uint8)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var3);
}

// First occurrence: Monitor.getRandomizedType, line 143
static void exec_5b8fe5accd70e299(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) + (uint16)(var9));
	const uint16 var12 = ((uint16)(var10) >> (uint16)((context.getParameter<int64>(40)) & 0x0f));
	const uint16 var13 = ((uint16)(var0) ^ (uint16)(var12));
	const uint16 var15 = ((uint16)(var13) & (uint16)(context.getParameter<int64>(48)));
	const int8 var16 = (uint8)var15;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(56), (uint8)var16);
}

// First occurrence: Monitor.getRandomizedType, line 157
static void exec_200d02efa935ee8f(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(context.getParameter<int64>()) + (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Monitor.getRandomizedType, line 171
static void exec_3bf666ac9d1fbeca(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: MonitorIntact.UpdateDefault, line 304
static void exec_d69888a23f10b2c3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: MonitorIntact.UpdateDefault, line 305
static void exec_74fdde7c8c71464c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) + (uint16)(var5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var6);
}

// First occurrence: MonitorIntact.CheckBlocking, line 398
static void exec_4225d3be06991447(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const int64 var6 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) & (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: MonitorIntact.Opening, line 478
static void exec_9fdd4131c43ea40a(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var4 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(context.getParameter<int64>(24)));
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var1) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var6);
}

// First occurrence: ItemEffect.Init, line 582
static void exec_b10cfcb2f500ed3a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint32>(1, (uint32)((uint32)(var0) * (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: ItemEffect.ApplyExtraRings, line 682
static void exec_3809dd04b1f0a06a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int8 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: ItemEffect.applyShield, line 756
static void exec_c5cbf241bf407c63(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) | (uint8)(var5));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: ItemEffect.applyShield, line 762
static void exec_4396882d3b41a770(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) == (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: ItemEffect.applyShield, line 768
static void exec_fbca6bccb8292b95(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1, (uint32)var0);
}

// First occurrence: ItemEffect.applyShield, line 769
static void exec_780c914cf3bd7c87(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: DynamicRing.Update, line 53
static void exec_a61f7c4b50900b7d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(16)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: DynamicRing.UpdateAttraction, line 111
static void exec_c8b4a676fa498a87(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: DynamicRing.UpdateAttraction, line 135
static void exec_df711f19b42b4fb4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int16 var3 = OpcodeExecUtils::safeDivide<int16>((int16)var1, (int16)context.getParameter<int64>(12));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: SpillRings, line 238
static void exec_7c39c88ad8eb6a80(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var3 = (uint8)var2;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
}

// First occurrence: SpillRings, line 239
static void exec_0dbc225741aba330(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-1)) << (uint16)((var0) & 0x0f));
	*context.getParameter<int16*>(4) = (uint16)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn01a75c, line 293
static void exec_38e3041d6f156d36(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const int8 var6 = (uint8)var5;
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn01a75c, line 302
static void exec_08671df893f46a08(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const int16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const int16 var10 = ((uint16)(var5) - (uint16)(var9));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn0187f0, line 406
static void exec_fb4605a210095c92(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int8 var1 = 1;
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: fn018868, line 471
static void exec_feae2c4fbae42096(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 1;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) & (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn018868, line 471
static void exec_5e43500d8c2caaf2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = ((uint8)(context.readValueStack<uint8>(-2)) + (uint8)(context.readValueStack<uint8>(-1)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint8)var0);
	context.moveValueStack(-3);
}

// First occurrence: fn0188e8, line 504
static void exec_f12dd83f8097e0e3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint16 var3 = ((uint16)(var0) - (uint16)(var1));
	const int8 var4 = (uint8)var3;
	*context.getParameter<uint8*>(16) = (uint8)var4;
}

// First occurrence: fn0188e8, line 505
static void exec_021f153dbdf1fcf0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn01898a, line 553
static void exec_1d211cffde33660a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint32 var5 = 1;
	const int32 var6 = ((uint32)(var4) + (uint32)(var5));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var0) + (uint16)(var7));
	*context.getParameter<uint16*>(24) = (uint16)var9;
}

// First occurrence: fn083708, line 54
static void exec_90b7efd9ab7f46a9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), (uint16)var10);
}

// First occurrence: fn083708, line 55
static void exec_f47d94364fd7c03d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	*context.getParameter<uint32*>(20) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(28)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var7);
}

// First occurrence: fn083708, line 90
static void exec_eda02a953a65cdcd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((uint8)(var3) - (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn083708, line 90
static void exec_084ad127e91bd84f(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) * (uint8)(context.getParameter<int64>()));
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn083708, line 91
static void exec_c509a42133a0cca7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) + (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.moveValueStack(2);
}

// First occurrence: fn083708, line 104
static void exec_b2bdf3b6a2c3be93(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var2) > (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: fn083708, line 104
static void exec_c97d831e99e0d1e4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: fn083708, line 116
static void exec_bc7c7a16f45d2e56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) > (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn083708, line 119
static void exec_dec09529d80628b3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fn083708, line 121
static void exec_21b5b1919d34de22(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(24));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(40)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(5, (uint8)((uint8)(var3) - (uint8)(context.getParameter<int64>(48))));
	context.moveValueStack(6);
}

// First occurrence: fn083832, line 200
static void exec_33e3e18c676a4dd9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn083832, line 205
static void exec_eb000aebaa8253d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >= (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn0838c2, line 244
static void exec_d913d2b63f20199b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn0839a2, line 325
static void exec_5634fe1f06d0d0fa(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	const int16 var4 = (uint16)var3;
	*context.getParameter<uint16*>(16) = (uint16)var4;
	context.moveValueStack(-1);
}

// First occurrence: fn0839ea, line 338
static void exec_13773d4faed69db0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(1, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var6) >= (uint16)(var10)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: Spikes.Init, line 54
static void exec_0539a1db8c319696(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) * (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn02438a, line 313
static void exec_beff035e6118e051(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) & (uint32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn02438a, line 313
static void exec_c70c01ba8c4ddcdd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) >= (uint16)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: SpringVertical.updateInternal, line 214
static void exec_358448e86f60e996(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const int64 var6 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) & (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: SpringHorizontal.Check, line 247
static void exec_bcbb3fae494a6bd7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint8 var2 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint16 var4 = ((uint16)(var1) << (uint16)((var2) & 0x0f));
	const uint16 var5 = ((uint16)(var0) & (uint16)(var4));
	*context.getParameter<uint16*>(12) = (uint16)var5;
}

// First occurrence: SpringVertical.ApplyToCharacter, line 339
static void exec_c4951248a09df10f(const RuntimeOpcodeContext context)
{
	const int8 var0 = 1;
	const int8 var1 = (uint8)-(signed)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var1);
}

// First occurrence: SpringVertical.ApplyToCharacter, line 344
static void exec_044df1b3abd52d4b(const RuntimeOpcodeContext context)
{
	const int8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: fn023374, line 385
static void exec_d104c4da6f2a05ff(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn0230de, line 492
static void exec_2f0bf5879f044f0c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: AfterImages.Update, line 46
static void exec_de1a49b42039e859(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)*context.getParameter<uint8*>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	const int64 var1 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) & (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: AfterImages.Update, line 46
static void exec_e1ece9ac6cca6d4d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = ((uint8)(context.readValueStack<uint8>(-2)) - (uint8)(context.readValueStack<uint8>(-1)));
	*context.getParameter<uint8*>() = (uint8)var0;
	context.moveValueStack(-2);
}

// First occurrence: fn018cb6, line 210
static void exec_ef71bf8aa7da455d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) != (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn01e626, line 57
static void exec_ca164364d2c14a27(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) | (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn019348, line 29
static void exec_fcf59e4853d78176(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn019348, line 30
static void exec_b568f610661d3445(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn0193ec, line 120
static void exec_717512656b64a811(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn0193ec, line 121
static void exec_6047ce5537b1cc4c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var5) | (uint16)(var8));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn01a292, line 143
static void exec_dacccdfe2be4b9e7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 0;
	const uint16 var2 = ((uint16)(var0) == (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn01a37a, line 231
static void exec_d6ae77ecd8a102b1(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)-(signed)context.getParameter<int64>();
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var1);
}

// First occurrence: fn01a37a, line 234
static void exec_d17010ffa64c853c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)var2);
}

// First occurrence: fn01a37a, line 247
static void exec_8d5cf19191a333a0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var2) - (uint16)(var6));
	*context.getParameter<int16*>(32) = (uint16)var7;
}

// First occurrence: fn01a37a, line 255
static void exec_36a7d003e8086bf2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)!var0;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var1);
}

// First occurrence: fn0191a4, line 47
static void exec_f8d3288bc50a492b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const int16 var3 = swapBytes16(*context.getParameter<int16*>(16));
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(24)) & 0x0f));
	context.writeValueStack<int16>(2, (int16)(uint16)var5);
	const uint8 var6 = *context.getParameter<uint8*>(32);
	const int64 var7 = 1;
	context.writeValueStack<uint8>(3, (uint8)((uint8)(var6) & (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(4);
}

// First occurrence: fn0191a4, line 47
static void exec_bfb6ab72d34e7a74(const RuntimeOpcodeContext context)
{
	const int64 var0 = ((int64)(context.readValueStack<int64>(-2)) * (int64)(context.readValueStack<int64>(-1)));
	const int16 var1 = (uint16)var0;
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-3)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-4), (uint16)var2);
	context.moveValueStack(-4);
}

// First occurrence: fn02f9ca, line 93
static void exec_9332f12eafcc89af(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn02fa50, line 200
static void exec_378391bdd243201b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const uint32 var2 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var1));
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(8)));
	const int16 var5 = (uint16)var4;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
	context.moveValueStack(-2);
}

// First occurrence: fn02fa50, line 209
static void exec_70bc88dbf4f63e69(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const int64 var2 = 0;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(var1) == (uint32)(var2)));
}

// First occurrence: fn02fa50, line 225
static void exec_98abf2f7633d284b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const uint32 var2 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var1));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(8) = (uint16)var3;
	context.moveValueStack(-2);
}

// First occurrence: fn02fbb2, line 278
static void exec_bb7b178c86f0fe0e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn02fbb2, line 278
static void exec_95e93b3fc7f427a4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn020630, line 32
static void exec_08bdac25636ff378(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) << (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn020630, line 34
static void exec_8d8a6263794e17a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) >> (uint8)((context.getParameter<int64>(24)) & 0x07));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn020630, line 47
static void exec_c40e7ec754d10f3f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn020752, line 81
static void exec_734d515ae19b655d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) << (uint8)((context.getParameter<int64>(24)) & 0x07));
	const uint8 var9 = ((uint8)(var7) + (uint8)(context.getParameter<int64>(32)));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: fn020bba, line 461
static void exec_f623de3f9566ec96(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var6 = ((uint8)(var0) - (uint8)(var5));
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn038688, line 54
static void exec_e9995fc8c0b56641(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn038688, line 71
static void exec_21254d2b404eb6e1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn0387b6, line 119
static void exec_72b19c3184e16f0d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn0387e0, line 167
static void exec_2b473b70aa5213e2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	const int8 var3 = (uint8)*context.getParameter<int8*>(16);
	const int64 var4 = 0;
	context.writeValueStack<int8>(2, (int8)((int8)(var3) < (int8)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn0387e0, line 167
static void exec_3432da7494c30a02(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)context.readValueStack<int8>(-1);
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-2)) + (uint8)(var0));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint8)var1);
	context.moveValueStack(-3);
}

// First occurrence: fn0389de, line 305
static void exec_d9a7233bb40eef99(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn038aa2, line 354
static void exec_3c7411be2805c7a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var9 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn038aa2, line 365
static void exec_f22ff3642263b6a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const int32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var8) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn038cc2, line 410
static void exec_c25a9333f8181ecb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn038cc2, line 415
static void exec_cee6a90d7cc0dc66(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var5) + (uint32)(var7));
	*context.getParameter<uint32*>(16) = (uint32)var8;
}

// First occurrence: fn038cc2, line 441
static void exec_6fba47a29cb2c2ac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn038c8e, line 559
static void exec_ed14e2e7ad8b0978(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn038c8e, line 559
static void exec_0289df90e771aedf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const int16 var2 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var0);
}

// First occurrence: fn038d74, line 792
static void exec_e9d774fe5c8d3745(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var1) + (uint32)(var3));
	*context.getParameter<uint32*>(8) = (uint32)var4;
}

// First occurrence: fn0205de, line 162
static void exec_9ab3db7d875e84f8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = ((uint8)(var0) << (uint8)((var3) & 0x07));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var4);
}

// First occurrence: fn01dece, line 507
static void exec_a0507da7cbb5dd52(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var7 = ((uint8)(var4) - (uint8)(var6));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: fn01dece, line 508
static void exec_74f16674cedb6403(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)*context.getParameter<int8*>(16);
	const uint16 var6 = ((uint16)(var3) - (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn01dece, line 510
static void exec_07cfa40d745f27dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint16 var9 = ((uint16)(var7) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn024d9a, line 43
static void exec_5724f41e309a903f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: fn024d9a, line 45
static void exec_e09a2cb5968b74c7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn024d9a, line 58
static void exec_4ef2eb6d4df7a8b4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var5 = (uint64)-(signed)context.getParameter<int64>(16);
	const int16 var6 = (uint16)var5;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: MovingPlatform.Init, line 41
static void exec_4c87db709b3452cf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var9 = ((uint32)(var7) & (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: MovingPlatform.Init, line 53
static void exec_fe49ee4a7e966476(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: MovingPlatform.Horizontal01.Update, line 122
static void exec_89bee6268f88a9dc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: getMovingPlatformOffset, line 146
static void exec_23cc0ada0b626558(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: getMovingPlatformOffset2, line 154
static void exec_19aa45642ba9da92(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const int64 var3 = 1;
	const uint8 var4 = ((uint8)(var2) >> (uint8)((var3) & 0x07));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: getMovingPlatformOffset2, line 154
static void exec_46ee7cef329a9ec7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 1;
	const uint8 var3 = ((uint8)(var1) >> (uint8)((var2) & 0x07));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var3);
	context.moveValueStack(1);
}

// First occurrence: fn03b97a, line 59
static void exec_f11b84c71801a515(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = 1;
	const int16 var5 = ((uint16)(var3) << (uint16)((var4) & 0x0f));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn01fc66, line 290
static void exec_c51dad0366846b50(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: Rocks.BreakWall, line 484
static void exec_418da6b5a2ed0372(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = ((uint32)(var2) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn02015c_internal, line 667
static void exec_b39cbb0b71e7caf5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var0) + (uint16)(var6));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn02015c_internal, line 669
static void exec_c521f2b781e8a680(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) | (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn0200cc, line 773
static void exec_9cbceb80eafe3f94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((var1) & 0x1f));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var2);
}

// First occurrence: fn0200cc, line 774
static void exec_f42369545b3912b0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) < (uint16)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn0200cc, line 792
static void exec_9c2d9373cde63835(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(context.getParameter<int64>()) - (uint8)(var4));
	const uint8 var7 = ((uint8)(var5) | (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var7);
}

// First occurrence: fn0201c4, line 807
static void exec_68e8d593b26d8bdf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn03301c, line 234
static void exec_13f98cf41187c243(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint16 var4 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn0862b4, line 32
static void exec_979090ec5aa998be(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn0862b4, line 34
static void exec_8e5b80795b64a89a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var3 = (uint8)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn0862fe, line 46
static void exec_cda630105dbbc7a5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var11 = ((uint16)(var9) - (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(40), (uint16)var11);
}

// First occurrence: fn0862fe, line 47
static void exec_8b8a46b9e2e63423(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var9);
}

// First occurrence: fn0862fe, line 49
static void exec_987c30216da5dbf3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(3, (uint8)((uint8)(var3) * (uint8)(context.getParameter<int64>(32))));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(56)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	context.writeValueStack<uint16>(4, (uint16)((uint16)(context.getParameter<int64>(40)) - (uint16)(var9)));
	context.writeValueStack<int64>(5, (int64)1);
	context.moveValueStack(6);
}

// First occurrence: fn086308, line 71
static void exec_c160fe4d56929700(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var3 = ((uint16)(var1) - (uint16)(context.getParameter<int64>(12)));
	const int16 var4 = ((uint16)(var0) + (uint16)(var3));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: fn0456f4, line 187
static void exec_d08b19352bdafb69(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<int8>(0, (int8)((int8)(var3) >= (int8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn045bf4, line 397
static void exec_cfc5cea199d60a88(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn045bf4, line 398
static void exec_bd8efcbc817ed72b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn03fbc4, line 59
static void exec_36a8d1f5429f46db(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) + (uint16)(var10));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var15 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14);
	const uint16 var16 = ((uint16)(var11) - (uint16)(var15));
	*context.getParameter<uint16*>(56) = (uint16)var16;
}

// First occurrence: fn03fbc4, line 82
static void exec_03b1f02889f28b72(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) - (uint16)(var10));
	const uint32 var14 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	*context.getParameter<uint32*>(48) = (uint32)var14;
}

// First occurrence: fn044a0c, line 23
static void exec_adbb8b32501c7420(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: fn021568, line 241
static void exec_f8d9f52e2f42e219(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn01ec18, line 23
static void exec_61675874b1d26ecd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) >> (uint8)((var6) & 0x07));
	const uint8 var9 = ((uint8)(var7) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: fn01f3f8, line 86
static void exec_6a41476c984997df(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	const uint8 var9 = 1;
	const uint16 var10 = ((uint16)(var8) >> (uint16)((var9) & 0x0f));
	const int8 var11 = (uint8)var10;
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var14, (uint8)var11);
}

// First occurrence: fn01f3f8, line 87
static void exec_383571891ec307c4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint8 var7 = 1;
	const uint16 var8 = ((uint16)(var6) + (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const int8 var11 = (uint8)var10;
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var14, (uint8)var11);
}

// First occurrence: BlockerElement.DoDamage, line 162
static void exec_5269ddb105e4e4d8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) & (uint8)(var4));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 302
static void exec_4b858c61e8e7d8a2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(var7)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(56)));
	const uint8 var16 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var15);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var12) - (uint16)(var16)));
	const uint32 var18 = (uint32)*context.getParameter<uint32*>(64);
	const uint32 var20 = ((uint32)(var18) + (uint32)(context.getParameter<int64>(72)));
	const uint8 var21 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var20);
	context.writeValueStack<int16>(2, (int16)((int16)(var21) * (int16)(context.getParameter<int64>(80))));
	const uint32 var24 = (uint32)*context.getParameter<uint32*>(88);
	const uint32 var26 = ((uint32)(var24) + (uint32)(context.getParameter<int64>(96)));
	const uint8 var27 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var26);
	context.writeValueStack<uint8>(3, (uint8)(uint8)var27);
	context.moveValueStack(4);
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 302
static void exec_c9ce558d8dde9d50(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(-1, (int16)((int16)(context.readValueStack<int16>(-1)) * (int16)(context.getParameter<int64>())));
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.moveValueStack(1);
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 303
static void exec_c07010e8c1dc711b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(-1, (int16)((int16)(context.readValueStack<int16>(-1)) * (int16)(context.getParameter<int64>())));
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20));
	const uint32 var6 = ((uint32)(var4) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var8 = OpcodeExecUtils::safeDivide<uint32>((uint32)var6, (uint32)context.getParameter<int64>(32));
	const uint32 var10 = ((uint32)(var8) << (uint32)((context.getParameter<int64>(40)) & 0x1f));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) + (uint32)(var10)));
	context.moveValueStack(1);
}

// First occurrence: fn02c8b8, line 53
static void exec_acaf3d0f2ccec4b6(const RuntimeOpcodeContext context)
{
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) | (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn02c8b8, line 61
static void exec_ddf730209fd0c75c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(var0));
	const int16 var2 = (uint16)var1;
	*context.getParameter<uint16*>() = (uint16)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn02c8b8, line 64
static void exec_a7f8269e3d7abfcb(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn02c9e0, line 121
static void exec_3ca94e0aaf29118b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn02c9e0, line 122
static void exec_1b4d1448ca268615(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) != (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: PathSwapperInit, line 33
static void exec_3a45d6eecbe97079(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: PathSwapperBaseUpdateVertical, line 117
static void exec_cc695a53747bf4f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(context.getParameter<int64>(16))));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var8) - (uint16)(var12)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(56));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(64);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(72)));
	const uint16 var16 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var15);
	context.writeValueStack<uint16>(3, (uint16)((uint16)(var16) * (uint16)(context.getParameter<int64>(80))));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(88));
	context.moveValueStack(5);
}

// First occurrence: PathSwapperUpdateVertical, line 157
static void exec_dffded4dac2c4695(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	const uint8 var3 = ((uint8)(var1) == (uint8)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var3);
}

// First occurrence: PathSwapperUpdateVertical, line 161
static void exec_2c38be7c89b6e120(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) > (uint16)(var4));
	const uint8 var6 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 164
static void exec_8f661d821d80ccf5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) - (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3, (uint8)var0);
}

// First occurrence: PathSwapperUpdateVertical, line 168
static void exec_a869adcf8a22a75c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 168
static void exec_68cfa9fb176d272f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) >= (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 184
static void exec_b7eb9d292af4eb2f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) >> (uint8)((var5) & 0x07));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) & (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperBaseUpdateHorizontal, line 225
static void exec_7652070129954f14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(var7)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var11) - (uint16)(context.getParameter<int64>(48))));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(56);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(64)));
	const uint16 var16 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var15);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var16) * (uint16)(context.getParameter<int64>(72))));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(80));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(88));
	context.moveValueStack(5);
}

// First occurrence: fn084a48, line 19
static void exec_f46ca2b0f051c729(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn084a76, line 39
static void exec_c0acef8baed5c075(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn084ad2, line 78
static void exec_cd1ea6b62bf131f6(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) <= (int16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn02acdc, line 59
static void exec_08b77baff59ae3ab(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)context.getParameter<int64>());
}

// First occurrence: fn02a94c, line 27
static void exec_eaccd307fddb52b4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn02aa7e, line 111
static void exec_fcfbcdfec7e11030(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) >= (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn02aa7e, line 117
static void exec_8768b5c76aae673f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var3);
}

// First occurrence: fn02ac08, line 218
static void exec_376bfbb2729f0d03(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var2) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: AIZ_ForegroundDeco_shared, line 42
static void exec_71d5dfc02935e4dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var3);
}

// First occurrence: AIZ_ForegroundDeco_shared, line 44
static void exec_95c3b9c3155ffd62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var4 = ((uint32)(var1) - (uint32)(var2));
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(16)));
	const int16 var7 = (uint16)var6;
	const uint8 var8 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int16 var10 = ((int16)(var7) >> (int16)((var8) & 0x0f));
	const uint32 var12 = ((uint32)(var0) + (uint32)(var10));
	const int16 var13 = (uint16)var12;
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(28);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(36)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16, (uint16)var13);
}

// First occurrence: fn01f914, line 222
static void exec_d7bc3563c74c7c2a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) >> (uint16)((var2) & 0x0f));
	*context.getParameter<uint16*>(8) = (uint16)var3;
}

// First occurrence: fn01f914, line 225
static void exec_c2d042c68666c8f2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	*context.getParameter<uint16*>(20) = (uint16)var5;
}

// First occurrence: fn01f914, line 227
static void exec_def733bd605a7e71(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	const int16 var4 = ((uint16)(var2) << (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn01f914, line 229
static void exec_c6b24aaad1332cad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) >> (uint16)((context.getParameter<int64>(32)) & 0x0f));
	const int16 var10 = ((uint16)(var5) - (uint16)(var9));
	*context.getParameter<int16*>(40) = (uint16)var10;
}

// First occurrence: fn01f914, line 233
static void exec_ec3263e853406a16(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var1) >> (uint32)((var3) & 0x1f));
	const uint32 var6 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(8));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn02b8ee, line 168
static void exec_e7bea9177d10d897(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn02248a, line 123
static void exec_a4df2063da799736(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn02248a, line 124
static void exec_61034683f2126c7e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int32 var2 = ((int32)(var0) * (int32)(context.getParameter<int64>()));
	*context.getParameter<int32*>(8) = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn02248a, line 136
static void exec_8ba614eeafe2520a(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02248a, line 146
static void exec_981e98192d0389dd(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<int8>(0, (int8)((int8)(var0) > (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02248a, line 157
static void exec_079eb1f44f399454(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) >> (uint8)((context.getParameter<int64>(24)) & 0x07));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn02251e, line 167
static void exec_b0a94d75b883df57(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: AIZWaterfallRock.Init, line 36
static void exec_681465c5e2e9e86e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) & (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: AIZWaterfallRock.Init, line 39
static void exec_2a7896a8e460e2d0(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int8 var3 = (uint8)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: AIZWaterfall.Init, line 27
static void exec_80bce843b94c0fd6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: AIZWaterfall.Init, line 32
static void exec_5846366f0a2f2693(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var8) << (uint32)((var10) & 0x1f));
	const int16 var12 = (uint16)var11;
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15, (uint16)var12);
}

// First occurrence: AIZWaterfall.Update, line 43
static void exec_b85072736691e150(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) & (uint16)(var9));
	const int64 var11 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var10) == (uint16)(var11)));
	context.moveValueStack(1);
}

// First occurrence: AIZZipLine.Init, line 25
static void exec_85086355953f4c6f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var10 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(32)));
	const uint16 var12 = ((uint16)(var10) << (uint16)((context.getParameter<int64>(40)) & 0x0f));
	const uint16 var13 = ((uint16)(var3) + (uint16)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16, (uint16)var13);
}

// First occurrence: fn021e14, line 167
static void exec_62f7b4158e38c1da(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>()));
	const uint16 var3 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var2));
	*context.getParameter<uint16*>(8) = (uint16)var3;
	context.moveValueStack(-2);
}

// First occurrence: fn021f14, line 265
static void exec_2a2f6a7ddcb9616e(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((uint16)(context.readValueStack<int16>(-1)) << (uint16)((context.getParameter<int64>()) & 0x0f));
	*context.getParameter<int16*>(8) = (uint16)var1;
	context.moveValueStack(-1);
}

// First occurrence: AIZZipLine.BaseUpdate, line 399
static void exec_d9aab9a3493ddc37(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
}

// First occurrence: fn022040, line 438
static void exec_77ce6dfefe5ddd52(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var4);
}

// First occurrence: fn022040, line 439
static void exec_e11a5fa69cc3b08f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)context.getParameter<int64>());
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn022040, line 439
static void exec_76e0801f1dafe168(const RuntimeOpcodeContext context)
{
	const int16 var0 = ((uint16)(context.readValueStack<int16>(-2)) - (uint16)(context.readValueStack<int16>(-1)));
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>()) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn022040, line 440
static void exec_f5897c999f779a25(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((uint16)(context.readValueStack<int16>(-1)) + (uint16)(context.getParameter<int64>()));
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn0220c2, line 478
static void exec_c6e8ae42925a7caa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0220c2, line 480
static void exec_c0b0da5ab177ddba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const int16 var10 = ((uint16)(var8) << (uint16)((context.getParameter<int64>(32)) & 0x0f));
	*context.getParameter<int16*>(40) = (uint16)var10;
}

// First occurrence: fn0220c2, line 500
static void exec_97f9b63cec1cd3a5(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((uint16)(context.readValueStack<int16>(-1)) << (uint16)((context.getParameter<int64>()) & 0x0f));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn0221ec, line 543
static void exec_bd6d868bfda2bf7d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn02219e, line 570
static void exec_3fb7deb984fcee19(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn022258, line 603
static void exec_fbaaf23bbcf3728a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(12)) & 0x0f));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: fn022258, line 611
static void exec_f31a8c1c9f441e05(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) * (int16)(context.getParameter<int64>()));
	const int16 var3 = OpcodeExecUtils::safeDivide<int16>((int16)var1, (int16)context.getParameter<int64>(8));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn022258, line 613
static void exec_c4503572320d9ff8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)!var5);
	context.moveValueStack(1);
}

// First occurrence: fn01f3ca, line 36
static void exec_bdf5add5a1395795(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) + (uint16)(var5));
	*context.getParameter<uint16*>(16) = (uint16)var6;
}

// First occurrence: fn01ed26, line 18
static void exec_ef32ef9f86300601(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	const int16 var9 = (uint16)var8;
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn01ed26, line 25
static void exec_03a8d1c241588d2a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var5);
}

// First occurrence: fn01ed26, line 29
static void exec_9a44fe4881365568(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn01edec, line 115
static void exec_b0c683d093e3af59(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var4 = ((uint8)(var2) << (uint8)((var3) & 0x07));
	const uint8 var5 = (uint8)~var4;
	const uint8 var6 = ((uint8)(var1) & (uint8)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var6);
}

// First occurrence: fn01edec, line 139
static void exec_c864c32132074064(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) >= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn01edec, line 161
static void exec_5ef786253a7212de(const RuntimeOpcodeContext context)
{
	const uint8 var1 = *context.getParameter<uint8*>(8);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(24)));
	const uint8 var6 = ((uint8)(var2) << (uint8)((var5) & 0x07));
	const uint8 var7 = ((uint8)(var1) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var7);
}

// First occurrence: fn01eeec, line 191
static void exec_13a7fc99cab528e9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var7 = 1;
	const uint32 var8 = ((uint32)(var6) - (uint32)(var7));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn031164, line 20
static void exec_13218c67257948a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) != (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn031164, line 32
static void exec_b5e163316403665b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn0311c4, line 71
static void exec_e75ec7759d94ea02(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0311c4, line 81
static void exec_9110270710c7145e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const int16 var2 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)var0);
}

// First occurrence: fn031226, line 173
static void exec_e93274954263a00b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint16 var5 = ((uint16)(var3) == (uint16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: fn031226, line 174
static void exec_fedfadb1fe1700ef(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)(uint16)var3);
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: fn031226, line 176
static void exec_950ed8b79dde3749(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(20)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn03145a, line 265
static void exec_d6b7c694752026f6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint32 var12 = ((uint32)(var6) + (uint32)(var10));
	*context.getParameter<uint32*>(40) = (uint32)var12;
}

// First occurrence: fn031502, line 278
static void exec_ba1d6b37e5d28a94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn031580, line 313
static void exec_649dd3e6cf38febd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn03159e, line 335
static void exec_2484f7ddb4994240(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var4) + (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn03159e, line 336
static void exec_71760e9c36eb1bdf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) + (uint16)(var10));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn031626, line 385
static void exec_4a181226b45a2a1f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn03909c, line 36
static void exec_33c36d0a67dd0252(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	*context.getParameter<uint8*>(32) = (uint8)var8;
}

// First occurrence: fn0390c2, line 56
static void exec_f5aa148ea48f3040(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0));
	context.moveValueStack(2);
}

// First occurrence: fn0390c2, line 65
static void exec_23eec66f1899ab32(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var4);
}

// First occurrence: fn03931e, line 237
static void exec_82b1abf22b07f22b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn030580, line 39
static void exec_c2aae064d5f7f341(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn030580, line 40
static void exec_c0943b13cb61cfee(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)~context.getParameter<int64>(16);
	const uint8 var6 = ((uint8)(var3) & (uint8)(var5));
	const uint8 var8 = ((uint8)(var6) | (uint8)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn030580, line 50
static void exec_afb6953468d74e9d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var10 = ((uint16)(var8) << (uint16)((context.getParameter<int64>(32)) & 0x0f));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn03064e, line 139
static void exec_530a58db4caa3c6b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(8)));
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn03077e, line 188
static void exec_cc797f2749179beb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint8 var9 = *context.getParameter<uint8*>(32);
	const uint16 var11 = ((uint16)(var8) + (uint16)(var9));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var15 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14);
	const uint16 var16 = ((uint16)(var11) - (uint16)(var15));
	*context.getParameter<uint32*>(56) = (uint32)var16;
}

// First occurrence: fn03077e, line 201
static void exec_2f78211549cd4dea(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn030834, line 245
static void exec_67c813ed2d09ee20(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) <= (uint16)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var7);
}

// First occurrence: fn030834, line 248
static void exec_4b49ab9dca2c1dac(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn0308fa, line 330
static void exec_c0ef517413b3b8e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn030a38, line 447
static void exec_e5a9c95cbabd693e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) + (uint16)(var10));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var15 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14);
	const uint16 var16 = ((uint16)(var11) - (uint16)(var15));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(56), (uint16)var16);
}

// First occurrence: fn030a38, line 448
static void exec_4f904db451c60cf7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn030a38, line 450
static void exec_a3601c14c92357f7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var5 = ((uint16)(var0) - (uint16)(var4));
	*context.getParameter<uint16*>(20) = (uint16)var5;
}

// First occurrence: fn030b58, line 51
static void exec_cacaef5d23907972(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var7);
}

// First occurrence: fn032656, line 26
static void exec_48c2cb73ae1468bd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn032784, line 154
static void exec_ce74da45c38d92de(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(context.getParameter<int64>(24)));
	const uint8 var8 = ((uint8)(var6) | (uint8)(context.getParameter<int64>(32)));
	const uint8 var10 = ((uint8)(var8) | (uint8)(context.getParameter<int64>(40)));
	const uint8 var11 = (uint8)~var10;
	const uint8 var12 = ((uint8)(var3) & (uint8)(var11));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var12);
}

// First occurrence: fn032784, line 188
static void exec_d2611e5d4970288f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn038534, line 141
static void exec_ddd96c76e64a908d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	const uint8 var9 = 1;
	const uint8 var10 = ((uint8)(var8) & (uint8)(var9));
	*context.getParameter<uint8*>(32) = (uint8)var10;
}

// First occurrence: fn03857e, line 157
static void exec_aa3b5b33d5651c11(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var11 = 1;
	const uint32 var12 = ((uint32)(var9) + (uint32)(var11));
	*context.getParameter<uint32*>(32) = (uint32)var12;
}

// First occurrence: fn03857e, line 177
static void exec_fa9954df6d58015e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn025770, line 75
static void exec_40129f08d528deb8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = (uint8)*context.getParameter<uint8*>(16);
	const uint16 var7 = ((uint16)(var3) + (uint16)(var5));
	const uint16 var9 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(24)));
	const int64 var10 = 0;
	const uint16 var11 = ((uint16)(var9) != (uint16)(var10));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var11);
}

// First occurrence: fn0382ba, line 35
static void exec_3ab27c81db1470ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn03003c, line 117
static void exec_91cb364c109b5676(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn030338, line 345
static void exec_7acb00b7d7a895da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) - (uint16)(var5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: fn030338, line 346
static void exec_b3b2c73476fdab2e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(4);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) < (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn030338, line 346
static void exec_5aecc5a8d7bae082(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int8 var2 = 1;
	const uint16 var3 = ((uint16)(var1) + (uint16)(var2));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: fn030338, line 348
static void exec_baca72e816a4d833(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(4)));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: fn0340cc, line 47
static void exec_2ee54ebb31b3ec74(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn0341fa, line 105
static void exec_efa2504d51e0fc05(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const int8 var3 = (uint8)*context.getParameter<int8*>(16);
	const int64 var4 = 0;
	context.writeValueStack<int8>(2, (int8)((int8)(var3) < (int8)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn034728, line 61
static void exec_2fec4801e36fc9de(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn03438e, line 54
static void exec_94f7b87d97b4e4a8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) + (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn03438e, line 57
static void exec_c619693fe5ecb26f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn034c54, line 137
static void exec_109e087882d2e819(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var6 = 1;
	const uint16 var7 = ((uint16)(var5) & (uint16)(var6));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn034e6e, line 242
static void exec_d4b65c2c5bd60199(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn034f6a, line 336
static void exec_a95960ad1207aef4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn034fbc, line 416
static void exec_950fba109a99e8ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	const int16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn035202, line 535
static void exec_ee71b8b2e72a5e3f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var11 = ((uint16)(var9) - (uint16)(context.getParameter<int64>(32)));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: fn035202, line 550
static void exec_077a499a310a3fb3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint16 var11 = ((uint16)(var9) + (uint16)(context.getParameter<int64>(32)));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: fn03526a, line 620
static void exec_3aa5667969501d44(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn03555c, line 831
static void exec_da807e1aa5e93dc8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn035666, line 920
static void exec_6764a58aca6150bc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn035706, line 979
static void exec_35d35fc4dd331ba4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn035868, line 1074
static void exec_f4357d2d67f50a43(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var8 = ((uint32)(var2) + (uint32)(var6));
	const int16 var9 = (uint16)var8;
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn035868, line 1090
static void exec_7d8eda3bc97b6e63(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn025d9c, line 113
static void exec_233b60aab8f29bbb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	const uint8 var10 = ((uint8)(var8) & (uint8)(context.getParameter<int64>(32)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var13, (uint8)var10);
}

// First occurrence: fn025ea6, line 136
static void exec_63cb475cdea4112e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = (uint32)-(signed)context.getParameter<int64>(8);
	const int32 var4 = ((int32)(var0) * (int32)(var3));
	const int32 var6 = ((int32)(var4) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<int32*>(24) = (uint32)var6;
}

// First occurrence: fn033c74, line 18
static void exec_21cddcf373f907eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn033cac, line 82
static void exec_2b534d001d460668(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) - (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
}

// First occurrence: fn033cac, line 191
static void exec_4fd7d0042c9c2c56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn033cac, line 198
static void exec_cc4d5dda67320cb6(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn032a78, line 18
static void exec_9a744e2374c74972(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn034800, line 41
static void exec_71d6ee7231d66355(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)(uint16)var3);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int64 var8 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var7) & (uint8)(var8)));
	context.moveValueStack(2);
}

// First occurrence: fn034900, line 86
static void exec_b8db42e68a41455e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = (uint8)-(signed)var0;
	*context.getParameter<uint8*>() = (uint8)var1;
}

// First occurrence: fn034b22, line 284
static void exec_3816fd83c7337109(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = OpcodeExecUtils::safeDivide<uint32>((uint32)var0, (uint32)context.getParameter<int64>(8));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: fn034b22, line 285
static void exec_43c1d4f2ec11cf96(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) % (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var3);
}

// First occurrence: fn034b22, line 291
static void exec_28697d92e0699c5f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(20)));
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var8);
}

// First occurrence: fn034b22, line 304
static void exec_4555c21a797dd229(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) >> (uint16)((var2) & 0x0f));
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(8));
	const uint16 var6 = ((uint16)(var3) * (uint16)(var4));
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var7);
}

// First occurrence: fn034b22, line 307
static void exec_736c706112a7d5c5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn034b22, line 308
static void exec_ade88cb7e80958d6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(4);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn034b22, line 313
static void exec_4d92a2ac10fb465b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(4));
	const int16 var4 = ((int16)(var1) * (int16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var5);
}

// First occurrence: fn034b22, line 315
static void exec_1ae6329b540a5b0b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var5);
}

// First occurrence: fn034b22, line 317
static void exec_ea3c7e36e6ccf1d3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn031704, line 37
static void exec_e46c4580d7852b8a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn031754, line 71
static void exec_8c05a859b33b2925(const RuntimeOpcodeContext context)
{
	const int16 var1 = ((int16)(context.readValueStack<int16>(-1)) >> (int16)((context.getParameter<int64>()) & 0x0f));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn03181e, line 126
static void exec_7ddee0ab411bc0d0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: fn03181e, line 129
static void exec_9430e534b47f44be(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	const int16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var6);
}

// First occurrence: fn033392, line 57
static void exec_55ea84e1c75e770a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const int16 var14 = ((uint16)(var9) - (uint16)(var13));
	const int16 var16 = ((uint16)(var14) + (uint16)(context.getParameter<int64>(48)));
	*context.getParameter<uint16*>(56) = (uint16)var16;
}

// First occurrence: fn033392, line 61
static void exec_bbea4f073a5103fc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const uint16 var14 = ((uint16)(var9) - (uint16)(var13));
	const uint16 var15 = (uint16)*context.getParameter<uint16*>(48);
	const uint16 var16 = ((uint16)(var14) - (uint16)(var15));
	*context.getParameter<uint16*>(56) = (uint16)var16;
}

// First occurrence: fn033392, line 68
static void exec_017b7325321a25c9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) - (uint16)(var5));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn033392, line 122
static void exec_8cda949cff7dc33f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var1) - (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn033392, line 129
static void exec_3ae408e549ba7e3d(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int8 var3 = (uint8)var2;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) >= (int8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn033392, line 156
static void exec_6a799de11d6759b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) + (uint16)(var5));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(32)));
	const uint16 var9 = ((uint16)(var0) + (uint16)(var8));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn033392, line 165
static void exec_27bf780e707dce51(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0335c4, line 209
static void exec_6b7bf3bd25f7d383(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const int16 var14 = ((uint16)(var9) - (uint16)(var13));
	const int16 var16 = ((uint16)(var14) + (uint16)(context.getParameter<int64>(48)));
	*context.getParameter<uint16*>(56) = (uint16)var16;
}

// First occurrence: fn0335c4, line 213
static void exec_6d42d55c27b79e2b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const uint16 var14 = ((uint16)(var9) - (uint16)(var13));
	const uint16 var15 = (uint16)*context.getParameter<uint16*>(48);
	const uint16 var16 = ((uint16)(var14) + (uint16)(var15));
	*context.getParameter<uint16*>(56) = (uint16)var16;
}

// First occurrence: fn0335c4, line 274
static void exec_33119a3cb85012f0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var1) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn0335c4, line 309
static void exec_54eeef503b286afd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var2) + (uint16)(var6));
	const uint16 var9 = ((uint16)(var7) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var9;
}

// First occurrence: fn0335c4, line 318
static void exec_ab08733bf293b412(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: CNZBarrel.Init, line 25
static void exec_df107ab16fa2372e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: CNZBarrel.Init, line 37
static void exec_76411b03f53b5291(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) - (uint8)(context.getParameter<int64>(24)));
	const uint8 var9 = ((uint8)(var7) & (uint8)(context.getParameter<int64>(32)));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: fn032208, line 151
static void exec_83317d1ae80cd34b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) <= (int16)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn032208, line 151
static void exec_648cdc70e4766465(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int16 var5 = ((int16)(var3) >= (int16)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn032208, line 187
static void exec_738ec66df1690cb1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)-(signed)var3;
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn0324c0, line 400
static void exec_5fd2994a6be40802(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn032990, line 18
static void exec_235e2c2f05e75e86(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
}

// First occurrence: fn0329b8, line 47
static void exec_74f63ceab06968a7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	const uint16 var13 = ((uint16)(var8) + (uint16)(var12));
	*context.getParameter<uint16*>(48) = (uint16)var13;
}

// First occurrence: fn03192c, line 106
static void exec_8a09132320430252(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn03192c, line 108
static void exec_d92711ff2813f695(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn0319f4, line 143
static void exec_c5db953a033ca602(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) == (uint8)(var2)));
	context.moveValueStack(1);
}

// First occurrence: fn031b18, line 246
static void exec_90966c771c3330ca(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint8>(3, (uint8)(uint8)*context.getParameter<uint8*>(24));
	context.moveValueStack(4);
}

// First occurrence: fn031e24, line 61
static void exec_54b4616e61a0939d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn031e96, line 113
static void exec_23f7345228878b0a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	const uint16 var13 = ((uint16)(var8) + (uint16)(var12));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), (uint16)var13);
}

// First occurrence: fn031e96, line 114
static void exec_76fcf47dd1cd05b6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint8 var9 = *context.getParameter<uint8*>(32);
	const uint16 var11 = ((uint16)(var8) + (uint16)(var9));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var15 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14);
	const uint16 var16 = ((uint16)(var11) + (uint16)(var15));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(56), (uint16)var16);
}

// First occurrence: fn031e96, line 115
static void exec_4f751db451aef3af(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn031e96, line 130
static void exec_863c058d4c1d5dfe(const RuntimeOpcodeContext context)
{
	const uint16 var0 = 1;
	const uint16 var1 = (uint16)-(signed)var0;
	const int16 var2 = (uint16)*context.getParameter<int16*>();
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: fn0330c8, line 22
static void exec_9ed205e303590de2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	const int64 var9 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var8) == (uint8)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn03318e, line 90
static void exec_01a071fc3d33846a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn033272, line 179
static void exec_51b9064b787bba65(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(32)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn031c0a, line 101
static void exec_7b787d6d2415afaa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)-(signed)var3;
	const int16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn030e8c, line 94
static void exec_86f35a6d4fc115ee(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn030e8c, line 97
static void exec_933c4997ccb9e183(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) == (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn030e8c, line 101
static void exec_719df8d5cee1e472(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn03385e, line 52
static void exec_81ff501b924c403e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	const uint16 var13 = ((uint16)(var8) + (uint16)(var12));
	const uint16 var15 = ((uint16)(var13) + (uint16)(context.getParameter<int64>(48)));
	*context.getParameter<uint16*>(56) = (uint16)var15;
}

// First occurrence: fn033ade, line 265
static void exec_bb9c9944f50787d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) & (uint8)(context.getParameter<int64>(8)));
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0328e8, line 47
static void exec_2a7c24cb1514705e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	const int16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn0328e8, line 57
static void exec_156c214d469cc764(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var4 = OpcodeExecUtils::safeDivide<uint16>((uint16)var2, (uint16)context.getParameter<int64>(12));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var4);
}

// First occurrence: fn0328e8, line 58
static void exec_98976d0ae371bc4b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const int16 var2 = ((int16)(var0) * (int16)(var1));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	const int16 var5 = ((int16)(var3) * (int16)(var4));
	const int16 var6 = ((uint16)(var2) + (uint16)(var5));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var8 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const uint16 var9 = ((uint16)(var7) * (uint16)(var8));
	const int16 var10 = ((int16)(var6) < (int16)(var9));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var10);
}

// First occurrence: fn0328e8, line 101
static void exec_bc435c0888655f84(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(0, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: fn08a488, line 64
static void exec_580392ccb6f7eb57(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var4 = ((uint8)(var2) * (uint8)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
	context.moveValueStack(-1);
}

// First occurrence: fn08b432, line 122
static void exec_7b4f0e23eb2c436b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(context.getParameter<int64>()));
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: fn08abb0, line 50
static void exec_3ea16bdf1f7eeaff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn08abb0, line 57
static void exec_8a051083b073bb8b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: fn08b4ec, line 53
static void exec_57fc47bc1644e921(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn08a280, line 61
static void exec_837938fae27216e0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) & (uint16)(var4));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: ICZSnow.Init2, line 25
static void exec_b83bd4534f2d651c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = (uint32)~context.getParameter<int64>(16);
	const uint32 var7 = ((uint32)(var3) & (uint32)(var6));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn08b7a0, line 130
static void exec_291e316a151a8f2a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var6);
}

// First occurrence: fn08b660, line 27
static void exec_574ae310cb6a400b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) + (uint8)(var1));
	*context.getParameter<uint8*>(8) = (uint8)var2;
}

// First occurrence: fn08b6ae, line 53
static void exec_e47e85fa10bfe2ef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-2)) % (uint32)(var0));
	const int16 var2 = (uint16)var1;
	*context.getParameter<uint16*>() = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn08b0b0, line 109
static void exec_b4a0ee0b0b02da5d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	const uint32 var4 = ((uint32)(var0) & (uint32)(var3));
	const int64 var5 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var4) == (uint32)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn08adca, line 268
static void exec_a33a9646c77adffc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) < (uint16)(var9));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), (uint8)var10);
}

// First occurrence: fn08ae0c, line 331
static void exec_f3f7b69764f00e79(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var3 = (uint16)-(signed)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn08b950, line 70
static void exec_bf99d296d533eab7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn08ba1c, line 138
static void exec_68e9ddc26b9ecfea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint32 var5 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = ((uint32)(var0) + (uint32)(var5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var6);
}

// First occurrence: fn08ba1c, line 151
static void exec_c823c78007493411(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn08ba7e, line 198
static void exec_e373588434891125(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var4 = ((uint16)(var0) - (uint16)(var3));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn0260d2, line 156
static void exec_6b969f1a30c81a6e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var4) == (uint8)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn029620, line 106
static void exec_14e6c2437b7deb38(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)~context.getParameter<int64>(16);
	const uint16 var6 = ((uint16)(var3) & (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: fn029620, line 118
static void exec_fc488589fb756721(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = 1;
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(var5));
	const uint8 var7 = (uint8)~var6;
	const uint8 var8 = ((uint8)(var3) & (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: fn0296d4, line 133
static void exec_3a6cee5aba21add3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) <= (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0297a2, line 227
static void exec_f5d21da7557369ae(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var7;
}

// First occurrence: CupElevator.Init, line 71
static void exec_b559e80a963e433b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) * (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn026b46, line 197
static void exec_bd18cad389ebae49(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn02c3e8, line 116
static void exec_62524e55406e274e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var3 = ((uint8)(var1) + (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var3;
}

// First occurrence: fn0263dc, line 29
static void exec_ce6c28af49621bb5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var8 = ((uint32)(var6) & (uint32)(context.getParameter<int64>(24)));
	const int8 var9 = (uint8)var8;
	*context.getParameter<uint8*>(32) = (uint8)var9;
}

// First occurrence: fn029020, line 37
static void exec_7da1dfc1b35e728f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint8 var3 = 1;
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	const int8 var5 = (uint8)var4;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn029086, line 49
static void exec_fbd003cbded5340d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint16 var5 = ((uint16)(var3) == (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const int64 var10 = 0;
	const uint8 var11 = ((uint8)(var9) == (uint8)(var10));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var11)));
	context.moveValueStack(1);
}

// First occurrence: fn029338, line 25
static void exec_37bb1620fbc5196d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const int16 var10 = ((uint16)(var7) & (uint16)(context.getParameter<int64>(32)));
	const int16 var12 = ((int16)(var10) * (int16)(context.getParameter<int64>(40)));
	const uint16 var13 = ((uint16)(var3) + (uint16)(var12));
	const uint32 var14 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16, (uint16)var13);
}

// First occurrence: fn029338, line 26
static void exec_61de26c8a1018c54(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) >> (uint16)((var5) & 0x0f));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn024e3c, line 25
static void exec_df7b2c11e142bd47(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn024e3c, line 29
static void exec_3baf9239876a37d6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var8 = ((uint32)(var6) & (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn024e3c, line 41
static void exec_72d4f99219079195(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint32 var9 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn02503e, line 158
static void exec_f782a1782169bc41(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: fn0275f2, line 223
static void exec_f0636a90cb5a06cc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint16 var7 = ((uint16)(var3) + (uint16)(var5));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn0275f2, line 226
static void exec_0b16ef91b0a5001e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var5) + (uint16)(var9));
	*context.getParameter<uint16*>(48) = (uint16)var10;
}

// First occurrence: fn0275f2, line 232
static void exec_31f3e0a2a10e61aa(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint32 var10 = ((uint32)(var3) + (uint32)(var8));
	*context.getParameter<uint32*>(32) = (uint32)var10;
}

// First occurrence: fn02682e, line 301
static void exec_abfbd1a063aed251(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int16 var3 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn026338, line 233
static void exec_fc173bb3059cba13(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: fn029dec, line 131
static void exec_cdeb5081ff5ca921(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn029eb2, line 207
static void exec_8dcbb900da64b14d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn029fcc, line 317
static void exec_6561d4211b21af60(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = OpcodeExecUtils::safeDivide<uint16>((uint16)var7, (uint16)context.getParameter<int64>(32));
	const int16 var10 = 1;
	const int16 var11 = ((uint16)(var9) - (uint16)(var10));
	const uint16 var12 = ((uint16)(var3) * (uint16)(var11));
	const int16 var14 = OpcodeExecUtils::safeDivide<int16>((int16)var12, (int16)context.getParameter<int64>(40));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(48), (uint16)var14);
}

// First occurrence: fn029fcc, line 318
static void exec_cb5f8759c8b3f556(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const int16 var6 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const int16 var7 = ((uint16)(var5) - (uint16)(var6));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: fn02a106, line 432
static void exec_578718a6a2e0dcc4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) - (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn02a106, line 458
static void exec_aaca5e45aab259e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var5) - (uint16)(var9));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: fn01de36, line 545
static void exec_389812ffc48495e0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn01de36, line 551
static void exec_24a73524ff275b38(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var4) - (uint16)(var8));
	const uint16 var10 = ((uint16)(var3) - (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn01de36, line 566
static void exec_454dc22a41d9c695(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn025d2c, line 67
static void exec_8f7abd07a89d7a14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var4 = ((uint8)(var2) << (uint8)((var3) & 0x07));
	const uint8 var5 = ((uint8)(var1) ^ (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var5);
}

// First occurrence: fn03e8a2, line 53
static void exec_3f0e5a151d9e9434(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) + (uint8)(var0));
	*context.getParameter<uint8*>() = (uint8)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn03e37e, line 96
static void exec_6e4993262d448ed5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint16 var9 = 1;
	const uint16 var10 = ((uint16)(var8) >> (uint16)((var9) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn03e37e, line 107
static void exec_c4bbd5aff2313a6a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var2 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var3 = (uint16)var2;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn03e37e, line 109
static void exec_a55edca1a621bca3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn03e37e, line 135
static void exec_96e99ca4f73d88cf(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	const uint16 var4 = ((uint16)(var2) == (uint16)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: fn03e37e, line 172
static void exec_784bb938abd333b0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var9 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn03e472, line 186
static void exec_25725439d5d727fe(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) - (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn03e472, line 209
static void exec_b2b0d4c864f577d7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var3);
}

// First occurrence: fn03e472, line 213
static void exec_3579cbe0f71a98e8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var6);
}

// First occurrence: fn03e508, line 261
static void exec_ef22387e84ae5c42(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)~context.getParameter<int64>(8);
	const uint16 var3 = ((uint16)(var0) & (uint16)(var2));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn03ed6e, line 108
static void exec_7e59086534f58c23(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const int16 var5 = ((int16)(var3) >> (int16)((var4) & 0x0f));
	const int16 var6 = ((uint16)(var1) + (uint16)(var5));
	*context.getParameter<uint16*>(16) = (uint16)var6;
}

// First occurrence: fn03ed6e, line 160
static void exec_a31989771b1d4b73(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) | (uint8)(var7));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var8);
}

// First occurrence: fn03ed6e, line 199
static void exec_62f6eea345fee514(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	context.writeValueStack<int16>(0, (int16)((int16)(var1) >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn03efba, line 255
static void exec_ef52e58950fe87d2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 81
static void exec_f4ddd1808850e79d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(40)));
	const uint16 var9 = ((uint16)(var0) + (uint16)(var8));
	*context.getParameter<uint16*>(48) = (uint16)var9;
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 85
static void exec_a29c6d8efe67147b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var4;
	const uint32 var6 = ((uint32)(var4) - (uint32)(context.getParameter<int64>(40)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var1) - (uint16)(var7));
	const uint16 var9 = ((uint16)(var0) + (uint16)(var8));
	*context.getParameter<uint16*>(48) = (uint16)var9;
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 115
static void exec_98a8fe24be15a945(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: MHZSingleLeaf.Type1, line 161
static void exec_031aae66cee748ee(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) * (uint16)(context.getParameter<int64>(32)));
	const int16 var10 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn03f6a6, line 205
static void exec_acfb037e783581ce(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) & (uint8)(var8));
	const uint8 var10 = ((uint8)(var3) | (uint8)(var9));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var10);
}

// First occurrence: fn03ea56, line 35
static void exec_f4f01956544810ca(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var0);
}

// First occurrence: fn03eb26, line 97
static void exec_c3cf3cf0bf32ccd6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) > (uint8)(var4));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn03ec66, line 257
static void exec_5dafad914d002c67(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var1 = 1;
	const int32 var2 = ((uint32)(var0) << (uint32)((var1) & 0x1f));
	*context.getParameter<int32*>(8) = (uint32)var2;
}

// First occurrence: fn0226b0, line 100
static void exec_b7f45cc5be3551d0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn02291a, line 350
static void exec_17d6e499d2f07bc0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(12)) & 0x0f));
	*context.getParameter<uint16*>(20) = (uint16)var5;
}

// First occurrence: fn02291a, line 363
static void exec_c638a962997fb763(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn022a5c, line 428
static void exec_bddd2efe07103224(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<int16*>(12) = (uint16)var4;
}

// First occurrence: fn022a5c, line 436
static void exec_d3993e301b672808(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: fn022a5c, line 437
static void exec_033b3a39f31f85ef(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((int16)(var2) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: fn022a5c, line 443
static void exec_39fb0835cec1fe3d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var2 = ((int16)(var0) * (int16)(context.getParameter<int64>(4)));
	const int16 var4 = OpcodeExecUtils::safeDivide<int16>((int16)var2, (int16)context.getParameter<int64>(12));
	*context.getParameter<int16*>(20) = (uint16)var4;
}

// First occurrence: fn022a5c, line 446
static void exec_beee051f294e218a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const int16 var6 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24));
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(28);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(36)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn03f0d8, line 80
static void exec_d15a0fc953443b61(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) >= (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn03f11c, line 122
static void exec_afd8eeb6dbfc7c79(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn089dee, line 278
static void exec_2ce704f0aca5a92e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn03b488, line 166
static void exec_0b670afd5af7e71a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn03cc8a, line 24
static void exec_23d0829b5018cd0c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var5);
}

// First occurrence: fn03cc8a, line 30
static void exec_7e94f55708051ca7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	*context.getParameter<uint32*>(40) = (uint32)var8;
	const uint32 var10 = ((uint32)(var8) - (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var5);
}

// First occurrence: fn03c25c, line 24
static void exec_de8322a4fbbf333a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn03d4c2, line 171
static void exec_28e8363521b861c4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>()) & 0x1f));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn03d4c2, line 203
static void exec_eff8af10f59790dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) != (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: fn03a7cc, line 16
static void exec_d9c4045f9f742b9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn03a7cc, line 31
static void exec_6a94a79a7f7b4c77(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const int16 var8 = ((uint16)(var6) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn03a84c, line 55
static void exec_aaa40a0471abafad(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) == (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const int64 var10 = 0;
	const uint16 var11 = ((uint16)(var9) == (uint16)(var10));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var11)));
	context.moveValueStack(1);
}

// First occurrence: fn03aa7e, line 273
static void exec_2c5cbbd5479756ef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn03aa7e, line 311
static void exec_77efe9b467e3e8e3(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<int16*>(16) = (uint16)var2;
}

// First occurrence: fn03ac48, line 400
static void exec_1f3a4caac9e5c11a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn03ac86, line 459
static void exec_291bac5b40b115fe(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = (uint16)*context.getParameter<uint16*>(24);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	const uint16 var12 = ((uint16)(var7) - (uint16)(var11));
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15, (uint16)var12);
}

// First occurrence: fn03c462, line 23
static void exec_108bc097fb1d88e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var10 = ((uint16)(var8) * (uint16)(context.getParameter<int64>(32)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn03c534, line 75
static void exec_59ae7555dccd2e63(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) + (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn03c34c, line 16
static void exec_d0bf00356c07e242(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn03a63a, line 76
static void exec_25cecc73446f5a58(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var2 = (uint16)var0;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn03a6a4, line 146
static void exec_10e4dfb7ef758a26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn03a6d0, line 180
static void exec_b24782d62ccdf340(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn03bc92, line 82
static void exec_7388ef48a5fdde8f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn03bc92, line 96
static void exec_aa1424a6d251b033(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var5 = 1;
	const int16 var6 = ((int16)(var4) >> (int16)((var5) & 0x0f));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn03d11e, line 69
static void exec_52fd67477a4622f3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const int8 var8 = (uint8)var7;
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn03d1b2, line 102
static void exec_7a74107d135fcced(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), (uint16)var5);
}

// First occurrence: fn03d278, line 186
static void exec_eddd253b747d9f14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) == (uint32)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn039f7e, line 56
static void exec_0482edd420d5fa5e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const uint8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) & (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: fn039f7e, line 79
static void exec_ece3211a1d665773(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	const int16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn03a23a, line 16
static void exec_8c7f81af5ad5dd7b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn03a270, line 86
static void exec_e445c37b20272f9c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) == (uint8)(var6));
	const uint16 var8 = (uint16)*context.getParameter<uint16*>(16);
	const int64 var9 = 0;
	const uint16 var10 = ((uint16)(var8) == (uint16)(var9));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) != (uint8)(var10)));
	context.moveValueStack(1);
}

// First occurrence: fn03a314, line 143
static void exec_19e019396a67a409(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var7);
}

// First occurrence: fn03a314, line 158
static void exec_be9b4f8ee89e2f62(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const int8 var9 = (uint8)*context.getParameter<int8*>(32);
	const uint16 var11 = ((uint16)(var8) + (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn03a480, line 245
static void exec_e487288fab1f79ab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var4) + (uint16)(var8));
	const uint16 var10 = ((uint16)(var0) + (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn03a480, line 251
static void exec_8c38dbf361b40098(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var1) >> (uint32)((var3) & 0x1f));
	const uint32 var6 = ((uint32)(var4) & (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn03bab2, line 24
static void exec_0d7511cff1609b32(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var11 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10);
	const uint16 var14 = ((uint16)(var11) & (uint16)(context.getParameter<int64>(40)));
	const uint16 var16 = ((uint16)(var14) >> (uint16)((context.getParameter<int64>(48)) & 0x0f));
	const uint16 var17 = ((uint16)(var7) * (uint16)(var16));
	const uint32 var18 = (uint32)*context.getParameter<uint32*>(56);
	const uint32 var20 = ((uint32)(var18) + (uint32)(context.getParameter<int64>(64)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var20, (uint16)var17);
}

// First occurrence: fn03c1ee, line 248
static void exec_7036d0992d130340(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	const uint8 var5 = ((uint8)(var3) % (uint8)(context.getParameter<int64>(8)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var5);
}

// First occurrence: fn03c1ee, line 249
static void exec_e66613b10d12bab3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn041be0, line 56
static void exec_592fcf57b5bc2612(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var3) - (uint16)(var7)));
	const int8 var8 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(40));
	context.writeValueStack<int8>(3, (int8)(uint8)-(signed)var8);
	context.writeValueStack<int8>(4, (int8)(uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(44)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(5);
}

// First occurrence: fn040e5c, line 21
static void exec_97e69f4ce0977609(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const int16 var8 = ((int16)(var6) * (int16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn040ec4, line 45
static void exec_dea6f232f7d0c4f9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(var0) | (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: fn040ec4, line 47
static void exec_d7d86279d6bea629(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) == (uint8)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const int64 var7 = 0;
	const uint16 var8 = ((uint16)(var6) == (uint16)(var7));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) != (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn040f52, line 119
static void exec_5afafaf329f5073c(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 0;
	const int16 var2 = ((int16)(var0) <= (int16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: fn040f52, line 180
static void exec_a11963eaee4ab9d0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const int16 var10 = ((uint16)(var8) - (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: fn041176, line 35
static void exec_fa6373f68054516c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(24)));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var5) * (uint8)(context.getParameter<int64>(32))));
	context.moveValueStack(2);
}

// First occurrence: fn041288, line 121
static void exec_56a5b13fb79a67ee(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn01d106, line 31
static void exec_fcddfe4b45d63870(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn040474, line 57
static void exec_a2cc00c59c0076d0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var6 = ((uint8)(context.getParameter<int64>(16)) | (uint8)(context.getParameter<int64>(24)));
	const uint8 var8 = ((uint8)(var6) | (uint8)(context.getParameter<int64>(32)));
	const uint8 var9 = ((uint8)(var3) | (uint8)(var8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var9);
}

// First occurrence: fn040654, line 134
static void exec_41856b2aa5c9a69a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) <= (uint16)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: fn040654, line 138
static void exec_e9c360d1f32a6d74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) >= (uint16)(var7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var8);
}

// First occurrence: fn0406e4, line 201
static void exec_91de08efda3719ea(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int64 var1 = 1;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) << (uint32)((var2) & 0x1f));
	const uint32 var4 = ((uint32)(var0) & (uint32)(var3));
	const int64 var5 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var4) == (uint32)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn0406e4, line 222
static void exec_258919738d23e7ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: fn0406e4, line 226
static void exec_fab2f0994f85a9e1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(20)));
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	*context.getParameter<uint16*>(28) = (uint16)var8;
}

// First occurrence: fn04187e, line 26
static void exec_2e9f62dacc9ac4c1(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn0419fa, line 172
static void exec_9da6fbd09e6f39e2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) < (uint16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn0419fa, line 173
static void exec_3b907014647a4283(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) == (uint8)(var6));
	const uint8 var8 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn0419fa, line 178
static void exec_ce0d68a862341dff(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int64 var5 = 1;
	const uint8 var6 = ((uint8)(var4) & (uint8)(var5));
	const int64 var7 = 0;
	const uint8 var8 = ((uint8)(var6) != (uint8)(var7));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn0419fa, line 187
static void exec_1a4f14161a8c8a3e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)context.getParameter<int64>(16));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var7) + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(40));
	context.moveValueStack(2);
}

// First occurrence: fn0419fa, line 193
static void exec_9568a49760bf570f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) % (uint16)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) == (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn041aa8, line 278
static void exec_d42b52acccba2d64(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn0400f0, line 38
static void exec_ffb1b3f02b552677(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var9 = (uint16)*context.getParameter<uint16*>(32);
	const uint16 var10 = ((uint16)(var8) + (uint16)(var9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), (uint16)var10);
}

// First occurrence: fn041cc2, line 30
static void exec_7e7cbd60343b2999(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn041e6a, line 167
static void exec_c6c26abe01a65c2c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn0569ba, line 185
static void exec_771d455c9fa2e251(const RuntimeOpcodeContext context)
{
	const int16 var0 = swapBytes16(*context.getParameter<int16*>());
	const int16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)-(signed)var2;
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), (uint16)var3);
}

// First occurrence: fn03fd4e, line 107
static void exec_5c44696175920cb1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	context.writeValueStack<uint16>(0, (uint16)(uint16)var2);
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const int64 var7 = 0;
	context.writeValueStack<int16>(1, (int16)((int16)(var6) < (int16)(var7)));
	context.moveValueStack(2);
}

// First occurrence: fn03fd4e, line 107
static void exec_5622e3dce5e8fcc6(const RuntimeOpcodeContext context)
{
	const int64 var0 = 0;
	const int64 var1 = ((uint64)(context.readValueStack<int64>(-1)) != (uint64)(var0));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn03fd4e, line 111
static void exec_7d56727c406a5c24(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const int16 var7 = OpcodeExecUtils::safeDivide<int16>((int16)var5, (int16)context.getParameter<int64>(24));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn03fe70, line 216
static void exec_f053ff6c4afbef28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 1;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) & (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn040c2a, line 136
static void exec_a1ae8cb524b84078(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) == (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn040c2a, line 139
static void exec_5c5e9e9607840060(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)!var0;
	context.writeValueStack<uint8>(0, (uint8)(uint8)var1);
	context.moveValueStack(1);
}

// First occurrence: fn040786, line 39
static void exec_3c40d16dc758d5f7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) - (uint32)(var5));
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn040878, line 110
static void exec_d18d6cc7c2fbd29d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn040a08, line 215
static void exec_6344673df663c2a1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int32 var1 = (uint32)*context.getParameter<int32*>(8);
	const int32 var3 = ((uint32)(var1) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var4 = ((uint32)(var0) + (uint32)(var3));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn040a08, line 218
static void exec_76b7114faf2f558d(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)var0, (int32)var1);
	*context.getParameter<int32*>(16) = (uint32)var3;
}

// First occurrence: fn040a08, line 235
static void exec_7faaf1a4373f17c7(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn040a08, line 263
static void exec_094533ff737368c8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint16 var4 = ((uint16)(var0) - (uint16)(var2));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var4);
}

// First occurrence: fn04154c, line 195
static void exec_dcf9f55809b9870b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var0));
	*context.getParameter<uint16*>() = (uint16)var1;
	context.moveValueStack(-2);
}

// First occurrence: SOZZipLine.resetJumpsCounter, line 31
static void exec_639a40b2c67ff8d8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var5);
}

// First occurrence: fn04aa94, line 131
static void exec_11f8b49b05c29522(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var6) < (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn04aac8, line 159
static void exec_73faeec1d5031a33(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int64 var3 = 0;
	const uint8 var4 = ((uint8)(var2) != (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: fn04aac8, line 225
static void exec_45d323704fd79235(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(12)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn04ab6e, line 270
static void exec_dbac943bf0f52cc8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) + (uint16)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var9);
}

// First occurrence: fn04ad7a, line 525
static void exec_b6ce2de83fe5d036(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn04ad7a, line 529
static void exec_f38faaa56ad0dbf6(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const int16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn04ad7a, line 564
static void exec_62fd687a9c3248a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var5);
}

// First occurrence: fn04ad7a, line 570
static void exec_2b10f1dcca366184(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) >> (uint8)((context.getParameter<int64>(24)) & 0x07));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn04ad7a, line 572
static void exec_611858e4641c01a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<int16*>(24) = (uint16)var5;
}

// First occurrence: fn04ae92, line 624
static void exec_44a636f9c9dc46bc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn04aee0, line 636
static void exec_0d9069cdbcddd46f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn04af80, line 716
static void exec_d8f798ebcfd2bf7d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) != (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn04af80, line 722
static void exec_56ccb48f7ff28e00(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(24)));
	const uint32 var10 = ((uint32)(var7) >> (uint32)((context.getParameter<int64>(32)) & 0x1f));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn04af80, line 733
static void exec_2a0e8089dd7554c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) << (uint16)((context.getParameter<int64>(32)) & 0x0f));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn025924, line 121
static void exec_83dbeb0e4b44dc76(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) - (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn04a644, line 42
static void exec_dcb362b4801a6ba4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn04a644, line 50
static void exec_72ad32ad34bbe4eb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	const uint16 var9 = ((uint16)(var4) + (uint16)(var8));
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn04a644, line 51
static void exec_18da22430353f306(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	const uint16 var11 = ((uint16)(var6) + (uint16)(var10));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14, (uint16)var11);
}

// First occurrence: fn04a818, line 187
static void exec_248eaa9095e325f1(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var3 = ((int32)(var0) % (int32)(var1));
	const int16 var4 = (uint16)var3;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn039c50, line 24
static void exec_d71843a6fe7d775d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var10 = ((uint16)(var8) + (uint16)(context.getParameter<int64>(32)));
	*context.getParameter<uint16*>(40) = (uint16)var10;
}

// First occurrence: fn0426b0, line 156
static void exec_2404ee15a6c628c3(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<int32*>(24) = (uint32)var5;
}

// First occurrence: fn079f14, line 328
static void exec_b8167c966b7de6f3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn079f14, line 329
static void exec_4d3c9b094adc35bb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn079f30, line 341
static void exec_71258c07dd3fc6d5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var6 = 1;
	const uint16 var7 = ((uint16)(var5) >> (uint16)((var6) & 0x0f));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn079f30, line 342
static void exec_91313a7ffbb9f828(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint32 var7 = ((uint32)(context.getParameter<int64>()) - (uint32)(var5));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn07a07c, line 414
static void exec_2bbbb4ff80bfc0be(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var0) + (uint16)(var6));
	*context.getParameter<uint16*>(24) = (uint16)var8;
}

// First occurrence: fn043b96, line 49
static void exec_2d50c12088a5ebc2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn0448a8, line 67
static void exec_e41aad70303f0252(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const int16 var7 = (uint16)-(signed)var6;
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn0423d0, line 157
static void exec_addb9eda02b24baf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = 1;
	const uint16 var3 = ((uint16)(var1) >> (uint16)((var2) & 0x0f));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: fn0423d0, line 177
static void exec_b0571477107fcb51(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var6 = ((uint8)(var0) + (uint8)(var5));
	*context.getParameter<uint8*>(24) = (uint8)var6;
}

// First occurrence: fn043128, line 65
static void exec_242ac41ee618045c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn0431e0, line 110
static void exec_131ca8abd65fb529(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint32 var11 = ((uint32)(var8) & (uint32)(context.getParameter<int64>(32)));
	const uint32 var12 = ((uint32)(var3) - (uint32)(var11));
	*context.getParameter<uint32*>(40) = (uint32)var12;
}

// First occurrence: fn043502, line 46
static void exec_a4fb739ee010a03c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn0442f2, line 60
static void exec_5f701e2b89ae24d1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) >> (uint8)((var1) & 0x07));
	const uint8 var4 = ((uint8)(var2) & (uint8)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn044434, line 190
static void exec_1a00be979f0d3f7e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) - (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = ((uint8)(var4) * (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var6;
}

// First occurrence: fn04450a, line 215
static void exec_0f0f4e418b573bd4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var8));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn0906a0, line 35
static void exec_8bd5d4cef4a3720a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn090774, line 17
static void exec_aa842f6c6d8549a8(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn09089e, line 123
static void exec_92b61f85c18a354d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) | (uint8)(context.getParameter<int64>(24)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) == (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn09089e, line 130
static void exec_9a9ff9e4a5668150(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) & (uint8)(var1));
	const int64 var3 = 0;
	const uint8 var4 = ((uint8)(var2) != (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var4);
}

// First occurrence: fn0450ec, line 49
static void exec_3b4b471a66d2878d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int8 var1 = (uint8)*context.getParameter<int8*>(8);
	const uint16 var3 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn045170, line 149
static void exec_7b3ac69b91b95ee5(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint8 var3 = (uint8)~var2;
	const uint8 var4 = ((uint8)(var1) & (uint8)(var3));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var4);
}

// First occurrence: fn045170, line 193
static void exec_dbaa429710ef6248(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	*context.getParameter<int16*>(8) = (uint16)var3;
}

// First occurrence: fn045170, line 204
static void exec_cf6a3571351d5f8f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 1;
	const uint8 var3 = ((uint8)(var1) & (uint8)(var2));
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn045170, line 211
static void exec_3b268f662e89ffd9(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint16 var4 = ((uint16)(var0) + (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn045170, line 221
static void exec_50a9408a9e9365e2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint16 var4 = ((uint16)(var0) - (uint16)(var2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: fn045364, line 302
static void exec_f3b44963624766c9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var3;
}

// First occurrence: fn045364, line 303
static void exec_bfd54aa1525d7694(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)var3);
}

// First occurrence: fn046452, line 96
static void exec_0e065c3241911507(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	*context.getParameter<uint16*>(4) = (uint16)var2;
}

// First occurrence: fn046536, line 124
static void exec_88ef11d2a5ee7e90(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const int64 var1 = 1;
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const int64 var3 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) == (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn046536, line 148
static void exec_b0eaa4463366aa7a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = 1;
	const uint16 var6 = ((uint16)(var3) & (uint16)(var5));
	*context.getParameter<uint16*>(16) = (uint16)var6;
}

// First occurrence: fn046536, line 149
static void exec_213546277d6a63b2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn0453e6, line 150
static void exec_79915c4a8a35747c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn0461fe, line 135
static void exec_56b89b1963c59f82(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0462b6, line 194
static void exec_fdd8894d3e5a3574(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn0462b6, line 196
static void exec_538d60420ed67062(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: fn048eae, line 15
static void exec_efb3b475a514ceef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn048f12, line 65
static void exec_486e3106fc3a01a5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn048f12, line 72
static void exec_838d40da2b301418(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(4)) & 0x0f));
	*context.getParameter<uint16*>(12) = (uint16)var2;
}

// First occurrence: fn048fa4, line 149
static void exec_d154c068038a8c54(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const int16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const int16 var9 = OpcodeExecUtils::safeDivide<int16>((int16)var7, (int16)context.getParameter<int64>(32));
	const int16 var10 = ((uint16)(var3) - (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn049228, line 304
static void exec_e7eb492dee8fe650(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const int64 var2 = 0;
	const uint8 var3 = ((uint8)(var1) != (uint8)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var3);
}

// First occurrence: fn049228, line 308
static void exec_19bbaa41369aa89f(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) <= (uint16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn049228, line 312
static void exec_0671d4d1af759a20(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) > (uint16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn049228, line 317
static void exec_bf756b91652ddb7f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)!var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(4);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var1);
}

// First occurrence: fn0492d4, line 392
static void exec_8cc78f3e80d732fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const int16 var3 = (uint16)*context.getParameter<int16*>(16);
	const int64 var4 = 0;
	context.writeValueStack<int16>(2, (int16)((int16)(var3) < (int16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn047a96, line 134
static void exec_c89fd828e0a07d74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint8 var5 = ((uint8)(var3) != (uint8)(var4));
	const uint8 var6 = *context.getParameter<uint8*>(16);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn047dde, line 27
static void exec_388f624d3da63c4d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var5 = ((uint32)(var3) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn047dde, line 29
static void exec_220f984641b092e6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = ((uint32)(var0) * (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn047e8c, line 109
static void exec_1fe18fdba16b2fdc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn048ad6, line 43
static void exec_bba06676198d607e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)var4;
	const uint16 var6 = ((uint16)(var3) + (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var6);
}

// First occurrence: fn048d2c, line 113
static void exec_3bcd5123cc88e33b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn048d66, line 128
static void exec_3e1bfc0888f6db74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) % (uint16)(context.getParameter<int64>(32)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn048d66, line 134
static void exec_784829430d73a422(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) | (uint8)(context.getParameter<int64>(8)));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn048dca, line 154
static void exec_e33d3535800e6215(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: fn048dca, line 163
static void exec_2cd8a7cefd07c530(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn0494ea, line 65
static void exec_337b64653582bd30(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn04952a, line 85
static void exec_28e28b085323e72e(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var2 = ((int16)(var0) >> (int16)((context.getParameter<int64>(8)) & 0x0f));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn04952a, line 94
static void exec_6afd3394ec742c62(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) ^ (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) * (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn04748e, line 157
static void exec_681a72c26bb50d71(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(var0));
	*context.getParameter<uint32*>(8) = (uint32)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn025a30, line 29
static void exec_da239ac97f50e597(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), (uint16)var8);
}

// First occurrence: fn04808e, line 22
static void exec_d60bf820e96982a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12, (uint16)var9);
}

// First occurrence: fn0480d4, line 58
static void exec_bed8a3a2684467c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var11 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10);
	const uint8 var13 = ((uint8)(var11) & (uint8)(context.getParameter<int64>(32)));
	const int64 var14 = 0;
	const uint8 var15 = ((uint8)(var13) != (uint8)(var14));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) == (uint8)(var15)));
	context.moveValueStack(1);
}

// First occurrence: fn04763e, line 16
static void exec_aef378dfb042daa3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) >= (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint8 var8 = ((uint8)(var6) & (uint8)(context.getParameter<int64>(32)));
	const uint8 var9 = (uint8)!var8;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) == (uint8)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn0477c2, line 128
static void exec_2a39ca6fe850e585(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var8 = ((uint32)(var5) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	*context.getParameter<uint32*>(40) = (uint32)var8;
}

// First occurrence: fn0477ec, line 147
static void exec_2f1836d10acc4ea8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const int64 var3 = (uint64)-(signed)context.getParameter<int64>(8);
	const int16 var4 = (uint16)var3;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn046e4c, line 77
static void exec_f056394277f5cdd9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) * (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	const int16 var9 = ((uint16)(var7) - (uint16)(context.getParameter<int64>(32)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(40), (uint16)var9);
}

// First occurrence: fn046e4c, line 78
static void exec_1593f0d9d384d8f7(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(12)));
	*context.getParameter<int16*>(20) = (uint16)var7;
}

// First occurrence: fn046f18, line 121
static void exec_ea50fe2d105e3674(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int32 var5 = ((uint32)(var3) << (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8, (uint32)var5);
}

// First occurrence: fn048534, line 284
static void exec_10052daf1d427167(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) < (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn048592, line 316
static void exec_f714275a230001c1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<int8>(0, (int8)((int8)(var3) > (int8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn0485ae, line 363
static void exec_7d1fee98ee96e12c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var4);
}

// First occurrence: fn0485ae, line 367
static void exec_91c19f5fd359dab2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: fn0485ae, line 368
static void exec_6242ed2b08e9c364(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	const uint8 var2 = (uint8)*context.getParameter<uint8*>(8);
	const uint8 var3 = 1;
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint8 var6 = ((uint8)(var4) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var1) + (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0, (uint8)var7);
}

// First occurrence: fn0485ae, line 369
static void exec_853dc22b5815f129(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6, (uint8)var3);
}

// First occurrence: fn0485ae, line 372
static void exec_b506366a6b6bc44e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(24)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), (uint8)var7);
}

// First occurrence: fn0485ae, line 373
static void exec_10d166600f78cdf5(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((int32)(var0) * (int32)(var1));
	const int32 var5 = ((int32)(var3) >> (int32)((context.getParameter<int64>(4)) & 0x1f));
	const int32 var6 = ((uint32)(context.readValueStack<int32>(-2)) + (uint32)(var5));
	const int16 var7 = (uint16)var6;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)var7);
	context.moveValueStack(-2);
}

// First occurrence: fn04867c, line 425
static void exec_1227fce277494782(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const int16 var7 = ((uint16)(var5) << (uint16)((context.getParameter<int64>(24)) & 0x0f));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn04872c, line 546
static void exec_6a336e86cbe332ff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint8 var2 = 1;
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const int8 var4 = (uint8)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: fn048762, line 584
static void exec_b401ee3999a91ea9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int32 var3 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(4)) & 0x1f));
	const int16 var4 = (uint16)*context.getParameter<int16*>(12);
	const int32 var6 = OpcodeExecUtils::safeDivide<int32>((int32)var3, (int32)var4);
	*context.getParameter<uint32*>(20) = (uint32)var6;
}

// First occurrence: fn048762, line 591
static void exec_997548ff43ef2f4f(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) >> (uint16)((context.getParameter<int64>()) & 0x0f));
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: fn0487f0, line 647
static void exec_5b7ccbb9a27b1c63(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	const uint8 var8 = ((uint8)(var6) + (uint8)(context.getParameter<int64>(32)));
	*context.getParameter<uint8*>(40) = (uint8)var8;
}

// First occurrence: fn0487f0, line 656
static void exec_a651ae88016df0c8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var6;
}

// First occurrence: fn0821fc, line 109
static void exec_f9c5bee3cd628e3d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var6;
	const uint32 var8 = ((uint32)(var6) - (uint32)(context.getParameter<int64>(40)));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var10);
}

// First occurrence: fn081fee, line 39
static void exec_4c15eda70fb0496b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var10 = ((uint32)(var7) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const uint16 var14 = ((uint16)(var3) + (uint16)(var13));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var14);
}

// First occurrence: fn08204c, line 61
static void exec_eec9549c3b6a6ec2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) - (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn08218e, line 228
static void exec_d659912bb346ade3(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = (uint16)-(signed)var0;
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
}

// First occurrence: fn0829a0, line 252
static void exec_a2951881b06ca0ec(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) <= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn082aa6, line 296
static void exec_09536182db5bd02f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(16)));
	const uint8 var7 = ((uint8)(var5) >> (uint8)((context.getParameter<int64>(24)) & 0x07));
	*context.getParameter<uint8*>(32) = (uint8)var7;
}

// First occurrence: fn082abc, line 307
static void exec_14999e779d96c75d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn04a238, line 54
static void exec_2c9b2c7d0838c766(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn061100, line 193
static void exec_52395e42e14dee9f(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((int32)(var0) * (int32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn049fe4, line 126
static void exec_e0e632f9c05bce1b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) - (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn04a0c6, line 188
static void exec_3536561526b16c6d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) >> (uint32)((context.getParameter<int64>(24)) & 0x1f));
	*context.getParameter<uint32*>(32) = (uint32)var8;
}

// First occurrence: fn04a53a, line 204
static void exec_de12a01e96632dfc(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: fn060f3e, line 36
static void exec_0437675321970092(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn060f94, line 74
static void exec_70610a635dc93579(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 0;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var0);
}

// First occurrence: fn06126c, line 133
static void exec_537c9437df9803a3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const int64 var6 = 0;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) != (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn06126c, line 155
static void exec_2e5986e3513335e0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(context.getParameter<int64>(16))));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var8 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var8) - (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(56));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(64));
	context.writeValueStack<int64>(5, (int64)1);
	context.moveValueStack(6);
}

// First occurrence: fn061362, line 70
static void exec_eb0554001e885002(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const uint32 var8 = 1;
	const uint32 var9 = ((uint32)(var6) >> (uint32)((var8) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var9;
}

// First occurrence: fn0877d8, line 111
static void exec_81cd693cd802e21e(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint32 var7 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = ((uint32)(var7) * (uint32)(context.getParameter<int64>(32)));
	const uint32 var10 = ((uint32)(context.getParameter<int64>()) - (uint32)(var9));
	*context.getParameter<uint32*>(40) = (uint32)var10;
}

// First occurrence: fn08724e, line 134
static void exec_71190b5471e63201(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn087330, line 243
static void exec_52c63d0115f7bec7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)*context.getParameter<uint8*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn08756a, line 459
static void exec_89472cfa2036a6d7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	*context.getParameter<uint8*>(16) = (uint8)var5;
}

// First occurrence: fn087638, line 560
static void exec_b79a5d9b84bf2352(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn087638, line 562
static void exec_093aa5e5f06114fa(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn08701c, line 143
static void exec_2e33af4eec34abc3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((int16)(var3) <= (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn0870ca, line 273
static void exec_a5175c821e4aceb9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int64 var1 = 1;
	const int64 var2 = (uint64)-(signed)var1;
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((int16)(var0) >= (int16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn091de2, line 234
static void exec_2032ec09689204c6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const int16 var6 = (uint16)-(signed)var5;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn091a0c, line 41
static void exec_5bee64c326afd045(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var5 = 1;
	const int16 var6 = ((uint16)(var3) - (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn091a0c, line 42
static void exec_203828c36df054cc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var7 = 1;
	const uint16 var8 = ((uint16)(var6) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn0899e8, line 213
static void exec_1b2d361b2f7fbbf0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn089a20, line 228
static void exec_a884ca8e3f3cbdc0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var6) - (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: fn0879a8, line 95
static void exec_94d0b392d8f97ade(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int16 var2 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var4 = ((uint32)(var1) + (uint32)(var2));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4, (uint8)context.getParameter<int64>());
}

// First occurrence: fn087a42, line 40
static void exec_f14b6e6143b73cb4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const int8 var3 = 1;
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
	context.moveValueStack(-1);
}

// First occurrence: fn087fac, line 64
static void exec_a64085937b8d210b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const int64 var4 = 0;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var3) == (uint16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn0881fe, line 276
static void exec_c00aeb7f50b7fc0c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
}

// First occurrence: fn087dc0, line 262
static void exec_71772f2ea94c5515(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) ^ (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn08a67e, line 57
static void exec_c3fadf16ceee9e44(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) ^ (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn08a72c, line 123
static void exec_0d3c64f235f073d4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var7);
}

// First occurrence: fn08a72c, line 124
static void exec_7b3b944613fedb2d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn08a916, line 164
static void exec_023c485452fae128(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var2 = ((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(var0));
	const int8 var3 = (uint8)var2;
	*context.getParameter<uint8*>(8) = (uint8)var3;
	context.moveValueStack(-1);
}

// First occurrence: fn08a80c, line 339
static void exec_4f2053a61c890691(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) <= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn08bc26, line 304
static void exec_30204d450aa9bb58(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) & (uint8)(context.getParameter<int64>()));
	*context.getParameter<uint8*>(8) = (uint8)var1;
	context.moveValueStack(-1);
}

// First occurrence: fn08bee6, line 99
static void exec_6aa45d0d065d02cc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = 1;
	const int16 var5 = ((uint16)(var3) << (uint16)((var4) & 0x0f));
	*context.getParameter<int16*>(16) = (uint16)var5;
}

// First occurrence: fn08c746, line 24
static void exec_263d5151d74235b7(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
}

// First occurrence: FlyBotAlert.CallFlyBot, line 272
static void exec_973d0532b5479236(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var8;
}

// First occurrence: FlyBotAlert.CallFlyBot, line 273
static void exec_77d7ddadbca4f0c9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)var4);
}

// First occurrence: FlyBotAlert.CallFlyBot, line 277
static void exec_5269fc645183b38c(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var1) + (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: FlyBotAlert.CallFlyBot, line 277
static void exec_f54474b34ed2cdf2(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)-(signed)context.readValueStack<int16>(-1);
	const int16 var2 = OpcodeExecUtils::safeDivide<int16>((int16)var0, (int16)context.getParameter<int64>());
	context.writeValueStack<int16>(-1, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: fn08c692, line 94
static void exec_9369accdcc0e2c14(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) << (uint8)((context.getParameter<int64>(8)) & 0x07));
	*context.getParameter<uint8*>(16) = (uint8)var2;
}

// First occurrence: fn08c3ec, line 383
static void exec_065901da64167fc3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var5 = 1;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) << (uint32)((var6) & 0x1f));
	const uint32 var8 = ((uint32)(var3) & (uint32)(var7));
	const int64 var9 = 0;
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var8) == (uint32)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn090436, line 324
static void exec_dd2039d8e5f219a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) >> (uint8)((var6) & 0x07));
	const uint8 var9 = ((uint8)(var7) + (uint8)(context.getParameter<int64>(24)));
	*context.getParameter<uint8*>(32) = (uint8)var9;
}

// First occurrence: Toxomister.PostInit, line 34
static void exec_0482e5384bcdec22(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn08fe8e, line 183
static void exec_b8e5fe55f43076d4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var5 = ((uint8)(context.getParameter<int64>()) - (uint8)(var4));
	*context.getParameter<uint8*>(24) = (uint8)var5;
}

// First occurrence: fn08ff8c, line 284
static void exec_4881143f0a362cc5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var7;
}

// First occurrence: fn08ffe0, line 305
static void exec_c7a0c0fa675b7500(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	*context.getParameter<int16*>(24) = (uint16)var6;
}

// First occurrence: fn08ffe0, line 306
static void exec_03c3c7abb2de6aa9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) - (uint16)(var5));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var6);
}

// First occurrence: fn08852e, line 142
static void exec_71d8dbd6c4f56608(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint8 var3 = *context.getParameter<uint8*>(16);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var3) & (uint8)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn088a32, line 226
static void exec_e259e12a35f16ea1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) + (uint16)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn088ec4, line 72
static void exec_4a35e84bd56bd0da(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var10 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var11 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10);
	const uint16 var12 = ((uint16)(var3) + (uint16)(var11));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var12);
}

// First occurrence: fn08e388, line 156
static void exec_1393fee4f7cb1137(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var6 = ((uint16)(context.getParameter<int64>()) - (uint16)(var5));
	*context.getParameter<uint16*>(32) = (uint16)var6;
}

// First occurrence: fn08e2ea, line 239
static void exec_7f3a8726e12f50f0(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn08d8e6, line 307
static void exec_a2d839eb959be9c4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = 1;
	const int16 var5 = ((uint16)(var3) << (uint16)((var4) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: fn08d7a8, line 409
static void exec_42abff1184cb636b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn08dbec, line 109
static void exec_cfbcda42473c5e3d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	*context.getParameter<uint16*>(24) = (uint16)var7;
}

// First occurrence: fn08548e, line 253
static void exec_0ca7731a2a1cbb73(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint16 var10 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9);
	context.writeValueStack<int16>(0, (int16)((int16)(var6) < (int16)(var10)));
	context.moveValueStack(1);
}

// First occurrence: Enemy.addScore, line 385
static void exec_6d7a0c7a72d27f76(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
}

// First occurrence: Enemy.addScore, line 398
static void exec_93fc99b91a4ac398(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (uint16)(uint16)var0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn0857f4, line 456
static void exec_15019e8eb20bccd6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(4)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) < (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn085838, line 510
static void exec_db003d6a2105d691(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int8 var5 = ((int8)(var3) >= (int8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: Object.InitWithUpdateAddress, line 592
static void exec_04f790b4a83edd21(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3, (uint32)var0);
}

// First occurrence: fn084258, line 689
static void exec_e1f15577f2a0322f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)*context.getParameter<int8*>(16);
	const uint16 var6 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn084512, line 728
static void exec_fcf082f88fac3d68(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const int32 var5 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn084512, line 732
static void exec_14ee5a55dbdec9a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const int8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const int8 var6 = (uint8)-(signed)var5;
	*context.getParameter<int8*>(16) = (uint8)var6;
}

// First occurrence: fn08455e, line 768
static void exec_3c0900540037d51d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var8 = ((uint32)(var0) + (uint32)(var6));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn0845e4, line 879
static void exec_101c3bc298405db7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = 1;
	const int32 var5 = ((uint32)(var3) + (uint32)(var4));
	const int8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<int16*>(16) = (uint16)var6;
}

// First occurrence: fn084700, line 1078
static void exec_7a728a300043c9ca(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var4) + (uint32)(var5));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) >= (uint8)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn0847e6, line 1118
static void exec_13ecc9a0fa30a3a4(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int16 var5 = (uint16)-(signed)var4;
	context.writeValueStack<int16>(0, (int16)((int16)(var3) > (int16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: fn0847e6, line 1128
static void exec_41ed3406c3997b69(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int16 var5 = ((uint16)(var3) + (uint16)(var4));
	const int16 var6 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(0, (int16)((int16)(var5) < (int16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn08486e, line 1186
static void exec_531286cd78e04627(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const int8 var5 = ((int8)(var3) < (int8)(var4));
	const uint8 var6 = (uint8)var5;
	*context.getParameter<uint32*>(16) = (uint32)var6;
}

// First occurrence: fn084c00, line 1488
static void exec_a13e3ddf809ade78(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const int8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint16 var11 = ((uint16)(var5) + (uint16)(var9));
	*context.getParameter<uint16*>(40) = (uint16)var11;
}

// First occurrence: fn084c42, line 1499
static void exec_7cf0cc93cfa75b24(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readValueStack<int16>(-1);
	const int32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>()) & 0x1f));
	*context.getParameter<int32*>(8) = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn084c42, line 1501
static void exec_6b42ec084579b15f(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const int32 var2 = ((int32)(var0) >> (int32)((var1) & 0x1f));
	*context.getParameter<int32*>(16) = (uint32)var2;
}

// First occurrence: fn084c42, line 1505
static void exec_b982daa0dbe84447(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn084c72, line 1517
static void exec_8b6db6548664e400(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const int32 var4 = ((int32)(var2) >> (int32)((var3) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn084e6c, line 1766
static void exec_eedd4a364b5f9c3b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) & (uint32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	*context.getParameter<uint16*>(24) = (uint16)var6;
}

// First occurrence: fn08ead2, line 75
static void exec_2f135a6b8b4974ed(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = ((uint8)(context.getParameter<int64>()) - (uint8)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10, (uint8)var7);
}

// First occurrence: fn08ebac, line 161
static void exec_6a2eba8247757114(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const int16 var8 = ((uint16)(var6) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn08ebe2, line 182
static void exec_2a2bef97366a3e04(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const int16 var7 = 1;
	const int16 var8 = ((uint16)(var6) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn08e7d4, line 198
static void exec_d1020d4f4a2f0eb3(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var3) - (uint16)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var9);
}

// First occurrence: fn08e828, line 209
static void exec_d4d18c2c5bed1ae1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) <= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn08e9fa, line 418
static void exec_814d842253d31c48(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) * (uint32)(var2));
	const uint32 var6 = ((uint32)(var4) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn08619a, line 456
static void exec_2b88ab185d608f14(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var5 = (uint16)var3;
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var7;
}

// First occurrence: fn085c7e, line 57
static void exec_3c3c3107c4377369(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: CheckForBossStart, line 87
static void exec_ea37475b33975aef(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) <= (uint16)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var4);
}

// First occurrence: CheckForBossStart, line 91
static void exec_e662dc3d1fe502ec(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) >= (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: CheckForBossStart, line 109
static void exec_a8fe47f9ffe23471(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) > (uint16)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: CheckForBossStart, line 127
static void exec_92d7d9e710d4d4f0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Boss.updateHitFlashing, line 282
static void exec_cc74aef15fd00239(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Boss.updateHitFlashing, line 284
static void exec_95937b0a10b57677(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const uint8 var3 = ((uint8)(var1) * (uint8)(context.getParameter<int64>(20)));
	context.writeValueStack<uint32>(3, (uint32)((uint32)(var0) + (uint32)(var3)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(28);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(36)));
	context.writeValueStack<uint8>(4, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7));
	context.moveValueStack(5);
}

// First occurrence: Boss.updateHitFlashing, line 287
static void exec_8f3ae83f139881b7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: Boss.updateHitFlashing, line 289
static void exec_eb07697af6d7476f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint8>(4, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(5);
}

// First occurrence: Boss.updateHitFlashing, line 293
static void exec_0ac3fa6356cf0bf7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Boss.updateHitFlashing, line 300
static void exec_e99d4396eae4d97c(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var2 = ((uint8)(context.getParameter<int64>()) - (uint8)(var1));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) * (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: Boss.updateHitFlashing, line 300
static void exec_8419525b43c93e32(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: Boss.updateHitFlashing, line 303
static void exec_8c1ae2d37a85ecf6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var6);
}

// First occurrence: Boss.updateHitFlashing, line 305
static void exec_c6f892b7e462eb81(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), (uint32)var9);
}

// First occurrence: Boss.updateHitFlashing, line 306
static void exec_18e5628a64451d2c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0, (uint16)context.readValueStack<uint16>(-1));
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const int8 var2 = 1;
	const uint8 var3 = ((uint8)(var1) + (uint8)(var2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var3);
	context.moveValueStack(-1);
}

// First occurrence: Boss.updateHitFlashing, line 318
static void exec_df57f103af8a9c40(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint32 var4 = ((uint32)(var1) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var6);
	const uint8 var8 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20));
	const int8 var9 = 1;
	const uint8 var10 = ((uint8)(var8) + (uint8)(var9));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var10);
}

// First occurrence: fn083c06, line 385
static void exec_3538c3385d474711(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn083c06, line 397
static void exec_e110986393e859e6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) * (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn083d84, line 472
static void exec_3e305ec9b4734997(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var3);
}

// First occurrence: fn083e90, line 537
static void exec_4fdfa30704fcc81b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn083e90, line 538
static void exec_74ef313871636b75(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const uint16 var3 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn083e90, line 543
static void exec_0c679e5038b93feb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) - (uint16)(var3));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: FadeColorToWhiteUniform, line 757
static void exec_e95ce87a816da4a2(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) < (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: UpdatePlayer1SpritePatterns, line 889
static void exec_e041b1c29d707758(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) * (uint32)(context.getParameter<int64>(16)));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	const uint32 var9 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var8);
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn067f1e, line 1021
static void exec_6e78fb17f5cc2e61(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var2 = ((uint16)(context.readValueStack<int16>(-2)) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: fn068dfa, line 517
static void exec_3e6dfaff9ca9a45a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn068ee4, line 602
static void exec_44040d5bf825651e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((int32)(var1) * (int32)(context.getParameter<int64>(16)));
	const uint32 var5 = ((uint32)(var0) + (uint32)(var4));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
}

// First occurrence: fn068ee4, line 604
static void exec_bcd7bde11b5c2dbd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-2)) * (uint32)(var0));
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)var1, (uint32)context.getParameter<int64>());
	const int16 var4 = (uint16)var3;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: fn068ee4, line 606
static void exec_819e2b0345723a70(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn068928, line 960
static void exec_c23d4d9fb8be8dc5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint16 var6 = ((uint16)(var0) - (uint16)(var4));
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn0691a8, line 28
static void exec_8d6d6e8e7c2604a6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >= (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: fn069a66, line 308
static void exec_ef6b25a90f579ccb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	*context.getParameter<uint32*>(40) = (uint32)var7;
}

// First occurrence: fn069a66, line 310
static void exec_b8f2c8b158026ad0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = ((uint32)(var0) - (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn069588, line 406
static void exec_9c4e690f76c27786(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int8>(0, (int8)*context.getParameter<int8*>());
	context.moveValueStack(1);
}

// First occurrence: fn069588, line 412
static void exec_7f9d625f8f7c106c(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn069ad8, line 713
static void exec_8a9f8124302c65ee(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) ^ (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn06ddf2, line 468
static void exec_b731830584f071a5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn06e128, line 740
static void exec_b49205ab629e12d6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var5);
	const uint8 var7 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40));
	const int8 var8 = 1;
	const uint8 var9 = ((uint8)(var7) + (uint8)(var8));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), (uint8)var9);
}

// First occurrence: fn06e8a2, line 480
static void exec_dbc75560511c01d9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn06e8a2, line 480
static void exec_37f29c5d92e517df(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	const uint16 var8 = ((uint16)(var6) - (uint16)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn06e8b6, line 500
static void exec_8db4f74fe4858292(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)*context.getParameter<int16*>();
	const int16 var1 = 1;
	const int16 var2 = ((int16)(var0) >> (int16)((var1) & 0x0f));
	const int16 var3 = (uint16)-(signed)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
}

// First occurrence: fn06e994, line 594
static void exec_672d06df48dbac5c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) << (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn06e9e2, line 632
static void exec_bb051c5bc26a71d4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: fn06ebac, line 777
static void exec_611a3bb51a187084(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const uint8 var7 = ((uint8)(var5) + (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: fn081726, line 41
static void exec_916095f67a6b8cf5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn0818b4, line 192
static void exec_4e9f1b0dc7f947d7(const RuntimeOpcodeContext context)
{
	const int32 var1 = (uint32)-(signed)context.getParameter<int64>();
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)var1);
}

// First occurrence: fn081ede, line 424
static void exec_6d9e041ddac04239(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) + (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) >> (uint8)((context.getParameter<int64>(16)) & 0x07));
	const uint16 var7 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn081ede, line 426
static void exec_6c5bb8b7eedfddf3(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint8 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	const int8 var5 = (uint8)var4;
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn082cd6, line 621
static void exec_5ff5f0ab04c3b7a0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) + (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = 1;
	const uint32 var11 = ((uint32)(var9) + (uint32)(var10));
	*context.getParameter<uint32*>(40) = (uint32)var11;
	const uint32 var12 = 1;
	const uint32 var13 = ((uint32)(var11) - (uint32)(var12));
	const int8 var14 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13);
	const uint16 var16 = ((uint16)(var8) + (uint16)(var14));
	const uint32 var17 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var19 = ((uint32)(var17) + (uint32)(context.getParameter<int64>(56)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var19, (uint16)var16);
}

// First occurrence: fn0830c0, line 787
static void exec_c18864cfe617be5b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = (uint8)-(signed)var3;
	*context.getParameter<int16*>(16) = (uint16)var4;
}

// First occurrence: fn0830c0, line 791
static void exec_5cefc1a4de79ca1a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const int16 var6 = (uint16)*context.getParameter<int16*>(24);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn0830c0, line 798
static void exec_962fe6d3ef50a7d1(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	const int16 var6 = (uint16)*context.getParameter<int16*>(24);
	const uint16 var7 = ((uint16)(var5) + (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn081a74, line 24
static void exec_1abe3934c346ea56(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn081b26, line 89
static void exec_b0e4d07702c2e31a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	const uint16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn081b26, line 98
static void exec_e50375e29a7a88f7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) + (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn081b26, line 102
static void exec_4d8f0223764b0fe1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>()));
	const uint32 var4 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var5 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(var4));
	*context.getParameter<uint32*>(16) = (uint32)var5;
	context.moveValueStack(-2);
}

// First occurrence: fn082c6a, line 222
static void exec_0652c044080214db(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
}

// First occurrence: fn082c6a, line 224
static void exec_75a00864e7609a1a(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)*context.getParameter<int32*>();
	const int32 var1 = (uint32)*context.getParameter<int32*>(8);
	context.writeValueStack<int32>(0, (int32)((int32)(var0) < (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn081e28, line 352
static void exec_0563ba5933050154(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(24));
	const uint16 var6 = ((uint16)(var4) - (uint16)(var5));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn08249a, line 365
static void exec_dbda15db4c0b9eb9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = *context.getParameter<uint8*>(16);
	const uint16 var8 = ((uint16)(var5) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var9 = ((uint16)(var3) + (uint16)(var8));
	*context.getParameter<uint16*>(32) = (uint16)var9;
}

// First occurrence: fn07ddb4, line 24
static void exec_5efd0ba7d993877d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn07e7b4, line 1166
static void exec_0d69974b3561b785(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: fn07ec84, line 1694
static void exec_62420e873c1fec40(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) > (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn07f2fe, line 284
static void exec_4d4039edf1453d27(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn07f56e, line 634
static void exec_84384c5873f69c21(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) == (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: fn07fa7e, line 1252
static void exec_ce78a6f4e89158af(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const int8 var4 = ((uint8)(var2) - (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<int8*>(24) = (uint8)var4;
}

// First occurrence: fn07facc, line 1285
static void exec_9817f7f97196774d(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn07fe2c, line 95
static void exec_452b27579c0214ce(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) - (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
	context.moveValueStack(-2);
}

// First occurrence: fn080b66, line 581
static void exec_67a93bdb1ffff27f(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const int64 var3 = 0;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var2) == (uint8)(var3)));
}

// First occurrence: fn080b90, line 596
static void exec_ddcf6e41e34dbd31(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint8 var0 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn080c60, line 688
static void exec_895d08a8871eb196(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint16 var6 = ((uint16)(var3) * (uint16)(context.getParameter<int64>(16)));
	const uint16 var8 = ((uint16)(var6) & (uint16)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), (uint16)var8);
}

// First occurrence: fn080a98, line 523
static void exec_225af267375ce5b9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const uint32 var6 = ((uint32)(var3) + (uint32)(var4));
	*context.getParameter<uint32*>(24) = (uint32)var6;
}

// First occurrence: fn080fa6, line 594
static void exec_59c0dc2ed17e11f8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(4)) & 0x1f));
	*context.getParameter<uint32*>(12) = (uint32)var2;
}

// First occurrence: DEZFinalBoss3.canPlayerEnterDoomsday, line 20
static void exec_fd332c76f767575b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int64 var1 = 1;
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) <= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0801d8, line 75
static void exec_27e0a85f40f8802b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(24)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) > (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn0802c0, line 175
static void exec_7346176d692db5fe(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) <= (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn080426, line 209
static void exec_450fe64205f6c1e7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn080426, line 211
static void exec_89c4591b759380a8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var6 = ((uint8)(var4) & (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = ((uint8)(var3) | (uint8)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var7);
}

// First occurrence: fn080426, line 214
static void exec_694340af325678ea(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var5;
}

// First occurrence: fn080426, line 216
static void exec_9107231c2116e761(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const int16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn080e2c, line 434
static void exec_b3cfbd47d9e43511(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(12)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn080e2c, line 468
static void exec_2c0f3ed308503c04(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn06f12a, line 338
static void exec_144056e01dd629ef(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const uint8 var6 = 1;
	const uint8 var7 = ((uint8)(var5) + (uint8)(var6));
	*context.getParameter<uint8*>(16) = (uint8)var7;
}

// First occurrence: fn06f2a8, line 524
static void exec_095d81bee7659fd7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(var0) < (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const int64 var10 = 1;
	const uint8 var11 = ((uint8)(var9) & (uint8)(var10));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var11)));
	context.moveValueStack(1);
}

// First occurrence: fn06f7a6, line 1024
static void exec_101328812f342b69(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var2;
	const uint32 var4 = ((uint32)(var2) - (uint32)(context.getParameter<int64>(24)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(32);
	const int16 var7 = (uint16)*context.getParameter<int16*>(40);
	const uint32 var9 = ((uint32)(var6) + (uint32)(var7));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var5);
}

// First occurrence: fn06f91c, line 1214
static void exec_46decc36e8c01ec7(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var10 = ((uint16)(var8) * (uint16)(context.getParameter<int64>(32)));
	const uint32 var11 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var13 = ((uint32)(var11) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13, (uint16)var10);
}

// First occurrence: fn070854, line 242
static void exec_bd9a3376562bc095(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const int16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn070870, line 270
static void exec_a631ba6ae27a33c5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1, (uint8)var0);
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const int8 var3 = 1;
	const uint32 var4 = ((uint32)(var2) + (uint32)(var3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var4);
}

// First occurrence: fn070966, line 368
static void exec_990d05b0e04a09fa(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	const uint32 var5 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = (uint32)var5;
	context.moveValueStack(-1);
}

// First occurrence: fn0709a8, line 419
static void exec_8a0c728700b41b74(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn070dac, line 824
static void exec_b99df1a2198c527a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var8 = ((uint16)(var3) - (uint16)(var7));
	const uint16 var9 = 1;
	const int16 var10 = ((int16)(var8) >> (int16)((var9) & 0x0f));
	*context.getParameter<uint16*>(32) = (uint16)var10;
}

// First occurrence: fn084e1e, line 1095
static void exec_9e86e0c51f5140b2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int8 var5 = (uint8)-(signed)var4;
	*context.getParameter<uint32*>(16) = (uint32)var5;
}

// First occurrence: fn06feb2, line 187
static void exec_bef19d14411dd382(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) + (uint16)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) < (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn06feb2, line 194
static void exec_c978bfe8b2ac8244(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint16 var9 = ((uint16)(var7) - (uint16)(context.getParameter<int64>(32)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) >= (uint16)(var9)));
	context.moveValueStack(1);
}

// First occurrence: fn070118, line 389
static void exec_d7e1fb8f32c9023c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 0;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var6) == (uint8)(var7)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn06a710, line 923
static void exec_1be39f7351111e3c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = (uint16)*context.getParameter<uint16*>(16);
	const uint16 var6 = ((uint16)(var4) & (uint16)(context.getParameter<int64>(24)));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var7);
}

// First occurrence: fn06a8c6, line 1058
static void exec_810d1e0898162ea6(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) >> (uint32)((var5) & 0x1f));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var8;
}

// First occurrence: fn06aad2, line 1293
static void exec_789768e93c01b943(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	*context.getParameter<uint16*>(16) = (uint16)var5;
}

// First occurrence: fn06ab76, line 1340
static void exec_433499463e4e0f69(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)*context.getParameter<uint8*>(8);
	const uint32 var3 = ((uint32)(context.getParameter<int64>()) - (uint32)(var1));
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn06b50c, line 685
static void exec_966ccb8e8aa6217e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(16)));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	*context.getParameter<uint16*>(24) = (uint16)var4;
}

// First occurrence: fn06b916, line 1071
static void exec_687cdd987802e63a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var6 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const int8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	*context.getParameter<int16*>(24) = (uint16)var7;
}

// First occurrence: fn06bb5c, line 1285
static void exec_f61259c532252cab(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn06bb5c, line 1285
static void exec_1877b07289e9af16(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(20)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var1) + (uint16)(var5));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var6)));
	context.moveValueStack(1);
}

// First occurrence: fn06bb9a, line 1301
static void exec_66b419bf08e32d82(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<int16>(1, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const int16 var3 = (uint16)*context.getParameter<int16*>(16);
	const int64 var4 = 0;
	context.writeValueStack<int16>(2, (int16)((int16)(var3) >= (int16)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn084780, line 1450
static void exec_e7d5eba742384a84(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) < (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: fn06401c, line 391
static void exec_7d28a8ff0d80f4ee(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) % (uint32)(context.getParameter<int64>()));
	const int64 var2 = 0;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(var1) == (uint32)(var2)));
}

// First occurrence: fn064090, line 451
static void exec_0b3dd4f61c21f11f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var7);
}

// First occurrence: fn064090, line 452
static void exec_8f9ed010acaa710f(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(4);
	const int64 var2 = 0;
	const uint16 var3 = ((uint16)(var1) == (uint16)(var2));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var3)));
	context.moveValueStack(1);
}

// First occurrence: fn064258, line 639
static void exec_fca0db475fe3ea50(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) < (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn0660e2, line 826
static void exec_a3506bb5a7d0e18e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	const int16 var8 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int64 var9 = 0;
	const int16 var10 = ((int16)(var8) < (int16)(var9));
	const uint8 var11 = ((uint8)(var7) != (uint8)(var10));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var11);
}

// First occurrence: fn06615a, line 892
static void exec_e519e6787650d40b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) - (uint16)(var1));
	*context.getParameter<uint16*>(4) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn06615a, line 900
static void exec_f6befb5c2fa9888d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	*context.getParameter<uint16*>(12) = (uint16)var2;
}

// First occurrence: Boss.ICZ1.UpdateState00, line 112
static void exec_152661159618fa83(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), (uint16)var2);
	context.moveValueStack(-3);
}

// First occurrence: Boss.ICZ1.UpdateState00, line 115
static void exec_3b0786a5d4d45d00(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(8));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
	context.moveValueStack(-1);
}

// First occurrence: fn0716b2, line 674
static void exec_d3fbd2a020ba28ab(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var5 = 1;
	const uint32 var6 = ((uint32)(var3) >> (uint32)((var5) & 0x1f));
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint32 var10 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12, (uint8)var9);
}

// First occurrence: fn071de2, line 266
static void exec_74d430330666cc23(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn072168, line 621
static void exec_d7f82f43f4a507f9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const int16 var5 = (uint16)*context.getParameter<int16*>(24);
	const uint32 var7 = ((uint32)(var4) + (uint32)(var5));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	const uint8 var9 = ((uint8)(var3) | (uint8)(var8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)var9);
}

// First occurrence: fn0724c8, line 178
static void exec_ccc677e783348169(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint8 var1 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var1) > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn073b3c, line 329
static void exec_0787914336bd7925(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) < (uint16)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: fn073ba0, line 379
static void exec_30debb0912805494(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var2 = ((uint16)(context.getParameter<int64>()) - (uint16)(var1));
	const int16 var4 = ((int16)(var2) * (int16)(context.getParameter<int64>(16)));
	*context.getParameter<int16*>(24) = (uint16)var4;
}

// First occurrence: fn073f1c, line 769
static void exec_23c8272a8bc810af(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	*context.getParameter<uint8*>(8) = (uint8)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn0732f6, line 616
static void exec_0268785951545eed(const RuntimeOpcodeContext context)
{
	const uint32 var0 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(var0) & (uint32)(var1)));
}

// First occurrence: fn0734e4, line 772
static void exec_a838df31f40e1b00(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(16)));
	*context.getParameter<uint8*>(24) = (uint8)var4;
}

// First occurrence: fn07361e, line 883
static void exec_db53bd8479a20567(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) == (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: fn0844ce, line 970
static void exec_3fff4d623ab0a23c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const int32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const int64 var7 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var6) != (uint8)(var7)));
	context.moveValueStack(1);
}

// First occurrence: fn0742a8, line 55
static void exec_78c24cc19c556685(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn0744fc, line 300
static void exec_c795501bb929468b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>()));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	context.moveValueStack(-1);
}

// First occurrence: fn074f24, line 1366
static void exec_f96fd6ffc654a35d(const RuntimeOpcodeContext context)
{
	const int64 var1 = (uint64)-(signed)context.getParameter<int64>();
	context.writeValueStack<int16>(0, (int16)(uint16)var1);
	context.moveValueStack(1);
}

// First occurrence: fn074f24, line 1369
static void exec_c66f70cc14043632(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int32 var4 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var5 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4);
	const uint16 var6 = ((uint16)(var0) + (uint16)(var5));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn074fd2, line 1441
static void exec_2bae7ef51511962e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var0) & (uint8)(context.getParameter<int64>())));
}

// First occurrence: fn084d78, line 1503
static void exec_2801c29234e8b061(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	context.writeValueStack<int32>(0, (int32)(uint32)var3);
	context.moveValueStack(1);
}

// First occurrence: fn078522, line 41
static void exec_f72a6fae7b1c02fd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) + (uint16)(var3)));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(20)));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var6) + (uint16)(var7)));
	context.moveValueStack(2);
}

// First occurrence: fn07880a, line 370
static void exec_78c514edf92ecf39(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)(uint16)*context.getParameter<uint16*>());
	const uint8 var0 = (uint8)*context.getParameter<uint8*>(8);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn078b46, line 724
static void exec_cbc3767d8a179e26(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var5 = ((uint8)(var3) >> (uint8)((var4) & 0x07));
	const int64 var6 = 1;
	const uint8 var7 = ((uint8)(var5) & (uint8)(var6));
	const int64 var8 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: fn078b46, line 729
static void exec_514742d6cab4e517(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int16 var7 = ((int16)(var4) * (int16)(context.getParameter<int64>(24)));
	const int16 var8 = ((uint16)(context.getParameter<int64>()) - (uint16)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn07981e, line 90
static void exec_a798e038e634fa89(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: fn079ac4, line 388
static void exec_a7abdf255551e9f9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) >> (uint16)((var3) & 0x0f));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn079b22, line 415
static void exec_b3d4817a1e82ad69(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var2));
	*context.getParameter<uint32*>(16) = (uint32)var4;
}

// First occurrence: fn0886ea, line 167
static void exec_71bc204cc9f87ef8(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const int64 var4 = 1;
	context.writeValueStack<uint32>(2, (uint32)((uint32)(var3) & (uint32)(var4)));
	context.writeValueStack<uint32>(0, (uint32)var2);
	context.moveValueStack(3);
}

// First occurrence: fn088864, line 304
static void exec_05135c9d75137861(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(var4)));
	context.moveValueStack(2);
}

// First occurrence: fn0889a8, line 425
static void exec_176597d90bdd8c58(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn06cff4, line 452
static void exec_fb252c22669c8dd7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const int32 var1 = ((int32)(context.readValueStack<int32>(-2)) * (int32)(var0));
	const int32 var3 = OpcodeExecUtils::safeDivide<int32>((int32)var1, (int32)context.getParameter<int64>());
	const int16 var4 = (uint16)var3;
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
	context.moveValueStack(-2);
}

// First occurrence: fn06d060, line 504
static void exec_835b3fea18ac7a05(const RuntimeOpcodeContext context)
{
	const uint16 var1 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)context.getParameter<int64>(), (uint32)var1);
	*context.getParameter<uint32*>(16) = (uint32)var3;
}

// First occurrence: fn06d060, line 512
static void exec_29b8ff36daaa8ec2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) + (uint8)(var7));
	const uint8 var10 = ((uint8)(var8) & (uint8)(context.getParameter<int64>(32)));
	*context.getParameter<uint8*>(40) = (uint8)var10;
}

// First occurrence: fn06d710, line 551
static void exec_f2201ac00e423296(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var3;
	const uint32 var5 = ((uint32)(var3) - (uint32)(context.getParameter<int64>(32)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var7 = ((uint16)(var0) + (uint16)(var6));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(40);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(48)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn08614e, line 578
static void exec_bb352f0b0881da55(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(24));
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var3) * (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(3);
}

// First occurrence: fn0246da, line 653
static void exec_6c5e062a9d4fc30d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint32 var10 = ((uint32)(var7) << (uint32)((context.getParameter<int64>(32)) & 0x1f));
	const uint32 var11 = ((uint32)(var3) + (uint32)(var10));
	*context.getParameter<uint32*>(40) = (uint32)var11;
}

// First occurrence: fn0246da, line 658
static void exec_e38e46ab4da20c90(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) >> (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn0246da, line 724
static void exec_f0ae133ad819bb32(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) + (uint32)(var2));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var4) & (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn02479c, line 751
static void exec_1bf536a43e2a86c4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var2 = (uint16)*context.getParameter<uint16*>(8);
	const uint32 var4 = ((uint32)(var0) + (uint32)(var2));
	const uint32 var6 = ((uint32)(var4) >> (uint32)((context.getParameter<int64>(16)) & 0x1f));
	const int16 var7 = (uint16)var6;
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var7);
}

// First occurrence: fn0248b8, line 935
static void exec_fa76bcf6d0a0ca84(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var2) - (uint32)(var3));
	const uint8 var5 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4);
	const uint8 var6 = (uint8)*context.getParameter<uint8*>(16);
	const uint8 var7 = ((uint8)(var5) & (uint8)(var6));
	*context.getParameter<uint8*>(24) = (uint8)var7;
}

// First occurrence: fn06c8b4, line 252
static void exec_ed5cdeb82dc14c0e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn06d1de, line 369
static void exec_02b36e45d666a2f7(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var3 = ((uint32)(var0) & (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn06d45e, line 425
static void exec_39cf86fc39602d8d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	const int16 var5 = (uint16)*context.getParameter<int16*>(16);
	const uint16 var6 = ((uint16)(var4) + (uint16)(var5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var6);
	context.moveValueStack(-2);
}

// First occurrence: fn06d45e, line 430
static void exec_0109aef90d83cd11(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: fn06d45e, line 435
static void exec_6cb9ab4e8f3a1848(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var4 = 0;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
}

// First occurrence: fn06d45e, line 439
static void exec_66631bfa4a73bb5b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(4)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var6 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(28)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9, (uint32)var6);
}

// First occurrence: fn06d4dc, line 457
static void exec_c169d0a110f21acd(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) & (uint16)(var1));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
}

// First occurrence: fn06d51a, line 494
static void exec_54718e1e7ec14324(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)*context.getParameter<uint16*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var0) >> (uint32)((var2) & 0x1f));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var6 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9, (uint8)var6);
}

// First occurrence: fn06d51a, line 502
static void exec_617f0e1d12c0d1a9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const uint32 var3 = ((uint32)(var0) + (uint32)(var1));
	const uint32 var4 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3);
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7, (uint32)var4);
}

// First occurrence: fn0753de, line 218
static void exec_a99e3516d3d38a3d(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) > (uint16)(var1)));
	context.moveValueStack(-1);
}

// First occurrence: fn0757a0, line 545
static void exec_5bee411891e30814(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((uint16)(var3) - (uint16)(context.getParameter<int64>(16)));
	*context.getParameter<int16*>(24) = (uint16)var5;
}

// First occurrence: fn0757d6, line 575
static void exec_caba81d849c19e3f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	const int8 var1 = (uint8)var0;
	*context.getParameter<uint8*>(8) = (uint8)var1;
}

// First occurrence: fn07585a, line 625
static void exec_b5bb2c6befc2743a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(16));
	const int16 var5 = (uint16)var4;
	*context.getParameter<uint16*>(24) = (uint16)var5;
}

// First occurrence: fn0758be, line 660
static void exec_3232d03f7474d0ba(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = 1;
	const int16 var5 = ((int16)(var3) >> (int16)((var4) & 0x0f));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: fn0758be, line 661
static void exec_ad081f1f67a9700d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = 1;
	const int16 var5 = ((int16)(var3) >> (int16)((var4) & 0x0f));
	const int16 var6 = (uint16)-(signed)var5;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9, (uint16)var6);
}

// First occurrence: fn07594c, line 723
static void exec_c35a2a32c0615576(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) << (uint32)((context.getParameter<int64>(8)) & 0x1f));
	const uint32 var4 = OpcodeExecUtils::safeDivide<uint32>((uint32)var2, (uint32)context.getParameter<int64>(16));
	*context.getParameter<uint32*>(24) = (uint32)var4;
}

// First occurrence: fn075ad4, line 914
static void exec_3820ec308aa08f68(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) != (uint8)(var1));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: fn075c06, line 947
static void exec_46afdeb7012163a0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>()) & 0x0f));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = (uint16)var4;
	context.moveValueStack(-2);
}

// First occurrence: fn076782, line 619
static void exec_1489cbd588a8a95b(const RuntimeOpcodeContext context)
{
	const int8 var0 = (uint8)*context.getParameter<int8*>();
	const int64 var1 = 1;
	context.writeValueStack<int8>(0, (int8)((int8)(var0) <= (int8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: fn0557c8, line 823
static void exec_c458de4f7f5ad9a5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) != (uint16)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: fn0557c8, line 835
static void exec_551d78caf87bc3c5(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	const int16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const int16 var8 = ((int16)(var6) * (int16)(context.getParameter<int64>(28)));
	const uint16 var9 = ((uint16)(var2) + (uint16)(var8));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var9);
}

// First occurrence: BossSOZ1.slideAsRock, line 122
static void exec_b925c1adea651fff(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(0, (int16)((uint16)(var3) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: BossSOZ1.slideAsRock, line 127
static void exec_0d99909f5cda80fd(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) & (uint16)(context.getParameter<int64>()));
	const int64 var2 = 0;
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var1) == (uint16)(var2)));
}

// First occurrence: fn077b16, line 470
static void exec_89be115de5ce8b99(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var5 = ((int8)(var3) >> (int8)((context.getParameter<int64>(16)) & 0x07));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
}

// First occurrence: fn077fec, line 1028
static void exec_12ae8217333cf4fd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(24)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var6) - (uint16)(var10)));
	const uint32 var12 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var14 = ((uint32)(var12) + (uint32)(context.getParameter<int64>(56)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var14));
	const uint32 var15 = (uint32)*context.getParameter<uint32*>(64);
	const uint32 var17 = ((uint32)(var15) + (uint32)(context.getParameter<int64>(72)));
	const uint8 var18 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var17);
	context.writeValueStack<uint8>(3, (uint8)((uint8)(var18) * (uint8)(context.getParameter<int64>(80))));
	const uint32 var21 = (uint32)*context.getParameter<uint32*>(96);
	const uint32 var23 = ((uint32)(var21) + (uint32)(context.getParameter<int64>(104)));
	const uint16 var24 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var23);
	context.writeValueStack<uint16>(4, (uint16)((uint16)(context.getParameter<int64>(88)) - (uint16)(var24)));
	context.writeValueStack<int64>(5, (int64)1);
	context.moveValueStack(6);
}

// First occurrence: fn07808c, line 1107
static void exec_215d8c3b75cd172e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	const uint8 var8 = ((uint8)(var3) - (uint8)(var7));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11, (uint8)var8);
}

// First occurrence: fn07819a, line 1241
static void exec_5a0a97f93a461b94(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int16 var6 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const int16 var8 = ((int16)(var6) * (int16)(context.getParameter<int64>(24)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11, (uint16)var8);
}

// First occurrence: fn07b2dc, line 86
static void exec_3cce84628d712fe0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>()));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5, (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: BossMecha1.setBossArea, line 130
static void exec_43b48c64e750802e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1)));
	const uint16 var2 = ((uint16)(var0) - (uint16)(context.getParameter<int64>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)var2);
	context.moveValueStack(-2);
}

// First occurrence: fn07b544, line 282
static void exec_1be6cb3ac5fc3851(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var3 = ((uint16)(var1) + (uint16)(context.getParameter<int64>(8)));
	*context.getParameter<int16*>(16) = (uint16)var3;
	context.moveValueStack(-1);
}

// First occurrence: fn07b57a, line 309
static void exec_1591e19c5a2659f6(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1));
	context.writeValueStack<uint16>(-3, (uint16)((uint16)(context.readValueStack<uint16>(-3)) > (uint16)(var2)));
	context.moveValueStack(-2);
}

// First occurrence: fn07b5e8, line 346
static void exec_5a4ef65a8d5454b5(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(context.getParameter<int64>()));
	const int16 var3 = ((int16)(var1) * (int16)(context.getParameter<int64>(8)));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: BossMidSSZ1.getMoveTime, line 32
static void exec_90f4f4ec5e9431a0(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(4))));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(20)));
	context.writeValueStack<int16>(1, (int16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4));
	context.moveValueStack(2);
}

// First occurrence: fn07a2fc, line 128
static void exec_11c3ff3e56294c21(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)-(signed)context.readValueStack<int16>(-1);
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var0);
	context.moveValueStack(-1);
}

// First occurrence: fn07a2fc, line 130
static void exec_d8d0524affa769af(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = OpcodeExecUtils::safeDivide<int16>((int16)var3, (int16)context.getParameter<int64>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2, (uint16)var5);
}

// First occurrence: fn07a35e, line 169
static void exec_0fe9f8a8c2292f4d(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0));
	const uint32 var2 = (uint32)*context.getParameter<uint32*>();
	const uint32 var4 = ((uint32)(var2) + (uint32)(context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var1);
	context.moveValueStack(-1);
}

// First occurrence: fn07a35e, line 174
static void exec_77af7ec2f18a5c7f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) * (int16)(context.getParameter<int64>(16)));
	const int16 var7 = ((uint16)(var5) + (uint16)(context.getParameter<int64>(24)));
	const uint32 var8 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(40)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: fn07a3a8, line 222
static void exec_a98a957a73f3d9b4(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const int16 var2 = 1;
	const int16 var3 = ((uint16)(var1) - (uint16)(var2));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6, (uint16)var3);
	context.moveValueStack(-1);
}

// First occurrence: fn07a496, line 323
static void exec_30f657d3d14e407f(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) <= (uint8)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: fn07a500, line 386
static void exec_da634e986213bdb2(const RuntimeOpcodeContext context)
{
	const int16 var1 = OpcodeExecUtils::safeDivide<int16>((int16)context.readValueStack<int16>(-1), (int16)context.getParameter<int64>());
	const int8 var2 = (uint8)var1;
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: fn07a72c, line 118
static void exec_1ee72740f8b3ab7b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const uint32 var1 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	*context.getParameter<uint32*>(8) = (uint32)var3;
	const uint32 var4 = 1;
	const uint32 var5 = ((uint32)(var3) - (uint32)(var4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5, (uint8)var0);
}

// First occurrence: fn07a85a, line 176
static void exec_676027f2da5495a9(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(8);
	const int16 var3 = ((int16)(var1) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	const uint16 var4 = ((uint16)(var0) + (uint16)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7, (uint16)var4);
}

// First occurrence: fn07a8f4, line 245
static void exec_10b55f2728608c56(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = ((uint16)(var0) | (uint16)(var1));
	*context.getParameter<uint16*>(16) = (uint16)var2;
}

// First occurrence: fn07acf2, line 667
static void exec_efe7e786c1b6def2(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<int32>(-1, (int32)((int32)(context.readValueStack<int32>(-1)) <= (int32)(var0)));
}

// First occurrence: fn07acf2, line 683
static void exec_3766f50f1d088535(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(4, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(5);
}

// First occurrence: fn07b02a, line 957
static void exec_5d6c6171ead74fde(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)*context.getParameter<int16*>(16);
	const int16 var6 = ((int16)(var4) >> (int16)((context.getParameter<int64>(24)) & 0x0f));
	const uint16 var7 = ((uint16)(var3) - (uint16)(var6));
	*context.getParameter<uint16*>(32) = (uint16)var7;
}

// First occurrence: fn07b0c2, line 1001
static void exec_64815ee7893ae692(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint32 var9 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = (uint32)var9;
}

// First occurrence: fn07b116, line 1030
static void exec_bb5e0a2e9721038a(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<int32>(-1, (int32)((uint32)(context.readValueStack<int32>(-1)) + (uint32)(var0)));
}

// First occurrence: fn07b12e, line 1038
static void exec_7ebed6b7fe5c462b(const RuntimeOpcodeContext context)
{
	const uint32 var1 = swapBytes32(*context.getParameter<uint32*>(8));
	const int16 var2 = swapBytes16(*context.getParameter<int16*>(16));
	const int32 var5 = ((uint32)(var2) << (uint32)((context.getParameter<int64>(24)) & 0x1f));
	const uint32 var6 = ((uint32)(var1) + (uint32)(var5));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), (uint32)var6);
}

// First occurrence: fn07bfa0, line 676
static void exec_a33f1fcd03df7284(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)*context.getParameter<uint8*>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8, (uint8)var5);
	context.moveValueStack(1);
}

// First occurrence: fn07c39e, line 1023
static void exec_d92aee8fab82af31(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(8)));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var7 = ((uint32)(var5) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
	context.moveValueStack(-1);
}

// First occurrence: fn07c684, line 1314
static void exec_0f6b933a0a02b7a2(const RuntimeOpcodeContext context)
{
	const uint32 var0 = swapBytes32(*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var0) != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn07c9f6, line 1605
static void exec_f1b727ddf639a632(const RuntimeOpcodeContext context)
{
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-1)) * (uint16)(context.getParameter<int64>()));
	const uint16 var2 = ((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1));
	*context.getParameter<uint16*>(8) = (uint16)var2;
	context.moveValueStack(-2);
}

// First occurrence: fn0861d0, line 1871
static void exec_dbd9f6f8e09072d5(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(context.getParameter<int64>()) << (uint32)((var1) & 0x1f));
	const int16 var3 = (uint16)var2;
	*context.getParameter<uint16*>(16) = (uint16)var3;
}

// First occurrence: fn067cba, line 186
static void exec_4c0444b4d7750471(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(16)));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const uint8 var11 = ((uint8)(var9) & (uint8)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) != (uint8)(var11)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.getModdedSoundKey, line 26
static void exec_fe74c8b2fbaf5844(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), (uint64)context.readValueStack<uint64>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Standalone.playAudio, line 60
static void exec_b76a0065c3294b70(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(4), (uint64)var0);
}

// First occurrence: Standalone.playAudio, line 96
static void exec_a13fba8795873bbe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.playAudio, line 97
static void exec_8c22a1d2a0db1cdc(const RuntimeOpcodeContext context)
{
	const uint64 var0 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>());
	const uint64 var1 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>(4));
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) != (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 101
static void exec_e5e1012160fdfbcf(const RuntimeOpcodeContext context)
{
	const uint64 var0 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>());
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(4), (uint64)var0);
}

// First occurrence: Standalone.playAudio, line 174
static void exec_54f50c21ef942797(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.playAudio, line 218
static void exec_0901c3419029945a(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)!var0;
	*context.getParameter<uint8*>(8) = (uint8)var1;
}

// First occurrence: Standalone.playAudio, line 238
static void exec_0a192da127d005c6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 323
static void exec_47666159946bb00e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) == (uint8)(context.getParameter<int64>(4)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 323
static void exec_c9e8d60749d42c6d(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) & (uint32)(var0)));
}

// First occurrence: Standalone.setFastMusicFlag, line 368
static void exec_cd09ee29913b54b8(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) != (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: Standalone.setFastMusicFlag, line 369
static void exec_f41f10de4731a707(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var2 = ((uint8)(var0) | (uint8)(var1));
	*context.getParameter<uint8*>(12) = (uint8)var2;
}

// First occurrence: Standalone.setFastMusicFlag, line 369
static void exec_d47f25a321ccee12(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)*context.getParameter<uint8*>();
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var2 = (uint8)~var1;
	const uint8 var3 = ((uint8)(var0) & (uint8)(var2));
	*context.getParameter<uint8*>(12) = (uint8)var3;
}

// First occurrence: Standalone.setFastMusicFlag, line 382
static void exec_ce57ff124ee8f8e9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: Standalone.setFastMusicFlagWithSpeedup, line 400
static void exec_0df568e6c1a15c3f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(3, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Debugging.debugDraw, line 53
static void exec_a21aa09cfc288e54(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	*context.getParameter<uint8*>() = (uint8)var0;
}

// First occurrence: Debugging.debugDrawDynamicObjects, line 79
static void exec_6742d5dc3eb9cf00(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var7 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var3) - (uint16)(var7)));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(40)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	const uint32 var13 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var15 = ((uint32)(var13) + (uint32)(context.getParameter<int64>(56)));
	const uint8 var16 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var15);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var12) - (uint16)(var16)));
	const uint32 var18 = (uint32)*context.getParameter<uint32*>(64);
	const uint32 var20 = ((uint32)(var18) + (uint32)(context.getParameter<int64>(72)));
	const uint8 var21 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var20);
	const uint8 var23 = ((uint8)(var21) * (uint8)(context.getParameter<int64>(80)));
	const int64 var24 = 1;
	context.writeValueStack<uint8>(2, (uint8)((uint8)(var23) + (uint8)(var24)));
	const uint32 var25 = (uint32)*context.getParameter<uint32*>(88);
	const uint32 var27 = ((uint32)(var25) + (uint32)(context.getParameter<int64>(96)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var27));
	context.moveValueStack(4);
}

// First occurrence: Debugging.debugDrawDynamicObjects, line 79
static void exec_1f4fc18b0aa26444(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) * (uint8)(context.getParameter<int64>()));
	const int64 var2 = 1;
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var1) + (uint8)(var2)));
}

// First occurrence: OxygenCallback.setupCustomSidePanelEntries, line 117
static void exec_7a90c4fa01a72779(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: OxygenCallback.setupCustomSidePanelEntries, line 135
static void exec_5a6697fbb1fbc0dc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	context.writeValueStack<uint8>(1, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(2);
}

// First occurrence: OxygenCallback.setupCustomSidePanelEntries, line 141
static void exec_23ade04efc7a49cb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(40));
	context.moveValueStack(5);
}

// First occurrence: Renderer.drawVdpSpriteWithTint, line 15
static void exec_3a0eb0770dd7d969(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)context.readValueStack<uint8>(-5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<int16>(-6));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)context.readValueStack<int16>(-7));
	context.moveValueStack(-7);
}

// First occurrence: Renderer.drawVdpSpriteWithTint, line 20
static void exec_34c2fbf0baea521d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(5, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(6, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.moveValueStack(7);
}

// First occurrence: Renderer.drawCustomSprite, line 23
static void exec_19abda637c6357b3(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int32>(context.getParameter<uint32>(), (uint32)context.readValueStack<int32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)context.readValueStack<uint8>(-5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)context.readValueStack<uint8>(-6));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)context.readValueStack<int16>(-7));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(28), (uint16)context.readValueStack<int16>(-8));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(32), (uint64)context.readValueStack<uint64>(-9));
	context.moveValueStack(-9);
}

// First occurrence: Renderer.drawCustomSprite, line 27
static void exec_c278a36b3b58d0c3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(7, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<int32>(8, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(32)));
	context.moveValueStack(9);
}

// First occurrence: Renderer.drawCustomSpriteWithTransform, line 30
static void exec_cc9f24690a3be5ed(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<int32>(context.getParameter<uint32>(), (uint32)context.readValueStack<int32>(-1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(4), (uint32)context.readValueStack<int32>(-2));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<int32>(-3));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<int32>(-4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)context.readValueStack<uint32>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)context.readValueStack<uint8>(-7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)context.readValueStack<uint8>(-8));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)context.readValueStack<int16>(-9));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(36), (uint16)context.readValueStack<int16>(-10));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(40), (uint64)context.readValueStack<uint64>(-11));
	context.moveValueStack(-11);
}

// First occurrence: Renderer.drawCustomSpriteWithTransform, line 34
static void exec_dc946fc2015a3e11(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(6, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.writeValueStack<int32>(7, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(28)));
	context.writeValueStack<int32>(8, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(32)));
	context.writeValueStack<int32>(9, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(36)));
	context.writeValueStack<int32>(10, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(40)));
	context.moveValueStack(11);
}

// First occurrence: debugDrawRect, line 39
static void exec_2adab9d797cfcda5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int32>(0, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>()));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: debugDrawRect, line 46
static void exec_56a7e582cd02fceb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int32>(0, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>()));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: Init, line 49
static void exec_113b89a5bfb42704(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: Init, line 51
static void exec_67c4c3ec411a0b34(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: Init, line 52
static void exec_717e099d69b26355(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (int64)1);
	context.moveValueStack(3);
}

// First occurrence: PostFrameUpdate, line 90
static void exec_1d1fcf6bf36a30b3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) == (uint8)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)(uint8)var2);
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 96
static void exec_f7b7faf2ee005ba4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readValueStack<uint16>(-1);
	const int32 var2 = OpcodeExecUtils::safeDivide<int32>((int32)var0, (int32)context.getParameter<int64>());
	context.writeLocalVariable<int32>(context.getParameter<uint32>(8), (uint32)var2);
	context.moveValueStack(-1);
}

// First occurrence: PostFrameUpdate, line 98
static void exec_06ea3baa0ab92712(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = swapBytes16(*context.getParameter<uint16*>(16));
	const int32 var7 = ((uint32)(var3) - (uint32)(var5));
	const int32 var8 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(24));
	const int32 var9 = ((uint32)(var7) - (uint32)(var8));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(28), (uint32)var9);
}

// First occurrence: PostFrameUpdate, line 104
static void exec_d509d60fa8bbf21b(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int32 var3 = ((uint32)(var0) & (uint32)(var1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)var3);
}

// First occurrence: PostFrameUpdate, line 105
static void exec_080a9baeff004597(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var3 = OpcodeExecUtils::safeDivide<uint16>((uint16)var1, (uint16)context.getParameter<int64>(12));
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(var3)));
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 105
static void exec_2fc6a821744cce2f(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int32 var3 = 1;
	const int32 var4 = ((uint32)(var1) + (uint32)(var3));
	const int32 var5 = ((uint32)(var0) - (uint32)(var4));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(12), (uint32)var5);
}

// First occurrence: PostFrameUpdate, line 109
static void exec_9759e927c07e127d(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) >= (uint32)(var0)));
}

// First occurrence: PostFrameUpdate, line 111
static void exec_64396c1034e4e086(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var2 = ((int32)(var0) * (int32)(context.getParameter<int64>(4)));
	const int32 var4 = OpcodeExecUtils::safeDivide<int32>((int32)var2, (int32)context.getParameter<int64>(12));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(20), (uint32)var4);
}

// First occurrence: PostFrameUpdate, line 113
static void exec_a39c0c523d7117c0(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) > (uint32)(var0)));
}

// First occurrence: PostFrameUpdate, line 115
static void exec_1ab3b456e8db8895(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int32 var1 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(4));
	context.writeValueStack<int32>(0, (int32)((int32)(var0) * (int32)(var1)));
	context.writeValueStack<int32>(1, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: PostFrameUpdate, line 115
static void exec_a7e90fca5962b22e(const RuntimeOpcodeContext context)
{
	const int32 var0 = OpcodeExecUtils::safeDivide<int32>((int32)context.readValueStack<int32>(-2), (int32)context.readValueStack<int32>(-1));
	context.writeLocalVariable<int32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-2);
}

// First occurrence: PostFrameUpdate, line 116
static void exec_d7e696412482a4cc(const RuntimeOpcodeContext context)
{
	const int32 var0 = (uint32)context.readLocalVariable<int32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<int32>(0, (int32)((int32)(var0) > (int32)(var1)));
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 126
static void exec_878f3b30ee819393(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(16)));
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(20)));
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: PostFrameUpdate, line 129
static void exec_80396db5fb2e7137(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	const int64 var1 = 0;
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var0) != (uint16)(var1)));
}

// First occurrence: PostFrameUpdate, line 132
static void exec_ecdb5dc92f9e636d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>());
	context.writeValueStack<int32>(2, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int32>(3, (int32)(uint32)context.readLocalVariable<int32>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: PostFrameUpdate, line 143
static void exec_6d4f870502b6e0c1(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	context.writeValueStack<int16>(0, (int16)(uint16)var0);
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(1, (int16)(uint16)var1);
	context.moveValueStack(2);
}

// First occurrence: Standalone.onLevelStart, line 19
static void exec_8fc998ce1e0568bf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) == (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onLevelStart, line 33
static void exec_65cebbc6aab722dc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onLevelStart, line 33
static void exec_c795fb59140b5f52(const RuntimeOpcodeContext context)
{
	const int64 var0 = 1;
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(context.readValueStack<uint16>(-1)) - (uint16)(var0)));
}

// First occurrence: Standalone.onMonitorOpened, line 80
static void exec_4bc1a6fb415660d3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = 1;
	const int32 var1 = ((uint32)(context.readValueStack<int32>(-1)) + (uint32)(var0));
	const int8 var2 = (uint8)var1;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var2);
	context.moveValueStack(-1);
}

// First occurrence: Standalone.onAnimalFreed, line 116
static void exec_d71cf242993095cf(const RuntimeOpcodeContext context)
{
	const uint32 var0 = 1;
	const int32 var1 = ((uint32)(context.readValueStack<int32>(-1)) + (uint32)(var0));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var1);
	context.moveValueStack(-1);
}

// First occurrence: getZoneActInitials, line 49
static void exec_7ac654e746906e58(const RuntimeOpcodeContext context)
{
	const uint64 var0 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>());
	const uint64 var1 = 0ull;
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) == (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: getZoneActInitials, line 52
static void exec_094f0b6e2014efb2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>(8)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	const int64 var1 = 1;
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var0) & (uint16)(var1)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.loadRawLevelData, line 56
static void exec_306fb42febfeeabd(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), (uint64)context.readValueStack<uint64>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Standalone.loadRawLevelData, line 64
static void exec_ce7f1d07399a2daa(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.useMultiSampleCollision, line 28
static void exec_0d50616bea6be444(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var4 = ((uint16)(var2) | (uint16)(context.getParameter<int64>(12)));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var1) != (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 31
static void exec_3ddaad2fa8fa7945(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) | (uint16)(context.getParameter<int64>(8)));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3, (uint16)var2);
}

// First occurrence: Standalone.useMultiSampleCollision, line 112
static void exec_d26182be8511e85b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint32 var4 = ((uint32)(var0) - (uint32)(var3));
	const uint32 var6 = OpcodeExecUtils::safeDivide<uint32>((uint32)var4, (uint32)context.getParameter<int64>(20));
	const int16 var7 = (uint16)var6;
	const uint32 var8 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint32 var10 = ((uint32)(var8) + (uint32)(context.getParameter<int64>(32)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10, (uint16)var7);
}

// First occurrence: Standalone.useMultiSampleCollision, line 124
static void exec_3dd8d37aefc5ab57(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var4 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const int16 var6 = OpcodeExecUtils::safeDivide<int16>((int16)var4, (int16)context.getParameter<int64>(20));
	const uint16 var7 = ((uint16)(var3) + (uint16)(var6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), (uint16)var7);
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_7192993c55f26754(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var2)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_b411d7c4cc7f2dc4(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) < (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_74ae33f059f7e027(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) >= (uint16)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 134
static void exec_dfe097ba44e43acb(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)var2);
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint16 var5 = ((uint16)(var3) + (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var5);
}

// First occurrence: Standalone.debugOutputMultiSampleCollision, line 174
static void exec_721101b43f69d5d9(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint16>(0, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint16>(1, (uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3));
	const uint32 var4 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16));
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(20)));
	const uint16 var7 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6);
	const uint32 var8 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28));
	const uint16 var9 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8);
	context.writeValueStack<uint16>(2, (uint16)((uint16)(var7) - (uint16)(var9)));
	const uint32 var10 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(32));
	const uint32 var12 = ((uint32)(var10) + (uint32)(context.getParameter<int64>(36)));
	const uint16 var13 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12);
	const uint32 var14 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(44));
	const uint32 var16 = ((uint32)(var14) + (uint32)(context.getParameter<int64>(48)));
	const uint16 var17 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var16);
	context.writeValueStack<uint16>(3, (uint16)((uint16)(var13) - (uint16)(var17)));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(56));
	context.moveValueStack(5);
}

// First occurrence: waitForNextFrame, line 85
static void exec_1cfdcbecf28a563d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)*context.getParameter<int16*>());
	context.writeValueStack<int16>(1, (int16)(uint16)*context.getParameter<int16*>(8));
	context.writeValueStack<int16>(2, (int16)(uint16)*context.getParameter<int16*>(16));
	context.writeValueStack<int16>(3, (int16)(uint16)*context.getParameter<int16*>(24));
	context.writeValueStack<int16>(4, (int16)(uint16)*context.getParameter<int16*>(32));
	context.writeValueStack<int16>(5, (int16)(uint16)*context.getParameter<int16*>(40));
	context.moveValueStack(6);
}

// First occurrence: waitForNextFrame, line 104
static void exec_85703fe5a002d7fa(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	context.writeValueStack<uint8>(0, (uint8)(uint8)var0);
	context.writeValueStack<int64>(1, (int64)0);
	context.moveValueStack(2);
}

// First occurrence: waitForNextFrame, line 104
static void exec_cb454cb3db2427fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)~context.readValueStack<uint16>(-1);
	const uint16 var1 = ((uint16)(context.readValueStack<uint16>(-2)) & (uint16)(var0));
	const int8 var2 = (uint8)var1;
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), (uint8)var2);
	context.moveValueStack(-2);
}

// First occurrence: yieldInWhiteScreen, line 113
static void exec_24d5b69f5c8eeb25(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(16));
	context.moveValueStack(6);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 23
static void exec_92dca7f0a988952a(const RuntimeOpcodeContext context)
{
	const int16 var0 = 1;
	const int16 var1 = (uint16)-(signed)var0;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)var1);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 193
static void exec_666bdc2be9f94972(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 1;
	const int64 var2 = (uint64)-(signed)var1;
	const int16 var3 = (uint16)var2;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) != (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 196
static void exec_1b793c5a7a584b65(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var2 = OpcodeExecUtils::safeDivide<uint16>((uint16)var0, (uint16)context.getParameter<int64>(16));
	const uint16 var4 = ((uint16)(var2) & (uint16)(context.getParameter<int64>(24)));
	const int64 var5 = 1;
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var4) + (uint16)(var5)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 197
static void exec_f208f899a0c5f1a6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(8));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) - (uint16)(var1)));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(20));
	const int16 var4 = ((uint16)(var2) - (uint16)(var3));
	context.writeValueStack<int16>(2, (int16)((uint16)(var4) - (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(36));
	context.moveValueStack(6);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 208
static void exec_7a9bd2d3c9fa63e0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint32 var3 = ((uint32)(var0) * (uint32)(context.getParameter<int64>(8)));
	const uint8 var4 = *context.getParameter<uint8*>(16);
	const uint32 var7 = ((uint32)(var4) * (uint32)(context.getParameter<int64>(24)));
	const uint32 var8 = ((uint32)(var3) + (uint32)(var7));
	const uint8 var9 = *context.getParameter<uint8*>(32);
	const uint32 var11 = ((uint32)(var8) + (uint32)(var9));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(40), (uint32)var11);
}

// First occurrence: MainMenuBG.Run, line 51
static void exec_f2a5a671578f6cad(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint16>(2, (uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: MainMenuBG.Run, line 68
static void exec_d2553f7b59f01294(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) - (uint16)(var3)));
	context.moveValueStack(1);
}

// First occurrence: MainMenuBG.Run, line 69
static void exec_2b39b32ed6abcc11(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) + (uint16)(var1)));
	const uint16 var2 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var2) ^ (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: MainMenuBG.Run, line 70
static void exec_f6d11a9f90347e99(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) + (uint16)(context.getParameter<int64>(4)));
	const uint16 var3 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var2) - (uint16)(var3)));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var4) ^ (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: MainMenuBG.Run, line 97
static void exec_72dd420df9ca8f13(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)*context.getParameter<int16*>(4);
	const uint16 var2 = ((uint16)(var0) + (uint16)(var1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), (uint16)var2);
}

// First occurrence: MainMenuBG.Run, line 117
static void exec_d97e45175f5f1625(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)*context.getParameter<int16*>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 32
static void exec_a4edddef519d316d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) & (uint16)(context.getParameter<int64>(16)));
	const int64 var6 = 0;
	const uint16 var7 = ((uint16)(var5) != (uint16)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var7);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 71
static void exec_31be01e5f24b8333(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20)));
	context.writeValueStack<int16>(3, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 85
static void exec_06af44bd7ca2288b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint32>(2, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 87
static void exec_4ead83648f76fb98(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 94
static void exec_74f9e6c8e743c816(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) % (uint16)(context.getParameter<int64>(16)));
	const int8 var5 = (uint8)var4;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)var5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 95
static void exec_bc8edae1dce9a220(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const int64 var1 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 95
static void exec_ac9a9107db28980b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 95
static void exec_27e9aa4b697e9d8c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 106
static void exec_441430934e1097c1(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint16 var3 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(8)));
	const uint16 var5 = ((uint16)(var3) + (uint16)(context.getParameter<int64>(16)));
	const uint8 var6 = *context.getParameter<uint8*>(24);
	const uint16 var8 = ((uint16)(var5) - (uint16)(var6));
	const uint16 var10 = OpcodeExecUtils::safeDivide<uint16>((uint16)var8, (uint16)context.getParameter<int64>(32));
	const uint16 var12 = ((uint16)(var10) % (uint16)(context.getParameter<int64>(40)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), (uint16)var12);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 108
static void exec_d149fedf17d1eb18(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 116
static void exec_1c26b6da650b593b(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var4 = ((uint16)(var2) % (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 117
static void exec_08b72e48d1a13855(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	context.writeValueStack<uint16>(1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 124
static void exec_feaabe7ee492fc6a(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var1) <= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 126
static void exec_809e943c361c3abb(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint16 var2 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1);
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var2) & (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: Standalone.onWriteToSpriteTable, line 131
static void exec_af9b685b148f4b92(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 143
static void exec_5afb26d666e66c8d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var3) & (uint8)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 151
static void exec_7e92d25926f82498(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) <= (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 155
static void exec_3920b1ed04df3d52(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const int64 var1 = 1;
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 168
static void exec_3cb38890513094b1(const RuntimeOpcodeContext context)
{
	const uint64 var0 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) != (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 170
static void exec_cd79f97b51a8ae47(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	const int64 var1 = 1;
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var0) + (uint16)(var1)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 187
static void exec_9bcec21071ea663d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(16)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	context.writeValueStack<int16>(1, (int16)((int16)(var3) * (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 189
static void exec_9b70ce2e9931e5b3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(6, (int64)0);
	context.writeValueStack<uint8>(7, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(8);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 199
static void exec_20abad276f29ab12(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	context.writeValueStack<int16>(1, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const int64 var5 = 1;
	context.writeValueStack<uint16>(4, (uint16)((uint16)(var4) - (uint16)(var5)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 200
static void exec_6e8671ae89e2565a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 232
static void exec_5fb1dd1f06b715e9(const RuntimeOpcodeContext context)
{
}

// First occurrence: Standalone.onWriteToSpriteTable, line 239
static void exec_82959ee303981fa8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)0);
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(20)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	context.writeValueStack<uint8>(4, (uint8)(uint8)var5);
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 247
static void exec_b34c510f6033006e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(12))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const int64 var5 = 1;
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var4) + (uint16)(var5)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 254
static void exec_ac0fc414362b0ab4(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(24)));
	const uint8 var7 = ((uint8)(context.getParameter<int64>()) - (uint8)(var6));
	const uint8 var9 = ((uint8)(var7) & (uint8)(context.getParameter<int64>(32)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), (uint8)var9);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 255
static void exec_02c15a244e3cbc82(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const uint8 var0 = *context.getParameter<uint8*>(8);
	const int64 var1 = 1;
	const uint8 var2 = ((uint8)(var0) >> (uint8)((var1) & 0x07));
	const int64 var3 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var2) & (uint8)(var3)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 268
static void exec_e9964e021f50358f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(3, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 275
static void exec_59bead6d0dddcbfe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 286
static void exec_5db6c9ab096733b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(32)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 288
static void exec_503f5e22e33919be(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(12));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(28)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(4, (uint8)(uint8)var3);
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 298
static void exec_84c52dc56d45abe5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)1);
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 358
static void exec_f64bc45c666747c6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 366
static void exec_471b00899fac1cee(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 429
static void exec_2a03f405cf235d3b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = ((uint8)(var2) + (uint8)(context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 436
static void exec_5b6cc4bff0a17e0b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint32>(2, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(48));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 471
static void exec_d29f0fd20ca4dbd3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(12))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)((uint64)(context.getParameter<int64>(32)) | (uint64)(context.getParameter<int64>(40))));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 481
static void exec_e50cc06097a502ff(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(var2) == (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: Standalone.onWriteToSpriteTable, line 483
static void exec_d82318effee3df19(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(4))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	context.writeValueStack<int16>(1, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	const uint16 var4 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32));
	const int64 var5 = 1;
	context.writeValueStack<uint16>(4, (uint16)((uint16)(var4) - (uint16)(var5)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 484
static void exec_2671cb13bf8d2b67(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(-1, (int16)((uint16)(context.readValueStack<int16>(-1)) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 485
static void exec_d58328b978ea6a0b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(var0) * (uint32)(context.getParameter<int64>())));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 491
static void exec_a4b26783132c9aab(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 492
static void exec_b974a3b49f7c1e30(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(-1, (int16)((uint16)(context.readValueStack<int16>(-1)) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(12));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 493
static void exec_3904f7d3ba6356fb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1));
	context.writeValueStack<uint16>(-1, (uint16)((uint16)(var0) * (uint16)(context.getParameter<int64>())));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 528
static void exec_e6a1965c0e9a760e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) - (uint16)(context.getParameter<int64>(12))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, (int64)0);
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(40));
	context.writeValueStack<uint16>(6, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(7);
}

// First occurrence: Standalone.onDrawVdpSprite, line 574
static void exec_52eaa63cb02007b5(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<int16>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 581
static void exec_2dc57393882b1a5d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(20));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 582
static void exec_aa8d04dd3302c77d(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(20));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 603
static void exec_9ec2d1ba2d328b15(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) * (uint8)(context.getParameter<int64>(16)));
	const uint8 var6 = 1;
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var10 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9);
	const uint8 var11 = ((uint8)(var6) - (uint8)(var10));
	const uint8 var12 = ((uint8)(var5) + (uint8)(var11));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), (uint8)var12);
}

// First occurrence: Standalone.onDrawVdpSprite, line 604
static void exec_478d156657d71cb0(const RuntimeOpcodeContext context)
{
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8));
	const uint8 var3 = ((uint8)(var1) * (uint8)(context.getParameter<int64>(12)));
	const uint8 var4 = ((uint8)(context.getParameter<int64>()) - (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var4);
}

// First occurrence: Standalone.onDrawVdpSprite, line 609
static void exec_07c9c814104b4b01(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 622
static void exec_9da3d5e219b488a6(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint8 var3 = OpcodeExecUtils::safeDivide<uint8>((uint8)var1, (uint8)context.getParameter<int64>(8));
	const uint8 var4 = ((uint8)(var0) - (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var4);
}

// First occurrence: Standalone.onDrawVdpSprite, line 627
static void exec_95aa2508823b8839(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)(uint8)var0);
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var3 = ((uint16)(var1) & (uint16)(context.getParameter<int64>(12)));
	const int8 var4 = (uint8)var3;
	context.writeValueStack<int8>(1, (int8)((uint8)(var4) - (uint8)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onDrawVdpSprite, line 627
static void exec_815a8b089beeeee2(const RuntimeOpcodeContext context)
{
	const uint8 var1 = ((uint8)(context.readValueStack<uint8>(-1)) * (uint8)(context.getParameter<int64>()));
	const uint16 var3 = ((uint16)(context.readValueStack<uint16>(-2)) * (uint16)(var1));
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const int8 var6 = (uint8)var5;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var6);
	context.moveValueStack(-2);
}

// First occurrence: Standalone.onDrawVdpSprite, line 638
static void exec_522b09f6c59e7a3c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 651
static void exec_f28f90f111ed016e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = *context.getParameter<uint8*>();
	const uint8 var2 = ((uint8)(var0) & (uint8)(context.getParameter<int64>(8)));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var2) - (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onDrawVdpSprite, line 651
static void exec_4d7fa61148ec9a67(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readValueStack<uint8>(-1);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	context.moveValueStack(-1);
}

// First occurrence: Standalone.onDrawVdpSprite, line 652
static void exec_cb18f33f919c1504(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const uint32 var2 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36));
	const uint32 var3 = ((uint32)(context.getParameter<int64>(28)) * (uint32)(var2));
	context.writeValueStack<uint32>(5, (uint32)((uint32)(context.getParameter<int64>(20)) - (uint32)(var3)));
	const uint32 var5 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(48));
	context.writeValueStack<uint32>(6, (uint32)((uint32)(context.getParameter<int64>(40)) * (uint32)(var5)));
	context.moveValueStack(7);
}

// First occurrence: Standalone.onDrawVdpSprite, line 661
static void exec_ef1864bf3b25adbe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var2 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1);
	const uint32 var4 = ((uint32)(var2) >> (uint32)((context.getParameter<int64>(32)) & 0x1f));
	context.writeValueStack<uint32>(4, (uint32)((uint32)(context.getParameter<int64>(16)) + (uint32)(var4)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 668
static void exec_52bd6b78516c0f90(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(12))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(2, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (int64)0);
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(4, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6));
	const uint16 var7 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48));
	const int64 var8 = 1;
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var7) + (uint16)(var8)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 690
static void exec_e7d96c0b0d09f3f5(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<int16>(-6));
	context.moveValueStack(-6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 700
static void exec_886497b145d64776(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)((uint64)(context.getParameter<int64>(16)) ^ (uint64)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 701
static void exec_2fa8e0b171d3afb4(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	context.writeValueStack<int16>(1, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (int64)((uint64)(context.getParameter<int64>(32)) ^ (uint64)(context.getParameter<int64>(40))));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 702
static void exec_f2f45e72ea1b51c3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)((uint64)(context.getParameter<int64>(24)) ^ (uint64)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 707
static void exec_0ddedd166d93e575(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 708
static void exec_0e94bbb12b74398b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 709
static void exec_145b144b9e848adc(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(4))));
	const int16 var2 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(12));
	context.writeValueStack<int16>(1, (int16)((uint16)(var2) + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 710
static void exec_0741f8d7609e9b0b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(1, (int16)((uint16)(var0) + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 725
static void exec_abff9e22242f851e(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var3 = swapBytes16(*context.getParameter<uint16*>(16));
	const int16 var4 = ((uint16)(var2) - (uint16)(var3));
	const int16 var6 = ((uint16)(var4) - (uint16)(context.getParameter<int64>(24)));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 746
static void exec_7dbdc9827df1ce51(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	const uint16 var5 = ((uint16)(var3) != (uint16)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 749
static void exec_a18ec9515fed3783(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint32 var3 = 1;
	const uint32 var4 = ((uint32)(var1) + (uint32)(var3));
	const uint32 var6 = ((uint32)(var4) & (uint32)(context.getParameter<int64>(12)));
	const uint32 var7 = ((uint32)(var0) + (uint32)(var6));
	const uint8 var8 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), (uint16)var8);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 760
static void exec_179f42293c8b365d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint16 var2 = ((uint16)(var0) * (uint16)(context.getParameter<int64>(4)));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(20)));
	const uint16 var6 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5);
	const uint16 var8 = ((uint16)(var6) * (uint16)(context.getParameter<int64>(28)));
	const uint16 var9 = ((uint16)(var2) + (uint16)(var8));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), (uint16)var9);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 764
static void exec_0a889e140b03d23b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const int16 var2 = ((uint16)(var0) - (uint16)(var1));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(12);
	const int8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	const int16 var6 = ((uint16)(var2) + (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)var6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 765
static void exec_3bc2c2c4412ddaa9(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4));
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(4, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 784
static void exec_277cef308738999a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 785
static void exec_a444807a321046ba(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<int16>(0, (int16)((uint16)(var0) + (uint16)(var1)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.renderWithStandardPacking, line 799
static void exec_dbdd2956417c008c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.readValueStack<uint32>(-3));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<int16>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.renderWithStandardPacking, line 801
static void exec_595a6767664987c0(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var5 = ((uint16)(var3) >> (uint16)((context.getParameter<int64>(16)) & 0x0f));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var5) & (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.renderWithStandardPacking, line 802
static void exec_9bdd787a45db3afc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	context.writeValueStack<uint32>(0, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0));
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(8)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3));
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = ((uint32)(var4) + (uint32)(context.getParameter<int64>(24)));
	context.writeValueStack<uint32>(2, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6));
	const uint32 var7 = (uint32)*context.getParameter<uint32*>(32);
	const uint32 var9 = ((uint32)(var7) + (uint32)(context.getParameter<int64>(40)));
	context.writeValueStack<uint8>(3, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.renderWithStandardPacking, line 804
static void exec_29d745953ae6db3a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(24)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(4, (uint8)(uint8)var3);
	context.writeValueStack<uint8>(5, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 812
static void exec_4dfe1924018a1239(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(28)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5));
	context.writeValueStack<int64>(3, (int64)0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 819
static void exec_8fa77db22634cd5f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), (uint32)context.readValueStack<uint32>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<int16>(-6));
	context.moveValueStack(-6);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 825
static void exec_c9df5e9728bbb2b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(12)));
	context.writeValueStack<uint32>(1, (uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2));
	const uint32 var3 = (uint32)*context.getParameter<uint32*>(20);
	const uint32 var5 = ((uint32)(var3) + (uint32)(context.getParameter<int64>(28)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5));
	context.writeValueStack<int64>(3, (int64)0);
	const uint16 var6 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36));
	const uint16 var8 = OpcodeExecUtils::safeDivide<uint16>((uint16)var6, (uint16)context.getParameter<int64>(40));
	const uint32 var9 = (uint32)*context.getParameter<uint32*>(48);
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(56)));
	const uint16 var12 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11);
	context.writeValueStack<uint16>(4, (uint16)((uint16)(var8) - (uint16)(var12)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.renderCutsceneKnuckles, line 835
static void exec_01fe7ae71d15329d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint8>(1, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const uint32 var0 = (uint32)*context.getParameter<uint32*>(12);
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(20)));
	context.writeValueStack<uint8>(2, (uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2));
	context.moveValueStack(3);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 35
static void exec_5c8a743d54a0f525(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), (uint16)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<int16>(-5));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(20), (uint16)context.readValueStack<int16>(-6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), (uint8)context.readValueStack<uint8>(-7));
	context.moveValueStack(-7);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 40
static void exec_306a9965d437c91c(const RuntimeOpcodeContext context)
{
	const uint64 var0 = (uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>());
	const int64 var1 = 0;
	context.writeValueStack<uint64>(0, (uint64)((uint64)(var0) == (uint64)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 55
static void exec_4a398a28bcfb19e6(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const int8 var1 = (uint8)var0;
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var1);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 75
static void exec_28c9576f66de65db(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.drawCharacterSprite, line 84
static void exec_85ec8f2307ca6abd(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(4), (uint16)context.readValueStack<int16>(-2));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(8), (uint16)context.readValueStack<int16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.drawCharacterSprite, line 86
static void exec_25f7445a38cc538c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const uint8 var2 = ((uint8)(var0) == (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: Standalone.drawCharacterSprite, line 99
static void exec_167a77942a5ae954(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 99
static void exec_a2de81697e699295(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	const uint8 var7 = ((uint8)(var5) & (uint8)(context.getParameter<int64>(12)));
	const int64 var8 = 0;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var7) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 106
static void exec_65eea664bd1bca28(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) >= (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 106
static void exec_7fb92cb9b817040e(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) <= (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 112
static void exec_e711987897fa641c(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) == (uint32)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: Standalone.drawCharacterSprite, line 120
static void exec_44e098925466399b(const RuntimeOpcodeContext context)
{
	const int16 var0 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>());
	const uint16 var1 = swapBytes16(*context.getParameter<uint16*>(4));
	const uint16 var3 = ((uint16)(var1) * (uint16)(context.getParameter<int64>(12)));
	const uint16 var5 = OpcodeExecUtils::safeDivide<uint16>((uint16)var3, (uint16)context.getParameter<int64>(20));
	context.writeValueStack<int16>(0, (int16)((int16)(var0) > (int16)(var5)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 128
static void exec_a697c99f59d2d180(const RuntimeOpcodeContext context)
{
	const uint64 var0 = 0ull;
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), (uint64)var0);
}

// First occurrence: Standalone.drawCharacterSprite, line 133
static void exec_e6f14eedd283960a(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint16>(0, (uint16)((uint16)(var0) == (uint16)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 138
static void exec_529926b58262533d(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var1 = 1;
	const uint16 var2 = ((uint16)(var0) >> (uint16)((var1) & 0x0f));
	const uint16 var3 = 1;
	const uint16 var4 = ((uint16)(var2) & (uint16)(var3));
	const uint16 var6 = ((uint16)(var4) + (uint16)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)var6);
}

// First occurrence: Standalone.drawCharacterSprite, line 144
static void exec_072255c145f6efcb(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const uint16 var2 = ((uint16)(var0) & (uint16)(context.getParameter<int64>(8)));
	const uint16 var4 = ((uint16)(var2) + (uint16)(context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var4);
}

// First occurrence: Standalone.drawCharacterSprite, line 148
static void exec_ffa69e0cd41859b2(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = OpcodeExecUtils::safeDivide<uint8>((uint8)var2, (uint8)context.getParameter<int64>(12));
	const uint8 var6 = ((uint8)(var4) * (uint8)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var6);
}

// First occurrence: Standalone.drawCharacterSprite, line 149
static void exec_e4278a78a2591e40(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const int64 var4 = 1;
	const uint8 var5 = ((uint8)(var3) & (uint8)(var4));
	const uint8 var6 = *context.getParameter<uint8*>(16);
	const int64 var7 = 0;
	const uint8 var8 = ((uint8)(var6) == (uint8)(var7));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var5) == (uint8)(var8)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 151
static void exec_3a2b4dcf737b0ca5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) - (uint8)(context.getParameter<int64>(4)));
	const uint8 var4 = ((uint8)(var2) % (uint8)(context.getParameter<int64>(12)));
	const uint8 var6 = ((uint8)(var4) + (uint8)(context.getParameter<int64>(20)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), (uint8)var6);
}

// First occurrence: Standalone.drawCharacterSprite, line 160
static void exec_a42eef9e51985822(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) >= (uint8)(var1)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 162
static void exec_d3da70dbbb6361c5(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	const uint8 var4 = ((uint8)(var2) % (uint8)(context.getParameter<int64>(4)));
	const uint8 var5 = 1;
	const uint8 var6 = ((uint8)(var4) + (uint8)(var5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var6);
}

// First occurrence: Standalone.drawCharacterSprite, line 189
static void exec_3ed46378b34dcd59(const RuntimeOpcodeContext context)
{
	const uint32 var1 = ((uint32)(context.readValueStack<uint32>(-1)) + (uint32)(context.getParameter<int64>()));
	const uint8 var2 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1);
	const uint8 var3 = 1;
	const uint8 var4 = ((uint8)(var2) & (uint8)(var3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)var4);
	context.moveValueStack(-1);
}

// First occurrence: Standalone.drawCharacterSprite, line 194
static void exec_4f9e8fb80fa46c1b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)((uint8)(context.readValueStack<uint8>(-1)) <= (uint8)(context.getParameter<int64>())));
}

// First occurrence: Standalone.drawCharacterSprite, line 199
static void exec_b940b524057ff819(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(4);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(12)));
	const uint8 var4 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3);
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) != (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 201
static void exec_ea84ca223ba4c51c(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(4));
	const uint8 var2 = ((uint8)(var0) - (uint8)(var1));
	context.writeLocalVariable<int8>(context.getParameter<uint32>(8), (uint8)var2);
}

// First occurrence: Standalone.drawCharacterSprite, line 202
static void exec_83bf1a8422a2ab90(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int8>(0, (int8)(uint8)context.readLocalVariable<int8>(context.getParameter<uint32>()));
	context.writeValueStack<int8>(1, (int8)(uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (int64)(uint64)-(signed)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: Standalone.drawCharacterSprite, line 202
static void exec_84f97c724dcc3bdf(const RuntimeOpcodeContext context)
{
	const int8 var0 = ((uint8)(context.readValueStack<int8>(-2)) + (uint8)(context.readValueStack<int8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)var0);
	context.moveValueStack(-2);
}

// First occurrence: Standalone.drawCharacterSprite, line 207
static void exec_ebebc12f9c47a18e(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	*context.getParameter<uint8*>(4) = (uint8)var0;
}

// First occurrence: Standalone.drawCharacterSprite, line 271
static void exec_b8662e267ff26ce3(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)var2);
}

// First occurrence: Standalone.drawCharacterSprite, line 280
static void exec_4830954f26b59049(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.drawCharacterSprite, line 284
static void exec_d62e31bf09409d73(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)*context.getParameter<uint32*>(8);
	const uint32 var3 = ((uint32)(var1) + (uint32)(context.getParameter<int64>(16)));
	const uint16 var4 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3);
	const uint16 var5 = ((uint16)(context.getParameter<int64>()) - (uint16)(var4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: Standalone.drawCharacterSprite, line 296
static void exec_dbcd42028ddd0548(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var1 = 1;
	const uint8 var2 = ((uint8)(var0) ^ (uint8)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: Standalone.drawCharacterSprite, line 302
static void exec_9324f86aaadc3ae0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	context.writeValueStack<uint8>(4, (uint8)((uint8)(var0) | (uint8)(context.getParameter<int64>(20))));
	context.writeValueStack<int64>(5, (int64)context.getParameter<int64>(28));
	context.writeValueStack<uint8>(6, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.writeValueStack<int64>(7, (int64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(8, (int64)context.getParameter<int64>(48));
	context.moveValueStack(9);
}

// First occurrence: Standalone.drawCharacterSprite, line 306
static void exec_f7c25eb13d22ad37(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, (uint16)(uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(7, (int64)context.getParameter<int64>(28));
	context.moveValueStack(8);
}

// First occurrence: Standalone.drawCharacterSprite, line 320
static void exec_34706f43bfcadd8d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var5 = ((uint8)(var3) & (uint8)(context.getParameter<int64>(12)));
	const int64 var6 = 0;
	const uint8 var7 = ((uint8)(var5) != (uint8)(var6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var7);
}

// First occurrence: Standalone.drawCharacterSprite, line 331
static void exec_f2acb05ed8da8b5b(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const int16 var5 = ((int16)(var3) >> (int16)((context.getParameter<int64>(16)) & 0x0f));
	context.writeValueStack<int16>(0, (int16)(uint16)var5);
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(24);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(32)));
	const uint8 var9 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8);
	const int64 var10 = 1;
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var9) & (uint8)(var10)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.drawCharacterSprite, line 331
static void exec_879d216c9de266de(const RuntimeOpcodeContext context)
{
	const int64 var0 = ((int64)(context.readValueStack<int64>(-2)) * (int64)(context.readValueStack<int64>(-1)));
	const int16 var1 = (uint16)var0;
	context.writeLocalVariable<int16>(context.getParameter<uint32>(), (uint16)var1);
	context.moveValueStack(-2);
}

// First occurrence: Standalone.drawCharacterSprite, line 336
static void exec_863504d96b33da85(const RuntimeOpcodeContext context)
{
	const uint16 var0 = swapBytes16(*context.getParameter<uint16*>());
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(8));
	const int8 var3 = ((int8)(var1) * (int8)(context.getParameter<int64>(12)));
	const int8 var5 = ((uint8)(var3) + (uint8)(context.getParameter<int64>(20)));
	const uint16 var7 = ((uint16)(var0) - (uint16)(var5));
	const int8 var8 = (uint8)var7;
	const uint8 var9 = (uint8)var8;
	const uint32 var11 = ((uint32)(var9) + (uint32)(context.getParameter<int64>(28)));
	*context.getParameter<uint32*>(36) = (uint32)var11;
}

// First occurrence: Standalone.drawCharacterSprite, line 337
static void exec_c2efcdfe19757a7d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint16 var1 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0);
	const uint16 var2 = swapBytes16(*context.getParameter<uint16*>(8));
	const uint16 var3 = ((uint16)(var1) - (uint16)(var2));
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(16));
	const int16 var6 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	const int16 var7 = ((int16)(var4) * (int16)(var6));
	const int16 var9 = OpcodeExecUtils::safeDivide<int16>((int16)var7, (int16)context.getParameter<int64>(24));
	const uint16 var10 = ((uint16)(var3) + (uint16)(var9));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(32), (uint16)var10);
}

// First occurrence: Standalone.drawCharacterSprite, line 338
static void exec_c66f13cf3c53b9dd(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(8)));
	const uint16 var3 = OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2);
	const uint16 var4 = swapBytes16(*context.getParameter<uint16*>(16));
	const uint16 var5 = ((uint16)(var3) - (uint16)(var4));
	context.writeLocalVariable<int16>(context.getParameter<uint32>(24), (uint16)var5);
}

// First occurrence: Standalone.drawCharacterSprite, line 342
static void exec_851c021008975841(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const int8 var3 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(12));
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var2) + (uint32)(var3)));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.drawCharacterSprite, line 343
static void exec_be8ed53595a1fdf6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(1, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(2, (int16)(uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20));
	const int8 var1 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(24));
	context.writeValueStack<uint16>(5, (uint16)((uint16)(var0) - (uint16)(var1)));
	context.writeValueStack<uint8>(6, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const int8 var4 = (uint8)context.readLocalVariable<int8>(context.getParameter<uint32>(40));
	const int8 var6 = ((int8)(var4) * (int8)(context.getParameter<int64>(44)));
	context.writeValueStack<int8>(7, (int8)((uint8)(context.getParameter<int64>(32)) - (uint8)(var6)));
	context.moveValueStack(8);
}

// First occurrence: CreditsDataGenerator.build, line 27
static void exec_51db50e47ddec25d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint32 var3 = OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2);
	context.writeValueStack<uint32>(0, (uint32)((uint32)(var3) == (uint32)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: CreditsDataGenerator.build, line 27
static void exec_8e1c3f8fd5195139(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const uint32 var2 = ((uint32)(var0) + (uint32)(context.getParameter<int64>(4)));
	const uint8 var3 = OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2);
	const uint8 var4 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var3) == (uint8)(var4)));
	context.moveValueStack(1);
}

// First occurrence: CreditsDataGenerator.build, line 41
static void exec_609e006c838c395e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 42
static void exec_99417f68c643bfb9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 58
static void exec_0edf1a580250f3eb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 150
static void exec_7320b2338023ddbe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 151
static void exec_a68b3a3ab2258519(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 168
static void exec_ae8af81a991ef56a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 172
static void exec_dfa2a06fe8d4510b(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 180
static void exec_83a65eb4aa8ce193(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 206
static void exec_87b0e6984519a1e5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 207
static void exec_aa654036fe7b1bd0(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const int64 var1 = 1;
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(var1)));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 209
static void exec_ac1ce868b6bb9068(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	context.writeValueStack<uint8>(0, (uint8)((uint8)(var0) + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (int64)1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 216
static void exec_688e400a16fe6df5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.addLine, line 227
static void exec_18f92109e1625274(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), (uint64)context.readValueStack<uint64>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: CreditsDataGenerator.addLine, line 235
static void exec_8109f65dd3d0dab6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	context.writeValueStack<uint8>(1, (uint8)((uint8)(var0) == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: CreditsDataGenerator.addLine, line 235
static void exec_01ad2b33b8870a39(const RuntimeOpcodeContext context)
{
	const uint32 var0 = ((uint32)(context.readValueStack<uint32>(-2)) + (uint32)(context.readValueStack<uint32>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), (uint32)var0);
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4));
	const int8 var2 = 1;
	const uint32 var3 = ((uint32)(var1) + (uint32)(var2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)var3);
	context.moveValueStack(-2);
}

// First occurrence: CreditsDataGenerator.addLine, line 238
static void exec_cfb74624e175b715(const RuntimeOpcodeContext context)
{
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var3 = OpcodeExecUtils::safeDivide<uint32>((uint32)var1, (uint32)context.getParameter<int64>(12));
	const uint32 var4 = ((uint32)(context.getParameter<int64>()) - (uint32)(var3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), (uint32)var4);
}

// First occurrence: CreditsDataGenerator.addLine, line 239
static void exec_a965a2a4a2a94bcc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)(uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(3, (uint64)(uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.addLine, line 243
static void exec_71e9a934566030b8(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), (uint64)context.readValueStack<uint64>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), (uint8)context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: CreditsDataGenerator.addLine, line 245
static void exec_688cd2a7a58c74fe(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) - (uint32)(context.getParameter<int64>(8)));
	const int16 var3 = (uint16)var2;
	const uint32 var4 = (uint32)*context.getParameter<uint32*>(16);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4, (uint16)var3);
}

// First occurrence: CreditsDataGenerator.addLine, line 249
static void exec_bcac19856dc3c7bf(const RuntimeOpcodeContext context)
{
	const uint8 var0 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>());
	const uint8 var2 = ((uint8)(var0) * (uint8)(context.getParameter<int64>(4)));
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12));
	const uint8 var4 = ((uint8)(var2) + (uint8)(var3));
	const uint32 var5 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var6 = 1;
	const uint32 var7 = ((uint32)(var5) + (uint32)(var6));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7, (uint8)var4);
}

// First occurrence: CreditsDataGenerator.addLine, line 255
static void exec_b5d25b6de308cabc(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var1 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8));
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2, (uint8)context.readValueStack<uint8>(-1));
	const uint32 var3 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12));
	const int8 var4 = 1;
	const uint32 var5 = ((uint32)(var3) + (uint32)(var4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), (uint32)var5);
	context.moveValueStack(-1);
}

// First occurrence: CreditsDataGenerator.addLine, line 263
static void exec_9026bbf918db0155(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const int8 var1 = 1;
	const uint32 var2 = ((uint32)(var0) + (uint32)(var1));
	*context.getParameter<uint32*>(8) = (uint32)var2;
	const uint8 var3 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16));
	const int8 var4 = 1;
	const uint8 var5 = ((uint8)(var3) + (uint8)(var4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), (uint8)var5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 19
static void exec_40a5947fa97cbb84(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 109
static void exec_9bbeaeb6ff86b0bf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(-1, (uint32)((uint32)(context.readValueStack<uint32>(-1)) != (uint32)(context.getParameter<int64>())));
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 127
static void exec_ad9603c492c129d2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 137
static void exec_e1521bcbc5081d05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 258
static void exec_eaaf229ff282c5ad(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)((uint64)(context.getParameter<int64>(16)) | (uint64)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 263
static void exec_2a8a9bd903088bb4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 291
static void exec_025383c706c07f52(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 321
static void exec_f6fe2801641e9e37(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ2, line 341
static void exec_b75383c124be1123(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ2, line 449
static void exec_360f9bce39077285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_HCZ2, line 513
static void exec_fe226e3ec0ec5e4f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(24));
	const int64 var0 = 1;
	context.writeValueStack<int64>(4, (int64)((uint64)(var0) | (uint64)(context.getParameter<int64>(32))));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 600
static void exec_9758d59f88924585(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)0);
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 882
static void exec_3e84b4cca434a90d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(8)) + (uint16)(var1)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 883
static void exec_934234cf1833fe8d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(8)) + (uint16)(var1)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(36));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 1052
static void exec_908d024c0b79f285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)0);
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_CNZ2, line 1145
static void exec_eef5f904dd83d5cf(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)0);
	const int64 var0 = 1;
	context.writeValueStack<int64>(4, (int64)((uint64)(var0) | (uint64)(context.getParameter<int64>(24))));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_LBZ1, line 176
static void exec_58eb1d408b47c700(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (int64)1);
	const int64 var0 = 1;
	context.writeValueStack<int64>(4, (int64)((uint64)(var0) | (uint64)(context.getParameter<int64>(24))));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_LBZ1, line 502
static void exec_647586cc9b205805(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (int64)0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SOZ1, line 109
static void exec_8896b4d9e2ede1fc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	const uint16 var1 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16));
	context.writeValueStack<uint16>(1, (uint16)((uint16)(context.getParameter<int64>(8)) + (uint16)(var1)));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (int64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_LRZ1, line 75
static void exec_3f4c955295717338(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)context.getParameter<int64>(16));
	context.writeValueStack<uint8>(3, (uint8)(uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, (int64)1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ1, line 16
static void exec_bda49e15c235e657(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) - (uint16)(var1)));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ1, line 21
static void exec_6102b3d22b5bff78(const RuntimeOpcodeContext context)
{
	const uint16 var1 = OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>());
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(var1)));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ2, line 237
static void exec_38bea648e4044aa2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1))));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, (int64)0);
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ2, line 240
static void exec_eec5601ca78e7322(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (uint16)((uint16)(context.readValueStack<uint16>(-2)) + (uint16)(context.readValueStack<uint16>(-1))));
	context.writeValueStack<int64>(-1, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (int64)0);
	context.writeValueStack<int64>(2, (int64)0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_DEZ2, line 692
static void exec_a240a7fef01f48b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (int64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (int64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (int64)1);
	context.writeValueStack<int64>(3, (int64)1);
	context.writeValueStack<int64>(4, (int64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 17
static void exec_c2d5dc46c0b69b0e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, (uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint32>(2, (uint32)(uint32)*context.getParameter<uint32*>(16));
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 18
static void exec_ea7cc7427031f68d(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>());
	const int64 var1 = 0;
	const uint32 var2 = ((uint32)(var0) != (uint32)(var1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)var2);
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 142
static void exec_557c7f7369a1d306(const RuntimeOpcodeContext context)
{
	const uint32 var0 = (uint32)*context.getParameter<uint32*>();
	const uint32 var2 = ((uint32)(var0) != (uint32)(context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), (uint8)var2);
}

// First occurrence: LevelObjectTableBuilder.addObject, line 606
static void exec_874cda54250efb3d(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), (uint8)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), (uint8)context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), (uint16)context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), (uint16)context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: LevelObjectTableBuilder.addObject, line 609
static void exec_7a386d679846cdad(const RuntimeOpcodeContext context)
{
	const uint16 var0 = (uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>());
	const uint8 var1 = (uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4));
	const uint16 var4 = ((uint16)(var1) << (uint16)((context.getParameter<int64>(8)) & 0x0f));
	const uint16 var5 = ((uint16)(var0) | (uint16)(var4));
	const uint32 var6 = (uint32)*context.getParameter<uint32*>(16);
	const uint32 var8 = ((uint32)(var6) + (uint32)(context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8, (uint16)var5);
}

// First occurrence: LevelRingsTableBuilder.buildRings_CNZ2, line 546
static void exec_342a082969ffadfc(const RuntimeOpcodeContext context)
{
	const int16 var1 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(8));
	context.writeValueStack<int16>(0, (int16)((uint16)(context.getParameter<int64>()) - (uint16)(var1)));
	const int16 var3 = (uint16)context.readLocalVariable<int16>(context.getParameter<uint32>(20));
	context.writeValueStack<int16>(1, (int16)((uint16)(context.getParameter<int64>(12)) + (uint16)(var3)));
	context.moveValueStack(2);
}


void createNativizedCodeLookup(Nativizer::LookupDictionary& dict)
{
	const char emptyEntries0[] =
	{
		"\xc3\xae\x59\xf1\xf0\x32\x0d\x29\xe0\xb6\xbc\xf0\x3d\x5d\x21\x6a\xd0\xb9\xe2\xf9\x87\x62\x0f\x7d\xfe\x45\xa6\xe9\x5c\xfa\xa2\x99\xa4\xf8\xf0\xb3\x18\x3e\x9b\x11\x99\x4c\x17\xbd\xf0\x2f\x1e\x33\xdf\x39\xfd\x6a\x23\x79\x0d\x17\xb7\x11\x75\x91\xdc\xf6\xef\xd0\x38\xfc\xae\xd9\xe1\xe9\x09\xe3\xc7\x7a\x4a\x67\xb3\xd7\xdb\x14\xf7\xf5\x5e\x97\x9a\x1d\xee\xe5\x06\x1f\x83\x7b\xce\xc1\x83\x94\x1e\x30\xba\xd3\x36\x5e\xea\xc8\x9c\xce\xaa\xd9\xbf\x76\x7d\x40\x81\xfa\xa1\x6e\x1a\x2a\xcb\xf0\xbe\xa2\xe6\xc9\xa4\xfe\x0b\xa9"
		"\xc9\x21\x9d\x47\xf3\x24\xe1\xa5\xe8\x99\x54\x76\xc9\x6c\xe9\x0a\xab\xc9\x49\xdc\xb0\x35\xc4\xcf\xc9\xbf\x0f\x44\xf3\x6f\x79\x8d\x8e\xb5\x01\x8f\x74\xc2\x7e\xa6\xc1\xba\x9c\xb9\x49\xa6\x24\x00\x33\x7c\x18\x16\x4d\xa2\x26\xe9\x5d\x35\x5f\x3e\x3a\x93\x0b\x4c\x57\x17\x9b\x49\x89\x21\xae\x35\x47\x40\x2a\x9e\xe2\xae\x88\x0a\x23\x54\x98\x16\xd1\xff\x96\xf2\x99\xd0\x07\x4f\x9d\x84\x9b\x14\x08\x16\x0a\xb3\x8e\xc2\x43\xb5\x2c\xdb\xe9\x39\xfe\xe6\xac\xfe\x4e\x1f\x86\x43\x25\xff\x98\x83\x31\x65\xd2\x81\x36\x1e\x66\xd0"
		"\x6f\x40\xc8\x7f\xbc\x09\x60\x90\x6b\x6e\x66\x7b\xf4\x9c\x35\x0a\x30\xd5\x04\xfc\x70\x85\xfa\xa1\xc9\x1c\x88\xd5\x1c\xe5\x9b\xe1\xfe\xdf\xbf\x06\x52\xfc\x37\x6a\x23\xe6\xe6\x03\x45\x7f\x62\xc7\x53\x44\xeb\xe8\x9b\xab\x13\xf0\xf8\xa4\x65\xc5\xa9\xbf\xca\x37\x69\x23\x13\xab\xf0\xeb\x41\x41\xb6\x19\xe2\x08\x5c\x33\x86\x43\x96\x1d\xc8\x03\x60\x7d\xd1\xd1\x40\xfc\x58\x60\xb2\x27\xb0\x8a\x26\xdf\x23\xc6\xd7\x1d\xd9\xde\x75\x62\x63\xd7\x73\x94\x36\x77\x16\xea\xf3\x0d\x7b\x12\xbf\x85\x8f\xe2\x8e\x87\x6a\xb8\x0a\x28"
		"\xbb\x16\xa6\x63\x20\x22\x25\x81\x0b\xaf\x30\xdb\xe1\x31\xee\xbb\x94\x9d\x6a\xa4\x20\x51\x0e\xea\x12\xed\x3e\x62\x13\x1b\xf3\x12\xc6\xb9\x43\x30\x30\x27\x96\xe1\x5a\xc4\xa6\x94\x43\x31\x0b\x5f\x47\x16\xe0\x8a\x89\x8c\x93\xa5\x56\x6b\x68\x08\x79\x5b\x5c\x5f\x0c\x4c\xf4\xc3\x85\xa1\xa8\xf3\x42\xe0\x35\x9b\x29\xc6\xf4\x8d\x1a\xc7\x08\xf0\xfc\xe8\xca\xbd\x35\xc4\x1a\x1f\x7c\x22\x02\xd4\x33\xb0\x24\x4f\x9d\x80\xbd\x14\x6d\xba\x58\xdb\xe7\xd9\xa1\xdf\x92\x9d\x7f\x58\x39\xc6\xbe\x3b\x94\x61\x6a\xcb\xa6\x15\x00\x11"
		"\xb5\xd4\xbf\x96\x01\xa7\x65\x51\x07\x23\x4a\x11\x12\x47\x10\x42\xc8\x8d\x48\xbe\x9b\x5e\xcc\xda\x26\x69\x45\x75\x2a\xda\x59\xc4\x69\xcc\x69\x61\xc2\xdd\x44\x20\x9a\x40\x37\x12\xb9\xe4\xe9\x73\x6f\x9f\xe0\x83\xd0\xe4\xde\xf9\x9d\xcd\x48\x37\x31\xc2\x03\x27\x21\xd6\x99\x36\x10\xfb\x42\x93\xd7\x93\x3c\xa6\xc5\x56\x7f\x79\x2a\x80\x41\x89\xa0\xc7\x5d\x45\xa6\xb3\x5f\x81\xbe\x5f\xdb\x6c\x62\x70\xe5\x73\x10\x84\xe2\x95\xdc\xe8\x26\xc3\x9f\x66\x7e\x69\xf5\x99\xdb\x8d\xd8\xc5\xa7\xfb\xd2\x3b\x31\xb2\xd7\xf0\xcd\x9f"
		"\x8a\x09\xab\xac\x02\x39\x5e\x3e\x97\x3d\x5b\x68\x84\x76\x36\xb8\x8e\xb5\x60\x32\x08\xb8\x58\x28\xa5\x3e\x8b\x16\xf6\x89\x95\x2f\xb0\xcb\x1c\xa4\xa5\xec\x32\xd3\x93\x83\xa2\x51\x6f\x70\xde\xcb\x72\xe4\xb9\xe4\x84\xf7\x8c\xc3\xc7\x26\x85\x02\x0f\x11\xf7\x22\xd8\xd1\xb8\xaf\x31\x20\x45\x43\x12\xda\xe3\xa9\x57\x5a\x2c\x12\x70\x78\x03\x71\xcb\x3e\x01\xbd\x96\xa2\xc0\xc9\x95\xd8\xb0\x37\x5e\xd0\x72\xf7\x88\x50\xbc\x9d\xeb\x96\x0d\x4f\x9d\x50\xa2\x14\x81\xed\xd8\xef\x2f\xa5\x9a\x19\xe7\x00\x29\xf0\xf1\xcb\xcc\x36"
		"\xbe\x9c\x17\x93\x42\x7e\x57\x89\x06\xe1\xf6\xb5\xbd\xde\x0b\x24\xcf\xa5\x61\xf2\xf3\x92\x2c\xe6\xcc\xd8\xba\x52\x09\x73\xec\x20\x27\x0c\xc3\x0c\x02\xf1\x3e\x85\xbc\xf4\x45\x17\xd8\xa4\x80\x24\x01\xa6\xc0\x8b\xe1\x4e\x73\x16\xe2\xb5\x93\xa0\x22\x6d\x47\xd8\x4e\x13\xf3\xaf\xdd\xa6\x66\x88\x71\xcd\x31\x0b\xab\x42\xaa\x4f\x25\x88\x9a\x83\xcb\xc1\x54\xe2\xc0\xb9\xe1\xbf\x19\xb1\x4a\x25\x83\x18\x56\xe6\x8d\x2f\x58\x89\x40\xa4\x73\xd4\x2b\xfb\xd5\xa8\xc4\x1e\x8a\x1f\xc4\x56\x49\xe6\xe1\x44\x46\xcc\xf7\xe7\xd9\xb8"
		"\x88\xb9\xc4\xd0\xf4\xe8\x40\x7d\xa6\x8b\x51\x03\xa4\xbc\x5c\x59\x0b\x7e\x25\x04\xed\xc6\x2f\x6c\x1d\xf5\x9f\x2f\x6e\x59\x42\x30\xec\xbb\x8c\xf6\xcc\x1a\xca\x0c\xcc\x7b\x12\xa3\xfa\x99\xad\x53\xc8\x7f\xe0\x9d\x91\xac\x0e\x7a\x50\x51\xdf\xfd\xdc\x01\x39\x72\xcc\x4b\x78\xdb\xd4\x2f\x58\x3e\x5b\x16\x34\xa1\x21\x97\x3c\x93\x45\xea\xdc\xd0\x3e\xf7\xea\xf7\xd1\xef\x21\x63\xff\xd1\x15\xf2\xff\x05\x4a\x6b\xb6\xbc\xad\xed\xbe\x46\xf0\x6c\x93\xf1\xe1\xea\xf9\x63\xbe\x47\xa5\xf4\x47\x32\xa8\xaa\x40\x25\x5d\x10\xf3\x6c"
		"\xad\x17\xf7\xaa\x75\x28\x65\xca\xd7\xb9\x83\x1e\x5c\x93\x4a\x37\xea\xce\xc9\xbf\x95\x83\x3b\x20\x1c\xb6\x8e\x07\x0e\x15\xd2\x97\x82\xc0\xac\xa5\xcf\xe3\xfe\xc6\x0c\xbc\xd2\xe4\xc1\xe3\x69\xac\xdd\x49\x66\x5d\xfe\x35\x3a\x38\xd2\x36\x57\x33\x2f\x5a\x3f\x58\xf8\xa2\x5d\xa1\x19\xaa\xf7\xd8\x30\xd8\x54\xae\x11\x7d\x61\x2b\xf5\x1f\xc9\xe6\xb1\x7c\x54\xfa\xeb\xee\x72\x49\xb1\x38\x36\x3d\x6d\x0e\xdd\x6d\x1b\xef\x80\xd1\xf4\xae\x44\xf6\x5f\x0c\xac\x29\x30\x94\xcc\x94\x80\x74\x07\xc1\xec\x36\x0f\xf1\x34\x99\xba\x7d"
		"\xfa\xd2\x24\x63\xff\x37\x19\xf2\x4d\x64\xc6\x96\x91\x62\xaa\x54\x44\xd5\x5b\x5f\xe9\xf2\x2c\x5e\x18\x39\x91\x19\x16\xca\xae\x43\xb9\xe8\xa0\x4a\x22\xf3\x17\x73\xf1\x32\xa0\x30\x43\x7e\x00\x14\x9d\x2c\x04\x01\xb5\x0c\xd1\x50\x12\x9b\x43\xb3\xc8\xec\x4b\x74\x91\x65\x06\xda\x08\xfc\x5a\x82\xa9\xfa\x16\xc6\x26\xe1\xb9\x97\x1e\xd1\x25\x87\xa6\xbc\xa3\xaa\x79\x5a\x6d\x1a\xf8\x36\x33\xb1\xe2\x47\x07\x3b\x10\xb7\x19\x85\x83\xc6\x15\x87\x87\x1d\x67\x98\xad\x06\xc6\x6d\xd7\x75\x95\x0b\xe4\xbc\x2f\xbe\x8a\xab\x5a\x2e"
		"\x1a\x65\x7e\x37\xf4\x92\x90\x40\x4e\xe8\x1f\xfd\xaa\x62\x18\xc2\xb4\x02\xac\xfc\xad\x76\x04\xfb\x41\x8e\xfe\x02\xfe\xf0\x88\xe3\x25\xa4\xc3\x93\x5e\x91\x33\x87\xc1\xdf\x12\xc2\x7a\xf4\xbc\xda\x8f\x2a\xa8\x5d\xb7\xbf\xf2\x0a\xd8\xfe\x56\xb6\xb2\xa0\x0e\x0e\x39\xe4\xd2\xb1\xaf\x46\xa2\xfe\x7d\x52\x8f\x4c\x32\x01\x9f\x71\x51\x90\xac\xe8\xb3\xbc\xd5\x0e\x6f\x38\xb7\x38\xd3\xa5\x1e\x31\x83\xf8\x11\x56\x51\x56\x44\x82\xab\x38\xf9\xc4\xaa\xef\xb2\x72\x7f\xf2\xe1\x8e\xcb\x02\x67\xab\x1c\x8b\x50\xeb\x5a\xf9\xa7\x7d"
		"\xa3\x62\x97\xce\x11\x5f\xb0\x77\x73\x54\xb7\xb7\x56\xbd\x56\xf9\xd8\x1c\xfd\x72\xfb\x34\x0b\xa2\x4d\x4c\xa6\xbe\xa5\x22\xbd\x2e\xf4\x47\x6d\x75\x94\x85\x81\x8c\x94\x3d\xea\xd2\x21\x2b\x63\x1b\x71\x2f\xb0\x8b\x0d\x30\x94\xc3\x79\xe8\x75\x8f\x81\x53\x22\x1a\xc0\x3d\xff\x3b\xfb\x92\x8b\x5e\xc7\xf2\x79\x67\xb9\x37\x3d\xd7\xe6\x43\x70\x34\xb7\x33\x3f\x7d\x84\xda\xf0\x13\xe8\x5b\x19\xda\x37\x57\xa9\xdf\x45\xc0\x49\x55\x47\x6f\xa8\x4b\xb6\x07\xf7\xee\x19\xc4\xfd\x15\xf2\xb0\xa9\x8f\x7d\xd8\xb7\x70\x6e\x73\x74\x68"
		"\x0d\x38\xa9\x2c\x86\x8d\xd5\xdf\x5b\x56\xa7\xb5\x91\xd0\xf4\x0f\x54\x43\xf2\xc8\xa9\x87\x74\x2e\xee\xe1\x23\xad\x8a\xfd\x06\x75\x8a\x9b\xc2\x75\x74\x39\xb5\x83\xeb\x52\xc5\x9d\xa2\xa8\x5b\x49\x8b\x25\x9d\x35\xd4\x96\x01\xe8\xed\xd8\xaf\xee\x88\x73\xf9\xef\x24\xe3\x9c\xa4\xbd\x0a\x13\xf8\xd7\x35\x2c\x35\xb4\xf8\x8c\x9e\xbd\x1d\xb5\x7e\x68\x6c\x2c\x74\x61\xda\xfc\xaa\xb1\xfd\xe4\x9e\x1a\x61\xa5\x61\xd6\x05\xd8\x31\x30\x49\x7e\x6a\xc8\x3d\x4d\xb0\x90\xff\x87\xad\x0c\xbf\x9b\xa2\xa7\x06\xb2\xeb\x82\x8c\xf5\x00"
		"\x72\xc8\x9d\x48\xd3\x17\xd0\xc0\xa9\x6e\xe4\x97\xf6\xc7\xd9\x7f\xf2\x21\x2a\xb2\xe2\xd3\xa4\x35\x7e\x34\x2e\xab\x22\x26\xf9\xb7\xcd\x1b\x00\xd3\x59\xb3\x20\x14\xfa\xa8\xd3\x71\x43\xa8\x5f\x95\x6f\xcb\x80\xcf\xe2\x49\x98\xc1\xfb\xea\x5e\xda\x00\xed\xc4\x8d\x79\xa2\xa2\x60\x2a\xd3\xa0\x21\x5e\xac\x72\x4e\x57\xef\x2b\x32\xfc\x42\xc9\xd2\x3b\x10\x5c\xed\x72\xec\x10\x2a\x7b\xf7\xa8\x1d\x4b\xbf\xff\x31\xe2\xbf\x2d\x8f\xfa\xca\xfc\xca\x18\xe0\xb2\x67\xb5\x6f\xf4\x19\xc5\x69\x01\x37\x14\x7b\xa1\xf4\x39\xc4\xef\x51"
		"\x57\x56\xe9\x4f\xae\x56\x98\x0c\x58\x1f\xe7\xca\x42\x9e\x75\x18\xfa\xe2\x9c\x4d\x92\x41\x00\x95\xa2\xd0\x48\x71\x79\x1c\x9e\x91\xac\xce\x2e\xbd\xc7\x1c\x68\x3f\xce\xb5\xab\xd8\x50\xc7\xbe\xcc\x26\x9c\x30\xc0\xbd\x40\x5e\x48\xaf\x1f\x71\x53\x32\xd8\xc5\x4c\xc9\xd2\xd0\x77\x2f\x7b\xd3\xf7\xba\x61\x8a\xe8\xf0\x03\xef\x49\x48\x0a\x94\xcb\xce\xaf\x34\x82\x02\x83\x35\x31\x1b\x04\x4a\x2a\x4b\x6a\x4b\xdf\x00\xdd\xec\x3e\x82\x15\xf1\x59\xbe\x91\xde\x16\xc1\x3e\x6a\x9b\x99\x88\xce\x97\x2b\x14\xfc\xa0\x2a\xb3\xc1\x5d"
		"\x20\x15\xa3\x78\x6e\x27\x11\x80\xf1\x22\xc4\x0e\x30\xf5\x0b\xc9\xe4\x13\xac\x6f\x57\x53\x27\x0d\xfd\xb6\x09\xaa\x2f\xe4\x17\xae\x0c\x1f\x8a\x2b\xc5\x5f\xf1\x12\x62\x52\x4a\x5a\xfa\x1e\x4c\xc7\x31\x0e\xba\x8d\xfa\x8a\x35\xd2\xed\x89\x05\x35\xef\x2d\x31\x32\xa4\xcd\x02\x8d\xb8\xba\x24\x71\xed\x4e\xdc\x12\x60\x45\xab\x2e\xa0\x62\xed\x7d\x57\xee\x03\x67\x65\xbf\x02\xd6\xd3\xcf\xe2\x31\xa0\xf3\xfb\xb5\xdd\xdf\x5e\xb0\x89\x13\x40\x50\x1d\x16\x50\x9c\xdf\x15\x77\x33\x86\x5d\x63\x65\x5f\x2a\xd5\xc0\x0b\xdf\x19\xa4"
		"\x06\xc4\x22\xe8\x86\xa7\xcd\x9f\xb8\xb7\x61\xae\x60\x76\x56\x07\x8d\xde\x7d\x7d\xff\x6a\x90\x95\xcd\x28\xb7\x6c\xcc\xc4\x84\x6f\xd4\xfb\xf2\x33\x9e\xbf\xa8\xe4\xfc\xe7\x0d\x5b\xa1\xb8\x9d\xac\xbc\xa9\xca\xf1\x55\x39\xd1\x94\x24\xd4\x8d\x5a\xd0\x66\x8c\xc8\xf9\x72\xeb\x2c\x89\x8c\x67\x5a\xbc\xb6\x64\xc9\xd4\x3f\x56\xba\x63\x95\xce\x30\xcb\xc6\xf1\xe6\x23\xe8\x2e\x37\x67\x2c\x5c\x71\xb0\x68\xe3\x88\x8b\x76\xd3\x4f\x33\xa6\x86\x2b\xdc\x8a\x2f\xc5\xa5\x9f\xd1\x0e\x19\xc7\x4e\x24\x46\x71\x5e\xaa\x77\x30\xd3\x90"
		"\x24\x2f\x45\x78\x2d\x64\x83\xf5\xca\x7e\x9b\x83\xd9\x4a\x1e\xae\xce\xa6\x92\xfa\x7e\x05\x13\x39\xad\x7f\x50\x0b\x3d\x49\xff\xff\x84\xeb\xff\x78\x6b\x97\xd7\x55\x0f\x34\x82\x40\xe2\xa2\xe5\x88\x40\x8e\xfb\x06\xea\x0d\xa6\x3c\x14\x21\x64\xa1\xc5\x95\x17\x97\x56\x83\x82\xbe\xb4\x49\x1a\x82\x54\xa3\xfd\x48\x34\xf6\x66\x2c\x5f\xdb\x3a\xc2\x97\xb5\x5a\x30\x3a\x31\x0f\xa8\x47\x8b\xf2\x22\xba\xfc\x3d\xa9\xf7\x1e\xd4\xf7\x03\xce\xe1\x00\xc5\x10\x25\x28\x8e\x9a\xc2\x64\xff\xc3\x03\x99\x7a\xc5\xf5\xb5\x27\x09\xe9\x7a"
		"\x18\x32\x0e\xa6\x60\xc7\xc4\x61\xe2\x92\x61\x86\xb4\xae\x7f\x52\x3d\xb6\xec\xbe\xe2\x3f\x1d\xd1\xab\x27\x0c\xd5\xc1\x01\x46\x3d\x4f\x56\x22\xf4\xd7\x6a\x76\x2e\xeb\x8a\xcf\xfc\x80\xb4\xea\x36\x87\xf7\xc9\xb6\xe3\xfe\xff\xf7\xb4\x27\x45\xd7\x68\xa3\xf0\x7e\x64\xe6\xd5\xdb\x0b\xf5\x92\x2a\xc3\xda\x7b\x6a\x5a\x55\xd3\x84\x59\x2a\xec\x4a\xd7\xbd\x8e\xeb\x1d\xfd\x3e\x54\xc6\xe3\x11\x5e\x79\x93\x33\x37\x7e\xbd\x92\xbb\x7f\xcf\x5f\x5f\x3b\x34\xd6\x6b\x0b\xcc\x75\xcb\xc4\x7c\x7c\x99\x6a\x26\x70\x69\xf8\x51\x74\x94"
		"\xe4\xfd\x64\xa5\x18\xc7\xd0\x4b\x71\x41\x9f\x8d\x87\x09\x3d\xc9\xa3\x7c\xac\xc0\x7c\x34\xa0\xf9\x76\xc5\xe0\xc5\xd7\x01\x08\xa6\x0f\x78\x05\xf8\xf6\x65\x52\xd3\x2c\xac\xfa\x75\xde\x5d\xc4\xd6\xe2\xbd\xc6\x8e\x78\x30\x37\x34\x3f\x1c\x45\x62\xa0\x48\x92\x24\xf1\x2f\x3b\xcb\x8c\x63\x50\x6f\x1f\x7d\x03\xf0\x07\x5f\x5e\x0f\xd0\xca\x46\x42\x04\x89\x4f\x44\xd9\x6e\x08\x63\xe9\x8e\x3b\xec\x93\x09\x8f\x41\x45\x46\xe0\x87\x22\xcf\xc0\x90\xd1\x96\x74\xa4\xd0\xac\xfe\x14\x32\xdd\x91\xea\x62\xdf\x2d\x5b\x4a\x1b\xf0\x5c"
		"\xa4\xa5\x4d\x41\x2e\x19\x01\x67\xb5\x45\x3c\xe0\xb4\xd9\x3a\x89\xea\xd9\x91\x18\xb2\x8f\xc5\xe2\xbb\xe6\xc9\x9d\x6d\x65\xae\x55\x77\x40\x4b\x44\x47\xdd\x5d\x47\x41\xa5\xd8\x5d\xed\xbc\xe9\x59\xd4\x1c\x70\x84\xd8\xed\x3c\x87\xdb\x03\xd1\xcd\x3a\xdf\x9b\xee\x21\xd3\x73\x19\x33\xa0\xed\x60\x84\xe1\x14\x86\xf6\xba\x67\xe8\xa8\x3d\xea\x20\xb1\xad\x29\x38\xac\xd1\x01\x16\xee\xdb\x9a\x9d\x86\x43\xbf\xf6\xdf\x1c\x56\xe3\x51\xf4\x70\x90\xcc\x1f\x57\x24\x78\xf1\x0b\xc8\x6d\x86\x2d\x37\xbc\x52\x56\x44\x95\xd2\xba\xe6"
		"\xa8\x27\x09\x9e\xc7\x32\x26\xf6\x17\xb9\x6c\x97\x0e\x55\x28\xae\xd1\x02\x66\xa5\xb9\x12\x82\x2f\xa3\x4d\x7f\x0e\x64\x57\x80\xa6\x87\x29\x67\x6c\xe5\x75\xf7\x04\xbe\xe7\x6b\x7d\xf7\x58\x88\x5a\xe3\xb8\x93\xa4\xe1\x16\x48\x2b\x5c\xd7\x93\x89\xa8\x3d\x3e\x42\x86\xc7\x72\xfe\xca\x49\xfb\x55\x2d\xc7\xfb\x76\x3e\x2b\x4b\x0a\x0c\xc0\x28\xec\x37\x9e\x50\x36\x62\x8f\x28\x35\xc3\xb1\x83\x20\x4f\xbe\x8c\x71\xb4\x83\x93\x31\xe5\x11\xfe\x99\x2b\x44\xd4\x9d\x3b\x70\x06\x24\x48\xdb\x29\xf2\xee\xe5\xcc\xee\xb0\xa1\x18\x91"
		"\x28\x8a\x39\x39\xf4\xc4\xea\xa7\x71\xbc\x05\x33\xa9\xac\x01\xfe\xe1\xa8\x94\x87\x6a\x84\x11\x28\x38\xfb\x37\x6c\xcc\x22\xea\x43\xdb\x1e\x6a\x30\xf2\x44\xab\x8b\x6f\xac\x89\xe3\xfe\xef\xb2\x53\x79\x81\x8c\xa0\x32\xb6\x9d\xbc\x5e\x9f\xdb\x23\x50\x28\x80\xba\xb4\xe2\xeb\xe3\x3b\xa2\x89\x75\x4c\x36\x52\x98\x71\x34\x13\xf3\x4d\xc7\xb2\x44\xae\x52\xab\x46\x49\x50\xea\x3a\x29\x49\x9d\x3b\xf6\xbe\xd9\x4a\xb1\x0c\x0f\xda\x51\xf6\x04\xd0\xb7\x63\x69\xbc\x2f\xf0\x1e\x71\xea\x8e\xac\xf6\x73\xa8\x1e\x78\xee\x63\xa6\xcc"
		"\x7c\xf5\xcc\x94\xd1\x23\x3f\x70\x1a\xba\x4c\xe4\xf7\xae\x8c\x17\xc4\xd3\x13\x2a\x8e\xe0\x5f\x63\xc7\xd4\x10\x1a\xd5\xbf\x1a\x15\x8e\xe8\x7f\x19\x47\xda\xf6\x83\x2a\x1f\x4f\xaa\x3e\x4e\x51\xcd\xb4\x9b\x4c\x4d\xe8\x26\x2a\xfc\x7a\xc3\x4d\x4e\x7c\x84\x5f\x83\xc1\xd3\x57\x39\x3a\x96\x32\xf8\x49\xae\xf3\xce\x34\x8e\x54\xed\x94\x36\x6a\x26\x2a\x01\xd2\xf6\x9e\x45\x66\xd7\x73\xfa\x39\x77\x2f\x82\xa7\x2d\x02\x1f\x60\x7b\x2c\x78\x43\xa1\x16\xc9\x0b\xcf\xe5\xf7\x8b\xbe\x53\xef\x3b\x01\x07\x9a\x01\xcc\x95\x5e\x69\x86"
		"\xbe\x98\xb4\x93\xa4\x0f\xe5\x8d\x7d\xa2\x2e\xd7\x17\x79\x09\x5f\x0f\xa0\x00\xa3\x9a\x4f\x3a\x75\x8d\x2c\x13\x7c\x79\xd3\xe9\x79\x50\xe9\x6b\x40\x7b\x6d\xb0\x48\xf9\x8f\x8e\xb4\xd2\x4b\xe8\x4b\xdc\x2b\x34\x20\xf8\x4c\x07\xbe\xf4\xa4\x8f\x20\x96\x9a\x10\x3d\x98\xa6\x17\xce\xb7\xe6\x0a\x4c\x99\x2a\xab\xdc\xc0\xcd\xd1\x8e\x82\xb7\xd7\x5b\x9b\x75\xee\xfd\xa3\x94\xe8\x7b\x96\x99\x16\x33\x46\xc7\x8b\x3e\xca\x56\x8e\xe4\x8d\x80\xcc\x5e\xa2\x39\x36\x50\x6b\x5f\x92\xcc\xa8\x6f\x61\x9c\x7b\x3f\x0b\x70\xd0\x3a\xda\x83"
		"\x16\x5f\xb8\xe9\x04\xe0\xca\x22\x0a\x18\x4d\x79\x1c\xd6\xf6\x50\xfc\x61\x59\x87\x79\x48\x1a\xd4\xef\x1e\x5b\xe9\x72\xe8\x7f\x1c\x08\x85\x68\xd7\x4b\x39\x30\x1e\x93\x28\x79\x1b\x90\xa8\x57\x74\x3d\x64\xf7\xc5\xee\x63\xe1\xe9\x96\xf9\xd2\xe2\xbf\x27\xda\xcb\x79\x09\xad\x24\x09\xb8\xe4\x62\x1f\xa7\xbf\xa0\xee\xd4\x0c\x7d\x40\x10\x8f\x27\xc8\x30\x40\x52\x45\x90\x20\x3f\xe1\x48\x58\xbf\x8c\x01\x06\x4d\xeb\x5b\x57\x6d\x5d\xab\x61\xc6\x9e\x9b\x6c\xb0\xe5\xf8\x5f\x4d\x0b\x62\xe2\x02\xe2\x73\x6d\xfe\x42\x8f\xed\xe7"
		"\x9a\x0c\xe8\xe2\xae\x80\xf5\x2c\x3b\xc8\x9f\x12\xb0\x64\x0f\xe2\x2e\x1b\xa3\xef\x0d\x70\x5b\xe0\x9f\xbc\xf0\x3e\xe2\x27\xc4\x33\x63\x8f\x5f\x0f\x9d\x44\xe8\x46\x94\x29\xb9\x56\xc3\x43\xd6\xc1\xc9\x8e\x8a\x66\x69\xef\xec\x74\x1d\xe5\x3b\xd9\x9f\x8c\xc6\xdc\x51\xbc\xf1\x31\x3b\x68\xc3\xe8\x4d\x52\xfe\x91\xad\xf7\x70\xb7\xac\x0e\x78\x45\x7a\x33\x3a\xea\xb0\xb9\xd9\x01\x82\xa8\xb3\x16\xd8\xbb\xe0\x75\x40\x73\x7f\x36\xc3\x74\x69\xc7\x8a\x4f\x93\xcf\xc6\x9b\x4c\x6f\x47\x7a\xdc\xc0\x33\xb1\x33\x9d\x8d\x0c\x21\xf3"
		"\x10\xa7\x67\xad\x0e\xa8\xbe\xe8\x4c\xb0\xbc\xc2\xc0\x91\x3d\x2b\x92\xcb\x0a\x14\x02\xb8\x4e\x28\x0d\x22\x56\xde\xb4\xde\x22\xc2\x55\x97\x75\x64\x8c\xa2\x5c\xfe\x64\x46\x92\xab\x50\x59\x81\xfa\x8c\x0a\xa2\xaa\xde\x56\xbc\xc5\x8b\x35\x1d\xcd\x25\x93\x88\xcd\x33\x74\xf4\x86\x81\x59\x00\x36\x97\x63\xae\x08\xd9\xe8\x69\x03\x27\x31\xa5\x45\x58\xfd\xc2\x46\x84\x7f\xb2\x60\x6b\x26\xb2\xe6\x8f\x4e\x54\xaa\x40\x72\xe4\x7d\x67\x00\x4a\x4a\xac\x6b\xc3\x61\x4f\xb3\x6b\x84\x16\x4f\xd8\xe6\xe0\x0a\xa8\x95\xa3\x83\x27\xb0"
		"\xdc\x21\x91\xb2\xb1\xbf\x0f\xfd\xf9\xe5\x14\x0a\x5d\x5e\xd1\x26\x6c\xaa\x5f\x1a\xbe\xd6\x2d\x39\x55\x1f\x57\x50\x15\xe5\x1d\xbf\x5d\x5f\x98\xeb\x5b\xe6\x3a\x82\xdd\x1e\x27\xb3\x8e\x61\x2c\x50\x18\x3a\x40\x12\xc5\xdb\x42\xaa\xe0\x19\x4e\x0e\xe4\x92\xdf\xe2\xc1\x29\x85\x73\x90\xac\x45\x99\x70\x47\xa8\xdc\xc0\x67\xce\x8e\x25\x22\x18\xbc\x94\x15\xc0\x0b\x83\x57\x20\xd8\xc5\x9e\x26\x86\x28\x49\xfd\xa5\xd2\x75\x45\xc0\x05\x2a\x54\xbc\xc9\x6d\x37\xf1\xf1\x2c\xd5\xb4\x59\xf7\x6d\xe4\xfb\xe3\x28\xb8\x41\xbd\x97\x96"
		"\x5c\xf4\x26\xb1\x3a\x89\x8c\x4f\x26\x18\x39\xc1\xe7\xaf\x9b\x03\x64\xc1\xb0\x80\x3f\x8e\xd8\x4e\x2c\xf4\x05\x42\x69\xfa\xc1\xcf\x4e\xc2\x16\x26\xb0\xf4\x72\x0e\x0f\xdd\x1d\x4d\xd2\x9c\x1a\x9e\x15\x32\xd6\xd8\x23\x55\x6b\xdb\xb9\x1e\x66\x65\x12\xf8\xea\x33\x65\x6a\x13\x4b\xfa\x63\xcf\x22\xf1\x3d\x5b\x4d\x3f\xe5\x56\x55\x51\x46\xcd\xf0\xcd\xba\xfb\xff\x31\x89\x67\xaa\x06\xc8\xf3\xc7\xbe\xae\xd0\x56\x36\x36\xdd\xa4\x0c\x35\x92\xdc\x22\xfa\xe1\x65\x21\xea\x65\x7b\xd2\x9e\x1b\xfd\xb1\xde\xb7\x93\xa2\xb4\xb4\x94"
		"\xcc\xa9\x81\x05\xa7\x0d\x9b\x5b\x31\xe7\x16\x2a\xb5\x20\x49\x81\x8f\x2d\xc6\xb4\x9d\x42\xf6\xe0\x44\x4c\x79\x43\xf6\xfb\xbc\xad\x2b\xf9\x02\x66\x22\x3a\x24\x80\xa6\x19\x6b\x2f\x42\x4d\x82\x7c\x28\x51\xc7\x62\xcd\xf3\xb7\x2b\x61\xfb\xf1\xae\xe4\x79\xd0\xfc\xc8\xc9\xd7\xc3\x73\xfd\x01\xa8\x82\x89\x40\xe5\x2f\x76\x37\x80\xaa\x5f\xd0\xe1\xd7\xa5\x86\x3a\xb1\x74\xf7\x0a\x61\x8f\x7b\x8b\x6a\x0e\xf5\x37\x91\x78\xd4\xc1\xf1\x5f\x13\x94\x67\x0f\xc3\xd0\x5b\x97\xc2\x00\x63\x0e\x49\xd2\x06\x89\xcc\xa5\x81\x5a\x06\xeb"
		"\x28\xc2\x23\x08\xc4\xc1\x2a\x66\x77\x73\xe3\x64\x1c\xba\x35\x00\xc2\xf2\x63\x32\x0b\x65\xb2\x87\xfb\x17\xda\x74\x4f\xe2\xde\x07\x7e\x42\xcf\xe2\xdc\xe6\x27\x88\x47\x86\x5b\xd9\x01\x9e\x6a\xb4\xe7\x70\xc3\xbf\xa2\x7f\x30\x2e\xdc\x46\x51\xbc\xc9\x07\x34\xf1\xde\xa6\x6f\xab\x7d\x8a\xc6\x3d\x99\x3f\x96\xef\xa7\x03\x64\x8f\x8a\x15\xff\x0f\x17\x11\xee\x6b\x4f\x2d\xa3\x7b\x59\x7a\x60\xa3\xac\x9f\x11\x93\x6a\x0a\x71\x2e\xf1\x60\xac\x86\xea\xc5\xdb\xb9\xbd\xc6\x91\x36\x68\xc4\x80\x4e\x22\x30\xd9\x1f\xd9\xdf\x80\x78"
		"\x2c\xf7\x82\x0a\x36\xab\x01\x43\x43\xba\x11\x62\xf0\xe8\x85\x9f\xc5\xa9\xa0\xc4\x08\x16\xfd\xed\x7a\x19\x83\x11\xb8\xc2\x89\x50\xc3\x7b\xb2\x4c\xfa\x81\xcd\xaa\xef\x6f\xbf\x9a\x1d\xa7\x13\x2e\x96\x70\xe6\x38\x8f\xa3\xb8\xb4\xdc\x62\x25\xf3\x24\xc4\xce\xfe\x8b\x8d\xc1\x3d\xea\xa8\x2b\x02\x52\x2b\x68\x86\x2e\xce\x9d\x47\x95\x25\xf8\x5a\xc2\x30\xb7\x04\x29\xd4\xf3\x70\x17\xfb\x0b\xb6\x5d\xe3\xa7\x52\xc1\xfe\x11\x0f\x1f\x27\x6e\xad\x9d\xb5\xb6\xa3\xd8\xd4\xc9\xd5\x5d\xa1\x15\xad\x9f\xb0\xc4\x4d\xc2\x5d\x34\xe9"
		"\x67\xab\xbe\x4c\xd1\x2e\x8f\x4c\x34\x1d\x59\x6f\x40\x8d\xf8\x5c\x3e\xfd\xa7\x95\x92\xc7\x8f\x77\xac\x12\xb6\xbe\x36\x0c\xcb\x27\xca\xa4\xbd\x3b\x01\x08\xd8\xc7\x81\x87\x14\x93\x57\xbf\x8a\xd1\x77\xa1\x9b\x31\xec\xe7\x6c\x3d\xdd\x62\x70\x2e\x82\x03\x2c\x35\xc7\x44\x8d\xce\xd0\x51\x7c\xaa\x38\xb2\x2f\x30\x25\xf2\x4e\xbb\x23\x3e\x02\x0f\xb5\x5a\x3d\x4b\xb9\x8c\x83\x9e\x68\xf1\x72\x08\xed\x5a\x6c\x6c\x97\x66\xe7\xc8\xb7\xab\xf7\xc4\x7e\x9b\xcd\xee\x0c\xa0\x6f\x9e\x53\x4f\xaa\xd4\xb5\x8b\x52\x91\xe4\x23\x36\x13"
		"\xf5\xdf\x80\xc6\x17\xfb\x0a\xb7\xd2\xec\xc7\x0b\x36\xc8\x9c\xaf\x75\xf3\xd1\xe4\x8e\xd1\xc8\xc5\xa3\xbb\x8f\xf4\x52\x4f\x81\x8c\x8b\x0a\xd0\xd1\x2a\xda\x4c\x97\x1a\x09\xad\x77\x65\x76\x94\xf8\x97\x5d\xc2\x8f\x25\x14\x76\x25\x1b\xcd\x14\xe5\x50\x00\x93\xf9\xb6\x60\x04\x77\x10\x94\xd9\xc3\x1b\x50\x4c\x79\x3c\x3e\x62\xf5\x88\xf7\xdc\x16\x69\xaf\xd7\x69\x2c\x1d\x9d\xf6\x0f\x81\x94\x5a\xc8\xfd\xfb\xef\x5f\x7e\x26\x28\x26\x32\x06\x27\x52\x0f\x6a\xcc\xb4\x41\x41\x8e\xa2\xb0\xcb\x55\x6d\x92\x2e\xc7\xbe\xef\x89\x95"
		"\x00\x7e\x34\x1d\xd4\xc4\xed\x5b\x09\x7d\x81\xa2\x73\xfa\x80\x5b\x3e\x48\xcf\x92\x38\x50\x13\x3f\x9b\xd1\x6a\xa4\x7c\x2b\x19\xa1\xa2\xb2\x5c\x89\x1b\xd7\xa7\xc9\x31\x68\x83\x5b\x92\x8c\xb1\xc3\x3e\x16\x8c\xea\x6c\x97\xe2\x68\xc1\x09\x29\x58\x5e\xa8\x70\x34\x8e\x68\xbf\xb2\xa5\xd1\x18\x38\xb8\x26\xc3\x06\x8b\x4e\x67\xc9\x0a\x1c\x21\x0a\xd6\x17\x5a\xfa\xfb\xfd\x07\x46\x11\xba\xb9\x42\xea\x06\x98\xf6\xd0\xcb\x31\x65\x72\x72\x7b\xe8\x43\x5b\xc9\xcb\xb9\xfb\x0a\xbc\x56\xea\x9b\x00\xc5\x66\x37\x66\x11\xd1\x95\x1c"
		"\x67\xf4\x82\xf2\x78\x46\x0b\x45\xa1\x0a\xfd\xfb\xcd\x94\x4c\x71\xad\x12\x56\xf2\x9e\x2e\x6c\x3d\xa6\x4a\x30\x66\xdd\x12\x0f\xae\x25\xbd\x08\x45\x8e\x49\x4e\x12\xb0\xd9\x6e\xd7\x8f\xbf\x75\x49\xc6\xd1\x59\x99\xb4\xc9\xa2\xba\xa9\xb2\x6c\x75\x2d\xfe\x40\x41\x09\x13\xe9\xa5\xd2\xab\x2d\xc0\xe3\xd5\x8b\x84\x89\x0e\x15\x08\x3c\x0f\x03\x54\x68\x2b\x60\xda\xac\x79\xee\xc0\xc2\x82\x5e\xa6\x5f\x60\x45\x58\x40\xd4\xc0\x96\x59\x1d\xe8\xde\xf2\x15\x40\x77\xe3\xc5\xc9\xd7\xfe\xfd\x16\xed\xe5\x9e\x1c\x32\xe2\xbb\x4f\x8f"
		"\xfc\x32\x94\x9c\x40\xb3\x86\x95\x24\xa7\x65\x5e\x83\x29\xf3\x41\xe9\xec\x2f\xf6\x21\x5d\x85\xa3\x81\x48\xa0\xeb\x44\x11\xdd\x64\x42\x7b\x11\xda\x9a\x81\x24\x21\xae\xf1\xda\x1a\xdc\x89\x44\x20\xbc\xe0\xf1\xc7\x49\x84\x26\x9f\x82\x04\x8c\x5f\xec\x7c\x5e\x65\x95\x8d\x62\x1a\xbe\x3c\x31\x39\xb9\xe8\xe5\x4a\x35\xf8\xd7\x1e\x2c\x61\x62\xa6\xe6\xb5\x78\x3b\x21\x98\xf9\x30\xcc\x25\x5f\x49\xbd\x9c\x02\x93\xf9\x7b\x5e\x1e\xf9\x4d\x1f\x6d\x42\xe6\x07\xbd\x36\x79\xb2\x31\x92\xa7\x5e\xb1\x7b\xac\x25\xd4\x64\xdf\x54\x37"
		"\xfb\xdd\x04\xef\x73\xe9\x9f\x78\x4c\xc0\xf6\xa7\x97\xed\x95\x94\x8f\xea\x6f\x77\x33\x87\x9b\x74\xf0\x95\x6b\x94\xb5\x9d\x72\xda\xc4\xdb\xcd\x17\x8b\xc6\x28\x26\xc5\xc9\xd2\x27\x71\x4d\x79\xa4\x54\x5a\x45\x22\xa3\x62\x17\x23\x05\x3b\xfc\xeb\x62\x8c\x68\xcf\xa6\x86\x7d\x6f\x88\x92\x03\xc5\xc7\x3f\xcf\x10\xdf\xd1\x81\x94\x03\xf9\xcd\x48\x65\xce\x6a\x30\xf0\xfa\x74\x5d\xdc\x59\xe1\xa1\x51\xd7\x4a\x6e\xfb\x24\x60\xb1\x3f\x27\x81\x7a\x91\x8a\x6d\x69\xfd\xfd\xc8\xe2\x1f\x79\x77\xe1\x22\x20\xff\xbc\xce\xc9\x6a\xba"
		"\x5e\xb3\xff\x95\x8e\x23\x6a\xc2\xd2\x5a\x67\xae\xcf\x82\xe3\x8d\xbd\x21\xad\x4d\xeb\xc5\x1a\x3a\x89\xeb\xc4\xbb\x5e\xd9\x14\x3f\x61\xb5\x99\xd6\x9e\xe8\x54\x9d\xa8\x14\xfb\xaa\x20\xc7\x00\x48\x29\x23\xcd\xf9\x72\x15\xfd\xb6\xd7\x25\xa3\x8b\x6b\xe6\x76\x13\x10\x4e\xf4\xfb\x90\x74\xd2\x6f\x34\x0b\xc4\xe9\xa7\x93\x1e\x5e\x83\x94\x56\x2d\x77\xf7\x7a\x8a\x20\xd4\x7e\x5d\xa2\x1d\x10\x10\x4e\x36\xe1\x57\xc9\xc7\xaa\xb6\x7f\x27\xc5\x60\xfe\x18\xe8\x53\x56\x7e\x4a\x23\x00\x44\x9f\x50\x9b\xd8\x1d\xbc\x92\x9f\xfe\x99"
		"\x46\x42\x17\xb0\x6b\xf3\x2e\x45\x02\x11\x35\x07\x05\x27\x68\x4f\xd6\x3d\x40\x78\x17\xb9\x97\x01\xce\x4e\x80\xa7\x43\xea\xb3\x1a\x49\x14\x41\x1b\xc4\x84\xde\x5e\xc9\x1f\xfe\x12\xda\xf5\xd7\x71\x78\x0c\xc2\x59\x62\xed\x5f\x3e\x6f\xb7\xc9\x59\x78\xd6\xff\x68\x8a\xd8\xa7\xe9\xbf\xe7\x1a\x7d\xe7\x3e\x48\x7b\x56\x26\xbd\xa0\x4d\x91\x00\x32\x78\x9c\x42\xd1\xc1\x4b\x77\x8d\x4c\xed\xb3\x9b\xc9\x6e\x06\x33\x14\xb6\xf9\xfa\xd0\xb5\xc4\x2a\x7a\xf3\x0f\x19\x8a\xd7\x7a\x76\xa2\x88\x5b\xe0\x0b\xfd\xe0\x45\x3c\x18\x09\x04"
		"\x93\x4d\x0a\x7d\x4a\x76\xc2\x2b\x52\x44\x3a\x1d\xd4\x90\xf4\x5b\x34\xfa\xdc\x96\x38\x45\x18\x13\xbb\x34\x71\xd5\xde\x5b\x44\x14\x12\x92\x93\xa2\x01\x44\xa6\x04\x97\x16\x45\x2e\xbb\x5d\x34\xd3\xdb\x6f\x28\xf6\xbc\xe9\x03\x71\xd3\xd9\xd9\x25\xb9\x24\x1d\xe7\x82\x26\x0e\x63\x5a\xef\xf4\xc4\xbd\x3a\x9d\x00\x0c\xfd\x55\x08\x05\xac\x8c\x62\x44\x93\xf8\x1a\xbc\x93\xe7\xfa\xc1\x11\xde\x4c\x39\x9d\xf1\x2b\x1b\x55\x51\x39\xfa\xa8\x40\xbf\xe7\x82\x4f\x4b\xf5\x22\xd9\x6a\xc9\x10\x07\x08\x05\x5f\x88\x38\x6f\x2c\xbf\x12"
		"\x0c\x1c\x7a\xe8\xff\x4f\xc3\x53\x24\x4a\xd5\xb7\x90\xf5\x3d\xbe\xbf\x6a\x89\x8e\xb6\x54\x8d\x3d\x22\xc7\xea\x54\xb3\xcb\x18\xf3\x59\x50\xfe\xb1\x1c\xa4\x9f\x6f\xa2\x70\xe2\x0c\x35\x5a\xfc\x93\x90\x41\x82\x79\xb5\xdc\xd6\x2d\xa3\x1d\x05\xd6\x12\x02\x77\x22\x80\xc7\x7d\xd2\xcc\xa8\x53\xa1\x1f\xb6\x32\xc9\x84\x20\x8b\x9f\x23\x19\x6f\xf8\xfc\x4b\xe8\xac\xf8\x21\x6b\xa7\x9a\xff\x64\x28\x52\x2c\x04\x3f\x57\x25\xbf\x1e\x3e\x7a\x1a\xf9\x5b\x29\xc0\xd9\x24\xfc\x04\x9d\x33\x48\xcf\x73\x18\x0c\xb8\x29\x8a\xef\xc9\x11"
		"\xe6\xe8\x7f\x31\x15\x91\x07\x57\x8e\xa2\x05\xd6\xd3\x35\xe6\x31\x4d\x7a\xc1\x98\xc4\x03\xd3\xfe\x14\x30\x4c\xed\x09\x47\xc6\xf1\xb5\x74\x86\xce\x71\x08\x4c\x8e\x48\xd9\x60\x43\x0c\x73\x52\xc5\xdb\x24\xeb\x0e\xb5\x2a\x22\x4b\x81\xe6\x99\x7e\x9b\x8e\xd3\x69\x35\x83\xa2\xba\xc1\xba\x1a\xd0\xb0\x7a\xeb\xf0\x2a\x56\x11\xb3\xa6\xff\xcf\x94\x21\x29\x8b\x44\x5b\x35\x4c\x56\x67\xca\xf2\x90\x82\xb2\xad\x79\x09\x0e\xfd\x4b\x68\xe6\x18\x14\x4f\x44\x6f\x25\xd1\x99\x00\x96\x3a\x8f\x2b\xf1\xa0\xbc\xf8\x7d\x65\x01\xb2\x10"
		"\x55\xa4\xab\xfa\x93\xd2\xa0\x7a\x92\xfc\x6d\xe8\xee\x29\xf9\x6c\xdd\x87\x89\x2d\x6f\x70\xac\x0a\x16\xf5\x77\x95\xe0\x56\xfa\xa6\xde\xb4\x85\x92\x7a\xf9\x0b\xa9\x58\x56\x84\x9f\xd1\xeb\x6d\x32\x67\x13\x30\xd8\x19\x2f\x8d\xb1\xc0\x7e\x28\xee\xf6\x4d\xa8\xeb\x9e\x85\xd5\x6a\xad\x09\x86\x72\x11\x8c\xd6\x27\x4b\xa9\xfe\xcc\x7f\x29\x1c\x63\xff\x05\x0f\xf2\x36\xef\xac\xc2\xbb\xbe\x30\xe0\xed\xcb\xb5\x03\xb6\xd7\xd0\x71\x09\x50\x1d\xfc\xca\xcb\x94\x75\xee\xf9\xa2\x93\xea\x8d\x43\x68\x1c\x68\x0a\x95\xef\x29\x4e\xed"
		"\xb0\x50\x07\x4d\x13\xa1\x47\x0c\x07\xdd\x8a\x94\xd7\xd8\xfa\xdf\x8d\x4f\x41\x1a\xc7\xab\x57\x44\x03\x9d\x76\x86\x76\x34\xed\xeb\x80\xfc\x36\x95\xcb\x18\x57\xef\x03\x85\xc3\x62\x8f\x86\x7b\xdd\xd6\xe3\x4f\x19\x0c\x99\x6f\xb5\x17\xe1\xbc\x02\x96\x23\xff\xba\x1c\x6d\x07\xed\xb4\xe0\x28\xfd\x8e\xc2\x19\x2b\x36\x85\x32\x95\x61\x0f\x66\xe9\x26\x6b\xbe\x50\xdb\x44\x96\x57\x46\x05\x70\xbb\xcc\x2a\xaa\x11\x0a\xf4\xd8\x13\xc5\x70\x09\xb4\x3c\x28\xc5\xbf\x16\xcd\xc0\xf1\xef\xac\x60\xff\x90\xba\xfc\x7c\x95\x7e\xc8\x7b"
		"\x88\x33\x19\xf2\x99\x85\xa6\x02\x19\x8b\x98\xab\xb9\xef\x1d\x54\x36\x1a\x82\xe0\xee\x31\x61\xda\x6b\xa2\x97\xd1\x26\x0c\x24\x5d\x99\x46\xd5\x0c\xc1\xd9\xfd\x0f\x1d\x46\xf9\xf3\x2d\x3b\x4f\xf8\x23\x9c\x3d\x39\xf8\xf1\xe9\xd1\x4f\xee\xa3\x28\x71\x7c\xae\x1a\x96\x8a\xd4\x5f\xb5\xbe\x8a\x89\xe1\x1b\xf6\xe7\x3c\xf0\x64\xfc\x6f\x29\x70\xd9\xd8\xf2\x14\x2a\x31\x82\xdb\x37\x32\x45\x05\x92\xf4\x4e\x19\x8f\x9d\x12\xf8\x26\x2b\xf8\x43\xa4\xf4\x50\x5f\xac\xbe\xb8\x35\x21\xa7\x44\xe4\x2d\x87\xf0\xfb\xc2\x53\xda\x48\x25"
		"\xe6\x29\xd3\xbc\xfe\x62\x70\x86\x1f\x41\x13\x82\x81\xcd\xc2\xf3\x52\xd6\xa4\x47\x40\x22\xb5\x86\x5b\x5b\x02\x8c\xce\x6b\xee\x37\x82\x56\xcd\xab\x93\x5f\xbb\x62\x5e\x6d\x56\xce\x0e\x04\x4b\x7d\xec\xa2\xb0\x4f\xae\x7b\xcd\x9e\x89\x0d\xb6\x4d\x5f\x9d\x98\x60\xd2\x72\x57\xb7\x3f\xbd\x35\x3c\xcd\x93\x65\x4e\xf5\xc2\x33\x20\x82\x3d\xf0\x09\xe0\x68\x12\x65\x6d\x22\xab\x57\x6c\x4c\x3c\x72\x40\xe9\x4b\xa6\x40\x9d\xab\x5f\x4b\x2d\xcb\xa0\x16\x1c\x6f\x71\xa2\xd9\x6b\x3d\xd3\x5a\xc4\x6f\x4e\x00\x59\x1a\xc7\x37\xe9\x79"
		"\xe9\xdc\x8e\x28\x97\x53\xba\xee\x38\x9f\xae\xed\x2a\x5d\x89\xb1\xbe\xf7\x70\x80\x87\xd6\xca\xf1\x00\xe6\x5b\x7d\x81\xb1\xd7\x28\x72\x00\x21\x05\xf7\x9a\xcd\x51\x80\x46\x99\x56\xf9\x3a\x37\xde\x40\xff\xb4\x86\x9e\x92\x8a\x86\x1e\x21\xcb\x39\xe0\x5c\x22\x78\xfd\x20\x3a\xdd\x58\x59\xc9\x5f\x84\x5d\xbc\xa9\x13\x4f\x29\x84\x54\xab\x66\xe1\x91\x60\xed\x45\xa5\x46\x52\xf0\x3e\x76\xfa\x9e\x0d\xce\x0d\xd3\xba\x3d\x90\x51\xea\xae\x3e\xcd\x1f\x21\x52\xfe\xf9\xbb\x90\x0a\xe6\xb1\x13\xdb\x6c\xd5\xb4\xeb\xe4\x92\xfb\x8e"
		"\x54\xb1\x27\xaf\x08\x33\x58\x52\x13\x61\xa9\xa0\x32\xb2\xbf\xbc\x60\xbd\x38\xd9\x27\xd6\xb4\xb5\xd5\x18\x3d\xe8\xf5\x8c\x97\xb8\x97\x64\x0a\xa0\xe5\x74\xcf\xe7\xd2\xa8\xdb\xd9\xcc\xd3\xb9\x1c\x30\x96\xef\x63\x8e\xc3\x10\x9b\x40\x58\xb7\x8a\xf3\x73\x9d\x2c\xae\xdc\x30\x5f\x8f\x49\x18\x23\xc9\x35\xd5\x78\xe3\x4e\xb4\xbc\x4e\xf4\xb9\x24\x0a\x01\x18\x38\x2c\xdc\x7b\x26\x32\x0e\x3a\x5b\xf2\x91\x1a\x51\xa6\x19\xe8\xad\x11\xa1\x7f\xd4\xbd\x68\xf6\x1c\x7a\xe4\xa0\x38\xa3\x57\x10\x36\x31\x73\x14\x3a\x86\x85\x2d\x78"
		"\xe0\xda\x14\x5a\x91\x0a\xbe\x81\xa1\x25\xe2\x8c\x19\x87\x82\x30\xdc\x5b\x02\x7a\x4d\x35\x38\x0c\x70\xa4\x01\xc7\x1c\x9a\xf3\x99\x3b\x0d\xe1\x2b\x33\xa7\x7e\x4a\xe7\xa2\x15\x34\x49\xde\x6b\xfe\x72\x57\x6d\xb2\xef\x39\x47\x7b\x62\x72\x05\xbf\xdd\x1d\xeb\xed\xab\xe3\x61\xc2\xa9\xaf\xd1\x42\x87\x10\x55\x4a\xe3\xdf\xd0\x64\xa5\x46\x89\x37\xf9\x60\xce\x8e\x14\xb3\x6e\x10\x7c\x22\xe5\xec\x7d\x65\xb9\x06\x83\x8d\x05\x20\x77\x28\xdb\x7f\xe6\x9b\xcb\x03\xfd\xe8\x2e\xff\x77\xa1\x93\xfa\x30\x02\x2a\x59\x6d\x60\x35\x9c"
		"\x0e\x2d\x3b\xc6\xd9\x1e\x8a\xaa\x53\x9a\xce\x9a\xe7\x04\x88\xab\x82\xd7\xc8\xd9\xaa\x3f\x6c\xf8\xff\xc5\x15\x5c\x4d\xbb\xc6\x64\x38\x3d\x1b\x97\x2e\x3e\x57\xbb\x33\x85\xf8\x90\x95\x39\xa3\xfa\xf4\xb2\xe3\x3e\x46\x5d\x58\xfb\x6b\xd4\xf8\xea\x17\x59\x40\xe2\x72\x29\x9b\xe4\x5b\x3f\xf9\xae\xba\x44\xe5\x84\xfc\x24\xa3\xd1\x80\xec\xfd\x44\x05\xc0\xb7\x58\xeb\x32\x45\xbf\x0e\x78\x15\xbf\x07\x19\xd7\xd2\x8c\xf2\xb0\x04\xf6\x2b\xc2\x9d\x95\x70\xd2\xd2\x13\x4c\x89\x1c\x46\x76\x5a\xe1\x0c\x2d\x04\xac\x6f\xf5\x2a\xe1"
		"\x19\x01\xeb\xa1\x23\x2e\xae\xd5\xdf\x0c\x17\x15\x5e\xe0\x1d\x4e\x30\x3a\x59\xc2\xa9\x7d\xc7\x42\x42\xb1\xfa\x04\x12\xfa\x5e\x7d\x09\x27\xd1\xcd\x05\x2e\xfc\xb9\x61\xe2\x8e\x2a\x9b\x68\xef\x69\xdb\x06\x0b\x1a\x30\x94\xd6\x6e\x9e\x2e\xa9\x24\x53\x09\x76\x2d\x35\xe4\xb4\x01\xc1\x3a\xbb\x62\x0a\xa1\x4e\x19\x31\x12\x00\x33\xca\x10\xb6\xe2\x83\xec\xd5\x1e\x4b\xd1\xc6\x88\xc3\x97\x7f\x17\x98\x37\x17\x2f\xe0\x47\x0e\x96\xad\x02\xd5\xc8\xf2\xbc\xa2\xb8\xb5\x5e\x52\x8e\x95\x6a\x58\xe2\xa9\x6c\xb5\x70\x54\x84\xd9\xe9"
		"\x3a\xca\x9d\xb1\xdc\xa4\xdd\x17\xe8\x8c\x55\x82\x6b\x77\x4b\x68\x2a\x96\x45\x36\x17\x7b\x04\x21\x33\x5a\x82\x89\xbf\x1e\xc0\xb8\x8e\x11\xdc\x1e\x38\x94\xb4\x2a\x02\x34\x6e\xf2\xc7\x63\x47\xfa\xe1\xa2\x2a\x50\xa9\xd6\xd7\xf8\xd5\xaa\xe6\xdd\xd5\xf9\x77\xfa\x2e\x52\xe4\x8b\xed\xd5\xec\x4e\x33\x53\x50\x28\x9c\x07\x2d\x35\x41\x5d\x30\x07\xa1\x40\xad\x62\xd3\xc9\x8e\xb9\xb1\xb5\x4b\x2d\x0a\x0f\xfa\x8e\x15\x3c\xa6\x79\x2c\x58\x87\xec\x0c\xf9\x4f\xd8\xed\xb9\xfd\xd6\xe6\x50\x0b\x26\x01\x68\xa3\x47\x58\xdc\x87\x1a"
		"\x79\xbf\xf0\x7d\x47\x94\xfc\xe2\x59\x70\xee\x85\x45\xb6\x34\x2b\xbe\x18\xbe\x68\xac\xf0\xa9\x75\xb9\xaa\x75\x11\xf4\xfe\xaf\xe2\x8f\x92\xff\xef\xb3\xce\xc0\x20\xac\xdf\x42\x5f\xcd\x44\x19\x40\xbe\xa7\xc8\x58\xc0\xe4\x7a\xc9\x6d\x63\x59\x2c\xbc\x29\x03\xf5\x72\x7a\x4d\xca\x67\x4a\x7a\x96\x15\x0f\xd5\xfa\xe4\xeb\xc2\x02\xa7\x95\x17\xa3\x52\x56\x77\x8d\x82\xb2\x81\xe8\x04\xd5\xb9\xa7\x58\xa2\x00\xfc\x87\xeb\x8f\xc3\x10\x6f\x4d\x36\x3f\x9e\x87\xd6\x7e\x9b\xa5\x5d\x5f\x7a\x60\xee\x10\x6c\xae\x15\xc1\x5f\x27\x04"
		"\xc9\xdc\x15\xaa\x82\x43\x1e\xf3\x64\x56\x44\x8a\x6b\x1e\x73\xcc\x56\x50\xae\x32\xcf\xa0\x2a\xf3\xa1\x40\x36\x53\x0d\xd6\x77\x20\x62\xeb\x48\x84\xba\x2c\x41\xfe\x52\xb5\x97\x55\xd3\xd7\x87\x92\xbe\x70\x65\x1a\xbe\xa2\x34\x39\x6c\x16\xa3\x36\xdb\x26\x86\x1d\x60\xe0\xd2\xfc\xb5\x8b\xcb\xaa\x89\xfa\x46\x20\x4d\x71\xd5\x93\x28\xee\x4c\xfd\xe8\xc8\xb7\x67\xed\x93\x84\x7d\xe1\x8e\xb6\xff\xae\xb8\xca\x4b\x9a\x11\xdb\xb0\x2d\xeb\xfb\xcd\xa1\xd0\xf1\xd9\x99\x36\xc2\x35\x0e\xf3\xba\x00\xdb\xf1\x40\x1e\x26\x7b\x3d\x76"
		"\x05\x73\x32\xdd\xaa\x1d\x2e\xb8\xcc\xc0\xf9\x61\xa7\x02\xb3\xaa\x36\x2a\x6d\xfd\x5d\xfc\xfd\xe4\x4c\x82\xa7\x58\x80\x79\x14\x38\x52\x0e\x85\xa1\x57\x80\xad\x1e\x3a\x81\x0a\x5a\x9b\xf3\xce\x11\x72\x8e\x9f\xa4\xac\x1c\xac\x2b\xa8\x52\x39\xfe\x33\x2d\x9e\x52\xe9\x21\xfb\xf6\xd7\x42\xba\xa3\xb7\x22\x77\x42\x06\x53\x27\xa7\x31\xb9\x15\xcc\xfa\x5d\xfa\xf5\xa2\xa3\xc8\x7e\x2c\xf7\xdb\x00\x67\xe6\x95\x7f\x7f\xd4\x91\x08\x0d\x7e\xed\x62\xe5\x1d\xf9\x64\xa9\xd8\x5d\x06\x48\xda\x18\x11\x22\x33\x6c\x91\x05\x25\xb8\x0f"
		"\x26\xa6\x54\x24\x69\x93\xd2\x2b\xb5\x2f\x70\x6e\x38\xc7\x3d\xf3\x56\xe3\x96\xf6\x4c\x43\x06\xb9\xae\xf7\x31\x23\x70\x24\xdd\xa3\x0a\x92\x5e\xbf\x9d\xcf\x8d\xe7\x3b\xb7\xf6\x2f\x69\x87\x22\xbe\x89\x1c\x85\xa6\x72\x46\x0b\x44\xf0\x89\xa4\x5c\xeb\xd6\x99\x83\x45\x78\xdd\x8c\x9c\xb2\xc0\x14\xfb\x41\xe7\x7d\x10\x95\xd3\x8e\xc5\x35\x18\xc5\x92\x12\x7d\x32\x70\xc5\x71\x4a\x02\xe2\x2b\xe6\x22\xe2\xbb\x38\xe6\x0c\xde\xf2\xcb\x11\x51\x37\x22\x6f\x40\x46\xf1\x60\xf0\xe6\x67\x94\x18\xe3\xfa\x1f\x69\x17\xc1\x26\x04\x26"
		"\x2b\x0c\x77\x5e\x4e\x81\x3d\x24\x65\xa8\xab\x6a\xf6\x8a\xd3\x4b\xe3\x8a\x8b\x6f\x71\x45\xab\x04\x55\x72\x8b\xf8\x2a\x73\xc9\x18\x62\x08\xb7\xd2\xe4\xf6\xf7\xcc\x3c\x06\xd6\x5b\x98\x37\xdd\x71\x3b\x7d\x47\x0d\x65\x84\x3b\xf0\xa6\x43\x60\x1f\x24\x69\x0c\x75\xcf\x78\x55\x33\x12\x7d\x0c\xb8\xcb\x38\xa2\xaf\x1b\x0b\xd7\xc9\x5e\xe9\xa8\x70\xaf\xaa\x43\x7b\x1b\x3d\x58\xe7\xde\x8c\x91\x50\x6e\xf6\x4b\x97\x9c\x79\xd8\x09\x7f\x20\x0b\xdc\xe9\x51\x8e\xa2\xf5\x4a\xfd\x4d\xd9\x21\xf1\x58\x41\x56\x5b\xf2\xa4\x6f\x75\x26"
		"\xbb\x2d\xd1\xd1\xf4\x00\x66\x84\x6c\xd7\x23\x03\xfb\x54\x2c\x30\xd7\x45\xc5\x0d\x34\x9d\xa8\xdb\x51\x6e\xc0\x57\x76\xf4\x2e\x2b\x54\x93\xec\x96\x7d\x16\x72\xc7\x57\x2e\xc2\x20\xd0\x82\xcb\x2f\xa4\x3e\x69\x92\x63\xa1\x95\xd5\x06\x5f\x6b\x69\xd1\xbe\xfa\x1f\x72\xb1\xa4\x5b\x60\x87\x0e\xf0\xd9\x5d\xee\xf0\x2a\xbc\x14\xb3\xd4\x3d\x6c\xd5\xa0\x97\x4a\x38\x77\x59\x61\x13\x99\xbe\x79\xbb\x15\xd0\xe5\xb4\x45\xe9\xae\x4a\x7d\x74\xe6\x8d\xc2\x4e\x5a\x64\x97\x9d\xb3\xeb\xe4\xa8\xc7\x05\xc9\x5d\x9a\xcf\xed\x30\xf6\x1c"
		"\xb0\x3a\x4c\x32\xa6\x4b\x75\x84\x6c\x2e\x42\x9c\x96\x62\x33\xeb\xfb\x64\xdd\x87\xa6\x96\x90\x6b\xa8\xde\xd6\xa5\x6c\x0e\x1b\x2c\x2e\x7c\xed\x2e\xf3\x90\x64\x1e\xcc\xa3\x8d\x12\x51\x83\x8b\xfb\x9a\x94\xfa\xbb\xc1\x95\x20\x2d\x8d\xe2\x8a\xfc\x00\x93\xf8\x80\x8f\x24\xaa\xf4\x39\xf6\xf9\x51\xf4\x9b\xf1\x07\x0c\xbf\x7c\x78\x78\xfc\x30\xc0\x72\x5e\x81\xa7\x09\xbb\x33\xd9\xd1\xea\xee\x1b\x6b\xbe\x99\x97\x18\x70\xd2\xf5\x11\xa2\x9a\x26\x9c\x38\xda\xd7\x73\x80\xec\xa2\x33\x4b\x1c\x22\xc4\x01\xbc\xdc\x8e\x41\xa3\x68"
		"\x23\x1c\xe9\x6b\xaa\x4a\xd9\xb9\x61\xf8\x13\x77\x39\x55\x6d\x07\xd6\x3f\x35\x54\x44\x4f\x80\xca\xbb\x1e\x7f\x08\xbc\xf4\x36\x07\x8d\x79\x6a\x8a\x9c\xa8\xcc\xe9\x12\x9f\x0b\x41\x80\x06\x32\x50\x83\xe3\x66\x69\x4e\xd2\xdd\x13\x59\x8d\xde\x13\xae\x7c\x18\x64\x4c\xc4\x7b\xb3\x2d\x5d\x47\x87\x5b\x10\xd5\xa7\xe3\x2a\x9a\x72\x8c\xa8\x95\xa7\x53\xcf\x67\xad\x2b\xb4\x83\xfc\x88\x56\x4d\x7b\x96\xb3\xdb\xbc\x66\xb8\x36\xca\xba\x8a\xcd\xa1\x29\x3b\x1f\x3b\x89\x6e\x88\xaa\x4e\xe4\x85\x36\x27\x97\x8c\x43\x70\x89\x25\x53"
		"\x90\xc8\xdb\x67\x3d\xfd\x37\xb9\x35\x7c\x72\x35\x65\xf9\x2c\x26\x79\x47\x4c\xa6\xf1\x02\x84\x13\xf4\x7d\xe9\x68\x63\xc4\xc4\x6b\xf0\x38\xf7\xb0\x78\xd8\xee\x62\xb3\x6a\x57\xf9\x02\xca\x7b\x87\xc3\xa9\x7f\x13\x86\x8d\xac\x80\xe7\xa4\x34\xf6\x8d\xa8\xe2\x6f\x0e\x13\xca\xe2\xe2\x5e\x14\x28\xee\x6b\x06\xcc\x3e\x87\x51\xb4\x96\x14\xd9\xd6\x66\xc6\x11\x91\x52\x8f\x62\x44\x67\xe6\x01\xfa\xe6\x53\xdd\xbc\x45\xd2\x9a\xd8\xb3\xb8\xa9\x9e\x4e\xdb\x27\xfd\xc2\x87\x24\xd7\x37\xb9\x70\xef\xa2\xa4\x34\xeb\xc7\xd6\x27\xee"
		"\x40\x5d\x94\x97\x8b\x88\x88\x49\x5b\x61\x50\x8f\x96\x90\xdb\x1a\x02\x57\xd3\xd0\x56\xb9\x91\x7a\x6a\xe9\xec\x6d\x57\xcb\x7e\x9c\x0e\xaf\x68\x7e\x39\xed\xa8\x67\x72\xa9\xea\x49\xb7\x18\x49\x0c\x79\x40\x20\x30\x52\xb1\x66\xf4\xf0\x6e\x5e\x60\xa8\xef\xb7\x1c\x2b\xc7\xe1\x05\xe9\xf3\x9c\xca\xae\xd9\x16\x15\x83\x6c\x3c\xab\x23\xc4\x80\x84\xf8\x4c\x5f\x46\x2b\xfa\x0f\x4d\x13\xd3\x51\x0c\x22\x68\xcd\x23\xae\xad\xb6\xdd\x34\x60\x66\xf0\xff\x8f\x16\xe8\x0b\x2b\x79\x65\x32\x13\xbb\xee\x10\x95\x48\xcf\xf6\x37\xd8\xed"
		"\x97\x58\xe4\x3f\xcc\x4b\xda\xa5\x4a\xe4\xd2\x85\x0d\x4a\xaa\xd8\x7f\x0b\x04\xb7\xa9\x3b\x7d\xf4\xe0\x26\x9d\xd5\x90\xf1\xf2\xd5\x1c\xee\x7f\xc8\xea\xf6\x0b\x6c\xd2\xb5\x78\xe1\xfd\x6b\x40\x9a\xe0\x7c\x79\xb2\x8e\x29\xc0\xc2\xea\x67\xf4\xe5\x7f\x7e\xf3\x49\xe2\x49\x50\xae\xac\xa0\x93\x6f\x25\x80\x81\x4e\x97\xab\xbb\x5a\x3c\xc4\xb1\x8c\x77\x92\x1a\x41\x1d\xd8\xa3\xb1\xc8\x79\xbc\x11\xa1\x63\x85\xca\x4f\xd1\xbd\xfd\x1f\x35\x21\xfe\xac\x52\x24\x48\x7e\x5b\xb5\x59\x7b\x00\x86\x9d\xef\xc1\xf0\xc7\x03\x81\xfd\xe5"
		"\x08\x73\xea\x58\x00\xe7\x54\x83\x25\xbf\xe0\x3a\x16\x5a\x99\xdc\xca\xe8\x02\x0e\xe6\x48\xeb\x68\x80\xcc\x14\x54\x96\x3c\x01\xcc\xc7\x3a\xec\x20\xea\x85\xbe\x7f\x32\xb5\xa3\xe7\xab\x8b\x92\x14\x1b\xbc\x0c\x8c\x6f\x60\xc6\x63\x02\x4f\x74\xd6\x27\x86\x07\xc8\xeb\x5a\x43\x5b\xc4\xed\xe1\x4a\x64\x93\x19\x40\x29\x4a\xeb\xe9\x8c\xf3\x9f\xdd\x94\xec\x52\x70\x7b\xc2\x01\x00\xc9\xcb\x7a\x77\xf5\xfb\x1d\xa7\x11\xaf\xc0\xe1\x2e\x0a\x6e\x57\x0e\x64\xb8\x02\xf7\xdb\xfe\xa7\xd8\xfe\xce\xde\x98\x87\x22\xcf\x3a\x4e\xfe\xa5"
		"\xb1\x36\xca\xfa\x5a\xaf\x0f\x60\xc6\x7c\x59\x00\xd3\xd5\x1a\xe2\x4a\xd8\x60\x82\x37\x75\xd6\xeb\x7d\xdc\x81\x37\x53\xa5\x34\x2e\x7b\xef\x55\x94\xe8\x1f\x3d\x28\x0f\x6e\xad\x35\xaf\xc2\x07\xc2\x2d\x56\x8b\xbe\x48\x34\xf4\x8b\xd3\xf3\x74\x66\x4e\x82\x8f\x88\x66\x5a\x06\xd6\xe5\x8e\x62\x12\xfd\x37\x70\x4d\x97\x0b\x1a\xf0\x8d\x28\x0d\x5c\xdd\xee\xba\x62\xee\x93\x0f\xe9\x97\xaf\x53\x0b\xe0\x6a\x50\x89\xf1\x5f\x61\x55\x73\x89\xe6\xd2\xfe\x29\x24\xea\x1a\xb5\x87\x76\xe8\xdb\x21\x4d\x60\x3a\x6f\xee\x29\x7f\xab\x95"
		"\xc1\x1c\x1a\x83\xe3\x71\x76\xcb\x2e\x3d\x8e\x96\x14\xc1\x8e\x0b\x5c\xd6\xbb\xe6\xc0\xa1\xc2\x39\xa9\x8c\x0a\x50\x12\xf9\x17\x4c\xf8\x7b\xd7\xbd\x65\x45\xa9\x91\xf9\x01\x1e\x0d\x02\x0f\x55\xf7\x80\xf1\x12\x75\x10\x77\x92\x4b\xac\x44\x27\x8d\xd7\x78\xe2\xeb\xc4\x8c\x82\xb5\x5d\xc3\xac\x3f\xef\xf6\x92\x5d\x13\x62\x88\x83\x67\xe3\x0c\xbd\xba\xbe\x40\xfb\x76\x32\x20\xa7\x5b\x89\xdc\x1f\xd2\x50\xc9\x6e\x78\x9d\xb6\x26\x49\x25\x9e\x15\xcb\x3c\xbe\x1c\xf6\x0b\xba\x6c\xcc\x2a\x88\x6f\x54\xe7\x95\x84\x31\xc7\x7c\xee"
		"\x5a\xf6\x9f\xef\x16\x2c\x70\xfe\x5a\x4e\xea\x44\x53\xc9\xb0\xdc\x01\xdf\x59\xd7\x9a\x3f\x2a\x75\x58\x1f\x16\x33\x7f\x9f\x7f\x13\xcc\x3d\xf8\x24\x3f\x88\xd0\xe3\xf3\x8a\x6f\xe7\x01\x74\xa5\x42\x2c\x17\xc7\xc5\x33\xf4\x07\x7c\x3f\xe8\x7a\xe7\x5b\x7c\x64\x9a\x61\xe5\x38\xe8\xe4\x71\xe9\x3f\xd7\xf3\x33\xec\x37\x72\xe6\x41\x92\xde\xc8\x1b\x34\x32\x58\xb6\x4f\x5d\x01\x37\x4b\xa1\x12\x21\x49\x8e\x53\x49\x87\x83\xea\x52\x7b\x04\x27\x4e\x65\x89\xc1\xa8\x2b\xf0\x68\x4e\x0a\xc6\x0f\x21\x15\x96\x47\x99\x3f\x90\xe5\xf0"
		"\x8f\x96\x9b\x5f\xeb\x49\x5b\x57\x2f\xa0\x3b\x73\x38\x55\x01\x1f\x27\x9f\x6d\x1d\xc4\x13\xcf\x08\xa3\x9f\x42\xff\x01\x8a\x56\x8a\x0b\x1f\xad\x44\x7e\x77\x8a\xc8\x14\x29\xe8\x93\xd2\x42\xbd\xc7\x3f\xcf\xe5\x44\x87\x9c\x4e\x28\xf2\x7b\xaa\x0c\x28\xf4\xe9\xb6\x8d\xc6\x86\xfb\x10\x70\xd1\xd1\xa0\xd1\x7e\x81\x8c\x11\x7b\x4c\xcd\x0e\xc3\x8f\x13\x66\xf2\x58\xae\x4b\x79\xdf\x31\x55\x51\x62\x71\x77\xfe\xd6\xb5\x56\x7d\xf7\x0a\x3f\x3d\xed\xa0\xc9\x41\x04\xc6\x49\x9a\x59\xf6\x1d\x37\x8f\x87\xfd\x7d\xd5\xbd\x29\x82\xbf"
		"\xfb\x36\x1f\x78\xb8\x7d\xa9\xe9\x36\x25\xb0\x01\x8b\x14\x4d\x51\x39\xea\xbb\xb0\xe2\xe4\x7e\xa5\x83\x5c\xdd\xf6\x96\x3e\x0f\xf4\x2b\x62\x8d\xe8\x39\xed\xe5\xac\xa2\x1b\xbe\x02\xc2\x79\x19\xe8\x53\x89\xff\x66\x33\x79\x28\xa9\x7c\x78\x04\x99\x43\xde\x6d\xfb\x95\x3f\xbf\x58\xbb\x0f\x2c\x85\x3c\x17\x5a\x0b\x7e\x74\xe4\x9a\x68\xd5\x9d\x72\xa7\x71\x5c\x2a\x83\x7e\x1d\xd2\x96\xed\x62\xcb\x6e\xbd\xb7\x6f\x7c\x48\x4c\x41\xc7\x69\xff\xa7\x97\x1f\xa0\x94\xbe\xe7\x6b\xb0\xaa\x1a\x85\x8a\x50\x17\xbb\xa0\xfe\x18\x8c\x9d"
		"\x7a\x77\xe6\x12\x05\xa4\x19\xf4\xaf\xcb\xc1\x3e\xef\xf9\x06\x8f\x24\x2b\xef\xb6\x2b\x5e\xc5\xba\xcf\x0b\x65\x1c\xbf\xad\xcb\x26\x40\xe6\xe4\xe1\xcc\x46\x05\x40\xff\x38\xac\x49\xf3\xeb\xf2\x0a\x44\x52\xd4\x94\x62\xde\x9c\xfc\xa3\x72\xef\x6b\xb8\x61\xc4\x56\xdd\x96\xf3\x8c\x60\xc3\x21\x69\xc2\x8c\xa3\x62\x1f\x3b\xef\x83\x2f\x69\xc3\xff\x6f\xe3\xa6\xc3\x8c\x0a\xa6\x2c\x06\x79\xec\x16\xec\xea\x57\x6a\xb1\xa3\x31\x4b\x7a\xc0\x9b\xf3\xa4\x12\xe8\xdd\x91\xe7\xfb\x21\xc3\x94\x88\xca\x22\x3b\x9b\x90\x10\xf6\x3b\xb8"
		"\x78\xe6\x02\x74\x94\x5c\xbf\x8a\x62\x80\x0f\xc8\xe1\xe9\x38\xf6\xd7\x0b\xbf\xb4\xd7\xd9\x21\x1f\x75\x30\xa9\x9d\xa5\x9b\xb2\x54\x22\xc0\xe8\x5c\xa4\xcd\x2f\xc1\x75\x0d\x5d\xc0\x5d\x67\xf9\x11\x3e\xf6\x4e\xf7\x70\x01\x55\x0c\x58\xe8\xbe\x79\x68\xbf\xb9\x78\xa1\x26\xd0\x34\x79\x48\xf8\xad\x5a\x32\xcb\x4e\x3b\xee\x68\x3f\x47\x60\x57\x61\xc4\xf4\x03\xe7\x85\xad\x35\x02\x57\xd2\xf0\xb7\x35\x71\x99\x9c\x3b\x9b\xa4\x9c\xc3\xb7\x11\x83\x07\x4f\x0d\xe3\x81\xfe\x7f\xeb\x53\x4f\xb5\x92\xf9\xfc\x5a\xdf\x17\xf8\xa6\x21"
		"\x19\x56\x2f\xb2\xdf\x36\x57\xf6\x6f\xb6\x60\x2e\x11\xce\x0b\x97\x43\x0e\x9f\xff\x7c\x3a\xc3\xb0\x15\xcb\xca\xb7\x95\xc3\xdb\xaa\xdf\xc0\x44\xbc\xf1\x7f\xb1\xa8\xf1\xca\x16\xd1\xd1\xb1\xb9\xe1\x4e\xc1\xf0\xb4\xad\x4b\x3b\x78\x77\xc0\x3a\xd1\x58\x9c\xd5\x3f\x16\xbf\xa5\xc5\xdc\x4b\x25\xa9\xf1\x21\xb8\xd3\x17\x07\x37\xf4\xea\xf3\x6b\x94\xdc\x8d\x4b\xba\x7a\x33\x64\xb9\xf6\x65\xcd\x6e\xbd\x57\x30\x5b\x86\xab\xf5\x47\x1f\xb3\x21\x6a\x4f\x9f\xa4\x56\xf5\xed\x26\x24\xce\x98\x04\x05\xd5\x2a\x63\x47\x91\x27\xe4\x1f"
		"\x72\xb1\x63\x6c\x97\x34\xdd\xc8\xa9\x6f\x80\x3d\xe0\x87\x35\x6d\x45\x32\x06\xe1\x3f\x70\xd8\xab\xd2\x5f\x98\xe1\xd0\x57\xca\x3d\x46\xa9\x9c\xd8\xaa\xcd\xd8\xe0\x1c\x91\x57\xf5\x85\xfa\xe3\x42\x5e\xbb\xdf\x86\xfa\x52\x21\x46\xc9\x4a\x0a\x58\x7a\xed\xd6\x91\x90\x94\x8b\xd3\x12\xcb\x42\x5e\x09\x5c\x4a\xbe\x24\xf9\x3a\x23\x42\x94\x8c\x28\xc2\x73\x32\x7e\x81\xc5\xcc\xea\xbb\xf6\xc7\xf5\x27\x51\xb8\x4d\x1b\x9c\x41\xbc\x4f\x81\x89\x61\x62\xae\xec\x89\x01\x96\x4c\x60\x7a\xde\xcd\xc2\x67\x6e\x24\x72\x94\x24\xcc\xa5"
		"\x6e\x64\xb6\x72\x18\xb9\x4f\x82\xf9\xfd\xf5\x0c\x0f\x2f\x00\x17\x4b\x88\x6d\x08\x32\xa5\xa0\x71\xc6\x3c\x3c\x2d\x0a\x82\x43\xd6\x1f\x33\x97\x66\xa2\xa4\x51\x68\x71\x53\x1c\x11\x94\xc2\x36\xd6\x32\xb7\x3e\x9f\x0f\x45\x75\x04\x55\xcb\x34\x00\xb8\xc9\xa7\x37\xfa\xa8\x99\x31\x36\x7c\xa6\x47\x9c\x2f\x15\x2c\x24\x49\x59\x3d\x5a\xa5\x94\xee\x24\xea\xd0\x7c\x31\xc8\x29\xdf\x43\x07\x7b\xeb\x08\x46\x1f\xfe\x3b\x05\xab\x2a\x27\xe5\xb1\xd9\x4c\x13\xdf\x2a\x15\xc8\xda\x04\xd8\x85\xa7\x5b\x1d\xba\x12\x86\x62\x31\xa6\x7d"
		"\x0a\x83\x03\x88\x91\x29\x04\x8c\x85\x70\xc3\x52\x15\x45\x13\xc1\x31\xb3\x20\x0c\x61\x5b\xcd\x6d\x5c\x92\xf5\xd3\x13\x8b\x72\x88\x30\xb8\xa5\xe0\xe8\xbd\x9c\x9c\xa1\x9a\xa3\x6c\x5f\x05\x4c\x6a\x70\xb8\x5d\xd5\xf3\xbf\xec\x62\xc7\xf6\xf6\x42\xd4\xbd\x3c\xf0\x30\x70\x26\xf9\xf0\x55\xa3\xa1\xcd\xa0\x06\x83\xa0\x42\xad\xd1\xa7\x48\xab\x88\x16\x67\x02\x21\x0a\x10\x99\x10\xca\x1e\x1f\x56\xfc\x43\x02\x06\x49\x6e\xcc\xac\xb7\x85\x08\xd6\xd3\x9b\xe9\x31\xc5\xeb\xbe\x2b\x4c\xda\xa3\xc6\x3f\xdf\x66\xe3\xd2\x3b\xc3\x57"
		"\x78\xed\x50\xcd\xed\xb6\x01\xfe\xaf\x27\x8b\x08\xf9\x13\x42\xb9\xe3\x2a\xc5\x1a\x43\xd3\xef\x59\xf0\xba\x6b\x20\x71\x5b\x6e\x79\x85\xf8\x18\xe6\xdc\xcf\x41\xc5\x35\x06\x56\x15\xc4\x0c\xcc\x8a\x39\x43\x00\xea\x3c\xe2\xd1\xc7\x8f\xfc\xb6\xa5\xaf\xce\x50\x1d\x6d\x59\xcd\x33\x01\x23\xdb\x67\xa2\x19\xff\x16\xb3\xf9\x80\xe0\xd4\xce\xc9\xf5\xcd\x94\x2e\x55\xff\x90\xb0\x60\x55\xe1\x53\xd6\x9e\x5c\xfe\x83\xb5\x86\x5f\xa0\x2d\x7f\x26\x5e\xff\x21\x61\xd0\x8c\xb4\xab\x9b\x94\x62\xea\x73\x57\x4a\xf7\x65\x8c\x62\x9f\xd5"
		"\xa6\xbb\xba\x70\x6e\xd9\x77\x68\x5b\x1a\x19\xf3\x6f\x35\x03\x3f\xbb\x10\x36\xc9\x99\xfa\x54\x4c\x52\xcc\x6d\xeb\x79\x21\x16\x8d\x15\xde\x08\xfb\xa9\x5b\x14\x61\xee\x10\xac\x52\x01\xc1\x80\x59\x90\x90\xb4\xe7\x11\x90\xfb\x66\x27\xb0\xa4\x73\xc0\x31\xc5\xe3\xcb\x6e\x42\x75\x14\x39\xc1\x31\xa8\x98\xc9\x7b\xc4\x90\x61\xed\x9a\x56\x9d\x0a\x3c\xd0\xd8\xdf\xf6\xed\x37\x5a\xd1\x36\xb7\xfa\x91\xd0\x39\x82\xb8\xc8\x7d\x3b\x79\x04\xb1\xe6\x4d\x4e\xd4\xfc\x16\xfc\xba\xf3\x0c\x15\x2c\xa9\x1f\x1d\xfc\x0c\x47\x7e\x8a\xa9"
		"\xe4\x4f\x12\x6c\x02\xf7\x06\xaa\x9e\x9c\x31\x04\x33\xa8\xb7\x40\x02\xa7\x8c\x93\x10\xf0\x57\x6a\x1b\x0e\x47\x22\x9b\x97\x85\x16\x35\xc7\x51\xe6\x34\xe9\xc7\xb2\xf8\x16\x92\x7f\xd6\xa3\xaf\x74\xef\x85\xeb\x43\x83\x73\xed\xa4\x16\x97\x54\xf8\xd7\x0b\x95\xc4\xaf\xb2\xe3\xbe\xee\xb4\xb6\xe4\xf0\xdb\x55\x74\xf6\xa4\x92\x23\x1f\x31\x90\xd8\xf4\x6d\x77\xfb\xe8\x0f\x2d\xc7\x09\xbb\x7c\xf8\xe3\x7c\xfb\x4f\xd6\x2b\x65\x72\xec\x62\x2d\x73\xc9\xe0\x0d\xf1\xb2\x50\xdd\x3c\x48\x45\x68\xc4\xd4\xbb\x0b\x59\x17\xe5\x50\xc3"
		"\x99\x92\xe6\xc6\x7f\x87\x0c\x83\x46\xa9\xb1\x07\x2a\x72\x16\x55\x44\x2d\x69\x1d\xb8\xb9\xc3\x43\x5a\x8e\xa6\x03\xc9\x53\x83\x20\x86\x15\xe9\xc9\x73\xe1\x5d\x9e\x27\xad\xb8\x44\x9a\xec\x8b\xa7\x53\xef\x44\xd1\x2e\x0b\x22\xbc\xbc\xeb\x3a\xc8\x34\x91\x2d\x2e\x06\xe5\x8b\xfd\x2c\x23\x0c\x19\x7b\xe6\x80\x21\xea\x56\x87\x9e\x8d\xa5\xb3\x87\xb0\xb4\x56\x3b\xca\x20\x61\x65\x72\x88\xab\x16\xcd\xa9\xcf\xed\x8b\x87\xe9\xc9\x83\x26\xc1\xd1\x87\x66\xa3\x65\x5c\xcf\x0a\xda\xd8\xf8\xcb\x99\x4d\x66\x3a\x0c\x8d\x38\xfb\x66"
		"\x6b\x49\x0a\x52\x14\x3f\x75\x6f\xe7\x89\xe9\xf0\xdc\x70\x69\x63\x77\x65\x7c\x79\xc7\x18\x37\xc6\xb0\xde\xb9\x95\x13\x11\x47\x73\xc5\x4e\x55\xc2\x4e\x63\x39\x70\x63\x6f\x39\x9b\x0d\x38\xb9\xf8\x9a\xb6\xf2\x80\xf5\x3e\x75\xae\xf8\x60\x5f\xcc\x49\x01\xaa\x0f\x71\xab\x3d\x4a\xb5\x3f\x47\x9a\x9f\x0b\x6b\xfe\x3a\x21\x85\xab\xf4\x09\xb0\x48\xee\xc8\x41\x76\xb9\xac\x2d\x4b\x11\xca\x03\x39\x61\x5c\x40\x95\xe1\x3b\xd2\x88\x7d\x71\xd2\xc8\x6c\x2a\x1d\x7d\xca\x12\xd8\xb8\xc0\x83\x62\x39\x33\xf8\x93\x26\x60\x9c\x10\x96"
		"\xdf\xee\xb2\x53\x79\xcb\xfa\x48\xbc\xee\xff\x6a\xee\x63\xff\xa9\xbe\x93\x4b\xfd\x08\xbd\x4b\xf9\x47\x29\xda\xc1\x77\xb1\x5c\x0c\xb1\x98\x08\xb4\x75\x8e\x6c\x2d\x8e\x5a\x02\x3c\x1d\xe9\x12\xa5\x67\xb0\x48\x0f\xda\x20\x92\xa1\xb7\xe8\x23\xeb\xb8\x4a\x88\x52\xe5\x10\x32\xc9\x37\xb3\xe8\xe0\x41\xe6\x57\x64\x51\xa9\xc0\x58\xb6\xae\xd4\x4f\x5f\x51\x46\x8f\xba\x58\xf1\x74\xda\x0b\xf1\x69\x98\x40\x8c\x79\x55\x94\x3c\x08\x2f\xa1\xa4\xfd\xc1\x4b\x0e\xd1\xd6\x29\x29\xc0\x70\x61\x69\x74\xf8\xa1\x85\xd6\x27\xea\x1b\xc8"
		"\x95\xf5\xfe\x9d\x5e\x2b\xe8\x80\x82\x53\x9d\x34\x53\x12\x46\xaf\xd8\xb3\xa6\xff\xff\x8e\x9e\xb7\x86\x24\x8f\x4e\x34\x0a\xec\x9b\xdc\xec\xeb\xcf\xb1\xcd\xf6\xfe\xf9\xe1\x7e\xe0\x9d\x12\x5f\xd8\xa2\xa5\xbf\x94\x69\x6f\x6d\x17\x17\x43\xdc\x38\x2d\x50\xc7\x9e\x51\x28\x26\x93\xc7\xd4\x53\x08\xb7\x5a\xf4\xa6\x44\x61\xa2\x64\x5e\xaa\x54\xe6\x34\x4f\xcb\xb2\xad\x45\xe6\x03\x25\xf5\x3e\x85\x6b\xdd\x39\x18\xae\xdf\xa5\x67\x8e\x97\x35\x45\x9f\xfc\x68\x24\xd3\xc7\x88\x6c\x3e\xa7\xf5\x76\xee\x4c\xba\x7e\x81\x3a\xe2\xba"
		"\x86\x98\x13\x6b\xfd\xae\x75\xd1\xa7\xa6\x40\xc9\x35\x3e\x32\x1a\x5b\xfa\xa6\x2c\xc0\x9e\xd8\x38\x36\xf9\x2e\x88\xa1\xdb\x1f\xaf\xcb\x39\x54\x85\x6a\x58\x99\x57\x59\x00\xd4\x72\x07\xe9\x23\x8f\x13\xa2\x7f\x4d\xb8\xc5\x32\x7f\x4f\xae\x62\x26\x1f\xf8\x67\x98\x87\x63\xb2\x50\x27\x4b\xdd\xce\xaf\x7d\x8c\xda\x9f\x29\xa6\x57\xba\xdc\xe6\xb1\x49\xc1\xcf\x21\x43\x40\x74\x2f\x30\x4e\xb6\x55\xf3\xd0\x56\x98\x5d\xf1\x4a\x94\x9a\x62\xc4\xb4\xcd\xe3\xaa\x5d\x16\xc8\xa3\xf1\xbc\x6e\x50\x2e\xa8\x39\x0a\xcb\x56\x1e\x8a\x64"
		"\x29\x34\xea\x22\x71\x04\x5a\xe4\x80\xa9\xb4\x3a\x4f\xaf\x18\x87\x10\x26\xa4\x73\x83\x53\x1a\xe3\x89\x6f\xb0\x2e\xd6\x94\x97\x73\x68\x1e\xac\x6b\x8c\x24\x3c\xcf\x9d\x2a\x19\x7f\xb4\x24\xf8\xcc\x18\xf6\x50\xc9\x9e\x0c\x08\xe8\x83\x83\xb9\x50\xa1\x5b\x6b\x09\xb9\xc8\x03\x15\x19\x19\x3c\x18\xc6\xfe\xb9\x6c\x0e\x18\xe5\x57\xfe\xb3\x65\x12\xdd\x77\x1b\x90\x46\x93\x89\x07\xc1\xbb\x58\xc0\x43\xb3\x7f\x03\xee\x3f\x14\x8c\x56\x35\xf6\x89\x68\xd8\xfb\xdc\x69\x23\xec\xa4\x23\x0d\xfc\xdb\xf8\xd7\x36\xc0\x84\x9a\xb3\x65"
		"\x1b\x0e\x00\x5b\xae\x04\x94\xa9\xac\x67\xa4\xb6\x5e\x97\xb5\x34\x57\xf9\x62\x68\x31\xa3\xc1\x0e\x14\x86\x5c\x92\x38\x31\xcb\x07\xd1\x77\xfc\x0e\xb5\x8e\x36\x4b\x5d\x51\xa2\x42\xd2\x88\x90\x2e\xe8\xdb\x55\x70\xd7\xe3\xd6\x72\xb3\xbd\x23\x59\x3f\xce\x62\x37\x61\x41\x5d\x44\x4a\x92\x20\xcb\x4c\xaa\x8e\x3a\x92\xe0\x3a\x00\xa8\x28\x0f\x04\xce\x87\x3d\xaf\xf5\x1d\x25\x7e\x8c\xba\xeb\x17\xd9\x65\x24\x4a\xda\x87\x73\x63\x43\xc7\xf7\xd1\x32\xbc\x59\x08\x9e\xe1\x35\x3e\x5e\x8d\x5c\x2a\x3a\x5d\xca\xf5\x5f\x83\xba\xff"
		"\xbb\x29\xdc\xfa\x88\x3f\xbb\x23\x06\x04\xdb\xab\x51\xc0\xb5\xe7\x50\xa0\xe4\xe9\x35\x9b\xb5\xa5\x02\x37\x4a\x7a\xe2\x6b\xce\xc9\x1a\x02\x4b\xb7\xf2\x85\x5a\x20\x6f\x30\xbe\x5b\x45\xef\x4f\x42\x69\x87\x8f\xb4\x94\xd3\xfc\x99\xce\x9e\x2d\xa5\xaf\xb6\xff\xd3\xe1\x4d\x58\xe7\xbb\x75\xa4\x5e\xda\x51\xc7\x5d\x14\x32\x4f\x97\x92\x51\x6e\xd5\xde\xf5\x40\x14\xc2\xe4\xc0\x36\x76\x17\x1e\x20\x67\x21\xb7\xf3\x16\x44\xfd\x46\xd9\x6d\x65\x17\x90\x9a\xc5\x17\x71\xab\x7f\xba\xe3\x4d\x65\x80\xe1\xee\xfe\x3f\xbf\xc1\x7b\xcd"
		"\xda\x98\x5f\x16\xcc\x65\xbd\x5f\x84\x73\xb1\x1c\x55\xcc\x0b\x0a\x03\xb2\xa6\x2d\x70\xd0\xe2\xda\x88\xd5\xe6\x17\x09\xc4\x3c\xab\x7b\x45\x86\x19\x3b\x2a\x8c\xa4\xeb\x62\x7a\x0a\x8b\x6f\xe5\xb2\xd9\xe1\x06\xe4\xc5\x7f\xad\x33\x7c\xe0\xec\xa5\x2d\xcd\xb0\x2b\x53\x0d\x2b\x53\x87\x04\xbf\xd2\xa7\xe5\x37\x99\x45\x64\x16\xf5\xb4\x37\xd7\x53\x40\xf6\xac\x77\xbb\xdb\xa7\x63\x47\x4b\x63\x13\x89\x7a\x27\xe0\x41\xd1\xb1\x75\xa2\x62\x77\x68\x6c\x6c\xbb\xa0\x41\xd9\xe5\x1e\x11\xa8\x07\x41\xd9\xdd\xc7\x89\x22\x1a\xbe\xe0"
		"\xdf\x40\xdc\xc7\x1d\x4f\x7e\x2c\x5a\x4c\xa9\x22\x99\x80\x84\xf0\xb8\xaa\x7c\x3a\x79\xb5\x9c\x32\x81\xe0\x0d\x5a\x44\x54\x4e\xcf\x93\x42\xa4\xa3\xc9\xf0\xba\x82\xf1\x25\xaa\x77\x65\x10\x91\xf8\xbb\x37\xb6\xfb\x93\x19\x29\xbb\x25\x25\x86\x80\x4d\x13\x84\x9b\x60\xcf\x39\x5e\xdb\x1d\xe2\xaa\x65\xa8\x47\x7d\xc2\x62\xd4\xcd\x83\x5c\x28\xbc\xdc\xb7\xcf\x41\x36\xaf\xb4\xbe\x86\x27\x74\x3b\x3c\xf9\xf8\xea\xdf\x66\xa5\x32\x4e\xb3\x0f\xe9\x64\x9c\x82\x3a\xd6\xb0\xc7\xc1\xb1\x45\xcc\x8d\x29\xd2\x3b\x15\x3d\xe3\xe1\x47"
		"\xee\x67\xda\x7a\x8e\xab\x10\xb5\x8f\x37\xca\x62\x2c\x09\xfe\xb8\xa5\x73\x55\x85\x08\x5d\x66\x78\xda\x6f\xb5\x0c\x1e\x13\x13\xd7\x6d\x27\x40\xb7\x53\xdf\xdf\x19\x3c\x8e\xff\x59\xaf\xf0\x10\x35\x63\xb0\x27\xd8\xd9\xc4\x4b\xc7\x38\x67\x05\x5b\x5f\x86\xac\x49\xdb\x8e\x86\xc4\xab\x4d\xdb\x4d\x7e\x10\xb5\xb4\x94\x01\x29\x9a\x47\x5d\xce\xed\x36\x7c\x78\xdc\x4b\x36\xf7\x16\xb3\xba\x0f\x29\xc6\xa7\x59\x6d\x6e\x1f\x02\x0f\xf1\x43\x40\x09\x68\x28\x0f\xcb\xab\xf3\xd6\x00\x37\xe9\xc2\x49\xd4\x27\x50\x58\x3e\x12\xf6\x62"
		"\x2d\x7b\x2a\xf7\xe5\x22\x06\xc5\x24\x9a\xde\xb3\xc6\x82\x21\x2b\xfb\xff\x1d\x1a\xe1\x2e\xa0\x25\x28\x8f\x11\x81\xa7\x6e\x10\xf1\x2d\xdb\x1f\x97\xaf\xf4\x97\xad\xbf\xf8\x1f\x5f\xe1\x00\xc8\x17\xd4\x8f\x25\xc1\x02\xc2\x95\x9d\xd0\x32\x12\xd5\xa0\x43\x84\x3d\xe1\x51\x02\xbc\xcf\x16\x84\x48\x0b\x6a\x7a\x22\x6a\x29\xec\xef\x04\xa9\xe0\x5a\xef\x4b\xde\xa4\xb4\xf1\x85\x82\xed\x66\x72\x8c\x37\x52\x0c\x5d\x24\xf6\xa1\x94\xd9\xeb\xe0\x3c\x12\x8e\x5d\x58\xd4\xe2\xb5\xbb\x16\xfc\x6c\xd1\x2f\x24\xe6\xdf\x9e\x11\x4d\x41"
		"\x95\x96\x73\x31\xe0\x53\xca\x9d\x4a\xa4\x88\xab\x45\xf5\x34\xd6\x5d\x48\xd7\x91\x59\xdb\x95\x8d\x45\xab\x54\xb0\xdd\x73\xb3\xa8\xcd\x0b\x6d\xf2\x51\x9d\xa2\x3f\x36\x82\x64\x6e\x8c\x63\x34\xf7\x3d\x26\x2f\x22\x80\xc9\xf8\x39\xfc\xfd\x4e\x4c\x53\x6b\xa4\x55\x0e\xe7\xeb\xef\x33\x4a\x46\x02\x9d\x00\xee\x4e\xe6\xdf\x65\x01\xc6\xac\x52\xf2\xa4\x3d\x6b\x26\xf1\x22\x11\xb3\x45\xb6\xbf\x7d\x83\x72\x88\x4d\xac\x88\xcd\xdb\x2d\x54\x02\x08\x31\x53\x9d\x94\x0a\x4c\xfa\xa6\x36\xa6\xaa\x1e\x4a\x9a\x4d\x54\xc3\x35\xe1\x92"
		"\xbb\x6c\xa2\x95\xdf\xff\xd7\x72\x7a\x2d\x02\x14\xe8\xbf\x2d\xda\xb1\x3e\x61\xbd\xe5\xdf\x04\x78\x35\x27\x01\x0c\xed\x15\x21\xf9\x61\x79\xb6\x4f\x13\xd4\x00\xa1\x5a\xac\x72\x68\x4a\xc8\x4c\x05\xcc\xcb\xa2\x53\xea\x37\x1f\xb5\x9e\x97\x61\x23\x00\x74\xba\x50\x26\x43\xc1\x27\x6e\x09\x3e\xdf\x7a\xa6\xbe\x96\x96\xfc\xc8\x79\x53\x19\xb4\xfd\x01\x0c\x5f\xec\xe4\x5e\x15\x2d\x11\xad\xea\xa7\x65\xcb\xcc\x23\xf6\x54\xd2\xb4\x98\xfc\x39\x9d\x67\x7d\x6e\x9f\xb2\xd5\x1f\x3a\xf3\x26\x2a\x5e\x01\x5a\xd1\xf8\xb1\x25\xce\x99"
		"\x6c\xe0\xc6\x0c\xc0\xcc\x50\xf9\x10\x73\xd8\xcc\xc0\x66\xad\xd9\x45\x2f\x32\xab\x44\xe4\x56\x40\x2d\xc9\xa6\x29\xe6\x7a\x23\xb6\x3b\xe4\x88\x2a\xc3\xfa\x18\x5a\x3c\x74\x33\x60\x92\xcf\xbb\x9f\x17\xbc\x05\x8c\x78\xc4\xe2\xba\xeb\x97\x3c\xbc\x58\x21\x09\x16\x6a\xda\x39\x02\x6b\xc0\xb2\x5a\x70\xc4\x5d\xd4\xaa\x6f\x75\x71\x86\xe8\x58\x38\x1d\x6f\x45\x39\x35\xc2\xa3\x21\xe0\x52\xa9\xe8\x72\x63\x32\x44\x75\x4a\x82\xfc\x37\xa3\x41\x6a\xf5\x25\x34\x97\x88\x9b\x6a\x74\x97\x3c\xee\x84\xc2\x19\xfc\xa9\x6c\xd7\x10\x43"
		"\xb4\x97\x08\x14\x2b\xf2\x9b\xa7\xa6\x62\xf6\x3b\x8e\xeb\x80\xb6\xa5\x42\x99\x5e\x38\x54\x86\x8e\xd5\x1b\x5e\x9f\x57\xcd\x88\xa1\x76\x98\x12\x70\xdd\x3f\xd8\xb4\x2c\x38\x28\xf5\x25\x60\x7c\x4e\xef\x5e\x71\xce\xe4\x5e\xb0\x60\x01\xcb\x22\xe5\x6b\x3d\x50\xa3\xc6\x81\x51\x73\x3d\x22\x9d\x31\x1a\xa8\xda\xb7\x39\x63\x62\xa9\x76\x23\x0a\x66\x19\x36\x54\xe5\x76\x36\x86\x62\xe8\xc2\xa7\xfe\xfb\x07\xdf\xbd\x4a\x23\x05\x71\x28\x62\xf9\xa9\x98\x70\xcc\xa5\xe2\x8d\x78\x11\xf4\x64\xb3\xe2\x9c\xc2\x3c\x45\x6b\x37\xa5\xc7"
		"\xf7\xb0\x99\x57\x5d\x04\x5f\x4b\x75\x2c\x3e\x44\x94\xb3\x22\x58\xfa\xf6\x6b\x09\xda\xe0\x1e\xfc\x41\xd0\xbc\x75\x1f\xe8\x5f\x60\x68\x9b\xd9\xd3\xf8\x23\xde\xc4\x8c\xe1\x26\xc3\xaa\x5f\xbd\x38\xbb\x98\x60\xb7\xa8\x19\xff\x9c\x62\x94\x84\x5d\x6e\x73\xca\x07\xa0\x8b\x2a\x62\x09\x0d\xaa\x94\x9f\x19\xc6\x68\x67\x47\xca\x0d\x36\x45\x2d\x0b\x3b\x8b\x30\xd6\xde\xd2\x40\xe7\xde\x98\xdf\xbb\x40\xf2\xa6\x8f\xbf\xfc\x2e\x37\x70\xc4\x2f\x99\x61\x55\x74\x15\xb8\x10\x15\xd0\x4f\xde\x2c\x03\xf4\x50\x8c\x29\x48\x57\xc2\x37"
		"\xd1\x54\x36\xc6\x3e\x39\x13\xfd\xff\xfc\xe1\xc3\x5f\xc1\x95\x6a\x44\xb0\xd5\x5d\x9f\x5b\x96\x16\x91\x58\x52\x8c\x13\xc8\x30\xfc\x21\xa6\x78\x6a\xe8\x6e\x37\xa8\xe2\x8a\x0f\x26\x49\xe5\xa6\x4b\x73\xce\x38\xf1\x2d\x02\x85\xa4\x14\xde\x2d\x07\x76\xf7\x48\x87\x48\xbe\x30\x25\x06\x3e\xb9\x04\xf1\xdd\x76\xf8\x4b\xd9\x29\xfe\x02\xab\x90\xf9\xc4\xa6\xe0\xb3\x5f\x9b\xd3\xb0\xed\x5e\x98\xe3\x2a\x2a\x9d\x21\x26\x3b\x44\xae\x74\xfd\x73\x90\xec\x90\x92\xab\xc8\xbe\x8d\x0c\x31\x25\xb7\x8f\xac\x1a\x72\x7d\x71\x51\x87\x79"
		"\x3d\x4a\x09\xf7\x62\x27\xba\x55\x38\xce\x9f\x90\xd9\xb6\x24\xd8\x19\x13\x5b\x73\xfd\xdb\xe6\x3a\x06\x4c\xac\x60\x2e\x7c\x50\x66\x07\x37\xad\x4d\x28\x85\x48\x61\xcc\xc2\xc8\x85\xe6\x0b\xdf\x13\xde\xd9\x11\x1f\x8d\xd1\xe2\x77\xfb\x31\x23\x41\x64\x18\xb0\x04\x9e\xba\x82\x43\x1a\x3c\xa7\xa2\x1d\xe9\x84\xcc\x9b\x66\xb6\x0b\x93\xf4\xef\x1d\xfd\x9f\xdd\x06\xd6\x86\xb2\x04\x8e\x36\xcb\xab\x88\x65\xd4\x52\xfe\x8e\xec\x06\xcb\xfd\xdb\x49\x4a\xe3\x99\x9f\x93\x1e\xa3\xbf\x37\x13\xdf\xcf\x07\xbd\x56\xe4\xac\x56\x0d\x26"
		"\x1c\xa5\xaf\x7a\x46\x96\xe0\x37\x2a\x37\x92\x0d\xb3\x74\x79\xde\x73\x34\xd9\x1f\x44\x84\x8f\x06\xce\x42\xda\x61\xf2\x7f\x08\xa8\xcc\x30\x60\x34\xcd\x36\xb9\x8a\x9c\x98\xd0\xdb\x32\xa5\xcb\x95\xef\x8e\x7d\x38\x85\x05\x36\x36\x7c\xf7\x48\xe1\xc4\x66\x78\x1b\x2b\x1e\xe5\x4d\x45\x7b\xd2\x8f\x41\xbd\xe0\x80\x45\x0b\x41\xf1\xee\x9f\x28\x54\x45\xf1\xe2\x29\x99\x35\xa4\x8d\xb2\xb0\x57\xc0\x06\xe4\xf8\xbe\xfd\x05\xb0\x26\xec\x5a\xd1\xea\x03\x86\xb2\x56\x3a\x44\x16\xfd\xed\xe9\xa4\xeb\xbd\x35\xc9\xe5\x78\x13\x1b\xa3"
		"\x36\x34\x54\x9f\xd0\x09\xbb\x2c\x45\x92\x0b\x0e\xe6\x7a\xf5\x68\x43\x2d\xdb\x5b\x1d\x30\x54\x0e\xd8\xa0\xfb\xc9\xaf\xb1\x66\x55\x31\x64\xc7\xf3\xd8\xb1\x1e\x79\x95\x31\x93\x7e\x24\xfe\xd2\x71\xe4\x2d\x46\xca\x43\xa0\x40\x98\xa8\xb8\xd4\xa2\x5e\x79\xa5\x8e\x0a\x6a\x6a\x71\xc8\xd5\xee\xac\x4b\x19\x9a\x4e\x12\xd9\xef\xa9\x4b\x09\x59\x00\x9f\x63\xe0\xc6\x57\x21\x53\xc6\xa7\x55\x5f\x73\x74\x37\x46\xaf\xa3\xf5\x26\x50\x4b\x2c\x30\x76\x3d\xdb\x74\xdb\xdb\x05\x47\x9f\xe2\x48\xcf\x71\x5c\x93\x27\x4f\x9d\xe6\xc0\x14"
		"\x63\xc8\xa3\x61\xd5\xc9\x0e\xc5\x57\xc7\x5b\x73\xab\x76\x7b\x0a\x7f\xa5\x8a\x95\xdc\x7e\x0e\xef\xd2\x57\x54\xa4\xb5\x6f\xfa\xdb\x8d\x4a\xc1\xef\xd1\x3b\x9f\x20\xa0\xee\x3a\x09\xda\xb3\xad\x0f\xff\x83\xf9\x13\xe8\x8d\x23\xda\x55\x38\x1f\xd4\xac\x53\xb0\x6a\xc2\xb5\x9f\xa2\x80\xd5\x0b\x93\x1f\x3f\x60\xc1\xfb\x26\xb9\xd8\x45\xfa\x7e\x6d\x25\x49\x8f\xc2\x44\xbf\x77\x87\x68\xce\x55\x23\xb8\xbc\xb9\x58\xc7\x21\xcd\x57\x0e\x31\x34\x9c\x7c\x11\x9d\x9c\xeb\x6e\x0b\x09\xea\x42\x81\x21\xe0\x9a\x01\xee\x76\x5a\xa3\xc7"
		"\x48\x08\x39\x43\x0a\xd1\x63\x17\x38\x81\x65\x2c\xe8\x8f\xff\x8d\x55\x7b\x28\x31\xd8\xd3\xbd\xd0\xe1\xfa\x0c\xfb\xbe\xf6\xd1\xcc\x16\xc2\x6d\xc7\xfe\x06\xbc\x15\xdb\xf6\x76\x59\xc3\xe5\x30\xfd\xb1\x28\x40\x9b\xc2\xf0\x91\x98\x98\x34\xaa\xdc\xe7\xd8\xfc\x5e\xfa\x66\x41\x9b\x7f\x1f\xb6\x76\x0b\xfb\xe3\x34\xbb\x9f\xa7\x46\x72\x1a\x53\x26\x95\x29\xc8\xcc\xcd\xef\x4e\x87\x72\x92\xfe\x96\xb0\x38\x80\x63\xfc\x2a\x86\x2e\x1d\xa9\x5b\xd6\x95\x94\x8f\xd3\x09\x1a\xc1\x53\x12\xd7\x17\x87\xd2\x90\xcd\xe7\x6e\x96\xeb\x12"
		"\xf4\x38\x9e\x29\xe1\x63\xe4\xf2\x47\x7f\x11\xa6\xd2\x3f\x5d\xc0\xeb\xab\x02\xfd\x2c\x45\x03\xec\x0d\xf4\xe2\x32\x6f\x2c\xa1\x36\x55\x37\x7d\xfb\x27\x00\x66\x98\xa0\x05\x1b\x60\x6d\x79\x57\x64\x4a\x02\x1c\x7e\x8a\x62\x91\x2a\xb5\x8a\xec\x2b\x0a\xd5\xcb\xb7\x88\x50\x90\xb9\x5a\xb3\x68\x9b\xcb\x36\xa8\x62\x84\x43\x86\x66\x2d\x7c\xd5\xbe\xe4\x06\xa7\x9f\x15\x09\xbd\x21\xf4\x5d\x25\xe8\x05\x61\xff\xd9\x26\x97\xf7\x58\x98\x13\x8c\x18\xb2\xc3\xbe\xe2\x66\xa3\xa0\x0f\xeb\x0e\xfe\x01\xc8\x3a\x9c\xca\x72\xe8\x34\x33"
		"\x1b\xe5\xc1\x2a\xdd\x83\x76\x0a\x4e\xe0\x5a\xfc\x2b\x65\x80\xb4\x4b\xdd\xc3\x35\x34\x3a\xcc\xf6\x6e\xfb\x93\x13\xc7\x41\x02\x25\xcb\xef\xd3\x99\x6f\x7c\x93\xec\x85\x4d\x83\xd4\xaa\x9d\xa1\x71\x46\xd4\xa2\x34\xc0\x3b\x6e\xba\x11\x8f\x80\x2d\xaa\x70\xbd\x97\x1d\x3b\x1f\x68\x30\xff\x6c\x61\xbb\x24\x79\x85\xde\x86\xea\xbe\x00\x87\xc4\x95\x06\xfc\xaf\x23\x9c\xbd\xe1\x0c\x54\x5b\x45\x60\x3d\xc6\x7b\x45\x6f\xbe\xce\x0e\x04\x89\x21\x1d\x65\x67\x31\xfa\x6b\x2b\x8e\xf0\x1c\x85\x15\xcc\xca\xaa\x33\x6c\x1f\xe8\xa3\x03"
		"\x84\x77\x45\x59\x6d\xc4\xc1\xdb\x0f\xd1\x5b\x06\x98\x50\x37\x38\x5b\xda\x01\xad\x2d\x33\xdc\x01\x77\x0f\xc2\x11\x52\xca\x6f\xf4\xf8\xd4\x71\x7b\xa8\xfe\xe6\xe8\x7a\xf5\xb8\xd3\xc7\xed\x06\x82\x0c\xcd\x64\xee\x02\x96\x9c\x7b\x7c\x2b\x7f\x01\x3f\x74\xbc\xf2\xc4\x9b\x96\xe7\x86\x59\xf6\x63\xcf\x02\x06\xfa\x52\x7a\x9b\x78\x35\xde\xc6\xd1\x21\x58\x3e\x89\x5d\x1b\x1b\xd1\x87\x1c\x28\x30\x8d\x18\x32\x60\x09\x77\x60\x94\x97\x78\x5c\xb8\x3a\x66\xcf\x91\x06\xa4\x4b\x27\x1b\x80\xcc\x2a\xe1\xb1\xd7\x46\xfc\x51\x94\xef"
		"\xcd\xe8\x70\xcb\xd7\x0c\xb2\x48\x9c\x13\x60\x43\xae\x31\x7f\x5f\xcb\xcd\x4d\xb6\xb1\xf5\xa2\x94\x43\x04\x76\xda\x00\x1d\xe0\x8d\xb6\x02\x1b\x98\xc3\xa2\x06\x20\x6f\xb5\xec\xb8\xc4\xcd\xc3\x4c\xdd\x0f\x66\x64\xf3\xf0\xba\xd5\x6a\x9a\x9d\xea\x2f\x87\xa1\xc9\xb3\x5b\x34\x29\x8b\x8c\x63\x9e\xe2\x71\xad\x26\xd8\xfd\x1c\x8a\x2f\x8c\xd7\x2a\xf2\x2c\x90\x79\x6a\x6e\x81\xa5\x08\x88\x1d\x40\x00\xdd\x47\xf6\xf1\xc9\x69\xa6\x90\x0e\xe9\x5d\x23\x47\x23\x33\x2c\xf2\x90\x5d\x8e\xcf\xe3\xfb\x09\x01\x77\x4d\xa4\x5c\x3b\x3f"
		"\x69\xed\x7e\x8f\x45\xd1\x82\x03\xcb\xe6\x19\xb9\x89\xdf\x3a\x08\xa5\x74\x1c\xc8\x08\xab\x50\x23\xb8\x97\x77\x55\xc0\xfa\x97\xdd\x69\xe6\x26\x36\x36\x38\x78\xea\x8c\xd2\x19\x36\xaf\xab\x39\x27\xd1\xd3\xaa\x7c\x1a\xd5\xb3\xd5\x32\x0a\x60\x80\x37\xc2\x6b\x33\xf3\x5a\x61\xf9\x8e\x79\xf2\x55\xd7\xcf\x63\xdc\x11\xd6\xfe\xc1\xb1\x73\x29\xb2\xe5\xcd\x5f\x4f\xd1\x04\x8a\x5f\xb2\x3a\xf3\xa2\x1c\x15\xdc\x78\xcc\x01\x8e\x43\xf0\x25\x4b\x16\xbe\xaa\x36\x89\x90\x4e\x49\xbf\x15\x66\xa1\xa0\x70\x93\xf0\xa6\x02\x25\xf6\x78"
		"\x65\x34\xb2\x3f\xa7\x1d\xe8\xe2\x6d\x24\x42\x27\x69\x71\x93\xd9\xd2\xfd\xdf\x29\xd2\xfb\x49\xa1\xc1\xef\x8f\xa3\x38\xee\xb7\xf9\xa7\x71\x5e\xdd\x36\x2e\x48\x57\xff\x0c\xc4\xf9\x3b\x92\x4e\x0d\xf1\x3e\x79\xe6\x17\x75\x1c\x6c\xe3\xef\x75\xc4\x40\xef\x5f\x07\xa8\x61\xa9\xde\xd3\xcf\xa5\xdf\x01\x1d\xc1\xdf\xd9\xbd\xb3\xa7\x59\x99\x3f\x35\xaa\x4e\x9b\x61\x71\xc7\x1c\x62\x27\x66\x3f\x20\x0d\x52\x67\x1e\x61\x67\x1c\x35\x78\x91\x17\xb1\x74\xcd\xe2\x91\x25\xcf\xbc\x03\xd5\x72\xd4\xed\xa2\xba\x7b\x40\x16\x99\xa1\x8a"
		"\x5b\x83\x8c\x03\xc7\x3d\x94\x82\x50\xaf\xd5\xb2\xaa\x9b\xcf\x25\x88\xbf\x5f\xd4\x5f\x1f\x79\xae\x56\x6f\xf3\x66\xf3\xb2\x7d\x6b\xc7\xd6\xc3\x00\x1b\x76\xaa\xde\x03\xd4\x38\x40\xc6\x31\xc3\xe7\x9f\xe5\xb7\x0c\x2b\xd8\x3c\xf4\x6d\xa7\xc8\xa9\xbf\x0f\x32\x2d\x8b\xce\x4b\x84\xba\x92\x44\xfe\x12\x2f\xe8\x8a\xa8\xfb\x97\x9a\x82\x48\xae\x70\x80\xd2\x45\x0a\xd1\x33\x5d\xab\xae\x7d\xd5\x87\xa8\xca\x0e\x12\x0a\x7c\x99\xc4\xd0\xbc\xbe\xa8\xdf\x41\xfb\x68\x80\x96\xbe\x96\xce\x6a\x76\x33\x26\x2f\xef\x16\x66\xd3\x60\xb2"
		"\x06\x29\x72\x07\x9a\x6f\x88\x62\x2d\x8c\x0d\xd7\x21\x12\x2f\x8e\x34\x66\xf2\x24\x63\xfd\xab\x4e\x47\x2e\xb6\xa3\x96\xc6\x9a\x7a\xd7\x4d\x9b\xae\xd0\x48\xe7\xcc\x28\xca\x55\xec\x55\xa1\xf3\xd8\x99\xdc\x42\x42\xaf\xd8\x4a\x73\xb0\xe3\xb8\x3d\x7a\x71\xe7\x43\x4b\x24\xfc\xd2\xa6\x7f\x07\x2e\xbd\x8e\xb1\x78\xd2\x99\xe3\x69\x69\x71\x37\xce\x77\xd0\xa1\x1a\x92\x41\x76\x85\xde\x20\xe7\xbe\xe4\xea\x0a\xd3\xba\xd7\x8c\x51\x62\x1e\xe4\x6b\xd5\xbc\x0e\xf5\x79\x50\x94\xfd\xb3\x32\x23\xf3\x58\xaa\x34\x21\x93\xcf\x8a\x30"
		"\x1e\x3d\xe0\x68\x94\xd9\xfa\xdb\x14\x5e\xd5\x20\xc7\x6f\x77\xb3\x0d\x62\x2a\x0b\x3b\x25\x2d\xd6\x61\x1d\x70\x4e\x1d\xa6\xaa\x16\x4f\xc4\xf6\xcf\x33\x56\x37\x07\xc7\xf7\x3c\x69\x2f\xf3\x58\x84\xdb\x69\xf5\x00\xf5\xe3\x14\x57\xe9\x6e\x42\xcb\x45\x4d\xc1\x39\xd9\x26\x7f\x70\x51\xb6\xfc\xf9\x32\xf6\xeb\xa5\xd2\x11\x31\xc0\xe4\x1a\xb9\xfb\x93\x7f\x2c\xbb\xc8\x80\xe1\xce\xb5\xad\x4a\xc6\x38\xf6\x94\xa9\xe3\x38\xba\x93\x1d\x1a\x42\x1a\xb9\x67\xf2\x93\xbf\xad\x8b\x36\x80\x7c\x37\xf6\x3f\x19\x81\x8c\x0a\xb4\xb5\x1a"
		"\x09\xd0\x38\x2f\x98\xe9\xa5\xaa\xc6\xc9\xe6\x12\x6f\xce\x83\x35\x4f\x1e\xa7\x1a\x61\x31\x4d\x3d\xe3\x25\x53\xad\x8a\xe6\xd0\x2c\x50\x99\xad\xfb\xb1\xba\x39\x67\xb8\x19\xf8\xc5\x64\xc4\x61\x4f\xb1\x52\xd8\x60\xbb\xa9\x13\xc0\x6a\x57\xf8\x51\x03\x1f\xbd\x05\x43\xd7\x76\xb4\x97\xc8\xa3\x00\x26\x81\x14\x0f\xe6\xb3\x07\xdc\x73\x5c\xeb\x64\x64\xcb\x13\xe2\x08\x05\x82\x1e\x7b\xd8\xc7\x7d\xd0\xc5\xa2\x78\x90\x1c\x87\x46\x71\x0b\xa8\x24\x0f\x1b\xca\x60\x56\x99\xac\x29\x0d\x86\x48\x63\x6e\xbb\xd8\x7c\xaa\x0c\x29\xd4"
		"\x76\xab\x32\x44\xc7\x89\xab\x56\xd6\x9b\xd9\x46\xad\xeb\x0b\x38\x56\xe0\x38\x77\x6d\xc5\x68\x32\x80\x49\x77\x1a\x96\xfd\x75\x3f\xd2\xad\xde\x26\x06\xd5\x58\x11\x64\x8e\x1f\x14\x7f\x17\x0d\x97\xc8\xb5\x4c\x83\xf8\x5a\x38\xed\x7d\x2c\xda\x64\xd9\x07\x3c\x80\x6b\x25\x4c\x5d\x25\x5e\x1d\xe9\x17\x39\x96\xc8\xac\xd9\xad\xfe\x7e\x9c\xf9\xf9\x8a\x95\x0b\x18\xbb\x38\xf5\x68\x50\x83\xcb\xca\x30\xde\xea\x38\xb7\x9e\x55\xce\xf3\x1c\x90\xb5\xe7\x93\x0c\xc8\xc4\x56\x07\x4f\x68\x37\x78\xbd\xc6\x64\x23\xf1\xf0\xaa\xda\xa0"
		"\x33\xde\x07\x55\x1a\xb1\xf3\x83\x7b\xca\xd4\xc6\x7f\x07\x6e\x03\xde\x06\x72\x0e\xdc\xa7\xcc\x51\x3b\xc8\xfc\xbd\x5d\x78\xec\x25\xd1\x00\x71\x3a\x65\x05\x90\x86\x8f\x4d\x75\x61\x06\x1c\x7e\xb7\xe5\x33\x34\x8f\x57\x4e\x8d\x4a\x21\x9d\xc7\x2d\x0a\x88\x52\xe7\x1b\xc0\xdf\x51\x90\xa3\x24\x63\x35\xe0\xf9\xda\x7f\xb9\x75\x55\x3a\xeb\xd9\x3c\x55\x7d\x49\x0b\x65\x1a\x62\x05\xa5\xd8\x70\x49\x6e\x1e\xf7\x58\x45\x90\x07\x52\xc7\x25\xb0\x95\xca\x39\x4f\x16\x0c\xdf\xa0\x21\xe0\xec\xa5\xe8\xa7\xcc\x44\x85\xa1\x67\x17\xc8"
		"\xa5\xd6\x51\xd5\x9e\xaf\xa1\x08\x50\xdc\x79\xb5\xf8\x5f\xe2\x6a\x39\xc5\x9b\xac\x36\x03\xc6\x0d\x46\xcf\x68\x19\x47\xaa\xdb\x83\x19\x78\xf6\x7b\x13\x96\x67\xe5\x5c\x6b\x99\xfa\x8b\xc0\x6d\x11\xba\x71\x51\x2a\x9f\x76\xe0\x58\xcd\x71\xaa\xf8\xae\x6c\xd0\xd7\x9f\xea\x0f\x50\xbb\x66\x3c\x37\x96\x64\x22\x37\xd4\x2a\xe5\xa0\xf4\xaf\xf8\x40\x45\x58\xb0\x26\xdf\xc4\xbc\x9a\xd5\xda\x79\x0f\xdc\x2e\x8a\x1b\x65\x2b\x53\x70\x91\x0f\x9a\x86\x84\x99\x76\x09\xbc\x57\x6d\x78\x99\x5b\x5e\x64\x21\x3c\x7a\x33\x9f\xb9\xcb\x11"
		"\x5e\x5a\x86\xc5\x58\xf2\xac\x1f\x0a\x6b\x7f\xe5\x19\xc6\x5c\xee\x3c\xb8\x45\x1e\x55\xca\x69\x6a\xf9\xf0\xa9\x8c\x44\x6e\xaf\x65\x69\x2a\x66\xa4\x4c\xcb\xcc\x5a\x05\xd7\x3e\xa2\x85\x42\x18\xc7\x60\x89\xbb\xdd\xef\xec\xe9\x31\xa4\x6b\x8b\x7f\xa9\x86\xd2\xcc\xab\x65\xc0\x3d\x23\xf6\x26\x16\x16\x13\x32\x9e\x9a\x71\xea\x2e\x8b\x6f\x21\x53\x36\x11\x70\x6f\x2c\x2e\x18\x80\x57\x3d\x3f\x54\xc6\xc0\x2a\x04\xf6\x59\xeb\xdd\xcc\x55\xdb\x40\xc9\xf5\xe6\x57\x28\x2f\x27\x76\x95\xe2\x63\x97\x50\xc9\x62\x4b\x09\x44\xe1\x93"
		"\x44\x6a\xfb\x0a\x6f\x9a\x89\xca\x96\x14\xaf\xda\xf0\xe4\x35\xf9\x20\xab\x90\x02\xd8\x9c\x41\xff\x10\x9d\x2e\xb1\x47\x71\xa0\x17\xfe\xc5\x40\xb8\xe6\x8a\x20\x86\x13\x80\xcd\x79\x3e\x20\x4a\x8e\x91\x85\x6a\x80\xdf\x90\xf2\x26\xcf\xd3\x0d\xf0\xad\x3e\x49\x52\x56\xec\xc0\x4b\x4c\xf3\x41\x24\xe5\x26\xf1\x5e\xdc\xd6\x8e\x02\xc4\x56\x27\x87\x9a\x81\x70\x0d\x80\x35\xf0\x3d\x2e\x2b\xf5\x28\x0a\x23\x29\xe0\x13\xb9\x7c\xd4\x88\x00\xfc\x25\x39\x59\x35\x66\xea\xba\x1e\x39\x4f\x30\xce\xca\x3b\x0b\x30\x23\xf6\x6e\x96\x9d"
		"\x6a\x42\x59\xb6\xf6\x74\x37\xa8\x6d\xac\x84\x3c\x02\xa9\xd6\x4c\x7e\x50\xce\xb9\x2c\xc0\x7e\x59\xd4\x23\x5e\xf7\x68\x53\x26\xf3\x79\xc1\x3f\xa3\x52\x08\xa3\xdc\xf1\x9c\xa1\xef\x5f\x25\x04\xec\xb9\xce\xf7\x00\x81\x35\x80\x79\xbf\x80\xc1\x83\x24\x22\xe7\x65\x7c\xae\x15\xf8\xd6\x22\x52\xfc\x32\x4e\xd3\xf7\xa3\x7e\x8e\x28\x85\xd4\xb8\xc0\x38\x8d\x14\x79\xb9\xe8\x1c\xae\x7c\xfe\x05\x6f\x8e\x02\xa9\x1a\xde\x06\xaa\x7c\x5f\x7b\xa7\x13\x2f\xf5\xa7\x6a\xe7\xfd\xb9\xc7\x43\x88\xb4\x00\xec\x5c\x9b\x5b\x77\x35\x1f\xfa"
		"\x9c\x74\xd8\xe1\x7e\x1c\x16\x34\xe6\xc9\x9f\x58\x51\xee\x3a\x24\x0d\xdb\xaa\x6b\x50\xb1\x7a\x6f\x0d\xe5\x03\xb2\x64\x88\x8d\xa7\x4e\x14\x73\x94\xb6\x4e\x7e\x58\xe6\x3f\x99\xeb\x6d\x9b\xf1\x53\x6a\x77\xdf\x21\xc7\x5c\xec\x51\xe8\x3f\x83\x2b\xac\xc8\x6f\xad\x27\xe5\x0e\x7e\x89\xe2\xd8\x10\x85\xc2\xac\xaa\xba\xfe\x8f\x13\x83\x6a\x01\x57\x04\xeb\x41\x02\xfb\xf1\xf1\xbc\x84\x35\xcb\x7e\x68\x73\x7d\x11\x06\x76\xdc\x48\x74\x19\x84\x71\xc3\x11\x48\x64\x2b\x06\x60\x4a\x88\x6a\x24\x67\x27\x19\x9c\x0c\x1a\x05\xef\x22"
		"\xe8\x48\xc1\x3e\xb8\x7a\x9b\x36\x57\x3d\x0f\xd3\xe2\x1a\x6f\x3b\xed\x6a\xa2\xdf\x58\x59\xfb\x71\xd8\xaa\x8f\x5f\x3a\x96\x4c\x09\x85\x49\x02\x56\xc8\x44\x3a\x15\x50\x9b\x11\x8c\x18\x7c\x76\x66\x08\xe4\xb6\x0e\xf9\x99\xeb\x9f\xc8\xa8\x3a\x37\xdc\x6e\x17\x7a\x34\x63\x29\x5a\xe5\xa6\x40\x1b\x36\x59\x22\x47\x49\x61\x3c\xec\xe5\xc8\xdb\xea\x94\xc7\xc4\x63\x36\x46\x1e\x6e\x67\x37\x0a\x74\x98\xaf\x8a\xed\x30\xd6\x65\xd1\xf0\xe1\x14\xb8\x83\xe4\xda\x0e\x76\xba\x79\x43\xff\x1c\xa3\x34\x88\xb5\x62\x18\xaa\xa1\x2b\xc8"
		"\x08\x88\x5b\x1c\x43\xb4\x89\x22\x9a\x51\x2b\x23\xbb\x0d\xb3\x85\xb9\xc3\xb4\x32\xb2\xb6\x30\xa3\x65\x30\xde\xa5\xdc\x03\xfa\x54\x54\x5d\xc6\x65\xe1\xf0\xb4\x28\xb2\x79\x63\x66\xcd\x74\x6a\xc7\xe4\x54\x29\xeb\xa8\xbe\x28\xa0\x23\x54\x20\xe8\xb6\x19\xa0\x1b\x4c\xa5\x88\xf3\x4a\x2d\xce\x76\x40\x27\xf2\x65\x98\xb3\x19\x9d\x5c\x68\x15\x5e\xd6\x6f\x4e\x3f\x9d\x36\x83\xa8\xed\x97\x46\x3c\xb9\x14\x61\xea\xbb\xb7\xaf\x97\x1c\x47\xb3\xc2\xbf\x8a\xcd\x78\x5f\xcd\x4c\x73\x16\x7b\xf4\x02\xb1\x36\xfa\xfa\xf5\xc5\x35\xb4"
		"\x82\xc9\xe4\x11\x2d\x6b\xde\x3d\xe3\xc7\xb8\x8d\x83\x37\xdd\x57\x8d\x00\x4e\x4c\x24\x41\xcf\x00\x46\xf1\x9a\xa0\x32\xb4\xae\xbc\xd7\xf3\xf0\xc4\x2e\x4c\xd6\x57\xea\x40\x79\x56\x8b\x18\x9d\xd9\x62\xe1\x07\x25\x39\xa0\xaa\x3a\xda\xb7\x4b\xd2\xf0\x6e\x4a\xfe\x64\xa0\x65\x2f\xd1\x1a\xd2\xab\x5b\xaa\xd2\x47\x07\x2a\x40\x59\x8f\x9c\x10\x6c\x2d\x39\xb8\x88\xd1\x45\x3d\x4b\x4e\x91\xe1\x2d\x78\x54\x1e\xfc\xe6\x14\xc6\xa1\x62\xb2\xf6\xd0\xf6\xb0\x38\xfc\xf0\x6f\x70\x4a\xa4\xb4\xf0\xa1\x83\x93\x0f\x96\xf4\x68\x8f\xc4"
		"\xe3\xf7\x52\xc1\xc2\x4e\x1d\xd3\x8f\xfa\x71\xd4\xaa\x39\x8d\x71\x79\x1e\x6a\xa1\x7a\xec\xb1\x46\x40\xd3\xa1\x8a\x95\xd2\x94\xa6\x5c\xba\x16\xa0\xf9\xd0\x59\x3f\x53\x6e\xfb\x55\xa4\xbc\x29\x6b\x9a\x2c\xe2\x60\xa4\xdf\x57\xb5\x71\x9f\xb3\xf4\x3a\x79\xd5\x76\x85\xe5\x80\x4d\x53\x14\xea\x0f\xae\x3a\x02\x3d\xd1\x0b\x16\x55\x80\x43\xbe\xa7\x54\x00\x23\x1f\x65\xe5\xf1\xc4\x7e\xcf\xc6\xee\x1f\x86\x7f\x57\x82\x85\x08\xfa\xbd\x22\xf3\x88\xec\x2c\x48\x0c\xc3\x34\x54\x4c\x0f\x4c\x45\xb5\xa2\x95\x7b\x98\xcb\xad\x0d\x8f"
		"\x57\xea\xd2\x29\x10\xcc\xbb\x53\x99\x2d\x2e\x22\x8a\x4e\xb6\xe6\x9e\xcf\x0e\xe1\x6f\x31\xd7\xc5\x26\xa2\xc6\x89\x42\xdd\x4a\xb4\xf3\x93\x97\x8f\x31\x8e\x0a\x29\x14\xfa\x35\x5b\x81\x3d\xd7\xc3\xaf\x10\x8b\xe1\x07\xd7\xc8\xfb\x5e\x90\x09\x53\xdb\x68\xd0\x9b\x85\x9c\x7a\xb2\x68\x35\x77\xaf\x7a\x38\x08\x40\xae\x48\x0c\x80\xe9\x47\x45\xc6\x72\x97\xbd\xf3\x0e\xc6\x69\xf2\xa4\x6d\x86\x26\x36\x40\x5b\xa6\xc8\xfc\xb3\x1a\x0c\x85\x1e\x1f\x5f\x39\x64\x1a\xae\x1e\x3e\x86\x5a\xc5\xca\x1b\x43\x9b\x2c\x13\xf0\x52\x69\x49"
		"\xfa\xb3\x96\xa2\x46\x38\x77\x37\xc4\x1b\x4f\xb7\x62\x29\x09\x14\x37\x06\x2a\x0f\x01\x3b\xc4\x7f\x7f\x9e\x37\xbc\x78\x8d\x3d\x65\x9f\x27\x8a\xea\x6f\xb0\x9c\x9e\xae\xcf\x88\x7b\x7a\x00\x34\x85\xeb\x8b\xbb\xda\x0c\x83\x55\xe5\x80\xd8\x95\x0f\x62\x6c\x4d\x39\x18\x29\x7c\x36\x9e\x83\x14\xa2\x34\x42\xda\x21\x6b\x1b\xdf\x1f\x39\x80\x31\xb1\x47\xd7\xa3\x17\x39\x51\x69\x9f\x03\xe2\x06\xee\x94\xf3\xb6\x67\xd4\xbd\x4f\xc5\x8c\x74\x0e\xa4\x15\x1b\xb0\xe1\x3f\xb9\x38\x4d\x70\xdf\xf7\xa0\x27\xc3\x5a\x3e\x01\x78\xdb\xfb"
		"\x5d\x2c\x72\xb7\x2f\x60\x2c\xc4\x8a\x61\x0b\x5c\x54\x9d\xfd\x71\x36\x57\x5c\xfa\x30\x74\x19\x29\x13\xbd\x94\x18\xb2\xf5\xc8\xe2\x15\x9d\x42\xe9\x11\x18\x38\x9f\xf1\x8a\xca\xaf\xbb\xd4\x5d\x03\xc2\x95\xe5\xbf\x81\x4a\x45\x2a\xf3\x64\x5c\x2f\xdc\x41\xba\x76\x2e\xc3\xc2\x69\xcb\xea\xa4\xa2\xfc\x99\x9f\x30\x22\xe4\x93\xec\x4f\x2e\x41\x07\xfa\x31\x62\x72\x71\xb5\x42\x99\xb8\x44\x29\x7a\x87\x88\xa9\x21\xe0\x1e\xb0\xe8\xb1\xf3\xe0\xe9\xcf\xa2\x38\xc3\xde\x6c\x2c\xde\x45\x1b\x8d\x0a\x5b\x9b\x43\x3c\x56\x72\xf8\x20"
		"\xcd\x24\x01\x92\x72\xf9\x56\x40\x85\x34\xda\x89\x53\xdb\x8f\x54\x42\xfa\x2e\x1d\x42\x2a\xb5\xb3\x60\xa3\xdd\x3d\x5f\x63\xc8\x30\xeb\x33\xe2\x0b\xa7\x6c\x24\x88\x9e\x66\xd3\x7f\x99\x8a\x62\xf3\x84\x14\x67\xfb\x6d\xfc\x7a\x31\x47\x01\xac\xf3\x87\xf4\xaa\xb6\xcc\xff\xa0\x64\x6b\xc3\x51\xb0\xbc\x4e\xfa\x36\x60\xe4\xff\x05\x90\x34\x62\x20\x9e\xaf\x4d\xe2\x82\x3d\xa3\xed\x3d\xb7\x94\xc5\xb7\x15\x56\xc2\xec\x8e\xe7\xe5\x6c\x36\x86\xa2\xa8\x0d\x97\xf7\xa6\x5b\x91\x15\x6c\xb8\xf3\x0b\x9a\x4c\xcc\x18\x62\x61\xa8\x90"
		"\x82\x87\xf6\xa6\xd2\x84\xe1\x69\x2a\x68\x55\x2d\x56\x54\x3c\x1b\x73\x41\x83\x55\x59\x6e\x02\xa5\x65\xd0\xef\x2f\xbe\x8f\x9e\xc1\x57\xdf\x30\x0b\xaf\x21\x8e\x98\xd7\x13\x89\xd4\xaa\x69\xa8\x71\xc7\x74\x0f\x69\xfe\x36\x67\x77\xf7\x5a\x84\xc0\x27\xf4\xf4\x6b\x9e\x0f\xef\xce\x07\xf6\x90\x64\x8c\xda\xff\x5d\x26\x79\x4d\x7b\x38\x56\x50\x3d\x70\x5d\x30\x2f\xf3\x15\x84\xe3\x88\x94\x52\x7b\x27\xc5\xfa\xdb\x17\x37\x52\x46\xbc\xa9\x81\x05\x47\x86\x33\x42\xca\x74\x97\x12\x1b\x46\x4e\xf7\x39\xb4\xb1\x6a\x47\xa8\x5a\xf6"
		"\x56\xc7\x21\x31\xfd\xce\x19\xd4\x7d\x92\xd8\x90\x29\x06\xdb\xa9\x44\x62\x0f\x4d\x01\xc1\x3e\xf1\xca\xc4\x24\x69\x7b\x95\x76\x7a\x9f\x5c\xe9\xb0\x79\xaf\xd9\x7a\xf2\x9e\x76\xfd\xeb\x5d\x22\x60\x27\x59\xe6\xa8\xa2\xcb\xfd\x9d\x55\xc7\x1e\xf8\xd9\x32\x7a\x28\x9e\xcc\x7e\x27\xb5\x2f\x12\x3a\xc2\xee\x27\xa6\x26\xa4\xfb\x37\xf6\x8b\xe6\x4b\x3c\xec\x9e\xea\x13\xd3\xf8\x0d\x45\x5e\xe1\xc5\xad\xc5\x28\x2d\x45\xa5\xff\x54\x6d\x56\xda\x1d\x96\x31\x94\xb1\xcc\x9e\x93\xa6\xc3\x2c\x75\x83\x93\x67\xf5\x08\xda\x5d\x5d\xb1"
		"\xe2\x94\x57\x89\x21\xdb\x3d\xfd\x66\xe9\x9f\x58\xaa\x90\x8a\x62\x52\x9a\x8b\x48\x3a\x9f\x09\xe7\x03\xce\x1a\xc5\x5b\xbe\x0a\x8d\x03\x5c\x0e\xe4\x74\x5b\x4f\xa1\x72\x79\x7f\xf5\x8b\xa3\xb8\xc9\xb1\xb3\xa5\x2f\xf2\x6a\x6d\x27\x05\x2b\x48\xb2\x3a\x02\xb4\xa6\xa4\x8a\x54\x25\x76\x9f\x33\x87\x2c\x15\xea\x55\xb4\x94\x47\xcb\x40\x2f\x7d\x5d\x5f\xe6\x30\xee\x99\x36\xb6\xbd\xc5\x27\x20\xba\x8c\x93\xf6\xda\xf2\x15\x4b\x72\x65\x2d\x1b\xd5\x7f\x48\xb4\xa2\x4b\x0f\x01\xe3\x66\x18\xb1\x56\xf3\x5c\x0b\x19\x9f\x60\x65\x56"
		"\xdc\x51\x7e\x3e\x0d\xfc\xfe\x2d\x08\xf6\xd2\xc9\x95\xa9\xe9\x41\xcc\xa9\x4a\xdb\x8c\x7d\x08\x71\x68\x61\xa3\x08\x97\xfe\x86\xc1\x20\xc1\xcd\x0e\x41\x16\xf6\xeb\xea\xd1\x57\x73\xaf\xa7\x9d\xfe\x42\x65\xfb\x29\xe1\xc8\xa9\xed\xf7\xb8\x2d\x6f\xc5\x3c\x05\x4f\x1b\xdb\x33\xc9\xaf\x1e\xb4\x27\x54\xbb\x6e\xd6\x47\x65\xb4\x79\x68\xba\xf3\xb2\x13\xa7\x61\x6c\xbe\x9e\xa6\x32\xbb\xb6\xfa\x71\x67\xdd\x8c\x66\x02\x95\x57\x50\x95\xbc\x26\x9b\x7c\x38\xe9\xf2\xbb\x7c\xaa\x8a\x95\x04\x9f\xa6\xf6\xe6\xd7\xf2\x47\xb1\x56\x74"
		"\xe6\x2e\xd8\xf5\xcb\x4e\x5f\xb2\xb3\xc4\x88\x9c\xb1\xdf\xe1\xc3\x7a\xab\x5f\x53\x05\xed\x24\x1c\xf1\xae\xbe\x5d\xdf\x3e\xae\xa2\x22\x8b\x16\x18\x8c\x12\x0d\x77\xe8\x29\x58\x5f\xd4\xcf\x21\x4b\x6b\x53\x89\xb5\x63\xb0\x96\x3a\x1e\xd7\x18\x0a\x1e\x2b\xda\xd9\x5d\xa0\x2a\xe9\x8d\x5d\x0f\x66\x9b\xb8\x51\x6f\xba\x42\x32\x66\x39\x93\xd7\xfb\xee\xcc\x8a\x46\x8c\x77\x64\x75\x77\x9a\x79\x66\x24\xa6\xe3\xee\x39\xf2\xd1\x07\x83\x32\xd5\x53\x88\xe7\x4b\xcd\x73\xfc\x40\x86\x8e\xa1\xa6\xaf\x08\x04\x14\x2a\xb5\xba\x45\x81"
		"\x32\xc0\x8f\xa5\x3c\x5a\x1c\x9b\x06\x94\xf7\x66\xdb\x31\x6e\xa4\x9b\x34\x5f\x4f\xe7\xcd\xf4\x60\xf7\x4b\x8c\xd5\x7d\x58\xc5\x28\x58\x24\xd6\xc8\x59\x65\xa6\x7d\xaa\x3f\xb4\x90\x50\xf7\xde\xa8\x9a\x5d\x51\x1d\xd4\xc0\x0f\x5c\x4e\xdd\x70\xae\x8b\x57\x49\x0f\x07\x03\x19\x6b\xff\xb1\xcd\xea\xd4\xcb\xd9\x46\xcb\x0a\x6b\x8f\xe7\x6d\xd1\x76\xf6\x0f\x9e\xbe\xbc\xd1\xde\xd7\x32\x41\xdd\x4e\xef\xfd\xac\xc4\x34\x68\xf0\x72\x48\x92\x04\x76\x0a\xd5\x95\xfe\x5f\xd4\xb8\x03\x92\x2e\x59\x43\x0b\x18\xa0\x23\x1c\x81\x16\xbf"
		"\x30\xba\xcf\x50\x57\x45\x20\x1c\x3f\x65\x30\xad\x37\xac\xd2\x05\x06\xb1\x78\xc4\x5c\x75\x01\xd6\x74\x7f\x07\xbf\x3c\x28\x11\x09\xe3\x5c\x17\x2f\x11\xdb\xc5\xc3\x7b\x6b\xd9\x8f\x9c\x0e\x55\xf8\xce\xc9\x89\x58\x4d\xd9\xcf\xce\xea\xe2\x36\xf9\x83\x9e\x6d\x36\x68\x3f\xaa\xe6\x1a\x55\x16\x03\x2c\xfd\x32\x85\xf3\x55\x4a\xb0\x1c\x77\x5b\x4c\x66\xcd\xc8\x81\xc9\x5b\x70\xf4\x29\xc2\xcf\xf9\x6d\x21\x57\x9f\x2b\xff\xa0\xda\xdc\x5f\xb6\xcb\xee\x9d\xbe\x7f\xe9\xe4\x60\x94\x7f\x49\x89\x68\xb2\x69\xe3\x3d\x5f\x2f\xcf\x30"
		"\xbb\x03\xf6\x08\x42\x9f\x87\x80\x9f\xdf\x4b\x7f\xe2\x28\x4e\x0b\x6e\x93\x3e\x01\xdb\xd2\x69\x0d\x3d\x89\x80\xf5\x24\x2e\xfb\x23\x0b\xf5\x28\x1a\x00\x93\x1b\x83\xf9\x73\xc8\x4f\x49\x7b\xdd\x2f\x37\xb2\x39\xcc\x60\x8c\x42\x89\xe6\xa8\x84\xe0\xa1\xa8\xdc\x22\x90\x23\xd2\x41\xa1\x12\x68\xee\x95\xb1\x5a\xa9\xd1\x72\x5c\x07\xee\xae\x05\xe7\x5e\x71\xf0\x74\xd8\xf5\x12\x7f\xc6\xc2\xa5\xc4\xa1\x12\xe7\x4e\x0f\x70\xd5\xca\xd9\x5f\x18\x75\xdd\x24\xfb\x61\x5c\x52\x4e\x45\xd9\xfd\xe5\x5c\x5e\xfc\x12\x46\x33\x51\xf1\x45"
		"\x83\x99\xce\x15\xbc\xff\x8b\xad\xc8\xa7\x9f\x96\x3a\xac\x8e\xb0\x14\xd7\x4e\xb3\x4f\x68\x19\xd8\xa9\xc0\x8e\x88\xd3\xc7\xd1\x22\x47\x58\xd9\xa9\x80\xa6\xd3\xde\x29\xed\xff\xb6\xa1\x89\x95\x26\x2f\x30\x70\x98\xab\x15\x01\xbc\x66\x1e\x9c\xc7\xe6\x57\x71\xaa\x97\x96\xf9\x9a\xde\x6c\x01\x9f\x3b\xba\x13\x0f\xbd\xf2\x06\x9e\x4e\xa4\xc7\x65\x7d\x28\xf1\x06\xb8\xf3\x74\x91\x18\xc9\x65\x60\x0d\x9b\x25\x73\x3b\xe1\x3e\x52\x15\xc3\x07\x60\xf6\x9f\x23\x03\x53\x65\xe9\x75\x40\xa5\x89\x36\xeb\x82\x00\x91\x14\xc3\xdb\xe2"
		"\x8c\xcb\xd9\x76\x49\xb8\x7d\xe8\x66\xf4\x8c\x22\x67\xc7\x04\xf1\x6c\xa4\x58\x76\x38\x52\xc1\x48\xd3\x89\xd3\x6f\x2c\x88\x3c\x59\x5f\x5e\x64\x7e\xc8\x09\xfa\x10\xee\xe8\x3d\x75\xdd\x52\x27\x62\x79\x56\xa7\x35\x6f\x4a\x1d\x17\x36\xba\x5b\xbc\x33\xb7\xac\xcd\x8d\x3e\x1e\xc8\xd0\x42\x86\xe9\xff\xd1\x3e\x35\x08\x1e\xc6\xf5\x99\x79\x23\xa0\x22\xc8\x56\x01\x1f\x4f\x19\xa2\x67\x2c\x8c\xb0\x80\x03\xac\x17\x68\xff\xcd\xce\x84\xfb\x5e\x68\x1a\x34\x61\xa2\xc0\x50\x22\xb5\x0e\xc6\x7e\x9f\x53\x34\xc9\xea\xc6\xfd\x36\x63"
		"\x52\x3a\xdf\x2b\x0f\xd1\x0b\x09\x63\xb1\x36\x7e\xf4\x02\xf5\xca\x44\xbf\xe5\x4f\x0b\xd2\xab\x96\x25\xfd\x5a\x73\x4a\xe3\xc4\x11\xf3\xc3\x4a\x46\x54\x0f\x65\xd1\x5a\xdd\xf4\xb4\x9c\xb5\xaf\x64\xf1\x0d\xe8\x75\x00\xd0\xe9\x27\x32\xef\x14\x16\xd6\xfa\xdd\x8f\x33\x87\x1e\x1a\xc5\xfb\xf3\x58\x33\x9c\x79\x4b\xb7\xff\x03\x27\xc1\x4f\xc0\x50\x40\xac\xdd\x62\xb4\x3d\x83\x64\x5a\x24\x41\xc4\x38\x92\x4a\x5c\xf2\x8b\xb8\x67\xde\xa5\x43\x13\xdf\xe1\x33\x20\xce\x9f\x52\x52\x75\x65\xcb\xfe\xa0\xc8\x2b\x12\x8f\x29\x56\x1a"
		"\x80\x10\x9f\x1b\x0d\x52\xef\x0d\x3f\x48\x53\x0f\x6d\x9d\x31\xd3\xcb\xfe\x26\xf6\x09\x67\x16\x34\xab\xd0\x9a\x4a\xc4\xdf\x3b\x2e\xc8\x1e\xc2\xa2\xb6\x1a\xd6\xe9\x54\xd8\x8e\x5f\x47\x81\xbb\xfc\xec\x12\x1c\xfc\x1e\x4e\xda\x70\x45\x07\x8a\x5d\xee\x0c\xe9\xea\x2a\x49\x81\x9b\xa1\xad\x84\x2d\xd3\x80\x16\xcb\x81\x81\x9c\x5c\x68\xfb\x7b\xfb\x5c\xc7\xdb\xd5\x38\x5a\x87\x7e\x85\xb2\xf4\x9a\xdb\xb9\x99\xa3\xfd\xe1\xa3\x92\xaf\x66\x61\x95\x79\x4a\x29\x0e\x2e\x81\x36\x28\x19\x35\xc7\x0b\x0f\x55\x86\xe6\xfe\x08\xa6\xdd"
		"\xe2\x8f\x2f\xf0\xfa\x65\xe0\xb5\x0e\xbd\xab\xd6\x88\xa0\x51\x27\x52\x7c\x09\x7b\x75\xcc\x97\x0b\xc0\x18\x89\x89\x80\xb6\x56\x6d\x62\x16\xa6\x42\x73\x4d\x55\xa9\xd4\x20\x9c\xb8\x4f\x16\x9a\x4f\x07\x4f\x93\x14\x77\xfd\x23\x34\x6a\x1d\x11\xaf\xdb\x8a\x1c\x92\xc1\x81\xd0\x6a\x84\xbb\x88\xd1\x1c\xcd\x92\x9d\x34\x70\x79\xbf\xa8\x93\x85\x92\xd7\x38\x51\x16\x67\x73\xa0\x75\xb1\x8e\xe3\x89\x56\x17\x05\xed\x46\xfe\x1d\x06\x55\xe0\x3a\xc9\x35\x72\x2b\x1a\x51\x2c\x00\xa6\xd2\xdb\x48\xc0\x2a\x8e\xbc\x59\xb8\x33\x59\x81"
		"\x07\xd5\x1f\x53\x2b\x12\xe9\x8e\xc6\x9b\x9b\x2c\x30\x34\xf1\x67\x2a\x27\xf0\x31\x6e\xb3\x3d\xfe\x8e\x39\x34\x16\x8e\x3d\x18\x20\x79\x94\x28\xd0\x16\x9f\xfd\xd8\xb3\x92\x86\x68\x9d\x39\x47\x2b\xf2\xce\x74\x11\x14\x2b\x6b\xe6\x19\xc8\x1d\xbe\xfa\x19\x67\x11\x2b\x09\xd0\x5b\x35\x3d\xe8\x24\xc5\x0f\xb2\xd1\x7d\x09\x2c\x80\x65\xf5\xf3\x49\xab\x69\x24\x27\x0d\xad\x7d\x3f\xc3\x4c\xf3\x0e\xf9\xc0\x94\xd6\x1d\xd2\x30\x9c\x69\xad\x4e\x4d\xe0\xf3\x46\x85\xbc\x9b\xed\x9e\xda\xdd\x35\xde\x94\xf6\x69\x30\x38\x60\xca\xef"
		"\xb4\x8e\xd7\x3e\xe7\xe3\x56\x4d\x06\x84\xb8\xe7\xa6\xc8\x71\x2f\x3f\x38\x87\x19\x6b\xd6\xc8\xa1\x7d\x67\x2d\x66\xdd\xac\x0b\xae\x48\xaf\x6b\xe4\xb8\x54\x82\x3d\xeb\x55\xa9\x90\x73\x70\x36\xfd\x25\xf9\x81\x3f\x62\xc4\x93\xf4\x7c\xbe\x28\xda\x26\x6e\x86\xc7\x40\xe9\x72\xe4\xb6\xb5\xa8\x32\x47\xb0\xf2\x7a\x34\x82\xa4\x14\x40\x85\xb0\x0d\x41\xa3\x15\xec\x8b\xa1\x5c\x27\xfd\x20\xaf\x1d\x29\x75\x11\x30\xaa\x28\x59\x65\xd2\x99\xc8\xf9\xb5\xa5\x7a\x97\xf9\x6a\x12\x92\x7d\xbb\x96\x2e\xeb\xa2\x70\xc9\x40\x38\x05\x9c"
		"\xb0\xe8\x47\xf9\x79\x0f\xbd\xa2\xb8\xa8\xab\x5a\x75\x4c\x0b\x90\x45\x18\x6f\x7d\x06\x1d\xde\x1c\xe4\xbc\xd1\x6b\x31\xce\x97\xf0\xaf\xc1\x8b\xd0\x28\xca\x15\x14\x5c\x48\x55\xe2\x5e\xac\xfa\x4d\x5a\x74\xa6\xdd\xc3\xa8\xfa\x04\x60\x64\xfe\x6a\xf0\x2c\xbe\x58\xc9\x43\x05\x49\x22\x59\x7b\xe6\x3d\xbe\x7e\x1a\x23\x81\xc6\xd9\x90\x0f\x97\xa4\xf7\xb4\x31\xa5\x4f\xa0\xc6\x5f\xb4\x20\x94\x75\xbe\xf1\x6c\xab\x8d\x6e\xa3\xc5\x15\x5e\x19\x97\x62\x73\x7c\xa9\x87\xcc\x46\x39\x41\x05\x8d\xac\xf5\x8f\x64\x2b\xe0\xc4\x33\x1d"
		"\x23\x49\x04\xf5\xc5\xfa\x64\x2f\x5f\xed\x82\x85\xa4\x84\xc3\x85\xde\xab\x5a\xf7\x3b\x44\x6f\x53\x01\x1f\xad\xef\xb1\x8c\xa1\xf7\x59\x79\xc7\x31\xb1\x73\x74\x85\x9f\x10\x5e\xad\xdd\x91\xee\xd9\xdf\x5f\x27\xae\x18\x46\xc0\x58\x7e\xc6\xa0\xe2\x4f\x3b\xb2\xb5\xab\x74\xbd\x8b\x6f\x61\x73\x8c\x2c\x11\x1d\x5a\x43\xa4\xa3\xb0\xec\xea\xdd\xd3\x70\x94\x6e\xc4\xb5\x51\x5a\x32\x2a\x4d\x11\x46\xb3\x2c\x95\x3d\xea\xb0\x41\x86\x2e\xb6\xdf\xae\x65\x87\x47\x1a\x46\x80\x63\xa2\x6f\xf3\xc8\xf6\x3c\x48\x25\xa3\x2e\xa3\x15\x87"
		"\x24\xbf\xa0\x2e\x2e\x09\x81\x58\x45\x4f\x8f\x82\xfa\xb7\x2e\x4c\xc3\x32\xba\xe7\x05\x2d\x0b\x05\x6d\xfd\x8e\xe8\xd7\xad\xfb\xcd\x8c\x90\xf9\x60\xee\x96\x0d\x33\x4f\x20\xee\xc3\x02\x48\xf7\x78\x52\x68\x7c\xc5\x92\x1e\x8e\x2c\x9d\x36\xd3\x1a\xaa\x55\x45\x27\xf9\xda\xe4\x60\xa2\xb6\x6b\x1d\x28\xba\x1e\xbf\x01\xe6\x80\x63\x1f\x7b\xe2\xa7\x36\x4a\x56\xe3\x1f\x4e\xb3\xdc\xb3\x21\x63\x3d\xa1\xf4\x0c\x58\x19\x4d\x73\xc6\x93\x6c\x21\x84\xc8\x90\xd0\x72\x90\x28\x96\x8f\x08\x3b\x57\xa1\xb9\x9a\x3a\x79\x1e\x7b\x69\xc6"
		"\xbb\x9c\x4c\xed\x3f\xfd\x02\x08\xbd\x42\x7b\x21\x05\xb0\xdf\xe1\x45\x52\xdc\xc8\x82\xf2\x30\x7b\xa4\xff\x4a\x0f\xf3\x24\xed\x07\xc4\x43\xa1\x3b\xc8\x05\x2f\xb7\x39\xee\x13\x0a\x2e\xfa\x96\x38\x8e\x91\x7b\xfb\x98\x75\xf6\x1e\x00\x58\xc8\x57\x41\xcf\x9b\x3a\x34\xca\x60\x5d\x4f\xc2\x61\x93\x7a\x51\x98\xca\x0a\x0b\xef\x91\x77\xa4\xe5\xe1\x98\xeb\x5d\xf4\x6d\x0b\x6c\x51\xe5\xb6\x88\xc9\x98\xca\xda\x50\x03\xf3\x9e\x25\xba\xee\xd2\x9c\xf8\xdd\xaa\xcc\xf8\xd8\x09\x43\x04\x48\xad\xfe\xc7\xed\x63\xd0\x44\x85\x02\x57"
		"\xea\x30\x2b\x0d\xf2\x8a\x2c\xa6\x4e\x7b\xd3\x8b\xcf\xa4\x00\x46\x24\xc0\x88\xb4\x38\x83\xc6\x05\x1c\x51\x99\x47\x8c\x95\x39\x43\xfb\x1e\x42\x5b\xb7\xc1\xb7\xab\xfd\xa2\x7d\x08\xaf\x8a\x3e\x27\x71\x78\x1e\x5e\x8e\x02\x97\x55\xd0\xbd\xa4\xf0\xe2\x2c\xed\xbb\xf4\x00\xec\x6c\xbb\x95\xfe\xf8\x4a\x5f\xa6\x1d\x9b\xe0\xb8\x61\x30\xf7\x8e\x7b\x59\xb0\x48\xa3\x1b\xf5\x3f\xb8\xf6\xc6\x70\x2d\xe6\xfa\x57\xd8\x60\xd7\x03\xeb\x57\x89\xe5\x09\x9d\xa6\x60\x81\x1b\x7f\x0d\xb1\xaa\x90\xd2\x82\x33\x77\xb1\x96\x1e\x45\x9c\x2a"
		"\xcb\xc5\xa1\x9c\xd7\x0a\x4c\xa6\xb6\xaa\x74\x38\x34\x3b\x93\xec\xd8\xee\xd7\x63\x6c\xdd\x5a\x0d\x4c\x35\x36\x75\xe6\x1a\x84\x3c\xbd\x49\xc5\xa9\xec\x48\x09\x41\x42\x2a\xf3\x71\xa0\xd1\x65\xe4\xb2\x37\x5e\x11\xda\x91\x82\xe0\x14\x0b\xca\x11\xee\xe1\x36\x7e\x0c\x52\x36\xa5\x4e\x9c\x52\x73\x78\xd2\xdc\x6b\xfb\xe3\xa9\xe6\xc4\xd1\x24\x29\x67\xcc\x51\xcc\xc9\x2b\x09\xa1\x7a\xd2\x5f\x78\x41\x78\x51\x22\xe5\xed\x39\xf8\x29\xae\xa8\xef\x1a\x74\x66\x65\xa3\xa7\x09\xa6\x7e\xab\x56\x7b\xf4\xf3\x47\xdd\x5b\x36\xc1\xbc"
		"\x72\x1d\x72\xa2\xb2\x87\x4f\x48\xaa\x70\x6f\x3a\xa1\x19\x3b\x05\x85\x49\x9c\x0f\xe2\x6a\xb5\x53\x33\x68\xba\xc1\xf7\x24\xe8\x52\x2a\xc8\x61\x70\x27\xec\xcb\x94\xa9\x2f\xc7\xb8\x9f\x41\x60\xcc\x10\x37\x3c\x57\x6d\x19\xd8\x9a\x31\x90\xee\x2e\x80\x71\x48\x46\xca\x97\x02\x07\xdc\x20\x44\x1c\xe5\xff\x21\x48\x92\x0a\x25\xdd\x92\x60\xcc\xae\xf1\x90\x48\xce\xa4\x05\x6e\xcb\xd7\xa6\xae\x48\xb5\x40\xf4\xc4\x6a\x05\x64\x93\xd1\xc3\x34\xb1\xe4\x5d\x20\xaf\xf4\x74\x0c\x9d\x05\xd9\x86\x62\xbc\x68\x36\xe5\x5f\xa9\x41\x54"
		"\xb5\x6a\x4e\x69\xb3\xf7\x0f\x8d\xbf\xc3\x18\x8f\x49\x99\xd3\xf6\x64\xce\x7f\x7e\x0f\x9b\x24\x17\x10\xa2\x65\x6b\x06\x4b\xe0\xcf\x7e\xea\xd3\x3c\x48\xa2\xf2\x90\x07\xbf\xd0\xb4\x69\x58\x7d\xdf\x7f\xd8\x9d\x40\x0f\x58\x0c\xaa\xa8\x8c\x02\xa3\x26\x3a\x5d\x5f\x0d\x7e\xda\x5c\xbf\x6c\x67\xd6\x82\xde\x8c\x60\x37\x09\x49\x82\xe0\x3e\x29\x6a\xb1\x1a\x7d\xd0\x8e\x00\x5b\x25\x0d\x95\xa5\x12\xf8\x11\x63\x95\xc1\x51\x24\x9a\xe6\x84\x2e\x7a\xc3\xe8\xad\x11\x56\x81\x0e\x9e\x20\x4a\x53\xbb\xe1\x9d\x43\x13\xb4\x25\xdd\xd9"
		"\x66\x89\xfe\x85\xde\xf2\x0a\x59\xe0\x19\x56\x76\x8a\xf5\x26\xf5\x19\x54\x7f\x0f\x98\xe7\xd4\x1b\x4d\x0c\xc8\x01\x29\xe2\x3d\x6e\x3f\xb8\x99\x45\x7f\x6d\x91\x19\x1d\x79\x81\xfb\x48\x4b\x39\xdf\x87\x97\x6e\x35\xfc\xd7\xa8\x5b\x7e\x67\xcd\x7e\x27\x32\xcc\x98\x84\x93\x4a\x2b\xe0\x2e\x15\x1d\x77\x13\x37\xa9\x6a\xd1\xc7\x82\x78\x31\x62\xe6\x3f\xbd\x93\xbe\xd3\xfc\x85\xdb\x01\x80\x5b\x55\xce\x89\x8d\xb0\x7f\x4d\x7b\x8b\xf7\xfa\x3b\xea\x59\x65\x2c\x48\x3e\x93\x0d\xce\xc8\x8a\xa2\x12\x38\x42\xd1\x5d\x05\x65\x88\xd0"
		"\x3b\x3c\xee\x75\x03\xa0\xe6\xf1\x5d\x40\xc1\x82\xc6\x25\x76\x5b\x4d\x17\x96\x09\xd0\x3b\x79\x39\xe7\x45\xba\x84\x9b\x21\x14\xc8\x74\xd5\x96\x33\x6a\x11\x09\x23\xf6\xcb\x73\xcb\xd7\x72\xb5\x48\x7a\x8a\x70\xb3\x60\x4f\x20\xf7\xe9\xc2\x05\x49\xb4\x40\x18\xd4\x67\xd7\xbd\xaa\x8d\xf0\x12\x0a\x0d\x0f\x8e\x06\x47\x7d\xe6\x60\xd9\xeb\x09\x48\x70\x39\x40\x50\x6b\x3e\x15\x43\x40\x75\x00\xa0\xef\x14\x9e\x2d\x10\x79\x0d\x7e\xb9\x78\x07\x0b\x92\x87\x88\x3e\xc3\x2b\x24\x39\x85\xb8\x17\x0f\x4d\x93\xd3\x6b\x47\x90\x5f\xe8"
		"\xdb\xaa\x49\x26\xfa\x89\xb2\x8d\x28\x25\xd2\xe3\x37\x73\xc3\x7c\xb2\x5d\xa7\xe5\x7c\x68\xd1\xa7\xdd\x75\x16\x66\x4f\xda\x3f\xd3\x70\xb7\xa8\x6d\xe6\x0f\x6a\x1c\xe2\x7b\xde\x32\xbc\x3e\x07\x8f\x8a\x61\x5f\x50\x24\xd9\x39\xd1\x1e\x4d\xe7\x09\x4b\x80\x6b\x7e\xa6\xa2\x12\xec\xb9\xab\x8a\xa1\x61\x92\x08\x52\xfa\x66\xad\xb1\xba\x2d\xce\xfc\x10\xbf\x0d\x10\xa5\xc9\x66\x94\xe2\xdc\xbc\x23\x00\xc5\x7a\x03\x0a\x9c\xa1\x4c\x47\xae\x34\x4d\x35\x28\x4b\xfb\x80\xd3\x09\x1d\x8b\x19\x3f\x5b\xb5\xa5\x6c\xe8\xe4\x85\xd1\x3f"
		"\x5a\x48\x2b\x0d\xfa\x13\x10\x64\x9a\xcb\x56\xf1\xf0\xcc\x09\x29\x62\x1d\xf7\x03\x5d\xf6\xfe\xf9\xfa\xba\x83\xa5\x49\xaa\x70\x9f\x84\x91\x84\x44\xac\x71\x69\x60\x05\xc6\x89\x17\xb5\xa8\x1b\x28\x34\x83\xa6\xee\x38\xcb\xad\xac\x18\xc0\xb5\x27\x8f\x08\x1c\x16\x34\x2b\x59\xcd\x24\x19\xf8\xcf\xaa\x00\x70\xdc\x1e\xb8\x4c\x87\x47\xdf\x42\xca\x79\x63\xca\xbb\xac\x29\x35\xf3\xee\x45\xd9\xd8\xfa\xb6\x63\x5d\xcb\x29\xba\x57\xb5\x76\xf9\xda\xf2\x7b\x4e\x72\x23\xde\xef\x06\x07\xf0\x67\xe1\x5d\xd7\xf6\x3b\x45\x15\xe0\x4a"
		"\x26\xfb\x3a\x27\xa7\x96\x91\x1d\x34\x10\x2f\xf0\x2e\x8c\x2e\x74\xd3\xae\x42\x51\xa3\x2a\x60\xde\x5d\x2c\x99\xed\xaa\xd9\x42\x05\x9d\x77\x86\x35\x64\x06\x7e\xb6\x9c\x9f\x88\xf8\xa6\xd8\x6a\x82\xf0\x8f\xd8\xb6\xf4\x53\xbc\xbf\xe8\x6c\x9d\x48\xd8\xcc\xf6\x30\xdb\x56\x3d\xf8\x02\x49\x84\xae\x53\xdb\xf4\x71\xd3\x31\xbc\xca\x43\xeb\x36\x16\x6d\x1f\xb4\xeb\x96\x7f\xe5\x9a\x11\x86\x34\x47\x17\xbd\x68\x43\xae\x63\x89\x5f\x8a\x79\x32\x98\x39\xb8\xde\xc2\x65\xae\x78\xfb\x98\x0f\xf3\x1e\x30\xfb\x37\x92\x4e\x11\x98\x7d"
		"\x5b\x5c\x46\xdc\x55\x5e\x96\xdc\x2b\xd6\xfa\x50\xf9\x8a\xf0\x14\x8c\x7d\x76\xec\xb9\xaf\xf8\xef\x45\xf0\xa1\xee\x4a\x02\x21\x29\xa4\x4f\x2a\xbd\x9e\x9b\xd8\xf1\x5f\xed\xbb\x65\x50\xa7\x7a\x69\x16\xf4\x29\x26\x37\xf6\x00\x4a\xfa\xf8\x12\x40\x23\x69\xd9\x55\x3b\x1b\x68\x09\x73\x55\x10\x89\xa3\x8e\x62\x53\x05\x53\x28\x1c\x70\x00\x30\x81\x82\x65\xf8\x01\x22\x77\xd1\x72\x14\x85\xb6\x38\x4d\x7c\x5e\x07\x76\xee\xd6\xfb\x63\x7e\x10\x7a\xd9\xe5\x8f\xcd\x20\x8b\xae\xa2\xed\x49\x76\x1c\xfd\xe0\x11\x49\x3e\x6c\x52\xa5"
		"\x93\x17\x04\xf6\x8f\x31\x50\xa8\x94\x8a\x12\xc9\xf8\x7f\x6a\xc0\x9c\x66\x51\x0f\x36\xcf\xaa\xe5\x22\x98\x7f\x94\x2e\xd7\x99\x7f\x08\xda\xa3\x2c\xb5\x2e\xb1\xcf\xc9\xb0\x80\x51\x7b\x42\x17\x9e\x49\xd0\x66\x0a\x2a\xe7\xb2\x73\x66\x84\x18\x7d\x8c\xba\x90\xfa\x96\x2e\xc0\x54\x46\x01\x74\xac\x29\x0a\x3b\x64\xef\x71\xba\x11\x42\x3e\x2b\xc4\x58\xe0\x21\x00\x33\x82\x5c\x83\x1f\x8c\x4b\x62\x0d\x4f\x52\x54\x80\x69\x5c\xe1\x25\x3c\xf2\xd1\x37\xe7\xeb\xb1\xff\x65\xe4\xce\x6a\x66\xd5\x33\x69\xd3\x48\x24\x1d\x58\x94\xbd"
		"\x2d\x38\xcb\x5b\xa7\x08\x07\x6f\xd1\xf2\x53\x6d\xc5\x19\x1a\x4f\xb3\x6e\x0d\x05\xea\x93\x01\xea\x0b\x7f\x9c\x7d\xe5\x84\xf4\x49\x45\x38\x75\xfe\x39\x04\x06\xf5\x3b\x5a\xf7\xba\xe4\xc1\x4a\xb7\x22\x40\xf2\xa2\xf1\x74\x65\x86\x0f\x41\xf7\x13\xb9\x39\xa1\x6d\xe2\xd3\x92\x18\xe0\x35\xa0\x55\x48\x6f\x28\xc4\xc9\x79\x6c\x3a\xb8\x27\x77\x15\x24\xab\x7e\x01\x90\x6d\xaf\x22\xbb\xf9\x12\xdb\x4b\x55\x93\x93\x7f\x94\xcd\xb1\xb5\x9d\x15\x80\x76\x74\x00\x86\x1f\xea\x88\x31\x44\x63\x2f\xed\x1e\x73\x67\x2b\xe0\x2a\x37\x1d"
		"\xdf\xe5\x01\x52\xa8\x03\xaf\x92\xb5\xb7\x46\x92\x24\x9a\x99\x7c\x1b\x53\x7e\xd3\x0a\xb3\x71\xf1\xba\x33\x18\x5c\xcc\x2b\xc9\x49\x52\x08\x99\x07\x4c\x71\x85\x4c\xa2\x43\x84\xbd\x50\xea\xf7\x33\x9c\xd0\x0a\x8c\x3b\xcb\x14\x78\x6f\x1b\x9b\xc3\x25\x2e\x80\x45\xfd\x25\xc2\xd1\xb4\x84\xc4\x3e\xc0\xb4\x0b\x20\xdc\xde\xa7\x1d\x95\x8d\xc2\x6e\x5b\x74\x26\xa2\x38\x2c\xbe\xb6\x6e\xed\x66\x66\xd4\xa6\xf6\xeb\x25\xc8\x7b\xbe\xff\x58\x34\xdf\x5a\x44\xe2\x3e\xe7\x1e\xa8\xd8\x38\xcb\x03\x19\x9d\x9d\x59\xb8\xbd\x1b\xd5\xc6"
		"\x92\xec\x13\x9c\x35\x91\x72\xdb\x59\xda\xdf\xb4\xe4\x54\x7d\x44\x50\x97\x91\x04\xcf\x2c\x38\xf2\x1a\xa7\x49\x50\x03\x1a\xcb\x33\xab\xf9\x06\xe3\x51\x11\x1a\x4e\x81\x29\xae\xc4\x4e\x65\x05\x5b\x82\x60\x8b\xf8\x43\xa7\x0f\x6b\xe9\x3e\x53\xd0\x67\x2a\x58\x88\x9c\xe5\x9d\x00\xfd\x5d\x19\x24\x48\x90\xf1\x68\x05\xa8\x46\x98\xc7\x5f\x63\xad\x77\x8d\x57\x71\x5d\xa2\x80\x9b\xc1\xd5\x4b\x6f\xbd\x8c\x9d\xd7\x18\x3d\xd8\x58\xbb\x29\xa9\x99\x8d\x0c\xf3\xc2\x0a\x4b\xad\x2f\x25\xad\xf6\x3b\x38\x70\xb1\x69\x20\x32\xf0\x96"
		"\x97\x6e\xec\x32\x26\xa0\x92\xbb\x90\xeb\x16\x46\x37\xe4\x0f\xad\x8e\x31\xc0\x96\x1c\xa4\xdf\xa2\x49\xa1\x6b\x53\x03\x7a\x4d\x2a\x08\x82\x25\x0d\xfa\x47\x09\x64\xf2\x82\x00\x73\x29\x34\x3a\x24\x6c\x68\x4f\xa0\xd5\x87\xb3\x96\xf2\x84\x7e\x9e\xc8\x19\x97\x63\xbf\xba\x1f\xb5\x38\x1f\x79\xde\xe6\xbc\x82\x70\xe4\x46\x49\xd5\x12\x99\x03\xb1\x4a\xe1\x98\x64\x73\x4c\x66\xa1\x19\xdc\x01\xd9\x72\xe1\x9b\x7c\x8a\x0c\x74\xa3\x5e\x16\xb4\x91\xa5\x45\x2f\x01\x26\x45\xb3\x62\x65\x9e\x55\xdd\x2f\x27\xf0\xdb\x37\x7c\x80\xbc"
		"\x44\x57\x91\x76\x03\xb4\x3b\xb6\x09\x85\x0a\x0b\x6b\x1f\x35\x2e\x6f\x27\x23\x2d\x5b\xb6\xaf\x40\xfb\xeb\x39\xfe\x08\xe7\xfa\x3d\x01\x38\x6a\xae\x4c\x8f\x76\xe1\x2f\xc9\x6f\xe8\x85\x4a\x27\x22\x45\xc3\x9d\x23\x28\xa1\x16\x28\xef\x9f\x3a\x86\x91\xd8\x0a\x20\x40\xae\x52\x72\xa9\xfc\x74\xbc\x0f\x98\x9b\xad\x6b\x4f\x0f\x03\xb6\xe3\x4f\x75\x21\x26\x30\x62\x70\x71\xe7\x42\x64\xdc\x5a\x82\xcb\x1a\x02\xf0\x75\xb1\xd5\xae\xa8\x16\xce\x52\x87\x68\x22\x53\xab\x6e\x84\xd8\xed\xa2\x05\xa6\xb0\x82\x71\x9c\x6c\x43\x26\x47"
		"\x74\xd3\x2a\x90\x45\xb8\x4f\x38\xc5\xd5\x4f\xe1\xd0\xde\xd5\x04\x49\x79\x6d\x9e\x72\xc9\x47\x67\xe2\x13\x33\x4c\x5f\x1e\x67\x64\xf4\x72\xb3\x1e\x00\xf1\x3e\x40\xaf\xd1\x95\x07\x93\x12\xc5\xde\x59\x9d\xef\xda\xc6\x15\x14\x3b\x60\x3e\xbb\xa5\xde\x51\xef\x6f\x4a\xfb\x5d\xa4\xb9\xb2\xfb\x89\x4e\xf8\x20\x45\x89\x84\x85\xf0\x36\x4a\x4e\x8a\xae\xae\x67\xcc\xa8\x3f\xc3\x92\x03\x2e\xbc\x9e\xe3\x3b\xa8\x14\xa9\x5c\xae\x8e\xda\xc2\xf4\x7c\x40\x5c\xf9\xca\x19\x41\x8a\xfb\x1d\x5d\x3b\x49\x4d\xec\x99\xd9\xb6\xba\x92\xca"
		"\xd8\x5f\x3f\x69\x59\xe1\x23\xa9\x0d\x45\xe2\x83\xf4\x13\x7a\xb3\xb6\x55\xd2\x82\xc0\x0f\x94\x53\x65\x78\x9e\x7f\x42\x62\xd3\xa6\x64\xa7\xf5\xf1\xe9\x6c\xa4\x87\x3d\x83\xd7\x82\x11\x03\xc8\x32\xc2\x4f\xcc\x23\x13\x28\xe0\x46\x11\x0d\x95\x3e\x8d\xd8\xa9\xfb\xd3\x67\xd7\x5c\x7f\x79\xc3\x2d\xce\x57\x36\x7e\x7f\x97\x06\xf2\x06\xb3\x6f\xb0\x5e\x18\x43\xc7\x32\xd9\x50\xb1\xfb\x70\x1e\xdd\x5a\x7c\x49\xa5\x5d\xf4\xb0\xab\xe1\x4d\x3a\xf9\xa7\x2b\x05\xdc\x50\x6d\x91\xfd\xb3\xcc\x1f\xf3\x92\xa7\x20\x9c\xdf\x79\x0f\xbc"
		"\x34\xf2\x49\xee\x41\xe2\x06\x34\x0d\x31\x97\xb1\xf2\x21\xfb\xea\x8c\x5e\x98\x21\x21\x84\x69\x41\x77\xf3\xe9\x37\x77\x0c\x4d\x22\x1f\xad\x80\xd9\x1d\x08\x57\x45\x20\x22\x41\x8f\xef\x89\x32\x16\x5a\xd2\x5c\xc0\x13\x92\xe3\xf0\x80\x3b\xc3\x2c\x27\xb4\x7f\x3e\xb6\x7c\x24\xae\x18\xe0\xbc\x58\x74\x9a\x9a\x65\x7d\x0b\xea\x23\xa9\x28\x04\x70\xdd\x41\xc7\xb4\x63\xa5\xd7\xbe\xf8\x03\x70\x8f\xa2\xb3\x5d\xba\x9e\xbc\xd0\x71\x2c\xe5\x98\xae\xee\x9e\x40\xbe\x61\xb3\x07\x17\xbd\x40\x1f\x29\x16\xec\xfc\xe7\x85\x31\x24\xa2"
		"\xe0\x5d\x65\x66\x6d\xde\x96\x96\x1f\x4c\x44\x39\xf4\x2a\x76\xfd\xf6\xb6\x8f\xbd\x7a\x12\x1c\xfd\x2c\x98\x26\xc5\x8f\xf2\x82\x3c\x9b\xc4\xa9\x6c\xc0\x5b\x3c\xb5\x05\x7d\x44\xa1\x54\x7e\x26\x87\x57\x6a\x6d\xaf\x6a\x8e\x48\xa2\x76\xea\x87\x86\xe8\xeb\x77\xc8\x7b\xd9\xa3\x30\xa0\xab\xc7\x2e\xb1\x57\x15\xb1\xf4\xf3\x1c\x30\xf1\xef\x80\xc4\xa5\x53\x11\x56\x82\x6a\xe7\x7e\xc3\x3b\x30\xd4\x30\x4d\xe2\x40\x5c\xa7\xc3\x5a\xad\x83\xfe\x54\x82\xf5\x87\x97\x8e\xa5\xe8\x57\xaf\x1c\xd0\x06\xf1\xb4\x2b\xbe\x61\x7f\x87\xda"
		"\x89\x2b\x09\x3a\x3f\x65\xa2\x5c\xef\xa8\xcf\x18\xa7\x75\x01\x00\x13\x6a\x8e\xad\xd9\xb0\xa7\x69\x7f\x59\x8c\x20\x7e\xc1\xc5\x3d\xad\xa2\x63\xa4\x57\xf8\xe0\xe0\x40\xd8\x78\x88\xed\x3c\x62\x20\x7c\xdc\xbb\xc4\xea\x5e\x7b\x51\xa8\xce\x8a\x22\xce\xf3\x43\x3f\x11\x43\xc1\xea\xc1\xd5\xe6\xcc\xc0\x1f\x9c\x74\x1b\x80\xb0\x0b\x07\x8d\xc5\x91\x78\xfd\x37\x8d\x51\x06\x02\xd9\xad\xa6\x0b\x61\xf4\x5a\x3a\x53\x6d\xa3\x0f\xd1\x96\x93\x0a\xac\xdb\x95\x06\x96\xd8\xbf\x4a\x97\x9a\x53\xd6\xe5\x36\x66\x3d\xbb\x1b\x73\xcf\x57"
		"\x43\xe4\xc4\x9f\x12\x5e\x76\x02\x39\x17\xb4\x70\x4e\x08\x72\xb6\x10\x4b\x68\x61\xc0\x23\x39\xfc\xcb\x9b\xa5\xba\x49\x5b\xc9\x2e\x46\xcc\x87\xcc\x9b\xcc\xb9\x0b\x26\xcd\x5c\x78\x43\xa6\xab\x87\x2f\xda\xdb\xf9\x19\xfd\x9c\x9e\x57\xba\x21\x80\xbc\xf7\x77\xf9\xc0\x37\xb0\xe5\x55\x66\x27\xdd\xb7\x69\x6c\xee\xb8\x8e\xd1\x30\x04\x99\x09\xcc\xdd\x74\xaf\x6a\x8c\xbe\x61\x2b\x0d\x67\xff\x05\x82\x5a\xc2\x8d\x86\x69\xce\x20\xa5\xe1\x37\xe1\x4f\x63\x72\x20\xa5\x49\xf1\xf8\x47\x8a\x62\x6e\x88\x1d\x16\xda\xf0\x63\xd0\x40"
		"\xe0\xab\x92\xed\xff\x2a\x05\xd6\xb0\x0a\xe2\xc7\x76\x30\x55\x24\xf7\x91\x05\xa1\x1b\x6f\x96\x64\xcf\xef\xda\xb2\x4c\xc4\xcd\x0f\x9d\x85\xfe\xd2\x22\xcc\x28\x92\x1e\x0d\xba\xc1\x5f\x8b\x52\xf6\xb3\x1b\xc8\xe0\x1d\x1b\xfd\xa9\x1b\x80\x11\x44\x29\x97\x9e\xbc\x62\xca\x34\x67\x98\x0c\x9c\xe7\xfc\x1b\xf4\x60\xe6\x55\xfc\x4f\x76\xd2\xc6\x3f\x95\xc6\x79\x44\xb2\x55\x62\x8c\x68\xb1\xf9\x00\x08\xfa\x91\x1a\x2e\xf4\xab\xbb\xb7\x99\xbc\x47\x39\x77\x80\xd8\xf6\xc0\xad\x04\xab\xd6\x92\x86\x46\x94\x31\xfa\x86\xb4\xf2\x21"
		"\xb8\x03\x92\xa9\x4b\xa1\x1c\xb6\x27\x9b\x02\xe8\x80\x38\x3d\x95\x35\x08\x6f\x4d\x67\x43\xf3\x76\x72\x87\x8d\x68\x6f\x68\x18\x71\xf5\x03\x65\x87\xe2\xbd\xca\xf7\xb9\x08\x19\xc3\x90\x0d\x0d\x5f\xf6\xd8\x24\x86\x6b\xd3\x74\xdc\x9b\xa3\xb1\x47\xf2\xd8\x1b\xbb\xe4\x1b\xe8\x87\x20\xde\x6c\x71\x1e\xb4\xbc\xdb\x7e\x6a\x1b\x3b\xb9\x03\x00\x1d\xfb\xac\xd6\x39\x70\xf1\x3b\xc0\x13\xf3\x84\x55\xa0\xb8\xb4\xbe\x45\x79\x50\x6b\x56\xa9\x80\xa0\xdb\xcf\x3c\xef\xb1\x25\x66\xde\x5e\x50\xe8\x68\xa4\xe5\xfa\xaf\x55\xa4\x82\x12"
		"\xcf\x58\xb3\xbe\x49\x69\x99\xd8\xa4\xd3\x51\xfa\xb7\x10\x7c\xa8\x3d\x09\x7f\x98\x7a\x28\x4a\x8c\x9c\x5d\xf8\xdc\x6b\x47\x43\xe1\xb3\x2d\x46\x78\x89\xf0\x25\x7d\x83\x11\x6e\x8a\x95\xde\xcb\x3e\x15\x07\x5a\x1d\xd4\xf2\x19\x5c\x40\x78\x4d\xce\x8b\x8c\x3a\xe2\x1c\x91\x22\xbf\x0b\xd3\x4a\x78\x7c\x27\xd6\x2f\x9d\x34\xe1\xf6\x5b\xb3\x30\x05\x4c\xdb\xe0\xbd\xee\x2b\xd3\xaa\x99\x87\x54\x17\xbd\x8e\x50\x7c\xcd\xce\xee\x74\xf3\xed\x5a\x07\x62\x63\xa1\x81\x8f\xff\xd8\x16\x06\xeb\xcb\x12\x80\x37\xe8\x36\xcb\xc6\xcf\xe7"
		"\x95\xe9\x9f\x51\xe1\x2b\x58\x06\x6f\xb9\x0b\x28\x40\x7a\x52\xa1\x5f\x33\x3e\x73\x0f\x46\x7e\x0a\xc7\x28\x69\xd7\x73\x60\x3d\x77\x51\x10\x7f\x3b\x64\xb0\xe9\x5a\xf4\x59\xe6\xc5\x05\x3b\x66\x5a\xe7\x3f\x70\xa0\x24\x68\x69\x13\xe2\x74\x67\xae\xcc\xa0\xd2\x51\x37\x22\x56\x00\x15\x1a\xf8\x03\x2d\xf8\xb3\x81\x20\xd7\x01\xa0\xf1\x2e\x67\x9a\x32\x7f\xd0\x54\xc5\x4c\x40\x35\x0a\x37\x6a\xb2\x2c\x64\x29\xcf\xba\xba\xcc\x6f\xec\x76\x4f\x4e\x14\x6e\x33\xa5\xc4\x38\xf5\x8b\x0d\x10\x49\x0c\xf0\x84\xa1\x46\xf0\xe4\xe6\x1f"
		"\xa8\x94\xf9\x0e\xb5\x28\x33\x4b\xc5\x48\x95\x79\xf7\x3b\x29\x63\x4e\x5c\xe0\x14\xb9\x2d\x48\xb7\x6a\xad\x13\x16\x65\x56\xb6\xe3\xd5\x39\xb1\x9b\xf0\xb0\x36\xc4\xd5\x63\xb2\x89\x30\xd5\x64\x21\xba\xca\x7a\x6c\x97\x64\xf8\xc8\x01\x16\xa9\xad\xdc\x85\x18\xe7\x26\x06\x09\xc9\xbc\x71\x39\x1d\x10\xe7\x0b\x7f\xe6\x73\x63\x7c\x2e\x41\x28\x9a\x8d\x27\x31\x01\x49\xef\xfd\xb5\xb1\xd9\xfd\xa9\xe1\x9f\xbc\x58\xc7\x87\xd0\x57\xea\x8e\x8f\x93\xe1\xf2\xa2\x5b\xe5\x66\x75\x7e\x03\x81\xbc\x2a\x55\xa4\x74\x66\x59\xec\x63\x35"
		"\x0c\x8c\x9b\x45\xf5\x75\xfb\xa5\xc0\x32\x74\xe4\x27\x73\x5f\xf3\x35\x81\xd8\x61\xf2\xd9\xa0\xa5\xa3\x1e\x00\xb6\x28\xea\x7c\x7e\xae\xed\x48\x67\x57\x02\x89\xd1\xa5\xc4\x78\xc6\x9e\xcb\x87\xb0\xc2\x56\x74\xf7\x99\xcc\xfe\x18\xbb\x8a\x94\x2d\x61\x06\xa5\x16\x73\xef\x93\xbf\x19\x2e\x30\x47\xb8\x06\xd1\x21\xa6\x28\x13\x75\xec\x4a\xcc\xb4\xff\xb9\xe4\x0a\x03\x5d\x90\xc8\x9e\x07\x51\x7a\xe7\xe8\x3b\x63\x6b\xf2\x3a\xcd\xe9\x47\xe8\x4b\x72\x96\xab\x9d\x28\xa2\xbf\xe5\x00\x37\xd4\xaa\x63\x93\xf1\xd8\x8d\xce\x3d\xa0"
		"\xb6\xa7\xb7\x7d\x62\xab\xb6\xec\xe1\xb3\xc2\xa8\xa4\x8c\x7c\x0b\x18\x1e\xa0\x07\xdf\x28\x9d\xe7\xaf\x49\x5d\xd4\xd4\x82\x80\xb5\xc5\x39\xc8\x58\x2e\x0e\x4e\xcb\x83\x1a\xc0\xf3\x84\x77\x3a\x22\x6b\x7c\xeb\x24\x51\xb2\x86\xc3\x0c\xc0\xd5\xb2\xfa\xae\xf7\x88\x25\x59\x3c\x4f\x8e\x55\x78\x0a\x96\xc3\x7b\x65\xf0\xf3\x80\xc2\x6b\xca\xaa\x43\xb9\x54\xe1\x42\x49\x7f\x2c\x42\x57\xac\x51\x36\x18\xb7\x24\x03\x54\x5a\xff\x15\x66\x12\x82\xe4\xe6\xc6\x06\x2a\xfc\x51\x55\x65\xec\x1f\x88\xfe\x7b\x9e\x3a\xb5\x21\x47\x95\x0e"
		"\xf8\x32\xf0\xc8\x3e\x60\x72\xf3\xaf\x85\x46\x55\x39\x92\x26\x55\x60\x60\x12\xa3\x2b\x37\x82\x49\xfb\x3a\x57\xa4\xb5\xd5\xfd\xdb\xcb\xb8\x25\x7d\x67\x49\xa8\xf6\xcc\x73\xe6\xfe\x4b\xd2\xc0\x39\x0f\x51\x88\xd7\xc8\xb5\x81\xcb\xec\x26\x48\xae\x60\xab\xe9\x9a\xc3\x2a\xa0\xe9\x9d\xf9\x45\x35\x1d\xbf\x82\xcb\xf4\x27\xc7\xce\x00\x75\x53\xd3\x60\x9d\x94\xe3\xd7\x2b\x3f\xc0\x9d\x85\xa1\x63\x14\x59\xef\x4d\x82\xc9\x9b\x66\xb4\x87\x17\x3c\x5d\xba\x69\xf1\x90\xc9\x2a\x4b\x11\x64\x00\x39\xa7\x8d\x63\xf7\xcb\x3b\xa9\xa5"
		"\xb8\x58\xb7\x51\xe7\xf5\xe9\xbb\x35\x60\xc7\x77\x4c\x20\xb3\xf8\xcf\xc6\x67\x65\x06\x01\x77\x81\x05\x7e\x60\xda\xa6\xf5\x04\x6c\x41\x16\xbd\x24\x73\x7f\x47\x8b\xa9\x80\x8e\x76\xdd\xf3\x61\x36\xe5\x1a\x4b\xd1\x2c\xda\x31\x8a\x61\xa6\xd4\x5d\x3a\x19\x96\x93\x6d\x6b\x01\xa4\x31\xda\xd1\xbb\xde\x18\x18\x2f\xfb\x1e\x48\x4a\x8a\x3c\x04\x92\xe4\xa9\x1e\xef\x3e\xbb\x4b\xed\x26\xce\xa2\x37\x2a\x30\x38\x00\x03\x53\xce\x66\xc9\x44\x04\x55\x0a\x19\x61\xc2\x28\xc3\x35\x27\xff\x02\xe1\xb7\xc8\x5e\x18\x70\xdd\x0b\xdf\xb4"
		"\x67\x62\xc3\xbd\x3c\x61\x96\xe2\x0d\x95\xa3\x63\x1f\x8b\x70\x0c\x5b\x54\x03\x08\xa9\x6a\xbe\xc9\x7c\xd0\x38\xfe\x91\xa3\x5d\x0b\x85\xe3\x56\x63\xff\xe2\xb5\xaf\x4b\xb9\xb8\xa2\xc4\x79\x6a\x4e\x6f\x03\xe3\x77\xf3\x77\x3c\x99\x1f\xf2\x21\xe2\x15\x38\x07\x23\x78\x62\x99\xe7\x52\x59\xd8\xc2\xdf\xce\xb6\xc1\xe2\x1c\x8f\x97\x79\x0f\xc9\xea\xd8\x29\x35\xf9\x97\x76\x18\x37\x4b\xd1\x2d\x21\x15\x4b\x96\xe2\x65\xe6\xaa\x60\x4c\x87\x9b\x64\xb8\x2c\xdc\x41\xc5\x8b\x3d\x75\x27\x5d\x7f\x2c\x5e\xa6\xf3\x3e\xad\xc5\xdd\x1d"
		"\xb5\xc5\x9b\x3c\x02\xd9\xf1\x4c\xff\x4b\x80\x0f\x3c\x3e\x7f\xf7\xb0\x21\x02\x1c\xc8\x6b\x19\xde\x61\xa4\x5d\xc8\xaa\x09\x81\xdd\x32\x87\xc9\x0d\xee\x61\x3c\x52\x81\x39\x69\x68\xa5\x05\x86\x8b\xce\x8e\x86\xd3\x0d\x89\x22\x9d\x2e\x96\x24\x16\xd9\xe3\xb6\x0c\x64\x18\x6b\x2b\x14\xcf\x91\x92\x5f\x9f\x74\xb4\xcd\x0d\xcc\x69\x9d\xb9\x1e\x2e\x01\xd8\xb5\x57\x2f\x1a\xee\x08\x5f\x9e\xb6\x1d\xfa\x13\x75\x72\xce\xc4\x44\x5b\x06\x40\x33\x6f\x87\xda\xdf\x78\xcf\x34\x88\x10\x5c\xd5\x25\x0c\x24\x43\x06\x7e\x19\x2b\x82\xd2"
		"\xe2\xa9\xf4\xf6\x56\x9f\xb7\xea\x6e\x1f\xd1\x21\xe6\x0b\x68\x60\x3c\x20\xd9\xb5\xcc\x97\xa2\xd9\x60\x0a\xe6\x74\x46\x15\x55\x47\x12\x20\x96\x14\x8f\x78\x32\x14\x40\x33\x54\x49\x69\x01\xb6\xa5\xe2\xb2\x6b\x41\x88\x54\x03\x96\xa2\x76\xc4\xc1\xc9\xc0\x9f\xc5\xe5\x5b\x50\x00\x15\x4e\xf1\x03\x89\x28\x08\xe0\x7d\x0a\xf6\x99\xd3\x0f\x61\x29\x40\x89\x36\xb4\x65\x3f\x5d\xa6\xd5\xec\x63\x44\xd0\x57\xa7\xc4\x14\xf0\xb3\x7f\xc1\x7a\x9a\x24\x53\xda\xfa\x76\xd5\xc5\x88\x54\x2f\x6e\x9b\xcc\x88\x61\x1a\xd0\x21\x8b\x19\x88"
		"\xe0\xbd\xf0\x4f\xcd\x8b\xe6\x28\x98\xd8\xf8\xbd\x82\x7d\xd3\x01\x42\xf2\x08\xe5\x06\xba\xe1\x4d\x08\xf6\x24\x65\x84\x94\x77\x7f\x70\x31\x80\x02\xbc\x20\x0f\xf7\x10\x04\xb9\xc5\xf0\xa7\x7f\x98\x69\x4c\x3c\x7c\xd4\x35\x2f\xaf\x54\x42\xec\xe2\x95\x09\xe1\x35\x7f\x7a\x0f\x06\xfb\xfa\xd8\xf3\x1d\x41\x3c\x47\x3d\x8a\x66\x07\x59\xae\x83\x26\xf2\x84\x13\xa0\xb0\xca\x19\xe4\xb5\x3b\xe5\xbf\xdb\x1e\xf3\x28\x7b\x01\x57\x90\xb7\x8b\x1c\x82\xc9\xeb\xf6\x56\x2a\xbb\x62\x7e\xfa\xee\xfa\xc3\x5b\xab\x82\xee\xed\xcc\x97\x70"
		"\xe5\x22\x05\x27\x5b\x00\x30\xb8\x27\x7f\x14\xb9\x22\x39\xa4\xd4\x3c\xa4\x21\xff\x11\xdb\x7e\x5b\xbb\xd8\x85\x5d\x5f\x18\x3b\xee\xfa\xea\x29\x89\x1c\xbc\xe5\x30\x9c\x1f\x6e\x84\x1c\xa0\xfd\xef\x30\x32\x43\x0f\xa8\xd3\x77\x57\x29\xeb\x8c\xb0\xaf\x86\x54\x1e\x40\x1f\x85\x0d\x5f\x11\xd7\x98\x34\xc8\x5e\xc6\x9e\x35\x69\xb0\xe6\x6d\x0d\xb0\x02\xe2\x01\x9b\x62\x71\xc8\x8c\x19\x52\xc8\x3e\x34\x44\xf6\x88\xb5\xb9\x24\xa8\xc3\x6b\xd6\xab\x00\x72\xc1\x16\x4d\xe5\x58\xd7\x09\x98\xa8\xba\xf8\x49\xfd\xa6\xd2\x3d\x2d\xdc"
		"\xb1\x92\x1c\x52\xf8\xa3\x3f\x9d\x2d\xcd\x43\xed\xbf\x53\xd2\x32\xe1\x0e\xac\x4c\x63\x6d\xcd\x1e\x0a\x62\xfc\x56\xba\x8a\x38\x2a\xa4\x5c\xb5\x38\xee\x9a\xca\xa1\x6e\x2f\xb7\x3c\x03\xe7\xc7\xf6\xd8\x79\x29\x8a\x94\x97\x8e\xf0\x91\xfb\xfd\xd4\x61\x89\x46\xfe\x91\xb5\x74\xc4\x82\x9f\x91\x35\x0e\x09\x17\x2d\x01\x8d\x1b\xf1\x28\x49\x55\x0e\xa5\xdf\x5c\x5c\x80\x5f\x70\xc8\x96\x95\x1c\x08\xce\xe0\xbf\x04\x42\xda\x93\x4e\x0a\xf5\xf6\xed\xd4\xbc\xd5\xb0\xab\x52\xad\xad\x35\xab\xb3\xee\x12\x7f\x4d\x63\x6d\x4d\xbd\x72"
		"\x87\x58\x95\x54\x39\x4c\x94\xdf\x83\x5f\x27\xbe\x51\x71\x35\x62\x8d\x39\xf2\x58\x05\x30\x5a\xa7\xc2\x09\x12\xe0\x13\x89\x61\xd4\x84\x53\x61\xae\xc4\x58\xeb\x58\xfd\x39\x4c\xc7\xe3\xe2\xa8\x15\x73\x6f\x86\x50\x00\xb2\xac\x9f\x27\xa1\x8e\xa3\x68\xf8\x75\x23\x8e\x76\x6d\x74\x7d\x20\x42\x93\xe9\x5a\xc4\x9f\xd9\xc1\xef\xf5\xcb\x47\x92\xa0\x32\x82\xa4\xbc\x0b\xcd\xda\x41\xa1\x44\x72\xee\x0e\x3f\x53\x00\x15\xb4\xf4\x03\xd2\xc1\xf5\xf1\xe7\xfe\x09\xb8\x18\xf5\x0e\x16\x4f\x41\x66\xde\x41\x4a\x68\x95\xb2\x3e\x12\xec"
		"\xc3\xb3\xf9\xe8\x24\x02\x52\x8f\x68\xa3\xcc\x49\x1c\x6d\xb0\x31\x6e\x46\x56\xe1\x48\xa0\xbd\x11\xa2\x86\x46\x88\xd8\x36\xe7\xdc\xbe\x38\x9a\xee\x16\x73\x54\x3a\xe6\x31\x48\xad\xd3\x36\x79\xf3\x67\xb8\xfd\x4c\x08\xd7\x9d\x63\x54\xeb\x94\x9f\x92\x68\x14\x7d\x02\xef\x8d\xd9\xbf\x7a\x5b\x40\xd8\x66\x21\xe2\xb6\x45\x78\x0b\xfb\xdd\xc8\x18\xb4\xea\x17\x5c\xec\xe1\x55\x3f\x83\xe4\x3c\xc3\x4e\x10\xd7\x54\x35\xed\xe7\x11\x54\x17\x55\x42\x79\x68\x18\x8c\xab\xa0\x46\x12\xeb\x23\xdf\x90\xbe\xbe\x81\x4b\x60\xde\x72\xaa"
		"\xb9\xfb\x28\x1c\x63\xd6\x9f\xdc\x52\x9c\x70\xb7\x72\x2f\x57\xc4\x6a\x49\xd6\xde\xb8\xdc\x9e\x2c\x84\x8f\xa3\x49\xf3\xb9\xe8\x0a\x2b\x00\x10\x87\x34\xdb\x39\x13\xd9\x49\xd3\xd3\xf5\x07\x7d\xce\x3d\xb8\x9f\x8d\x18\x75\x82\x6b\x8e\xee\xf6\x81\x3c\x10\x72\xa3\xdc\xfa\x7a\x05\x3d\xa3\xbc\xd2\x01\x91\xd2\x68\x79\x19\x24\xe1\x58\x4c\xaa\xa9\x49\x60\x40\x53\xaa\xbc\x58\x5f\x66\xda\x75\x75\xe9\x33\xfe\xcf\x09\x65\x47\xf1\x94\x1f\xa7\x75\x84\xc2\x62\x74\xa1\xde\x8b\xd2\x6c\xa6\x9b\x51\xac\x53\xe5\xea\x23\xec\xc9\xf8"
		"\xeb\xeb\xb2\x19\x60\x2f\xeb\x2e\x67\x72\x04\xc5\x42\x4b\x1d\x1f\x39\x8b\xcb\x8a\x24\x1f\x1e\x71\x61\x42\x9c\x2f\xd7\x09\x21\x02\x1e\xb8\xbb\xab\x27\x49\x24\x8c\xdf\x86\xd5\x5c\x36\xc0\x46\xf8\x85\xab\x07\xf5\x62\xc0\x93\x17\x6a\x6b\xbc\x3c\x2e\xea\x44\xf9\x34\xee\x86\x7f\x28\x6f\xb0\x20\xfb\x9f\xb7\x61\xf9\x82\x2a\xd1\x0d\x23\x6d\xc7\x16\x73\xea\x83\xca\xe5\x75\xbf\xa1\x00\xfe\x4c\x38\x45\x01\x5f\x23\xe3\xe8\x6d\xff\x20\x39\x17\x56\x6f\x42\x18\x5e\x0a\x2e\x15\x7d\x80\x49\xcd\x03\x0b\xdf\xf6\x79\xf5\x07\xb4"
		"\x77\x5e\x65\x05\x2e\x0e\x9a\xb9\x1d\x73\x5b\x8a\x80\x8e\x19\x87\x91\x54\x6c\xb2\x2a\xf2\x73\xbd\x2a\xcc\x82\x69\x63\xee\xcd\xe0\x96\x22\x11\xb6\x7b\xc6\x93\x3e\x3d\x5e\x22\x9d\x8d\xa8\x0c\xf3\xd4\x8a\xdd\xc6\x24\xec\xb0\x7d\x37\x0a\x63\x57\x54\xbf\x1c\x6c\xfb\xf4\xee\x2b\xfd\xdc\xaf\x09\x89\x33\xf9\x29\xeb\xfc\x25\x87\xf6\x21\x40\x47\x35\xba\xfd\xa7\x04\xbe\x85\xff\x69\xec\x7c\x00\xa6\xa0\xa0\x0f\xe2\xae\xb4\xa4\x58\x15\x14\x1a\x32\xa1\x7e\x97\x4e\x71\xa9\x66\xbf\xfa\xba\x36\x42\xb2\x3c\x0a\xa6\x1b\x50\xe6"
		"\x91\x8f\xeb\xf1\x4c\xfb\x6c\xa6\xf2\x9d\x2e\x7f\x5d\xb1\x92\x0f\xb8\x8c\xeb\xbb\x37\x69\xf4\x87\x4b\x70\xfc\x82\x09\x72\x80\x07\x05\x60\xc6\x1e\x69\xc1\xcc\xc8\x0e\xc9\x3b\xde\x61\x57\x16\xda\x60\x01\x41\x26\xfa\x57\xa8\x8d\xe4\xb8\x36\x3e\x1a\x8c\x45\x09\x61\xe3\x40\x39\x7e\xff\x4c\xe0\x4f\xe6\x00\xd5\xf9\x43\x90\x9e\xf7\xd1\x3c\x54\xf0\x78\x79\x06\xfa\x14\x7e\x01\xb9\x88\x02\x79\xf0\xaf\xc8\x92\x0b\xce\x7d\xf4\x12\x5f\xf8\x1a\xa1\x83\xa1\x55\x32\x93\x3d\x00\xad\xa2\x0f\xff\x0b\x51\x70\x86\x7f\xe4\x28\xce"
		"\x3f\x66\x66\xa2\x9a\xa5\x3a\xa7\x83\x87\xcc\x29\x2e\x85\xf9\xb8\x0d\x1c\x07\x77\xb2\x7f\x86\x35\x9b\xe3\xe6\xcd\x67\x92\x65\xee\xc3\x2b\x9b\x66\xdb\x9c\xf0\xdb\xaf\x71\x67\xc6\x9e\x67\x73\xb0\x49\x64\xfc\x1d\x05\x1f\x71\xe8\xbe\xba\x95\xab\x2e\xde\x5a\x87\xc7\xa3\x05\x64\x8a\x3b\xb1\x82\xb8\x97\x2d\xd1\xa8\x78\xba\xc6\x37\x77\xbb\xcc\xa3\x27\x2e\x1c\xab\xfe\xe5\x3f\x41\xa5\xe9\x08\xef\xc1\xea\xb9\xa0\x9a\x72\x45\x14\xc7\xfa\xba\x03\xbb\x0d\x0c\x73\xd4\x9c\x7a\x48\xb6\x5c\xd4\x06\x98\x94\x3d\x01\xc7\x80\xba"
		"\x51\x8b\xbd\x8e\x2b\xf7\xc9\x53\xac\xff\xfe\x82\x24\x0a\xa3\x9b\xca\x81\xe1\xbc\x37\xd5\xb1\xb0\x4a\xa3\xa1\x57\xc2\x60\x05\x9d\xa0\xf6\x98\xca\x9b\x70\xa6\x8e\xfb\x19\x7e\x92\xa2\x1c\x6b\x5a\x60\xb4\x73\x9f\xdf\x9e\x86\xe2\xfd\xc9\xb2\x5b\x4a\xa1\xfa\xe0\x61\x3d\x6b\x7a\x24\x6c\xec\xcb\xaa\xa5\x4d\x16\xd4\xf5\xc0\xc5\x63\x4b\x9a\x51\xbc\x49\xae\x0c\x0e\x82\x1f\x32\xe2\x21\x53\x8f\x44\x5f\xb7\xbc\x1b\x87\x80\xa2\x65\x61\x27\xfc\x22\xc5\xaf\x93\x7d\xf9\x8a\x2a\x75\x15\xd2\xb5\x01\x21\x91\xd1\xec\x84\x17\xd2"
		"\x56\x3c\x30\x1f\x00\x69\xc2\x35\xa4\x9a\xba\xe0\xcc\x2a\xe7\x54\x49\x4d\xec\xd4\xce\xae\x33\x64\x09\xe4\xd6\x6c\x9d\x47\x7f\x47\xa9\xc4\x15\xaf\x3a\x56\x94\xd8\xf9\x8b\x74\x76\xe2\x7f\xce\x76\xf6\xa0\x50\xa2\x9b\x8a\xff\x4d\x35\xd9\xbb\x9d\x3c\xbc\x54\x8a\x01\xfa\xd4\x3c\x86\xd9\xe2\x60\xc6\xc5\xcc\x18\xa7\x0f\xfe\xff\x9a\x43\x09\xc5\xed\x64\x31\x9b\x1f\xee\x14\xcc\xec\xdb\x64\xcd\xd7\x36\x9d\x0c\xcc\x38\xe8\x29\x40\x85\xed\xf9\x28\x9b\x96\x91\x96\x95\x68\xa4\x7c\x50\xd2\x66\x19\x8a\x78\x93\xb2\xf5\x3d\x03"
		"\xb1\x8d\xed\x6d\x8a\x40\x26\xa1\x24\x90\x7e\x81\x4f\x19\x7f\x5f\x48\x67\xc6\x4f\x04\x1b\x33\x76\xc9\x64\xa3\xd1\xbc\xd5\x21\xe7\x00\xbf\xd6\x16\x73\xe7\x3c\x59\x7b\x96\xb5\xd9\x01\xac\xdd\x15\x0a\x69\xff\x10\x89\x8b\xa5\x79\x30\xbb\x95\x48\x1b\xfb\xc2\x30\xbf\x31\xce\xa1\x24\x18\xa7\xf6\x7d\xf9\x1b\x81\xa0\x07\x7f\x38\xae\x6a\x3a\xcf\xbd\x05\x00\xb9\x70\xfd\xb8\x05\x52\x07\xb2\xbd\xc8\x75\x8a\x89\xf6\x8f\x23\x36\x03\x54\xf9\xd7\xbd\x4c\xa1\x44\x14\x4c\x06\x72\x49\x2e\x50\x6c\x96\x33\xb6\x21\x95\x5a\xeb\xb3"
		"\x87\x05\xc7\xce\x16\xa2\x16\x2f\x18\xa8\x02\xd2\xa5\x41\x61\xcb\xde\x2d\xeb\xb1\x9a\x7a\x3b\x64\x15\xe7\x61\x65\xce\xce\x1e\x92\x99\xf6\x9b\xbf\x6c\x01\x8b\xb1\xab\x01\x59\x40\xa5\x21\x72\x14\x14\xb9\xae\x10\xf6\x64\xbb\x9f\xf4\x51\xa3\x96\x1c\xa8\xbd\xa2\xca\x5b\xd5\x44\x8a\x9b\x9b\x2c\xd8\xa8\xc9\x1b\xe5\x40\x38\x09\xe9\xf7\x6d\x29\x73\x21\xe9\x96\x93\xf3\xaf\x49\xb7\x11\xcc\x29\xd3\x0c\xe6\x8a\x87\x18\x6e\x64\xcc\xac\x61\x2b\xe0\x5e\x30\x1d\x37\x20\x36\x92\xfa\x4d\x90\xaa\x25\xdd\x2a\x75\xf5\xf8\xb7\x23"
		"\x73\xfc\x84\x9a\x2d\xa0\x16\x86\xb3\xdd\xaf\xb5\x8f\x3b\x9c\xc7\x62\x01\xed\xcb\x71\xb1\x52\xd6\x40\x00\xf3\x72\x47\x1e\x40\xfb\xd3\xa7\x09\xab\xf0\x39\x2a\xf6\x11\xb1\xb9\x7d\xc1\x16\x3c\x3b\xff\xd4\xe6\xd4\x6c\x41\xed\x3f\xa5\xd1\xa8\xe1\x72\xb5\x0a\x10\x92\x04\x2e\xbf\xd1\x78\x14\x2e\xdc\xbf\xef\x9c\x21\x46\x9b\xbe\x70\xa4\x73\x0f\x0e\x5c\x98\xd0\x3b\xca\x24\xc2\xaf\x07\xb1\x44\xd2\xa4\xe0\x61\xb7\xb3\x78\xa9\x05\x00\xe5\x2a\x19\xd7\xd8\x49\x3f\x12\x4d\x77\x94\xbc\xe2\x64\xae\x43\xc6\xb9\x6d\x3c\x0d\xf3"
		"\x31\xa2\xd0\x54\x9b\x01\x65\x5b\xf8\x67\xdb\x36\xb1\x91\x6a\xe1\xb2\xaa\x13\x95\xfd\x86\x75\x91\x0c\xcf\xa3\xbc\xb3\x39\x27\xdc\xea\x18\xdb\xed\x2a\xd7\xc8\x6c\xdb\x07\x6d\x63\xfe\x3e\xf4\x79\x7c\xe1\x75\xc6\x9e\x65\x84\xb0\x6a\x71\x45\x7c\x75\x9a\x7b\x65\xdb\x25\xcf\x27\x20\xc4\x3a\x98\xb7\xb2\x12\xc8\xfa\x20\xfa\xa6\xd3\x3d\xa7\x76\x79\xd3\x6f\x19\x54\x0d\x9a\x14\x1f\x32\x7f\xde\xf1\xad\xfb\x62\x50\x43\xc4\xd9\x9f\x45\xcb\x9c\x7b\x8f\x6d\x59\x21\x98\x3e\xf4\x01\x21\xe4\x0e\x91\x2c\x36\x79\x47\x3f\x50\x33"
		"\x41\x46\xc0\x8a\xb6\x03\x7e\x17\xc2\xf3\x1f\xef\xb4\xf5\x03\x10\xd6\x36\x0a\xf8\xc4\xcc\xf4\x31\x99\x00\x9f\x02\x8e\x35\xe9\x33\x34\xaf\xf1\xde\x85\xdc\xde\xb7\xeb\xc4\x7a\xaf\x33\x2a\x35\xd4\xa4\xfb\x04\xd8\xef\x57\x98\x98\xcd\x3b\x24\x89\x87\x11\x71\x1f\xf4\x5d\x7f\xa0\x66\x46\x57\x2c\x69\x14\x0b\xa9\x21\xe8\x4a\x53\xcc\x97\x7c\xcd\x97\x71\xc0\xeb\x79\x3d\xcc\x85\xc5\xef\xc3\x75\x0c\x98\xcf\xf8\x15\x21\x11\xcf\x30\x09\xee\x66\xa1\x08\x13\x79\x46\xdf\x4e\xb1\x68\x43\xbd\x88\xcc\x21\xa5\xa2\xb5\xba\x6f\x8a"
		"\xab\xf1\xa3\xae\x75\xfb\x32\x47\x8d\x57\x3e\x50\xf9\xd6\xf2\x4d\x90\xca\xe4\xf0\xf4\x96\x6d\x07\x16\x53\x43\x16\xfa\xd4\x7a\x8e\x8d\x89\x64\x80\x7f\x02\x10\xfe\x58\x89\x0c\x88\xd7\xb1\x8e\xac\xb2\x68\x72\xf0\xba\x03\x81\xa5\x0f\xf1\x12\xca\x98\x19\x19\x55\x9a\xb4\x82\x93\x9f\xfd\x0f\x23\xa7\x45\x3a\xe7\xca\xc2\xbb\xf1\x6a\x04\x4e\x7f\x95\x86\x90\x97\x5e\x44\x94\xf6\x91\xbb\xb9\xd4\xa1\x04\x02\x0c\xae\x73\xb6\x05\xd8\x86\xc6\x22\xbb\x29\x2e\xdb\xca\x2b\x7b\xe5\xc5\x25\x59\x13\x77\xf0\x57\x67\xa4\x99\x22\x2c"
		"\x81\xa6\x2a\x1b\x86\xc4\xa7\x93\xdd\x20\xd8\xab\x51\x5a\xb2\xe7\xf8\x7e\x6d\x97\x37\x45\x6e\x68\xd0\x55\x04\xef\x6a\xd6\x05\x95\xe8\xd6\xeb\x50\x4a\x35\x03\x25\x44\x20\x5b\xe7\xde\xf2\x94\x50\x55\xf3\x55\x15\xd3\x4a\x6e\x88\xdf\xb5\x54\xc3\xc8\xb1\xd9\xea\xb2\x92\x85\xdf\x46\x9f\x0a\xa8\x0b\xbe\x32\x16\xe5\x66\x41\x72\xc4\x08\x75\xf2\x44\x25\x13\xe2\x96\x9e\xad\xb3\x45\x4d\x02\x24\x43\x5e\x3f\x4e\x82\x4d\x9e\xbd\x2a\x1b\x70\xc6\x9e\x99\x7d\xb0\x89\x39\x01\x62\x4c\xd1\x73\x52\x3b\x3d\xf9\x91\x0f\x7a\xf3\xe1"
		"\xd4\x08\xe9\x0d\x62\x68\xc6\x17\x7b\x1b\x1f\x4c\x29\xe3\x85\x2a\x41\x32\x8c\x61\x85\x90\xec\x15\x04\x06\xfe\xda\x57\x06\xd2\xc9\x4a\x48\xa3\x63\x30\xb6\x02\x84\xa8\x5f\x36\xea\x1c\x1d\x28\x7c\x50\xff\xe8\x27\xa2\x35\xac\x69\x5c\x01\xd5\xcf\x5c\x07\x07\x82\xd4\x76\xe5\xc3\x02\x16\xed\x78\x18\xa8\xff\x23\xdb\xa9\xb5\xd4\xcc\x04\x17\x79\x6b\xc7\xf2\x55\x3b\x98\xc5\x04\xfd\x34\xaa\xcf\x4c\xfc\xf6\x4a\x1a\x4b\x7b\x04\x0b\x8d\xb8\xd9\x60\xb8\xe5\x06\xb6\xe7\x5b\x12\xaa\xb5\xce\x9f\x70\x2c\xac\xa5\x05\x10\x96\x8e"
		"\x2c\xd7\xd1\x03\x7e\x8c\xe9\x6c\x1b\xf2\x0e\xa1\x7a\x9e\x66\x78\x2e\xb7\x0d\xac\x86\xea\xdb\xfc\x0b\xaa\x71\x51\x56\x9f\xdd\xbc\x76\xfa\x85\x98\xfb\x82\x05\x94\x93\x6d\x4a\xf4\xd0\x03\x01\xf1\x8c\x4d\x8f\xbb\x53\x90\x2a\xd3\xd9\xd2\xe3\xa8\x95\x36\xd8\x6e\xd6\x0b\x9e\x80\x7c\x2a\xbc\xe6\x16\x8f\x26\x49\x0a\x75\xfc\xb6\x49\xb1\x0c\x0f\x82\x37\x40\x44\xf5\x15\x09\x5a\x87\x26\xa0\xf8\x1a\x67\x2d\x64\x60\x56\x7a\x32\xb1\x64\x31\xb4\xcf\x4b\x7c\xaa\x58\xcd\xd5\x2a\xea\xf7\xb1\x51\xf3\xb4\x89\xf4\x8a\xf1\xf0\x36"
		"\x01\x14\xbb\xc6\x45\xea\xb8\xd2\x08\xf7\x09\xdf\x5f\xd8\x47\x90\xb8\xf7\xfa\xe5\xce\x04\x33\x54\xd2\xc9\x28\x38\x4a\x79\xd1\xde\x2b\x24\xf4\xf0\x2a\x88\x1b\xb3\x80\x6e\x60\x68\x18\xc6\xe6\x4f\x26\x92\xc1\xd0\x1e\x0b\x7a\x0d\xca\x4f\x24\xee\x5b\xeb\x7e\xbe\x92\xb1\x26\x6e\xd7\x16\x15\xc2\x03\x70\x91\x56\x64\x09\xc3\x3d\x3a\x1f\x92\xf5\xee\xd3\x0c\x1e\xdf\x78\xc8\x25\x40\x0b\x59\x19\xfa\x2a\xa1\x2b\xe7\x3b\x38\xb4\xb0\x16\x47\xf6\x4d\x17\x27\xf6\x32\x6c\x94\x76\x6e\x23\x8b\x4a\x1a\x6d\xd3\x6a\x88\x5c\x48\xf9"
		"\x6a\xce\xc9\xc3\x90\x40\x39\x5e\xf8\x6e\x5b\x31\xb9\xd6\xca\xb0\x00\xc1\xe6\xbd\x76\x5c\x94\xe9\x1b\xc8\x9f\x87\x74\x5b\x1c\x89\x8d\x14\x92\x87\xad\xff\x11\x50\x28\x39\x1e\xf0\xac\xf9\x1b\x9b\x49\xea\x03\xa3\x3c\x0f\x6b\x75\x5a\x67\x1f\xca\x65\xa5\x0b\x91\xdb\xe6\x61\x94\xd0\xc9\x17\xc8\xa8\xab\x3f\xce\xf1\x3c\xdd\x7c\x73\x34\xe7\x30\x96\x3e\x0a\xe7\xff\xa9\xbf\xae\x5f\x05\x36\x18\xce\x06\x50\x5e\x22\x5a\xb4\x8f\xda\xff\xb9\x71\x54\xd9\x77\x06\x90\x6e\xa3\x5f\xa4\x7c\x35\x4d\x09\x01\xea\x7c\xe9\x8a\x36\x87"
		"\xde\x7c\x7e\x53\x2b\xf4\xa7\xbf\x16\xf2\xfb\xf5\x33\x79\x74\xd4\x32\x79\x0c\xf5\x0d\x0b\x0d\x84\xbb\x69\xbd\x5f\x20\x72\x19\x24\x7a\x47\x60\x09\x3a\x28\x5a\xa1\x37\xa9\x77\xac\xe1\xef\x89\x1f\xbb\x18\x2c\xe4\x57\xec\xdb\x8c\xa2\x4f\x06\x49\x42\xbf\x84\x76\xcf\x66\xc7\x6b\x5d\xef\xd9\xab\x9e\xf6\x79\x8e\xb4\xc8\x84\x13\x2b\x22\x5e\xf2\x01\xb2\xb9\x9f\x32\x4e\x33\x8b\xdd\x49\x0f\xbf\x82\x53\xef\xb7\xf9\x83\x04\xdb\x4a\x04\x1b\xfc\x85\x1e\x74\x6c\x10\xd5\x3f\xfa\x8c\x15\x36\x95\xc4\xc0\x11\x23\x48\x05\x60\xb9"
		"\x04\xf1\x61\x6a\x42\x74\xa4\x9a\xc4\x0e\x91\x45\x7f\x3b\x87\x19\x38\x17\x8a\x13\xcd\xb1\xb4\x4a\xeb\x21\x27\xe6\xda\x37\x4d\xcd\x9a\xb8\xf1\x48\x20\x0a\x66\xb1\x9e\xe4\x19\x1c\x31\x97\xb9\xaa\x8c\x45\xdb\x9d\x74\x09\xc9\x3b\x74\xef\x19\xcc\x60\x2a\x1d\x89\x01\x99\x4a\x8f\xb6\x45\x55\x8b\xc3\xb9\x38\xbf\x8f\xd5\x8d\xe0\xb6\x40\xb0\x7a\xec\xcb\x40\x07\xf2\x6b\x44\xc2\x19\x6d\x04\x51\x0d\xe1\x67\xa5\x18\x2d\xd4\x4b\x18\xaa\x39\x2f\x82\x5b\xd4\x8e\x92\xa6\x20\xe0\xaf\xb2\xec\xf2\x41\x92\xed\x66\x04\xbc\x3b\xf0"
		"\xca\xbc\xd0\xe6\x1a\x30\x88\x5b\xb0\xa4\xa8\xc1\xd8\x5f\x03\xed\x69\xf2\x2d\x19\x96\x75\xe4\x7e\x34\xfe\xc8\xea\x62\xaf\xea\x2d\xa2\x89\xee\xad\x53\xc5\x23\x6d\x54\xef\x05\x92\xdd\xad\x5c\x80\x94\x65\x6b\x7c\xca\x7b\xac\x4f\x81\x4f\xb2\x27\x82\xc5\x70\x1f\x11\x15\xd2\x52\xda\x44\xa6\x1b\x29\xd8\x78\x65\xe1\x8f\x02\x7b\x72\x5a\x20\x8a\x7d\x00\x01\x61\xa4\xc7\x6d\x32\x94\x4b\x86\xb8\x1a\x33\xda\xaf\x14\x2a\xd7\xb0\x99\x2a\x48\x53\xb6\x7e\x21\x56\xa9\x51\xc3\x85\x4c\x66\x98\x2d\x4e\x20\x93\xae\x4e\x00\xd7\x1f"
		"\x5e\xbf\x55\x7a\x65\x6b\x9d\xc2\x9d\xf9\x13\x1f\x55\x58\x75\xa9\x78\x79\xdc\xd3\x8d\x05\x1e\x39\xb0\xb5\x91\x02\xc9\x10\x2e\xae\x63\x09\x4a\xdc\x50\x68\x40\xc5\x57\xae\xf3\x46\x82\x5f\x59\xc5\xe3\x52\xb0\xfe\x37\x13\xa6\x5e\x8b\x4c\x64\x9b\xb8\x5f\x80\x86\xec\x0d\x8c\xc8\x53\xa6\x4a\x73\x21\x13\x73\x6d\xe3\xe7\x6f\x00\x55\xd5\x46\x96\x24\x5f\x1b\xab\x9f\xaa\xed\x02\xae\x91\xe5\xc5\x4f\xf0\x76\x17\x53\x3e\x11\x13\xf1\xf8\x32\x1a\x48\x8c\x04\x18\x72\x34\x80\x69\xdb\x49\xd9\xe3\x25\x95\xc2\x9f\xb0\x00\x3d\xdf"
		"\xd3\xdc\xb6\x06\x7e\xbd\xad\x9c\xfb\x4f\xef\x5b\x2c\xe4\xe4\xcd\x9e\xc2\xfc\x4a\x1a\x17\x82\x04\x75\xf1\x25\x41\x1c\x23\x67\xd0\x20\x91\x6b\x1f\x70\xd9\x7c\x00\x00\x36\x62\x34\xec\x48\x59\x71\x0b\x4c\x45\xe5\xbb\xa9\xca\xec\xe6\xff\x58\x28\x2a\xc4\xa5\x29\xb9\x17\x65\x20\x9e\x15\x51\xe2\x8b\x3a\x67\xc4\x33\xeb\x42\x53\xca\xd6\xba\xac\xdd\xde\x3a\x3e\x74\xe4\x10\xce\x5c\x18\x75\x84\x2d\x04\xc9\xa6\x84\xd5\x93\x39\x8a\xb6\x10\xe4\x3e\xc4\x15\x03\x59\x2a\x27\x40\x15\x2c\x81\x62\x42\xd1\x85\xa1\xa7\x57\x94\x0d"
		"\x7f\x7b\xbd\x46\x5f\x22\x1a\x18\x09\x14\x57\x88\x3c\xd2\x3e\xd7\x31\x46\xe3\x70\x08\x99\x2a\x92\xcf\x9f\x64\xd0\xcc\x64\xbb\x56\x22\x0f\x5c\x0c\xb2\x3e\x6e\xb8\xa2\x29\xe9\x22\x71\x77\xc7\x28\x99\x05\x63\xf6\xec\x37\x0f\x40\xcf\x97\x2a\x64\x87\xb0\x80\x3e\xf9\x4e\xe2\x7e\x17\xcd\x8c\xe2\x9a\x1f\x3b\x3b\x9a\x5e\xa1\x3f\x07\xfb\x40\xbf\xbb\xc2\xd5\xce\x9a\x74\xa1\xb7\x5c\xd1\x52\xe3\xda\xcd\x4a\x16\x6f\xcc\x7d\x49\xc8\xb4\x6b\x8c\x59\xd7\x9f\x40\x69\x73\xdd\x23\x21\x4e\xc0\xc5\x49\x78\xba\x8d\xbf\x7b\x9f\xcb"
		"\x1d\x7b\x91\x16\x9c\xf6\x8f\x2b\x6c\x59\xaa\x0e\xe5\x31\xe1\x87\xd6\x60\x2f\xc0\x8f\x9d\x44\x34\xa5\x14\xe1\x08\xc8\x8e\x20\x1e\xa3\xd2\x7a\xc7\x38\xcb\x49\xca\xfc\x05\x2b\xb2\x9e\x80\x7e\x56\xea\xf7\xc1\xc1\x48\x69\xc3\xe1\xfe\x68\xf7\x8d\x34\x50\x4d\x93\x08\x4f\x32\x3a\xc9\x77\xee\xaf\xee\xcc\xc1\xc4\x7c\x8e\x74\x25\x02\xf5\x12\xea\x6b\x12\x01\xa9\x51\xa6\xec\x3c\x1f\xd7\x47\x20\xd2\x51\x77\xff\xca\xf5\xf5\xe3\x41\x77\xe6\x5d\x02\x8c\x46\xed\xa1\xfb\xc3\xaa\x0d\x25\x81\x9d\xe4\x56\xb5\x9c\xfb\xdf\x15\xac"
		"\xdf\xcc\xb6\x24\x4e\x5c\xbd\xf2\x85\xad\xbc\xd6\x6b\x48\x28\x9a\xfe\x6a\xbf\x47\xed\xc3\x2b\x84\xfd\xd2\xe2\xbf\xa4\xe2\xd6\x08\x8d\xf6\x33\xcf\xf3\xe3\x03\x59\x1c\xa1\xcd\x54\x18\xe7\x79\x57\xbf\xb8\xa4\xcb\xbc\x5c\x3c\xb6\xd8\x2f\x0f\x08\x49\x5b\xd9\x9d\x3a\xbd\xc8\xbf\x1c\x39\x05\xba\x3d\x26\xe6\x13\xa4\xfe\xaf\xd7\x1a\xf4\xc5\xd7\xc9\xbc\xe2\x3f\x4c\xb1\xf3\xb4\xba\xad\xb8\x73\xb0\x8e\x96\x25\xb4\x03\xf1\x7d\xcd\x93\x0f\xb5\x1a\x5b\x83\x4d\x9b\xc6\xf3\x2f\xa7\xba\xd3\x1a\x37\x2d\xeb\x56\xb3\x9f\xd0\x54"
		"\x8e\x6f\xfc\xdb\xb0\x79\xa6\x90\x28\xae\x6a\x19\x92\xce\xec\x1c\xc7\xf8\x7e\x31\xf2\x01\xe4\x90\x46\x43\xa0\xfc\xe4\xcb\xde\x3c\x24\x29\x98\x67\xba\x88\x33\xb1\x67\x94\xa9\xb8\xd1\xf2\x61\xf0\x2a\xd0\x62\x41\x27\xc6\x80\x0a\x41\x7a\x8f\xcc\x3c\x8f\xc3\x32\x4f\xde\x64\x3d\x9c\xad\x89\x38\x8e\xea\xbf\x61\xbc\x9e\x63\xfb\x80\xbd\x9e\xc3\x9c\xff\x2a\x42\x1c\x91\x27\xcb\xdb\xe2\x0d\xd8\x57\xe6\xbe\xf4\xf3\x2c\xf7\x02\x75\x9b\x55\x7b\x6b\x14\x57\xd5\xa1\xc3\xf0\x05\x22\x64\x24\xb6\x9b\x5f\xbb\x5b\x6a\x57\x5a\x2c"
		"\xe4\x2c\xb3\xb8\x52\xe3\xab\xe2\xed\x30\xb2\x16\xc6\x20\x25\x21\xcd\x9a\x39\xf2\xfd\xbd\x8d\xfe\xea\x30\x2c\x45\xba\xe2\xe1\x63\xc4\xcf\x71\x13\x8f\x56\xd8\x17\x8c\xbf\x68\xc9\x53\xfa\x2d\x37\xf9\xe9\xae\x91\x7f\xba\xdd\x06\x2a\xe7\x06\x4e\x67\x22\x6e\x5f\x1b\x87\x10\xd9\xb3\xae\x53\x82\xf0\x4b\xf7\x62\xc0\x62\xac\x93\xc1\x90\x5a\x64\x5e\x28\x11\x51\x77\x76\xd4\x64\x57\x3a\xeb\xac\xe8\xdb\x52\x41\x0c\x3d\x42\x4a\xe5\xcc\xfb\x43\x07\x36\x04\x23\x65\xf7\xa2\xd1\x3d\xd2\x2d\x5c\x40\x91\x7c\x79\xf5\x1e\xe1\x35"
		"\xca\x70\x74\x43\x99\xdb\x48\xc5\x67\xd1\xba\x6d\x1d\x2d\x41\x1e\x6a\x2e\xbc\x4d\x34\x35\x9b\x05\xed\x37\x4a\xa2\x9c\xba\xb8\xa2\x2d\x1f\x58\xad\xbe\x76\xde\x52\x7f\x63\x49\xda\x3a\x4a\xae\x40\x3d\x99\xea\x7b\x38\x72\x74\xb8\xb6\x64\xae\x0c\xb6\xf7\x3b\x24\x0f\xa5\x0d\x0b\x51\x4a\xc1\x76\x46\x26\x93\xc7\xb9\x8c\x3d\x2a\x2e\xdb\xdf\x83\x95\x96\x24\x5a\x90\xbe\x6a\x34\xda\xa1\x40\x56\x8e\x42\x07\x0d\x3d\x47\xb0\xdb\x9b\x13\xa3\x8b\x41\x38\xc1\xff\xe5\x4d\x31\x9c\x7c\xab\x99\x9c\xa6\x7d\x28\x0c\xfe\x67\x2a\x1d"
		"\x44\x8b\x4c\xa7\x93\xe6\x29\x24\x17\xbb\xa4\x9d\x03\x9d\x70\xaf\xa3\x03\xb1\x9b\xad\xc5\xdf\x45\x43\x27\xd9\x76\x81\x75\x70\x94\x68\xdc\x83\x4a\x5c\x57\x45\xae\x5a\xd4\x2c\xa5\xc6\x74\x25\xa3\xe1\xe1\x75\x81\x10\x29\x71\x1f\x0f\x81\xed\x81\x65\x94\xcd\x72\x46\x42\xbc\xff\x2b\x31\x5c\xa3\xc4\x55\x2d\x32\xfd\x0a\x23\x2f\x4a\x03\x5e\xc8\xab\xbf\xc9\x3d\xfd\x49\x3b\xe1\x58\x46\xc0\x0f\x97\x11\x13\x95\xef\x5b\x58\xed\x37\xe8\x58\x31\x28\x27\x8b\x04\xe7\x4b\xd6\x6a\x33\xb6\x59\x5c\xb2\x17\xef\x9f\x43\x1c\xdb\x19"
		"\x25\x26\xd4\x39\x06\x15\xd3\x3c\x80\x68\x7b\xcb\xb8\x85\xfa\x27\xda\x5b\x05\x65\x7a\x18\x48\x18\xf6\x25\x9d\x2b\x84\x12\xd9\xce\x60\xd8\xea\xca\x3f\xaf\x1c\x0a\x0f\x0e\x15\x1e\x28\xd6\xcc\x04\x35\xc1\x2f\x9d\x99\x30\xbd\x92\x05\x48\x4e\xec\xb4\x10\x5b\xe0\xb4\xfd\x7c\x07\x73\xdd\x73\x8b\x0b\xa2\x12\x24\xcd\x1f\x1d\x9e\x79\x93\x9c\x47\x97\xda\x7e\xed\x53\x43\x44\x2b\xb0\xff\x11\x2e\x75\xdf\x6e\x8a\x35\x8a\xf3\x33\xc2\x9f\x88\xbf\x3f\x73\x3a\xeb\xfa\x76\x48\x94\xd2\x56\xab\x24\xd1\x83\x3e\x9b\x7f\xb9\xb2\x76"
		"\xc8\x1f\x5f\x8a\xf2\x7d\x69\xb4\x52\x7b\x11\x2f\x9d\x4e\x2d\xdb\x67\xfd\x26\xa9\xa2\x7c\xa8\xfe\x7d\x2a\x73\xf7\xee\x2a\x55\xea\xf5\xe8\x7b\x33\x26\xe1\x0b\xfa\x69\x39\x05\xb1\xef\x1e\xa9\x16\xbc\x9d\xa8\xdd\x35\x2a\x78\xad\x83\x03\xf1\x31\x04\xcb\x58\xbb\x9c\x7b\x13\x6e\xe3\x8e\x92\x79\x7d\x33\x86\xcd\x92\x36\x34\x59\x66\x94\x4a\x91\x54\x7b\xa2\x06\x51\xa7\x6d\xb3\x60\xe9\x1c\xf7\xfc\x01\x1d\x86\xd9\x92\xff\x94\x06\x6f\xe2\xb1\xcc\xf3\x95\x26\x78\x9c\x48\x99\x9d\x2f\x35\x36\xc9\x67\x6d\x16\x89\x62\x1d\x36"
		"\x4e\x0a\xa7\x09\x5a\x76\x34\xfd\xb0\x7f\x64\xe1\x6b\x5f\xe8\x65\x59\x07\x63\xa1\x58\x27\xe1\x2c\x2b\x23\xe4\xbd\x42\x28\x7f\xb8\x3a\xfc\xe9\x3f\x64\x3d\xe0\x1f\x3e\x81\xf2\x21\xc5\x2c\x53\xb2\xf3\x00\x97\xab\x68\xeb\x9c\x34\x28\x6f\xbf\x1b\xf0\x0e\x81\x40\xc7\x73\x5d\x32\xd2\xc2\x32\x34\xcc\xa5\x61\xf7\x1b\xfb\x9f\xe7\x14\xbb\x6a\xf0\xcc\xfb\x69\xa4\x7f\x11\x24\x18\xce\xdf\xa6\x10\x60\x7a\x6e\x92\xd7\x08\x36\x16\x34\x6e\x88\xb4\x25\x2b\x6b\x70\x7f\x59\x33\xc4\xbb\x75\xe8\xae\x81\x6a\x76\xa5\x32\xa1\xaf\x44"
		"\xf6\x04\x8f\x46\x75\x2e\xa5\xf4\xd4\x95\xf1\x0d\xe6\xe4\xd6\x68\xd7\x80\xb9\x24\x09\xbc\x13\x46\x5a\x9f\x0a\x37\x5a\xda\x01\xe5\x12\x8a\x97\x60\x83\x31\x07\x98\xd7\x23\xf3\x4e\x6c\xf8\x6d\x46\x79\xb8\xa7\x17\xed\xf8\x61\xa1\x68\xcc\x9c\xf4\xbc\x4e\x78\x42\xa3\x6d\x73\xb3\x60\xb5\x23\xf7\x60\x94\x35\xf9\xbd\x11\xc0\x3a\x0b\x75\x03\x7a\xbf\x22\x3f\xf3\x57\xf3\x7f\xe1\xea\xf7\xd7\x4c\x45\xf2\xe4\x1e\xf6\x6d\x9c\x7e\x3d\x04\xb4\x9e\x02\x99\xf8\x54\x2c\x1f\x53\xdd\x3b\xa7\x08\x89\x14\x70\x5a\xeb\x2b\x08\xc6\x56"
		"\x7b\x0f\x3a\xd4\x39\xe5\xc1\x45\xc6\x9e\x34\x27\x0f\xf7\xfe\xe0\xf8\x71\x2b\xbf\x13\xee\x35\x28\x1a\xac\x63\xec\x59\xb8\xec\xff\xcf\xfa\x0e\x7b\x65\x5a\x5f\xad\x13\x88\xda\x57\xbd\xf7\xc5\x24\x5e\x28\x57\xc4\x8e\x2b\x42\xb3\xc5\x68\xdb\xf8\x65\xc3\xef\xd4\xdc\x12\x57\x82\x03\xa3\xb7\x25\x51\x65\xb6\xee\xbc\x80\x24\xa3\x8a\x37\x7d\xb4\xa8\xd4\x3a\xc8\x6d\x7a\xfc\xaf\x3b\x2d\x39\x19\xeb\x32\xcd\xc5\xa8\x5e\x9c\xd3\x00\xcf\x73\xbb\x84\xc6\x00\x1b\xcf\xc0\x52\xa9\x11\xab\x5a\xc1\x5a\x22\xd1\x25\x40\x3d\x63\x19"
		"\xc3\xe4\x0f\x6c\x0d\x96\x82\x9a\xa6\xf5\x85\xc4\x93\xdf\x8f\xfa\xed\x57\x3b\xd6\xde\x23\x7a\x56\x3f\x0b\xb2\x3b\xf3\x41\x8e\xcf\x8f\xb1\x65\xe2\x9e\x77\x9c\x32\x0d\x8b\x6e\x06\x3e\x74\x27\xa6\x1b\x8a\x71\x7f\x9a\x87\x3b\x3e\xee\x85\x88\x99\xae\xa8\x55\xa5\x1a\xbd\x26\x59\xee\x75\xb6\x7e\xdd\x73\x3d\x67\x98\x3e\xa6\xe7\x3a\x24\x23\x4c\xa7\xa9\x1c\xb8\x7d\xfb\xee\x6e\xda\x54\x5a\x6b\xcc\x45\x99\x93\x79\xaa\xdb\xa4\x3d\x9d\x26\x43\x83\xfd\xba\x2c\x29\x14\xbc\xd9\x58\xf8\xd8\x93\x1a\x3e\x06\x29\x7d\xba\x41\x18"
		"\xd8\xe0\x8b\xbf\xd7\xb9\x8d\x40\x51\x7d\x74\x96\x54\x62\xa0\xe7\xc0\xd2\x6d\x5e\x31\x96\x96\x81\xf9\x8b\x58\x91\xf0\xdd\x15\x4e\xd9\xc9\x2f\x30\xc0\x5e\x2c\xf6\x92\x80\x16\xc1\x84\x7b\xa9\x9e\x32\xc3\x09\x3c\x72\xd1\xcf\x89\x97\xe1\x36\x79\x58\x0f\x43\x44\xde\xe7\x6a\xf1\x52\x0d\x2b\x47\xfe\x17\x24\x7a\xc4\x6f\x36\xe9\x13\xbd\x76\x85\xc8\xde\x6f\x2b\xaf\x7b\xfe\x5c\xe6\xd6\xd5\x30\xbe\x1b\xb6\x9f\x25\x86\x56\xec\xd0\xa6\x0e\xaf\xdc\xa0\x14\x8b\x15\x1f\xed\x71\xbf\x6a\x74\xec\x20\xa6\xac\xd0\x53\x08\xc0\x9a"
		"\x68\xa8\xd6\x77\xae\x8d\x1c\x38\xd3\xc8\x72\x90\xc3\x08\x80\x20\xbd\xe5\x57\x19\x04\x9b\xae\xc9\x9a\xab\xe5\x98\x71\x53\x74\x1e\x22\x35\xe8\x14\xfb\x4a\xce\x1a\x82\xdd\x74\x73\x85\x60\xc0\x3b\x1a\xf3\x54\x09\x83\x97\x1d\xe9\x76\xfe\xb7\xb5\x14\xf9\xc2\x73\xc5\x84\xff\xfb\x42\x72\xfa\xa2\x98\x8a\xa6\x6b\xc4\xc0\xc1\x9a\xfd\xef\x59\x19\xd8\x02\xf8\x52\x48\x95\x82\x06\x74\x4e\x32\x7f\x71\xb3\x55\x76\xd4\x90\xa5\x18\xf7\xa1\x92\xa4\x08\x4e\xce\x7d\xa2\xa9\xa3\x8f\x6e\xb9\x1c\x41\x38\x8f\x99\x4e\x1a\x9a\x8e\xb9"
		"\x0f\x83\x2f\xcf\x8e\x9f\x85\x5f\x19\xf5\x65\xcb\xf0\x5e\x03\x58\x3d\x77\xac\xc1\xed\x45\xd8\x8e\x5f\x94\x1b\x70\x51\x31\x30\xfe\x9b\x16\x4d\x40\xdf\xc0\x9c\xe5\x45\x0e\xaa\x45\xdf\xb6\x51\xcd\x89\x0f\x61\x2f\x7e\xc6\x1d\x04\xa8\xa8\x71\x16\xb1\xda\x7d\x44\x99\x34\x5d\x94\xd9\x3e\xc3\x0f\x29\x00\x2b\x29\xed\x00\xf6\x7c\xf9\x35\x45\xa3\xfa\xbc\xc9\x8e\xc3\xa6\x52\xc3\x1a\x81\x9b\x19\x55\x17\xcc\x8c\x3a\x6d\x55\x11\xb4\x90\x3a\x67\x98\xd8\xa2\xe7\x82\x84\x69\x80\x8c\x1d\x85\x57\x94\xe1\x5c\x8e\x48\x0f\x3a\xc2"
		"\x93\xe8\x00\x67\xdd\xc9\x77\xe9\x67\xfc\x32\x1b\x17\x3f\x3e\x88\x65\x33\x59\x1a\xb9\x97\x0d\x94\x64\xbd\x6f\x1a\x49\x3b\x02\x6e\x6c\xec\xeb\x95\x91\x81\x2c\x0c\xc5\xeb\xd2\x44\x2a\x2d\x93\xe6\xab\xe8\xc2\x56\x1b\x6f\x55\x6a\x51\x60\xf7\x68\x4c\x45\x08\xe5\xe8\x5c\x90\x81\xf8\x52\xe2\xfb\x99\x2e\x28\x7d\x62\xad\xdf\x7a\x7a\x33\x01\xf4\x38\xb8\xb7\x30\x86\xa6\x3b\x95\x64\x6c\x17\x0e\xba\xe2\xff\xa6\xa2\xef\x87\x72\x75\xb2\x27\xc8\x13\xd3\x9e\x85\x66\xcd\xc0\x9c\xa6\xf9\x16\xe1\x11\x75\xed\x91\xd8\x08\xbf\xf6"
		"\x68\xb1\x0a\xa3\x22\xaf\x7a\x74\xaa\xd9\xed\x0a\xdd\xc7\xff\xcc\x58\x53\xfc\x71\x13\xe6\xc5\x99\x79\x51\xf6\xb8\x9a\x9e\x45\xdc\xc8\x43\x1b\x12\xce\x24\x18\x49\x79\xc3\x2f\x14\xba\x89\xa1\xc6\xc6\xfc\x8e\xd1\x8b\x75\xc6\x7c\xda\x57\x9a\xfb\xf3\x6f\x5b\xb9\xba\x08\xb4\x64\x03\xd7\x2e\xb8\x3b\x80\x79\xbc\x96\xa0\x33\xdf\x4d\x59\x8c\x70\xb5\xd1\x24\x2e\x86\x6a\xc2\xe8\x84\x93\x64\xc7\x1c\x0a\xc2\x8f\xae\x66\x28\x8d\xa1\x72\xe2\xf2\x72\xd8\x92\xdf\xc1\x30\xc5\x23\x10\xc9\x05\x67\x8d\xd6\x5c\x7c\xeb\xff\x65\xb2"
		"\x72\x33\x16\x31\x84\xfe\x5c\xac\x1e\x72\x1d\xde\x46\xc2\x89\x4a\xf0\xfc\x11\xba\x72\x78\xd1\x20\x80\x65\x21\x22\xf0\xe2\x4b\xeb\x6f\x7a\x94\xa4\xb0\xe7\x2d\x88\x0f\x88\x4c\x15\x6b\x01\x55\xc1\x6a\x23\x1a\xbd\x06\x6d\x9e\xd9\xcc\x15\x2a\x37\x0a\x2a\x6b\x8f\xf7\x03\x38\xd6\xcc\xc9\xd4\x13\x1e\x58\xe6\x35\x3a\x54\xb0\x21\x5a\x93\x47\x33\xdc\xf0\xa5\xb6\xd1\x09\x8c\xfe\x8d\xa0\x49\xca\x32\x3f\x0b\xdb\xb5\x2c\xfa\x71\x7f\xc7\x60\x5b\x4f\x3e\xc8\xe1\xf3\x8d\x36\x81\xe4\x4f\x63\x22\x2b\xf9\x30\x1b\x11\xe0\x4f\x7e"
		"\x66\x34\x6e\x47\xf6\xf6\xf4\x38\xf9\xc5\x25\x13\x72\xe3\x22\x02\x1e\xe4\x1a\xf7\x59\xec\x31\x52\x13\x66\x4f\xa6\x59\x67\xac\x51\xaa\x1e\x2e\xa9\x21\x68\xcf\x18\xea\x8e\x07\x6d\xea\x3f\x8f\x6d\xab\xf0\x2d\x2a\x24\x8c\xfb\x84\xbb\xd0\x18\x1d\x3c\xbf\x75\xeb\x11\x12\x65\x86\xfd\x6b\x58\xe7\x61\xf9\x0b\x68\x95\x2e\xb2\x6f\x56\x22\xea\x93\xf8\xef\x13\xee\xb7\x04\x18\xde\x58\x8a\xc7\x32\xcf\xef\xed\x01\x82\x72\xcb\x16\x5b\xe1\x9d\x4b\x8b\xb4\xa4\x10\xc7\x5c\xc4\x32\x5a\xd2\x0c\x0e\x83\x69\xf2\x40\xdd\xdd\xe9\xde"
		"\x92\xc0\xfd\x85\x75\x02\xa4\xcc\x77\xe0\xb1\x6f\xe5\x22\xde\x4f\xc1\x4e\x5c\x9a\x2e\xd2\x3f\x37\x52\xf2\xf4\x93\xe7\x97\x5a\x35\x62\x11\xa2\x33\x10\xb0\x2d\xdf\x46\x38\x77\xed\xad\xff\xad\x43\x5d\x75\x93\xe1\x1c\x0a\x52\x83\x79\xcd\x8e\xa4\xfe\x0c\xa8\xcb\x3a\xe0\xae\x74\x04\x6c\x5c\x91\x97\x4e\xfa\x73\xbd\xe1\xe5\x9a\x98\x84\x86\xe4\x9d\x96\x44\x12\x8d\xe3\xbb\x01\x23\x7c\x51\x6d\xe2\x69\x3d\x71\x33\x62\xb4\xd0\xfe\xe3\x48\xa9\x37\x77\xe7\x31\x5b\x7d\x8f\x9b\x56\x2c\x70\x8d\x77\x45\xda\x70\xd1\xc3\x9d\x6b"
		"\xca\x82\x2c\x7e\x1d\xe2\xe0\x39\xeb\x81\xae\x65\xb0\xa0\x46\xaf\x0f\x19\xeb\x13\xbc\x26\x2f\x67\x06\x28\xd1\xdb\xa9\x07\x78\x68\xc2\x1b\xa2\xa6\x1b\x38\x3b\x4b\x1f\x66\x34\x38\x67\x64\x8f\xed\x8f\x33\x9e\xb1\x93\x9c\xe4\x96\x71\x5d\x26\xf4\x9e\x14\x31\x63\x9c\x9b\x72\xbf\x72\x5d\x73\xee\xd4\xa0\x60\x1a\x82\xf8\x1a\xfc\xd2\x43\x02\xd3\xdc\x91\x9a\x48\x12\x95\x89\xad\xda\x5e\xd2\x3a\x7e\x8a\x31\xa3\xcb\x5b\x3b\x3e\x68\x9b\x84\xe8\xf0\x37\xe8\x49\xe1\xce\xb5\xc3\x15\x54\xbe\xf5\xd1\x61\x90\x9c\xa9\x5b\x26\x47"
		"\x17\xd8\x99\xd6\x27\xb4\x33\xc8\xd2\xcb\x72\x0f\xbb\x31\x2b\x5c\xc6\x68\x13\x99\x1a\x60\x7d\xae\x01\xdd\xa6\x13\xd3\x5d\x4b\x44\x21\x38\x0e\xa6\x48\x4d\x85\x83\x27\x15\x9a\x87\x38\x95\xbf\xdf\x49\xf0\x46\xfd\xf9\x3c\x91\x02\xf8\x51\x07\x7b\x74\x9c\x29\x49\xe9\x37\xac\x64\x35\x4c\x36\x54\x14\x5a\xfc\x6a\x08\x3d\xda\x22\xd8\xde\xe2\x66\xb7\x8c\x2f\x07\x69\xc7\xab\xe5\x27\x13\x39\xc6\xa5\x3e\x09\x2a\xeb\xee\x40\x38\xb0\x91\x3d\x65\xae\x32\xba\x95\x75\x9d\x46\x45\x94\x8e\xad\x78\x60\x23\x49\x4c\x8c\x43\x28\x8f"
		"\x38\xeb\x5c\xef\x77\x48\xef\x6c\xfc\x77\x6d\x7d\x94\x01\x3b\x46\x3c\x50\x18\x1a\x0b\x5c\xe4\x18\x46\x5c\x84\xfb\x48\xb1\x3c\xdf\xc4\xf4\x0d\xba\xb7\x2e\x2a\xa7\xe0\x0d\xe9\x49\xc5\xf2\xcc\xb3\x21\x06\x8f\xc0\xba\xa7\xf6\x62\xa4\xd4\xc2\x61\xb2\xc0\x17\x67\x7e\xca\x03\x38\xaf\x43\x02\x5e\x8d\xfe\xfb\x1f\x8b\xfa\xb4\xb7\xa5\x71\xe9\x90\x7c\xf1\x33\x12\xae\x9d\x5d\x9c\x7f\x6f\x1d\xb6\x57\xc6\xfc\x1d\xf6\xca\x46\xcf\x3d\x43\x9d\xc3\xef\x9b\x80\xfd\x69\x00\x50\xd7\x6c\x02\x0e\xf3\x79\x5b\x26\x41\x62\xaa\xdc\x40"
		"\x3c\x8c\xe0\x58\x57\x4d\xa1\x78\x0c\x9d\x6a\x51\x47\x27\xb3\xbb\x74\xc8\xac\xf8\xe2\xf9\x49\x24\x43\xad\x94\xe1\xd1\x6e\x10\x5d\x8c\x22\x78\x1b\x3b\x3c\x15\x7a\x28\x1c\x8f\x10\x30\x1b\x0a\xe3\x57\xbd\x46\x68\x34\xca\xba\x91\xdc\x5f\xd2\xdb\xd9\xa5\x13\xd8\xc5\xe5\x97\xf9\xe9\x66\x24\xae\x87\x9f\xa1\x11\xd9\x66\x52\x2e\x28\x85\xb3\x4a\x40\xa3\x44\x60\x64\x7d\x27\x6a\xf0\xe1\xca\xe1\xa6\xb7\xda\xb4\x91\xcf\x77\x7e\x90\x1d\x6d\x97\x2a\x7c\x26\x1d\x4e\x41\x81\x2b\x46\x2e\x78\x6a\x36\x88\xac\x0f\x7d\x0a\x55\x8a"
		"\x0c\xe3\xaa\x0d\xc2\x1b\xd2\xc2\xac\xfe\xb7\x72\x1d\x00\x45\xd4\x36\xb1\x10\xd3\xba\xa3\x93\x51\x5c\x94\x36\x9d\x8d\x72\x24\xf3\x8a\x3a\x75\x6b\x88\x8e\xf7\x06\x06\xad\x1a\x0a\xe7\xea\xcd\x48\x0d\x02\x1c\xc6\x86\x02\xe6\x20\xda\x77\xd0\x99\x42\xbd\x20\x6e\x65\xc1\x35\x14\x67\xc7\xb5\x36\x6d\xa5\xaf\x9d\xe0\xb0\x6d\xbf\x18\x87\x51\x32\x15\x68\x4b\xf9\x8e\x56\x78\x93\x85\xcf\xa5\x6d\x50\x04\xe5\xb2\x08\x10\x64\x56\xa8\x8c\x2a\x78\x2e\x57\x00\xec\x6a\xfb\x60\x2d\x9a\x8f\xf6\xb0\x4e\x44\x80\x91\x6f\x7b\xa4\xb9"
		"\x63\x56\x6f\xe7\xde\xbc\xac\x50\x04\x37\xf7\x4b\xf8\xb6\x93\xa9\x85\xb6\x3a\x28\x8d\xad\x6c\x6d\xf1\x1c\x6a\x4d\xf0\x3b\x05\xb4\x01\x6d\x48\x92\xea\x38\xf3\xcb\x1d\xdc\x0f\x75\x54\x1a\x4c\x40\xfd\xbd\xfe\x31\x36\x60\x37\x3a\xc6\xf3\x60\x1e\x36\x6f\x8a\x74\xb0\x4b\x34\xf4\xac\xf9\xc5\xbd\x51\x45\x54\x1a\x8e\x26\x2c\x14\xe8\xb5\x87\xa1\x5f\x01\x1b\x83\x5b\x91\x82\xc7\x30\x86\xaa\x4a\x51\x41\xdf\x13\xe6\x41\xa3\xd6\x96\xa6\x86\x01\xfd\x80\x27\x8c\x92\x67\x10\x9d\x63\xdb\x8a\x07\xa6\x30\x51\x74\xb1\x33\xd7\x48"
		"\x95\x46\x1e\x14\xba\xb8\xb5\x2a\x15\xc9\x8f\xc9\x36\x89\x03\x90\xf9\x81\x6b\xd7\x5e\x81\x4b\xc2\x54\xec\xd2\x5b\x35\xa3\xeb\x24\x4e\xa0\xa8\xb3\x31\xda\xb0\xe8\xe9\xc7\x23\x15\x1b\xa8\xe1\x76\xb2\x55\xc0\x5d\xd3\xe0\xef\x3e\x33\x98\x8c\x4a\xed\xe3\x22\x8d\x1d\x66\x24\xda\xe3\x4c\x10\xf6\x3a\xd3\x47\x21\x5d\x7e\x1f\x19\xfc\x8b\xca\x19\x5b\x23\x1b\xb1\x1c\xed\x7a\x48\x12\xe6\xca\x0f\x7c\x46\xe1\x4e\x51\x23\xcc\x69\xd2\x50\x25\x84\x8f\x86\x6c\x48\xc4\x6d\xf9\x4b\xc2\x87\xf1\xf1\x8c\x08\xe0\x4f\xb9\xf3\x1f\xa6"
		"\xfb\xdf\x42\x59\xef\x5c\x8e\x42\x53\xb9\x7f\xc6\xf3\xe8\x97\x27\x32\x1a\xec\x79\xd7\x01\x53\x20\x98\x06\x8e\x85\xd3\x0c\x7e\xbe\xac\xae\x8e\xb5\xf1\x38\x24\xfe\x8b\xdd\xf2\xbd\xcc\xe7\x27\x8f\xdc\x94\x8d\x7e\x05\x0f\xce\x79\x97\x5a\xe3\x4c\x04\xc6\xb8\xaa\x21\x3d\x49\x44\x90\x30\xa0\x4b\xde\x80\xeb\xf0\xfe\x1d\x06\xa0\x23\x17\xa1\x5f\x76\xca\x7f\xd6\x65\x20\xa4\xa5\xd1\xbb\xb4\x42\xeb\xc7\xaa\x7d\xbf\x30\x84\xe3\x24\x23\x23\xaa\x51\x4e\xf4\xf6\xdb\x01\xd0\xcd\x51\xcb\xef\xeb\x95\xaa\xb4\x42\x4e\xe9\xf6\x71"
		"\x03\x50\x4c\xd1\x81\xcf\x9e\xa5\x5b\x93\xf0\x02\xe6\x8a\x35\xde\x85\xda\x62\x07\x91\x8d\x03\x84\x7f\xed\x9f\xb8\xb7\xa9\xbd\xe1\x6c\xe4\x89\x47\xa4\xfa\xa3\xd4\x97\x31\x56\xed\x5c\x2f\xbc\x9f\x95\xeb\xc3\x8b\xe5\x39\xb8\x63\x74\x06\x4b\xb4\xac\x04\xa9\xc5\xbd\x74\x59\x8d\xce\x13\x54\x0d\xe8\x9f\x9e\x6a\xaa\x8c\x88\x88\x9e\x2e\x15\xd3\x44\xb8\x6c\x91\x6e\xe1\x33\xe5\x4e\x69\x45\xae\x88\x57\x1d\x09\xa5\xf0\xc1\x2c\x1d\x00\x2e\x83\xf4\x66\x7d\xfe\x21\x79\x2f\x75\xdd\x54\x16\x62\x35\xff\x79\x42\x46\x74\x7f\xf6"
		"\x62\xfa\xa4\xc8\xa2\x4c\x59\xc1\xa3\x43\x7a\x96\x54\x2e\xa7\xe7\xcc\x6f\x06\x94\x67\x0f\x1f\xc2\x5e\xdf\xca\xaa\xcd\x0f\xa6\x57\x61\x19\x78\xc0\xf1\x65\x76\x58\x1e\x10\xbf\x71\x29\x29\x09\xd1\x2b\x19\x93\xc2\x79\xa9\xbb\xe6\xba\xf1\x7a\x43\xf3\xaf\x67\xe3\x55\x84\xca\x7e\x27\xcc\xc8\x98\x60\xbc\x39\x41\xfe\xe3\xf2\x87\x73\x92\x44\x92\xec\x15\xf1\xea\xdf\xd0\x35\x2d\x94\x1f\x05\x49\x52\x9d\x92\xd6\x6e\xb5\x23\xef\x55\xbf\xb5\x66\x49\x15\xd3\x50\x02\xa9\x64\x5b\xd5\x34\xaf\x87\x2a\xda\xc2\x4f\x23\x95\xad\x93"
		"\xcb\x5d\x06\xf7\x26\xd1\x87\x2b\xd5\x83\x4f\x8b\x73\xca\xf6\xe3\xa9\xa0\x4d\x5b\x23\x35\xb1\x54\x21\xfa\x94\x7f\xd6\x09\xb3\x74\xd6\x60\xdf\x2d\x1f\xac\x16\xf9\x70\x81\x02\xd6\x0f\x2a\x62\x64\xed\x78\x40\x97\xf1\xc2\x1d\x86\xbc\x5a\x87\xd2\x62\xf5\x96\x26\x4d\x09\x8a\x70\xd7\x79\x4b\xeb\xc0\x43\xdd\x08\xdf\xfb\x3f\xe9\x42\x64\x77\xa6\x77\xff\x82\x6f\x06\xf7\xd8\xec\x2c\xcb\x82\x4b\x67\xa3\xea\x81\xcd\xe6\x7e\xc1\xe0\xf2\x90\x83\xcd\xc8\x66\xdf\x61\x84\x16\xc1\x74\x2b\x67\xe1\x3e\xad\xbc\x0a\xc8\x02\xbb\x06"
		"\x26\xd8\xc7\x81\x54\x88\x17\x13\xe3\xc2\x2b\xed\x02\x0d\x63\xf0\xa1\x2f\x0e\x23\xc9\x12\xa8\x79\x23\x35\x5f\x4e\x0b\x47\xcf\x5c\x81\xd3\xa8\x24\x56\xcb\x0c\xe9\x39\xdd\x95\x5f\x89\xc7\x62\xc5\xb9\x0c\x3c\x1a\x39\x65\x85\xb9\x18\x31\xef\xb4\x43\x5e\x35\x5e\xc3\x40\x21\xa2\x8a\xfe\x76\x0e\x90\x10\x18\xbf\x74\x36\x74\x2d\x78\x44\x7a\xe1\x29\x64\x2a\x22\xd1\x3f\x7e\xd8\x23\x77\xf6\x1a\x9a\xc0\xce\x23\x9d\x5d\xb3\x50\x6f\x3d\xc0\xf0\xe6\x2f\x91\x82\x8b\x83\xd8\xc2\x96\x1a\x6e\xb6\x0f\x38\x8e\xfb\x6c\x38\xc8\x7c"
		"\xb0\xcf\xbe\x2f\x82\x0d\x39\x42\x25\x4a\x91\xa0\x4a\x4b\x43\xd1\x7c\x51\xbc\x77\x77\x4d\xa4\x9f\xac\x43\xd5\xfd\x0d\xdb\x26\x85\x00\xdc\x52\x9e\xb1\x69\x2e\x4e\xac\xa9\x83\x83\x49\xee\x95\x87\x87\xb3\x57\x0a\x67\x86\xe8\x7e\xda\x62\x8b\x43\x88\x8e\xa7\xeb\x14\xdb\x18\x19\x91\x28\x43\x9b\x06\x04\x03\x8b\x57\x82\x8b\x2d\x1d\x0a\xe8\xb7\xdf\x4f\xf4\x9b\x08\xaf\xfa\x32\xed\xac\x2e\x61\xb3\x4c\x2b\x81\x82\xc9\xde\x3b\x03\xbc\xf7\x9a\xf9\xec\xb9\xeb\xc5\xe1\x4a\xcf\x90\x3d\x27\x9e\xba\xbe\xa6\xcd\xe2\xae\x5e\xa8"
		"\x43\xb1\xac\xd2\x22\xd4\xf4\x15\xfe\x25\x69\xf5\xab\x77\x5b\x66\xf5\x79\x43\xb3\x9e\xf4\x79\x87\xb0\x7b\xbf\x74\x43\x9c\xdb\xeb\xaa\x95\x32\xc6\xa1\x29\x4a\x2c\xe8\x04\x4d\x6d\xed\xb5\x24\xd5\x90\x77\x49\x13\x37\x71\x2a\x9c\x05\x1b\x65\xe8\xce\x59\xad\x0e\x34\x67\x05\xa4\xa2\xa2\x99\x5d\x56\xcb\x4a\x4f\xca\xeb\x37\xfa\x81\x44\x83\x49\x42\xcb\x71\xdb\x57\x75\x02\x45\x57\x81\x43\xfc\x3e\x95\x49\xb7\x6b\x40\x7b\x85\x23\x44\x92\xbf\xc1\xe6\x41\x0f\x94\x84\x62\x4e\x49\xac\xc8\x36\x27\x18\x47\xb0\xb7\xde\x16\xf3"
		"\xff\xe3\xf3\xd3\xca\x12\xec\x27\x22\x7c\x41\x20\x89\x11\xdc\x30\x9f\x92\x3c\x5e\x90\x39\x0f\xda\xb3\xc9\x43\xa5\xcf\xbc\x72\xf4\x54\xce\x91\x81\x9b\xd3\x9e\x49\xaf\x6f\x66\x5e\xe0\xba\x4e\xb5\x6c\xe0\x18\x48\xba\xeb\xf3\x8f\xf5\xe7\x2e\x4d\x35\x5c\x44\xfb\xa9\x37\x02\x46\x11\xee\xb2\x42\x2a\xdb\x23\xf0\x86\x51\xc7\x87\x35\xe3\x52\xf4\xaa\xd8\xc9\x1a\x40\x97\xe5\xf7\xaa\x77\x18\x67\x16\xf0\xde\x1e\x3e\x79\x80\xe7\x57\xd7\x4b\x92\x8b\x94\x64\xb6\x46\xf3\x16\xbb\xf4\x0e\x89\x0f\x5d\x37\xda\x90\x6c\x3d\xba\xcb"
		"\x44\xdb\xea\x69\xa0\xdf\x0c\xe5\x93\x7a\xbb\xf8\x14\xca\xd9\x65\x3b\xcf\x87\xf3\x8a\x28\x78\xb0\xf7\x7d\xdd\xba\xee\x71\xf6\x02\x95\xdd\x19\xf7\x10\xcb\xa1\x96\x1e\x51\xf2\xfb\x93\x2b\x13\x05\x69\x92\x90\x61\x29\x2f\x67\xab\xd9\x7a\x07\x68\x8f\xa5\x00\x82\x34\x3a\xfd\x92\xdd\x08\x35\xc1\x33\x4a\x9d\x07\x00\x9d\x80\xde\xa4\x2a\x60\xf6\xf8\x8f\x14\xa7\x95\xcd\x9a\xb0\xdd\x0e\x1c\xe9\x82\xd9\x25\x73\xb9\x3f\x10\xfd\xdb\xb5\x59\x03\xed\xe0\x0d\x9e\x48\x21\xcd\x21\xf0\xee\xcd\x08\x64\xff\x6d\x1c\xb5\x54\x5a\xd7"
		"\xcd\x4a\xb3\x58\xfa\x72\xb5\xad\x95\x8c\xfd\xff\x01\x4b\x53\x1e\x70\x5f\xe2\x10\x00\xda\x6f\x5a\x99\x86\xa5\x58\xc7\x57\xb5\x57\x2d\x94\xfa\xe9\x14\x63\xd1\x79\x36\x35\x21\x4e\x53\xa4\x38\xa2\xa5\x5e\x08\x4b\x40\xb7\x34\x18\xd0\x09\xe7\x3d\xb8\x52\x40\x46\xf4\xfc\x22\xf5\x49\xb3\x22\xb4\xb4\xf7\x9b\xfd\xc1\x19\x04\xd1\xec\xf5\x25\x9c\x7e\xba\x99\xa7\x65\x54\x9d\x23\xe3\x23\xd9\xb8\xdb\x73\x80\x02\xc7\xdd\x8f\x1f\x62\xcf\x7f\x94\x9a\xff\x5f\xfa\x20\x7d\x38\x67\x79\xce\x74\x58\xf1\x66\x96\xeb\xd8\x7f\x60\x0c"
		"\xe6\x96\x74\x63\x27\xb8\x12\x2b\x71\x76\x33\x35\xfb\x58\x76\x4d\x3c\xc2\x2e\xcb\x6f\x92\x7a\x9c\xcc\xec\xa8\x30\x7e\xb3\x21\x07\x41\xa4\x5b\x0e\x31\x52\xfd\x8b\x77\x37\xba\x57\xc4\x5d\x3f\xea\x86\x5f\xdd\x8b\x4b\x1c\x43\x10\x18\xd5\x24\x7d\xe1\x7e\x4b\x41\xcc\x4d\x49\x59\xaa\x2a\x74\xc2\x5a\xd5\xf9\xa2\x66\x2a\x8e\x3e\x84\x1a\xbc\x56\xa1\x1b\x39\x44\xeb\xe5\x16\x0b\xca\xcc\xf0\x18\x6b\xb1\x3b\x36\x09\x28\xc7\x5a\xc5\x11\x54\x64\x53\xee\x74\xf0\x55\x44\x4e\x3b\xb6\xa8\x05\xf6\x71\x15\xc0\xf3\x89\x67\x12\x4e"
		"\xe1\xc7\xf9\x84\x4b\x1f\x12\x27\xc1\x8c\xa5\xf6\x79\x09\xf8\xeb\x59\xea\xc6\x59\xdb\xbe\x7d\xcd\x3c\xca\x29\xa6\x7e\x06\x01\xb3\x8e\x10\x09\x4e\xa1\xaf\xc5\x15\xc8\xfa\xff\x6b\xc9\x87\x6f\x15\x9c\x99\x2d\xf3\xb4\x9c\x26\xa3\xf6\xb4\xe3\x02\x36\x36\xf5\xc2\xe4\x1d\x89\x59\x99\x13\x53\x07\x65\x8f\x90\x1f\xaa\x54\x8b\xe1\x96\x75\xf1\x17\xdd\x44\xb5\x6a\xd1\x9a\x17\xf4\x8e\x3f\x77\x65\xc8\x7c\x10\x94\x67\xa9\xbf\xd0\xcc\xcb\xc7\xe6\xe4\x6b\x26\xff\xac\xef\x73\xd6\x2d\xc3\xdd\x91\x2b\xa9\xe6\xcb\x3e\x25\x2c\xb4"
		"\xb0\x8a\x14\x48\x94\xe3\xb2\x01\xc2\x29\xda\x4b\x0a\x55\xb0\xb0\xe0\xaf\x7e\x91\xfd\xb4\x09\x65\xfa\xc5\x9b\xfb\xa2\x76\x41\x71\xf7\xa3\x9f\x45\xa7\x05\xc9\x26\x66\x47\x6a\x98\xbc\x46\xa3\xeb\x43\x27\x14\x27\xec\xa0\x4b\x93\xdf\xbf\x7a\x64\x6f\xff\xc1\x5b\x95\x3e\x16\x8b\xf7\x44\x47\x87\xc3\x2f\xf8\xab\xb6\x8c\xcf\xe5\xe6\xf7\x4e\xd3\x5f\x9b\xd0\x5d\xf6\x29\xe4\x48\xfe\xd3\x4b\x93\xb9\xf1\xa7\xeb\xd4\xac\x5e\x62\xf6\xc5\x1e\xfc\xf1\x29\x03\x4a\xd5\x56\xf1\x30\x8d\xbc\x94\x65\xe7\xe4\x03\x44\x5d\xf7\xd7\x36"
		"\xb6\x6b\xb2\xdb\xfc\x50\x16\x19\x98\xb4\xa5\xc1\x2e\x2a\x25\x16\x21\xc9\x8c\x01\xe5\x77\xe2\x0a\x2e\xb9\x7e\x3d\xf9\x51\x32\x73\x3c\x7d\xad\xa7\x99\x91\xd7\xd8\x8e\xb6\x45\x75\x4f\xe1\xfd\x23\x09\x27\x60\x01\xab\x79\x1c\x23\xe6\xd5\xc0\x76\xaa\xcb\x2b\x03\x35\x35\xe2\x17\x2e\xde\x72\xac\x09\x93\x81\x91\xfd\x1a\x0d\x65\x9d\x31\x8f\x5b\xe6\xe0\x57\x72\xe4\x0d\x06\xe6\xd7\x44\x4e\xf7\x37\xff\x95\x8b\x4a\x3e\x48\x18\xd4\x4a\x54\xe1\x9f\xf7\xa9\xcc\x30\xab\x85\x67\xdf\x9b\xc0\x97\x62\xce\x4b\x6a\xc9\x98\x78\xfa"
		"\x1c\x8d\x37\x2c\x2e\x83\x99\x23\xdb\x06\x38\x6e\x84\x38\x3c\xd8\xb6\xc7\x43\x25\xb4\x22\x67\x40\xb9\x3b\x29\x15\xa2\x71\xf3\x3a\xef\x5c\x1e\xe3\x7a\x83\xd4\x99\x83\x85\x31\xc1\xbc\x0c\x42\x40\x79\x94\x3d\xef\xb8\xb2\x54\x86\x2c\x06\x7a\x81\x38\x5a\x08\x3c\x84\x61\x0e\x74\x04\x2d\x0e\x6b\x87\xb3\x75\xf7\x88\xb6\xbf\x9d\x14\x49\x1e\xb2\xdc\x71\xac\xe8\x01\xf6\xd7\xab\x79\x28\xf6\x76\xfc\x4d\x1c\x03\x85\xfa\x7f\xc7\x14\x80\xfb\x1a\xfe\xbb\x50\x57\xd4\xf8\xaa\x79\xd6\x33\x53\x12\x6d\xcc\xcd\x53\x43\xe0\x34\xc1"
		"\xf8\x50\x61\xc8\x44\x8b\xe2\xac\xfe\xc4\xbe\x1a\x1b\x81\x9e\x4a\x0c\x69\x4f\x0b\x04\xfa\x1d\x75\x26\xc8\xc4\x55\x52\xb9\xe3\x32\xd7\x6b\x8a\x1b\x6c\x8c\x88\xe2\xf7\xae\xc3\x8b\x47\xb9\x68\x3e\x4a\x58\xfc\xcd\x42\xe3\xdf\xba\xbc\xe0\xb5\xe7\x3a\xee\xdd\x76\xeb\x81\xb1\xef\xc8\x48\x6c\x77\xff\xf3\xca\x40\xd5\xd3\xd1\xf7\x0b\x54\x38\x77\xd2\x8c\xf2\xa2\x4d\xac\x44\xd9\x01\xc7\x30\x66\xbb\xb1\x66\xa1\x4c\xd6\x35\x1a\xa2\x20\x75\x4e\x17\x50\x4b\x38\x67\xcf\x8d\x38\x09\x98\xe2\x24\x2d\xeb\xf0\x0e\xb5\xf6\x28\x4b"
		"\xf2\xbe\x23\xaa\xfc\x93\xcd\x9f\x7d\x5b\xef\xe3\x1a\xaf\x30\x2f\xc8\x3a\x80\xb7\xb0\xd8\xa2\x2f\x45\x02\xa4\x2a\x7e\x30\x4f\x1a\xdd\xda\x9e\xfd\xc1\x7f\x07\xd1\x01\xe9\xfc\x01\xcc\x1e\xc9\x62\x59\x1d\x5c\xc2\xa9\xe3\xca\x42\x29\x7e\xbc\x44\x02\x73\x36\x5f\x96\xbb\xd1\x99\x7c\x9d\x74\x56\x56\xa6\x7f\x51\x9c\xb8\x82\x16\x3e\x3b\x08\x4b\x58\xe8\x3c\xaa\x0c\x0a\x6d\xf7\x88\x84\xb5\x9d\x28\x9a\x40\x96\x02\x2d\x56\x4c\x9a\xc6\x4b\x35\x7d\xb0\x51\x1a\x07\x15\x28\x05\x00\x76\x36\x56\xde\x7f\xf7\x5b\x5f\x00\x04\x80"
		"\x27\xa4\x0e\xc2\x5b\xc8\x17\xe3\x9c\x81\x63\xd5\xa3\x4d\xa7\x96\xa3\xc8\x77\x30\x70\xf1\x2d\x99\x3a\x89\x17\xd0\xce\xab\x86\x9e\x96\xae\x60\xb7\xcf\xce\xe4\x6f\x7b\x4a\xf4\xdb\x4d\x06\x2b\x7a\xba\x84\xfe\x1a\x35\xb4\x16\xfe\x9e\x2d\x85\xee\xc3\x82\xf9\x3f\x7c\xb9\xb4\x82\x7b\xaa\x64\x6d\xb9\x18\x87\x69\xf0\x18\xe0\x4e\xc2\x09\x5b\xd1\x9d\x89\x9c\x38\x3d\x63\x82\x36\x1d\x1a\xb1\xfa\x2c\x83\x96\x82\x47\xae\xde\x8c\xa6\x93\xc5\x64\x37\x2d\xd6\x3d\xe6\x1b\xde\xae\x18\x19\xec\xed\x77\xe2\xe0\xa7\x92\x4d\x07\x3f"
		"\xb8\x8e\x57\x70\x74\x0b\x3a\x3f\x01\x42\x04\x5d\xe6\xa2\xdc\x30\x06\xe5\xc4\xee\xca\x04\xe0\x93\xac\xc2\xfd\xa9\x4b\xc0\x28\x61\x3c\x2d\xa6\xee\x21\xaa\xb9\x6b\x31\x4e\x80\x31\xf4\x20\x1b\x8e\xcf\xaf\x90\x6e\x54\x64\x27\x52\x99\x99\x49\xff\x3c\xa3\xeb\x6b\xab\xcd\x1e\x21\xa4\x5a\xd1\x3f\x3a\xec\xbd\xe2\xb6\x8a\xdb\xb7\x34\x01\x8d\x00\x54\xc6\x8c\x01\x07\xd2\xd8\xd3\xd7\xe3\x28\xa2\xda\x8c\x9b\x92\x72\x91\x55\x21\x0f\x47\x9c\x7a\xfa\x55\xdd\x59\x37\x87\x22\x29\xbe\x0e\x71\x6f\x27\x43\x04\x2c\x1f\x89\x2b\x46"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries0), 0x1000);

	const char emptyEntries1[] =
	{
		"\x4a\x0e\x95\x63\x3e\x18\x11\x30\x32\x16\xed\x42\x41\x3c\xcb\x5c\xb5\xd8\xf1\xa8\xf4\xde\xab\xb8\x2b\x69\xe8\xde\xec\xb8\x16\x00\xcc\xcd\x25\x78\xb3\x56\x63\x30\x70\x6e\x15\x21\x83\x15\x73\x21\x3e\x0d\x3a\x11\xbf\x46\xeb\x96\x6d\x02\x45\x93\x82\x45\x6f\x47\x01\x86\x24\xec\x13\x47\x1b\xb2\x98\xdc\xc7\xd6\xb7\xe6\x43\x99\x05\xf1\x74\xf4\xb8\xfe\x63\x13\x1b\x73\xac\x16\x76\x08\x7e\x98\x9a\x2a\x2a\xbb\x89\xe0\x73\x3d\x81\xa0\xd8\x37\x77\xa8\x38\x22\x63\x8d\x1e\xb5\xad\xdf\x04\x62\xe4\xbf\x46\xbe\x9b\x07\xb3\xa1"
		"\x02\x4f\xe3\xc8\x78\x68\xf6\x3a\xca\x46\x18\xad\xc6\x38\x23\x4f\xb5\x03\x40\x2d\x8c\xa4\x97\x07\x5c\x14\x46\x00\x34\x89\x28\x14\xfb\x1a\x8d\x2c\x24\x0b\x86\x6f\xa5\x7c\xe4\x1c\x52\x46\x39\x4a\xd5\x0d\x3a\x13\xaf\xab\x2c\x1b\x88\xd7\x1f\x8f\xc2\xd7\xc1\x29\xc7\xfe\xd3\x6a\x7c\xb2\xfe\x5a\xba\x06\x25\x4f\xa3\xcf\x3a\x92\x2c\xca\x5c\x33\x78\xa9\xa3\xf5\x05\xbe\x70\xf4\x49\x55\xd4\x75\x79\x36\x0d\x37\x5a\x81\x68\x32\xb1\x7d\x95\xc2\xb4\x61\xd8\x86\x89\x97\x4f\x99\x22\xe6\xf3\x71\x66\x2e\x89\x2b\x7b\xff\xb6\x72"
		"\x44\xdf\xcb\x62\x36\xbc\x0e\x7a\x4e\x50\x25\x25\x97\xf5\x86\x9c\x1d\xa0\x75\x3d\x76\x83\x1c\x78\x73\xc0\x9a\x7f\xd6\xd5\xb9\x74\x67\x03\xe7\x25\x0e\xb1\x9f\xec\x4c\x23\x41\x00\x65\xf1\x3e\xc7\xbf\x66\xc8\x52\x88\x5c\x65\xb9\xce\x4b\xc0\x5e\x3e\x1c\xa9\x99\x15\x98\xbd\x71\x1d\x48\x23\xd0\xb2\xa1\xd8\xa5\x35\xd6\xf9\xfb\x93\x4d\xec\x8c\xd5\xdf\x90\x53\xa1\xaf\x01\x3e\xc5\x5f\x52\x04\xb5\x78\xa6\x1e\x50\x74\x85\x86\xe9\x7a\x1a\x6a\xf7\xb8\x6d\x75\xa1\xbc\xaa\xe9\x9c\x22\x8a\xfa\xf0\xed\xc6\x54\x91\x6e\xf9\x5f"
		"\x7c\xc7\x98\x07\xef\x46\x39\xd2\xcc\x35\x98\xc2\x90\x6b\xc9\xb1\xfa\xd4\x57\xeb\xa6\x7e\x7c\x30\xdd\xff\xca\xa1\x82\xa5\x87\x21\x9e\x65\x7a\x11\xa6\xeb\x54\xdf\xc0\xa3\x43\xb5\x43\x5d\x8e\xfb\x42\x5a\x26\x31\x22\x44\xd5\xd4\x89\xaa\x05\xcf\x8d\x19\x5f\x28\x5a\xd6\x50\x20\xdf\x7e\xf4\xb9\x2d\xf0\xa7\xe0\x00\x6c\xf3\x11\xa5\xe5\xb3\x61\x1b\x12\x03\x92\x34\xf8\x79\xb2\xcd\xe3\x5c\xae\x34\xe5\xd5\x9f\x37\x50\x14\x07\xd6\xeb\xdf\xef\x44\x93\x8f\x45\xf1\x0e\x81\x1c\x69\xb9\x4f\xe9\x55\xda\x89\xcd\xac\xc0\xee\x81"
		"\xff\x72\x98\x62\x45\x62\x59\xbb\xcb\xe2\xa1\x9b\xd1\x4a\x85\x55\x9f\x62\xd2\xf5\x32\x6f\xfc\x0d\x43\x30\xd0\x5f\x78\xa1\xb4\x34\x3d\x06\x9e\x5a\xf5\x01\xe4\x5c\xd1\x2a\xc8\x74\x9d\x8c\x32\xed\x98\xbf\x24\x6b\x02\x71\xe1\x1b\x05\x5c\x92\x21\x05\xe0\xfa\xe1\x5f\x19\x25\xf4\x4d\x79\x82\xd2\x7d\x4e\xb9\xd7\x12\x14\x5c\x2e\x54\xec\x2a\x8b\xc8\xe7\xab\x56\xc1\xf0\x82\x0f\xab\x63\x1d\x64\x5b\x76\x9c\x38\x61\x01\x69\x61\x36\xaf\xa6\x06\xf0\x3d\x42\x79\x46\x87\x50\xa7\xb9\x68\x61\xad\x0b\xed\x19\x75\x83\x10\x36\x1e"
		"\xc5\xd6\x64\x30\xb5\x58\xc3\xcf\x71\xd9\xef\x53\x40\xc6\x75\xe3\x57\x9d\xc7\x21\xe2\x41\xe9\xde\xeb\x7e\x9d\x8a\x3c\x0f\x10\xd1\xd0\x24\xcd\xc2\xfc\x88\x1c\xea\xba\xc1\x81\xfb\x5c\x93\xe2\xd5\xd1\xfb\xeb\xb0\x21\x57\x05\x75\x0e\x91\x7d\x1f\xe1\xca\xfd\x3e\x37\xb2\xf0\xc5\x45\x76\x7f\x3d\x71\xe6\x05\x3a\xc4\x0c\x1a\xfd\xb8\xe3\xbb\xb4\x77\xcb\x21\x48\xb5\xc5\x92\x10\x5a\x7b\x44\xe6\xfd\x4d\x16\x3c\x64\x03\x90\xae\x30\xa8\x5e\x90\x47\xa9\xe7\xad\x69\xb8\x48\x7b\x7c\xb4\xa0\xe8\x58\xb7\x03\x47\x3a\xd9\x9f\x0b"
		"\x46\x43\x99\x6d\xea\x33\x7a\x58\xce\xe6\x89\x7d\xab\x8b\x96\xf2\x77\x3d\x58\xf7\xd7\x56\x63\x45\xba\x52\x7b\xe2\xa6\x7e\x1e\x91\xea\x3c\x7d\x00\x6c\x58\x74\x45\x76\xcf\x47\xd8\x2e\x34\xa8\x59\x8b\xd0\x8e\x64\x54\x05\x6e\x27\x61\xfe\x84\x92\x02\x8f\x92\xbd\x9c\xd9\x66\x4a\x50\xaa\x30\xda\x1b\xc2\xbf\x87\x4f\x20\x68\x7d\x39\xc5\x9c\x42\x5c\xff\x1d\x0d\x9d\xca\x19\xee\x68\xf3\xa3\x7f\x19\xc4\xb1\xd0\xac\x74\x66\x6b\xa9\x3d\xe9\x0b\x66\x6c\xcc\xe6\xfb\x0e\x78\xd3\x5c\xb1\xe9\x98\x71\x6b\x44\x9a\xdb\x2a\xe1\x09"
		"\xc3\x3e\xc7\xf7\x69\xae\x6c\x7f\x62\xed\x8b\x64\x54\x9f\x6a\x27\xcb\x94\x19\x4d\x2c\xd2\x30\x2d\x5e\x98\x02\x95\xe7\x45\x4b\xc6\xa0\x02\xf6\x6a\xb4\x94\x40\xa0\x37\xe3\x13\x55\xf7\x91\x90\x99\x2a\xdb\x91\x9d\xb3\x49\x2d\x1f\xce\xf9\xdb\xb1\x50\x12\x9d\xd5\x59\x2b\x03\x93\xf2\x60\xef\xf6\x14\x55\xc3\x08\x48\xa6\x5b\x88\x93\xbe\xed\x87\xe7\x98\x69\x92\x4d\x46\x22\xaf\x85\x48\x86\x36\xba\xd4\x10\xca\x80\xa2\x7a\xd7\xb6\xd8\x2f\x46\xd7\x1d\xb0\xcd\xc4\x22\xe6\x0c\x12\xd4\xe6\xc3\x92\x3e\x8d\xb0\xb3\x6d\x35\xcc"
		"\x76\x7c\x03\xda\xab\x2d\x1a\xd3\xb8\x48\x0d\x0c\x9a\x81\x9b\x9a\x85\xe0\xfd\xa6\x3c\x9f\xd1\x13\x52\xaf\x28\x4a\x64\x0e\x6c\x10\xba\x50\xaa\x04\x32\x36\xf0\xd9\x01\x38\x3d\x9d\xe6\x25\x66\xc9\x09\x3c\xee\x3f\xae\xb2\xed\x7f\xa8\xfa\xfe\xe9\xce\xe6\xca\xbd\xf8\x44\xec\x8d\x1b\x81\x3b\x26\x9b\xc0\x4a\x94\x3b\x15\x9a\x87\xff\x57\xc4\xd2\x1c\xa7\x6b\x08\x2a\xad\x7a\x42\x25\x9a\xf6\x9f\x88\x08\x9e\x2d\x70\x9e\xd8\xda\x57\x74\xff\xc5\x18\xac\xf0\x82\x9f\xc3\x7a\xf4\xc7\xe4\x48\x53\x4c\x89\xe2\xcb\xb8\x08\x97\x7b"
		"\x72\x97\xb2\x6f\x56\x44\x95\x9f\xc6\x08\x93\xdd\x38\x58\x84\x90\x45\xe4\x71\x00\xd7\x3d\xa5\x0d\xd2\x9f\x80\x8c\x77\x0e\x13\x21\x47\x16\x30\x31\xdf\x7b\xf6\xd0\x79\x2e\x86\xd3\x3c\xa0\x05\x51\x2b\x1f\x8d\xc2\x9e\x5a\xb9\xa7\xfe\x65\x7f\xc8\x09\x19\x9a\x45\xd3\xbb\x52\x3a\x44\x39\xb4\xda\xb6\x30\xf1\x21\x0d\x52\xf3\xe5\x31\xb4\x42\x57\x03\x84\x0f\x36\x9e\x19\x38\xd5\x77\x4f\x94\x42\x24\xbb\xb0\x03\x06\xce\xcd\x25\x96\xe6\x9c\x05\x0a\x86\xe7\x56\x19\x14\x74\x14\xe4\x7c\xe6\x69\xad\x30\xd2\xee\x06\x53\xaa\xa2"
		"\x6f\x6e\xd3\x36\xb3\xec\x33\x7a\x75\x27\x81\x54\x9b\x32\x65\x85\xde\xbe\xed\xf3\x08\xa5\xe3\xe7\xba\xa7\x67\x6b\x87\x09\x6b\xd9\xa3\x24\x18\x94\xa9\x85\xb7\x10\xb1\x5d\xaf\x01\x58\xd7\x8c\xfb\x7e\xce\xb7\x48\x34\xe9\x04\x51\xef\x09\x6f\xd1\x06\xb1\x06\xcc\xb6\x79\x38\x7c\xbe\xcf\xdf\xbc\xbd\x38\x9a\x17\xbb\x24\xbe\xb6\x70\x85\x65\x38\x14\xdc\x62\xb3\x33\x71\x36\x45\x29\xa6\xf9\x22\xd0\x1d\x7d\xc7\x9c\xd4\xbc\x72\x9f\xd3\x89\xdf\x33\x05\x8f\xd6\xc3\xc8\x8a\x67\x8c\x08\xff\xd4\xaf\x72\x65\x6a\x41\x17\xb7\x7e"
		"\x29\x48\x74\x65\x8c\x73\x33\xab\x8e\xad\x1b\x16\x0e\xa6\xf4\xa3\x8c\x45\xe1\xc1\x96\x7d\x55\xe4\x66\xa8\x6f\x25\x76\xe1\x28\x02\x14\x1b\xfc\x74\xe6\xb7\xfb\x8c\x14\xcb\xd3\xd0\x22\x21\x41\xcd\xc5\xef\x41\xc5\x9f\x45\x4d\x82\x4c\xbb\x22\x6f\x5f\xe7\xc2\x81\xe0\xe4\x18\x5b\xd3\x0d\x45\x60\x64\xd8\x8f\x56\xf2\x8f\x35\x6d\x7f\x4f\x35\x69\x56\x71\x47\xda\x6b\x78\xc4\x27\x70\xa1\x6b\x04\xd3\xe5\x55\x61\xd8\x02\x85\xf9\xc2\x52\x1b\xad\x81\x00\xd5\x02\x7d\xe5\x76\xb4\xf3\xc8\x26\x1f\x23\xeb\x7a\x42\x1b\x98\x76\xc5"
		"\xce\xe3\xf7\x26\x37\x1b\x34\x93\x7d\xee\x33\x58\xd2\x22\x00\x98\xee\xc7\xee\xaf\x9a\xdd\xa9\xe0\x83\xd2\x36\x85\x59\xd6\xc5\x0e\xd9\x96\x43\xc4\x02\x1c\x8f\xaf\x70\x70\xa4\x03\xef\x0d\x29\xac\x67\xb9\x0f\x9c\x54\xf0\x8f\xb8\xca\xd5\xa0\xeb\x44\x65\x12\xa8\x25\x87\xa2\x71\x4a\x85\xa6\xad\xd5\x96\x92\xcf\x72\x37\xa4\xf3\xe5\x7c\xb2\x1e\x4b\x8c\xea\x76\xc4\xf8\xdf\x76\xf6\xef\xb2\xa6\x82\xc7\x6e\x22\xf6\x6e\x54\x81\x93\xd4\x6e\xee\x15\xe5\x78\xbf\xd7\x1f\x6b\x71\x18\x25\xe8\x1a\xa4\x15\x78\x3c\x43\xde\xc7\xca"
		"\x58\xb5\xe4\x63\xa6\xaa\x0d\xac\xfa\xc8\x2c\x48\xaa\x47\xd8\x86\x3a\x7c\xc2\xe2\x0b\xa7\xaa\x87\xd7\x80\xb2\x0f\xd4\xda\x21\xe7\x4f\x6e\x1c\x3e\xad\x16\x75\xc9\x9d\x2d\x0a\x56\x14\xb1\x5f\x90\xc0\x14\x09\xde\xb1\x5e\x1a\xac\xa9\x62\x15\x71\xd8\xb2\xed\x6e\xb0\x9e\x53\xe2\x1c\xbb\x0e\x8b\x1a\x07\xdf\xbd\x0f\x93\x72\x90\x3f\x5b\xb1\xd3\x72\x38\xc5\x26\x87\x72\x35\x6b\x34\x40\x52\xc0\x64\xc7\x25\x5d\x5c\x0e\x01\xe2\x58\xe8\x66\x56\x57\x0a\xbf\x34\x06\xf5\x57\x3c\x0d\x59\xb9\x89\x18\x63\x27\x2e\x01\x0a\xc0\x57"
		"\xc2\xe1\xb8\x71\x24\xe8\x8f\x9d\x41\xfb\xa9\x70\x95\xc7\x6a\xef\x67\xd7\x97\xa3\x81\x12\x6e\xb1\xea\x4b\xfc\xae\xe2\x52\xa4\x01\x59\x70\xec\xb7\xf9\x1d\x01\xdb\x25\xa2\x43\xc5\x44\xfb\xd5\x70\xd1\x98\xd7\xc7\xf3\x94\x43\x9c\xc3\xc6\xc1\x3c\xd2\x12\xf0\x4d\x96\x9b\x6e\x92\x7a\xc9\xf0\xa8\xa1\x02\x89\x08\xb4\xc9\xab\xb2\xc3\x3c\xac\xf4\x60\xb4\xd7\x3a\xc2\x43\x19\xda\xb6\x62\x78\xbe\x39\x94\x34\xe0\xaf\x88\x2f\xb5\x70\x25\x05\x97\xc8\xba\x55\x5a\xe8\xef\xe7\x90\xee\x43\x20\x39\xe3\x76\xb6\x5d\x64\x41\x90\xf7"
		"\x5c\x51\x4c\xfa\xa2\x05\xcb\x92\x21\x4e\x86\x47\x74\xf4\xb1\x64\x18\xaf\xe5\x5d\x79\x3e\xde\xcf\xb2\x50\x79\x73\xeb\x43\xc6\xa7\x64\x5a\x0e\x9f\x16\x32\x11\xcb\x4e\xaf\x83\x57\xa4\x70\xf9\x73\xbb\xd1\x6f\x92\x4f\x16\x37\x42\xb7\x39\x55\x19\x07\x19\x85\x66\x54\x2f\x48\x49\x16\xc2\x48\xf9\x67\x44\x20\xc9\x1f\xbe\xf6\xbc\x87\x33\x94\xfc\xcb\x8e\x7a\x1b\x63\x20\x18\x0a\x2b\x04\x00\x9c\x12\x91\x7f\xfc\xa8\x4d\xcc\xdd\x28\xad\xaf\x78\xa4\x87\x08\x42\xee\x52\xca\x9c\x11\x5a\x54\x2e\x71\x04\xd0\x21\xf0\x54\xd1\x08"
		"\x23\xef\xde\xc9\xe9\x2f\x7b\x35\xa1\x1d\xad\xb2\xf0\x2a\x48\x3f\x60\x10\x6d\x7e\x34\x49\xa7\xff\xff\xd3\x1c\xef\xfc\x85\x51\x9d\x7f\xfb\x8d\x5a\x3e\x98\x79\xca\x73\x14\xd0\x9e\xea\xf3\x35\x16\xb2\x99\x5e\xae\xeb\x7a\x9a\xd9\xe9\x60\x2b\x7e\x10\x58\xcd\x6c\xfd\xa4\xd8\x5d\x8c\x34\x4c\x95\x49\xd8\x71\x03\xbe\x5e\xcf\xf5\x17\xc9\x03\x08\x05\x1b\xfd\xe9\x75\x48\xf3\x1e\x8c\x84\x67\x3f\xc0\xe8\x4b\xae\xd1\xf7\x65\x49\xf9\xd5\x81\x18\x8a\x44\xe6\xa8\xf1\xca\xf0\x05\x9b\xce\x70\xde\xc8\x5a\x1e\x43\x27\x32\x85\x42"
		"\x51\x4d\x27\x2e\x69\x88\xa6\x55\xe0\xff\x65\x4b\x26\x5b\x79\x45\x40\xce\xab\x70\x35\x4c\x01\xdd\xd7\x1b\x45\x22\xd5\x8e\x96\xb6\x3c\x3a\x2a\xee\xad\x6d\x60\xe9\xf9\x65\xdb\x1b\x74\x8b\x81\xf5\x6a\x58\x42\xee\xdd\xad\x1c\x26\x3e\x60\x88\x52\x66\xf5\x80\xdd\xe4\xf1\x93\x9a\xc7\xcd\xcd\xb3\xab\xa0\x66\xa1\x94\x52\x13\x7a\x52\xf6\xee\xdf\x40\xa2\x37\xc4\x5e\xad\x7f\x6a\x82\x1f\xea\x91\x9c\xa8\x14\x2f\xcd\x08\x4d\xa5\x47\x28\x48\x70\x9f\x99\xb8\xdb\xf4\x66\x9a\x93\x03\x1e\x63\x1b\xf6\x4b\xb2\xbb\x0e\x29\x25\xc1"
		"\x12\x7d\x97\x38\x05\xcb\x94\x27\x84\x34\xe9\x49\xaf\x8c\xfd\x35\x97\xfa\x10\xb7\x14\x60\x7d\x63\x6b\x20\x56\xc6\xeb\xbc\x83\x8e\xe8\x7a\xae\x2f\xf6\x7b\xbc\xdd\x4b\xc0\x69\x22\x53\x42\x9f\x39\x75\xbc\x9a\x5e\xd0\xe2\x4a\x78\xf9\x95\x52\x59\x10\x1a\x67\xb5\x50\x7e\xc3\xcc\x74\xc6\xc9\xf3\x09\xe3\xfd\xfc\xf9\x7c\x05\x96\x27\x0f\xf4\x97\x57\xcb\x0e\xf8\xa8\x59\x54\xaf\x18\x9a\x24\x55\xb1\xc8\x5c\x46\x9b\xc8\xb7\x17\x1a\x92\x52\x04\x34\xec\xca\xc6\x0b\xb7\x00\x3d\x5e\x8f\x4a\x3a\x62\xda\x0b\xee\xe8\x3b\xfa\xc2"
		"\x9c\x37\x39\x09\x3b\x75\xc6\xab\x49\xa2\xad\x04\x0b\x63\x67\x7d\xb7\xda\xa8\x90\x07\x3d\xdf\xd3\x6a\x54\x35\x9b\x02\x72\xbc\x91\x45\xcc\x7d\x9d\xe7\x37\x05\x0b\xf9\xfb\xf6\x44\x98\x1e\x88\x87\x6e\x4d\xed\xcc\x66\xc2\x85\xfe\x24\x74\xd7\x12\x50\x58\x30\x9e\x5d\x69\xe4\xf8\x8d\x5a\x5c\xc2\xee\xd9\x1e\x37\x36\xff\xca\xa0\x0d\xeb\x5c\xb4\xf8\xa3\xd8\x32\x3c\xf6\x9a\xdd\x13\x75\x37\xbe\x07\x10\x28\x29\xa9\xb2\x13\x3c\x79\xeb\x51\xcd\x12\x9a\x24\x0a\x42\xed\x2e\x57\x43\x87\x18\xc1\x6a\x37\x98\x68\x80\xd9\xf1\xba"
		"\xe2\xfd\xc1\xcb\xc4\xf4\xdb\xdb\x3c\x77\xd8\xf6\x7a\x65\xe7\x3e\x5c\x51\xce\x27\xe6\x86\x36\x64\xe0\x2f\xe6\xa5\xd2\x45\x2a\xc0\x1f\x74\x9e\xac\x9f\x30\x2b\xbd\x9e\x12\xfd\x4a\xc1\x3c\xc2\xf4\xa3\x90\xb6\x53\xbe\x85\x6d\xaa\x22\x49\xde\x1b\x74\xf1\x84\xf5\xf9\xcd\x72\xdf\xd4\xfa\xa9\x19\xcc\x32\xa1\x94\xdc\x74\x8d\xd4\xef\xe2\xbc\xd6\x04\x42\x51\x5b\x3c\x02\xef\xc4\x7e\x69\xc3\xee\x03\x68\x24\xf6\xb5\x82\xc3\x8d\x9f\x44\xe0\x39\xca\xa3\x46\xc1\x94\xf9\xec\x36\x99\x09\xdc\xc7\x63\xef\x68\xe2\xa0\x1e\x51\x3d"
		"\xa0\x3f\x43\x2d\x50\x5b\x85\xeb\x1a\x09\x99\x39\x95\xef\x88\x28\x5d\x3a\x93\xc5\x4d\xcf\x67\x62\xaa\x07\x09\x9e\xb0\x6d\x20\x57\xfe\x6a\x24\xcc\x3e\x54\x55\xdd\x44\x16\x11\x97\x4a\x85\x1d\x0e\x01\x9a\x31\x3f\xc4\x4e\xc7\xf4\x07\xfa\xa1\x6e\x80\x04\xb9\x37\xf2\x9c\x31\x79\xc4\xea\xd4\xb0\x03\xbe\xf6\x37\x2c\x70\x63\x91\xc8\xe4\x9f\xb5\xfe\x33\x15\x34\xe1\x94\x17\x26\x44\xe2\xdf\x25\xe2\x87\x98\x28\x1f\x9e\x86\x1f\x24\xad\xad\xfa\xcd\xeb\x12\x9c\xdd\x1a\x22\xf0\x86\x82\x01\x4d\x9b\x1e\xb4\x2c\x21\xa9\x80\x54"
		"\x1e\x1a\x70\xac\xd9\xb5\xdb\x4c\x69\x12\x80\x5d\x5f\x4c\x34\xee\x8d\x2e\x47\x70\x7c\x6b\x6a\x2f\xb2\x58\xb8\xe2\xcb\xbc\x74\xf6\xcd\x91\x7d\x40\x3a\xf7\x13\xd2\x98\x7f\x83\x55\x28\xcc\xfe\x92\x33\x66\xa9\xdd\x8d\x62\x67\xa2\x66\xfd\x9c\x99\xdd\x7b\x20\x49\x3b\xfc\x1f\x4f\xf0\xf8\xc2\x9e\x24\xea\x58\x17\x0a\xfa\xa1\x55\x47\x70\x36\x56\x63\x2e\x09\x2c\xc3\xf5\x5e\x21\xde\x86\x2c\x62\x9b\x31\xb7\x12\xeb\xbb\x40\x06\xc3\x35\xcc\xe0\xfa\xf7\x8f\x9b\xbc\xf0\xcc\xaa\xc6\xa8\xdd\x65\x74\x38\x98\xbd\xe4\x5c\x71\x90"
		"\x36\xab\x70\x7a\xfe\x87\x4c\xdd\x43\x01\x4a\xe0\xe0\x26\x96\x84\x67\xcb\xeb\x75\x2c\xb8\xc3\xe9\x3e\xaf\x87\x9b\x27\x7a\x90\x46\xa0\xb8\x4f\x3d\x52\xa8\x63\x6c\x04\x10\x47\xe6\x5e\x53\x9c\x75\xec\x8e\x60\x9c\xf5\x94\x26\xd9\x46\x70\xe4\x89\x40\x02\xad\x30\x63\xe1\x59\x9d\x13\x8a\x60\xdb\xa0\x48\x65\xea\xa8\xc6\x02\x17\x24\xd0\xe4\xee\x65\xb8\xbf\x06\xc7\x27\xc5\xab\x07\xa3\xb8\xea\x80\xa8\xb0\x26\xe6\x31\x58\xa3\x4d\x30\xfb\xa9\x18\x77\xa7\x18\xf9\xa7\x13\x18\x8c\xac\x09\x77\x5c\x73\x36\xf9\x7f\xb8\x41\xcb"
		"\xcb\x1a\x2f\x1d\x45\x26\x1c\x9a\x3c\xc6\x0d\x1f\x16\x6b\x9a\xdd\xb3\xee\x31\xb4\xae\xb1\x1a\xd5\x7f\x87\xfc\xe8\x66\x6b\x9b\x46\xa8\xf2\x79\x2a\x5f\xef\x23\x67\x5f\xa8\x05\x5d\x63\xef\xf3\x39\x06\xae\xa4\x2c\x04\x27\x2a\x18\xa6\x99\x0c\xad\xc8\x14\x31\xd1\x8e\xae\x60\x0a\xc4\xec\x69\x31\x65\xcd\x63\x44\x65\xb1\xb7\x9c\x43\xe7\xc8\x2f\xb9\x0c\x6f\xcf\xdb\x09\x57\xc9\x7e\xd2\xf3\x61\x1a\xb5\x9e\x30\x52\x0f\x9a\x65\xea\x06\xb5\x44\x53\xe6\xf2\xc8\x93\x41\x6b\x98\xec\x82\x6d\x88\x47\x3a\x27\xb7\x4e\x0b\xe0\xa0"
		"\xfb\xb1\x96\x1f\xc6\x44\xc7\xe6\xba\x61\x4a\x29\xd2\xb5\x7e\xf0\xff\x90\x71\xac\x62\xc6\x7c\x43\x01\x11\xfa\xfb\xa3\x5c\xee\x60\xc9\xf9\xc1\xb3\xa3\x30\x38\x57\xa5\x0b\x70\x68\xc3\x6b\xd6\x5d\x2e\xa2\x61\x82\x7c\x15\xe1\xaf\xcb\x85\x82\xb5\xf8\x91\xec\x6a\x5a\x50\x6f\xab\x30\xaf\x06\xa9\xf5\xe6\x71\xcd\x6c\x59\xd9\xe1\xf4\xb3\xa3\x44\x53\x82\xde\xc8\xc8\xc9\xd8\x7f\xba\xc3\xa1\x60\xfd\x19\x17\x8b\x90\xdd\x55\xaa\xd7\x53\xdb\xc7\xdc\x1c\x85\x9f\xac\x10\x71\x58\x47\xf6\x28\x68\x0c\xf4\xf2\xe1\x42\x21\x07\x4a"
		"\x40\x3f\x55\x8c\xf7\x0c\x84\xd9\xc7\x59\x82\x24\x7e\xee\x22\xc8\xcd\x7d\x10\x5c\xbf\x35\x6d\x0c\x8b\x52\x29\x73\x5d\x41\x0f\x3b\xf4\xdb\xc1\x8b\xbd\x8a\x41\x1e\xed\x8d\xa4\xfb\x60\x8f\xeb\xfb\x41\x67\x92\xa7\xd2\xcf\x25\x67\x0a\x39\x21\xd2\xb8\xb1\x68\xdb\xb2\x60\x52\x18\xe5\x1f\x9c\x7c\xd1\xb3\xb0\x2f\x47\xb2\xd7\x39\x74\xe1\x84\x05\x64\xdd\xd4\xe9\x5c\xd1\xc2\xab\xc5\x2d\x8b\x6e\x16\xd0\xb1\xf5\x9f\x9d\x76\xbb\x90\xa9\xf7\xd2\xb5\x4e\xcb\xf8\xde\x16\x83\xb3\x19\xbc\x58\x3b\x68\xd7\xf1\x9d\xfa\x67\xd9\x85"
		"\xe0\x35\x50\x7b\x09\x4c\x3b\xe6\xbc\xa0\x51\x73\xc8\x15\x93\x55\xe1\xd9\x37\x8e\x95\xbb\x8f\x39\x20\xa2\xe6\xc3\xd1\x95\xdb\xfd\xba\x58\x88\x68\xf5\x67\x06\x69\xda\x22\x59\xeb\x79\x97\x5f\x25\x72\xbf\xb9\x98\x8a\xc3\x91\x60\x3c\xfa\x09\x55\x83\x8b\x14\x67\xe8\xb1\xfa\x7a\x57\xc5\x26\x22\x44\xa3\x3c\xc7\xc2\xf5\xf8\xfb\xbd\x5e\xb8\x8b\x1b\xd8\xd0\xb3\x98\x84\xd2\x13\x9b\x2f\xfb\x8e\xfe\xc0\x2d\x7f\xaa\xe7\xee\x82\xf9\xde\x8f\xe6\x7c\x03\x02\x64\x92\xab\xe7\x17\x84\x35\xba\x83\x31\x40\xd1\x5e\xa9\x0b\x5f\x40"
		"\x56\x22\x48\xac\x50\xf5\x19\x8a\xee\xc9\x7f\x50\xaf\x2a\xb5\x4e\x99\x03\xa1\xef\x12\xc7\xf5\x2a\x12\xb3\x41\xb3\x67\x22\xa3\xb7\xea\x68\x50\xff\xfe\x05\x0b\x3e\x24\xec\x09\xf6\x3e\x43\x76\xa4\x30\xda\xfd\x3c\x59\x9f\xe4\x97\xe9\xb6\x04\x96\xda\xda\xdc\xc9\x4c\xa0\x69\xcc\x1a\x10\x6b\xab\x7b\x0d\x14\x89\x9b\x61\x83\xe7\xd3\xd9\x23\xc3\xf1\x5b\xe5\xfe\xaa\x58\x59\x73\xf8\xec\xc3\xe0\x51\x15\xd7\xb3\xa9\xdf\x68\x07\x34\xb3\x57\x76\xb5\xf6\xdb\x8b\xe4\x18\xa9\xba\xcd\xfb\x17\xd7\xb7\xd3\x04\xc8\xf8\x5f\x40\xea"
		"\x4f\xb4\x9a\x38\x3d\x01\x22\x9c\x1f\xff\xec\x06\x0a\x04\xd8\x15\x29\xae\x4e\x16\x19\x74\x24\xc1\xfc\xd4\x1b\x55\x11\xb3\x34\x8b\x1e\x9d\xdd\x4e\x9a\x81\xc5\xaa\x10\xda\xcf\xc2\x96\xe8\x63\xb6\xd4\x09\x20\xe3\xb5\x53\x4a\xc4\xa7\x06\x9f\x3f\x8c\xcd\xc5\x1c\xf8\xaa\xae\xb7\x56\x8b\x4c\xf9\x2c\xbe\xc8\x97\x08\xb8\x10\x38\x77\xd1\x62\xfa\x64\x34\xb6\x7b\xcc\x18\x2e\x49\x4a\x45\xd2\xef\x40\x5b\xd9\x83\xc1\x3a\x37\x23\xe5\xd6\xa0\xaf\x12\x5f\x7f\xd2\x50\xe0\x9f\xce\xe8\x40\x81\xa2\xb7\x19\x25\x0e\x54\x83\x86\xb6"
		"\x9c\x3f\xaa\xa8\x6c\x69\x9f\x8f\xce\x1b\x4e\x75\x78\xdf\x24\x6d\x28\x91\xfc\x55\x4a\x3e\x3f\x93\x22\x65\x2b\xaa\x8a\x3c\x6b\xdd\x54\xda\x85\xef\x65\x1e\x18\xa1\xb8\xe9\xe6\x98\xd4\x31\xbf\x1d\x0e\x3d\xba\xb0\xe6\x34\x4a\x53\x29\xcb\xda\xf1\xbb\x61\x53\xe4\x5a\x54\xbe\x0c\xa3\x68\xa8\x6a\xb5\xe1\x62\xa0\x96\x58\x23\x70\xd9\xd4\x27\xcc\x12\xac\xc3\x0d\x2d\x7d\x0f\x6e\xff\x62\x25\xe9\x17\x41\x50\xcc\x12\x40\xf3\x0d\x31\x9b\x68\xa3\x99\x30\x76\x3c\x5b\x89\x9f\x94\xca\xa3\x74\x62\x1f\xec\x85\xfb\xaf\x6d\x44\xa7"
		"\x52\xf9\x77\x61\xd2\xd3\xa0\xa8\x79\xb2\x54\x2c\x5b\x53\x3f\xaf\xa6\x16\xb5\x18\x61\xe0\xf9\xd2\xba\x9e\xef\x7e\x48\xa8\x70\xe7\x84\xe7\xd3\xb0\x72\x7f\xb3\x7d\xa5\xc4\x51\x66\xa2\x6a\x0f\xb8\x3d\x3f\xba\x18\xf2\x4f\x99\xec\x76\x5c\x2e\x6e\xc6\xa2\x45\x83\x2e\x6e\x61\xb6\x31\x9a\x38\x1e\x69\x5e\x73\x85\xde\xba\xe3\xbe\x74\xa4\xd2\x90\x1a\x2a\x7e\x56\x9f\x9f\x53\x82\x81\x4d\xce\xd4\xff\x7f\xdc\xa5\x43\xb0\x75\x21\x3a\x36\x95\x69\x3c\x63\x1f\xde\xb0\xf4\xf9\x42\x0b\x27\xc0\xe5\xd4\xd5\x04\x5a\xdb\xcc\x7b\xf1"
		"\x54\x2d\x28\x8b\x8e\x66\xd7\x7c\xf9\xdc\xdb\xf0\x45\xb4\xc6\x8d\x52\x4c\xfd\x3b\x44\x1b\x1f\xae\x94\xdc\x5a\xdf\x49\xc2\xad\x2a\xec\xd1\x23\x96\x70\x26\xdc\x81\xc9\x93\x89\x22\x01\x98\xd4\x75\xe2\x95\x5c\xed\xc7\xc4\x95\x1f\xa8\xf4\xfc\xe3\xe2\xe8\x73\x07\x86\x92\x58\x35\x1c\x64\x3f\xf7\x17\x87\x89\xbf\xa4\x39\x5c\xd8\xc7\x5f\x60\x49\xcf\x2f\xcf\xa3\x2a\xc1\xc9\x7b\x6f\xb8\x11\x4e\x91\xbc\x3f\x83\x8d\xe1\xd8\x31\x3a\x24\x27\x77\xc1\x4e\xd7\x02\x30\x27\x92\x4a\xc4\xad\x31\x2e\xa1\x72\x39\xf1\xac\xbf\xd9\xb5"
		"\xb7\x4f\x9c\x54\x6b\xf0\x49\xb3\x06\xea\x73\x11\xd3\x69\x2f\xc2\x1e\xa0\xa1\x95\x5c\x81\x03\x4b\x63\x79\x60\x05\xf0\x54\x40\x12\x54\xd0\x9b\xcd\x3c\x64\xca\x20\x1e\xbe\x0f\x17\x9a\x48\x6c\xb5\xfc\x25\xf8\xe2\xda\xb7\xee\xbb\xdf\x80\x03\x05\x11\x6b\xee\x58\x91\x38\xec\x3a\xf1\x21\x1b\xc1\x4d\x73\xf7\x41\x58\xc9\x0b\x23\x57\x4f\x75\xae\x3d\xe5\xb8\xbb\x27\x93\xe7\x64\xef\x17\x65\x86\xae\xa8\x08\xe6\x25\x20\x82\xcd\x28\x7b\x0f\x94\xa9\x53\xad\x10\x6f\xd7\x99\xc0\xaa\x08\x24\x1f\x88\x48\x94\x5d\x5f\x16\x4c\xee"
		"\xb6\x07\x39\xe8\x9d\x7a\x9d\x7d\x35\x77\x9f\xdf\x78\x87\x05\x89\x35\x36\xe9\x00\x63\xb2\x69\xa1\xba\x2d\xab\x37\x9d\xbf\x0b\xeb\x34\x64\xcc\xa0\x8f\x01\x98\x12\x26\x94\x7a\x2f\xcd\xa6\x90\x32\xea\x17\xed\xe4\x18\x39\x0b\xc6\xc5\xc8\x4b\x6b\x73\x23\x62\x71\x60\xb9\x81\x21\xdb\x3e\x69\x94\x9f\xa7\x21\x8d\x4d\x99\xbf\x20\x08\x77\x94\x8e\x25\x97\x67\x7a\xaa\x35\x0c\x52\x0a\x03\x20\xe1\x3a\x13\xdd\x96\xa1\xd0\x12\x0d\x03\x10\x8f\xee\x69\x0d\xef\x31\xaa\xc1\xff\x13\x2e\xbc\x7b\xf2\xda\x64\x35\x66\xdd\x47\x01\x78"
		"\x27\x58\x97\xb5\xf1\x6a\x2e\xfe\xe7\xb4\x9e\x20\x56\xe1\xcb\x79\xb3\x75\x11\xee\x49\x52\x68\x16\x87\x99\xb7\x41\x13\x11\xb0\x7a\x0d\x18\xe4\x11\x6c\xef\x67\x77\xcf\x2a\xef\xa4\x0a\x6b\x83\x15\x2c\x87\x5f\x6a\x9e\xdb\x17\x2f\x6e\xab\xcd\x03\x61\x79\xf2\xaa\x3a\xbc\x83\x8c\xdb\xb3\x8a\x00\xcb\x34\x2e\x61\x41\x18\x08\xff\xc4\x83\x76\x95\x7a\x14\xf4\x60\xb8\x1f\x3d\x80\xcc\xc4\x3d\x9b\x4a\xc7\x6a\x0b\xd4\x55\x70\xc5\x98\x3f\x01\xbb\xdb\x50\xb6\xbb\xe9\x3b\xbe\x3a\x2c\x2b\x76\xba\xa9\xd7\xd6\xea\x19\x32\xd2\x24"
		"\xfd\xa5\xb7\xac\x02\xd1\x15\x4c\xc7\xdc\x10\x75\x35\x38\x22\x3b\x71\xbd\xbd\x2b\x21\xcd\xf0\xb0\xa6\xa9\x2d\x9b\xb2\xbf\x76\x29\x95\x46\x44\x09\x41\x47\xbc\xc1\x63\xba\x45\x51\x17\x9e\x55\x02\xd7\xf0\x86\xda\xf5\x8b\x73\xdb\x23\xd8\x9a\x40\x08\x66\xd5\xd7\x8f\xef\xe1\xfe\xcd\x00\xf1\xca\xe0\x1b\xbb\x29\x39\x83\xf4\xaa\xd7\x04\xfc\x52\x56\xb6\xfd\x63\x7a\x6e\x59\x81\xd0\x5f\xda\x5c\xe5\xb3\x62\xb4\x2d\xa5\xab\x02\xcb\x07\x79\xea\xff\xe2\x98\x81\x12\x5f\xee\x7e\xe1\xc1\xdf\x03\x1a\xa5\x33\xfa\x13\xa2\xde\x93"
		"\xe5\x7f\xef\x95\x2e\xb6\x03\x9b\x00\xcd\x0c\x96\xfa\xde\xc5\x24\x8f\xc0\x61\x71\xc8\xa3\xe4\xac\x4c\xa3\xc9\x48\x7a\x36\x36\x85\x8b\xa9\x24\xb2\x1e\xf8\x78\x37\xda\xe2\xc4\xd7\x7a\x98\xd6\x9c\xfe\xf7\x61\x4b\x1d\x9c\xa8\x61\x92\xfc\x5e\x32\xfa\x7b\xeb\xe1\x43\xb7\x0b\x02\xc2\x91\x8d\xae\xb6\x2e\x4d\xdb\x0a\x3f\x71\x23\x4c\x75\xa0\xbf\x44\x29\x93\xc0\xa0\xb3\xa9\xe6\x37\xcd\x1e\x92\x56\xb6\x5e\x93\xdb\xcb\x2a\x67\x34\xa0\xc5\x40\x0b\x21\x34\xf0\x0a\x42\xe5\xd7\x28\x24\x5b\xf8\x16\x01\x95\xa4\x26\xde\x0c\x29"
		"\xda\x5d\x1e\xf9\x61\xee\xf7\x45\x75\x83\xb4\x2e\x3f\xc4\xfd\x2e\x8c\x4c\x4b\x95\x28\x6d\xe3\x09\xf9\xaf\x31\x20\x0b\xa4\x1f\xef\x60\x0b\x6d\x5f\xf6\xed\x1d\x94\x64\x9e\x49\x77\xf7\xca\xd2\x5c\xee\x20\xc3\xe8\x3d\xf0\x63\x22\x0d\xa9\x23\xdd\x15\x6f\xcb\xd0\x43\x1c\x0e\x2b\x11\xa8\xe9\xef\x91\x49\x9f\xb5\x01\x94\x25\x4c\x6f\xa1\xc2\xcd\x9a\x25\x9f\x4b\x60\xe5\xce\x84\xe0\xcc\x8f\xd4\xfe\x38\x98\xe8\xe1\x29\xa4\x9a\x16\x1b\x4d\xa2\x9c\x20\xbc\xa2\x6e\x97\xd4\x53\xca\x2b\x02\x71\x34\xd8\x6f\xaf\x25\x45\x43\xc1"
		"\x50\x5d\x37\xb3\x35\x62\xec\x11\x84\xaf\x2b\xdf\x5a\x12\xd8\x3e\xfb\x48\x31\x78\x3f\xf1\x54\xed\x84\x5a\x0b\xd0\x82\x8f\x82\x0b\x7c\xed\x53\xcf\x3e\x56\x1d\x7c\x1d\x72\xc1\xcb\x09\xbf\x04\xb9\x67\x33\x17\x35\x8f\x9e\xc6\x4f\x0c\xfd\xf6\xda\x7f\x53\x72\x55\xc4\x6f\x78\x8c\x0a\x82\xab\x1a\x3f\x1f\x95\xf6\x69\x91\x5c\xac\x22\xba\x63\x1f\x42\x60\x2f\xb0\xc2\xa3\xfe\x4e\x63\xe5\xb1\x8b\x7c\x9a\x40\x12\x00\x2f\x78\x1a\x56\x81\x1b\xd7\xb8\xc8\x82\x76\xdb\xb4\x75\x5f\xf6\x1f\x28\x94\xbd\x68\xac\xff\xd4\x84\x21\xcf"
		"\xff\xac\xfb\x93\xfd\xba\xd6\x58\xb0\xd7\xe4\xb1\xd9\x93\xb0\x6a\x62\xc2\xc8\xd6\x94\xfa\x95\x81\x8d\x73\xa9\x23\xfb\x38\x21\x40\xc5\xc0\xf1\x65\xf8\x94\x2d\xe9\xfa\xd8\x36\x4d\xc2\x9a\x91\x95\xc8\x86\xc5\x23\x51\xd3\x1b\xf4\x2c\x3b\xb6\x31\x2d\x6b\x4d\x77\x74\x27\x41\x4c\xee\x72\x9a\x1a\x0c\x25\x28\xe5\xf8\x0e\xe0\x4c\x8c\x50\x2b\x96\x93\x39\x60\x45\xa1\xf3\xa8\x7b\x59\x46\x67\xa3\x4e\x2d\xca\x72\x4f\x45\xa3\x30\x30\xdb\x63\x3a\x21\xe3\x54\xb1\x52\x54\x57\x3e\xb2\x3a\x24\xd8\xc3\x0d\x2d\xbb\x89\x46\x77\x3d"
		"\x61\xdd\x14\x16\xf2\xe0\xc4\x8f\x69\xcb\x90\x6e\x55\x34\x53\xe2\x0b\x73\x33\x4b\x11\x96\x0a\x39\x4c\x8a\x63\xdb\x0d\xbd\x88\x90\x5f\xb6\xcd\xc9\x2e\xb7\xf0\xb6\x01\x35\x57\xd1\x7b\x80\x00\xd1\x2f\xc7\x8a\xd2\x49\xc6\x35\x89\xeb\x22\x1e\x3b\xf0\xdb\xe9\x2b\x54\x5e\xdf\xda\x2b\xfd\x58\xec\xd7\xf3\xb1\x1e\xdd\xd4\xc6\x37\xe2\x19\xf8\x52\x6b\x3b\xad\x48\x94\x6c\xb3\xca\xf0\x32\x74\x39\x3e\xc7\xec\x10\x6a\x82\xcb\x0c\x49\x78\xc6\x21\xbf\x8a\x5d\xbc\xa9\x61\x87\x4b\x39\x76\x48\x91\xda\x0e\x6f\x56\x40\x02\xd7\x48"
		"\x98\xb7\xa0\xa0\x32\x80\xb5\xbc\xcb\x5c\xe7\xb4\xb6\xeb\xa6\xfd\x58\x3c\xd1\x1c\x56\x2a\x2a\xa3\x29\xfe\xf8\xe3\x18\x34\x9a\x2c\xea\xbf\x08\x2a\x93\x2c\x2b\x17\x24\x01\xdc\x4c\xfb\x16\xb0\x12\x3c\x3f\xc2\x2e\xce\xeb\x07\x5d\x49\xfe\x7a\x6b\x7e\xc2\x9e\xf8\x52\x97\x91\x3c\xec\xf3\x5e\xb9\x36\x45\x95\xed\x9e\xc5\x65\xfb\x01\x65\xe3\x12\x7f\x25\x6c\xcb\x6b\x7f\xec\xee\x8f\xa6\x9e\xf3\xd4\x99\x5c\xd1\xe8\x5c\x82\xb7\x41\x04\x5c\x40\xdb\xb2\x9a\x72\x0e\x66\x01\xf1\x45\xe2\xf2\x8d\xb3\xcd\x7f\xc9\x88\xf6\x38\xd9"
		"\xc7\x37\x15\x14\x97\x86\xd3\x88\x40\xb9\x05\x0b\xfd\x42\xfe\xe1\x11\x9f\x54\x80\x03\x7f\x44\xb9\xd7\xe0\x5d\x4b\x69\x67\x93\x39\x2c\xea\x98\x62\xde\x12\xb4\x49\x7a\xe0\xb5\xf2\xa9\x38\x41\x56\xb3\x6e\xcf\x84\xff\xe1\x6a\x41\x46\xec\xe9\xf1\xdd\x87\xa9\x82\x89\x31\x05\x99\xfd\xd1\xfe\x30\xba\x84\x0a\x06\xd3\xe2\x29\xd3\x8f\x7c\xf2\xbe\xe2\x0b\x24\xd1\xaf\xee\x67\x9d\x3c\xbd\x93\x12\xc9\xae\x17\x51\xa6\xb3\xe4\xad\x8c\x94\x06\xba\xe2\x37\xbb\x4b\xe6\x04\xb0\x4d\xeb\x2b\x1e\x3a\x7b\xe1\x82\x11\x95\xb6\xd8\xc2"
		"\xa1\x59\x22\xb0\xe6\x89\xa8\x9b\x68\xae\xe8\x3a\xf4\x4e\xa6\x44\x71\xd2\xf6\xc9\xd5\x31\xf2\x4a\x08\xbd\x61\xa5\x5b\xd7\x4b\x15\x77\x71\x7d\xa2\x6d\xb5\xeb\xf9\x03\x3d\x4f\x22\x31\x2e\x7d\xa6\xaf\x7f\xef\xb9\xec\x67\xbb\x34\x9b\x52\x01\x7d\x01\x83\x36\x47\x3e\x92\x13\x7c\x4c\x96\x96\xc5\xfe\xe5\x1a\x7e\x23\xb0\x6e\xb6\xa3\x34\x9b\xca\x0a\x71\xf2\x91\xde\xdc\xdf\x94\x1c\xbe\xd1\xce\xd5\x4a\xa8\x4a\x9d\xa3\x47\x2e\xf3\x68\xe3\x04\x9e\xbb\xe5\x1a\x07\x22\xac\xa4\x0c\x62\xab\x40\x10\x28\xa4\xd6\xfe\xb9\xd0\x41"
		"\x97\x63\xf0\x57\x74\x3e\xa1\xa8\xdf\xa9\x78\x09\x56\x7e\xc3\xcc\x51\x0c\x91\x28\xa7\xdb\x68\xf2\x52\x4c\xb9\xcc\xd7\x65\x49\x52\xd5\x1d\xe2\xc2\x14\x20\xc6\x56\x26\x1d\x65\x0f\xcd\x4f\x45\xcd\x3f\x3e\x21\xdb\xfa\xfa\xf3\xdb\x67\x8b\x5b\x34\x64\x13\x45\x06\x8c\x4f\x2d\x2c\x46\xb4\x5d\xa8\xf5\x0e\x93\x43\xbd\xd8\x86\xf6\xf2\x88\x80\x2f\x3d\x8e\x76\x36\xd2\xc0\xf0\x15\xcf\x77\x5e\x73\x6b\x05\x6a\xf2\x57\x59\x8a\x7e\x59\x82\xc9\xcf\xaf\xb1\xd9\x16\x15\x62\x47\xb4\xe1\x19\xc0\x62\x29\xf1\x58\xf6\x9f\xa9\xe7\x3d"
		"\xfb\x14\xfc\xd7\x16\xca\x53\xd2\x5e\xa5\xa4\x84\x76\x53\xf3\x3b\x05\xb4\x9f\xcb\x27\xfa\xe8\xe6\xc3\xd3\x25\x95\x2a\x98\xa7\x97\xe6\x0b\x43\xd4\x53\xdd\xcc\x28\x46\xc3\x6a\xb7\xe6\x4c\x4f\x03\x58\x7b\xd2\x42\xc2\xe1\x7e\x3e\xb8\xf9\xa1\x40\x7e\xb1\x5d\x32\x07\x18\x08\xbb\xe2\xfb\xdf\x3f\xc3\x32\xc3\xe7\xf8\xfa\x1a\x6c\x55\x17\xd3\xfb\x93\x15\x4b\xbb\xe7\xf7\xfe\xf7\x71\x15\xba\xd4\x48\x9a\x02\xb7\x91\x55\x46\x08\xa5\xe3\x23\x39\x51\x6f\x58\x32\xc4\x9c\x45\xb1\xb1\x4c\x13\x67\xa2\x33\x67\xdd\x9f\xdd\xde\x7c"
		"\xf2\xd5\x18\x40\x2b\x02\x40\x5b\x77\x82\x54\xc8\x17\x03\xf4\xca\x52\xe5\xf8\x9c\x24\x29\xe2\x26\x2b\xbf\x57\x82\xa1\xbd\xd8\x4d\x68\x3c\x85\x3e\xc0\xa7\xf3\x61\xfe\x45\x1b\x3a\x2b\xe6\x59\x4b\x98\x0c\x4e\xa3\x6f\x70\x8e\x73\x67\x2e\x78\x60\xff\x6c\x27\xe6\xd9\xd8\x40\xa9\xad\xa4\xb6\x85\xf7\xeb\x58\xc1\x3c\x10\x90\x8b\xa6\x25\x60\x01\x2c\xe0\x70\xef\x7e\xc3\x9f\xb3\x3c\xdc\x81\x45\x9c\xbd\x05\x36\xe2\x59\x52\x48\x3f\xbe\xa4\x6b\x4b\x6b\x37\x8c\xe9\xf4\xed\xb7\x51\x20\xd6\x25\x35\xf6\x0f\xa2\x01\x54\x24\xe2"
		"\x8c\x63\xd3\x9b\x41\xe4\x47\x78\xc4\x7f\xd1\xe1\xa8\x4f\x2d\x04\xf9\xcf\x84\x36\xa8\x8b\x63\xd9\x23\xf3\x84\x1a\xc6\xe1\x83\x5d\x97\xd6\x4d\xac\xd3\x8b\x2f\x46\xec\xb9\x97\x3b\x89\xae\x3f\x72\x16\x50\x6c\x40\xcd\x48\x36\xbe\x53\x68\x29\xbe\xc4\x25\x5d\x83\xd2\x74\xd7\x18\x17\x32\xbb\x3d\x17\x46\xd3\x4f\x38\x10\xe5\xf6\x5d\xd1\xbd\xd9\x34\x0e\x65\x29\x36\x61\x44\xf4\x8b\x08\x20\xaa\x1d\xca\xad\xdc\x62\x50\x47\x71\xad\x1d\x51\xc6\x87\x7c\x15\xf1\x21\x90\xae\xe1\xb4\x78\xc9\x8f\xa5\x17\x69\x15\x0d\x10\x17\x38"
		"\x7b\x52\x61\x76\x3a\x51\x73\x7f\xa7\x4d\xb0\x72\x70\x01\xe0\x78\x1a\xd4\x78\x22\x8a\x80\xbf\x14\x19\xaa\xca\x58\x74\xdc\xc6\x6a\x4a\xe0\xf8\x7a\xdb\x3f\x3b\x5c\x28\x7d\xcf\x7e\x8f\x19\x3d\xaa\x28\x70\x3f\xce\xd9\xf4\x7a\x25\x1d\x3b\xcd\x66\xae\x28\x90\x2a\x7e\xf6\x28\xc9\xc1\xe4\xea\xfd\xe1\x11\xdc\xf1\x4d\x46\x7b\x1a\x9a\x93\x50\xcc\x69\xf2\x47\x86\xab\x3d\xaf\x7b\xac\x35\x76\xce\xe9\xf4\xb9\x8f\x7e\xff\xf4\x1e\x47\x65\xb8\xcc\x40\x21\x2b\xb8\x60\x95\x6d\x1e\xf2\x23\x11\x6a\x38\xbe\x1c\x89\xd2\x1f\x4b\x49"
		"\x3c\xbc\x31\x8a\xe5\xde\xbf\xf7\x84\x9b\x06\xb4\xe2\x9c\x13\x80\xc0\xa5\xb4\xe8\x87\x46\x15\xb8\x1f\x3d\x59\x70\xf3\x8e\x4a\x48\xac\xcf\xb1\x76\x68\xfb\xa4\x3b\xe0\x5f\x1b\xb6\x77\x29\x84\x1d\xeb\x82\x91\xae\xe0\x28\xec\x6f\x92\x09\xef\x0a\xdf\x41\x22\xaf\x58\x90\x56\x52\x2a\x2d\x03\xd8\x0f\xa2\x41\xa7\x2f\x51\x41\x6f\x6d\x76\x0b\x17\x60\xaf\x31\x3c\x4c\xdd\x8d\x28\x39\x50\x88\xa6\xc8\x22\xa6\xdb\x49\xd1\x9c\x60\xd8\x46\xb6\x00\xe4\xff\x55\xd4\xbe\x50\x29\xfb\x7e\x0e\xac\x0e\x16\x4d\x05\x3b\x83\x61\x6c\xf2"
		"\x01\x32\x7d\xff\xe6\xd0\x68\xda\x39\x98\xfd\x52\x87\xc1\x99\x0e\x6d\x43\x27\xe6\xde\xcb\x09\xa3\x58\x26\x02\x72\x40\xf0\x06\x5f\x8c\x4d\xc0\xd6\x9b\xa2\x39\x48\xfd\x40\x12\xb2\x4a\x7c\x89\xf2\x53\xae\x08\x52\x1e\x78\x52\xa1\x62\xf1\x28\x17\x5f\xf7\x13\x7f\x1e\x8a\x2a\xb5\x56\xbe\x17\x37\x40\xc1\xc6\x3b\x34\x97\x27\x6b\xf8\x8e\xe5\x70\x21\xbf\x2a\xc6\x2f\xf0\x23\x25\x75\x58\xfc\x66\xc6\x17\x47\x6d\x0f\xc3\xbc\x2b\xf1\x4c\xdf\x4d\xf8\x25\x73\x61\x96\x75\x31\xc7\xbe\x55\x8d\x95\xf1\xe3\xf0\xf5\xcc\xdd\x15\x7f"
		"\x09\x4e\x15\xd7\x27\x45\xf2\xe3\xd3\xd4\x1c\x57\x54\x5d\x5a\x68\xe2\x18\x2b\xf7\xfa\x84\x06\x89\x1f\x09\x7f\xf3\xf9\x05\xd5\x20\xc8\xdc\x99\xcb\x79\x5e\x32\x56\x5c\x48\xf1\xbf\xe3\x36\x06\x10\x9f\x13\xb3\xa1\xa9\x94\x17\x49\x5b\x16\x64\x3b\x4d\xd5\x82\x6c\x1d\x91\x1d\x67\x4c\x17\xbd\x68\x6c\x48\xb5\x7f\x09\x7b\x58\xce\x4c\xb1\x2a\xa9\x5d\xbe\x26\x57\xce\x81\x06\x45\xec\xc6\xd3\x41\x26\xf9\x67\xe2\xf7\xe9\xc9\x41\x03\x27\xed\xf6\x0f\xfa\x08\xcf\x3f\x82\x58\x2b\xd3\x9c\xe2\x17\xb1\x79\x1e\x82\x5a\x4e\x50\xea"
		"\x99\x5e\xb6\x98\xeb\x69\xc9\xc6\xae\xf4\x3a\x57\x9b\x9b\x32\xdf\x3f\x5f\xea\xbc\x69\x02\x09\x98\x84\x0d\xf2\xeb\x4e\xd0\x5a\xa6\xaa\x1c\x6c\x68\xa5\x6b\x89\x8b\xfc\x89\x60\x88\xf4\xe3\x98\x25\xa8\x73\x9d\xd6\x6e\xaf\x6b\x4a\xfe\x05\xf6\xba\x15\x0a\xfa\x28\xfe\x95\x3b\xae\x18\x10\xd8\x58\xd0\xd0\xdf\xc5\x85\x63\x2c\x7f\x98\x41\x0a\x39\xb2\xf2\xa3\x94\xd7\x48\x2a\xc9\x3d\x90\x1e\xdc\x9f\x5d\xfd\x21\x63\x97\x5a\xb5\x9f\xdc\x17\x32\x6d\x32\x42\xa8\x20\x15\xbb\x18\x27\x96\xd3\x8b\xc3\x47\xe6\xab\x1d\x80\xad\x2a"
		"\xd8\xa8\x0e\x2a\xef\x4e\xef\xe1\x24\x17\x96\x9b\xc4\x6c\x30\x05\x1a\xff\x93\x62\x64\x30\x63\x92\xb5\xd3\xd8\x21\x76\x73\xf8\x49\x18\x42\x74\xce\xe4\xc4\xb3\x60\x35\xe8\xf3\xca\x98\xb6\x35\x1c\x82\xe1\x4a\x06\xe0\xeb\x10\x75\x95\x1b\x41\xe7\x2b\xd0\x41\x5f\xc0\x45\xb0\x0f\xc1\x8b\xc5\x30\x80\xb0\xa2\x08\x29\xdb\xdc\x81\xb8\x53\xf8\x02\xe6\xa7\x80\x9f\x7d\x1c\xcd\x94\x21\xc3\x87\x44\x90\x97\x6c\x74\xa4\xd6\x54\xfc\xc1\xdb\x61\x5f\xd8\xd6\x8d\xcc\x4a\x1c\x5b\x91\x50\xd2\x60\x33\xbf\xb8\x87\x33\x7d\xe9\xb8\x2d"
		"\xb4\xac\xe8\x38\x7f\x69\x6b\xbd\xe8\xaa\xbb\x61\x4a\x34\xfb\x73\xa2\xf6\x8d\x9e\x8f\x5d\x6d\xa1\xab\xb6\xc7\x6f\xfd\xbe\x86\xba\xeb\x73\x47\x57\x57\xbe\xc1\xf7\x59\x56\x13\xe9\xa6\xf9\xfc\xa9\xba\xf9\x89\xc2\x3f\x67\xd8\x3f\xb1\x90\xc6\x01\x1a\xa8\x0f\x60\xc6\x28\xae\xda\x91\x34\xad\xda\x3e\xac\xe5\x5a\x62\x1f\xf0\xd2\xc1\x55\x1c\xcd\xea\x27\x62\x44\x07\xed\x6d\xa9\xfe\x57\x66\xb0\x92\xe5\x8a\x0d\x5f\xdd\xdd\x98\x8a\x18\x1c\xa0\xc8\x4b\x3c\x96\xd8\x82\x0b\x35\xcb\x2a\xc2\x44\x8e\x98\x85\x42\x37\xa8\xff\x89"
		"\x3f\xca\x8e\x3d\xd5\x2d\xaa\x32\x45\x8c\xf9\xf5\xf7\x2e\xef\xa1\x76\x4b\x51\x2e\x99\x0a\x42\xf9\x0b\x59\xdd\x59\xcb\x65\x47\xef\xcd\x04\x10\xd7\x66\xfb\x4d\x6e\x63\x66\x9a\xfc\xf3\x79\x79\x36\xf7\xc4\xd5\x84\x63\x17\x4c\x30\x27\x18\xca\xeb\x36\xb2\x7b\xdd\x5f\xe0\x09\x8c\xb0\x54\x8d\xa5\x0b\x31\x1d\xf0\xc1\x6f\x14\x38\x5c\xe4\xdf\xa8\xc4\x0a\x97\x89\x0b\x03\x64\x29\x0b\xa1\xe8\xeb\x60\x38\xa0\x87\xac\x0c\x5c\x43\x44\xe8\x36\x56\xf0\x99\xd5\xee\x12\xb5\xb2\x89\xa4\x1e\x9c\x6e\xeb\x50\x58\xc4\x36\x3d\x97\x36"
		"\x6e\xee\x57\xb8\x75\x33\x57\xf5\xd8\xe2\x84\xc9\x26\xa0\x91\xc7\x1a\x7e\xf4\x58\xf3\xc6\x22\x8f\x40\xb0\x46\xbb\x41\x03\x8b\xce\x85\x28\x2f\xfe\xba\x01\x4d\xaa\x85\x77\x39\x9d\x8d\xd8\x27\xf3\xaf\x4a\x7f\x54\xe6\xf2\xb7\xe4\x4e\xa7\x90\x19\xba\x55\x21\x10\xa7\xd7\xe5\x41\xad\xe2\x78\x33\xda\xc2\xfa\x53\xd9\x74\x9e\x0e\xf7\x94\x15\x5d\xe6\x06\xf1\x30\x76\x22\x44\xe0\x29\x3a\xf1\xbb\xfd\xeb\xac\x42\x3e\xd5\xd3\x09\x38\x9d\x72\x4f\x62\x7d\x74\x31\xea\x58\x96\xd1\x3a\x28\x80\xff\x9a\xe7\xd2\x21\xf0\xba\xd4\x08"
		"\x93\x0b\xaa\x2c\x30\x32\x02\x68\x57\xe2\xdf\xa4\xc5\x97\x92\xfc\x19\x5c\x29\x60\xd8\x55\xcb\xfc\x3e\x98\x29\x96\x70\xf2\xe2\x81\xc0\x81\xc8\x47\xe4\xee\x25\x04\x39\xfe\xf8\x58\x35\xe2\x8c\x30\xa7\x89\xdd\x28\x9a\xe4\x30\x8d\x3f\x6d\xe5\x8b\x1f\x38\x9c\x2d\x34\xfe\x25\xbc\x08\xe2\xc4\xd8\xb5\x8b\x39\x0d\xa8\x16\xf0\x2f\x6d\x21\x36\x6e\x38\x63\x85\x15\xee\x35\x41\x37\x61\x97\x2b\xb0\xfb\xf7\xc0\x04\x58\x54\x86\x3e\xb5\x6b\x28\x32\x54\x73\x70\x9b\xa6\x34\x1e\x32\xcf\xdf\xe9\x4e\x4c\xd8\x2f\xb3\x6b\x03\xe1\xd9"
		"\x23\x47\x95\x73\xcd\xd7\x87\x47\x9e\xde\xea\xda\xe2\xe3\xc9\x1a\x47\x15\x50\x97\xad\x6d\xe1\x89\x97\x7a\x53\x5d\x18\xcf\x94\xab\xc0\x96\x1a\x44\x4f\xaf\x8f\xe4\x87\xfe\x31\x4b\x0c\xc0\x45\x8f\xe0\x70\xf9\xfa\x86\xf3\x72\x59\x72\xa5\xce\xbf\x4c\x79\xf5\x2b\xa6\x11\x23\xbf\x9d\x9a\x40\xe2\x55\x16\x81\x9b\xd6\x00\x5f\x98\x7a\x48\x9a\x50\xd9\x7e\xe8\x13\xd3\xd8\xe6\xce\x7f\x23\x4d\x6c\x03\x88\xed\x0e\x23\x23\xeb\x3f\x47\x80\x2a\x6d\xc2\xae\xe3\xbc\x37\xd7\x72\x82\x78\xe4\xee\x95\x72\x3d\x6d\x8b\xb9\xd3\xa8\xd1"
		"\x42\x9d\x71\x27\x53\xec\x3e\xaa\x97\x41\x70\x6e\xea\x47\x88\x61\xfa\x1a\x22\x61\xef\x7f\x79\x24\xe7\x76\xed\xab\x11\xdc\xe7\xcf\x7a\xfb\x6b\x41\xec\x56\x1f\x8f\xbb\xac\x14\x94\x39\xe9\xf7\x2e\x08\x3f\x22\x20\x47\x34\x3f\x01\x71\xf5\x19\xad\x58\x95\xaf\x73\x62\xc5\xc5\x59\x9b\x69\x09\x11\x5f\xa4\xc1\x80\x18\xec\xd1\xda\xa4\x1b\x00\x8c\x7a\x70\xcc\x15\x7f\x14\x7f\x58\x07\xd3\x08\x9e\x18\x52\xa0\x7b\xbb\xa1\xde\x49\xd3\x24\x0a\xab\xfe\x14\x93\x39\x75\xba\x05\xe1\x7b\x14\x22\x5e\xc6\xbf\x12\xb7\x5d\x31\xf9\x11"
		"\xc8\x6b\x47\xee\xc9\xb6\xf0\x5c\xa4\xe3\x46\x1b\x40\xbf\xbb\x51\xf6\xfc\x5d\x71\x74\xac\x0f\x82\xb3\x47\xb2\x50\x4b\x85\xd3\xd3\xbc\x79\x9d\x36\xe1\x7e\xd8\xc3\x41\x15\xd3\x86\x6a\x43\x66\xa4\xd2\x82\x70\xd0\x98\x83\x9a\x0e\x47\x8a\x21\x48\x64\x43\x06\x62\x02\xa7\x41\x17\xd4\xcb\xea\x37\x2e\x05\x10\x5b\x71\xc3\x4b\xdb\x70\x49\x7f\x52\x9e\xdb\x68\xb4\xef\x95\x0b\xcb\x7c\x5a\xb0\xaf\xfc\x62\x39\x26\xf0\x02\xb3\x3b\x89\xd6\x0a\x63\xff\xa1\xfa\xf1\x0b\x24\xb9\xaf\x0a\x44\xd5\xe7\xdd\x23\xa5\x32\x70\xc6\x01\xd4"
		"\x42\x4d\x12\xd1\x1c\xe4\xfd\x75\x4c\x8d\x4b\x3f\x3d\x8f\x2e\x16\xa4\x4d\x01\x2f\x34\x18\x50\x0a\xc0\x54\x91\x95\xce\x02\x71\xde\x80\x21\xea\x35\x30\xa1\xcb\xfd\xdd\xb0\x6a\x4a\x45\x4e\x8d\x8e\xf8\x91\x74\x18\x8a\x98\x25\x4b\xc8\x9a\x9f\x61\xd6\x39\xd1\x31\xf1\xb7\x47\xba\x77\x37\xe4\xb0\xf3\x5d\xcb\xa4\xcc\xa9\xf4\x59\x0f\x3f\xe7\xa7\x4f\xe6\xfa\x27\x27\xff\xaf\x72\xe8\xa2\x47\x6c\xd1\x10\xc3\xea\xda\x5a\x8b\xe0\x0e\xb6\x83\xe7\x64\x2b\x78\xb0\xce\x8b\x04\x8a\x2d\x87\xb5\x49\xa1\xc9\x69\x8f\x59\x2c\xc3\x61"
		"\x24\x67\x4a\x1c\x3b\xb9\xe8\x60\xce\xd7\x8c\x8f\x4b\xf9\x3a\xb7\x6c\x5f\x38\x02\xb0\x3f\x95\xe9\x0d\x2b\xb4\x80\x75\xb8\x9a\xed\xb1\x00\xb6\x06\x27\x1e\x4e\xe4\x0a\x7d\xb9\xeb\xbe\xc4\xcb\x6d\x79\xc1\x5e\xbf\x95\xf6\x91\xf4\x19\xaa\xf1\x1e\x8e\x67\x41\x2f\xc7\x2b\xce\xa9\x3e\x45\x1b\x8a\x49\xe0\x55\x90\xde\x16\x7b\x9c\xc0\x74\x9b\xbe\x71\x0e\x0b\x4b\x0e\xd9\x2c\x81\xb0\xfb\x5e\xc3\x88\x84\x72\xdc\xce\xb1\x19\xaa\xee\x9e\xcc\xd5\x82\x91\x0d\xa3\xd1\x45\xbc\xf6\x9b\xe3\x97\x41\xae\xbc\x80\xdf\x16\x0d\xdd\x5b"
		"\x64\x0c\x3e\xc4\xf2\x9b\x08\x01\x19\x6d\x3b\xe1\xc7\x1c\x8b\xf6\x04\xf0\x58\x93\xdb\xff\x23\x67\xe1\x3e\x65\xf9\xad\x8b\x6c\x41\xb0\xe7\x7d\xc9\x53\x3a\x07\xb3\xa8\xbc\xc5\xbe\x33\x45\xc8\xe5\x8c\xea\x28\x4c\xa7\x75\x23\xb8\x49\x96\x3f\xdc\xd7\x09\x33\x00\x76\xf4\xeb\xd4\xef\x8b\xbd\x97\x30\xa5\x21\xb2\xcd\xe9\xcf\x66\xf4\x36\x3f\x1a\xb9\x01\xef\x93\xb1\xff\x41\xf3\x2c\x04\xa4\x9d\x8c\x06\x00\xf6\x6e\x88\xa9\x70\xa3\x69\x26\x5a\x2a\x42\x5e\xfb\x74\x39\xed\xa9\x73\x96\xc7\xe0\x36\x52\x62\x8c\x86\x7f\x5f\xb7"
		"\x0b\x01\xa7\x17\xa3\x43\x63\x7c\x54\xf9\x7e\x37\x53\x3f\x31\x2e\xdf\x1c\xfe\xf5\x58\x7c\x05\xd6\x65\x35\x89\x55\x93\x1e\x44\xe4\x61\xf9\x55\x70\x4e\xd7\xb2\xd9\x2a\x12\x7d\xb5\x7e\x63\x4a\x5e\xd7\x1c\x21\x98\xc1\xde\x64\x88\x2f\xa6\xfc\x31\x61\x5b\xa2\xf7\xf8\x34\x74\x27\x69\x1c\x30\x97\x72\xf1\x48\xc2\x0a\x58\xb5\x8f\x8c\x33\x7b\x1c\xbe\xcb\xff\x10\x6a\x23\xe8\xf7\x3e\x9c\x81\xc5\x37\x94\xdc\xce\xf7\x7b\x79\x24\x02\x29\x5e\x22\x50\xf3\x42\x40\xb0\xb0\x1d\x3d\x9c\x99\x3b\x14\x89\x50\x9b\xc3\x18\x1e\x22\x40"
		"\x06\xb7\x66\x9e\x99\x6a\xfc\x90\x08\x61\x0a\x13\x7d\xde\x8a\x9f\xe5\x51\x24\xf8\x3f\x14\x34\xcd\x6e\x60\xeb\x87\x7f\x36\xa3\xb4\x83\x57\x85\xce\xf8\x14\x32\xff\x85\xfe\x71\xad\xe9\xa9\x18\xbb\x7b\x86\x9f\x85\x54\x58\xc7\xe8\x8c\xb1\x5d\x06\xc6\x78\x2b\xf4\xac\x67\x72\x49\x62\x72\xa7\xb6\x68\xcf\xbe\x42\x66\x52\x01\x3b\xe5\xcb\x5f\x32\x0b\x5b\x87\xb7\x04\x58\x81\xc0\xa8\x26\x94\xdf\x8b\x8e\x5a\x09\xca\x88\xf4\x48\x83\x6b\x61\x06\x88\xbd\x30\xf6\xba\x23\x81\x68\xa0\x80\xdb\x2b\x8c\x20\xe4\xdb\xc5\x7d\x70\x97"
		"\xec\x6b\x04\x29\xa7\xf1\xb4\x4f\x00\x48\x8a\x05\x29\x72\x6b\x8e\x4f\xac\x5b\xb3\xe7\x49\xc3\x27\x28\x0b\x2e\x0c\xdf\x1f\x85\x5d\x3f\xba\x71\x12\xdc\x51\xa8\xbe\x25\x39\xb3\x93\x3a\x36\x0b\xa4\x5b\x84\xdb\xdb\x92\x5f\x15\x61\x99\xe3\xf8\x31\x14\x1c\xba\x43\xf5\x5f\xfc\xa0\xf7\x57\x50\x36\xed\x76\x06\x5f\x90\x01\x1e\x3b\xa2\xea\xf9\x13\x46\xbc\x53\x20\xb7\x37\x08\x5a\xaf\x22\x1b\x35\x22\xd4\x7a\xbb\x81\x4e\x30\xd9\xb6\xbd\x11\xfe\x40\xc9\xb5\xc8\x9c\x9f\x46\xd5\xb3\x96\x5f\x6b\x41\x89\xce\x95\xda\x2c\x8b\xf3"
		"\xd8\x88\x65\x4b\x1c\xbb\xf2\xec\x3e\xce\xc8\xa8\xf1\x68\x40\x34\x7b\x5e\x5f\xae\x03\x7c\xcc\x6c\x56\x33\x3e\xd2\x9a\xe7\xac\x21\x36\x48\x3d\xae\xdf\x7f\x0f\xbc\xa1\x94\x29\x55\xf6\x86\xa3\x7e\x29\x24\x77\xde\xe3\x93\x35\x54\x7f\x6d\x75\x85\x8d\x5a\x7b\x8b\x6b\x99\x14\xa9\xa1\xed\xe1\xfa\x62\xc8\xaa\xe9\xe7\x73\xff\x5c\x71\x09\xae\x53\x25\x29\x19\xd4\x51\x31\x31\x2e\x50\x1d\xe4\x96\xd2\xa1\x03\xe9\x57\x5c\xfa\x94\xcc\xa2\x0e\xa8\xd8\x23\xbb\xdd\x65\x53\x1f\x0e\x54\xb7\x7f\xb6\x4b\xe5\x94\xde\x0f\xb0\xbc\xbc"
		"\x5f\x9f\x42\xee\x38\x46\x41\x88\x76\x6c\x08\xcb\x0f\xd6\xa4\x35\x88\xad\xd1\x2f\x95\x2b\x30\xb1\x9f\x1f\x6d\xbe\x53\xa1\x0d\x48\x62\xee\xfb\xd6\x74\x04\x8b\x62\x64\x75\x2e\x7f\x96\xba\x12\x3e\xbf\x9d\x88\x7c\xba\x1e\xee\x5a\xa8\x0c\x1f\x63\xff\x6b\x12\xf2\xa9\x8c\x29\x72\xf3\x37\xee\x61\x65\x2d\xfe\x57\xe0\x1a\x28\x3e\x71\x33\x90\x42\xde\x6f\xf8\x72\x54\x85\x67\xfd\xd5\x58\x6e\x79\x67\xe2\xc5\x6c\x00\xad\x76\xec\xcf\x3b\x32\x46\x7c\xed\x2f\xe6\xb6\x35\x66\xcf\xe4\x63\x51\x1a\x70\x0c\xa1\x25\xcc\x1b\x60\x71"
		"\x2a\x56\x50\xbe\x5e\x21\x51\x2a\xba\x1c\xee\xfc\xbb\xfc\x54\x21\x87\xf2\x97\xe0\xf4\xa2\x30\x88\x94\xd1\x49\xdf\xff\xa0\x23\xd2\xe1\xa7\xb8\xe4\x0c\xee\x43\x98\xff\x49\x06\xc6\xe3\x5b\x85\xb6\x64\xcf\xbf\x25\x40\xd9\x4e\x19\xba\xed\xf4\x0c\xdb\x31\x93\x4b\x56\xe7\x5f\x86\x3d\x90\xe9\x09\x5e\x43\x20\x30\x80\x65\x33\x16\xa9\x8f\x09\x1e\x16\x72\xf8\x12\xe5\xbc\x52\x9e\xac\xdb\xd6\x19\x82\xd2\xc4\xca\x0f\xe1\x44\x89\x3a\xee\x35\x53\xd2\x3b\xb2\xee\x9e\x26\xa3\x6b\xf0\xe6\x5a\xab\x68\x97\x73\xe2\x37\xfc\xa2\x19"
		"\xfe\x08\xc8\x5c\xba\x49\x33\x03\xfa\xbb\x95\x11\xb2\xa3\x19\xc6\x36\xfc\x87\x1d\x05\x43\xaa\x27\x84\x10\x9d\x21\xab\xe8\x5a\x0d\x42\x6d\x7b\x93\xb2\x5b\x41\x03\x06\x38\x64\x56\x8d\xe9\xc0\x1a\xb4\xa0\x08\xba\xe1\xe5\x8e\xd1\xee\x4d\x9f\x7e\xe6\xe4\x9c\xc5\x5f\xf7\xb8\x1a\x60\x5b\xe8\xac\x1d\x1e\x0c\xd2\x64\xbc\x94\xc0\x46\x6d\xc1\xdc\xd1\x5c\xba\xce\x01\x3b\x1c\x71\x1b\xfd\x61\xf7\x87\x0d\x4f\x5c\x10\xe6\x12\xd4\x92\x9e\x3a\x11\x30\xa4\x68\x3e\x9b\x0d\x51\xdd\x2f\x17\x76\x54\xf6\xfb\x2a\xda\x62\x87\x18\x36"
		"\xa2\xe7\xd2\x02\x42\x6e\xa8\xba\x0f\xbe\x8a\x99\x0b\x57\xa5\xd2\xd2\xff\xb8\xd2\x53\x17\xd8\x26\x2f\xe7\xdd\xab\x51\x26\xb9\xe7\x33\x38\xbf\x1a\x75\x8b\x89\xca\x06\xac\x42\xf0\x14\x65\x94\xf8\x06\xaf\x04\x42\x52\x55\xaf\xb8\xf5\x9d\x86\x9e\x2a\x07\x52\xf6\xb1\xe3\x3b\xfb\xf6\x0f\xc6\xfa\xdb\xe4\x39\xf9\x28\xb8\xe5\x0e\x42\x09\x75\xfd\x89\x73\x0e\x91\xf4\x2b\x57\xfc\x90\x44\x09\xdb\xf5\x27\x4a\xf1\x5c\x42\x39\xa4\xca\xc2\x56\xd1\x28\xb7\x43\x6e\xe9\x85\x07\xb0\xbb\xe3\x26\x54\x04\xcf\xa9\x14\xe4\x0a\xfe\x8b"
		"\xda\x53\x15\xda\x2e\x1a\x4c\xc1\x08\xf9\x23\x9c\x1c\x21\xbd\xbf\x27\xce\x9d\xda\xb1\x01\xcb\x13\x6e\xb4\x87\x0d\xb7\x89\x2d\x17\x1b\x23\x4d\x71\x34\x4a\xd3\xd1\x7f\x93\x43\x41\x94\x84\x60\x0d\x80\x9f\x9c\x08\x2d\x91\x4f\xab\x57\xd6\x3f\x4c\x9b\x05\xe4\x0e\xce\x53\x5f\xeb\xae\x4e\xce\x81\xee\xcb\xef\x5b\x35\x9f\x0d\x25\x95\xd2\x30\x8b\xce\x26\xe4\xfe\x84\xe2\x7d\xc4\xa7\x1f\xe9\xe0\x17\x8c\x52\x24\x1d\x98\xfe\x4a\x34\x53\x22\x63\x69\x78\xd6\x49\xba\x3a\xec\x4c\xe1\x32\x53\x24\xf4\xf5\x8c\xf6\x77\xa2\xe7\x34"
		"\xec\x80\x7e\x9b\x86\x31\x76\xa8\xad\x77\x6c\x22\xfb\x6e\xae\xdf\xbb\x14\xbc\x73\x2f\x73\x6b\xd4\x99\x07\x9a\xd6\x6b\x80\xff\x99\x4d\xd0\x71\x34\x58\x34\xaf\xb8\x79\x1e\x2f\xec\x21\x36\x50\x42\x90\x89\xb0\x71\xfb\xe7\xda\xa9\x42\x4c\x82\xa1\x08\xb5\x9b\xd6\x7d\x6d\xec\x54\x95\x8b\x0c\xed\x06\xa0\x99\x2c\x68\x30\x21\x69\x94\x88\x2c\x85\xa5\xad\x36\x87\x4c\x46\xc1\x75\x79\xe7\xe6\x74\x8a\xc2\x78\x69\x4c\x4d\xf8\x4e\x8a\x4b\xbb\x98\x17\x13\x0c\x8b\xfc\x29\xda\x7e\xac\x23\x11\x94\x6d\x19\xf8\xa9\x84\xff\x21\xde"
		"\xa5\xbc\x70\xde\xe8\x79\x39\x8e\xc0\x1c\x83\x76\x38\x0d\xc2\x32\xc1\xec\x59\x24\x8c\x1a\x79\x70\x43\x26\x19\x94\x67\xdb\xc9\xd0\x13\x16\xdb\xde\x7c\x4b\xc8\x62\x30\x5c\xf6\x47\x47\xad\x12\xa5\x0b\x7f\x10\xfe\x24\xae\x22\x80\xea\xab\xd6\x2f\x32\x7d\xdd\x65\xc8\x13\x92\xba\x16\xc7\x0e\x11\x06\xec\x8e\xaa\x46\x02\xd8\x97\x04\x6b\x38\x23\xfe\x4f\x13\xf5\xb2\xcb\x92\x73\xa4\x60\x33\xf8\x8d\xad\xe1\xf9\xa3\x8b\x69\xe7\x05\x99\x88\xb5\xd0\x7b\x17\x93\xe5\xd0\xea\x2d\x1b\x73\x5c\x0c\xe5\x5a\x08\xf3\x10\x30\xfa\xa6"
		"\xaa\xb8\xde\x21\x10\x68\x17\x7e\xc6\x3c\xa7\x24\x30\x99\x1b\x2d\xfc\x58\xcb\xef\xfa\xbb\x22\x18\x9d\xa8\x5e\x56\xa3\x6b\x77\x11\x5f\xbd\xb4\x6f\x57\x85\x31\x0d\x57\xed\x4c\x95\x68\xf0\xe8\x2a\xba\xe5\x51\x5a\xc1\x9b\x6b\x22\x28\x47\x1c\xb0\x12\x29\x97\x0c\x80\x91\x4e\xa4\xb5\xa3\xf3\xdb\x79\xfd\xa2\x98\x44\xfe\x0f\x3d\x64\x58\xbb\xdc\xb2\x54\x3c\x7d\x81\xa4\xd4\x07\x36\x29\x9c\x92\x55\xf8\x3b\xfa\xdf\xcc\x43\x49\xc1\xcd\x55\xb8\x82\x5a\x8c\x98\x0d\x0f\x25\xf3\x80\x45\xa6\x3e\xf0\x79\x8e\x2c\x79\x7f\x13\x7f"
		"\x07\x32\x54\x4e\x1d\xf7\x0a\x2d\xd9\x3f\x40\xcb\xe3\x5a\x31\x2b\xf3\x2e\x68\xc6\x76\xd9\xf2\x80\xf8\x9c\x28\xca\x7a\x6a\x0f\xe4\xf6\xca\x60\x32\x58\x05\xbb\xfd\xf3\xba\x12\x58\x19\x19\x7a\xc6\xf3\xbc\xec\x94\x3d\x10\x51\xd2\xc2\x5f\xdc\xcf\x04\x38\x6d\xf9\x88\x6d\x3c\x35\x40\x78\xb5\x7b\xce\xa4\xaa\xc9\xc5\x1b\x5f\xb1\xc8\x5f\x42\xc8\x82\x9d\x4b\x9a\x8b\x0d\x62\x3c\x8a\xa5\x9b\xbf\x33\x24\x0e\xb7\x65\x7e\xca\x48\x48\x55\x2c\xdd\xce\xfc\x2c\xc9\x53\xd9\x17\x08\x49\x8d\xe3\x9d\xe2\x35\x82\xec\x44\xab\x48\x09"
		"\xc6\xde\x3a\x53\x98\x93\x50\x9a\x18\x5e\xf3\xa1\xe5\xd4\xbe\xeb\xa5\xb6\x13\xd9\xa5\xb0\x56\x08\x60\xfb\x01\xe2\xa8\x8d\x99\x64\x30\x77\x9d\xed\x3d\xeb\x8d\xc5\x48\x8e\x57\x63\x8c\x3e\xe0\x85\x48\x7a\x23\xf4\x9e\xae\x2d\x63\xde\xb4\x2e\xa1\x7a\x00\x8c\x78\x9b\x44\xae\xd8\x6d\x85\x74\x17\x3e\x58\x3a\xb5\x59\xb3\x82\xfe\x73\xfb\xe0\x6d\xf9\x64\x73\xec\xf6\x9a\x7f\x9e\x2f\x37\x36\xee\x0c\x6b\xe4\x74\x66\xf9\x54\x3b\x39\x95\x6f\x9c\x84\x27\x52\xbd\x04\x50\x5a\x78\xad\x25\xfe\x35\x15\xa1\x13\xb4\x8f\xef\x27\xe3"
		"\xad\xe5\x2e\x60\x0d\x91\xcf\x17\x35\x03\xec\x02\x6a\xc7\x1e\xfc\x27\xe5\x8c\x96\x36\x01\x38\xd8\x77\xed\xef\x70\xc7\x79\x91\x13\x4b\x19\x5b\xa0\x4d\x76\xa4\xd9\x5d\xab\x11\xd3\x8a\xad\xab\x59\x31\x28\xf0\x07\xaa\x56\xbe\x0d\x14\x7c\xdd\x1c\xd8\x3f\x72\xaf\x21\x01\x2e\x2c\x02\x37\xd4\xbf\xa7\x16\xf9\x64\x3d\x67\x38\xee\x5a\xc2\xae\x06\x50\x4f\xa1\xac\xd9\x40\xf1\xf9\x50\x17\x48\x6a\x8b\x2b\xb8\x02\x5d\x00\x52\xd3\x02\x9b\x1e\x82\xb3\xa9\xcb\x66\x02\x71\x38\x10\xa4\xbf\x25\xb1\x64\x7b\x29\x2b\xf1\x14\x05\x9a"
		"\xe6\x1f\x58\x86\xa6\x05\x98\x7d\xe4\x21\x6e\x86\xc2\x8b\x06\x5f\x48\x1d\x0d\x32\x35\x59\x91\x2b\xa4\xb5\x99\xb9\xf7\x33\x17\x39\xda\xa0\xfe\xec\xcb\xd8\x2a\xb3\xbe\x8d\x53\x3a\xe1\x88\x47\x6b\x13\x93\x25\x87\x01\x5f\x6a\x3b\xaa\xea\x9a\xd6\x5a\x43\x79\xaf\xc2\x98\xb7\x3e\x2a\xd9\xa5\x88\x87\x0e\xf6\xee\x2d\x88\x6c\xa5\x40\xb5\x13\xa8\x03\xad\x90\x5d\x8c\x94\x88\x8b\xd8\x4a\xac\x08\x55\x06\x3f\x85\xa1\x9b\x10\xc8\x39\xd8\xfb\xd2\x9c\x6e\xb4\xf5\x8b\x5d\x23\x08\xb7\xec\xaf\x44\x85\x80\x47\x26\x3d\x82\x71\xfb"
		"\x4e\xcb\xbb\x9c\x6a\xf9\xde\xed\xef\xca\x43\x31\xc2\x34\x67\x08\xc7\xa3\x08\x05\xb3\xd1\x14\xf3\x26\x9a\x03\xb7\x58\x2e\xdb\x1d\x9f\x2f\x1f\x73\x51\xf0\xaa\x8d\x6d\xf5\x6e\xe6\x88\xd1\xdf\xa4\xc4\x50\x9b\x79\xf8\x53\xd1\x6d\x63\x3c\xfd\xce\x5a\x63\x09\x0f\xf1\xfb\x20\xaa\xbe\x17\xe5\xa9\x8b\x67\xa3\x25\x79\x4b\xb2\x2d\x9b\x35\xed\x99\xc3\x78\xf7\x47\x27\xd3\x5c\x03\x85\x20\x1c\x2b\x31\x22\x9e\x85\xe9\xde\xea\x08\xf8\x71\x35\x1e\x82\x03\xa7\xd5\xbc\xd8\x80\x2f\x31\xe2\xbe\x21\xc0\x6e\x08\x35\x58\x9a\x4d\x2f"
		"\x26\x85\x22\x31\x73\x2c\xdc\x6a\xd2\x3f\xb4\x86\x21\x72\x91\x7a\x3a\x41\x00\xcc\x1b\x0b\xe2\xde\x56\xcf\x01\xcf\x1e\x71\x89\x60\x1d\xcc\xef\x49\x5e\x3b\xad\xaa\x91\x30\x20\x23\x48\x03\x71\xb9\xb1\xfb\x45\x28\x82\x49\x61\x5a\x29\x39\x8d\x57\x09\x78\x41\x5e\x71\x47\x27\xbb\x89\x7a\x70\x3d\xcc\x7f\xd1\xc1\x77\x7f\x52\x0c\x91\x7e\x87\xe8\xf0\x9d\xeb\x49\xd8\x1a\xfc\x63\x1b\x6d\x1c\xcf\x76\x11\x16\x30\xef\x5c\x35\x41\xba\x7b\x8b\x52\x57\x99\xd8\x4d\x92\xce\xb7\x39\xb7\x51\xb6\xcd\x5c\x8a\x9c\xa9\xd4\x36\x8c\x7e"
		"\x52\x0e\x56\x0f\xba\xe1\x64\xc5\x62\x40\x67\xc0\x01\xdf\x0c\xcc\xf2\x6e\x8d\xf1\x8d\x62\x59\xe3\x2f\x40\x1d\xeb\x45\x00\xba\xab\x47\x82\xcc\x6c\xe1\x0b\x76\xe7\x44\x0b\xd6\x91\xd4\x22\xbd\xff\xad\xa6\x0f\x89\xfc\x07\x41\x47\x12\xc0\xab\x5d\x16\xaa\xd3\x61\xfc\x43\xae\xec\x82\x41\x65\xde\x68\x63\x21\x48\x7e\xbb\x80\xc6\xa5\xc8\xd7\x7e\x84\x79\x4c\x16\xd1\x09\xbd\x35\x75\xf1\xa6\x5d\xf5\x48\x0a\x2d\x57\xf7\x21\x80\xf9\x3c\xfc\xbc\xce\x63\x67\xba\xe8\x43\x52\x6f\x7f\x97\x64\x60\x6b\xb2\x44\x79\xce\x4f\x8e\xad"
		"\xc7\xce\xbd\xd2\xd3\xee\x02\xe7\x11\xb1\xaf\xa6\x4c\xcb\xf5\xf5\xd3\x71\x11\x9a\x0f\x64\x25\xee\xff\xf2\x8d\xd4\x65\x0f\x27\xab\x7c\x21\x61\xea\x3e\xa0\xa8\x5c\x5a\xaa\x06\x09\x46\xb9\x59\x05\xb2\xb4\x72\x87\x13\x94\xaa\x23\xfe\x85\x16\x51\x1a\xe2\x3b\xda\x86\xe3\xa8\x1e\xf5\x6b\xec\xcc\x3e\x94\xf1\x5d\x2b\x83\x9b\x1e\x82\xed\xfb\x4d\x29\x94\x2a\xdf\x18\xf5\xe3\x32\xe3\x42\x4c\xbc\x13\xc1\x77\x14\xcc\x56\x27\xf5\x79\xe5\xd0\x78\x4f\xbd\x98\xed\x2c\x40\x46\x9f\xe9\xf2\x65\xd4\x17\x63\x55\x5d\x45\xb4\x82\x98"
		"\x6f\x14\xac\xd2\xe5\x61\x27\xb5\x2e\xd7\x39\x29\xe8\xc6\x50\x28\x16\x44\x5b\x99\x1a\xdf\x4e\x31\xf7\x83\x34\x95\xf5\x9d\x33\x80\xf4\x14\x26\x77\xae\xf1\x8a\x02\xae\x92\x3c\xb2\xeb\xf4\x23\x7f\xe1\xcf\x8b\xdc\x9e\xc0\xad\x2f\xa9\xbc\xdc\x99\x48\x7a\x10\xb1\xe0\x0b\xca\xda\x5f\xd3\xb9\xc5\xdc\x85\x26\x7d\x3a\x8f\x5d\xd2\xf2\xeb\xf8\x39\x3f\xf8\xb3\x12\x03\x3e\x1c\x72\x1b\x46\x34\xe4\x8e\x36\x22\x0e\x54\x1d\x83\xb6\x76\x4d\xfc\x2b\x22\x45\x65\xd6\x12\x1a\xbe\xdb\xd5\xa8\x6c\xa3\xc9\x67\x16\x0b\xab\x96\x28\x53"
		"\x38\x44\x80\xbe\xfb\x77\xb5\x92\x33\x3c\x5d\xd2\xf9\xfb\x58\x3b\x73\x36\x8b\x4a\x76\x9f\x7e\x54\x75\xc7\x02\xea\x30\x71\xaa\x31\x28\x15\x50\xa4\x99\x3d\x09\x35\x3d\x89\x4a\x82\x26\x72\xca\x7a\x2b\xda\xc9\xee\xb5\x1f\x20\xe5\xb2\x55\xc4\xa0\x83\x3c\x5f\xf0\xe0\x3d\xbf\x43\x59\x7e\x84\xe5\x1e\x91\xbf\xa4\xde\x0d\x26\x6f\x22\x42\x92\x9d\x45\x26\x7e\x75\xa9\x66\xe3\xbb\x15\xe8\x23\xbc\x89\x2f\xa5\x3a\x92\xa3\x15\x86\x0b\x07\x6a\x58\x4d\x77\xaa\xce\x82\x80\xd5\x50\x57\x11\x27\x1c\x67\xe2\xfd\x3c\xb6\x9b\x3a\xcb"
		"\x42\x8c\xc6\x91\x56\x7b\x73\xc5\x3a\x8e\x39\xe4\x2e\xb0\x99\xa3\xc6\x06\x8d\xc2\xc1\xa9\x9f\x4f\xd9\x45\x5b\x22\x50\x8d\x3f\x40\xbb\xf6\x4d\xd9\x17\xaf\x44\x4f\xa5\xe4\x1d\x44\xad\x7d\x01\xf2\xd4\x72\xcc\xd7\x54\x19\x73\x08\x1a\x82\x7c\x8f\xc9\xdc\x5a\xd9\x4b\xae\x04\xc8\xae\xe6\x3d\x50\x6d\x32\x16\x88\x4a\xf4\x9e\xd8\x5e\xff\xde\x31\x87\xd1\xbe\x0f\x7b\xb5\x06\x1f\xf1\x1a\x1d\x78\x53\x24\x5b\x34\x38\x36\xc2\x07\xb1\x3d\xec\x7a\xc8\x9d\x16\xb4\x80\x38\xbf\x97\x77\x0d\x77\x71\x4b\x0a\x7d\x9d\x28\x51\xb4\x92"
		"\x13\xaf\x58\xee\x7c\xf6\x81\x0b\xe6\xf2\x52\x67\xf6\x29\xa2\xe4\xf9\x6a\x0a\x2e\xf7\xe9\x05\x8f\x5b\xf4\x82\x6a\x10\xa9\x72\x44\x84\x22\x8b\xbf\xc4\xfd\x30\xd2\xf3\x68\xec\xa2\xb5\xea\xef\xf8\xe0\xaf\x87\x91\xf0\x82\x19\xcc\xe2\xac\xce\xdb\x7f\x7c\x03\x69\x23\xde\x14\xda\xc9\xb2\x38\xc3\x71\xb3\x18\xa4\x9b\x8f\x18\x14\x8d\x2a\xd0\x8d\x9d\xc3\xab\xa3\x34\x2a\xa9\x35\x44\xf1\x2c\x52\x04\x1b\x85\x09\xb2\xbd\x2c\xd7\xeb\x2e\xc4\x0a\x71\x76\x61\x0b\x38\x11\x25\x40\x3f\xad\x76\x30\x27\x32\x6e\xab\x2a\x0d\x44\x1d"
		"\xcb\x74\xce\x2d\x11\xb1\xb7\x20\xdc\x53\xba\xb6\x6e\x8a\xaa\xd8\xc0\x07\x8b\x22\x5c\x2e\x1f\x24\x41\xb5\x11\xba\xcf\x01\x8a\xde\x38\x50\x92\x0a\xac\x4f\x7c\x1f\x4f\xe9\x0d\x63\x95\x61\x01\x75\x67\xf4\xeb\x18\xcc\x1f\xa6\x64\xbd\x17\x55\xd8\x60\x71\x00\xeb\x4a\x36\x75\x34\xd1\x83\xe1\x89\x2b\xd9\x63\x2a\x6f\x7a\x2f\xcc\xe9\x16\x2b\x81\x50\x96\xde\x40\xfe\x53\x8d\x3f\xb6\x19\xa1\xb8\x70\xd5\x94\x8a\x3c\xdd\x05\xd1\x61\x62\xfa\x93\x0c\xe0\x5b\x33\xcf\x5b\xf6\xf1\x2c\xc9\x84\xbd\x92\x27\x99\xc4\x8d\x02\x0f\x67"
		"\x52\x6e\x6e\x91\x51\x03\x1e\x14\xb1\x81\xac\xb2\x89\xa3\x65\xa2\xed\xd4\xc7\x91\xe3\xb8\x7c\xc3\x68\xde\x79\x4f\xfc\x77\x86\x47\xcf\x76\xa4\xbe\x5a\x36\x15\x96\x7d\x73\x7b\x7d\x65\x8a\x9c\x57\xd3\xd7\x7a\x2d\xea\x40\xf9\xda\x74\x35\x3b\xa5\x75\x46\x46\xd0\x75\x18\x8d\x76\x8d\x5d\xde\xe6\xbe\x58\x29\x1a\x8c\xe4\x5f\x69\x85\x5e\xba\x89\xd8\xfd\x51\xb2\x6e\xb7\x40\x7d\xb4\x3f\x11\x0d\x21\x47\x1c\x09\xcf\x08\x12\x5b\xdd\x9d\x9d\xf7\x69\xc1\xae\xa7\x95\x85\xde\xf3\xcb\xbf\x28\x18\x31\xbc\x07\x37\x5a\x74\xfe\xe4"
		"\xbc\xe0\xf0\xee\x8d\xa6\x74\x4a\x5e\x57\x9f\x09\x88\xb8\xa9\x5c\x38\x36\x5f\xe4\x72\x48\xaf\x41\xd7\x9c\x8a\xd3\x8c\xb3\xb8\x22\x93\x4f\x56\x8a\x58\xce\x70\x92\x33\x4f\x1d\xcd\x91\x63\xad\x19\xfe\x59\xae\xfe\x49\x88\x23\xcd\x5f\xe5\xd1\x61\x5c\x86\xaf\x12\xae\x98\x55\x09\x1a\x20\x0a\xab\x2c\x92\x7a\x38\xfa\xdb\xf3\xfc\xbe\x01\xce\x1c\x2f\xd8\x3b\x39\x21\xa8\x36\x1c\x12\x05\xbc\x32\xd2\x1a\x85\xe5\x6a\x59\xfe\x6b\x7c\x32\xa9\xdd\x40\x14\x1d\x2f\x36\x12\x88\x7c\xcb\x42\x08\x47\x62\xeb\xd9\xb5\xe5\x4b\x5a\xd6"
		"\xcc\x60\xdc\xa4\xc6\x6b\x04\x82\x2a\x63\x52\xb5\x86\xa3\xaa\x4e\x18\xbc\x43\x90\xfd\x7f\x2e\x38\x03\x92\x21\x2c\x50\xa2\xe2\xa3\xda\xf4\xa6\x76\xe0\xeb\xcf\xf6\xa6\xf6\xb9\x7a\x2d\x97\x4e\x5b\x9f\x94\x40\x2c\x48\x62\xe9\x75\xa2\x4a\x50\x30\xca\x84\xb3\x5a\x37\x59\xa6\xa6\x54\x1b\x82\x39\xa7\xb3\xc4\x84\x6f\x20\xc7\xb2\xcf\x62\xba\xdd\x60\x66\xc8\x4e\x4e\xba\x1e\xa9\x6f\x16\xaf\x71\x7b\xd0\x40\x64\xef\x3d\xc1\x11\xc5\x17\x10\x79\xee\x82\x42\x23\x7a\xa8\x5d\x25\xee\x2c\xee\x13\xe9\xb7\x40\xb3\xc8\x86\x48\x74"
		"\x9b\xbf\x07\x44\xa8\x2b\x8f\x2c\xe5\x21\x09\xc8\x2d\x6f\x9d\xdb\x96\xa0\xc2\x24\xa3\xbc\xaa\xa0\x3e\x71\x8d\x6a\xea\x6a\x7a\x3f\xb7\xf9\x20\x1a\x0b\x8e\xee\x18\x30\xc4\xb3\xe7\xa2\x39\xca\x84\xd2\xa8\x76\x1d\x69\x3a\xcb\xed\xf6\x4e\x21\xe4\x12\xd7\x91\x05\x02\xef\x80\x38\xac\xf6\xd0\x08\x99\x91\x80\x46\x9e\xac\x6a\xbb\xee\xfc\x41\x4e\x5c\x02\x25\x71\x5f\xb6\x1f\xe7\x73\x27\x52\xbe\xe6\xcd\x4c\xd2\x76\x46\x87\x08\x13\x8f\x97\x9e\x4e\xfe\xbb\x10\xdb\x51\xa0\x0a\x7c\x5a\x9f\x11\x51\xc5\x5a\x25\xee\xc6\xea\x13"
		"\x76\x02\x5d\xbb\xa8\xee\x6f\x93\xc7\x24\x3e\x6b\xaa\x2d\x45\xe4\x43\xdc\xc0\xad\xc1\x1f\x3a\x72\x2f\x7e\x83\x1e\x83\x66\x3d\x73\x72\x8c\x9f\x98\x86\xaf\x7d\x88\x0c\x7c\x2a\x74\x23\xd7\x58\x0d\x39\xdf\xbd\x4e\xd8\xe7\xc1\x48\xd3\xcf\x51\x6b\xbc\x0f\x3b\xfd\x28\x98\x5c\xf6\x7b\x7b\x53\x8b\xfc\x78\xb1\xdc\x92\x36\x35\xdf\x30\x8e\xa0\xbd\x0e\x02\x4f\x1e\x94\x2d\x32\x1d\x93\xe6\x74\x11\x37\xbb\x1d\xd8\x53\x6b\x72\x27\x6b\xd5\xfc\xb9\x33\x57\xee\x58\xa6\x39\xad\x35\xf7\xf0\x6c\x13\x75\x2f\x95\x18\x9b\xa2\xcb\x4a"
		"\x9e\xf1\x50\x0d\x82\x48\xb7\xae\xf8\xba\x22\x2a\x99\xf3\xf2\xdb\xd8\x22\x03\x89\x7c\x05\xd5\x63\x7f\x7f\x64\xa3\x9e\x16\x1a\x3c\xd2\xe8\x33\x43\x65\x69\x64\xdc\xb9\x37\x47\xf4\x0a\xf7\xdd\x03\xcb\x76\x3f\x98\xb7\x59\x4c\x62\xfe\x6d\xca\xcc\x1a\x43\x7f\x81\x69\x02\x27\xff\xcc\xe1\x38\xee\x8b\x30\x6a\x41\x5b\x8b\xec\x58\xfd\xce\x42\x4d\x72\x22\x38\x69\x5a\xff\xde\x85\x14\x54\x1c\x35\x14\xb4\x32\xd9\xe7\x77\x57\xea\x9a\xd5\x9f\xd7\x44\xeb\x2f\x38\x7f\xa3\x53\x4d\xb4\x8c\x39\x46\x9e\xc4\x66\x21\x0a\xab\xfc\xcb"
		"\xa1\xd3\x60\x1d\x25\x74\x15\x4a\xb1\xaf\x24\x51\xbe\x30\xc5\xdf\x8a\xe0\x57\xb6\x4a\x8e\x13\x64\xa7\xd6\x42\x1f\xf7\x6e\x28\xa7\x70\x72\x45\x1f\x2f\xfb\x58\x11\x5b\xda\x26\x59\xe3\x9e\x3f\x64\x5c\x34\x78\x4d\x4e\xc1\x88\x58\xd3\x06\xb2\xfe\xd1\x4b\x87\xf4\x3e\x50\xc1\xd4\xc7\xcb\x04\xd9\xe6\xe9\x92\x7b\x63\x76\xce\x8a\x30\x64\xf5\x2a\xec\x36\xd9\x48\xd8\x2b\x9c\x74\x49\x5e\xcc\xda\x5e\xd4\xf5\x0c\xaa\xbe\x87\xbf\x9e\xa5\x8f\x67\x60\xb2\x25\x25\xcc\xcc\xb9\x13\xf7\x66\xe0\xe3\x49\x9f\x06\x67\x83\x0a\xb9\xe4"
		"\xab\xb4\x3e\x1c\x1a\xb6\xce\x44\x16\xbc\xda\xba\xeb\x79\x8b\xbf\x28\xe2\x57\x25\xee\x60\xe7\x13\x83\x86\x4b\xc7\x3c\x55\x6c\xac\xe1\x0a\x29\x46\xf2\x2d\xbf\xde\xfb\x5a\x77\xc0\xa1\x2c\x6a\x03\xea\xf9\x02\x58\xc2\xdd\x01\xbd\x37\xcb\x1a\x7e\x0c\x82\x15\x38\xf0\x75\x61\xf8\xb2\x1f\xa4\xec\xca\xd6\x8e\x04\x2f\xe9\x7a\xe7\x7b\x2e\xcf\xab\x1d\x50\x92\x2a\xd0\x76\x6d\xdd\x80\x2e\x76\xfe\x47\xfb\x7a\xa2\xd8\xa5\xdf\x37\x5b\x9d\x53\x96\xee\xa9\x77\xf4\x0b\xde\x6a\x20\x9e\xe1\x57\xe2\x16\x9f\x7e\xa5\x02\x46\x2c\x7e"
		"\xae\xad\x73\xbd\xcc\xbb\xf8\xc3\xbf\xf2\x42\xab\x67\x15\x7d\x0e\x01\xf1\xb5\x52\x01\xd0\x24\x9f\x1f\x7a\x3f\xcd\x9b\x5a\x88\xee\xb5\xf7\x8f\x43\xf5\xb9\x64\xea\x62\x63\x34\xb1\x47\x3d\xa7\x17\xc1\x04\x80\x40\xb4\x8a\x87\xee\xb5\xe8\xfc\x57\xa0\x71\x00\xdb\xc5\x80\x6b\xef\xdb\x2e\xd2\x36\x85\x29\xea\x87\xe5\xd4\xbf\x27\xae\x51\xcd\x11\x13\xac\x94\x7e\x55\x1b\xe9\xd0\x09\x33\xd7\x8e\x19\xe2\x70\xd4\x03\x5f\x2f\xe6\xc9\xbc\x06\x78\x49\x4e\x39\x2c\x20\xd8\xea\xcc\x5c\xb2\x81\x65\xc3\x72\xa0\x0f\x12\x65\x73\x8c"
		"\x95\xef\xbf\x3b\xf2\x7a\x43\x09\xe8\x25\x30\x6f\x21\xbe\xa2\x19\x1e\x3a\x46\xe9\x5d\x88\x9d\x57\xa8\xff\xf6\x54\x0a\xb4\xba\x09\x05\x65\x30\xdb\xfe\xad\xcc\x0e\xbe\xe2\xb1\x27\x76\x32\xcb\x12\x4d\x88\xf6\x04\xbc\x4c\x46\x98\x73\x0d\x6e\x60\x26\xff\x26\x8e\x83\x6c\xe3\xec\xce\x77\xd0\x22\x28\x6d\x13\x06\x28\x22\x71\xef\x1a\x88\x00\xbd\xbc\x00\xb5\xac\x1b\x6d\x2c\x0c\x78\xe0\x57\x20\x0e\xd7\xde\x97\x7f\x6b\x1c\x1c\xb1\x2b\x97\x5d\x5f\x7c\x4f\xee\xb2\x68\x2b\x44\x72\x32\xfc\x51\xdb\x12\xc5\x76\x5f\x74\x8f\x1c"
		"\x69\xc2\x4e\xbb\x04\xfd\x90\xfc\x9a\xf0\x22\x95\x2a\x32\xa4\x97\x7e\x2c\x0f\xca\x7a\x57\x70\xe7\x15\xd3\x48\xb8\x4d\x77\x33\x22\x08\xd9\x47\xb0\x17\x2d\xb6\x7a\x8b\xae\xed\x09\x6a\x51\xa4\xea\xe2\x0e\xc8\xb1\xa6\xfe\x29\x74\xf6\x67\xaf\xdd\xb3\x0d\xed\xc5\x9f\x26\x96\x41\xdc\x00\xc2\x61\x01\x0b\xae\x5c\x62\x1a\x50\xf5\xeb\x27\xab\x5c\xc9\x58\x48\x33\xea\xe9\x11\x41\x20\xd5\x60\x79\xcf\xf4\x80\xf9\xee\xcb\x8a\xfa\x9c\xb6\x41\x0d\xc7\xfb\x95\x64\xc2\x25\x76\xca\x44\xb0\x3b\xbf\x04\xe5\xcb\xb2\xa9\xeb\xf9\x50"
		"\xd0\x3d\x6e\x70\x0d\x72\xe0\x35\xf7\xf6\x64\xb0\x76\xbc\x9c\xf4\xcd\x1f\x83\xb4\x9b\xe6\x60\xf7\x2a\x5d\x27\xb4\xa4\x57\x23\x4d\x9f\xb5\x49\x03\x3b\x15\xa1\xfc\x4d\x25\xe4\xae\x37\x1a\x47\xf5\x26\x96\xf2\xad\x28\x8f\xc9\x70\x11\x52\x29\x95\x7f\x76\xa5\xb1\x9e\xb5\xc6\xd6\x66\x06\x72\xf2\xc7\x1d\x89\x99\x23\x77\x37\x48\x3a\x8d\xa9\x2d\x49\xbd\xa3\xab\x1f\x90\xfe\x95\x2f\x8a\x63\x96\x79\xe9\x22\x1a\x88\x81\xf1\xf2\x35\xc9\x20\x4f\x3e\x55\x4d\xb5\x90\x2b\xe1\x3c\x7d\x38\x1a\x83\xcd\xc2\xf8\x41\x21\x32\x47\x9d"
		"\xfe\x55\x38\xec\x24\xbe\x2d\x97\x5f\xc2\xf8\x8a\x52\x74\xe0\x5a\xdb\x17\x1e\x3d\xbb\x69\xa5\xa1\x8f\x84\x6b\x67\x69\xbf\xd8\x7f\x19\xba\x95\x57\xc1\xf4\xb9\xf8\x88\x23\xf4\xae\xdc\x0a\xae\x14\xd3\x16\xb9\xcc\x7a\x20\x4e\x96\x93\xf9\xe6\x76\xca\x5d\x29\xc0\x48\x4a\xae\xd8\x47\x1c\x7e\xe7\x74\x56\xf5\x26\x4a\x10\x9c\x39\x83\xfc\xc6\xf7\xe6\xf3\x5d\x46\x4d\x9f\x4e\xd4\x8e\xdf\xdf\x02\x2f\x49\xfa\xfc\xee\xed\xe6\xdb\x4a\x4f\x7f\x30\xc0\x91\x5b\x97\xfd\x12\x58\x50\x56\x49\xcb\x30\xab\xaf\x68\xb1\xaa\x8e\xc6\x06"
		"\x66\xe5\x75\xc4\x47\x55\x6e\xa5\xfa\x5a\x84\x5d\x8f\x2a\x51\x97\x24\x75\xfb\x8f\x8f\xee\x01\x89\x30\x59\x6d\x9d\x50\xef\x2c\x66\xda\x44\x34\x18\xbc\x35\xa8\x21\x91\x35\xd8\x67\xca\x2b\x72\x0f\x7e\xc5\x8c\xb0\x93\x33\x27\x6d\xad\xf2\xa0\x12\x70\x68\xe0\xc6\x61\xd5\x79\x7c\xca\x79\xbd\x4f\x15\xff\xa6\x41\xf7\x39\xe5\xea\x8a\x5f\x93\xeb\x38\xec\x26\x3b\xf4\x47\x55\x43\xdf\x58\x8a\xa3\x89\xe4\x43\x26\xfa\xbd\xab\x8d\x99\xd3\xf0\x00\x15\xe7\x17\x9b\xc4\xd6\xb3\x88\x12\xd0\x09\xde\x5e\xba\x70\x05\x3b\xc9\x9b\xa2"
		"\xa2\x03\x17\xb9\x89\x79\x37\x08\x4d\x8e\x47\xfd\x13\xe2\xe6\x86\x10\x38\xa4\x4c\x5a\x82\x2c\xd3\xd8\x8b\x28\x9a\xa7\x05\xc1\x26\xbe\x6e\xd7\x11\x37\x4d\x87\xb6\xc0\xf8\x0f\x2d\xd1\xb4\xc5\x5f\x71\xc8\xf6\x8a\x65\xe3\x07\x03\x14\xef\x3b\x2d\x6b\xef\xab\xdd\x29\xcb\xde\xd9\xc6\xad\xec\x2e\x2e\x88\x8f\x07\xf4\xd7\x8e\xef\xa7\x6d\xed\x41\x28\x2e\xec\x7d\x27\x18\x0d\xff\xbb\x41\x42\xea\x11\x27\xfb\x58\xa5\x54\xf3\x02\x62\xba\x3b\x61\x0e\x53\x00\x04\x08\x0a\xb5\xed\x3a\xc2\x3c\x6d\x19\xc3\xfc\x9e\x06\x5f\x7e\x48"
		"\x1e\x45\xa8\x28\xbd\xc9\x08\xcc\x68\x54\xca\xde\xfe\x46\x12\x80\xa4\x40\x80\x31\x44\x31\x25\xed\x53\xf7\x60\xc1\x20\x15\xfe\xc9\x4f\x1d\x85\xde\x99\x17\xbd\x50\x48\xd9\x02\x33\xa9\x46\xfe\xfd\xa1\x62\x4a\xbb\x76\x25\xb9\x98\x5a\x95\x77\x8e\xd4\x14\xf4\xa4\x2e\x26\x40\x28\xad\xa1\x4a\xb0\x0e\x5b\x5a\xcf\x61\xb5\x28\x52\xc5\xa0\x0e\x6c\x5f\x4c\x96\x70\x30\x84\x57\x2f\x41\x52\x1c\x4e\x7f\x2c\xf3\xcd\xb9\xae\x59\x9a\x51\x1f\x5f\x9a\x22\xb6\xb0\x12\x34\x6d\xf3\x26\xfa\x82\x27\xa9\x5f\x88\xdb\x03\xdd\x9b\x70\x04"
		"\xae\x53\xdb\x9c\xc8\xc2\x91\xde\xa8\x55\x17\x25\xa4\xfd\x07\x2e\x67\xcc\x65\xb8\x80\x75\x01\x2c\x7a\xbb\xb3\x13\x65\xfd\x01\x3e\xa4\x5d\x78\x09\xb7\x7a\xa0\x1f\x7d\x0e\xe5\xaf\x12\xac\xdf\x73\xd4\xaa\xbd\x4d\xdd\x48\xd1\x80\x87\x88\x36\x33\xd8\xe9\xba\x5b\x9c\x1e\x01\xe8\x71\x8b\x09\x03\xa0\xc7\xf1\xa5\xdd\x31\x47\x86\x62\x83\xf2\x02\xc9\x43\x42\x84\x07\xd1\x26\x82\xfc\x18\x6e\x65\xd0\x8f\x2e\xf1\x9d\xed\xb0\x8f\x54\x28\x1d\xe3\xf2\xd0\x4c\x97\x3b\x07\x8b\x45\xd8\xba\x7c\xe9\x25\x46\x10\x00\xcf\x22\x6d\x7e"
		"\x48\x05\x51\xf1\xf0\x00\x03\x29\xe8\x6c\x1d\x78\x50\xac\x93\xad\xb2\x46\x4c\x3d\xf7\xc7\x45\x4b\x12\xd2\xe2\x78\x27\x4c\x8e\x02\xe5\x84\xf9\x1a\xf6\x84\x65\x4c\x91\xa6\x16\xce\x9a\x79\xc6\x45\x04\x04\xc8\xd7\x46\xb9\x4d\x5a\x8b\x88\xef\x3f\xe4\xc7\x24\x25\xa4\xae\x87\x55\x62\x0f\x02\xf8\xdd\xfd\x43\xee\xcc\xf4\xae\x30\x0c\x60\xda\x27\x7c\x61\xb3\x5e\x4d\x42\xe9\xdd\x89\x77\x49\xf7\x05\xb1\xbb\x76\x50\x36\xb8\x68\x28\x51\xe1\xee\x24\xe0\xc3\x19\x55\xcf\xd3\x82\x71\xae\xc6\x2c\xeb\xde\xa7\xf0\x7f\x42\xd2\xd2"
		"\x2f\x50\xd9\xa3\x05\xf4\x71\xb8\x3c\x92\x2b\xf3\xd0\x79\x6e\x3a\x58\x57\x3d\xb4\xec\xff\x52\xbd\xf2\xba\x0c\x71\x72\xfb\xc1\x82\xae\x6d\x4c\xca\xa1\xe8\x71\x0c\x63\x3a\xed\x90\xe0\xd5\x1f\x0c\x41\x74\xf5\x51\x03\xb9\xb9\x05\x01\xd0\x68\xe2\xbe\xcf\xea\x51\x87\x2d\x33\x5e\x18\x4d\xfe\x54\x3a\xe9\x7f\x85\xec\x1c\x17\xb7\xbe\xc2\xea\x55\x7f\x19\x8c\xea\x14\x6b\x7d\x6d\x88\x15\x4f\xb2\x0b\x38\x4b\xc2\xe7\xc7\x60\x6c\x5f\xe0\xb9\x5e\xf7\x0e\xd7\x76\xb2\x2a\x21\xd1\xe4\xe4\x9c\x47\x6b\x1f\x1b\x5b\x98\x20\x79\xf9"
		"\x99\xff\xd7\xd7\x0d\xb7\x18\xf1\x20\xce\xaf\x24\xe7\x32\xf8\x37\x8c\xaf\xc1\x8d\x3a\x24\x26\xfc\x53\x57\xa8\x56\x85\xe2\x66\x2a\x9f\x43\xc1\xde\xff\x22\x40\xfa\x98\x21\x71\x13\x7a\x03\x35\x49\x45\xde\xbc\x7b\x6d\x72\x9c\xf4\x8c\xcc\xb3\xa1\x69\x4c\x0d\xc5\x78\xeb\x21\x69\x2c\x9d\xdf\xdb\x47\x15\xdc\xb8\x07\x1f\x14\xc6\xf5\x2b\xff\xfa\xe6\xe0\xdf\xe0\x22\xf9\x17\xd5\xa0\x0f\x8b\x3d\x2b\x26\x1e\x75\xdd\xf0\x01\x62\x7b\x6b\x3d\xcc\x0d\x14\x1f\x9c\x61\xa3\xf7\xf3\xd3\xbf\xe3\x8e\x8e\x88\x8e\xf3\xe3\x42\x33\xf6"
		"\xfb\x30\xcf\x04\x82\x66\x6b\x31\x5e\xb6\xb4\x41\x13\xab\xac\x7a\x36\x11\x3b\xef\x96\x43\xae\xef\x6c\x81\xf1\x20\xb5\x4a\x62\x04\x32\x9c\x1d\x84\xcb\x97\xe8\x6e\x51\x16\xe3\x96\x24\xea\x08\xa5\x0d\xfe\xbb\xfb\x93\xe5\x2f\xbb\xac\xd9\xb2\xc8\xd0\xa4\x76\x28\x86\xce\x6e\xbd\x20\xdc\x73\x13\x31\x43\x59\xc5\x82\x55\x6c\x3e\xa4\x4c\x92\x85\xdc\x53\x62\x11\x50\x63\x63\x2e\x6b\x9b\x71\xd6\x9d\xc3\x20\xd6\xc7\xbe\x02\x9c\x0d\x32\x71\x43\x43\x61\xef\xff\xeb\xa3\x7e\x29\xfa\x9f\xf3\x2e\xca\x0f\xf5\xde\x72\x9d\x52\x6c"
		"\x22\x50\xc4\xdc\x28\x79\x58\x05\x7f\x75\x6c\xcb\xd8\xce\xde\x23\x4c\xbc\x62\xd3\x8e\x86\xb8\x94\x56\x4e\xac\x35\x26\xdf\x37\xfd\x4a\x09\xa6\x92\x07\x98\xdd\xd5\xbf\x82\x32\xdd\x79\xd5\x81\xea\xa6\x96\xb5\x38\xee\x48\x6d\x25\xe4\xa1\x26\x38\xd3\x39\x55\x8e\x64\x5f\x88\xc5\xf1\x40\xad\xd4\x22\x44\xfb\xb9\xde\xb1\x96\x1d\x1c\x60\xdc\x8b\x61\xdd\x64\x26\x20\x1c\x5b\x83\x07\xfa\x87\x20\x04\x69\x90\x58\x80\x49\xf9\x37\x2e\x6c\x86\x69\x43\x5e\x1f\xa3\xe5\x63\xc4\x85\xd9\x3b\xe3\x33\xfd\x71\x57\x1e\x9f\xd1\x8d\xe7"
		"\x30\xf5\xdf\x9f\x8f\xff\x82\x0e\xdb\x7d\x1b\xd4\xf1\x12\xbd\x9a\xdb\x78\x42\x5e\xdb\x4f\xec\xaa\x9a\x8f\x34\x51\x0b\x45\x82\xa7\x74\x04\xe7\x51\x03\xbb\xa8\x05\x64\xcf\xa1\xf7\x0f\x6e\xd3\x72\x12\x54\x24\x25\xb4\x4d\x8f\x80\x48\x0d\xbd\x80\xe8\xb6\x89\x8b\x29\x1b\x9c\xbc\xd6\xf4\x9e\xf4\x1b\x85\x4c\x15\x7a\x57\xff\x11\x97\x7a\xd7\x53\xca\x91\x05\x71\x4a\x69\x63\xa1\x19\x76\xfe\xd8\x27\xde\x72\xac\x95\xef\x6e\x2b\x23\x69\xb0\x1f\xc6\xae\xfa\x39\xd6\xc5\x5c\x47\xa2\xe1\xd0\x32\xd3\x60\x86\x30\x4a\x5d\x4d\xe0"
		"\xd2\xb5\x5a\xee\x01\x37\x73\x41\x1a\xc4\xaa\xe4\x7f\x4c\x3e\xd9\xa9\x24\xfc\x5b\x35\x78\x26\xc1\x1b\xa1\xd9\x63\x31\x30\x88\x1b\xee\x6a\x4f\x20\xf6\x6a\x59\x13\x33\x51\xd8\xb7\x80\x56\x56\xfe\x38\x3f\x9a\x82\xc6\x9d\x7b\x27\x1f\x21\xf4\x03\xfa\xe5\xdf\x3b\xe0\x84\x63\xdc\xc5\x76\x72\xa9\xfd\xf8\xec\xff\x7b\x9c\x3d\x3d\x60\x46\x67\x43\xb8\xe4\xa3\xf6\x1c\x15\x6a\x08\x84\xb0\xfc\xbf\x4f\xd2\x6a\x07\xcb\xfa\xe8\xc9\xec\x08\xb7\x83\xe8\x3c\xea\x59\x85\x80\x02\xc9\x8f\xdb\xee\xc3\x7a\x7d\x25\xef\xfc\xb7\x5b\x9d"
		"\x6c\x3e\x44\xe0\x7a\xee\xf8\xd0\xc0\x67\xa8\x56\x06\x08\xd7\x64\xf1\xa2\xa5\xec\xc9\x17\x24\x10\xcf\x1d\x28\x55\x51\xea\x6f\xca\x3b\xe6\xfe\x4a\xeb\x49\x4c\x91\x6c\x90\xb8\xea\xd1\xeb\x67\xf9\xfa\x15\xa9\xfc\xa9\x7e\x48\x03\x3b\x46\x89\x33\x98\xab\xd2\x1c\xe8\x12\x76\xdc\xe2\x3d\x31\xc8\x49\xc3\x94\x7a\xec\x08\x4d\xdd\x51\x6c\xd5\xba\x3e\xa9\xfb\x6a\xc1\xab\x85\x7b\x57\x4d\x6f\x35\xab\x58\xbc\x36\x6e\xc9\x30\x90\xe1\xf0\x76\xd8\x69\x23\xe7\x00\xb0\xbb\x0d\xd6\x42\xef\xa9\xcc\x5b\xfd\x2a\x75\xcc\x28\x87\xbe"
		"\xb8\x12\xe5\x95\x01\xd7\x65\x5f\xa1\x7a\xda\xbb\x84\xcf\x37\x32\x82\x97\xe6\x9a\xa0\x3d\x12\x2a\x3b\x99\xf7\x6c\x65\x8a\x9d\xfa\x05\x96\x37\x84\x49\x86\x9a\x6c\xde\xc7\x05\x4f\x49\x2b\x8e\x23\x00\xa0\xd6\xfd\xb5\x34\xd2\x64\x93\x38\x26\x1a\x62\xbb\x1e\xe4\x67\x00\xec\x93\xd7\x40\x23\xb8\x60\xf3\x07\x63\xff\x3b\xf7\xf1\x6e\x85\xeb\x3d\xad\xfe\x57\xe9\xa6\xd3\x65\x71\xcc\x43\x6a\xf8\x3f\x7d\x1c\x2a\x8e\x12\x6a\x63\xcc\xab\x45\x91\x6b\xbe\xee\xd3\xd3\x27\x1d\x8a\x27\x65\x6f\x2a\x88\xcb\xe5\x40\x4b\x89\x5c\x08"
		"\x79\x72\x05\x11\xb9\xcf\xbc\xbf\xcd\x27\xa9\x48\x7b\x1f\xdb\x14\xc8\xb7\x43\x02\x32\x43\x1f\x55\xae\x31\xf7\x53\x0f\x93\xf7\x86\x15\x3a\x5b\xa4\xbc\xad\x84\x8a\x41\x20\x0c\x82\x90\x39\xc7\x5e\xfc\xa8\xdb\xb0\x9e\x08\xa7\x1d\x12\x19\x17\xe6\xf6\x8f\xb8\xd6\x29\x05\x4c\xa5\x54\xe7\xe7\x35\xae\xf4\x6a\xe3\xeb\x3e\xe8\x5d\xef\x10\x98\x5f\x8f\xb8\x31\x8a\x68\xdd\x52\x1d\x4a\x27\x37\x8e\xbe\xbc\x13\x2d\x0c\x96\x05\x93\xf3\xd3\x6a\x33\xec\x46\x73\xf8\xa6\x89\x9c\xf0\x26\x5d\x88\x9d\x30\x09\x8e\x34\xf4\x04\x40\x4e"
		"\x65\xb2\x5b\x3c\x87\xce\x24\xdc\x80\x47\xf2\xd9\x4f\xa7\x46\x8b\x3b\x1f\x8a\x1a\xad\xbd\x0b\xd8\x17\x88\x2c\x98\xf6\xef\xd4\x45\xfd\x82\x2f\xba\xf1\x61\xf7\x42\x92\xd1\x20\xbf\x61\xc8\x6d\xfa\x4a\x19\x08\x70\x6f\xb4\xc0\xee\xce\x21\x7e\x4b\x3d\xda\x1f\x2e\x33\xdb\x42\x42\x03\x3f\x16\x57\xb9\x15\xc7\xaa\xc3\xc0\xef\xf3\x17\xa6\x55\x6e\x6e\xb5\xc8\x41\x7e\x15\xe7\x25\x32\x29\x6b\x52\x1c\x55\xb4\xe8\x1d\x2f\x63\x3d\x01\x4a\x7d\x1b\x8e\xbf\x55\x25\x4d\x56\x21\x67\x04\xc9\xf4\x59\x4b\x50\xdd\x33\x10\x72\xe4\x42"
		"\x5e\x04\x34\x06\x16\x7a\xfc\x96\xca\xf9\x39\xc3\x13\xa9\x9b\xa9\xcc\x0d\x07\xdd\x4a\x89\xc1\x30\x57\x3e\x34\x80\xa8\xc9\x3a\x66\x8a\x16\xe3\x6d\x70\x16\x99\xf1\x1c\x56\x15\xf0\x6d\x58\x16\xf8\xa2\x00\x55\x38\x12\x19\xaf\xeb\xa9\x30\x38\x99\x4f\x97\x3d\xc2\xb9\x34\x5f\xff\x39\x9d\x8b\x84\x2d\x51\x32\xae\xe0\xfa\xd2\xe0\x81\x8a\xc0\x8f\x19\x19\xa7\x6f\xdd\xca\xbd\x75\xaf\x02\x5e\x76\xd4\x5d\x44\x4c\x66\x9d\xad\x81\x41\x4d\x7b\x8a\x13\x26\xa4\x0a\x8a\xcc\x95\x22\xf5\x60\x13\xed\x39\x3f\x0e\x6a\xb1\x6d\x6b\x44"
		"\xbd\xcf\x31\x4c\x7a\x82\x17\xe6\x4b\xfb\xe1\x20\xb5\x95\x3f\xc2\x29\x94\x24\x3e\xf8\xf7\x88\xb2\x6d\xa3\xb3\xf5\x6c\xa9\xdd\x8b\xa0\x88\x4a\x51\xff\xd9\xbb\xc1\xac\x0e\x88\xb3\xf7\x51\x3a\x00\x86\x03\x41\x6c\x8a\x38\xf8\x29\xa5\xcb\x0a\xb2\xf0\x4b\x8b\x6b\x6f\x46\xfb\xcb\x3e\x11\x4f\xb2\xe5\xab\xc4\x1c\xff\x76\x75\x8b\x7f\xfe\x57\xd7\x6d\x5e\x12\x0d\x19\xc7\x7c\x88\xc8\xfc\x36\x2a\x4f\xba\x37\xdc\x86\xd9\x91\x32\x37\x6d\xcf\xd9\xd5\xac\xd1\xec\x20\x21\x49\x51\x76\xe4\x70\xc8\xa6\xd4\x35\xf1\x4c\xc3\x69\xa4"
		"\x00\x7c\xbb\xc9\x61\x5c\xf1\xb5\xac\x85\x38\x5f\xd5\xd1\xd1\x38\x15\xc6\xc2\x9b\x1c\xd3\xc6\x76\xa3\x6b\x2c\x08\xc4\xf3\x34\x66\xa5\xb7\xd7\xba\xee\xa5\xef\x02\x8d\xe3\x72\xaa\x93\xc0\x76\x73\x35\x9f\xc8\x9f\xfb\x0a\xc0\x84\x75\xd2\xef\x6a\xce\xa9\xdb\x6f\xa7\x14\x4b\x6d\x7c\x60\xca\xdc\x19\x14\x8f\xf9\x55\x96\x6a\xb3\x7d\x38\x8d\x9a\x0f\x16\x1a\xac\x44\x52\x94\xfb\xc1\x20\x08\x5d\xc0\xd8\x9d\xdd\xe1\x45\x98\x5a\x9a\x35\x7d\x40\xf2\xcf\x74\x43\x20\x80\xc6\x17\x4d\x20\x42\xd2\xdb\xe3\xa1\x13\x47\x63\x0d\xaf"
		"\x16\xd5\x1b\xd9\x4a\x09\x42\x6a\x42\x95\x0a\x73\x98\xaf\x33\xbc\x80\xd7\xd5\x67\xce\xc5\x2d\x40\x60\xab\x6c\x02\xe3\xc1\x35\x4d\x8c\x03\x06\x38\x30\x2b\x39\x4a\x1c\xbf\x3c\x37\x95\x3d\x2f\x5d\x11\x45\x20\xa1\x7a\x02\x7b\x78\xff\x02\xcf\x7c\x91\x65\xb8\xc4\x52\x41\x8e\x9b\x6b\xc4\xc7\x06\xaa\x66\x58\xa6\x9c\xf3\x97\x1c\x60\x6c\xa3\xe1\x14\x2d\x94\x0d\xa6\x9e\x9f\x1e\x98\x3b\x2f\x66\x3b\x12\xae\x37\xdc\x9f\x02\xc4\x5c\xb1\xa3\xc1\x45\xc7\xbf\xaf\x84\xca\x0d\x16\x91\x76\x94\x25\xc0\x54\x22\xff\x81\x7a\xe0\x40"
		"\x17\x31\x0e\xa8\x88\x92\xe4\x44\xb0\x5a\xfe\x7d\x1b\xbe\x82\xeb\xa6\xdc\xbb\x53\x1e\x13\xab\xb2\x9a\x09\x0f\xa1\x72\x27\x9c\x6f\xd2\x5b\x85\x28\x9e\x12\x1f\xbf\x13\x7f\x8e\x28\x5a\x12\x2f\x91\x99\xd2\xde\x1e\x82\xce\x02\x9f\x9b\x67\x63\x05\x3a\xed\x11\xca\x27\x87\x10\x23\x1c\x2e\x3a\x9d\xfd\x43\x04\xfb\x5a\x48\x99\xb7\xa6\xc2\x30\x98\xf0\x84\x9f\x6a\xd3\x20\x4f\xb8\x8d\xdf\x83\xd3\x91\x24\x84\x80\x65\xd8\x81\xa4\x4e\x27\x9b\x18\x3c\x5d\xc6\x2e\x6e\x6b\x57\x38\x11\x39\xe4\x5b\x72\x6b\x47\x6a\x37\xcb\xc9\x06"
		"\x4e\xf0\x63\x89\xc1\x77\xfd\x9e\x81\xe0\x09\x76\xee\x49\x90\x02\x77\x1f\x39\xdc\x3f\x94\xea\x71\xc6\x60\xfc\x99\x1c\x29\x23\xbd\xf4\x0f\xf5\x44\x8c\xeb\x33\xf4\xc3\xcd\x3c\x66\x7e\x72\x44\x70\x47\x06\x72\xab\xbd\x2b\xa0\x28\xc3\x10\xb0\x13\xe7\xfd\x5f\x2b\xd7\x37\x91\x54\x2f\x8f\x78\xef\xec\x63\x2e\x83\x96\xd7\xf5\xb5\x50\x3d\x11\xb9\x89\xad\x30\x08\xdb\xa8\x83\x28\xc5\xbe\xfa\x57\xd4\xcd\x38\x43\x6d\xa1\x37\xed\x6b\x23\x4f\x8a\xc4\x2f\x91\xc5\x20\x66\x22\x7e\xb7\x50\x2b\xbe\xd2\xaa\x3d\x04\x66\xce\x82\x51"
		"\xfa\x70\x65\x9e\xf2\xaa\x04\xd4\x7b\x1d\xe7\xae\xdd\xbf\xf6\x38\x54\x18\x6d\xf0\xed\x05\x2e\x0e\x83\x4b\x48\xdc\x9d\xb9\x2e\xd3\x98\x0d\x60\xbe\x91\x49\xaa\xb0\xb1\x29\x97\x44\x14\x7f\x21\x23\x7d\x00\x88\xb3\x11\x1f\x2d\x6f\x6a\xd4\xd2\xaf\x91\x25\x32\xbb\xd2\x43\xff\xd6\x44\x86\xa0\xff\x42\x50\xca\x62\xdc\xc6\x0c\x4f\xe5\xd9\xa8\xd6\x88\x3a\x4e\x27\xe4\xe0\x09\x1f\x5e\xf7\xe3\x5f\xaf\x08\x0d\xed\x9e\x91\x7f\xf4\xd3\x86\x3f\xbe\xe4\x80\x2a\x67\xf0\x6a\x49\x59\x58\x29\xdb\x79\xae\xf6\x32\xa9\x06\x81\x0e\x0f"
		"\x89\xc4\x40\x07\xa7\xf7\x2a\xf1\x28\xaf\x98\xf6\x0f\xb4\xf5\x2e\xf8\xe6\x55\xf5\x35\xf9\x03\x02\xfd\xb0\x3b\x43\x6d\x07\x3b\xed\xf9\x60\xc3\x60\x79\x66\x7a\x34\x52\x83\xc0\xda\x01\x80\xc9\x20\xe7\x1f\x71\x33\xab\x32\x59\xcd\xfd\x60\xe0\x5b\x9b\xa7\xf8\xfd\x1e\xf0\xe2\x2c\xf4\x51\xb4\x9a\x16\x0f\xb1\x10\xf7\x91\x7d\xa2\x42\x58\x4c\x30\xc3\x71\x36\x9b\xf2\x1d\xb3\x9f\x61\x3e\xd5\xf6\x45\x4c\xb4\x3c\x03\x81\xc4\xf6\xe0\xa3\x4f\x82\x52\x57\x14\xa4\xcf\x7e\x7b\xbb\x4a\x1e\xaa\x02\x4c\x50\xce\x8d\x3f\x64\x19\x81"
		"\x0e\x0d\x37\xf9\x6a\x25\x25\x8b\x5a\xf4\xdb\xf8\x27\x2f\x12\x5d\x2c\x7a\xe1\x25\xa6\xa7\x73\xf2\x2f\x1b\x6a\xda\xff\x0e\xfe\xee\xf1\xe1\x84\x62\x81\x0d\xd0\x67\xa9\xff\x73\x7f\x23\xda\x5d\xfd\x77\x58\x5f\x39\x06\x7d\x4f\x00\xdb\xe9\xe4\xc0\x5a\xf6\x40\x18\x18\x7f\xa1\x52\x16\xc6\x39\x15\xe8\x2d\x0a\xfb\xa2\x48\x29\x6f\xa7\x37\x7d\xff\xde\xac\xd9\x79\x09\xd6\xcc\xeb\x91\xf4\xad\x90\x17\xf8\x70\xf4\x23\x9e\x49\xf7\xb8\x9d\x88\x00\xb0\xda\xba\xa8\xe2\x98\x6a\xc6\x11\x06\x27\x9b\xe9\xdc\xc1\x28\x7c\xb5\x42\x07"
		"\x73\xa6\x0d\x98\xa9\x8a\x69\x8e\xd2\x79\x65\x84\x96\x57\x0c\x56\x1d\xaf\xff\x6d\x72\x94\x5e\x37\x45\x65\x16\x92\x0d\x4d\x27\x46\xa0\x6a\x7f\xed\x5f\xf3\xd6\x7d\x16\xb6\x43\x20\x33\x18\x8e\x81\x3c\x4c\xf8\xce\xad\xd1\xdc\x87\x8f\xf9\x82\x61\x6a\x77\x7f\x96\x25\x33\x3e\x86\xaa\x6b\xc9\x5b\x85\x5e\xed\x19\xe7\xe5\x08\x33\x8f\xe5\x57\x27\xfc\xad\x45\x9c\xca\xb9\x4f\xef\x06\x16\x0f\xf4\xe5\x18\xe1\x36\x95\x4d\x26\xce\x27\x05\x9c\x01\x62\x43\x41\x8a\xf6\xbd\x84\x5e\x2c\x0b\x8d\x20\x79\x10\xbb\x15\x7a\x0c\x4e\x4b"
		"\x5c\x27\x8e\x70\xe0\x4f\xf5\xc1\xb0\xc9\x90\x25\x2b\xf0\x49\x12\x28\x62\x31\xbb\x20\x05\x20\x9e\xfc\x96\x9f\x6c\x17\x73\x48\x09\x2d\x36\x23\x59\x9f\x56\x66\x1a\x87\x94\xe2\x0e\xc7\xe1\x00\xfb\xdd\xdb\x71\x3e\x10\x83\xd5\x55\x8a\x49\xb0\x9f\xa2\xd9\x26\xa9\x2d\x5a\xf2\x3e\x5b\x9a\xf2\x34\xae\x08\x30\x63\x6e\xe8\x98\xf3\x7a\xb7\xe3\x42\x70\x99\xc1\x49\x24\x92\xbe\xeb\x8c\xb1\xda\x0d\xce\xe2\x64\x78\x88\x75\xf3\xd9\x5f\x1a\x2c\xc4\x76\x3b\x53\xe1\xfa\x12\x4e\x60\x55\x0e\x6a\x88\xa1\x9b\xf6\xbf\x36\x5b\x7e\xfd"
		"\x43\xa8\x8a\x62\x81\xd9\xd6\x67\xe4\x34\x67\x32\xc4\xa1\x8b\x85\x32\x76\x4c\x74\x00\xd8\xa1\xb5\xb3\x7b\xda\x65\xd5\x17\xb6\x49\x76\xba\x33\xab\xa7\x75\x82\xdf\xa4\x2c\xe8\xb7\xbb\xc5\x01\x8f\x28\x4e\xe2\xc9\x9d\x17\x90\xf5\xe7\xe6\x24\xbf\x5b\xce\x40\x1a\xea\x63\x67\x30\xca\xb4\xce\x5a\x21\x23\xfc\x6d\xed\x73\x29\xfc\xbe\x7d\xb0\x5c\xc5\x76\x6d\xdf\x78\x43\xed\x68\xa2\x43\x47\xb6\xf3\x60\x6d\x6a\xc1\x8e\x6a\x91\x03\xfb\x26\xc2\x32\xd5\xf3\xc8\xdb\x66\x41\xd9\x27\x08\xbf\xb5\x6e\x52\x6f\xc7\x0e\x65\x28\x37"
		"\x36\xf7\x9d\xb4\x94\xd1\x0d\x9a\x5b\xbf\x08\xdc\x78\xa1\xfd\x08\x87\x31\x51\xa7\xf9\xe9\x91\xad\xdb\x1c\x24\xf2\xa9\xcb\x46\xa0\xa7\x4a\xd0\x7e\x27\x98\xcf\x98\x7f\x71\x45\x73\x00\x7f\xfc\xa5\x25\x59\x92\x52\xde\x66\x98\x98\x9a\x59\x75\xe1\x89\xa7\xd0\x6a\xa2\x0d\x76\x9f\x1a\x2c\xe6\x15\x7d\x10\x2d\xe9\x78\x94\xe0\xee\x05\xde\x22\xed\x0a\xfd\x26\xb4\xf9\xe8\x98\x88\x45\xc9\x66\xd4\x32\x8b\xaf\x20\x34\x48\x39\x74\x79\x2c\x47\x88\xe5\x47\x79\x74\xcd\xbc\xcd\x0e\x31\xa4\xf9\x03\xf4\x99\xcc\xa6\x1d\x21\xab\x56"
		"\x50\x39\xbf\xa1\x1c\x10\x32\xd9\x82\x0f\x32\xb1\x97\xc5\xb6\x98\xe7\xc0\x18\x79\x7b\x48\xd4\x8d\xc3\xfe\x8c\xa3\x98\x58\xc5\xca\x6e\xb7\xdb\xe2\xf5\xb2\xeb\x17\xc4\x74\x38\xd6\xde\xbd\x76\x56\x97\x5c\x3b\xf6\xb5\x6a\xde\x71\x17\x14\x88\x5e\x5d\x4f\x36\x93\x0a\x92\x4a\x4c\xea\x84\x63\xdf\xc9\xe0\xd7\xab\xa5\x55\x9c\x20\xd0\xba\xdf\x45\xa2\x0b\xf4\x0b\xeb\x4b\xf9\x32\x77\x5a\x73\x65\x17\x92\x65\xcb\xbc\xe0\x3d\xa2\xc9\xcc\x86\x99\x84\x9e\x6a\x5c\x5e\x1f\xee\x7f\x41\x49\xb7\xe8\x0a\xf0\xb5\xec\x35\x85\x09\x60"
		"\x87\xa8\xa2\x10\x3b\x22\x3e\x42\xb6\xe7\x93\xa7\x99\x96\xe7\xad\xba\xb0\xf7\xc9\x90\xda\xcd\xc5\xba\xcd\x8f\xf8\x9e\xfb\xf2\x0f\x19\x0d\x6b\x31\x39\x39\x86\xc8\xae\x45\xc9\x9d\x96\x45\xb5\x0b\xd4\xb3\xf8\x36\x4b\x6f\x08\x21\x0b\x9e\x44\x39\x79\x65\x52\xcc\x34\x48\x6d\x9f\x81\x48\x31\xfa\xeb\x25\xa3\x11\x99\x4f\x07\x17\xb9\xe1\x60\x46\x7f\xc1\x52\x75\xad\xf6\xa2\xae\x2b\x33\x68\x1c\xc8\xfe\x81\x62\x81\xa7\xcc\x67\xf5\x9d\xea\x56\x5f\x5d\x3f\x16\x85\xc3\x6f\x3e\x7e\x97\x34\x87\x29\xfa\x0a\xf5\x69\xb8\x62\x8c"
		"\xe7\x3b\xf7\xd2\x97\xdd\xc7\x6f\x1c\xa3\xc5\x76\xa5\x91\x93\xe6\x51\x84\xac\xbc\x03\xa4\x3c\x44\x16\xda\xbd\x03\xe4\xe6\xbf\xad\x69\x38\xe8\x3e\x16\x42\x9e\xc3\x70\xd7\x95\x25\x19\x28\x7b\x5a\x29\x5f\x5a\xf5\x2b\xea\xfe\xe0\x6d\x5c\x81\x91\xee\xa0\x36\xa6\x12\x62\xe9\xea\x17\xcb\x64\x08\xf4\x85\xc2\x3b\xa8\x92\x21\xb7\x28\xdd\x5c\x1b\x4b\xff\x61\x40\xbd\xdc\x6b\x7e\x4a\xe8\xe7\x24\xf8\xd9\x97\xfc\x9f\xbf\xad\xb6\xec\x0d\xae\x46\xad\xa9\xc7\xbd\xee\xd1\x0d\x5d\x5d\x27\xb8\x1b\xea\x16\x87\x7d\xd8\xb5\x98\x65"
		"\xbf\x29\x94\xe4\x5b\x25\xf7\x29\x91\xae\x17\x9d\x48\x06\xec\x16\x69\x75\x39\x94\x8d\xab\xe1\x43\x75\xf8\xd3\xc4\xba\xe0\xa7\x78\xb5\x7c\x06\x2a\xdc\x38\xfa\xe8\xd7\x0e\x6e\x42\xd2\x05\x29\xb9\x9d\xcd\x36\x45\x8c\xdb\xb8\x80\xf6\xac\x97\x83\x30\xc4\x37\x81\x19\x2f\xb6\x1c\xbe\x98\x92\xb2\x3a\x32\xe6\x25\x4c\x41\x8d\x76\xdc\x6a\x1a\xa2\xdc\x0f\xb7\xc3\x62\x6d\x88\xe8\x2f\xda\x88\x9a\xe6\xe8\x28\x6b\x60\x33\x93\xfd\x93\x6b\xdc\x1b\xe8\xed\xa0\xa2\xeb\xab\x2f\xc8\x86\xfa\x60\xbb\x67\x96\x60\xe2\xc2\xa3\x2f\xe6"
		"\xc4\x02\x47\x12\x4c\xa5\x1d\xc7\x8c\x58\x6b\x65\xb5\x39\x84\x16\x31\x99\xe3\xdc\x4e\x8b\xea\x5b\x41\x38\xf6\xf1\xdb\xae\x2e\xe6\x23\xd0\xde\x00\x7f\x0b\x3f\x6d\x46\x2e\x26\xa9\xfa\xc5\x03\x94\x65\xfc\x5c\x3e\xbe\xd4\x91\xf1\x19\x3c\x76\x6c\x71\x85\x47\x5f\x09\xfb\x51\x48\x90\xd4\xeb\x74\x57\xc4\x47\x22\xc5\xed\x24\x2b\xd9\xcd\xc1\x46\x73\xf6\x53\x72\x38\x36\xbc\xad\x64\x08\x3e\x86\xcf\xe2\xd2\x94\x21\x8f\x8e\x44\x29\xb9\xdf\xc9\xd5\x01\xd7\x4a\x96\xd5\x67\xe7\xc6\x2d\x40\xff\x72\x58\x3a\x2a\x9f\x46\xc5\x58"
		"\x58\x18\x9a\x15\x82\xa2\x23\x05\x04\xad\xce\x10\x4a\x14\xff\x9b\x5e\x91\xbf\xf9\x3e\x68\x08\x67\x5c\xf0\x86\x7b\x94\xb7\x32\x40\x67\xe7\x4e\xc2\x55\xbe\xff\x7a\x63\xa2\x77\xdc\xd4\x16\x85\xcb\x32\x92\xbc\x9f\x9e\xd8\xbc\xf4\xe5\xe3\x4c\x46\xe7\xbc\xda\x29\x69\x87\xc5\x76\x09\xab\x74\xbd\x01\xaa\xca\x20\x6b\x4e\x8a\x5d\x53\x59\xca\xbf\xb7\xe9\x7b\xf6\xf2\x22\x9d\xd7\x31\xb3\x4e\x02\x4a\x54\xf0\xa0\xde\x4e\x8c\x36\x7f\x16\x5e\xf0\x21\xb0\x16\xba\x8e\x79\x6d\x55\x4b\x2d\x1e\xa9\x3c\x7f\xaf\x10\x29\x2a\x15\x52"
		"\x9b\x0d\xec\x72\xfd\xc4\xb5\x89\xec\x87\xeb\x90\x71\x7a\xb5\xbb\xbd\x3d\xb8\x66\x11\x47\x56\x28\x98\x9e\x96\x78\x45\xbe\xcc\x27\xe2\xe9\x17\x19\xfd\x5c\xff\xc7\x3b\xd9\x32\x85\xe4\xc7\x44\x16\x72\x54\xdd\x90\xcb\x04\xd9\x97\xd1\x78\x39\xe6\xc6\xcc\x37\x2c\x16\x7a\x9f\xd0\x20\x04\x91\xfd\x5d\x47\xd0\xd3\x1d\xf0\xf1\xd8\x67\x8c\xb1\x1d\x1e\xce\x06\xe3\xcc\x8b\xcb\x87\x7f\xdc\x51\x7d\x91\xa0\x43\x50\xbe\x4a\x99\x2e\x8b\x1c\x95\x3d\x3c\x4f\xf8\x5b\x31\x09\x47\xc4\x0d\xb2\x7e\x56\x09\x7c\xec\x12\x63\x7a\x84\xe8"
		"\x82\xa5\x08\x9d\xac\x36\xdb\x3b\x17\xfd\x64\x30\x5a\x6a\xfc\x75\xcc\x8b\x99\xb3\x18\x39\x95\xdc\xdf\xe1\xbd\x53\x15\x03\xbb\x3c\x35\xf2\x1e\xba\x88\x33\x9f\xa9\xa9\xc9\xf0\x15\x98\x81\x3c\x10\xf2\x84\x78\x5b\xcd\x54\x0a\x09\x53\x41\xd6\xe9\xf7\xf5\xc5\x05\xe2\x62\x24\xac\x4d\x76\x10\x78\x6c\x8a\x5a\x04\x66\xca\xa4\x51\x6b\x51\x83\x17\xa7\x0c\x97\x63\x73\xd1\x07\x3d\x8d\xb1\x46\xfb\x17\x48\x3f\xc8\x46\xc7\x76\x28\x2a\x5e\xdf\xd4\xeb\x0b\x62\x05\x4e\x1a\xf5\x7f\xb5\x60\x0f\xa8\x01\x2c\xcc\x34\x09\x42\x13\x99"
		"\xe4\xdf\x97\x83\x3e\x28\x0d\xc1\xbc\xe7\xd0\x21\x41\x05\xff\x77\xc5\x2c\x3d\xcc\xd6\x8a\x9e\xa8\x4d\x20\xcd\x7d\x52\x31\xe1\x9f\x38\xf8\xca\xbd\x00\xc2\xc1\x60\xb3\x5f\xa6\xa9\x1c\xd5\xab\x5e\x9a\x29\xdd\xf7\x03\xb3\x85\x10\x8d\xf3\x27\x86\xff\x3d\x85\xe6\xaf\xc8\xea\x2a\x4a\x6f\xc8\x34\x64\x84\x1a\x7a\x89\x6d\xd4\xe3\xc2\xfb\x6f\xce\x9d\xea\x9f\xa3\xb1\xb6\xa8\x51\x69\xb5\x1b\x69\x9a\x30\x82\x05\xca\xc3\x61\xf1\x50\x51\x0f\x3b\xda\x20\x57\x36\xc5\xc7\x4e\xca\xee\x90\x74\xdc\x3e\x51\x2c\xff\xc6\xaa\x5c\x75"
		"\x21\x8e\xb1\xb7\x56\xf1\x4f\xf9\x59\x34\x0b\x67\x60\x70\xce\xe9\x1f\xdf\xd6\x25\x6a\x4f\xb8\x5c\x65\xe0\xb8\xbc\x68\x93\xa0\x98\x10\x69\x5d\xd3\x83\x1d\xaa\x07\x8c\x64\x05\x40\x23\x7b\x9d\x71\x02\x92\xfc\x0d\x80\xc8\x7d\x7d\xdc\x1f\x13\xf6\x11\x2e\x05\x09\x7e\xa0\x1d\x31\x6b\xd4\x5d\xde\xda\x72\xe3\xca\x39\xc4\x6b\x55\x60\x28\x9e\x02\xd1\x63\xcd\x1c\x7d\x6f\x6b\xb5\x2c\x59\xf5\x3f\xcb\x7a\xb9\x13\x0b\xae\x6c\xc7\xd7\xd9\x2d\x7c\x49\x51\xf0\xb8\x77\x0d\x1c\x3a\x58\xc3\x55\x98\xb4\x25\xe3\x82\x54\x38\x03\x7b"
		"\x5e\xc4\x99\x99\x68\x16\x86\xf3\x83\xe0\xdd\x95\x48\x48\x31\x07\x1f\x44\x14\x07\x8d\x7e\x91\x4d\xfe\xa3\x02\x40\xfc\xab\xe2\x73\xd6\xb4\xab\x10\x40\xd8\xe9\xc5\x6f\x77\x00\xc6\x39\xf0\xd9\x0d\x8f\x02\xaf\x9c\xf2\xcb\xff\xbb\x3f\xf7\x89\x03\x58\x8e\xe3\xf4\x45\xe6\x2c\x6a\x8e\x84\xb3\xa3\xbb\x74\xa0\xff\xd0\xd8\x74\x3e\x9a\xd0\xb4\xbb\xbe\xf6\x94\x55\x9d\x87\xd5\x90\x1a\x90\x81\x56\x93\x3a\xff\x18\xac\xc5\x35\xbd\x55\x2c\xf5\x9b\x98\x12\xeb\xe1\x4b\x7f\x1c\xce\x95\x0b\x6d\x29\xfc\x0e\x25\xfd\x64\x5b\xb0\x5f"
		"\x7e\xd1\xec\x8b\xd1\xe0\x43\xbe\xed\xb6\x1a\xab\x54\xfe\x5e\xd4\x79\x3f\xcf\xc4\x7e\x07\x9e\xee\xf8\x37\x7a\xdf\x85\xdb\x96\xcd\xb4\x04\x8a\xed\x03\x54\x9a\x53\x85\xf7\x98\xe5\xbd\x6b\x6c\xf2\x39\xb5\xe9\xcc\xa3\xac\x6e\x6a\xf9\x23\xe0\xe0\x96\xb1\x27\x42\x21\x60\xc8\x92\x3c\xfd\x51\x9b\xbb\x92\x76\x36\xcc\xe0\x8e\xe5\x0b\x74\x3f\x15\x0b\x09\x82\xa8\xc4\x18\x58\xc8\x6a\x01\x4f\x4d\x46\xc1\xff\x7c\xbb\xc8\x17\xcc\x09\x21\x2f\x9a\x1d\x10\x92\x14\x90\x20\x32\xd8\xfc\x71\x68\x4a\xce\xe0\xd2\x7c\x0e\xe4\xb6\x39"
		"\xf1\x77\x04\xf0\x4e\x18\x43\x1a\xf9\x30\x02\xb9\x9f\xf7\xaf\xea\x70\x68\x90\x3a\x94\xd9\x1d\xa5\x4f\x7e\x39\x1f\xb3\x34\x62\x99\x2b\x08\x32\xa5\x2b\xff\xe2\x87\x07\x37\xc0\xb3\xc8\x70\x91\xcf\xd2\x12\x5f\xa2\x95\x3f\xaf\xeb\x68\x95\x35\x92\x18\xc4\xe9\x5c\xce\x8b\x20\xc3\xb9\xd8\x58\x06\x9a\xe3\x06\x24\x0e\xda\xf6\x59\x5b\xe7\xc7\x43\x59\xb0\x8e\xe5\x45\x5a\x5e\x4c\x66\x33\xcc\x81\x6f\x22\xaa\xf0\x2d\xdb\xad\x29\x2b\x43\xc9\x77\xf3\xb8\x9b\x88\xb7\x13\x4c\x81\x09\xd6\x62\x46\x11\x39\xd0\xe9\x36\x15\xfb\xe5"
		"\x2d\xef\x94\xbe\x37\x18\x64\xfd\x1e\x84\x70\x53\x7a\x94\xa4\x11\x66\x42\xab\x52\x97\xc4\x0b\xbd\xf7\xf6\xc6\xae\x19\x3c\x46\xfc\x23\xff\x67\xb6\xb2\x15\x2e\x2e\xec\x8e\xbd\x55\x08\x7b\xc8\x96\xc4\x81\xa2\x53\x57\xd6\x79\x26\x5b\x06\xcc\xae\x4a\x67\xc1\x77\xe1\xc8\x39\xc8\x6e\x68\xc7\xf7\xc2\x3e\xd0\x75\x61\x8e\xa2\x1f\x7e\x75\xd4\x03\xc5\xfc\x0a\xf7\x2e\x28\x65\x8a\x49\xc7\xac\xab\x3f\xe7\x18\xc6\xa4\xf5\x8f\x6e\xb0\x3d\x22\xf3\x90\x65\x37\x4a\x0b\x95\x16\x7e\x7f\x35\xe1\xf1\xeb\xad\xc8\x01\x2b\x02\x62\x72"
		"\x37\x43\x77\x73\x2f\xec\xbf\xce\xe7\x4f\x11\xf0\x7b\xb2\x8b\x41\x4d\xa6\xcf\x9a\x68\x86\x61\x36\xc1\x08\x25\xf6\xf0\xe4\xa2\xf6\x85\xb5\x62\x56\x76\x26\xbd\xf2\xf2\x7d\x13\x46\x0c\x82\x4d\xc3\x49\x64\x06\xb2\x3c\x6b\xf3\x3f\x5a\x71\x6a\xe1\xb1\x18\xd7\x78\x8d\x02\x77\x1e\x97\x0d\x18\x90\x46\x5a\x5d\x49\x9d\x39\x11\x85\xfe\x8f\x8c\xcd\x7e\x84\x7f\xc9\x93\x38\xcd\x58\xd1\x88\x2f\x4e\x1e\x57\x97\x42\x08\xc6\x05\x6d\x1b\x53\x39\x8d\x0b\x94\x59\x36\x3b\x29\xc4\xa5\x06\x02\x23\x9c\xde\x1e\x91\xd6\xe2\x8d\x5a\xc5"
		"\xc7\x0e\x57\xd1\x13\x8f\x9d\xc7\x12\xda\xcf\xdb\x08\x0e\x24\xa7\xf3\x55\x58\x98\x79\xa4\x7b\x99\x2b\x8a\x57\x3c\x09\x6f\x42\x4b\x04\x95\x0a\x0f\x30\x45\x19\x4e\x4c\x39\x05\xcf\xeb\x0f\x94\x33\xac\x2d\xf4\x8e\xfb\x48\x30\xd8\x1d\xd9\xba\x1e\x9d\xca\xb7\x7c\x1b\x67\xf6\xc0\xfe\xaf\x8a\x4e\x13\x7b\xa1\xe3\xd2\xa9\x78\x3c\xed\xc9\xc8\x9a\x62\xc1\x1a\x74\x15\xd4\x03\x51\x06\x7d\x67\x47\x03\xe5\xd0\x22\xbd\xa4\x77\x2a\x37\x93\x49\xd9\xf0\xdf\xbf\xd0\x55\xfa\x7e\xa5\x18\x5d\xef\x4b\x01\x6e\xc4\x53\xe3\xd0\x62\xd4"
		"\x1e\x09\xe4\x39\x62\xe5\xe2\x01\x45\x5d\xb3\x09\x15\xd5\x97\xd7\x57\x29\xf0\x68\xb1\xa5\xe1\xee\x13\x11\xe0\x5d\x23\x6b\xc7\xdb\x5c\x23\x4d\xd2\x1d\xab\x84\x5b\x5f\x49\x2f\x65\xc1\xd4\xa1\x08\x67\xca\x79\x83\x6d\x04\x94\x2c\x56\x0a\xe5\x44\x31\xb4\xea\x22\x33\xeb\x02\x57\x8a\x96\xfe\xda\xec\x4b\x6e\x9e\x14\x83\xe8\xff\x35\x63\x19\x19\x64\xc6\xc1\xd4\x36\xfd\x58\xce\x6b\xdf\x67\x6d\x72\xef\xc0\x60\x12\x8e\x7f\xb4\x4a\xd1\x96\x40\xc4\x63\xaa\x37\xfa\xaa\x42\x5f\xf3\x8c\x5c\x6b\x92\x5e\x28\x04\x60\xc0\xaf\x83"
		"\xdd\x1c\x4e\x12\xc5\x66\xf0\x09\xa6\xd1\xeb\x8b\xea\xc6\x8d\x02\x0f\xd7\x3d\x57\x7f\x16\x37\xf8\x34\x7c\x76\x99\x1e\xfc\xa3\xac\x44\xa0\xf1\x97\x9d\x91\xd1\xa6\x06\x15\xfe\x5b\xc5\x42\x56\xea\x2c\xc0\x1e\x0c\xd7\xc2\x7b\x5f\x64\x8a\xed\xc2\x41\x98\xf0\x7f\x89\x41\xc3\xa2\x95\xcd\xbf\x32\x84\x98\x78\x45\x70\xa0\x8a\xc7\x7d\x9d\x88\xed\x6a\x97\x5e\x30\x80\x29\xd0\x8d\x2e\x23\xa2\x6f\xca\x97\x68\x6d\x37\x96\x8e\x68\x03\x62\xad\xf0\x2f\xab\xc3\x9e\xa4\x33\x27\x68\x5c\xe2\x3b\x45\x31\xc9\x7a\x76\xcc\xcd\xf1\x48"
		"\xe2\xde\xd4\x1b\x8d\x3b\x72\x7d\x28\xc9\xde\xe8\xae\x6d\x18\x17\x3c\xe5\x77\x17\xaa\x9d\x06\x77\x47\xdf\x98\xfe\x48\xe4\x0b\x2a\x8c\xa3\x69\x57\xf6\x0a\x71\x90\x31\x9a\x48\xe2\xb7\x81\x91\x04\x99\x10\x6d\xaf\x37\x56\x50\xd8\xf0\x4a\x5d\x85\x1e\x78\xa5\x27\xad\xe4\x86\x3a\xe0\x59\xdc\x92\x5c\xfc\xb8\x4d\xfb\xe2\x40\xbe\x08\x29\xc6\x97\x12\xee\x04\xc2\xdc\xe8\x27\xb4\xc8\x33\x0c\xa0\xdb\x3c\xcd\x33\x00\x87\x93\xf8\x23\xd8\xf3\xf1\xee\x09\xdc\xbe\x97\x89\xa6\xfd\xca\x86\x9b\xd2\xa7\xaf\xaa\xba\x7c\x23\x20\x79"
		"\x56\x82\x19\x43\x2c\x77\x07\xe6\x5e\xe0\xf0\x78\x2e\x7b\x22\x50\x30\xec\x5e\x44\x98\x23\xb9\x8f\xe2\x3c\x2d\x84\x1a\x6d\xa8\x56\x11\x37\xe3\x06\xc5\xb4\x43\x35\x29\xa4\xa6\x2b\x21\x9d\xd5\xb0\x61\xa8\xa5\x24\x0a\xa1\x07\x80\xce\x12\x8f\x0c\x60\xe3\xe2\xfe\xc4\xea\xb6\xad\xf8\xf6\xfe\x07\x0d\x50\x7d\x48\x59\xc5\xe2\x2c\x9a\x61\xf4\x1f\xf6\x85\xc4\x3d\x2b\x3c\x61\x43\xee\x86\x3f\x22\x3c\xd8\x40\x94\x47\xa8\x32\xb5\x8d\x74\xb0\xe9\x9b\x86\xe1\x28\x45\x30\x78\x66\xdd\x88\x6c\x03\xd3\x7c\xf4\xa0\x26\xbd\x38\x37"
		"\x35\x04\x7b\x0e\xc3\x37\xf1\x93\x64\x2d\xb7\x24\x2c\x0a\xa3\x74\xb0\x89\xe7\x15\x55\xd3\xad\x91\x60\x02\x96\x7f\xc5\x81\xb9\xe2\xbf\x3f\xef\x49\x98\x72\xd4\x87\x52\x80\xb6\xe8\xc9\x71\xaa\xe7\xc0\x88\x35\x9d\x9b\xfe\xd4\x50\x22\x13\x9e\xd9\x0f\xef\x6d\x83\xe4\x42\xef\x06\xdd\x27\xec\xac\xbd\x13\xc2\x7a\x18\x8d\xc0\xf8\x5e\x72\x70\xbd\x55\x23\xec\xc6\xb3\xe8\x9d\x4f\xf9\xba\xca\x75\x17\xac\xef\x16\x70\xe9\x1c\xa4\xd6\x88\xa8\x1c\xcc\xa3\x75\x7d\xff\x36\x7d\xbb\x59\x2f\xf9\x36\x4c\x5f\x9f\x91\xa0\x3b\x64\xea"
		"\xb6\xda\x40\x4c\x3b\x6e\xdc\xdd\x62\x1f\xf1\x56\x1f\x75\x79\xf6\xe4\x97\x0b\x77\x19\x0c\xa3\x9a\x7a\x62\xd1\xfe\xf3\xae\x26\x6a\xc0\x9a\x08\xc6\x6b\xe9\xb4\xf8\x87\x4a\xe0\xa8\xd5\x37\x3b\x71\x48\x2c\x3a\x12\x93\x47\x24\x37\xcb\x89\xd7\x97\x71\xeb\x4d\x7b\x90\x0d\xc2\xb5\x40\x7a\x83\x4f\x86\x41\xc5\x51\xd7\x2a\xc5\x77\x78\xb3\x02\x19\x9f\x2e\x5b\x56\x73\x4f\x85\x3c\x88\xa0\x4e\x7a\xfa\x5c\x13\xbb\x41\x6b\xde\x80\xdf\xe7\x80\x25\x89\x56\xf7\x09\x07\xe2\x29\x97\xed\x2e\xc5\xee\xee\x1c\x21\x3c\xea\xe4\xb2\x43"
		"\xea\xef\x46\x8a\xfc\xd6\x4e\x04\x84\xc6\x4d\x3a\xe1\x33\x06\xb8\xcc\xfa\x03\x28\xf3\xf7\x5f\x74\x9d\x7e\x2d\xb2\x7f\xa1\x86\x9a\x54\xcc\x8f\xcc\x0f\x1f\x66\x31\x4f\x04\x22\x4b\x15\x2e\xec\xbd\x44\x64\x69\xbe\xc2\x0a\x1c\xce\x35\x58\x4a\xc1\xc0\xed\xcc\xa2\x18\xf9\x86\x93\xee\x01\xc3\xd8\xa3\x72\x27\x5b\x92\xce\x82\x91\xd2\xed\xfa\x43\x96\x0a\x1e\x96\x7e\xf2\x37\x6b\xfd\x51\x44\x01\x22\x8e\x0b\xf1\x09\x5e\x05\x4f\x59\xcc\x29\x36\x1b\x53\x2f\x80\xd9\x0b\x8b\xd9\xbf\x14\x58\x40\xdd\x93\x3c\x6a\x4a\x3a\x9e\xfd"
		"\xdc\x15\x20\xbe\x54\x09\xe8\x63\xcd\x58\x24\xb7\xda\x30\xf4\x7b\x17\xf0\x93\x15\xa0\x15\xbf\xfc\xfa\x90\x84\xdc\x5d\x1a\xe0\x92\x1e\x93\xbf\x13\xf7\x32\xe7\xe3\xad\x8c\xed\xba\xe3\x02\x8a\xa8\x34\x08\xdb\x32\x9d\xca\x96\xdb\x87\xb6\x28\xf7\x9c\x84\x92\x7d\x84\x71\x11\x59\xfc\xc0\x5d\x77\x4f\x1f\xea\x5c\x9c\x6b\xed\xa6\x17\x7e\x74\x8e\x6d\x27\x20\x9f\x73\xd6\x4e\xe7\x54\x89\x0c\x37\x2b\xf4\x56\x60\x26\xcf\x0b\x8e\x19\x47\x1e\x47\xc5\xef\x1a\x4c\xaa\x03\x54\x9d\xcd\x9b\x15\xec\xcf\x51\x68\x4d\xb3\xf5\x2f\xbe"
		"\x78\x87\x2b\x29\x28\xef\x11\x7b\xef\xcd\x7f\x57\x4d\xa2\x3e\x89\xab\x95\xed\x21\x5a\x6e\x13\x1f\x4a\xaa\x3e\x24\xe9\xf7\x69\x3b\x0d\x7d\x63\xbe\xea\x19\x4a\x2a\x07\xac\xf8\x67\x61\x22\x5c\x19\x69\x40\x97\x97\x8b\xee\x8b\x49\x77\xe6\x9e\x73\x92\x2c\x78\x9f\x63\xdb\x05\xeb\xa8\x0d\x62\x4a\xb4\x06\x05\x1a\x81\x6e\xee\x2a\x17\xa6\x73\x30\xb9\xde\xd7\x5c\x87\xaa\xe0\x81\x8c\xfe\x8d\xa1\x41\x95\x06\x87\x36\x78\xe2\xc9\x43\xc1\x13\xbb\x30\x72\x64\x25\x3e\x74\x22\x66\xb8\x50\x61\xa9\x5c\x1f\x19\x25\xd8\x18\x59\x5f"
		"\x0a\x13\xfa\xe3\x16\xd0\x4a\x0d\xc8\x23\x3a\x73\x3c\x21\x22\xd8\x48\x94\x39\x01\x42\xe0\x56\x60\xff\xf9\x38\x94\x02\xc8\xc2\x30\x2b\xc3\xe0\x27\xcb\x48\x06\xbb\x05\xf4\x9c\x9b\xdf\xea\xf7\xfe\x34\xb6\xff\xb8\xf1\xb4\xf2\xd7\x6e\xa5\x09\x2d\x1e\xe5\x32\x6b\xd7\x1e\xd3\x17\xcd\x08\xc8\xd3\xa4\xca\xbf\x08\xf1\x8d\xa3\xe1\xcd\xa9\xdf\xf9\xef\x74\x33\x1d\x04\xcd\x8f\xb2\xc4\x2c\xa7\x85\xc8\xfd\x2b\x3a\xff\x41\x6c\x40\x25\x82\x66\x5b\xf8\x7e\xf2\xca\x12\x98\xdb\x9d\xdb\x28\x7b\x78\x99\x09\x91\xff\x04\x00\x19\xc8"
		"\xbb\xde\xa8\x67\x28\x34\x99\x04\xd6\x0b\xf1\x3b\xc0\x3b\x50\xff\xbb\xcd\x92\x74\xe7\x7b\x0a\xaf\x78\x0b\x81\xf4\x8a\xbf\xe6\x36\x16\x6f\x69\xa4\x52\x36\x3e\x35\x3c\x5d\x6c\x51\x5b\x12\xda\x0a\x52\x7d\x25\x8d\xd8\x38\xb8\xc7\x3e\x8b\xfe\xbb\xba\x81\xc9\x9c\x95\x09\x86\x4a\x32\x2f\x99\xfc\x0c\x94\xc3\x0e\x96\xfc\xee\xe2\x01\xe9\xfe\xca\x2d\xcb\x34\x7c\xaf\x70\xc5\xb4\x40\xa1\x54\x1d\xae\xd0\xc9\x70\xa5\x1f\xa7\x0a\x80\x8f\x67\x51\x75\x24\x56\x1c\x3f\x73\x41\xaa\x68\xfd\xe0\xb8\xa9\xea\xe4\x6d\xec\xe8\x4b\xc7"
		"\x21\x92\x00\x59\xcb\xbf\x8f\x16\x1b\x73\x93\x58\x85\x29\xca\x6e\x67\xcb\x31\xd9\x72\xc4\x7d\x68\xe3\x63\x71\x98\x7f\xb9\xfa\x2e\xa6\xf5\xfe\x67\x1f\x6f\xb2\x67\xb5\xfe\xc1\x0f\xf6\xdc\xfe\xe4\xe0\x46\x85\x18\xea\xc5\x19\x34\x4e\xbd\xc9\x38\xd9\xda\x72\xda\x1d\xd3\xa8\x7b\x08\x33\xba\x00\x51\xc8\x56\xcd\xc1\x04\x98\x25\xb9\x2f\x6b\x52\x7b\x16\xc0\x26\x2e\x3f\xd3\xa2\x98\x80\xe5\x6f\x50\x8d\xd5\xbb\x52\x8a\x6b\xaf\x1a\x34\x9c\xb1\xf4\x8a\x73\x4a\xdb\x98\x8e\x33\x4b\x31\xb0\x92\x03\x21\xf9\x25\x7b\xdb\x09\x35"
		"\xbb\xcd\x8c\x9d\xba\x6f\x3e\x80\x4e\x1f\x40\xb4\x2a\xb5\x26\x81\x50\x80\x11\x84\x75\xad\xcf\xa5\xa2\x53\xdb\xbb\x52\x56\x72\xaf\x4c\x88\x32\xfd\xd3\x63\xe2\x5a\xc4\x25\x8d\x64\x92\x34\x89\x96\x80\x0a\x9a\x39\x33\x1f\xd2\xa8\x53\x48\x30\x61\x8e\x39\x1b\xdc\x03\x65\xe9\x65\x49\x90\xa0\xc7\xe2\x07\x48\x38\xec\x57\x56\x5f\x11\xbd\x4b\x5c\x7e\xd2\x00\xa2\x28\xa4\x61\x3f\xcd\x84\x8c\xbe\xef\xc4\xcc\x1d\xe6\x0f\xe4\xb8\xd1\xf5\xac\x5b\x53\x0c\x78\x0f\x53\x55\x15\xb4\x4d\x24\xd0\x27\xa2\xf5\x6b\x5c\xd9\xfa\xb8\xf5"
		"\x8a\x4f\x5c\x5e\x77\x0a\x12\xd0\xad\x93\x05\xa5\xd7\x7d\x14\xc0\xc1\x86\xf9\x38\xee\x4e\x63\xc9\x82\x0e\xf7\x69\x69\x60\x5e\x7f\x58\x0f\x77\x3b\xad\x3a\x04\xdd\xc3\x43\x33\x92\x1f\xde\x61\x73\x70\x56\xdc\xb1\x40\x15\xe2\xfd\x4f\x04\xb2\x83\x10\x93\xf6\xc1\xf3\x87\x6a\xfa\x33\xcc\x51\x2c\x92\x85\x63\x16\x6a\x52\x74\x98\x89\x74\x2e\xb8\x82\xd2\xa0\x24\x58\x84\xba\x3f\x2c\xe7\x29\x80\x99\x8b\x86\x38\x16\x1d\xa7\xcc\x2f\x05\xbf\xa2\xfd\x97\x97\xcd\x8a\xe5\x5a\xec\x26\x81\xa2\x93\xdb\x60\x16\x0f\xa9\xe8\x2f\x97"
		"\x58\xec\x4d\x1c\x03\x35\xc3\xcb\xab\x90\x01\xb7\xc5\x33\xbf\xae\x5d\x8c\x3d\x55\xa4\x2f\x32\x66\xba\x14\x30\x17\xea\x3f\x47\xdf\x05\x5e\x25\x9a\x8d\xc1\x2d\x01\x9a\xb7\xb4\x4c\xa4\xe5\xd0\xf8\xbd\xe3\xec\xcd\x61\xd8\x7c\xec\xe3\x0a\x41\xb9\x39\x27\x79\x82\x63\x02\xa5\x18\xef\xab\xa8\x76\xc7\xb0\xe1\x28\x7b\x3c\x30\x07\x57\x95\x27\x6a\x41\x5b\xd1\x98\x20\x04\xe3\x07\xa0\x4a\x5b\x85\x12\x26\x98\x83\x12\x8b\xce\x48\x8b\x76\xfd\xa5\x59\x2c\x7b\x07\x2b\xbb\x85\x7a\x48\x86\x41\xd4\xad\x62\xf2\x32\xd6\xbf\x66\x26"
		"\x5a\xaf\x2f\xaa\x39\x8f\x5d\x81\x28\x00\x73\xf7\xb1\x8c\x79\x85\x3b\x39\x62\xee\x98\x98\xd9\x2c\x3f\x12\x01\x3f\x40\x29\xaa\x4e\xc6\x27\x15\x4c\x04\x7f\x8e\x4d\x19\x6f\x53\x8d\x0f\x9e\xd7\xf7\x23\x78\x93\x22\xce\x25\x4e\x3f\xce\x56\x16\x16\x1c\x74\xcd\xf0\x6e\x3e\x95\x7e\xcb\x67\xf9\x2f\x6a\x64\xe3\x67\x90\x2e\x00\x02\x61\x23\x89\x90\x9e\x3e\xb7\xac\x29\x3d\x53\xf7\x9c\x2a\xea\xea\x65\x89\xa8\xe5\xab\xf3\x68\x9f\xb6\x73\x13\x75\xe5\xeb\x20\x6b\xbe\x3a\xaf\xa6\xb9\xc0\xe6\xf7\x8e\xf4\xc3\xb5\xa4\xaf\xf2\xe6"
		"\x26\x09\x11\x12\x69\x76\x0b\xce\xb5\x6b\x4e\x4e\x1d\x2b\x04\x2d\x73\xbd\x46\x5d\x11\xe1\x27\x39\x87\x5b\xb1\x60\xf7\x32\x84\xdb\x88\xb3\x0b\x26\x8c\x19\x88\xde\x95\x93\x08\xdc\x68\x53\xc1\xdf\x49\x75\x71\xe5\x79\x79\x22\xb7\xbd\x2a\x33\xa5\x9f\xf0\xb8\xc9\xc0\xc0\x8c\x2c\xb5\xfe\x95\xcf\x0e\x69\x3c\x3f\xb3\xfc\xcd\x12\xe4\x76\x41\xd9\xbe\xc8\xa0\x79\xab\xf0\xcb\xa6\x41\xa0\xf6\xe2\xae\x22\xc1\x67\xfc\x50\xbc\x34\xc7\x93\xdb\xb0\xc2\xf4\x84\x29\xe2\xfb\x4f\x11\xcd\x65\x62\xf8\x34\x64\x4d\x8b\x3a\x20\x2d\xf7"
		"\x07\xd3\x13\xa2\x27\xa4\xb5\x45\x2f\x6b\x77\xec\x40\x8b\x37\x27\xf6\x24\x88\xaf\x50\x14\x25\x16\x82\xb3\x15\xf2\xa5\x48\xf4\xf6\x21\x41\xaf\xfc\xeb\x85\x8f\x1c\x3e\x63\x5a\x39\xab\xab\x56\x82\xe8\x8f\xea\xeb\x58\xd6\xa9\x0b\xa0\x29\x6f\x3e\x92\xf7\x5f\xef\xc6\x00\xd0\xf3\x67\x7c\x3f\x00\x68\xe5\x8a\x12\x51\x5f\x8f\x01\xd0\x24\x09\xd2\xac\x79\x6b\x94\xfc\xcd\xdc\x75\x34\x22\x21\xb8\x3b\x20\xd1\x16\x2b\x3b\x32\x73\x4e\x05\xf7\x98\x0f\xac\xfc\x65\x80\xf8\x13\xce\x91\x44\xa6\x1c\xb5\x66\xe0\xad\x10\xdc\x8e\xa6"
		"\x4e\xa3\x04\xde\x0a\x44\x41\x6e\xd9\xe4\xe4\xa2\xed\x37\xc0\x89\xab\xd9\xf5\x83\x6e\x63\xfb\x8c\x18\xda\xf2\xcb\x27\x09\xef\xce\xad\x0a\x60\xde\xd5\x31\x60\xd8\x51\x85\xdc\x6b\x6f\x31\xbd\xff\x6d\xec\x0b\x3d\x82\x3b\x3e\xe9\xe8\xcf\x3f\x8b\x95\xd3\xd2\xe8\xf7\x07\x7f\x9d\x3c\xed\xae\x12\xa3\xa9\x9a\xa1\x45\x19\xf6\xa2\x1e\x71\x8a\xd5\xe2\x32\x5c\x13\x04\xfe\xa8\x23\xf7\x6c\xdf\x2f\xe1\xdb\x99\x5b\xff\xf9\x9a\xa2\x79\xe5\xb3\x22\xe4\x81\x6e\x06\xeb\x77\x58\x13\xf3\xfc\xce\x78\xe9\xa3\x8f\x2c\xb5\x64\x99\xcf"
		"\x62\xbf\x2a\xf1\xd1\x4c\xdd\x41\x28\xd9\xe3\x65\x8d\x99\x37\x6d\x80\x5a\x44\x50\x57\xff\x5d\xbd\xfe\xc5\x7b\xdd\xf2\xb7\xaa\xc2\xce\xd9\x55\x55\x1d\x58\x19\xb7\x0f\xb8\x8c\x61\xbb\xf9\x0c\xf5\x0b\x60\xbd\x3d\x9f\xff\x68\xb1\x57\x53\x17\xf9\xdf\x7d\x5a\xf2\xab\xe9\xc5\x8c\xd0\x36\xa2\xc1\x3c\x35\xca\x2a\xf8\x6c\x8c\x6b\x89\x08\x09\xc2\xc1\x4d\xbc\x52\xaf\x68\x73\x3c\xb9\xb9\x43\x66\xe7\x1b\x43\xc6\x42\x67\xa1\xad\xbf\x06\x9e\xf7\xbb\xe1\xd4\x84\x0e\xe2\xe6\x54\xa5\xfa\x9b\x6c\xb7\x1e\x4c\x12\xb9\x86\x7a\x03"
		"\x30\xb0\xe8\x89\xd9\x55\xc0\x92\x8b\x05\xc0\x93\x9d\x01\xd6\x26\x94\xa6\x8b\x19\x22\x28\x38\xac\xdf\x5d\x53\xc2\x62\xf4\xd1\xb6\xc5\x08\x91\x28\xda\x2d\xb0\x95\x1a\x3d\x6a\x17\x0a\x5e\xb6\x55\xed\x46\xbe\x20\x34\x30\x53\x31\xa8\xcf\xd0\x92\xaa\xfa\x67\x67\x55\x97\x60\xa8\x7c\x6c\xfe\x19\x75\xb2\x7f\xcd\xbc\xc9\x6b\xe9\xc7\x39\xc3\xfd\xab\x71\xc0\x50\x6b\x0a\xfa\xf3\x33\x5f\xc6\x7e\x97\xa0\x33\x67\x60\x04\xfe\xe9\x67\x7b\x2c\x96\x70\x58\xe6\x81\xc1\x4c\x61\xee\x9a\xb6\x95\x5d\x3d\xdf\x1c\x58\xa6\x53\xf6\x38"
		"\xf2\x90\x95\xf1\x8b\xd3\x8d\xf1\xfa\x62\x0b\x84\xd2\x5c\xce\x75\x2b\xa1\x87\x75\xfd\xf3\x7d\xee\xf7\x28\x41\x52\x9e\x84\x4e\xa4\x95\x5d\xe8\x23\xaf\xf4\xc0\xc0\x7f\x99\x61\x93\xdb\x31\x2e\x67\xc3\x17\xfa\x14\x19\x67\x20\x24\xba\x87\x2e\x4c\xad\x3e\xfd\x95\x87\x93\x50\x73\xe9\xc4\x13\xa5\x4c\x0e\x56\xbf\x3d\x24\x4c\x52\x04\x6e\x38\xfe\xcb\x5d\x2c\xa7\x64\x49\x33\xd2\x7c\x01\xd7\x1b\xa8\x12\xf2\x44\x23\xb7\x7b\xf6\x68\x4c\xd7\x9e\x8e\x15\x87\x18\xce\x14\x08\xcb\xe2\x1c\x00\xf9\xfa\xe7\xab\xde\xba\x3c\x62\xc8"
		"\xc0\x48\x38\xaa\x9e\xa0\xda\x03\x71\x12\x2f\x07\x4b\x56\xf8\xd0\xc6\x97\x10\x35\x39\xd4\xcf\xee\xa2\xb1\x8a\x27\x9b\xe8\xdc\xef\x24\xe9\x67\xa4\x85\xb2\x5d\x67\x52\x8b\x1d\x16\xfe\x01\x03\xdc\x19\xd9\xb2\xa3\x66\x81\x72\x54\x8e\xec\x39\x15\xe8\x38\xba\x5c\x9d\xf4\x0b\x8c\xef\x08\x62\x9e\x69\x23\xf9\x5d\x11\x43\xa9\xdd\xa2\x39\x18\x32\x40\xdf\x92\x95\xa6\x31\xad\xb2\x78\x43\x62\xa6\x23\x58\x2d\x76\xb3\xa2\xb1\x78\xde\x17\x3e\xbf\xbb\x5c\xd2\xce\xb9\xd1\x18\xdb\xe1\xf7\x39\xcf\x39\x94\x8d\x4f\xad\x5e\xa3\xfe"
		"\x33\x97\xf9\xf7\xa9\xa7\xa5\x70\xdc\x6e\x9d\x72\xf7\x03\x14\xed\xbd\x1f\xef\x82\x13\x79\x32\x27\x30\x73\x24\x93\xeb\x17\x29\xab\x20\x39\xcc\x15\x40\xd2\x92\xa5\xe9\x83\x5c\x77\xfd\xdc\xac\x16\xaa\x0f\x5d\xed\x0c\xda\x91\xfa\x78\x3c\xce\xc8\x42\xd2\x05\x91\x74\xba\x52\x50\x4d\xab\x09\x23\x16\x2a\xe6\x26\x0f\x06\x77\xf2\x99\xd7\x26\xb0\x2f\x13\xb5\xd1\xaf\xa2\x07\x88\x63\xe5\xb4\xc1\x33\x1a\xc1\x14\x6f\x9d\x3d\x08\xf1\x11\x90\x4e\xf2\xf4\xe5\xa8\x79\xc3\x50\xf6\x85\x83\x76\x30\x77\x40\x07\xdc\x37\xac\x9b\xbc"
		"\x9d\xc6\xf0\x51\x93\xee\x57\xac\xdf\xfa\x46\xa7\x39\x09\xf1\x89\xda\xee\x7b\xc4\xf3\xe6\x85\x6c\xfa\x39\x7e\x6f\x73\xb2\xf2\x52\xae\x8d\xa2\x27\x68\x91\x10\x89\x69\x8c\x74\xda\xea\xfa\xec\x4b\x2d\x24\x2b\x61\x5d\x05\xb4\xef\x94\x74\xf0\xd3\x17\x0f\xb0\x8a\xa5\xf7\xf2\x2b\x36\x6a\xeb\xef\x06\x09\xc9\x11\x08\xa0\xf6\x1f\x14\x0a\xa7\x4b\x8f\x87\x9e\x48\xc7\xa5\x29\xe8\xc1\x35\xa8\x90\x85\x58\x6b\xe2\x10\xd3\xc5\xbc\x41\xe4\x55\xe9\xe2\x6d\x17\xbf\x24\x71\xa7\x3f\x04\x4e\x06\xdc\xf2\xdc\x43\x10\xe1\xc7\xfe\x66"
		"\xb3\x07\x63\x44\x4a\x5e\x27\xcb\x8e\x54\xff\x81\xe0\x4a\xb0\xc3\xf9\x73\x15\xfd\x38\x80\x18\xa4\x40\x03\x2f\xb8\x6f\x37\xf7\x97\x2a\x8b\x1c\x86\xc3\xc0\xdb\x0d\x5b\xc1\x7e\xe0\x0d\x29\xc2\x5d\xfc\x4d\xe8\x7a\x4f\x88\x09\xce\x5a\xa7\xb3\xd8\x39\x02\x60\x49\xaf\xdc\x47\x97\x9a\xed\xd2\xe5\x6c\x39\x0d\xeb\x3e\x66\xf0\xd1\x35\xee\x78\xb9\x64\xc6\x32\x28\x40\xef\x86\x2d\x70\x6e\xbd\xda\x5a\x23\x97\x9f\xc3\x2f\x6f\x07\x87\x6c\x55\xa9\x63\x19\x4c\x74\xf5\xa8\x61\x73\x03\x14\x7b\x44\x5f\x0c\x34\x1a\xbc\xa2\xd9\x45"
		"\x81\x7d\x8a\x37\xbe\x07\xee\xf6\x97\xb0\x59\x62\xb6\x7a\xea\x34\x4f\x87\x1c\x67\x60\xd4\xe2\xe9\xc7\x2c\x62\x86\xb4\xb3\xac\x2c\x2e\x94\xe3\x82\xf7\xba\xe0\xec\x76\xce\xaa\x86\x9e\xbb\xbe\x24\xec\xca\xf7\xa4\x3a\x38\x84\x8a\xa4\x02\x15\xb3\xb8\x85\x13\xd6\x54\x44\x54\xa8\xf1\x31\x86\x1e\x5a\x71\x11\xed\x1c\x9d\x4c\xe9\x00\x9c\xb2\x4c\x1d\x1e\x34\x85\x91\x31\x98\x0f\x4d\x94\x8c\xb2\xd5\x38\xa5\x04\x35\x91\x99\x3d\x15\xcd\x0f\x2b\xa9\xb8\xba\x1e\x0a\x08\x08\xc5\xcf\x0b\xf0\x3e\x98\xc5\x74\x12\x19\xc3\xf4\xb5"
		"\x7e\xcc\x14\x72\xfc\x3f\x6a\x21\x8d\xb2\xc2\x25\x40\x3f\x52\x19\xb4\xf8\x6e\x3e\x10\x1d\xd2\x55\xf2\x45\xe4\x19\xab\x34\x3a\xbc\xb4\x71\x1e\xd8\x26\xb1\x61\x92\xee\x0f\x0e\xdc\x3c\x8c\x58\xca\x84\xbf\x8d\x2c\xd3\x09\x4d\xde\xc5\xa6\x7c\x05\xcd\x69\x0c\xdf\xa9\xbc\x60\xdc\x20\xee\xed\x03\xdd\x20\x86\x64\x5a\x8a\x44\xc4\x18\x0e\x25\xf4\x70\x44\xff\x48\x7d\x54\xa2\xda\x3c\xa0\xd1\x67\xc9\x91\xdc\xa7\x39\xf9\x7b\xdd\x0b\x76\x44\xab\x3a\x01\xd4\x9a\x7d\xde\x0d\xca\xd6\x24\x37\xb6\x83\x87\xf3\xa8\x9a\xb8\xb1\x1e"
		"\x20\xf7\xba\x4b\x15\xdd\x36\x6e\x7c\x09\xd8\x03\x5e\x15\xd8\xfc\xf6\x64\x34\x37\xa5\xf5\xc4\x8a\x7c\xdb\x79\x96\x65\xd2\xf8\x15\x92\x58\xfd\xc5\x93\xbc\x24\x5d\x51\x10\xd3\x32\x8f\xa0\x2b\xc5\xe8\x93\x68\xa3\x30\x66\x28\x15\xa1\x1f\x08\x46\x02\x0d\x8e\xc4\xa1\xc2\x83\xe5\x02\x1b\x6c\xab\xaf\x89\x3e\x95\x64\xd2\x1a\x0e\x4b\x25\xb6\xd1\xbc\x2c\xe5\xea\x3d\x8b\x75\x14\x6f\x7a\xde\x2c\xbd\x1f\xda\x03\xe0\xab\xd2\xbb\x14\x06\xa5\x08\xb8\x44\xac\x12\xbb\x7e\xeb\xa0\x95\xa2\x67\xd5\x27\xa4\x84\xff\x8e\xba\x9c\xb5"
		"\xcf\xe2\x33\x6c\x59\x68\xbc\xd2\x41\x81\xbe\xf7\x75\x1b\xdb\xb9\xce\x5a\x92\xf7\x15\xff\xc3\x4f\xce\xde\x7a\x52\x5d\x43\x52\xc1\x27\x3f\xf1\xcf\x57\xf1\x47\x52\xe7\xa8\x93\xfe\xc6\x29\xe1\x15\xa9\xc7\x5b\xa7\x91\x0e\xe9\x69\x27\xb0\x76\x4b\xa5\x7b\x3f\xfd\xcb\xab\xa5\x83\x75\x1c\x2f\x08\xf9\x69\xd3\x94\x11\x17\x98\x86\x89\x3d\x59\x76\x27\xfe\x40\x41\xe8\xd8\xeb\xaf\xde\xc1\x49\x77\xd4\x29\xf4\x54\xe0\x1e\x1d\xe0\x32\x15\xdc\x13\x0d\xb2\xc0\xb9\x2b\xc4\x90\xf6\x10\xf8\xc4\x48\x45\x22\x57\x77\x61\xb1\xe4\x9d"
		"\x82\xc2\xf3\xac\x2c\x3c\x31\x7c\x87\xad\xf3\x95\xd8\xcd\x98\x2c\xa4\x59\xc9\x31\xd4\x5d\xd2\xbd\x77\xca\xb9\xd5\xfb\xc9\x45\x8d\xf1\xb2\x19\xce\xe2\x71\xde\x0e\xca\xf4\xca\xd7\xdb\xad\x27\x26\x01\x33\x91\xa6\x4d\x56\x1e\x94\xc5\x51\x1b\x83\x30\x1f\x0c\x3d\xf9\x4f\x07\x2c\x80\xec\xb2\x59\x42\xe6\xf1\xe7\xa3\x2f\x80\xa1\x83\x37\xd5\x2f\xac\x0e\x1f\xb2\xa7\x27\x15\x28\x53\xf8\xbf\xa5\x62\x6f\x23\x69\x4a\x9e\x02\xfb\x40\x94\xba\x2f\x95\xfb\x14\xb1\xa8\xaa\x95\x6d\xb3\x6b\x00\xe6\xff\x21\xa8\x60\xae\xea\x95\xb6"
		"\xf8\x74\x7b\x1d\xc7\x95\x24\x31\xab\xe2\x3b\x5e\x9e\xe8\x81\x4a\xfb\x14\xf2\x88\xcc\xb7\xd5\x0c\x06\xa3\xf4\x32\x2a\x2c\x54\x6c\x5d\x47\x33\xb4\x11\x88\x5f\x6b\x0d\x24\x72\xbf\x54\xbc\x96\x4c\x68\xa4\x37\x6a\x6c\x56\x26\x79\x42\xbd\xcf\x69\xcd\xbf\xc4\x83\x9c\x97\x47\xcc\x12\x0e\xe9\x0d\x34\x29\x97\x8d\xe8\xf5\x22\xd9\x4e\x3b\xcc\x00\xc1\x69\xcf\x65\x8c\xa0\x4d\xeb\x5a\xa6\xbe\xbd\x4b\x38\x1e\x3f\xfc\xf2\x72\x30\x7f\xc8\xf3\x94\x2c\xcc\xfc\x1c\x57\x22\x1a\xf5\x22\x02\x15\x37\xee\x54\x12\x81\xea\x17\xaa\x96"
		"\xbc\xca\xb2\x7f\x24\xde\x91\x8b\x01\x52\xe4\x32\xca\xc8\x83\x0b\x6c\x40\x76\x95\xd4\xfa\x53\x8a\x52\xc2\x06\x12\x24\xe9\xb1\x31\x87\xe2\x8e\xfb\x4a\xf3\xb8\x84\xd6\x5b\x5d\xa9\x6d\x5d\x32\x75\x4f\x9c\x8b\x9e\x3b\x14\x34\xd7\x51\x36\x3e\xd5\x7c\x2a\x78\xcc\xb8\xfc\x7e\x27\xe1\x13\x6e\x7b\x32\x15\xab\xe2\x92\x40\x2b\xaf\x22\x46\x29\x43\x7a\x28\x72\xa9\xdd\xf5\x6a\x1a\xaf\x7f\x9c\xee\x6b\x38\x72\x47\xc0\x47\xd3\x44\xb5\x69\x7b\x8e\x08\x6e\x4f\x5c\xea\xb0\x0e\xfe\x4c\xbf\x09\x36\x5f\x3a\x5a\x3b\xfd\x29\x21\x77"
		"\x7a\x05\x9b\x24\xd7\x8b\x37\x79\x1b\xe6\x49\x06\x88\xb5\x36\x82\x0f\x45\x4e\xb3\x9c\xbc\x9c\xac\x6d\x28\xb9\x07\xb5\x2a\x72\xfc\xfb\x6d\x61\xd4\xcf\xbe\xaa\x06\xca\x2f\xf2\x80\xc2\x13\x2c\x3f\xd0\xe1\xb2\x91\x28\x36\x12\x69\x06\xcb\xdf\xba\x44\xf5\x85\x02\xb3\xd8\xad\x91\x94\x18\x98\xef\xd2\x7a\x0e\x0f\xe9\x7c\x8f\xef\x2e\x83\x63\x90\xd5\x11\xfb\xb7\x45\xfb\x88\x23\x84\xb2\x2f\xd4\x93\x01\x82\x7b\x49\x2c\x14\xfe\x4c\xce\x45\x42\x66\xb2\x73\xae\x28\xeb\xaf\x09\x0d\x17\x51\x68\xf0\x17\x48\xb5\x64\x0d\x0b\x96"
		"\x87\x7c\xb1\xaa\x32\x75\x4a\x9e\x22\x10\x6d\x37\x5e\xff\x01\x5b\xea\xfb\xaa\x5e\xba\x52\xaf\x63\x3c\xc7\xd7\xd3\x7d\xfe\x1a\xb9\x35\x4a\xc9\x16\xc6\x50\x40\x21\x8e\xe9\xfe\x9c\x99\xba\x48\xa0\x40\x9e\x32\x35\x65\x8d\xef\x9d\xa0\x6c\xf0\xcc\x8b\x7e\x6f\x94\x74\x6e\x8d\x88\x40\xe7\x98\x6c\xae\x64\x40\x6e\xb1\x65\x9e\xa0\x25\x45\x4b\xe7\xae\x3a\x7c\x25\x5d\xe2\x48\x34\xfc\x1a\x98\x56\x95\x04\xf5\x07\x25\xec\x0c\x02\x20\x84\x2e\xbf\xb5\xe9\x94\xad\x4c\x55\xcb\x6a\x7c\x80\xf4\x5a\x54\xfb\x56\xd8\xd6\x8c\x47\x6e"
		"\xd4\xf9\xbb\x7b\x6d\x29\x03\x4a\x3c\xd5\x5a\x02\xbf\x32\x2a\x6e\x94\x05\x53\x60\xf5\xd1\xb7\x95\x2f\x06\x1e\xf3\xb3\x68\x85\x99\xe3\x16\x93\x86\x12\x33\x31\x77\x42\x4f\x10\xe7\xc1\xc3\x9a\x41\x48\x82\xbc\xe9\x70\x72\xa1\x8e\x1b\xce\x12\xa1\xf9\xcc\xfd\x7f\xb4\x3d\xd5\xab\x51\xf4\xae\xe7\x78\x84\x31\x40\x6c\x80\x92\x0a\x80\x4a\xd7\x89\xb3\xb4\x14\x10\x6b\x11\x7b\xcf\xa0\x54\x5d\xe6\xb3\xa9\xd1\x75\x6b\xed\xcc\xcd\x0a\x14\x42\xf5\xc8\xac\xb9\x55\x98\x69\xdf\x75\x34\x63\x31\xe6\xb8\x10\xaa\x36\x84\x4b\x23\x87"
		"\xed\x7b\x04\x52\xb2\x7d\x16\x62\xfd\x72\x5a\x51\x61\x69\xf8\xd5\xcc\x01\x88\x76\x63\xb0\xed\x0e\xed\x6d\x19\x0c\x48\xde\xb5\x10\x67\x62\x9d\x6d\x91\x41\xb0\x47\xa3\x03\xc0\x91\xe5\x7e\x5a\x44\xae\x16\xb4\x99\xdd\xab\x3b\x49\xb8\xa5\x77\x22\x60\x2d\x53\x23\x0c\xd3\x64\x76\x18\x0f\xcb\x66\x72\x99\xd5\x05\x79\xe1\x02\x28\xd8\x4d\x58\xc1\x20\xe3\xf3\xc9\xc6\x52\x1d\x4b\xeb\x52\x6c\x5f\xe7\x31\x0d\xc3\xdb\x20\x6d\xf7\x0f\x6a\x8c\x37\xf3\x7c\x82\x2a\x18\x96\x0f\x1f\x3e\x8f\xca\xa7\x61\x95\x46\x87\x64\xde\x0c\x1c"
		"\x5d\x36\x8d\xe3\xd7\x7e\x90\x2e\xa0\x5a\xdf\x2f\x78\xd4\xd0\x04\xf9\x54\x34\xb8\x3f\x1d\x5d\x88\xfa\xd0\x15\xee\x32\x80\xb7\x9e\x0d\xda\x90\xa4\x65\x8d\xfc\x0c\x9d\x0c\x82\xda\xba\x5a\xb4\x80\x96\x52\x42\xbe\x6f\x55\xab\x4d\x7a\x44\xd5\x1b\x26\xff\xf8\x9b\x1c\x99\x76\x6d\xae\x52\x54\x6d\xc3\x0a\x64\xd7\x92\xca\xbe\xad\x76\xa6\xbf\x3b\x6c\x22\xc8\x00\xf5\x08\xfa\xda\xc2\xa4\xb2\x82\x33\x11\xc0\x21\x5e\x36\x28\x23\x1f\xad\x7e\x19\xdc\x68\x27\xd0\x7c\xbb\xa9\x72\xec\x4e\xfb\x2b\x4a\x0d\x49\x3f\xdb\x84\x5c\x49"
		"\x43\x4c\x98\xae\x30\x91\x02\x0f\x40\x30\x32\x75\xc3\x1a\xab\x62\x08\xfc\x55\xc0\xd8\xba\xc4\x6b\x88\xf0\xd0\x21\xde\xac\x18\x41\x81\x10\x85\x0e\xcc\x4f\x56\xac\x9c\x99\x21\xbb\x34\x33\xec\x94\x1d\xbb\xfa\x34\x54\xdf\xa3\x54\xd5\x7f\x26\x28\x57\x83\xf1\xdd\x6e\x73\x15\x84\x69\xfc\xf9\xa7\x86\x6e\xd7\x9e\xc1\x9c\xb8\xa1\xfe\x32\xc7\x6b\x87\x8f\x3a\x4b\x7f\xe3\x24\x6b\x88\x63\x7c\x97\xb4\x94\xbd\xf4\xff\x23\x25\x9b\x26\x1a\x47\x0f\xb6\xf3\x60\x51\x12\xfc\x99\xfc\x6c\xe4\x80\xfb\x76\x8c\x59\x70\x9d\x7d\x2e\x61"
		"\xf1\x33\xf4\x29\xd2\xc5\x61\xa1\xdc\x89\x42\x37\x45\xe1\x2a\x81\x27\x0c\x6e\x9c\x07\xca\x69\x8a\x7d\x95\x47\x79\xcd\x19\x5d\x7e\xa8\x76\xf3\x18\x5e\x1d\xe4\xe6\x3d\x98\x94\x14\x72\x43\x02\xe2\x68\x12\x17\xb2\x2f\xbb\xa8\x6d\xde\x17\x27\x6c\x3b\x42\xb4\x20\x33\x4e\xfa\x7d\xa4\xee\x6c\xcb\xd8\x9e\x3f\xf9\x28\x1a\x5b\x46\xfb\xe9\x65\xb0\x6d\x6a\x4d\x76\x26\x1c\xf5\x48\x3e\xa1\x42\x73\xc6\xe5\xb7\x9c\x3f\x0e\x9b\xe4\xb1\x5e\x83\xe7\x4e\x85\xdd\x1d\x46\xfd\x44\x1a\xb9\xcd\xf5\x93\x0c\xbe\xda\x8c\x08\xba\xd8\x68"
		"\x0c\x86\x3b\x16\x4a\x24\x07\x24\x81\x0b\x40\x36\xf6\x83\x9b\xba\x36\xd0\xdc\x0a\x7c\x48\x48\x04\xa3\xf4\xf8\xcd\x63\x1a\xab\xbf\x7d\x0b\xe1\xe7\x98\x27\x3b\xa9\xcf\x3b\x0f\x04\x72\xe1\xce\xc3\x39\x20\x95\x32\xc7\xc0\xbd\x71\xb0\xb3\x0e\x7f\xb3\x0e\xc8\x4d\xc1\xa2\xa7\x57\x34\x33\x24\xc0\xb0\xb9\x35\x81\x50\xaa\xe8\x7d\xa6\x5e\x8f\x4b\x3c\xd2\x02\x30\xd7\x41\x02\x5a\x51\xb6\x2f\xa2\x10\x3d\x39\x6a\x60\xab\xff\x50\xe0\xcf\x48\x5b\x84\x57\x3c\xdb\x16\x41\x4b\xd1\xa5\xf5\xb3\x17\x06\xef\x67\xde\xb8\x4e\xd5\xdc"
		"\x49\x61\xbf\x81\xd8\xe4\x4e\x27\x05\xdb\x75\xa3\x28\xa9\x85\x7d\xb3\x0c\x08\x12\xc6\x71\xad\xa0\x23\xbb\xc3\x03\xf8\xa0\xc5\x9b\x35\xb0\x0a\xbd\xbf\x11\x1b\x51\x2f\x00\x81\x18\x45\xae\x3d\x8c\xac\x93\x3a\x0f\x39\x71\xe5\x76\xa7\x74\x04\x5d\x3b\x52\x9a\x3c\xa4\x0e\x33\x28\x6a\x9b\xf6\xbf\x21\x2c\x28\x46\x3f\xd6\x5d\x4a\x25\x19\xd2\xe3\xb4\x97\x51\xe0\xa5\x57\x14\x41\x90\xdf\x79\x21\x18\x64\x94\x8c\x3e\x61\xb4\x30\x50\x9e\x89\xa0\x32\x50\x9a\xbc\xe2\xb8\xc0\x12\x83\xb6\x54\x22\xbc\x1a\xa0\x6f\x9c\x9f\xae\xff"
		"\xfa\xda\xf1\x22\x97\xa8\xd5\x16\xe1\x20\xed\xe3\x41\x05\x00\xc0\x06\xd2\xb6\x95\x81\x89\x0e\xec\x68\xa0\x76\x85\x30\x40\xbb\x71\xd6\x5d\xff\x1f\xbd\x58\x19\xee\xad\x70\x42\xf7\x9c\xf4\x05\x3f\xbe\x7a\xc2\xc8\x81\xbc\x51\xe0\x84\xca\x6c\xe2\xd1\x55\x79\x17\xb6\xf1\xdb\x93\xb3\x35\x59\xa2\x9a\x0f\x06\xe0\x40\xd2\x52\xc4\xc7\x65\x0e\x75\xbe\x06\x18\xcc\x16\xb8\x82\x55\x3c\x90\x39\xbd\x3b\x7f\xe1\x04\x73\xbb\x6b\xeb\x0b\xc1\xee\x7b\x57\x79\xd1\xc6\xed\x6e\xd0\xb9\x15\x6f\x64\x04\x0b\x76\x42\xc0\x90\x8c\x6b\x94"
		"\xc7\xa1\xbb\x2a\xcd\xb9\xcc\x21\xfa\x54\xe1\x7d\xc3\xea\xfa\xb0\x9a\x27\xa7\x19\x1c\xe1\x1d\x22\x14\xd2\xf6\x71\x87\x12\x5f\xc4\x06\x63\xfa\xbb\x2a\x0b\xa0\x72\xc8\x5d\xd8\x31\x78\x5f\x8d\xb6\x86\xc6\x51\x52\x71\x03\xe2\x6d\x31\xc7\xa0\x5d\x65\xc6\xb0\xcd\xe4\x5b\x09\x8f\x5b\x9f\xb0\xd2\xde\x38\x4e\x0c\xe0\x18\xca\xa9\x93\x3d\x21\x3e\xb7\x25\xed\x63\x68\x0a\x84\xad\x5f\x95\xb2\xbc\x69\xcf\xd5\xcf\x52\x33\xfc\xd0\x0f\xb7\x26\x2a\xd9\xdc\x40\x08\x34\xf8\xab\xff\x42\xd8\x4a\x0f\x80\x5c\xf8\x3f\xa1\x43\xba\xb2"
		"\x7b\x9f\x46\xe8\xbc\xdd\xca\x0c\x11\x72\x11\xeb\x7f\x6a\xea\x1b\x4a\x54\x93\xdf\x93\xdf\xc4\x5b\xca\x20\xb4\xd3\xaf\x03\xf3\x8b\x89\xea\xce\x8c\x8e\xab\xcd\xf0\x1c\x14\xa3\xac\x4e\x63\x9c\x29\x4f\x07\x43\xd2\x86\x0f\x4c\x83\xef\xd5\x5b\x8d\x00\xdd\x30\x70\xd0\x94\x7c\x23\x25\x0f\xae\x30\xd0\xcc\x2e\x20\x0b\x3e\x1c\xef\xba\xd7\x4f\x5a\xbe\xdd\xdf\x34\x75\x0e\xed\x4a\x6d\x0e\x05\x42\x0f\x36\xa8\xf5\xf9\x5c\x35\xd2\x9e\x94\xfd\x9a\xb0\x63\xb1\x4b\x83\xad\x1c\x2a\xb5\xec\x4f\x81\x6a\xb5\x3d\xee\x8a\x89\xb0\xf9"
		"\xfd\x7d\xa9\x66\x85\x60\x63\xf5\x66\x68\x0c\xcd\x3e\xda\x0c\xbb\x66\x99\xef\xbe\xe2\xa5\x20\xd1\x0a\x47\x60\xca\x3a\x90\x70\x8b\x36\x17\x12\x04\x3e\xa1\x1d\xad\x0f\xa6\xf4\xb7\xd9\x4c\xa9\xdd\x5f\x83\xae\xb5\x2f\x90\x4e\x85\x50\x22\xd7\x51\x9d\x08\x31\xbd\x1f\xb5\x9d\xcf\x41\xce\xd6\xea\x5e\x43\x12\x2b\x17\xf6\x18\x4f\x34\xe6\xac\x41\x73\x55\x02\x5d\x29\x0d\x2b\x0e\xec\x91\x5a\xb6\x62\x82\x7b\x9e\x20\x2c\x5e\xea\x8a\x8f\x2b\xdc\xea\xe2\x44\xfc\xea\xc3\xce\x0b\x07\x22\x60\x89\xb8\x6e\x98\xc6\x67\x0f\x13\xdd"
		"\xef\xe5\xd5\x33\x2c\x31\x2e\x02\x2c\x4e\xe1\xb0\x90\xf0\x95\xcb\xeb\xda\x2a\x26\xfa\xef\x51\x46\xb6\x6d\xc3\x47\xdb\x21\x45\x10\xd7\x00\xf7\xc1\x9a\x04\xb8\x41\xa2\x66\xcc\x71\xc9\xeb\x45\x70\x25\x9d\xf2\x47\x67\x2e\x42\x88\x0e\x60\xfe\xe4\x41\x9a\x45\x29\x45\xf3\x4f\xdf\xd4\xac\xdc\x94\x5a\xe0\x9a\x46\x30\xe5\xe5\x46\xed\x35\x01\x21\xb0\x5f\x97\x8f\xe1\x78\x88\x1d\x05\x76\x37\xaf\xe5\x54\x55\x39\xdf\x7e\xce\x8a\xa6\xe1\xbe\x58\xa9\x84\x41\x25\x19\xc5\xa2\xab\x55\x62\x5d\x27\x36\x04\xd4\xc3\x61\xd1\x03\xe4"
		"\x0f\x41\xd5\x6a\x95\x9f\x75\x8a\xb5\x14\x0c\xa9\xc5\x26\x0f\x0f\x11\xe4\x7b\xdb\xa4\xdc\xd9\x4a\xa2\x7e\x27\x95\x9f\x3a\xf1\x78\x07\x8a\xd8\x69\x1d\x3a\x11\x34\x7e\x00\x16\xce\x03\x35\x2f\x3a\x75\xf9\x14\xfe\x56\x2a\xc6\xc6\xb6\x66\x85\x7a\x7b\x59\xd5\x21\x51\x13\x42\x5e\xf1\x14\x86\xc1\xc7\x80\xd2\x2c\xce\x6a\x8a\x59\xec\x74\x9d\x18\x6e\x7b\x96\x04\x95\x4b\x70\x51\xa9\x43\xd6\xe7\xc6\x3d\x6c\x69\x80\xca\x0f\x79\x41\xa4\xb7\xcc\xdb\xff\x82\x3d\x46\xfa\xb3\x04\x21\x51\x19\xf8\xd2\xce\xfd\xb7\x46\x61\x0f\xc4"
		"\x21\x1a\xde\x0f\x39\x02\x5c\xbd\x82\xae\x8b\xb2\xd7\x6e\xca\x6a\x16\x3e\x3b\x82\x54\xcb\x64\x3c\xe3\xea\x45\x61\x9f\xa3\xcc\x84\x61\xe9\x92\x22\xf5\xfa\x0f\xed\xac\xa5\x38\x39\x64\x4d\x6e\x27\x69\x23\xef\xf5\x55\xa5\xae\xbc\x5a\x55\xc1\x22\xb8\x3a\x68\xb2\x3c\x02\x03\xd0\x8d\x92\x7a\xb6\x46\xe4\x9f\x49\x1f\x89\x36\x13\xa0\xf5\xb1\x7d\x08\x9c\xd0\xb4\x18\xf2\x67\xe9\x15\xbd\x9b\x10\x58\x2d\x54\x72\xb2\x53\x54\xbf\xa4\x56\xf5\x00\xef\x0a\x6e\x89\x9f\xc3\xb8\x76\xae\x96\x0a\x98\x60\x7f\xb5\xfc\xe6\x60\x9b\x9c"
		"\xa3\x57\x0c\xa9\xe1\xd1\xca\xbb\x0a\xdd\x65\xf8\x6d\xa8\x1f\xdd\x95\xa2\x97\x04\x2d\xe4\xf3\x21\xd4\x77\x40\xf5\x85\xca\xc8\x42\x3a\x00\xa5\xf6\x09\xc8\x52\x47\x00\x78\x5b\x22\xdc\xe8\x11\xe7\x74\xaa\xc0\xe1\xf6\x8f\x10\x3a\x3a\xfa\x9f\xb2\x20\xbe\x3c\x11\x08\x70\x70\x42\xa3\x4b\x65\x3f\x34\x05\xba\x73\xac\xdd\x65\xd3\x78\x6a\x2d\x1c\x77\xa0\x8f\x90\x4d\x6e\x8f\x46\xb3\xfe\x0e\x5f\xdf\x16\xfd\xe8\x8b\x7b\x41\x35\x77\x0b\xdb\xb7\x03\x02\xbd\x22\x9e\x09\x17\xf9\xc8\x2b\x99\xbf\x72\xe6\x25\x21\x43\xf1\xf4\xb3"
		"\xb8\x67\xb4\x73\xd7\x36\xe9\x23\x30\x12\x8f\x72\xc4\xb6\xb8\xd0\x96\xbe\x28\x3d\x4b\x86\x80\xee\x41\x49\xed\x66\xb7\x9f\xb8\x2b\x98\x7e\x13\x8a\x43\x67\xc9\xb1\x79\x81\x93\x99\x99\x7b\x72\xd1\xb5\x80\xa4\x92\x79\x4b\x47\xc2\xf7\xeb\x64\x5c\xc9\x14\xeb\x5c\xad\xd1\xae\xef\x88\x60\xf2\xa9\xf3\x28\x66\xe6\xac\xa8\x6a\xd0\x2d\x1b\x30\x30\xea\xb9\x8f\xc5\x12\x55\x44\x3d\x5c\xa3\xad\xa6\x23\xed\x4b\x76\x0d\x06\x48\x86\xf0\x0b\x8f\x9c\x9c\xa2\xfb\x38\xbf\xc9\x11\xdd\xa2\xf8\xe1\xc9\x08\xfb\x90\x45\x58\x33\xab\x46"
		"\x85\xfe\xa9\x27\xf5\x75\x7b\x78\x09\x48\x7e\xf7\xed\x38\x71\x56\x2f\x85\xfc\x36\x7f\xb7\x20\xf9\xcd\x46\x2b\xab\xea\x56\x93\x6b\x6b\x10\x72\xcc\x79\x1d\xb2\x27\x00\x33\x26\xb1\x94\xe3\xb4\x53\x8a\x37\xe6\xc4\xc1\xf1\x26\xfa\xb1\xa9\x0f\x3a\x12\x84\xf4\xc4\xf6\xc7\x84\x06\x84\xee\x22\x13\x3b\x4b\x97\x5d\x3b\x69\xf2\xe8\x54\xe9\xe5\x89\x20\x82\xa0\x11\xef\xf6\x02\x93\x43\x94\x8a\x2d\x3b\x2f\x11\x29\x4a\xdf\x2c\x7e\x61\xcf\xe5\x46\xb4\xb7\x02\x12\x43\xcd\x41\x56\x72\x61\x54\x69\x1b\xd4\xf9\x23\xec\xb1\x63\xc2"
		"\xdb\x16\x7e\x54\x10\xa9\x7f\xb2\x2a\x3c\x7e\xf0\xe3\xa4\x6e\x2d\x46\x2a\x23\xb2\x5b\xfa\x57\x4f\x94\x5f\x11\xc3\xfe\x89\x1b\x63\x10\xb6\x67\xb3\xe9\x29\x20\xbc\x44\x04\xe9\xd8\xb0\x48\x04\x53\x72\xb1\x5f\x7d\xa1\xa7\x5d\x1c\x39\xff\x68\x35\xc5\xb2\xf0\x6e\x6c\x27\xf0\xaa\xe6\x31\xe9\xd3\x02\xf3\x00\x92\x11\x94\x4b\xcb\xc6\xbf\x15\x81\xb0\xcb\x43\xc3\x8f\x88\x41\xaf\xdb\x6a\xac\x83\xc4\xb7\xa9\x0b\x9a\x59\xac\x67\xb7\x61\xbd\x1a\x94\xca\x2e\xce\x2a\x4a\xba\xed\xca\x67\x87\xc4\xb4\x71\x01\x1a\x2d\xc4\x2d\x13"
		"\x08\x89\xe3\xba\xeb\x92\x48\x42\xd8\xe0\x56\x89\x5d\x92\xf4\x75\x87\x44\xb6\x32\xf2\xba\x04\x02\xee\xc2\x70\x30\xb9\x78\xd4\x5c\xb0\x5a\x8b\x15\xfc\xa5\x45\xe4\x8f\xce\xf5\x68\x2a\x4d\xda\xb5\x67\x93\x61\xd1\x1a\xe5\x46\x66\xaf\xbb\xa2\x06\x49\x01\xea\x8d\x83\x89\xc1\x69\x21\xf2\x26\x20\x39\xe8\x10\x27\x08\xc6\x31\x44\xc8\xcd\x20\x96\xf9\x15\x7e\x32\x85\xb9\x26\x1b\x32\x05\xb9\xcc\xae\xb3\x92\xd7\x6e\xea\x7a\x25\xb0\x20\x31\xb0\x32\x50\x52\xdc\x8a\x37\xd9\x0f\xc0\x32\x9d\x77\x1a\xd8\x00\x49\x8c\x6e\xd0\x51"
		"\x6c\x48\xca\x41\x83\x61\x54\xf5\xdc\x47\x59\x25\xc5\xde\x13\xed\x0e\x3c\x0e\xc6\x4d\xbc\xc8\x55\x8d\x8e\xba\x27\xb2\x43\xbf\x82\xaf\x93\x69\xd6\xbe\x0c\xc0\xcf\x79\x77\x14\x38\x0a\x77\x9e\xd5\xa3\x69\xb3\xa8\xab\x46\x2d\x3a\xad\x66\x0e\x5a\xb0\x9f\xa0\x1c\xd8\x09\xbc\x25\x64\x3b\x59\x8e\x91\xc8\xbd\x0e\xac\x01\xb7\xe1\x0d\x1c\xf0\x29\x4a\xdc\x58\x2d\xe5\xf9\x3e\xe7\x8b\xb9\x0c\x62\x41\x24\x1b\x3f\x87\x27\x2a\x10\xa6\xfc\x08\xf8\x20\xea\xec\x55\xb6\x87\x45\x1a\xf0\x29\xdf\xd1\xce\x3b\x38\x75\x75\xd7\xde\x66"
		"\xd9\x5e\xc7\x8c\xc7\x11\xfd\xef\xb8\xb7\xdb\xd2\x45\x93\x1f\x09\xce\x0e\x2b\x0a\x59\x3e\x2e\x60\x6b\x3a\xc7\x85\x3d\xa8\x16\xea\x6d\x33\x32\x0d\xd2\x30\x27\x52\x6e\x0f\xa8\x90\xc5\x5f\x75\x48\xa9\x10\x95\x54\x11\xf3\x82\x48\x54\xb3\x64\x4b\x83\x39\x8a\x11\x80\x45\x01\x70\xdd\xdb\xc3\xb4\x23\xaa\x73\x15\x17\x1b\x65\x4f\x74\x8c\x2c\xe1\x61\xa0\x64\xcf\xc6\x46\x86\x10\x99\xe9\x5c\xc5\x4e\x03\x8b\x11\xd3\x99\x4a\xc2\x41\x5f\x35\xfe\x44\x33\xde\x7a\xef\x98\x22\xcc\x60\x5c\x27\x89\xf3\x6b\x4d\x81\x02\xcb\x38\x2c"
		"\x45\xe2\x48\x35\x95\x11\xbf\xdc\x85\xea\xba\x10\x41\x2d\xb3\x21\x75\x21\xbc\xb0\xc3\x1b\x7b\x54\xaf\x46\x2c\xbf\x74\x00\x8c\x2d\x03\x48\x68\xb7\x6d\x0e\x82\x66\xc4\xa3\xaf\xbc\xc6\x28\x13\x7f\xd7\xca\x03\xfd\x49\x7a\xc0\x6c\x94\x02\xc2\xf8\x94\x22\xbb\xca\x69\xd2\x5f\x63\xfc\x08\x7b\xc7\x47\x64\x26\x3f\x08\x27\xcf\x6f\xd7\xaa\x9f\xb8\x00\x5f\xaf\x43\xa4\x69\x7f\x4c\xcb\xdb\xb3\xf2\x91\x1c\xb2\xf9\xc3\x52\x3b\xa4\x7d\xd8\xa4\x27\x5f\x80\x1c\x55\xd8\xbc\xf6\x09\xad\x2d\x5a\x0b\xf8\xfa\x9e\xae\x9b\xb7\xa6\x21"
		"\x9a\xaa\x16\x02\x92\x9a\x3d\x83\xf2\xbb\xa3\x84\x92\xdf\x42\xfa\x78\x4b\xb3\x20\x93\xa7\xcc\xa2\x66\xf5\x41\xfd\xfc\xda\x22\xf7\xa8\x20\xf4\x3a\x71\x2b\xd3\xf8\x91\xf7\xaf\xe9\x58\x59\x23\x2d\x2c\x94\xb2\xcd\xb3\x61\x85\x66\xce\x7f\x58\x8d\x5b\x95\x0d\xdd\xb7\xfc\x29\x54\xf4\x74\x3e\x34\x01\x3a\xf7\xdb\xa5\xfb\xc5\x5e\xa2\xb0\x91\xa4\xfe\x72\xab\xcb\x62\xad\xd1\x96\x10\x1a\x4e\xba\x84\x3c\x26\x03\x95\x1f\x64\x81\x50\xd0\x14\xd2\x93\x8f\x2b\x95\xe9\x2c\xcc\x70\x08\x69\x0f\x92\x3e\x24\x3f\xad\x40\xe2\x60\x79"
		"\x0e\x26\x1a\x4f\xc4\x50\x69\x57\x43\x71\x41\xa5\x58\xd3\x94\x1e\xa8\x4f\x45\xe5\x81\xb0\x30\xb9\xeb\x9e\x33\xff\xad\xac\xff\xa9\xf0\xd9\x11\xab\x89\x80\xc0\x99\x7b\x5b\x27\x22\xa2\x33\xb6\x49\xf6\xa3\x74\xe0\xe2\xb8\x75\x6d\xcb\x11\x47\x54\x5e\x64\x44\xf0\x8d\x15\x37\x9c\xff\x39\x07\x71\xe7\x1b\x45\x22\xe6\xec\xb0\x0a\xaf\x0e\xf3\xa7\x33\x97\xa9\x3f\xb1\x36\xaa\x60\x53\xe7\xad\x8c\x16\xa2\xc8\x86\xfa\x22\x06\x46\xe7\x05\x26\x24\xc2\xf4\x50\x3a\x0d\x7f\x9c\x1c\x74\x62\xd8\xbc\xbc\xf6\x1a\x3a\xf7\xe5\xd6\x34"
		"\x81\x17\xae\xda\x0b\x82\x35\x60\x51\xfe\x36\xd9\xa3\x78\xa0\xe9\xa4\xa1\xcd\xe9\x70\x8e\xf7\x46\x02\xd8\xe0\x20\xaf\xd1\xe8\x0b\x3e\xca\x18\xad\xbb\xcd\x30\xac\x49\x77\xdd\x4f\x8e\xc0\x53\xcb\xd3\xb0\x01\x46\x55\xd7\x7b\x29\xb3\xd4\xdb\xc9\xcb\xef\xab\xa5\xfe\x5a\x5d\xf9\x31\x90\xd6\x70\xd3\xeb\x12\x30\x6e\xd5\x0f\x65\xaa\x33\xe8\x50\x77\x5e\x78\xe1\x2c\xf4\x95\xf6\x66\x55\x0a\x02\x55\x70\xb2\x5f\xd8\x1e\x82\xac\x39\xb0\xfa\x78\xe7\x1d\x5f\xb3\x60\x14\xdb\x8c\x53\xb2\xb0\x11\x3a\xa7\x9d\xea\xef\x16\x85\x4b"
		"\xac\xc6\x28\x25\x51\x15\x85\x4d\x32\xbc\x0e\x7f\x79\x7c\xf6\xf5\xa8\x4f\xfb\x12\xc4\x9b\xb0\x68\xae\xb3\x66\xea\x9a\x94\xb1\x8a\xaf\xe5\x96\x34\xb7\x79\x09\xd3\xac\xe8\x08\x40\x9d\xa3\x48\xff\xc2\x2e\x58\x5d\xe9\xb4\x5a\x17\x53\x53\xf3\x14\x1f\x42\xc9\xd5\xd7\xd1\x00\xaf\x18\x05\x0f\x25\xcd\xcd\xd7\x98\x1e\xb1\x78\x79\x79\xe1\xc7\xeb\xaf\xc1\x90\x48\x79\xa5\x64\x32\xf8\xee\xb8\x6a\xea\x85\xd5\xff\x4a\x28\x9a\x0e\x7b\x15\xe7\xca\x5d\xb8\x0a\xef\xa2\x68\x99\x8d\x5f\x08\x77\x7f\x59\x76\xa1\x71\x63\xc3\xc5\x3d"
		"\x2d\xa0\xc9\xd9\x11\xf4\x8a\x86\xe8\xd2\x8c\x00\xc8\xa9\x44\xa2\x62\xf6\x31\x7a\x8b\xc8\xba\x65\xdc\x25\xe2\x88\xf7\x6a\xab\x5a\xf7\x93\xd5\x97\xd7\x85\xe1\x2a\x31\x97\x89\x8b\x5a\xe2\x6d\xe8\xed\xae\xc8\xd4\xf3\x52\xdf\xc2\x49\xa4\x9e\x16\xa1\xea\x42\xbc\x90\x93\x2f\x56\xfa\x4c\x83\x59\x13\x36\xb0\x96\xcc\xb4\xa3\xee\xe3\xec\x6f\x63\xe5\xb8\x5b\xdc\xc8\xb7\x00\x57\x03\x82\x11\xa6\xa7\xe9\xcc\x19\xa5\x74\xae\xbf\xbc\x7d\x2b\x88\x19\x6a\x98\xb5\xa2\xf5\x2d\x7a\x3f\x32\x6f\xd6\xe3\xed\x17\xc0\x6a\xe1\x82\x66"
		"\xd0\xb7\xb3\x85\xaa\x7d\xd1\x42\x78\x59\xad\xee\x5d\x04\x02\xcc\x37\x4c\xa5\x23\x5f\x47\x8e\x2c\x2a\x14\x5e\xc1\x20\xaf\xfa\xc9\x80\x89\xee\x6e\xcc\x57\x27\x2e\x6e\x17\x59\x06\x52\x41\x12\xd8\x53\xcd\x6a\x46\x2a\xb3\x11\x88\xd2\x66\x6c\x79\x57\x45\xf3\x2f\x15\xe0\x12\xd5\x80\xdd\xf1\xa1\xa9\xaa\xd1\x01\x66\xe1\x06\xdd\x77\xf3\x24\xf7\xd0\x6a\xf5\xf4\x76\xf7\xad\x99\xf7\x3c\x0a\xea\xef\x42\x8e\xa5\xc2\xc5\xb0\xce\x21\x79\xf7\x6c\x97\x3f\x6a\xc2\xce\xcd\xee\xf9\x98\x83\x30\x87\xbc\x5e\xc2\x69\xb4\x40\xd1\x45"
		"\xc1\xae\x25\x2c\xb3\xb6\x0d\xd9\xe2\x4e\x93\x42\x23\xe1\x56\xd1\xdf\x7f\xc0\x13\x20\x3c\xcc\x15\xe6\x2d\x2c\xeb\x98\x20\x35\x51\x1b\xa7\x6d\x4f\x3a\x3d\xd8\x3a\xd5\x9a\xb5\x8a\xcd\x2e\xbd\xc8\x54\x8f\x0c\x08\xf9\xcb\x48\x0b\xe8\x73\xa7\x0c\x7f\x54\x40\x2a\xa3\xb5\x1d\xbf\x33\xc5\x0c\x73\xff\xe0\x37\x2f\xe4\x79\x96\x14\x43\xf2\x0f\x8a\x20\xb6\x37\x48\xf1\x40\xdb\x31\x78\xc5\x90\xb6\x59\xec\xf7\x75\x36\x9e\x28\x5d\x13\x6a\xf2\x1d\x40\x19\x02\x84\xb9\x7b\x37\x3d\x9d\x42\x43\xe8\x0c\xe4\xe1\xa5\x34\xe8\x00\x0f"
		"\xd5\x74\xb4\x69\x62\x96\x30\xdb\xe2\x24\xf7\x0a\x15\xaa\x36\x07\x26\x50\x2e\x80\x3e\x42\x04\x21\x24\xd0\x1a\xe4\x23\x96\x55\xcf\x18\x33\xba\x24\x73\x19\x44\x8b\x11\xc0\xbb\x14\xce\x0c\xaf\x07\xed\xaf\x25\x43\x7c\x34\xa1\xf5\x11\xcf\x21\x2e\xfb\x98\xc4\x34\xfc\xfe\x85\x6e\x3b\xba\x02\xaa\xd4\x37\x38\x10\x49\x27\x31\xf1\xa3\x2f\x22\x0b\xc0\x53\xd5\xf5\x18\xdf\x46\xa3\x5f\xcf\xbb\x7e\xb5\x39\x11\xb8\xa9\x2a\xbe\x65\x4e\xa2\xe2\x6b\x2d\xf2\x5f\x22\x5c\x77\xa9\x72\x2f\xe7\xfe\x2b\x7f\x13\x1f\xbc\xfe\x6c\xf7\xbc"
		"\x6a\xbf\xf0\x46\x4b\xed\x13\x72\xfb\x81\x19\xd1\x6d\x74\x0a\xf0\x6e\x1c\x8a\x28\x92\x35\x7d\x72\xb3\x59\x85\xea\x32\x45\x58\x54\xd3\xb4\xb1\x2d\x95\xcd\x4a\xb4\x68\x99\x3d\x4f\x58\xbb\xf2\x6d\x7c\x62\xe3\x14\x43\x87\x7a\x02\xbb\x70\xb5\x03\x0f\x7a\x4d\x91\x7d\xf9\x95\x09\x1d\xe4\x43\x20\x75\xcc\xb1\xd9\xd9\x8e\xa8\x92\x78\xc1\x75\x90\x47\xd9\x02\xae\xa6\x5f\xa0\x78\x10\xcf\x5b\x68\x26\xc4\x78\x87\xa1\x2e\x78\xc3\xb2\xab\x19\x86\x4e\x0d\x77\x4b\xa0\x89\x6c\xd1\x10\x4a\xf3\xf0\xca\x77\x9e\x15\x9c\x09\x04\x4f"
		"\xe0\x2b\x1e\x9b\xe8\xba\x0b\x89\xa1\x42\x29\xdd\x29\x3e\xec\xc8\x30\x00\x6c\x13\xed\x7d\x60\x95\xd4\xe1\xe2\x09\x58\xa1\x74\x37\xfd\x5e\xc5\x2f\x51\x33\x55\xc1\xdf\x15\x6f\x3d\x71\x96\xee\x04\xf0\xb0\x0a\xee\x85\xcc\xdc\x9a\x1e\xcd\x1b\x4f\xc6\x48\xb4\x48\x08\xeb\x4d\x2d\x77\xc5\x70\x8a\x18\x5e\x25\xdd\x76\x33\x10\x9f\x59\x45\x57\xdc\x76\x07\xa6\x48\x98\x2b\xa3\xa6\x6c\x05\x78\x45\xfc\xb9\xb8\x9f\xd0\x8d\x2c\x9e\xe3\xf5\xf3\xff\x2e\x7c\x1d\x12\xf7\x21\xe7\x77\x2b\x73\xde\x4d\x6d\xb1\x93\xce\x0b\x85\x6f\x2f"
		"\x3c\xec\x71\x8c\xb2\xe1\x81\xc0\x26\xcd\xd8\xf3\x13\x55\x36\x0d\x9b\x5f\x7b\xf7\xfc\x4f\x7a\x65\x40\x8b\x68\xd5\xde\x29\x3a\x14\x50\x44\xdb\xf9\x49\xdc\x35\x4a\xa9\xbd\x95\xe6\x98\x8c\x2e\x9c\xe9\x47\x1d\x4d\x95\x01\x34\xd5\xc4\xef\x7e\xd2\xc5\x69\x21\x0f\xef\xff\x0b\xd9\x7e\xb7\x03\xe5\x61\x12\x94\x85\xc1\x6a\x21\xcd\x24\x13\x07\xad\xba\xf0\x96\x10\xa7\xf6\x19\xd0\x4b\x46\x48\xc8\xf6\x42\x51\x9b\xeb\xf4\x2e\x5b\x79\xfb\x91\xc6\x4a\x15\x74\xbe\xf3\x82\x38\x0a\x3b\x56\x0e\x63\x69\xb3\xf6\xf1\xcf\xdb\xc2\xb6"
		"\xb7\xff\xac\x60\x3b\x2c\x7d\xf2\x35\x1b\x28\xd1\xc3\x94\x83\xbe\x40\x19\x5b\x89\xfe\x91\xa1\xf5\x9f\xfd\xf2\x4b\x7e\xfe\x51\xaa\x96\xea\x6a\x59\xc4\x39\xfe\xa8\x14\x21\xb5\xb3\xc9\xb4\x26\x0a\x2a\xb5\x5b\x6d\x67\x36\x6e\xf1\x46\x96\xbd\xa5\x9f\x0b\xb1\x2d\xa6\x73\x73\x6f\xb5\x77\xd3\xb7\x51\x24\x12\x0f\x9d\x88\xa8\x44\xfd\x4e\x22\x5a\x73\x40\x0c\x35\x78\x10\x22\x6c\x0d\xfd\x15\x42\xd9\x3e\x87\x41\xb7\xcb\xea\x53\x61\xa6\x4f\x3a\xfb\x7c\x0c\x26\xaf\xf7\xdc\x5d\xd4\x20\xdb\xc3\x04\xf3\xbb\xb9\x32\x44\x8d\xff"
		"\xda\xdf\x9f\x8d\x80\xda\xcc\xd2\xe9\xa9\x74\x4b\x4b\x52\xb0\x10\x53\x78\x3b\x33\x79\x3f\x25\x58\xce\xa1\x27\x48\x84\xdc\x48\x6a\xf1\x8a\x22\x8c\xca\x8c\xe4\x5e\x92\x66\xa1\x7e\x39\xfb\x7c\x47\xb9\x3a\x65\xc1\xfa\x79\x55\x6b\xaa\x55\x2e\xf7\x2b\x39\xc2\x7e\xdf\xe6\x59\xe8\x4d\xef\x5e\xb4\x85\x62\x10\xa0\x80\xe6\x68\x56\x78\x20\xeb\x5c\x0d\x3e\xab\x5c\x15\x2c\x10\xce\x86\xf3\x84\xdd\x16\x93\x25\xd4\x5a\x24\xfc\x7b\x0a\x0e\x13\xd0\xaa\xf2\xbf\xe7\x25\xb0\x9a\xb9\x6b\xe3\x87\x74\x5d\x7c\x14\x8d\xeb\xcd\xfb\x88"
		"\xff\xb4\xfc\xba\xe2\x3d\xab\x52\x22\x71\xd1\x40\xc4\x6b\x17\x83\x4b\x45\xaf\x72\x3d\x4a\x41\xfb\xb9\xb1\x60\x63\x47\x93\xcb\x39\x4d\x23\xf4\xcf\x7b\x40\x63\xec\x1e\x13\x4b\x3b\x62\x96\x6e\xbc\x4e\x29\x29\xaf\x6d\x8b\xc6\x09\xc4\xe6\x1f\x59\x3b\x7c\xfa\x04\x7a\xa0\x78\x2f\x6b\xfb\x92\x05\xa0\x99\xea\xff\x20\x6d\xe6\x98\x17\xf8\x1b\xbc\xb2\xee\x7a\x01\xb2\x4f\x1e\xfe\x82\x09\xd8\x5d\x51\x82\xdb\x19\xe5\x82\x0b\x8a\x1e\xe5\x1b\xf5\xc5\xfb\x13\x82\xa9\xf4\xe8\xfa\x82\xbd\x1a\x3d\xa0\xba\x3a\xc6\x1e\x83\x2c\x9e"
		"\x58\xfd\xac\x4e\x77\x7b\xce\xa5\x5a\xdd\x85\xcf\x4a\x5e\x14\xea\x73\x57\xd1\x96\x95\x31\x01\xd8\x97\x13\x76\x80\x4c\x63\x2b\x71\x16\xc8\x55\x98\x82\x83\x4a\xe7\x25\x44\x88\x09\xe1\xd2\xa5\xbe\x23\x9e\xbf\xb1\xb7\x05\x5b\x80\xb9\xed\x08\xce\xe0\x4b\x6f\x9b\x74\x28\xa6\xf0\x56\x6a\x89\xd6\xc2\x0d\xae\xdc\xc0\x33\xd5\x8e\x7a\x92\x5e\x01\xb9\xd4\x2d\x07\x08\x7d\xce\x3c\xee\x7d\x3c\x1c\x18\x0a\x4b\x6a\x4b\x90\x03\x3d\x06\xf5\xad\xee\xb4\xbf\xd5\xdd\x90\xa1\xdc\x31\x9f\x8c\x2e\x4f\x96\xa7\x89\x0c\x45\x34\x16\xe9"
		"\xbe\xbe\x52\x85\xd3\x4d\x6d\xd6\x87\xd2\x1e\xf7\xad\xbb\xd2\x39\x8b\x57\x8d\x31\x63\x51\xa0\xdf\xb4\x05\x4b\x10\x36\xbb\xb0\xf0\xc1\xa9\xa2\x3d\xfc\xca\x30\x99\xf7\x48\xa2\x27\xdb\x8d\xa0\x89\x43\x64\xac\x27\x82\x1d\xa9\x6d\xda\xc0\x92\x35\x47\xda\xb1\x1e\xf4\xa0\x9e\x6b\xb4\x21\xbe\x31\x10\xb1\xbb\x03\xbf\x52\x92\x35\x1f\xa8\x25\x5d\x97\x10\xc3\x74\x5f\xa8\x66\x47\xb4\x42\x22\x07\xbb\x49\x6d\x5e\x54\x87\x6c\x2e\x81\x56\xe5\x02\x45\x82\x45\x36\x06\x69\xee\x25\xe3\x56\x4b\xe3\xf2\x90\xd1\xaf\xf4\x1f\xbf\x17"
		"\xbb\x5d\x97\xce\xa9\xce\xcd\x46\xf5\x6b\x38\x33\x90\xb2\xef\x35\xa5\xb9\x26\x4d\xa1\x91\x4a\xcc\x0c\x9b\xad\x32\xf2\x88\xfa\x01\x66\x41\x25\x9d\x8d\x0e\x10\xf3\xd3\x3c\xe2\xd1\xd6\x7e\x65\xc8\xde\x07\x98\x24\x88\x80\x6e\x8a\x56\x71\x37\xcd\x3f\xae\x4e\x0b\xcb\x10\x8c\xdb\x55\xc2\xa2\x2b\x8d\x75\x70\xcf\xf4\xab\xec\x14\x59\x83\x38\x59\xf7\xf8\x91\x8e\xe2\xf0\xe6\x84\xe3\xbb\xf7\x0d\xb4\xdf\x11\xfd\x42\xc9\x65\x6f\x0b\xb8\x82\xd9\xd2\xf5\xe5\x67\x70\x29\x56\x9e\x21\xb4\x73\x3e\x60\xe0\x64\xdf\x45\x23\xcd\xce"
		"\x9d\xfd\x58\x22\x6f\x08\xf2\xaa\xfa\x44\x73\x0d\x46\x29\x66\xba\x98\xda\x60\xeb\x47\x04\x56\x2b\x92\xc1\xdf\x60\x95\x8a\x58\x03\xc4\x4b\xda\x3a\xff\x71\xc0\x5b\x9b\xb1\xde\x9a\xe9\xe8\xc8\x84\x96\xa6\x0e\x5e\x6b\x30\x75\x6f\x12\x86\xc9\xa3\xb2\x84\x84\x70\xc9\x34\xf9\xda\x72\xf5\xa2\x78\x60\xe5\x67\x69\x89\x9d\x88\xc6\x4e\x10\x4e\x96\xeb\xb1\xdc\x30\xe1\x3b\x3a\x24\x47\x5a\xfe\x19\x8f\x93\xc2\x0d\x1d\xd3\xa4\xa5\x99\x62\x19\x54\x36\xa2\x56\x2d\xdd\x64\xbc\x4e\xc4\xc5\x43\xe7\x9d\x20\x47\xdc\xe7\xdc\xbe\xf7"
		"\x5a\x8c\x8b\x7c\x83\x48\x43\x5c\x2c\xb1\x32\xb7\xd3\x5b\x83\x17\x4c\xb8\x96\x09\x8c\x61\xd4\x86\x22\x42\x21\xf2\xf5\x0b\xbb\x2e\x25\xf8\x92\x22\x8f\x96\x4d\xea\x90\xad\xdc\x3c\x96\x03\xb2\x29\xec\x41\x18\x84\x76\x2f\x34\x4e\xea\x81\x11\x07\x4d\x31\x66\xed\xd1\x2c\x39\x91\xbf\xa2\x4f\xed\xf0\x7f\x95\x15\xd6\x4f\x68\x5d\xd1\x47\x67\x38\xb5\x18\xad\x1f\x3a\xce\xcd\x6a\xfc\x29\x8c\xc4\x72\xfd\xaf\x5d\xc6\xe6\x19\x2c\x7c\x40\x08\xe5\x2b\x91\xc9\x06\xdf\x1a\xee\xe6\xae\xa3\x1d\x00\x5b\xad\x0f\xab\xf2\x6d\x15\x85"
		"\xb6\xf4\x58\xb4\x61\xdb\xd2\x81\xa1\x64\xf3\x21\xd8\xc0\x6b\xbb\xff\xbd\xf1\x9d\x8b\x0e\x6e\xe2\xa7\x67\x9e\xf9\xd5\x69\xc5\xbf\x4e\xf5\xfb\x2e\x80\x80\xad\x96\xb5\xcc\x1a\xf9\x7f\xf4\x16\xf6\x28\xff\x16\x1f\x5e\x98\x21\x0c\x32\x18\xa4\xff\x35\x0e\x19\xb3\x1b\x85\xe7\xe3\x2e\xb2\xea\xa2\xc5\x12\x8e\x30\xe8\xbd\xab\xa9\x6a\x55\xa8\x42\x08\xc8\x6f\xc5\x94\x57\xe4\x86\xab\x78\x12\xb7\xed\xae\xc9\x96\x2b\xed\x3a\x5c\xcd\xdf\x70\xcf\xb4\x3c\xc6\xd8\x6c\x09\x13\x11\xcd\xac\x96\xd8\x85\xc6\xfa\xb6\x10\xc1\x43\x55"
		"\xfb\xe1\x16\xcb\xb3\x1b\x23\x82\xbc\x23\x4f\x37\x1c\xb0\x36\x1b\x4b\xbd\x01\x5e\xb7\x5c\x1d\x5f\x47\x3c\x7a\x59\x8a\x84\x83\xf9\x01\x25\x96\x0e\xd5\xfb\x92\xe4\x65\xd2\x59\x02\x23\xe3\x07\x9c\xa4\x8b\x0b\x22\x73\xa2\x00\x1d\x3a\x0c\x09\x02\xd2\xab\x54\xc4\x94\xa7\x7f\xd7\xc8\x83\x77\xcb\xc6\x0f\xd0\x13\xa0\x45\x37\x6a\xd7\xd4\x86\x51\x2a\x65\xef\x8d\xff\xbf\x31\x5f\x44\x13\x68\x36\x8a\xf1\x3e\x9a\xdd\xfb\xab\x19\x02\x9a\x54\x12\xd6\x08\x85\x66\x67\x7c\x67\x5e\xe5\x2f\xdb\xa6\x8f\x13\xf9\x3b\x31\xaa\xda\x84"
		"\x8e\x7b\x96\x92\xde\x68\xf5\x8b\x64\x9e\x3f\x96\xd7\xca\xe9\x4d\x50\x82\x7f\x98\xaf\x67\xc7\xa9\xff\xcb\x5e\x7e\x46\xae\xe5\x94\xaa\x42\x15\xcd\x98\x65\x36\x50\xcd\x26\x66\x78\x52\x41\x3b\x10\xb5\x1b\x6e\x8b\x49\xb2\x7a\xa0\xfe\x0c\x18\x13\x6b\xfd\x93\xeb\xbd\x34\xe3\x02\x73\xb1\x67\x32\xc5\xd2\x2d\x1b\x58\xbc\xcf\x51\xe7\x58\xfc\xca\x9a\x5a\x9e\xd0\x6c\x4a\x9d\x59\xe1\x4a\x7f\x6a\x7f\x7b\xee\xb9\x7e\xe1\x5f\xc5\x48\x04\x18\xd9\x92\x35\xb8\x43\x0c\xee\x76\xba\x97\x67\x87\x18\x8d\x37\xea\x0e\x81\xe1\xd7\x86"
		"\x73\xee\x89\xd6\x1a\xbe\xb4\x60\x7c\x90\xc6\x36\xbd\x32\x5f\x5e\x6e\x2f\x9c\xac\xad\xd9\x9b\x0c\xc4\x9f\x7c\x4f\x7f\xf7\xab\xef\x14\x66\xd7\xd0\x44\x44\x8e\xe7\x40\xb3\xca\xbf\xac\xb3\x6d\x0a\xe8\xc5\x30\x9b\x0d\x06\xaf\xf8\x36\x50\x78\x9a\x31\x87\x0c\x0b\x1f\x90\x0f\xc3\xa2\x5f\x52\x72\x3f\xc1\x5a\xf4\xce\xbd\x2e\x27\xda\x7d\x9a\x32\xf9\xfa\x01\xe5\x22\x37\xb2\x72\x06\x5f\x97\x37\x43\xbc\xd9\x63\xd4\x33\x97\xab\xe8\x69\xc2\xa2\x78\x80\x12\x27\x53\x07\x84\x07\x03\x01\xb7\xe2\xff\x99\x64\xaa\x85\xa0\x43\xb7"
		"\x23\x70\xca\xad\x66\x25\x1e\x88\xac\x70\x1e\xce\xe3\x48\x38\xae\x21\x52\x3d\xb9\xd1\x12\x71\x73\x7d\x41\x4b\x10\x70\x35\x76\x5a\x11\x3c\x15\xd4\x3d\x4c\x0e\xbf\xd1\x1f\xde\xd4\xcc\x9a\x51\x51\x40\x81\x07\xc9\x42\x80\x0e\x33\x49\xea\xbe\x6c\x4c\x6c\x9b\x08\xdc\xaa\xd5\x89\x09\xf0\x2e\x43\x32\xc2\x62\x0c\x3a\x86\x7e\x12\x5d\x1b\x53\x23\x39\xb2\xeb\x59\x3a\x5b\x6d\x04\x9e\x69\xfb\xe5\xff\xae\xde\x1e\x75\x1a\xb8\xef\x4c\xeb\xe7\x82\x74\x1d\xa6\xb4\x9d\x78\x88\xa4\xc1\x42\xe4\x51\x74\x76\x40\x4b\x71\x89\xae\x22"
		"\xc7\xa9\x8b\x74\x3b\x23\x6e\x04\x43\xa7\xb8\xe2\x0e\xf3\xbb\x40\xd1\xb5\x76\x2c\xad\x78\xe1\xc3\x3f\x1b\x0b\x05\x02\x6d\xde\xb8\x30\x1e\xb6\xec\x30\x76\xac\x21\xb5\x1a\x37\x51\xec\xb4\xef\x56\x07\xde\xec\x09\x3a\xc0\xb9\x24\x3f\x80\xa0\x41\x13\xe1\x94\x7a\xb4\xa2\xb8\x25\xc3\xc0\x30\x10\x83\x05\x14\xd3\xd6\x96\xb7\x80\x91\xff\x70\x09\x57\x52\x0d\x8f\x66\x54\xa0\x77\x0c\x24\xf7\x7e\x6f\x9b\xce\x54\x77\x70\x8a\x7d\xa6\xcb\xc8\x0a\xa1\x64\xb2\xa9\x14\xe6\x14\x16\x5f\xcd\x59\xca\xd1\x8b\x5b\xc8\x08\x51\x14\x60"
		"\xee\xf9\x36\x63\x4e\x94\xa6\x3a\x17\x2d\x95\x6a\x38\x5f\x60\x7d\xdc\x7d\x94\x20\xa9\x9a\x08\xba\xbf\xe9\xae\x49\xff\x35\x43\xdf\xac\x3c\xad\x58\xcd\xaf\x72\x5b\x30\xe7\x52\x57\xd1\x38\xa6\xc9\xf9\x5f\xc1\x9f\x2c\x7c\x71\x31\x83\x4c\x8c\x22\xbf\x6a\x23\x76\xd1\xb5\x8d\x39\xf4\x9d\xee\x3f\xab\xb0\x7a\x41\xf8\xa0\x25\x10\x3f\x13\x68\xbb\xcd\xce\x72\xe6\x51\xaa\x09\xe9\xab\xab\x12\x77\x90\x8f\xb6\x4b\x3f\x06\xc7\xfe\xb9\xcb\x63\x0f\xa2\xd1\x73\x16\xc4\xa5\xae\x6c\xca\xb4\xb7\xd6\xdd\x2c\x6f\xf0\x63\xcd\xee\x4e"
		"\x6f\xfc\x81\xb9\x57\x81\x2c\x11\x1c\x62\xe1\xbd\x17\x84\x37\x76\x16\x19\x70\xc6\x31\x81\x71\xc0\xc4\xfb\xbe\xb0\x19\x9f\x9d\x0a\x85\xe8\x62\x63\x62\x96\xbf\x45\x2b\xb4\x09\x71\x93\x68\x1d\x4a\xfe\x04\x5f\xd3\x1b\xee\x56\xa6\x4c\x76\xbc\x9c\x74\x1f\xaa\xb0\x0a\xb2\xac\x15\x8e\x5c\xf5\xd3\x37\x37\x0f\xc6\xbe\x0e\xe5\xe6\x17\x9a\x73\x79\x22\x63\x02\xae\x34\x2b\xb6\xec\x31\x64\x84\x1e\xf5\x62\x41\x59\xee\x18\x7b\x0c\x33\x91\xb3\x61\xe2\xe8\xfa\x0d\xee\xba\xdf\x28\xba\x3c\xe9\x11\x39\xcd\x05\xbb\x15\xf3\x47\x65"
		"\x98\x1e\x9e\x39\x8d\xfd\x13\x4d\xec\x41\x71\x7e\x81\xa8\x55\x9e\x1c\xaf\x08\x0e\xe6\x14\xf2\x68\x2a\xd3\xde\x6e\x66\xc5\x2b\xff\x5e\xc8\x0b\x21\xb8\x23\x9f\xf4\x36\xe9\x45\xd8\xcd\x79\x27\x43\x5a\xaa\x96\xfc\xa8\x7d\xe7\xdd\xb7\x69\xd6\x83\x9e\xdb\x06\x1d\x4a\x08\xa5\xd9\xbf\xaa\x76\x40\xdb\x85\x46\x5a\x86\xf1\x10\xc9\xef\xc9\xad\xf2\xe4\x43\x4a\x0d\xac\x97\xab\x26\x39\xaa\x4e\x44\x1e\x07\xbc\x31\xff\x12\x83\x6d\x5d\xcc\x66\x29\x3d\xaf\xbb\xba\x5f\x96\x93\xba\x7c\xf3\x04\x79\x7f\x0c\xbe\xfb\x96\x5c\x76\x0d"
		"\xd1\x29\xd3\xb9\x28\x9c\x15\x21\x07\x4b\xf7\xe8\x7e\x47\x30\x42\x19\xcb\xf2\x18\x46\x21\xad\x11\xe2\x0d\xa6\x09\xf8\x1a\x9d\x8a\x53\xf0\x2f\x32\xb7\x55\x11\xad\x69\xf2\x70\x6a\x36\x1d\x8b\x11\x4a\x7f\x06\x9c\x79\xc6\x2e\xe4\x56\x79\x05\x0c\xe6\x60\x8c\x12\x44\xd7\x6b\x00\xc4\x29\xb3\x48\xec\x38\xbb\xae\xea\xab\xa6\x5a\xf8\xc1\x07\x74\x7f\xa7\x28\x03\xa1\x92\xde\x31\xb1\xa3\x8f\x85\x42\xc6\x5a\x5c\xd1\xef\x68\x2d\xa2\x74\x92\x6c\xa5\xcf\x13\x0c\x92\xaf\x6c\x61\xc2\x43\x48\x20\x37\x03\x49\x01\x94\x98\x54\x1d"
		"\xcf\x75\x4e\xe1\x93\xfc\xb6\x6c\x5d\x61\xbd\x1a\x0e\xf7\x48\x1d\x9d\x4e\x22\xcd\xcf\x2d\xe8\x6d\x85\xc2\x5c\xc9\x49\xd9\xa6\xd8\x46\xac\xd4\xc4\x2d\xeb\xee\x77\x54\xa2\xc8\x69\x3f\xaa\x18\x99\x93\xcd\x65\x33\xcf\xc7\x19\xcc\x19\xa8\xc9\x86\xb2\x87\x76\x1e\x79\x09\xdd\xcb\x9a\xfd\x5d\x40\x32\x5b\x03\x0f\x71\x98\xdf\x04\xb3\x0a\x67\xa0\xb2\xc1\xa1\x13\x35\x5c\xa8\xe3\x0c\x12\xbe\xf5\x10\x7c\xd3\xc5\xa0\x3b\xd6\x6e\x0d\xc6\xd2\xe1\xc9\xca\x5e\x4a\x86\x29\x46\xa7\xfa\x1a\xf5\xea\x88\xf1\x42\xfe\x2c\xd6\xb5\xb9"
		"\x4d\xbb\x69\x72\x9c\xfa\x7e\x16\x48\xc2\x4f\xe9\xc1\x59\x3a\x7e\x89\xc1\x74\x45\x39\x32\x57\xcd\x2e\x41\x78\x67\x38\x49\x4b\x96\x6f\x65\xa6\xee\xd2\xc0\xd9\x45\xa3\x86\x2a\xe8\xe7\xf7\x25\xd0\x7c\xa7\xaf\xf4\xf9\x90\x91\x26\x34\xd0\x64\xa3\x4e\x17\xac\x03\xc8\xd4\x6d\xa4\xdf\x42\x5c\xf6\xb3\x17\x08\x84\xc4\xb3\x32\x7d\x01\xf5\xcc\x38\x8d\x1d\xd7\x9e\xa9\xb9\x14\xa8\x9a\x8e\xe9\x06\x25\xc8\xae\xf2\x59\xd3\xde\xb8\x8c\x5a\x6a\x38\x1c\x4e\x6b\x56\xaf\x63\x32\xd7\xe8\xf3\xe1\xad\x66\xbc\x09\xd4\x95\xc9\x18\x8f"
		"\x8c\xd0\xd8\x6f\xd2\xc7\xb8\x45\x3b\x47\xd6\x53\xdf\xac\xe0\xa7\x7b\x12\x06\xeb\xf4\x23\x06\xe8\x1c\xb3\x73\xd1\xe8\x8c\x9d\xb7\xda\x33\xf1\x76\xb0\xb3\x7b\xde\xdd\x89\xc0\x6e\xfb\x5f\x43\xa7\x56\x74\xe5\xf8\x00\x10\x22\x08\x54\xa1\x4c\x08\xa4\x08\x5f\x82\xe5\x53\xd9\x61\x96\xe8\x83\xb3\x86\xc4\xa6\xcf\xa4\x51\x49\xd1\x51\xe6\xb0\x0d\x3b\xe1\xa6\xc4\x38\xb4\xb3\xce\x40\x18\x5c\xcd\x8c\x7f\x34\xb3\x00\xc3\x0f\x8d\x53\x34\xda\x6e\xd4\x4a\x58\x3a\xdb\x9c\x55\x12\x47\xb6\x1f\x58\x85\xdb\x68\x62\x24\xa0\x9f\x17"
		"\x20\x08\x5d\x65\xb0\xa1\x62\x2e\x23\x51\xcb\x98\x8a\xe1\x28\x99\x7a\xcb\x47\x1b\xfe\xa7\x49\xd6\x3f\xba\x6d\x9d\x4e\xe3\xcc\xeb\xca\x72\x06\x09\x40\xe1\x9b\x68\xcf\x24\x5a\x4c\xfe\x9a\x45\x88\x41\xf7\x36\x02\x6b\x5a\xaf\x5a\x24\xca\x8f\xed\xae\xd2\xa2\xf4\x22\x38\x45\xa7\x35\x1f\x40\x35\xf3\x48\x60\xae\xa8\xee\x4a\x14\x37\xea\x50\x7d\x6c\xa8\xa3\xac\xe8\xb5\x6c\xa5\x13\x8f\xb2\xe3\x58\x21\xb3\x7c\xe6\x18\x57\xf7\x25\xcd\x39\x7a\x16\x7c\x4e\xbf\xcb\x84\x50\x38\x16\xbc\xc0\xa3\x4f\x55\xcd\xb2\x6a\xa4\xd9\xa4"
		"\xd2\xea\x5f\xa6\x36\x47\x6f\x53\xfc\xea\xe5\xe0\x96\x60\xbc\x8b\x5d\xc4\xa2\x98\x33\xb4\x10\xf0\x66\x8a\x4a\xb4\xa0\x17\x4f\x90\x25\x67\x99\x8d\x47\x9e\x16\xe2\xbc\x9d\x3d\xdd\x3f\x4b\x37\x63\xa9\x78\x29\x79\x10\x32\x37\xf2\x4a\x68\x8b\xd6\x27\xb6\x22\xc8\x11\xc4\x97\x96\xa2\xd2\xa0\x8d\x70\x6d\x59\xc9\x31\x3c\x54\x49\xb6\x42\x06\x3a\x06\x08\x07\xae\x24\xd0\xce\xe3\x4a\x2f\x1a\x1e\x04\xd2\xb4\x46\x5f\xf0\x0f\x18\x09\x76\x1c\xb3\xb0\xc7\x56\xc8\x9d\x40\x94\x3d\x73\x54\xc0\xd4\x6e\xec\x14\x62\x9e\x7b\x93\xeb"
		"\xfa\xa5\x26\x38\x6c\x1b\xe0\x9b\xe3\xcb\x56\x88\xe3\x95\xa5\x36\x8e\x48\x2e\xff\x25\x8f\x0e\x22\x9c\x3d\xff\xf6\x97\x47\x8f\xb2\x56\x58\xa3\x4b\x45\xdf\x37\x27\x67\x1f\x5b\x18\x6e\x75\x7c\x8e\xad\x70\x7e\xac\x0d\x72\xb0\xe8\x27\x5d\xdf\x7d\xd9\x3b\x05\xaf\x7e\x7a\x5b\xe3\x09\x78\x4e\x0d\x99\x3d\x86\xb7\x3b\x6f\x15\x58\xec\x38\xf5\x3c\xb6\x69\x30\xcb\xe8\x3c\x80\xe2\x98\x37\x52\xe0\xd7\x37\x56\xb7\xa5\x8c\xba\xcd\x7e\xe2\x05\xbf\xb9\x0d\xe6\xbb\x78\x9c\x3e\x64\xef\x5b\xab\x73\x59\xf2\x23\x0e\xb1\xc7\x28\x6c"
		"\x0e\x20\x46\x01\x94\x32\x51\x1d\x6f\xdb\x91\xa5\x0d\x51\x88\xda\x22\xa6\x16\x7e\x85\x89\x88\x86\xe9\x30\x0e\x6e\x7c\x67\xd4\x23\x39\xd2\x08\x43\xa6\xb8\x87\x0d\xc0\xa5\xca\x68\xf9\x0d\x67\xec\x39\x33\x2c\x55\xf2\xdf\x96\x57\x21\x56\x62\xb5\x91\x7c\x74\xbc\x40\xe7\xdb\x34\x30\x86\x69\x3f\xdc\x2a\x3b\x48\x1d\x7c\xc4\xa0\xd8\xe3\xec\x93\x2a\x9f\x5e\x6f\xff\x7d\x4a\x8c\x02\x7f\xc9\x08\xd8\xaa\x7e\x84\xda\x65\x9c\x44\xe1\xd0\x3c\xa4\x0a\xbe\x53\xd0\xfd\x98\x0b\x67\x9e\x97\x6a\x04\xc0\xda\x32\x01\xc1\x9a\xed\x0d"
		"\x0c\x1f\x8a\x71\x2d\x08\x41\x44\x80\x8d\x16\x78\xb8\x4b\x9f\xe9\x87\xde\xe4\xfc\x46\x59\x8e\xe5\xb6\x3a\x49\xf9\x62\x12\x3d\xda\x97\xb7\x62\x56\xd9\x41\xe3\x36\x91\x2f\x2f\x12\x77\xa9\x45\x83\x74\x90\x05\x14\xe1\xbf\x3b\x68\x36\xcf\xdc\xbb\x99\x98\x14\x28\xaf\x2d\x03\x50\x61\x27\x34\x88\xf2\x57\x6a\x63\xb2\x77\x7a\xa9\x83\x32\xec\xba\xeb\xc4\x52\x42\xc4\x14\x2b\x66\x86\xb7\x78\x72\x85\xed\x20\x26\x28\x7a\x68\x0a\xf4\xdb\x4e\x10\x86\x19\x9c\x96\x98\xfe\x80\xd2\xe8\x18\xff\x16\x35\xe9\x6f\x02\x92\x7a\x58\xc6"
		"\x84\xbd\xb7\x56\xfc\xd1\xa3\x32\xdc\x6c\xa9\xdb\xc8\x2f\x16\xc5\x3f\x7b\x8e\x6d\xbc\x0f\xe7\x5b\x83\xda\x53\x5f\xd1\x95\xa5\x00\x2f\xb4\x41\xdb\x7e\xd2\x37\x87\xf4\x9f\x14\xdb\x48\xf1\xf0\xed\x1b\x84\x52\x0a\xa4\x25\x3c\x0a\x87\x16\xeb\xc9\xc6\xf4\xb0\x64\x43\xb1\xbf\x4a\xdd\x10\x9b\xeb\xd5\x37\x11\xc9\x4f\xc1\x35\x1b\x83\x35\xe7\xb8\x56\xb5\x9b\x61\x00\xe9\x05\x50\x71\x25\xa7\xea\xf1\x9c\xbb\x28\xf0\x1c\xd4\x7a\xf1\x53\xc9\x9e\x0c\x75\xd7\x1a\x27\x90\xa0\x80\xcb\x48\x38\xf3\xa5\x95\x44\x28\xad\x46\x57\xa2"
		"\xfd\x63\x75\x2b\xd3\xa8\xcb\xf1\xd6\xd7\x4b\xe8\x47\xd8\xc9\xfb\xdf\x3e\x6b\x4f\x30\xfa\xf1\xcc\x9d\x15\x96\xd8\xba\xfd\x02\xd9\x9e\x77\xbc\xe2\xfb\x8f\x04\x81\x37\x3a\x99\x4c\x7b\xf7\x6b\xfc\x05\xaa\x6a\x16\xc2\xc4\x53\x36\x07\xfd\xc5\x8a\xa0\x0a\x83\xee\x6f\x7b\xd7\x00\xc4\xbd\x62\x00\x94\x98\x05\x8d\xc7\x1b\xfd\x53\x27\x1c\xc9\xab\x91\xf8\x7d\x2e\xd5\x02\x36\xe6\x4d\x5e\xab\x21\x87\x46\x17\x9b\x89\x87\x14\x4d\xac\xc7\x72\x80\x85\xc3\x08\xc6\x17\x0a\x39\x71\x6f\x46\xac\x59\xab\x95\xfd\xab\x16\x18\xc8\x6d"
		"\x63\xbb\x0c\x4e\x64\xc5\x37\x6b\x87\x07\xfa\x98\x37\xcd\xab\x1a\xfb\x9b\x5a\x01\x20\x35\xf3\xfc\x24\xfe\xb5\x0c\xc8\xc0\x8b\xc9\x0c\x26\xa2\x8b\xa4\x46\xf5\x22\xe2\xaa\xa4\xdd\x0a\x1f\x99\xbd\xb3\xce\x67\x41\xda\xbf\xb1\x6d\x7e\x1a\x2c\x54\x5d\xf5\xca\x33\xd2\x61\xe1\xfe\x50\xd4\x35\x4e\x18\x31\x59\x7d\x9e\xd5\x02\x32\x4e\x2b\xb9\xd5\xee\x47\x1f\x9a\x57\x52\xf9\x2c\x73\x37\x33\xb3\x05\xbd\x88\x55\x8d\xce\xa7\xe7\x6e\xd6\x6a\xd7\x55\xde\x27\xd5\x26\xcc\xde\xa9\xea\x2c\x10\x79\x41\x93\x57\x15\x5c\xa8\xe6\xba"
		"\x3d\x6b\xb1\x13\xaf\xee\x60\x45\xe8\xc7\x6a\x17\xdb\xbb\x7d\xac\x9f\x52\x8a\x26\x73\x46\x67\xa2\x92\x45\x44\x3f\xc6\x6c\x8e\x1f\x58\xc4\x24\x5e\xd8\x1c\xb2\x2f\x71\x7c\x4c\xc3\x25\x9c\x7c\x05\x11\x69\xf7\x03\x99\x4c\x94\x79\x04\x8c\x47\xdc\x55\x61\xd6\xc4\xa1\x74\x3e\x8a\x85\x45\x00\xbc\x97\x12\xda\xac\xc7\x38\x2d\x43\xcc\xed\x94\xa4\x38\x56\x11\xe4\x3f\xbb\x85\x25\xd0\x11\x03\xe8\xf9\x86\x7a\x6e\x99\x55\x39\x4c\xda\x4c\x5c\xa9\x27\x77\x4d\xe7\x10\xf3\x9e\xcd\x71\x3b\x92\x5b\x2c\x3b\x85\x3e\x52\xbe\x19\xe0"
		"\x19\x27\x8e\x91\x12\x04\x4b\x89\xaf\x11\x41\x80\xb0\x6a\xb6\x5f\x64\x7d\xe6\x4f\xb5\xa4\x32\x19\x62\x7b\x0c\x4c\x7e\xd4\x67\xea\x94\x83\x29\x1e\x6c\xca\x0f\xd5\xe8\x33\x14\x35\x84\xae\xfd\x08\xa3\x51\x97\x20\xbe\x0e\x02\x00\x80\xa0\x64\xdf\xf9\xb8\x31\xaf\x1a\x50\xf2\x79\xa5\x3d\x6c\x32\x9c\x49\x36\x83\xb6\x16\xd1\xbe\xbc\x46\xe1\xe6\x94\x43\x0b\x52\x83\x70\xac\xdd\xef\x9e\xe0\xe3\xc5\x19\x96\xa5\x0c\xbd\xae\x65\xeb\xae\xd1\x79\x8c\x3c\x10\x56\x48\xea\x2f\x96\xf8\xc4\x57\x20\x46\xd6\x66\xbf\xa5\x6e\xf2\x02"
		"\xc3\x80\x7c\x59\x06\xc8\xda\x5a\xd7\x87\x00\x89\xf4\x68\x3b\xa3\x0f\x6b\x0c\xd4\x5a\xaf\xef\x4a\xb1\x70\xdb\x06\x7c\x63\x6e\x60\x3b\x20\x32\x36\x03\x46\x9f\x7a\x4e\xd4\x0b\xf8\xd4\x16\xc3\x7a\x01\x47\xde\x15\x2b\xd9\x89\x35\xdf\x15\xf6\x80\xcf\x56\x2c\xe6\x8f\x0d\xa0\x1f\x5d\xb9\x34\x20\x48\x91\x1b\x0d\x3e\xe9\xa6\x9e\x02\xb4\xff\xa2\xf5\xff\xb6\xc2\x5e\x6f\xb7\x25\xe9\xbe\xc7\x80\x8e\xde\xc3\x69\x5f\x60\x38\xc0\x00\x11\x66\x50\x05\xf5\x4c\x28\x60\x4c\x38\x2f\x91\xd2\x5b\x09\x90\xd6\xf2\xf0\x40\x52\x09\x10"
		"\xd4\x71\x9b\x74\x5c\x93\x4f\x6f\x30\xcb\x70\x3a\xd5\x1d\x0c\x65\x34\x34\x39\x52\xbf\x9e\x0b\xd8\x06\x16\xe5\x03\x2a\x45\xb5\xf3\xbc\x83\xa2\x13\x65\x90\x47\x24\xca\x3b\x2e\xa4\x76\xad\x94\xf0\x9c\x2d\xcc\x63\x1f\xd2\x81\xe8\xdb\x2b\x2a\x9f\xb6\x4e\x0c\xcd\x2e\xf2\xa2\x69\x6c\xd0\x1c\x9d\x9a\x0b\x34\x02\x61\xc5\x6d\x91\x81\x19\x4d\xad\x74\xef\x89\x4c\x0c\xa0\x10\xb0\x40\x5f\xe9\x88\xec\xc4\xbf\xb3\x96\xb4\x3c\xc0\x2b\x47\x9e\xc4\x9f\x79\x87\xcf\xfa\x6f\x6d\x85\x2a\xf3\x4d\x8a\x76\x97\x34\xaf\xd5\xc5\x7e\xed"
		"\x3c\x43\x90\x26\xd8\x87\x65\x92\x80\x31\xd7\x89\x9d\x38\x2b\x73\x9f\x9e\xb3\xe4\xe6\xf5\x8f\x14\x14\x1c\x9f\x79\x4e\x2c\xa5\x9b\x5d\xbe\xb4\x8a\x02\x2c\x68\x48\x1c\xca\xe9\x4b\xb8\x34\xdf\xea\xd6\x66\x01\x55\x82\x5b\x8b\x97\xf8\x49\x32\x7f\x1a\xb6\xba\x78\x83\xac\x5e\xb0\x87\xf8\x11\x9f\xda\x2d\xd1\xc5\xcd\x3a\xb9\x4d\x4c\xf8\x02\xff\xe9\x54\x37\xe7\x53\x04\xc3\x3f\xb3\x5b\x8e\xfb\xf1\xbf\x1f\x2e\x65\x78\xd5\x5b\x51\xf7\x3e\x61\x9d\xeb\x9d\x51\x9f\x2e\x2a\x3e\x2d\xe8\x72\x36\x96\xe6\xd0\x0c\x99\x15\xc6\x47"
		"\xb5\xd1\x3b\x58\x47\xbb\xe4\x2e\xe1\x5f\xf1\x73\x2c\xbd\x29\x29\xeb\x20\xe9\xf7\x6f\x6c\xc3\x77\x8c\xcf\x45\xe0\xc5\x4f\x77\x3a\x34\xf9\x79\xba\xdf\xcc\x3d\xda\x61\xa6\xd5\xde\x3f\x49\x1c\x38\x28\xc3\x98\x74\xd9\x28\x82\x76\x9f\x5d\x66\x84\x0e\x01\xe7\xb5\xfd\x69\x17\x2f\x8d\x99\x25\xa9\x15\x83\x03\xda\xe5\x26\x5e\x6c\x98\x30\x9c\x2c\x84\x44\xf2\xc2\x34\xd2\xf5\x5c\xe6\xa4\xcb\x30\xde\x79\xbf\x65\x19\xae\x7f\x8a\x14\x19\xda\xbf\xcd\xfc\xc8\xe9\xd8\x39\x8e\xce\xf8\x2e\x1d\xd1\x2e\x46\xf0\x70\xb8\x62\x09\xb8"
		"\xdb\xd4\xe6\x41\x45\xd9\xcd\xd8\xe1\xfb\x2e\xd3\x1f\x58\x5b\xe6\xd3\xc4\x7a\xc2\xb3\x73\x12\xdf\xbe\x5b\x42\xa5\x4d\x1e\xce\x40\x9a\x95\xb1\x27\xe1\x1a\x1a\xa9\xfc\x18\x4b\x3e\x8c\x04\xcc\x06\x9b\xa5\xbb\x48\xf5\x27\x9e\x1e\xa7\x76\x52\xda\xfa\x8c\x4e\x2c\xfe\x74\x94\xb5\xf1\x04\x2b\xfe\x6e\x28\x14\x1d\x6f\x93\xb7\x7f\xf5\xaf\xa8\xfa\xb1\xfe\xfa\xb6\x40\xef\xcd\x32\xf3\xbc\x81\x05\x46\xfb\x60\xdf\xf2\xd2\x22\x0f\xc3\x2b\x76\x2d\xd9\xd8\x65\x11\x43\xed\x3c\x9d\x76\x63\x70\x88\x3f\xc4\xa2\x6e\xa6\x1d\x87\xd3"
		"\x66\x6e\x96\x77\xe2\x10\xc4\x0f\x31\xb2\x74\x8e\xd4\xae\xf0\xa4\xbd\x76\x99\x67\x37\xbe\x5f\xee\xeb\x0f\xd0\xbe\x58\x1a\xf2\x3a\xbc\x0b\x59\xef\x0a\x8d\xca\x5b\x62\x58\x0f\x36\xa9\x21\x53\x7f\x91\x37\x70\xc0\x39\x9e\x47\x62\xac\xe7\x53\x5f\xa9\xba\x52\x28\x44\x40\x3b\x55\xe7\x9d\x10\xfa\x57\x3a\xa4\xff\x11\xc2\x06\xcf\x13\x38\xf5\x4d\xea\x04\x21\x08\xa7\x26\xea\xb0\x38\xfe\x9f\x51\xba\xba\xc1\x4c\x85\x93\xab\x76\xd0\xdc\xa6\xbf\x24\xd2\x4d\x58\xdf\xe4\x2c\x19\x1a\x87\x5e\x93\x36\x14\x9a\xb1\xf2\x87\xfe\xea"
		"\x07\x87\xb0\x0a\x55\xe0\xc5\xf3\x95\x77\xc8\x3b\x49\xd0\xb0\x16\x59\x09\x0b\x92\x76\x11\xf9\x18\xd0\x42\x91\x68\xe3\xce\xc3\x0a\x67\x92\xbe\xe0\x0f\xab\x86\x64\xb7\x98\x39\xc3\xe3\xeb\xe9\x84\xfe\x4b\x1c\x0e\x4e\xd9\x49\xaa\xb8\xcd\x63\xc9\xf1\xbf\xec\xf0\x7b\xc9\x01\xc5\x21\x45\xdf\x81\x28\x86\x9b\xe9\x87\x06\x7b\x0b\x1e\xc9\x7e\x66\xb6\xc9\xc0\xab\x66\xf4\x8e\x59\xfa\xcf\x32\xc8\x6a\xb7\x5f\xb4\x5a\x4d\x18\x10\x98\x4d\x41\x6c\x57\x4d\x14\xfd\x80\xa7\xa1\x77\xb3\x97\x3e\x40\xb3\x4b\x1d\xa1\x85\xbd\x14\x64"
		"\xe1\x2c\x9c\xff\x2a\xd5\xad\x0b\xb9\x97\x78\x23\x51\x75\x06\x54\x9f\xf4\x79\x12\xc0\xdb\x01\xdf\xb9\x28\x22\x5a\x07\x44\x55\x07\xe5\xd8\x4b\x17\x30\x33\x2e\x16\x18\x4a\x47\x77\x2f\x3f\x02\x64\x16\x65\x35\xe8\x6c\x9a\xe1\x78\xfd\xd3\x42\x57\x8f\xb7\x76\x38\x4f\x52\xd6\x3f\x75\x79\x26\x5f\x57\xab\xd3\xd1\x96\x1a\xcb\xc4\xff\xe1\xfe\x5d\xdf\xd5\xbb\xfa\x87\xde\x8c\xf5\x28\x03\x19\xd3\xf0\x0b\xa8\xcc\x35\x97\xc6\x90\x02\xad\x3a\x9e\xdb\x42\xea\x3a\x6e\x89\xc4\xd4\xb0\x5f\x4f\x6c\x2b\x18\xa5\x65\x75\x58\x5f\xd3"
		"\xd5\xcd\xdb\x9e\x8d\x9f\x7b\x46\x28\x2e\xdb\x09\xc2\x30\xd7\xbe\xb4\x65\x83\x74\xc1\x15\x24\x01\xbd\x1c\x48\x5f\xa5\x9b\x40\x9e\x0a\x2e\xc7\xf8\xd2\x1b\x6b\x68\xb9\xf3\x05\x48\x04\x41\x52\x79\x3d\x9d\x39\xe7\x01\x1b\x81\x5a\x34\x9f\xf4\x61\x22\x30\x72\x24\xfb\x10\x01\xb4\x79\xcb\x67\x97\x17\xc0\xf7\xf4\x65\x97\x94\xdf\xea\x22\x95\x2a\xa5\xae\xea\xfd\xc1\xfc\x1b\xb4\xb4\x67\x85\x95\xf1\x0c\x8f\x2c\x19\xda\x48\x8e\x48\x1b\x42\x8f\xc5\xe2\x8f\xfd\xb7\x94\xf8\xa4\x13\x2a\xcc\x3f\xf4\xd7\xf6\x83\xca\x28\xc5\x4a"
		"\xa8\xe4\xde\xde\x79\x48\xf4\x58\x66\xc0\x24\x15\x27\x34\xc4\x20\x13\xc2\xfb\x1f\x0f\xc5\x9c\x73\x70\xaa\x99\x01\x87\x4a\x1a\x25\x69\x02\x08\x76\x96\x26\x3d\x77\xd1\x71\x34\x8f\x45\x03\x99\x42\xce\xec\xc5\x29\x7a\xdb\x22\x1b\x2b\x0f\x5b\x82\x27\xbe\x37\x31\x7a\x8c\x7c\xff\x1c\x51\xcd\x76\xce\x20\x60\xc5\x7c\x79\xd4\x74\xbf\x32\xfa\x46\xda\x6c\xb6\x61\x6f\x59\xa6\x33\xb4\xd6\xf7\xf2\xe0\x9b\x82\x8e\xc5\x97\x97\xf6\xb6\x54\x94\xab\x5f\x85\x4d\x2e\x61\xe8\xfa\x1e\x4e\x87\x6e\x93\x1a\xd6\x03\xae\x9c\xf8\x49\x63"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries1), 0x1000);

	const char emptyEntries2[] =
	{
		"\xf2\x58\x04\x97\xed\x00\x99\xee\xcb\xcf\x8d\xcf\x96\x3b\x86\xa8\xd7\xb8\x7c\x45\x20\x80\x78\x21\x18\xd6\x71\xf6\x6d\x03\x01\x30\xfd\x58\xd5\x63\xef\x4d\x27\x14\xd1\xa9\x88\xb7\x29\x2e\x07\x41\x56\x22\xce\xa7\xbf\xce\x50\x8e\x16\x34\xf5\x71\xe8\x23\xda\x1d\x87\x7f\xee\xbb\x05\x60\xaf\x65\x08\xcb\xbe\xa8\xb6\x5c\x96\xe3\x8b\x44\x21\x0e\xa4\x03\x89\x56\xf8\x50\x6e\xeb\x76\x97\xbc\x85\x1e\xea\x51\xd8\x12\x65\xd7\x84\xbb\x23\xce\xb2\x1b\x06\xa1\x8d\x2d\x56\xcf\x94\x76\xad\x0b\x31\x14\x49\xc7\x28\x63\x06\xc8\x67"
		"\x36\x42\x59\x69\x1e\xf1\x77\xbc\xcf\xd5\x1b\x61\x87\x07\xdf\x9f\xea\xa9\xe2\x2f\x6b\xfc\x9c\x11\x59\x9b\x11\x93\x6a\x82\x16\x4c\x1d\xb0\x83\x9a\x55\xfa\xfc\x54\x55\x10\xd6\x61\xfa\xe1\x7a\x66\xe0\xd5\xc0\x5d\x0f\xb4\xbe\x8b\xd1\xba\x24\xf7\xf9\x89\x04\x03\x74\x9f\x85\xf9\x01\x80\x4d\x9e\x50\xa3\xac\x77\x08\xe8\x15\x28\x22\xc1\xd7\xa9\x86\x71\xe9\xdf\x94\x4a\xa4\x76\x99\x2e\x2e\xd6\x45\xb6\xfe\x47\x0a\xa1\x0a\x77\xb6\xcb\xff\xf1\xe0\x4f\xbe\x95\x6a\x65\xfa\x15\x32\x8d\xb4\x08\xd9\x1d\x62\xbe\x7b\xb5\x07\xa4"
		"\xa0\x2d\x21\x47\xf3\x8e\x64\x90\xbe\xe4\x8e\xf8\x4e\x61\xba\x7f\x27\x46\x7d\x14\x9b\xbf\x41\xde\x96\xdb\x33\xbc\xdc\x0e\xf4\x49\x6f\x09\x72\x5a\xe2\xde\xf2\x0b\xb6\x86\x6f\xdc\x99\xae\xe0\x7d\xb9\xaf\xef\x30\xa8\xda\xb5\xe5\x3d\x51\x75\xc5\xc2\x3c\xff\x34\xb5\x9f\xde\x62\x77\xd1\xc7\x15\x9c\x4a\xc4\x96\x51\x76\x9a\xb4\xa6\xb4\x3e\x78\xe9\xac\x86\xd8\xd3\xb6\xe7\xd1\x09\x09\x89\x81\xeb\x42\xb7\x47\x5d\x0d\x47\x22\x8d\x0e\x83\x07\x60\x9c\xb5\x4a\xb2\x89\x7b\x63\x8b\xbe\x17\xad\x6a\xcd\xe1\x24\xb3\x57\xf8\xf7"
		"\x3a\xa2\x78\x8f\x5b\xd8\xd5\x0a\x71\x76\x4c\x53\x9a\xee\xd6\xa5\xf6\x0a\xaa\xb0\xb1\x63\xc6\x06\xb6\xbd\xbc\xfb\xf6\x06\xea\xec\x85\xd4\xa4\x6c\x51\x30\x05\x5b\x31\x45\x4d\xa9\xeb\xaf\x08\x46\xdc\xfb\x35\x3c\x12\x0a\xe7\xb4\xa3\x6d\x31\x60\x38\x68\x08\x6f\x5d\xf0\xe8\x96\x6c\x78\xb1\xcd\xee\xd8\xd5\x7a\x32\x29\x89\x5c\x28\x0f\x2c\xcc\x29\x3b\x4a\x95\x7f\x33\x82\x44\x83\x44\x66\x36\xdd\x63\xe8\xac\x7b\x20\xc1\x91\xe3\xf6\x1e\xce\xb3\xdb\xdd\x1f\x2d\x9f\x26\x1d\xc7\x2a\x37\xa5\x2b\xbf\x78\xe2\xbe\x01\xf4\xcb"
		"\x3a\x10\x08\x19\xc1\xcf\xe2\xac\xde\x5f\xb7\x68\xf8\x25\x65\xe0\xb2\x68\x58\xbb\x37\xf4\xb3\x1c\x57\xc9\xfc\xb0\xe9\x61\x40\x51\x54\x4e\xce\x31\xe6\x83\xb8\x93\xd7\x3a\x9b\x12\xc2\xa8\x4d\x28\xda\x94\x7a\xea\xdb\xaf\x99\x5a\xe7\x28\x39\x58\xe9\xc3\xa4\xba\xe5\x4d\x96\xbb\xc7\x2b\xc1\x6f\x52\x8c\x64\xe0\x1f\x06\x05\x1e\x90\x89\xcb\xe5\xe7\x54\x93\x45\x24\xce\xf0\x8d\x98\xbc\x71\x9e\x00\xe7\x3d\xd5\x8a\xa1\x42\xce\xcf\x27\x39\xcc\x12\x10\xd8\x0d\x93\x6c\x4f\x58\x5b\x18\x93\xa5\xc1\x9d\x9f\xc0\xaa\xd4\x2a\x1f"
		"\x0d\xdc\x87\xf2\x71\x3c\xca\x9e\x34\x09\xf4\x69\x7c\x1f\xa9\xf2\x8c\x9c\xe3\x2f\x50\x51\xf8\x18\xb4\x10\x25\xe7\xfb\x06\x63\x85\x33\xdf\x2b\x35\x69\x2a\x0b\xab\xaf\xe7\xcb\xcf\x78\xaf\xaa\xb2\x38\x6d\xb1\xe4\x6a\xf9\xc8\x7e\x00\x89\x20\xeb\xa8\xc1\x47\x6f\xd7\x31\x95\xd3\x86\x2c\x00\xa7\x60\xc8\x81\x80\x02\x95\x9a\x1b\xe4\x45\x5b\xa6\xa2\xe4\xf3\x90\x98\x2d\xa7\xde\x58\xab\xce\x02\xf1\xdd\x4c\x4a\x0f\xeb\xf6\x0c\x14\x14\x6d\xa7\xeb\xd1\xc6\x01\x2a\xac\x4c\xac\xa7\x75\x5a\xf8\xe8\x3e\x70\x24\xc0\xd5\x59\x11"
		"\xb7\xb0\x27\x16\xa5\x30\x87\x09\x33\x1b\x5b\x51\xbc\xa1\xc8\x25\x1d\x32\x70\xfb\xdd\xb8\x3d\xf7\xe3\x23\xb8\x46\x45\xa0\x00\x25\x64\x9b\x05\x3a\x58\xc0\x06\xe6\x16\x8a\x4b\xb6\x56\x9a\x35\x77\x4b\x26\x26\xe7\x67\x49\x43\x8f\x5d\x84\x06\xa4\x31\x95\xb2\xfd\x71\xbc\x19\x83\x05\x69\x75\xc0\x9f\x7d\xd5\xf3\x25\x2c\x94\x06\x74\xec\xa3\x3b\x79\x1f\x06\x39\x21\x38\x87\x81\x50\xca\x4b\xfc\x68\xa0\xdd\x9f\x1c\x08\xc4\x29\x9f\xef\x4f\xac\xef\x99\x21\xd3\x44\x2b\x62\x63\x94\xda\xe1\x74\xf2\xc6\x7e\x4d\x53\xed\x57\x20"
		"\xee\x25\x96\x7a\xab\x21\xdc\xcb\x63\x3e\x43\xb8\xb7\xa0\x42\x9f\xe9\xd5\x08\xac\x31\xe7\x6c\x64\x1d\xea\x9f\x67\x6c\x88\x33\x4e\x71\xb2\xae\x27\xe1\xb4\x16\xa9\x30\x35\x2a\xe7\x7f\x64\xce\x19\x11\xfb\xef\x71\xde\x6b\xb2\xa2\xee\xf5\xa4\x2a\x75\xab\xf0\xb5\x39\x96\x0e\x56\xcb\xfa\xb9\xfc\x63\xc2\x19\x80\x58\xa8\x7d\x48\x35\x5a\x4b\x9b\x86\x43\xc7\x34\x29\xd0\x79\x72\xdf\x22\xf5\x22\x86\x79\x31\x0e\x02\x38\x9c\x7f\x6a\x24\xf9\xa1\xe5\xa0\xc5\xeb\x7f\xb4\xdf\xc8\x33\xc9\x6b\xf6\x19\xe2\xba\xb0\x97\xff\xe2\xf2"
		"\x38\xe2\x13\x64\xb2\xb5\x96\xea\xfe\x69\x81\x6b\xfe\x98\x5c\x77\x4b\x70\x77\xc4\x58\x7c\xb4\x7a\x5b\xe9\x92\x92\x6e\x96\xa7\xbe\x37\xc9\x21\x6c\x7f\x08\xe5\x22\xbf\x09\x33\x11\x12\x17\xf5\x41\x20\x46\x37\xd8\xbf\x9c\x5d\x44\x04\xbf\x71\x97\x1a\xfd\x57\x68\x42\x77\x57\xa3\xe3\x5f\x7f\x1d\x9c\xfb\x45\x9e\x45\xc1\xed\x32\xfd\x7b\xfc\x83\x69\x1b\xa9\x10\x34\x46\x14\x81\xbc\x54\xe3\x27\xe3\xb0\xaf\x36\x47\xfd\x36\xa1\x91\x4f\x88\xa7\xe3\x5b\xe4\xbf\x11\x41\x53\xc8\x56\x6c\x6a\xf6\xd0\x5f\x5c\x78\xf8\xf4\x31\xa9"
		"\x2e\xb4\x60\x28\x6b\xbc\x4f\x22\xec\xa5\x19\x4b\x7c\xe2\x97\xf8\xb7\x52\x42\x56\x9e\x20\xbf\x89\x8e\x8f\x98\x5d\x1f\x9a\xcd\xe9\x13\xdb\x0d\x28\x20\x83\x17\xa9\xf9\x46\x9d\x65\x63\x2c\x65\xaf\xc3\x61\x5b\x0b\x48\xa5\x0a\x45\x9c\x82\xe9\x9d\xbb\x18\x4b\x58\xa9\xf0\x9c\xf2\x71\x15\xaf\x52\x6e\xd5\xd8\x83\xc7\xf6\x5a\xf9\x4c\x7a\x1f\xa0\xaf\xd7\x2e\x4c\x8c\xf6\xd6\xfe\x3f\xff\xdc\x0e\x0c\x24\x79\x2b\x8a\x90\xe0\xd0\x11\x4c\xdc\x51\xf3\x2c\x61\x8e\x7c\x66\x9b\x5a\xbc\x70\xac\xea\x40\x53\x7e\x67\x90\xce\x70\x9e"
		"\xe9\xd9\x27\x09\xd3\xbe\x26\xe6\xff\x2e\x15\x86\x02\xe9\x4d\x9b\xa3\x62\xe6\x50\xfe\xa2\x83\x4a\x81\x6a\xfd\xcc\x8c\xc1\x0d\x00\xe2\x7f\xa0\x6c\xde\x1f\x16\xa4\xdd\x41\x83\x71\x86\x8a\x70\x84\x67\x00\x87\x25\x6f\x65\x9d\x18\x83\x07\xf4\xab\xbf\xe7\x88\x19\xfd\x31\x01\x53\x0d\x14\x8e\x6f\xbf\x0f\x46\xd3\xe7\x7e\xdd\x80\x62\xd1\x31\x43\xa8\x29\x73\x8d\xad\xbb\xcc\x13\x52\xff\xc3\x85\xe4\x9a\x1f\x6a\x57\x4e\xbd\x40\xdb\x41\x3c\x2e\x32\x29\x1c\x54\x22\xfa\xbc\x46\x3e\x66\x0b\x8e\xe7\x25\x3d\xa8\x9a\x22\x19\x07"
		"\x9e\x49\x93\x9b\x64\x79\xb4\x8f\xc4\xcf\x93\xcb\x08\x46\xc4\xf5\x7e\x02\x5d\xd8\xcd\xa9\x42\x43\xdb\xb7\xbd\x2c\xa1\x97\x18\x27\xc4\xe7\x16\x0c\xbb\x30\x75\x65\x05\xd4\x2c\x07\x5e\xa7\xb0\x83\x07\xff\x44\x39\xf8\x70\x71\x74\xdb\x57\x95\x16\xfa\xa9\xa7\x38\x36\x13\xb8\xca\xb4\x28\x53\x5b\xb0\x05\x7d\xd5\xb2\x75\xdd\x9c\xcd\x82\x95\xa9\x01\xfc\xb7\xf1\x47\x79\xa8\x47\x75\xdf\x55\x77\xe1\x1b\xbb\x5e\x75\x82\xfe\xf4\xdb\xce\x17\x37\x67\xfc\x40\x71\x51\x8b\x56\x00\x0b\xf7\xd8\xfd\x02\x7e\xa4\x94\x1c\x23\x3c\xca"
		"\x02\x2b\x26\xa2\x59\xca\x81\xaa\x88\x1d\xc9\x29\x67\x15\x7e\x1b\x31\xec\x38\xa5\x3b\xc1\xaf\x52\x05\x64\x82\xa9\xf8\x13\xc1\xa1\x5e\x22\x16\x16\x56\x41\xe0\x4d\x3d\x34\x74\x67\x0a\x7a\xaa\x6f\xfc\x16\x32\xd1\x58\x6a\xcb\x3f\x7a\x93\x0c\x65\x2a\x9b\x64\xb5\x24\xa5\x81\xf4\x64\x64\x7d\x03\x3b\x70\x58\xbc\xb9\xc6\x7a\x78\xfb\xaa\xd8\x3c\xf8\xb7\x18\xf6\xa1\xc9\xdc\xfe\x79\xbf\xe8\xa3\x8f\x9b\x61\x64\x45\x90\x3f\x10\xc9\x54\xe9\xe1\x1f\x89\x6b\xf1\xa6\x44\x36\xcc\x12\xaa\xd4\x0d\xf1\x1f\xc7\x41\x4e\xae\x18\x1a"
		"\x77\x07\x12\xa4\xfd\xd9\xbc\x54\x0f\x34\xbe\xf8\x0a\x6a\x85\x6d\xe2\x6d\x7f\x60\xa9\x55\x57\x78\x22\x8b\x8b\x30\xf7\x6b\x82\xc8\x71\x6f\x19\x48\x84\x10\x14\x58\xa9\xa7\x90\xa6\xfb\x98\x2a\xa4\x17\x5b\x43\x4f\x69\xe0\xe9\xd7\x99\x21\x90\xef\x7c\x82\x35\x8f\x06\xfe\xca\x70\xd4\x1a\x26\xba\x49\x1f\x2f\x88\x97\xd4\x8d\x17\x14\xff\x31\x4e\x24\xc9\x90\x7a\x0a\xff\xbd\x5e\x75\xe8\x01\xf5\xda\xd9\xe6\xfa\xae\x6e\xc9\x4f\xa7\x6c\xd0\xfd\x5f\x74\xbe\xf6\x68\xbe\x2c\x7c\xa6\x87\xf2\x64\x27\xc7\x17\xa2\xac\xc7\x4c\x23"
		"\xcb\x48\x3a\xc9\x46\x73\x03\x22\xdc\xb2\x27\xa9\x34\xfd\x02\xa6\xdb\x45\x08\x51\xf3\x89\x95\xb2\x90\xee\x77\xdf\x86\x5d\xc4\x1f\xaf\x9c\x2b\xc6\x00\x05\x7a\x30\xa0\x26\xcf\x22\xb7\x66\xa7\x97\x58\x0a\x26\xf6\x0e\xb8\x7f\x83\xb6\xd2\x21\xdd\x3f\x7d\x07\xab\xba\x4d\xcd\x17\x3b\xe7\xd7\x60\xaa\xad\x26\x79\x67\x1b\xe3\x27\xfb\xa7\xaa\x46\x5b\x8a\x00\xe7\xe5\xa0\x45\xe4\x3f\x5d\xa5\x35\xb9\xfc\xc7\xce\x1d\x06\xc1\xcb\x14\x6f\xd3\x68\x6b\xe3\xa6\x31\xbd\xf3\x4c\xab\x1a\x6e\xe6\x74\xba\x71\x17\xbc\x04\x37\x5d\xe3"
		"\x44\xdf\x53\x0e\x5c\x57\xec\xf8\xb7\x58\xdb\xc3\xf5\x32\xcf\x84\x50\x14\xda\x96\xb4\x36\x26\xdf\xa1\x63\x15\xad\xc6\xd2\x1f\x4f\x15\xb1\x6c\x64\xcd\x12\x8d\x34\x6d\x11\xf0\x2e\x4b\x05\x2a\xc2\x63\xb8\x53\xf4\xf9\x88\x34\x9b\xff\xa1\xdf\xe9\xb4\xc4\xab\x8a\x0d\xad\x26\x13\x40\x66\x4e\x5e\x8c\x97\xf0\x5d\xa4\x7f\xd4\xc8\x2f\xcb\x20\x8b\x2b\xb9\xea\xc3\x6b\x05\xcc\x28\x7f\x1e\x59\xf9\xe9\x58\x0b\xd8\x12\x73\xf4\x0f\xe7\x47\x41\x3e\x2d\x18\x8e\x36\x97\x35\xff\x78\x40\x85\xa4\xd4\x26\x0b\x25\x74\x45\x50\x2e\x70"
		"\xca\xdb\x1b\x51\xaa\xa5\x26\x23\x14\xe4\x33\xb7\xa2\x77\xdb\x4e\x74\xb0\x27\xff\x3e\xad\xee\xe3\x18\x8f\xc4\x58\xd1\x56\x25\x4e\x79\xb2\x61\xe6\x4b\x8a\xfb\xad\x0b\x6f\x90\xd0\xaf\x37\xa7\x33\x5c\x15\x3e\x16\x74\x58\xbb\x78\x8c\x34\x09\x25\xed\xcf\x6d\xb3\x28\x11\x3d\xc2\x27\x3d\x20\x68\xcf\x00\xf8\xa7\x59\x63\xc4\xea\x7f\x88\xeb\x30\x44\xe0\x51\x77\xf4\x77\x58\x4c\x54\x17\xa4\x55\xa8\xc4\xdf\x28\xfb\x55\x30\xf0\x00\x0d\x4e\x6a\x94\x22\x42\x95\xee\x23\xe1\x7e\x92\x4a\xe6\x72\xd3\xde\xfd\x2f\x02\x96\xd4\x89"
		"\xf6\x13\x4d\xf7\xbd\x78\x79\xef\x90\xb1\x0c\xc5\xde\x19\x37\x14\xaf\x05\x71\x54\x2d\xba\x5f\x62\x90\xfd\xf2\x46\xa9\x0e\x06\x0c\xcd\xa6\xdb\x88\xb6\xac\xaa\x65\x8f\xa7\x09\x25\xdc\x21\x6e\xd5\xdc\x7c\xd4\xb2\x84\x4e\x9d\xa4\xeb\x4c\x26\x93\xd0\x49\x1a\x14\x7a\x61\x17\xc7\x05\xc7\xec\x87\x98\x8c\x98\x82\x92\x22\x42\xc5\xff\x11\x12\x62\x47\x93\xb0\xa0\x19\xf8\x03\xb7\xa5\xfc\x9b\x66\xbb\x7e\x2b\x11\xeb\xb3\x13\x69\x5d\x98\xe3\xf9\x21\x6a\xed\x7e\x43\x60\x68\x55\xe8\x75\xc7\xb3\x21\x2b\xd4\x69\x95\x1a\xef\x6f"
		"\x60\xe4\x96\xf7\x91\x02\x1e\x04\x51\x1c\x74\x19\xeb\xb7\xab\x03\xf7\xf6\x7f\x7e\x7f\xc7\x18\xe8\x15\x43\x19\x6c\xb5\xa7\xfb\xb5\x18\x8f\x0b\x7f\x7a\xa1\x99\x41\x1d\x00\x92\x68\xaf\xa8\x66\x5d\xe0\x39\x2d\x7b\x21\xc2\x81\xf1\xfb\x53\x3e\x3a\x7b\x00\x44\xe1\xb2\x4c\x61\xf6\x04\x2b\x1d\x23\x72\x59\x60\xc6\x64\xc0\x2f\x93\xb8\xc5\x31\x06\x9b\xe0\x43\x1f\x93\x8e\x0c\x2a\x2d\x89\xf6\xb7\xed\x3f\xff\x2b\x0d\x60\x3f\x25\xcf\xc3\xb8\xee\x82\x33\xbe\x7d\x9c\x83\x8c\x6a\x38\x2d\x56\x7d\xa1\x2a\x31\x55\x39\xd9\xbe\xbd"
		"\x2a\xd7\xdd\x8e\x78\x60\x52\x34\xd8\x80\x82\x1a\x3f\x51\x84\xd6\xc3\xec\x11\xa1\x72\x8d\x9f\x6f\xd0\x40\x64\x85\xa7\x16\xe0\x16\x84\x56\x41\x00\x37\xd9\x2e\xbf\x95\x49\x3f\x01\x9d\xd9\xbc\x0e\xcf\xac\x74\x93\x83\xc8\x8e\x0b\xb4\xf5\x87\xec\x1f\xcd\x25\x3b\x0c\x09\x4e\x19\xc7\x3f\x16\x37\x99\x86\xcf\x4a\x99\xa2\x52\x63\x3f\x79\x9c\xcb\x08\x78\xce\xf5\xf2\xf8\x87\xda\x35\xab\xc9\xb4\xe5\xd4\x0c\x90\x2d\x2a\xe8\xc9\x7a\xf9\xd6\x4e\x5d\x1b\xd5\x77\xd5\xe0\xcd\x93\xa8\x92\x1a\xb5\xe5\x9f\xdf\xb8\x8a\xa2\xe7\xd6"
		"\x87\xc4\x13\xe0\xf1\x73\xdb\x9a\x80\xc9\x5d\x87\x07\xb9\x44\xcd\x4e\x4b\xf2\x5e\x6e\xeb\xd5\x6f\x1f\x1f\x0f\x7e\x57\x3f\xc6\x09\x8c\xe6\x5d\x12\x22\x15\x6c\x15\x30\x86\xe8\x72\x41\x91\x73\xb0\x7a\x8b\xcc\x35\x33\x3a\x7c\xe0\x86\x76\x01\x92\xb8\x11\xb8\x35\xba\x74\x47\xab\xcc\x87\x8f\x32\xfd\x40\x47\x4c\x66\x03\xb1\x81\x80\x85\xeb\xb4\xf7\x5d\x34\x25\xb2\x75\xad\x70\xa9\x71\x9d\x38\xbb\x4a\xe3\x47\x0d\x5d\x59\x6d\x97\xd2\xb2\x93\x8c\xd0\x6c\x89\xf0\x6c\x40\x94\x4c\xcc\x6b\x68\x5e\x43\xca\x77\x4c\x86\xb6\xf8"
		"\xfd\xc4\xde\xd0\xc1\xc6\x92\xde\x51\xfa\xdc\x76\xe2\x2e\x9a\xc6\x60\x72\x72\xb5\x54\xa3\x68\x51\x92\x1c\x99\xf9\xb7\xe3\xf8\xb9\xd2\xc1\xd2\x59\xf4\x69\x98\x6b\xdd\x2b\x2f\x7f\x25\x6a\x1c\x35\x05\xce\x31\xb5\x85\x15\xe8\x19\xb1\x67\x87\x31\x4d\xd9\xf0\xb8\xc2\xe6\xdb\xe9\xb1\x55\x35\x9c\x71\x46\xda\xf7\x03\x4d\x82\x10\x21\x06\xd0\x91\x9d\x3b\x9c\xc6\xb6\x3b\x21\xbf\x82\x6e\x52\x23\x1b\xec\xe4\x9b\xfa\x46\x40\xda\xee\xca\x35\x0d\x5d\x71\x00\xc7\x8c\x55\xa0\x85\xbb\x6f\x4d\x1d\x2c\xe6\xca\xe9\x96\x31\x55\x74"
		"\xdf\xdf\xa5\xfb\xe0\x73\xfd\x05\x7f\xb0\x82\x92\xd7\xd2\x4d\x16\xd4\x01\x65\xfd\x67\x69\xea\xf1\xcf\x06\xc3\x92\x96\x34\x8a\x24\x98\xd4\x91\xf3\x56\x8f\xd8\xf6\x63\x7e\x15\x77\x27\x7b\x0d\x6c\x71\xa9\xf2\x7f\x2c\x52\xb6\x73\x0d\x63\xd5\xe6\xbc\x17\x55\xc5\xd0\xf4\x30\x5a\x5d\x74\x6a\x35\x9a\x60\xb5\x89\xcb\x09\x68\x1e\x13\x87\x57\xdc\x2d\xd1\x0a\x41\x23\xcf\xad\x5f\xee\x06\xbc\xfd\x85\x43\xef\x0b\xaa\xa0\x90\xc7\x06\xc7\x1b\xb9\xf6\x02\x1a\xe0\x08\x64\x86\x7d\x9e\x99\x4c\xfe\xa0\x2a\xe1\xd3\xac\x74\x4e\xe1"
		"\x99\x2d\x36\xeb\x9c\xea\x30\x0d\xd3\x28\xe7\xcd\x2b\x7e\x40\x79\xd5\x4e\x94\x87\x38\xc9\xb8\xdf\x53\xfc\xe5\x08\xb1\x12\xd1\x25\xef\xc9\x97\xd3\x22\xd4\x6d\x29\xc1\xe6\xb8\x27\xc3\x17\x4b\x0f\x43\x8b\x4e\x49\x79\x61\xb6\xd2\x8b\x24\x54\x8e\xda\xfb\xc0\x86\x38\x8d\xd3\x27\x8c\x9b\x95\x0f\xb1\x5e\xca\xb1\x26\x4a\x36\xea\xce\xeb\x48\xb6\xd1\x98\x75\x57\x8a\xb8\x7c\x7c\xca\xdf\xc0\x4f\x8b\xed\x2d\x28\x6c\x91\xe8\x59\x1e\xf5\xc2\x3a\xb1\x33\x30\xf7\x88\x98\xdd\x5a\x13\x43\x5b\x1d\x83\x1f\x98\xd6\xc7\xe5\x50\xe3"
		"\x2f\x63\x3a\x8a\xf3\x41\x41\x24\x42\x46\x8a\xc8\x14\xd9\xba\xee\x0d\x75\x4b\x8b\x15\xfb\x2f\xe5\xd4\x6a\x0d\x97\x1f\x1d\x07\x37\xb0\x25\x70\x7a\xda\xf0\x57\x05\x75\x69\xf7\x9d\x26\x8d\x70\x25\xac\x71\x86\x4e\xfb\x0a\x0b\x97\x8f\x65\x45\x91\x68\x2e\xc2\xa6\x71\x00\x62\x64\xaa\xa9\x09\x09\x8b\x78\x7f\x34\x10\xf2\x2f\xc7\xb7\x5a\x3e\x63\x95\xc7\x45\xa3\x57\xc8\x98\xe3\xc0\xdb\x95\xe8\xb1\x88\x25\x15\x21\xbc\x6d\xf3\x8e\x5b\x69\x43\x8c\xf4\x27\xef\xce\x80\x18\xab\xfc\x10\xbe\xbc\x44\x3d\x5d\x2b\x77\xb2\xb8\xed"
		"\x94\xcd\xf6\x99\xf1\x40\xcd\xa9\xfe\xd3\xee\xdd\x28\xca\xb1\xb3\x63\x63\x5e\xae\x8a\x1a\x32\x4c\x01\x55\x53\xb0\x09\x71\x9e\x52\x08\x8b\xe1\x85\xf0\xa6\x19\x6f\x03\x89\x60\x94\xe8\xff\xe1\x80\xe0\x2f\x0b\x1c\xda\x9d\x09\x8a\xab\x7b\x68\x18\x09\xc9\xe7\x48\x02\x06\x8c\xec\x70\x4a\x2e\x3b\x0b\x73\x1d\x94\x7c\xec\x57\xcb\x31\x83\x75\x41\xe5\x28\x5b\xec\x27\xc4\x7a\x7d\x71\x83\x91\x79\xf6\xd3\x0c\xd1\x94\xaf\x93\x2e\xba\x82\xca\x46\x71\x3a\x9e\x0c\xe9\x3e\x6b\xa6\xc8\xc4\xca\x5c\xfd\x80\xff\xf5\x1d\x4e\x05\xe1"
		"\x69\xed\x16\xe7\x9f\x46\xef\xc1\xe2\xb0\x99\x58\x28\x5b\x83\x67\xe5\x58\xde\xa1\x69\x16\xda\xef\xf6\xfd\x3b\x83\xd8\x4c\xd6\x38\x0d\x9d\xe1\x7b\x70\x91\xc2\x76\x34\x13\x0f\x59\x2e\xc5\xa2\x77\x8a\x97\x45\xf5\x05\x45\x32\xcf\x10\x25\x3e\x63\xcf\xd2\x9f\x38\x7e\x55\xc9\xd5\x05\x9a\xc5\x9a\x60\xff\x7a\x28\xc5\x8c\xf0\x57\x03\x27\xaa\x4e\x70\x0e\x5b\xb7\x1a\x93\xe0\x50\x0e\x51\xb5\xa1\x9f\x2d\x38\xc6\x5f\xa7\xbb\x2d\x2f\x38\xbf\x49\xb5\xd3\x13\x78\x7d\xa8\x9a\x8b\xe4\xdb\x53\x24\x01\xc4\x66\x2e\x02\x73\x63\x6a"
		"\x73\x6a\xa6\x8b\xdb\x68\xd1\xb1\x58\x89\x65\xa8\x94\xdd\x88\xf8\x15\x94\xe1\x8e\x62\xd3\x19\xb0\x6d\xd7\x81\x01\x1b\x99\x8c\xe3\x57\x7f\x88\xd2\xd5\x61\x0f\x34\xec\x8a\x16\x2e\xef\x83\x7e\x73\xbc\x50\xc4\x58\xc2\x9e\xe7\x30\x59\x68\xf5\xb1\x4d\x8f\xcc\xa0\xae\x6b\x19\x78\x81\x01\xf8\xd1\xfa\x3f\x8a\x78\x8b\xde\x9a\xbb\xbb\x48\xb1\xb6\x19\x2a\x56\xd2\xcd\x65\xd7\x9b\xe5\x12\x96\x6d\xe1\xaf\x25\x18\x24\x0e\xbe\x3c\x51\xc7\xd5\x81\x8a\xde\xee\xfc\x3d\x09\x77\xd8\x0c\xc2\xf2\x56\x9f\x6c\x62\xd4\x51\xfa\xda\xb9"
		"\x76\xc2\x41\xed\x04\xfc\x22\xa5\x27\x93\x3a\x75\x9b\x06\xd3\x4a\x8a\xb9\xa2\xd7\x69\x0c\x88\xa5\x8b\x50\x4a\x73\x01\xa8\x36\xe8\xa1\xf9\xc0\xe8\x8f\xd0\xae\xb9\xef\xfa\x15\x50\xba\x7c\x13\xf4\x7c\x07\xc3\x1e\x9e\x4a\x4e\xd9\xc6\x6c\xe6\x86\x63\x6e\x55\xc1\x5c\x22\xa6\xc8\xb6\x95\x14\xab\xab\x31\x30\x6a\x98\xa3\x3c\x69\x6f\xab\xdf\x7b\xbe\xff\x03\xb0\x00\x26\x6b\xcc\x1f\x65\xeb\x20\xed\xf4\x19\x8d\xf5\xf8\xcd\xe2\xd1\x2e\x5a\xe3\xe8\x91\xa4\x6e\x39\x2c\xbf\x6a\xae\xcb\xae\x44\xb4\xe0\x2c\xb1\xdb\xa8\x15\x90"
		"\xb0\x7d\x6e\x9a\xa1\x56\xaa\x3a\xf6\x9a\x14\xcb\x42\x02\x8f\xf1\x35\x7d\xae\x1f\xc0\x22\x5e\xf8\x57\x2e\x2d\x7c\xe9\x1a\x30\xf2\x35\x2f\x5b\x36\x90\xcb\xfb\x4a\xf6\x87\xbe\xaf\xe9\x70\xed\xab\x9f\x04\xcf\x3d\x57\xab\x14\xcc\x16\xf4\xf2\x36\x0f\x0c\xf0\x1a\x11\x07\xaf\x10\x90\xf9\x83\x84\xa5\xbc\xc8\x22\xd2\xb6\xb9\xfb\x20\x55\x0c\x2b\x11\x1e\x0c\xc2\xdf\xad\x57\x1f\x0d\xbf\x61\x2b\x0c\xf6\x8c\xa2\xe8\x89\xc2\x0c\xa7\xfc\x2f\x56\xb3\x5d\x5a\xef\xae\xfc\x6d\xcd\xd3\x61\x12\x04\x23\x12\x8c\xe4\x11\x19\x59\x5a"
		"\x85\x43\xa8\xa5\x64\x71\x89\xf1\x47\x6d\x6e\xe4\xcb\xa3\x39\x31\xa4\x14\x2a\xa6\xdf\xba\xb8\x2a\x00\x77\x0a\x20\xe9\xa6\xb1\xce\xb6\x5d\x15\x44\x5d\xfb\xe7\x8a\x01\xda\x64\x12\xd4\x5d\x7a\x3c\xae\x98\x45\xcb\x5c\xc6\x46\xe0\xce\x0d\xa7\x57\xc9\xc1\x43\x70\x24\xad\xf6\x09\x41\x09\x9a\x89\x28\xd7\xa2\xc4\x1a\x01\x7b\xa0\x94\x62\xdb\xea\x2c\xd5\x7a\xbd\x10\x4a\x4e\x8f\x69\xab\xda\xdd\x5c\x64\x4d\x5e\x4f\xd6\x69\x09\x6a\xd0\x47\x33\xbb\x6b\xf6\xaa\xaf\x9c\x51\x67\xab\x75\x5f\xd2\x99\x43\xe6\xac\x79\xd1\x43\x4f"
		"\xaa\xe6\x0a\x10\xca\xbd\xbd\xba\x14\x47\x61\xe4\x5b\x38\x06\x83\x93\xfb\x7e\x72\x04\xa2\x80\x9a\xbe\xa0\x36\xd0\x22\x1d\x5a\xc0\x3f\xb8\x33\x24\x43\x86\xf1\x09\x52\x66\xc2\xa0\xb8\xe0\xb5\x9a\xbf\x97\x8a\x36\x99\x10\xcd\xfe\xcd\x39\xf8\x00\xef\x70\x71\x89\x6d\xae\xff\x70\xd3\x90\xd8\x04\x65\xee\x22\x36\x04\x54\xeb\xf4\x05\xda\x50\xa9\x3e\xed\x9b\x9b\x9c\x56\xa2\x70\xc2\x7b\x7d\x69\x3f\x49\x85\x4f\x7f\x29\xb6\xef\x80\x27\x29\x37\x43\xf3\x59\x58\xb3\x88\x08\xe1\x17\x31\x36\x2f\x9f\x8b\xb4\x04\x27\xb4\xd2\xe3"
		"\x1f\x9c\x59\x7c\xac\x38\x36\x61\x90\x47\x39\x82\x98\xc6\x5b\x13\xaa\xd4\x37\xa1\xa1\x67\x3f\xed\x33\x87\x29\xea\xda\x07\x3c\x59\xc8\x30\xbe\xe1\xa9\x63\x9e\x73\x1f\xf7\x57\x3f\xce\xb1\xbb\xcc\x32\xef\xad\x44\xbe\xef\x19\x33\x1b\x5a\xf2\xe8\x63\xba\x10\xd5\xa6\x88\xec\xe3\x12\x93\x85\xa1\xf7\x34\x7f\x10\x46\x88\xf1\xdf\x1e\x16\x42\x88\x11\x62\xfd\xce\x2c\xfb\x9b\x1a\x27\xbf\x5f\xd5\xc6\xfc\x1e\x8a\x66\x42\x62\x77\x0c\x5c\x6c\x7a\xb5\x40\xc0\xc1\x7e\x8b\xcd\xcb\x0b\xe9\xdc\x3f\xb1\x84\xc7\x08\x3c\x72\x94\x22"
		"\xe1\x8f\x1d\xe6\x12\x7d\xfd\xde\xaa\x26\xc4\xdd\x2f\xc0\xa3\xda\x09\x9a\x78\x71\xca\x5d\x9e\xb9\x42\x79\x9c\xd0\xed\x7f\xf1\xe5\x0d\xa9\xc0\xc9\x83\x87\x79\x9f\x36\x59\xd7\x64\x4e\xb2\xf1\x35\xc6\x2c\xf7\xf5\xf5\xe5\x92\xb1\x87\xf8\x51\xfd\xb1\xc3\x26\xd6\x88\x7b\x8a\xc1\x18\x23\xd9\x36\x97\xd0\x3e\x7a\x45\xaf\x53\xe5\x08\xa2\xe7\xf4\x58\x8b\x1e\xa1\x5f\xdc\x98\xac\x52\xde\xc2\x3b\x33\x51\x91\x04\x25\xc2\x43\x53\xfb\xf4\x91\x20\x7c\x0d\xf2\x6d\x66\x32\xc1\x3d\xd1\x3c\x4e\x19\xd6\xde\xa6\xf3\x0a\xc0\xcf\xcd"
		"\xb1\x12\x12\x8b\xc7\xab\xea\xd7\x10\x1a\x0a\xf8\x53\xec\x85\xe7\xf2\xff\x50\xe5\xa3\x0c\x33\x54\x32\x84\x1c\xe4\x6c\xe9\xbe\xdc\xff\xe6\x4c\x98\x73\xb0\x77\x28\x36\x3f\xfd\x10\xa0\x6b\xea\x16\xa4\x75\x5f\xb5\x4d\x43\x22\x95\xf8\x16\xaa\x0d\x54\xc9\x25\xee\xa6\x4e\xa4\x6f\x3e\x0f\x7d\xb2\x29\x8d\xfb\x12\xc9\x18\x6d\x1f\x24\x6e\x98\x04\xb5\x18\x8d\x91\x32\x76\x84\x91\xfd\x80\x10\x65\x22\x19\x79\x1f\xf9\x07\x39\xf9\x7f\x1d\x04\x06\x41\x48\x6a\xff\x1d\xa2\xa6\xf3\x8d\x4b\x61\xab\x51\x05\x0b\xf7\xca\x5b\xa5\xef"
		"\x7e\x37\x2b\x9b\xce\x7f\x91\xc0\x4c\xa3\x35\x1f\x17\xce\xa3\x17\x35\x31\x72\x59\x99\xcb\xea\xd2\xdc\x2d\x24\xe2\x72\x9d\x02\x39\x32\x82\x7b\xcc\xa1\xa1\x15\xce\xff\xa6\xa4\x79\x36\x98\x12\xa0\x58\xaa\xf2\xc5\xf6\x05\x40\xd5\x27\x99\x35\xee\x2d\xd1\x66\x76\x49\xcf\x8c\x41\x89\x6b\x52\x65\xab\xf9\xf3\x5f\x15\x34\x8f\x56\x7e\xe5\x3e\x2b\x83\x73\x6d\xfe\x38\xd1\xdb\x29\xfb\xaf\x37\x28\x93\x75\xb6\xaa\x17\xd0\x4c\xbd\x18\xe6\x45\x20\x0b\x6e\x37\xef\xe7\x86\xff\x28\xc9\xd3\xdc\x8a\x82\x95\x49\x77\xce\x42\xd8\xc3"
		"\x76\x9e\x6c\x72\x9c\x60\x82\x16\xf8\x86\xc0\x30\xf6\x87\xb8\x76\x33\xe6\xe7\x00\x1c\x1e\xe3\x5d\xb4\xd7\xf8\x9a\x5f\xfe\xb8\x0e\xf1\x5b\x85\x2c\x60\x65\x56\xd0\x58\x52\xf3\xf7\xa2\x0a\x1b\xda\xb4\x4f\xd8\x6c\x5d\x40\xf1\x0e\x2c\x8f\x8c\x5c\xda\xfb\x02\x37\xfe\x24\xda\x59\x19\x45\xb7\x25\x18\xf2\x28\x57\x9e\xbe\xf3\x54\x48\x25\xac\x71\x1e\x84\x32\x0f\x79\xdd\xd7\x74\x63\x92\xe7\x17\x76\xf3\xf0\xd1\x7c\x62\xea\xea\xfd\x77\x81\x19\x1b\x64\x54\xe4\x18\x17\xda\x94\xd2\x5b\x1f\x1e\xc5\x2c\xf4\x1f\xcd\x81\xec\x7c"
		"\x06\xfc\x61\xa2\x17\x8a\x58\xe6\x76\xca\x09\xe2\x97\x9d\xb2\x91\xc2\xc2\x60\x77\x7e\xfe\x0e\xe0\xbe\xee\xee\xdd\xbb\xd5\x49\x65\x70\x98\xfd\x25\x44\x4c\xc1\x25\x9a\x49\x8c\xbf\x18\x36\xe4\xc2\x44\x32\x19\x71\xab\x7c\x4d\x01\xaa\x37\x96\x4a\xbd\x28\x90\xc0\xe6\x60\x48\x23\x31\x7d\x20\x91\xa6\x87\x41\x76\xa7\xd2\x3d\x21\x69\x87\xd8\x01\xec\x36\xad\xf8\xd4\xe6\xfa\xb9\x76\x7f\x5c\x51\x2d\x8c\x16\xb8\xec\x64\xbc\x30\x9b\xbd\x4e\xe5\xb4\xcd\x96\x79\xe4\x52\xfa\xed\xfe\x43\x55\xe5\x04\x56\xcf\x4e\xdf\xd2\xa8\x7a"
		"\x97\x23\x2a\x4b\x20\x10\x4a\x07\xe7\x29\x14\xa7\x48\x42\x2f\x7e\xc0\x8e\xfc\x90\x5b\x7e\x48\x9f\x0c\xd7\x29\x77\x7b\xd9\x05\x5a\x50\xf6\x0f\x45\x1c\x87\x6e\xae\xce\x5f\x4a\xfb\x39\xc4\x20\x9b\xa8\xb1\xab\xde\xf5\x82\x59\xc0\x4f\xcd\x55\xb9\xaf\xa1\xc0\x91\xcb\x73\xf8\xb9\xe3\xe5\x10\x1e\xdd\x55\x95\x8d\x47\x42\x29\x15\x5d\xa9\xa3\x4f\x3c\xab\xdd\xf1\x9a\xd8\x18\xfe\x99\x15\x5e\x85\xc6\x23\xe9\x03\xc8\xb1\xd9\x92\xd1\x33\x71\xc9\x38\x8c\x1d\x0a\x89\x13\x66\xf2\xbe\x74\xca\x98\xaa\xf8\x71\x6e\xdd\xe9\x69\xab"
		"\xa0\x89\xfd\x09\x86\x88\x50\xc8\x2a\x1c\x43\xf1\x0d\x40\x43\x09\x0c\x9b\xcb\x43\xe1\x59\xad\x65\x10\x0c\x6d\x88\x2b\xae\xd3\xb4\x45\x4c\x76\x23\x3f\x32\xc6\xe2\x11\xcc\x83\xad\x8a\x1b\x38\x8d\x01\x3b\x3c\x70\xbe\xfb\xae\xf0\xb7\x1d\x0c\x54\x75\x0c\x02\xa0\xa3\x6b\xb8\x0a\x2d\x38\x38\x09\x38\xc6\x62\x3a\xdd\xd0\xe0\x57\xe6\xe7\xca\x85\xaf\x1c\x62\xea\x9a\xe4\xff\x22\x13\xa9\xed\x27\x1e\xd7\xe9\xcc\x1b\x35\x90\x15\x11\x01\xd9\x0a\xd9\xd2\x63\x64\x6d\xb6\xd9\x0f\x87\xbf\x99\x77\x8a\xd9\xc1\x7a\xd1\x0c\x25\x89"
		"\xb9\xa8\x6a\xf2\x9f\x8b\xe6\xbe\x11\xbf\xa3\xed\x59\x32\x39\xa4\x2a\xd8\x0f\x62\x38\x01\xc8\x54\xf8\x31\x3c\x71\xbd\xb2\xf4\xb8\x57\xa2\xe0\x6c\x20\x93\xf1\xe6\x50\x17\xb9\xbd\xef\xa0\x10\xf1\x13\xac\x49\x80\xfe\x2c\xf4\x6f\x93\xde\xc5\xdd\xdb\x03\x76\x5a\x72\x45\xf4\xaf\x36\x35\xe0\x41\xf8\x77\x47\x28\xfd\x7f\x0d\x0b\xa3\xf9\x7d\xdb\xbc\xa5\xad\xc5\xa0\x31\x78\xc8\xa6\xf3\xff\x93\x3d\x83\x51\x9b\x11\x46\x1e\x22\x25\x16\x80\xab\xdf\x9b\x2a\x67\x3d\x0a\x98\xca\x0b\xd6\x6e\x31\x1f\xcf\x82\x17\x4e\x7f\x54\x4f"
		"\x61\xf8\x3a\x85\xa5\xab\x47\x87\xac\xb5\x50\xb9\x54\x14\x05\xec\x70\x68\xf7\xe0\x52\x93\x07\xae\x00\x5d\x86\xaa\xfb\x44\x1e\x2b\x88\xcf\x9b\x21\x21\x9f\x07\x67\x1c\xa3\xb1\xb9\xa6\xcf\x70\x5c\xc5\x17\xb9\x2e\xa0\x3f\x5d\x61\xf9\xd8\x9c\x31\x00\x70\xe9\x7d\x7a\x99\xa9\xc0\x7c\xce\x9c\xf9\xff\x9a\xd8\xde\xd4\x85\xd0\xf0\x0e\x55\xa8\x6e\xbc\x43\x93\x52\x16\xb3\x34\xaf\x93\xfd\xd3\xe2\x7c\xd5\x69\x8d\xcf\x4f\xbb\xc2\x29\xa2\xf9\xa4\x23\x4d\x5f\x07\xe9\x9a\xb2\x0f\x12\x79\x21\x34\x3a\xa1\x38\xfd\x76\x38\x5a\xf7"
		"\xaf\xaa\x95\x00\x54\xf8\x96\x01\x19\x10\xe1\x1e\x35\x5a\x73\x41\xb5\xa0\x95\x22\x77\x37\x73\xfa\xdb\xff\xec\x05\x1f\xf5\x14\xb4\x6b\x90\xb4\x0f\x10\x3b\x9f\xb7\x4f\x88\x99\x20\x63\xc2\x0c\xe7\xb7\x76\x9b\xb1\xd7\xb2\x92\xac\x33\xad\x1c\x79\x14\xec\x3a\x98\x73\xb2\x7f\x2a\xc6\x92\x1b\xea\xd9\xfe\x5a\xb0\x7b\xde\x8d\xdf\x97\x39\x0d\xaf\xf8\x54\xff\x20\x2c\x71\x00\x43\x72\x95\x86\x46\x86\x71\x7d\x39\x25\x80\x6e\xdd\x1d\xcc\x57\x21\xcb\x19\x19\xe4\x2a\x8e\xe8\xe2\x0a\xb5\x5a\x36\xd2\xf9\x9b\x6f\x2d\xd1\x47\x4f"
		"\x3a\xd5\x2f\xd3\x89\xc3\xe2\xa6\xcd\xa1\x9c\x5d\xc8\x1f\xd0\x5d\xc8\xe5\xef\x92\x62\xa9\x22\xfa\xae\xfb\x98\xc3\x56\x77\x42\xac\x25\xaa\x13\x30\x07\xe1\x5c\xf2\x91\xca\x35\x93\x52\xf9\x44\xcd\x1f\x73\xeb\xb9\xb7\x10\x11\x0d\xae\xe2\x54\x5f\x77\xa8\xb9\xcf\x8b\xbd\x7e\x6e\x11\xfc\xaa\x4b\x2b\x62\xa3\x01\xc5\x16\x22\xa6\x5c\xc6\x08\x87\x6f\xf8\xd0\xfe\x56\xae\x0c\xa8\x55\xca\x3b\x1d\x5c\x39\x9b\x55\x9d\x54\x29\xdc\x3c\x83\x5f\x6e\x9f\xdf\x26\xae\x48\xde\xe5\x9e\x42\x5a\x45\xaa\x7f\x0e\xae\xab\x07\x73\x9d\xea"
		"\x25\xe9\x00\x76\xd2\x41\xbe\x5c\xbf\x19\x1a\x3e\x4a\x27\xf2\x86\xf7\x5f\x12\xf6\x18\x8d\x6f\xce\x17\x9a\x5a\x33\xed\xd5\x7a\x6e\x72\xac\x20\xeb\x28\xd1\x05\xf8\xed\xb2\xa0\xc4\x50\x92\x23\x8c\xa3\x48\x63\x46\xff\xfa\xa5\xc6\x77\x93\x22\xc3\xdf\x66\xc1\x97\x01\xaa\x96\x9b\x5e\x90\x8a\x5d\x8e\x75\xc3\xb7\xa7\xb3\xd9\x4e\x4a\x7c\xe5\xb8\x91\x2b\x90\x65\x74\xca\x48\x82\xd5\xb3\x62\x35\x3b\x6e\xba\x7b\x08\x91\x95\x58\xf2\x3b\x40\xb1\x0a\x26\x32\x8b\xb3\x38\xcc\xb6\x69\x6a\x87\x68\x62\x1f\x4e\xab\xd3\x99\x5f\xa1"
		"\x23\x64\x00\x01\x4a\xdc\xe1\xb5\x06\x27\x86\x0a\x0e\xad\x59\x1c\x88\x9b\x25\xe0\xa9\xe5\xb1\xb6\x90\x3c\xb0\xe4\x2b\x7e\xb4\x5e\xa9\x0b\x5a\xb7\xe6\x4f\x8d\x3d\x57\xe8\xe5\x25\xbe\xe5\x29\x29\x11\x10\x13\xd6\x9c\x1d\x62\x70\x3e\x34\xdf\x8f\x65\x8e\x26\xf0\x24\xb8\x64\x1d\x1d\x01\x32\x66\xd6\xbc\xdd\x7b\xbd\x81\x99\x13\xe4\xfe\xfc\x5c\x63\xbd\xe9\x39\x73\x8e\x5a\xb4\xa3\x2b\x4b\x7b\x93\xe7\x75\x63\x05\x48\x02\x8f\x15\x98\x47\x4d\x9b\xa5\x45\x79\x80\xbb\x56\xa4\xdf\x12\x41\xf6\xac\x70\xce\xe8\x52\x9e\xc8\x69"
		"\xd5\x48\xb3\xd9\xc2\xf7\xbc\x74\xa9\xb1\x08\x4f\xe3\x3c\x9d\xe7\x7b\x99\x42\x9e\x95\x7d\xd5\x6d\xd9\x4d\xfa\xe5\x3c\x19\xbb\xf0\x62\xc2\x98\x59\x0c\xbb\x32\xa7\xa6\x51\xd7\xd7\xc2\xcf\x6c\xbb\x27\xc2\x36\xc6\x4b\xf5\x57\x6d\xce\xf4\xdf\xd0\xf9\x15\x97\x1e\x4b\x5e\x55\x41\xb6\xfc\x29\x82\xa4\xce\x34\xed\xba\xda\x39\x46\x5f\x31\xb8\x78\xdc\x91\xca\xb2\x2a\x6b\x49\x8b\xe1\xef\x91\x1b\x2f\x54\xbd\x0c\xa6\x0c\xb4\x1d\x4f\x00\x68\x0f\xcd\xb5\x48\xcd\x1f\x1e\x86\x53\xba\x56\x26\xbd\x62\x18\x88\xd9\xc1\x29\x28\xd9"
		"\xb9\xb2\x59\xed\xc7\x5e\x92\x1f\x61\x68\xaa\x5e\xbf\xe2\x94\x45\xb2\x3b\x09\x31\xdf\xbe\xc0\xa1\xf2\xc3\x66\x37\x5f\xee\xc7\x6e\x05\xe9\xb5\x94\x37\xeb\x28\xab\x67\x5b\xac\x8b\x82\x3d\x90\x27\x8e\xb8\x8e\x69\x89\xf0\x41\x4d\x81\xcd\x9b\x7c\x30\x28\x42\x97\x80\x78\xd7\x9d\xc4\x5c\xd0\x3c\x62\x4a\xc3\xe1\xb7\x2c\x3f\x95\x4a\x27\x51\xb2\x0b\x10\x73\xd0\xa2\x5e\x6d\xdc\x0f\x97\xbf\x1b\x07\x4a\xcc\x0d\x56\xb7\xe5\xf5\xca\x83\xee\xdb\xb5\x89\x55\xac\x5f\x9e\x90\x1e\x55\x22\x00\x71\x26\x03\x29\x8e\xb3\xd0\xd0\x1e"
		"\xdb\x0c\x73\xaf\x1e\x34\x77\x03\xa6\x3e\x97\x5b\x75\x69\x9c\xcb\x94\x51\x6e\x5e\x69\x66\xd0\xf9\x14\x03\x9e\xd6\x4c\xed\xa1\x4c\x2b\x1e\xb4\x72\x19\xdb\x5b\x6c\x3a\xcd\x53\xc6\x34\x73\x65\xe1\xfb\xbf\x13\x8c\x25\x91\xcb\x04\xeb\x77\x09\x5b\xa5\xb9\xfb\xda\x47\x9a\x51\x38\x29\x5d\x5b\x8a\x53\x15\x4c\xe1\x2c\xd9\x1d\x34\x09\x0c\xb0\xe5\x53\x45\x56\xd3\x36\xa2\x68\xde\x90\x05\xd3\xff\xaa\x1d\x3b\xd5\x91\x06\xf5\x64\xeb\x48\x8e\x24\xa4\x6c\xa3\x11\xf5\x36\xc7\x3d\x5d\x96\x2d\x87\x3e\x0b\x7c\xcc\xf1\x34\xcf\xd3"
		"\x2d\x79\x62\x7d\xeb\x73\x85\xce\x61\x31\x65\xc0\x67\x3b\x15\xca\x19\xce\xf7\x04\x12\x94\x5b\x7d\xd8\x9b\x2b\x73\xb9\xfd\xb2\xc4\x1d\xf3\x7b\x5d\x7f\x9c\x24\xf6\x7e\xdc\x98\x40\x2f\xaa\x31\x3b\x72\x20\x55\x80\xda\x4e\x25\x1b\x41\x7e\x12\x44\x6a\x49\x5e\x2b\x3b\x67\x30\x44\x84\x42\xad\xba\x8c\x9a\x3c\x1e\xbe\x18\x47\xe1\xaf\x23\x01\x86\xcf\x6e\x34\x9b\xeb\x9a\x9e\x59\xbb\x81\x7b\x43\x68\xbd\x23\x31\xb9\x38\x78\xa8\x3e\x43\x04\xd7\x9d\x4e\xb0\xea\xe6\x0c\x0e\x6e\xb8\x76\xcb\x29\x01\x43\x3f\xa7\x0b\x14\x4b\xfa"
		"\xde\x8a\x5e\x90\xc6\xe3\xa0\x6f\x49\x32\x1f\xae\x94\x61\x2e\xf4\x69\x46\x13\x0a\xd9\x2a\xad\x75\x37\x60\x1f\x29\x98\x2d\x43\x47\x7b\xba\x81\xa4\x98\x93\x98\x9b\x38\xf4\x5a\x66\x38\xba\xab\x7b\xe7\xaa\x6a\x02\x04\xd1\x95\x3e\x71\x11\x8e\x37\xc0\xd2\xdd\x30\x85\x59\xb1\x7b\xb5\x32\xa8\xbe\xb2\xc6\xc9\xfc\xfe\x28\x49\x34\xae\x7a\x85\x92\xd6\x52\x5f\x62\xbd\xed\xeb\xfc\x17\x94\x55\xd0\x84\xef\xc8\x6e\x3a\xd3\x1b\x7f\x27\x7c\x28\x17\x84\xce\x4d\xdd\xa8\xa3\xb0\xec\x1c\x6a\x38\x13\x43\xe7\xaa\xc6\x16\x4c\xc3\xcc"
		"\x47\xe1\x9f\xfe\xba\x38\x15\x8f\x91\xd8\x45\x70\xaa\x8e\xe4\x72\xc4\xa1\x2e\x9a\x96\xc0\x3a\xb1\x9b\xfe\x5b\x9a\x68\x6b\xd5\x62\x75\xe1\x23\x9d\x76\x32\xae\xee\xb2\xb9\x0d\x63\xff\x07\xfe\xf1\x2f\x9e\x80\xc9\x0b\xe0\x72\xe3\x74\xd0\x27\x9c\x4a\x8e\x8b\x32\x34\x00\x1a\x5c\x28\x6f\xd0\x63\x7f\xaf\x37\xa6\x3c\xe7\x4b\xfe\x75\x1d\xf4\xcd\xf2\x85\xa5\xde\xec\x82\xd6\x79\x3f\x0e\x4f\x4d\x82\x3e\xdd\x80\x1c\x33\xee\xb6\x06\xc9\x64\x58\xfb\xc8\x53\x0f\xcd\x1f\xa1\x29\x4a\x67\x33\xc2\xe1\x9d\x2c\xda\xce\x18\xd1\xcd"
		"\x30\xb8\xc4\xe0\xee\xc8\x57\x4a\x75\xe0\x72\x04\x5d\x02\x87\x9c\x5a\x98\x2d\xe7\x9a\xa3\x37\x73\x2a\xd0\x36\xea\xb1\x11\x97\x90\xcf\x4d\x69\xc0\xb0\x0f\xae\x7d\xda\x8e\x56\x82\x36\x3c\x2c\x38\x4b\x25\x38\xb1\xfa\x26\x59\xe8\x18\x8f\x4f\xdc\x42\x3b\x7c\xcf\x82\x10\x49\x3c\x92\x5c\x00\xb1\xeb\xee\x82\x7e\xf3\xba\xeb\xf1\x42\xc1\xcf\xa5\x52\x6e\x4b\x49\xa8\xb3\xa2\x5d\xe3\x53\x3b\x7f\x4e\x59\x1d\x18\x87\xfd\x40\x18\x80\x68\x13\x9d\x33\xf3\x47\x60\xa4\xdf\x78\x3f\xb2\xbf\x27\x3b\xed\x2e\xf0\x8f\xe4\xba\x95\x51"
		"\xbb\x31\x7d\x7e\x0e\x14\x90\xd5\xa5\x5d\xf8\xec\x4f\xa0\x7a\x2b\x51\x47\x29\xfc\x02\x49\x3c\x46\x65\x09\x56\x6a\x87\xb1\xb6\x94\x4c\x08\xa3\xda\xe3\x6e\x46\xfb\xa9\xe0\xc1\x83\x6b\x4d\x90\xde\x68\xf6\x7f\x86\x37\xc3\x6f\x9b\x54\x93\xa1\x09\xf0\x12\x6e\xae\xa0\xc2\x0d\x3f\x35\xa3\xcc\x41\x9f\x6f\x76\xa5\xaa\xb6\x3d\x35\x74\x3c\x46\x52\x17\x56\x4b\x17\x2e\x79\x3a\x84\x49\xec\x9d\x6c\x3a\xfe\xf6\x43\xf2\xf0\x2f\xf9\x6c\x09\x4a\x4a\x8b\x07\x97\xd2\xca\xe8\x07\x0b\x48\x82\x48\x70\x86\x8c\x59\x7a\x38\xaf\x55\x99"
		"\xc5\xd7\x98\xd9\x48\x40\xfa\x9d\xa0\xed\xb6\xb0\xf8\x0c\x0b\xbe\x44\xd1\xaf\x4c\x44\x6a\xaa\xae\x07\x74\x96\xa1\xdd\x19\xf3\x9e\xbc\x53\x7b\x01\xd2\xae\x04\x59\x9f\x0c\x27\xbe\x1c\xc3\xda\x53\x08\xae\xea\xe9\x53\xe7\xeb\x43\x9c\xae\xd2\x01\x36\x16\x54\x69\x02\x63\x14\xc7\x3a\xce\x08\x90\xa2\xcb\xa5\xad\xed\xe5\x9c\x1d\xa1\x1f\x58\x78\xf5\x2f\x24\xc4\x60\x77\xa7\x68\x96\x09\x90\x81\x4b\xeb\x55\x46\xa9\x99\xea\x23\x11\xa7\xd7\x75\xcb\x93\xc3\x88\xb9\x49\xd0\xb4\x15\x13\xc8\xfa\xae\xc7\x6c\xe3\xba\xd4\x02\xcf"
		"\x8a\xf3\x76\x1d\x21\xb7\xf4\xa6\xcc\xc2\x41\xeb\x44\xac\x4a\x17\xbf\xe9\x43\x55\xe7\xcf\x1a\xfa\xfa\xb8\x67\xf7\x94\x63\xc6\xe3\x51\x54\xf6\x4a\x19\x44\x45\x41\x03\xa9\xeb\x94\x8f\x41\x1e\x1a\x75\xea\x29\xbb\xb8\x7f\x88\xfb\xfa\x17\xbf\x38\x65\x97\xb0\x3a\x29\xfb\xed\xd8\xb3\xb6\xec\x0c\xf0\x60\x15\xbf\x89\x66\x8f\x6a\x8c\x9c\xf7\xcf\xde\x72\xf2\xe5\x54\xee\x01\x9d\xe3\x45\x42\xe7\xa7\x18\x70\xdb\x08\xa9\x96\x91\xfc\x59\x2e\xe5\xcf\xda\x20\x4e\xc1\x02\x15\xc5\x82\xf1\xa3\xec\x97\xb5\xb0\xa1\xeb\x04\x9d\x42"
		"\x94\x98\xd3\x5d\x32\x45\x65\x25\x33\xfa\x24\x04\xa4\xb3\xda\xe3\x07\xd0\x9c\x9c\xeb\x2f\x2f\x3f\x1c\x4c\x30\xa4\x94\x09\x61\x1f\x9c\x19\x12\x04\xfa\x85\x42\x44\x8a\xe7\x35\x13\x7a\x78\x6d\xde\xc9\xdf\xe8\x4d\xab\x0f\x3b\xd5\x39\xf8\x4f\x28\x55\xe7\xa6\x93\xe0\xbc\x87\x20\x79\x77\x4e\x9c\xf4\x23\x2a\x3b\x0d\x33\x44\x14\x53\xe5\xb2\xef\xb1\x58\xa8\xf7\x2d\xd7\x4a\xf0\xd9\xca\xdf\x0a\x3a\x10\x0e\xc7\x7c\x19\x42\x14\xe8\xae\x7f\x15\x69\x86\x02\x51\x6a\x74\xf4\x4f\x99\xd7\x53\x01\x2b\xb1\x51\x55\xe6\x78\xf4\x8b"
		"\xe9\x5c\x48\x26\xbe\x90\xd0\xfd\x67\xb4\x0a\x70\x77\xae\xe4\x02\xa5\xda\x28\x88\x82\x5d\x8c\xcc\xc2\x7c\xbd\x19\x76\x9e\x63\xc6\x13\x6b\x6c\xd8\x2c\x4d\xe1\x13\x10\x72\x23\xa5\xb6\x0b\x17\x15\xa0\x31\xec\xe7\xf2\x78\xc9\x30\xeb\xa8\x65\x65\xd5\x19\xfd\x15\x37\xf0\xbc\x38\x40\xfe\xa1\xe1\x8a\xc6\xda\x95\x1c\x72\xd2\x30\x00\x22\x33\x59\x61\x2f\xcc\xb7\xa6\xca\x2f\x07\x5c\xf0\x41\xf9\x91\x92\x03\xda\x10\x0b\x01\x4d\xc4\x29\x31\x1f\x35\x95\x76\xbd\xdb\x88\xac\x15\xfe\x52\x4f\xc5\xb8\x76\x90\x68\x9d\x95\x9c\x00"
		"\x8e\x6f\xb5\xad\x9c\x6b\x28\x05\x7e\xf8\x36\xc6\x74\x56\xc2\x42\xec\xa5\xae\x94\x2e\x16\x0a\xfe\x23\x30\xa9\x09\xee\xbc\x63\x70\x31\x6b\x56\x36\x55\x76\x00\x09\x77\xf4\xa0\x7b\x89\xae\x3b\x81\x4a\xb5\x78\x70\x71\xfe\xa5\x79\xa9\xa6\x08\x2e\x65\x48\xba\x5b\xdb\x0f\x91\x73\xa5\x0d\x7a\xcf\x29\x4c\x98\x71\x94\x65\x35\x27\xa5\xf6\xda\x7a\xf6\x47\xb8\x03\xfc\x14\x50\xc9\x61\x97\xa2\x64\x51\xea\xce\x25\xa6\x38\x4e\x45\x2e\xb9\x34\xcb\x4d\x4e\x92\xe4\xf6\x0d\x72\xdf\xc8\xf5\xb9\xec\xb8\x1d\xcd\x63\x53\x21\x67\xa3"
		"\x62\xf1\xd2\x9a\xa5\x02\xf5\x2a\xfa\x3e\xfc\x8c\x3c\x90\xc9\x40\x4a\x8e\xcc\x7e\x50\xcf\xa5\x19\xc1\x91\x64\xa1\xb2\xab\x88\xea\x9f\x62\xf1\xc2\xf0\x3b\x48\x50\x75\xa3\xf3\xfb\x61\x91\x13\xfb\x59\x34\x81\x0c\x64\x7e\xa1\x83\xf7\x12\x0b\xe7\x42\xf0\xd0\x11\x18\x10\x7b\x58\xcf\xcd\x1d\xdf\x57\x31\x19\x01\x42\xfd\x44\xe3\x2e\x21\xbe\x4a\xba\xa8\x8c\x37\x64\x3d\x08\xef\xa1\xe7\xca\x0e\x93\x8d\x8e\x78\x63\xb7\x57\xcc\x4c\xf2\x65\x1b\x2a\x62\x34\x09\x2e\xc5\xa9\xbe\x9a\xc8\xea\xcd\xb0\x99\x9e\x1a\xe0\xbd\xad\x53"
		"\xb8\xd4\xf1\x3e\xe0\xa0\x90\x6d\x50\x57\xbf\x97\x0d\x10\x3c\x03\x93\xfa\x9b\xfc\x5a\x71\xbf\x30\xff\x41\x81\x45\x70\xd2\x94\xc7\x86\xfd\xaf\x15\x53\xe0\x6f\x89\x88\xf7\x21\xf8\x8b\x0d\xfc\xc9\xef\x9b\x05\x7f\xfa\xcc\x24\x32\x53\xfc\x40\x55\x9e\xdb\x70\x07\x97\xc4\x2b\x94\xb9\x36\xec\x6b\x09\x8c\xff\x94\x2e\xfe\xc4\xde\x71\xe1\x53\x96\x1b\xe5\x3e\x13\x78\x9f\x2a\xb9\x36\x4c\x35\xd9\x6c\x75\x1b\x17\x83\xd8\x7b\x97\x6a\xc2\x78\x4f\xa9\x29\x0f\x05\xf6\xaa\x16\xb7\x46\x6e\x04\xcc\xec\xae\xb5\xb9\x8f\x90\x78\xba"
		"\xf9\xb0\xaf\xe0\x91\x8d\x62\xa8\xb0\x72\x80\x8f\xfc\x07\x5d\x81\x5e\xbd\x6d\x6a\x29\x9c\xd9\x97\x8f\x2d\x30\x5b\x8c\x1f\xc8\x0a\x05\xe4\x41\xcd\x60\x07\x4c\x60\xa7\x8e\x69\xca\x39\x0a\x85\x38\x81\x3e\xb8\x9c\xca\xa0\xc1\x9d\x2e\xf2\xd4\xa9\x4d\x90\xc5\x09\x77\x79\x93\x06\x1c\xd3\xbe\x0a\x4c\x85\xc6\xa9\x66\x38\xa9\x21\xf4\x92\x84\x91\x50\x8b\x0b\xd1\xf9\x49\x96\x5b\xf4\xdf\x10\xc3\x73\xe1\x7d\x27\x91\x73\xd2\x2e\xb3\x51\x77\x5c\x17\x7b\x2d\xe7\x7e\x60\x40\x3f\xb2\x4c\xb8\x90\x3e\xdd\x1d\xc3\xef\x15\x1c\x35"
		"\x49\x8e\x81\xd1\x10\xd7\xc0\x32\x53\x63\xa6\xaf\x82\x40\x4b\xba\x0e\x5f\x47\xf8\xf6\x54\x5c\xe7\xe9\x51\xe2\xd6\x8c\xfb\xbd\x72\xd6\x73\x9d\x97\x9c\x86\x94\x08\xb3\xf8\x47\x53\xff\x82\xbd\x88\xe5\x1d\x65\x6f\xd0\x2b\xa3\x03\x90\x63\x25\xdb\x61\xe2\x62\x64\x65\x98\x30\x2f\x92\x00\xe3\x7b\x54\x6a\x1a\xec\xad\xd1\xea\x96\xbd\x14\x4c\xd3\x5f\x35\xcd\x5d\xdb\x35\x73\xb3\x8c\x72\x09\xd2\xda\x4a\x29\x81\x95\xcc\x52\x89\x31\xb8\x46\x00\x62\x11\x95\x4c\xaf\x86\xfa\xd3\x29\x58\x2e\xf5\x68\x7b\x8f\x21\x86\x90\x22\x93"
		"\x42\x08\xf1\xff\x2b\x82\xa6\xe3\x61\x87\xd8\x10\x11\xcd\x11\x03\x65\xed\x9a\x2f\x67\xbe\x2a\x18\x25\x02\xf9\x0d\xac\x66\x92\x56\x98\x04\xa4\x91\x1d\x69\x71\xe7\xcd\x73\x51\x0a\x5f\x09\x0c\x18\x8f\x19\xdb\xae\xe3\x73\xa1\xb5\xbf\x93\x82\xab\xa0\x59\x8d\x19\xf1\x91\xc0\x7f\x4e\xea\xc1\xf9\xcb\x91\xf8\x81\xca\xca\x36\x24\x05\xf9\xdd\x3b\x45\x9e\x57\x99\x31\x65\x28\x0d\xfa\xad\x0c\x64\xa1\x38\xc3\xb8\x8f\xa4\x7b\x30\x77\xa8\xe7\x85\x97\x35\x64\x50\x5c\xc1\xf0\x64\xad\x69\x0f\xa9\x2e\x3a\x3f\x17\xc8\x8b\x69\xce"
		"\xdf\x6d\xe0\xad\x44\xf3\x21\xff\x74\xd8\x39\x99\xe3\x8f\x12\x59\x28\x16\x7d\x7d\xe6\x65\x22\x3b\x55\x64\xba\x28\xde\xe4\xb5\x7a\x26\x16\x68\xf5\xd1\xc0\x5f\x9a\x2f\x38\x0f\x2b\x0a\xb7\x2e\xe9\xcb\xa4\x9d\xc1\x85\x88\x22\x16\x98\xea\x08\xfe\x4c\xf3\x02\x36\x1a\x73\x0a\x44\xf4\x23\x20\x71\x90\x2d\xfe\x02\xef\x19\x49\x92\x68\x15\x2b\x48\x7b\x57\x37\x1f\x65\x41\x6a\xa5\x6b\x80\x7d\x6d\xa0\xf9\x5c\x04\x43\x0a\x54\x94\x24\x82\x94\xa8\xbe\x04\xbb\xb3\x58\xfa\x7b\x45\xae\xf3\x26\x90\x40\x9d\x23\xc7\xd3\x2d\xb2\xa8"
		"\x43\x1a\x1a\xe9\x06\xfe\x28\xdc\xfa\x7c\x30\xe9\x09\xf2\x50\x21\x0a\x4b\x66\xe4\x57\x60\xe5\x33\x34\x7c\xbd\xb2\x30\x16\x2a\x96\xe0\x79\x01\x2a\x80\x94\x6f\xc0\x96\x3e\xe8\xf4\x00\xd4\xdb\x94\x5a\x26\x46\xfb\xc8\x6c\x95\xea\xcb\x12\x24\x55\xac\x40\xfd\xd6\xa0\xc0\x40\xd9\x72\xeb\x7e\xd9\xa2\xd7\xbf\x7c\x74\x7a\x88\x40\x3c\x9b\x40\xa7\x15\x70\xb9\x82\x20\xdd\x67\x99\x2e\x6c\x62\x2a\x70\x38\xcf\x2f\x80\xcf\x97\x68\x42\x74\xa4\x21\xcf\x89\x51\xa4\x83\xc9\xe5\xc1\x62\xdb\x60\x4d\xdf\x90\x93\x25\x9d\xcf\x64\x91"
		"\x6c\xaf\x85\xa4\xb8\x01\xd7\x00\x3c\x6e\x5c\xee\xd3\xfc\xce\x78\xf3\x0c\x78\x7b\xd8\x09\xf8\x02\xa6\x94\x53\xde\x45\x9f\x64\x77\xc3\xdd\xc5\xdd\x32\x82\xda\x17\x58\xb8\x15\xb0\xd7\xbc\xdf\x14\x23\xa7\xb4\xae\x88\xa0\x84\x7b\xf5\x98\x20\x0c\x18\x06\x36\xa7\x4f\x6f\xce\x8c\xc3\x6c\x6f\xd9\x2a\x57\xfd\x5c\xc6\xb4\xcd\xba\x94\x20\xd3\x3e\x2d\x22\x00\x45\x90\x12\x99\xdd\x82\x52\x46\xcb\xde\x06\x27\xd2\x82\x1c\x63\x98\x33\x22\x87\x5e\x2d\xf5\x1b\x22\x65\x26\xba\x86\x78\x11\xef\x79\xb0\x81\x85\xd5\x52\x74\xc4\x6e"
		"\xf8\x2d\x1b\xce\x0d\xe4\x37\xfa\x2f\xb3\x7a\x60\xac\x47\x46\x52\xdb\xb3\xee\x74\x46\x47\x5f\x47\xab\xa7\x68\x52\x14\xe6\xd8\xc8\xda\x75\x1f\x52\xf8\x09\x43\x9d\x64\x1a\x3a\x1f\x83\xb8\xc4\x79\x06\x35\x8a\xc5\xf2\x59\x97\x11\xc7\x2a\x9f\x5b\x18\x6f\x67\xff\x4f\xa2\x4d\x99\x52\x7f\xaa\x86\xf4\x6d\xdb\x9f\x17\x0c\x84\x29\x47\xbc\x5f\xaf\xc1\xad\xa8\x43\x57\x8a\x03\xb3\x23\x8a\xc4\x4f\x6f\x2c\x47\xd9\xa1\xd8\x3a\x07\xbb\xfa\x40\xdc\xa9\xed\xe1\x15\x37\x2a\xaf\x5f\x8f\xe8\x4c\x8a\xb5\x8a\x17\xf2\x41\x6a\x4e\x3e"
		"\x0e\xab\xb3\x38\xa0\xb2\xaf\x37\x7a\x31\x75\x5d\x2a\x00\x06\x8f\xb3\x24\x2a\xb6\x62\xd8\xfd\x97\x74\x64\x5f\xc2\x68\x54\x5e\x4a\x02\x8a\x47\x84\x31\x58\xcf\x37\x88\x36\xf2\x36\xb4\x40\x00\x75\xb2\x0a\x36\xd8\x95\x97\xf8\xdd\x50\xfd\xbb\xed\xd8\xad\x5c\xc3\xdb\xe8\x0b\x7a\xa6\xc9\x8b\x43\xde\x8d\x2e\x52\x1e\x30\x12\xef\xb3\x5b\x20\xdf\x94\x78\x2e\x00\x89\x67\x2f\x9a\x3c\x55\xf6\xcf\x41\x1b\x9f\xba\xb9\xa9\x57\x56\x1b\xaf\xa9\x35\xbc\x6f\x7e\x0f\x4e\xdd\x88\xea\xdc\x5b\x74\x50\x71\xa6\x56\x38\xed\xdd\xec\x73"
		"\x3d\x8f\x8f\x35\x6c\xc9\x53\x93\x4c\xe5\x94\x85\x5b\x86\xb9\x87\xed\xf8\x86\x7a\xa7\x84\xdc\xb3\x95\x1d\xbd\x69\xd1\xbd\x85\xfd\x20\x94\x78\x91\x2e\xc7\x8b\x6d\xe6\x7d\xc3\x64\x05\x93\x3e\x01\x44\xcf\xc2\x95\x15\x0f\x9a\xd7\xdc\xdd\x3d\x36\x55\x0c\xd3\xe2\xee\x50\x7d\x6b\xaa\x66\xf7\x93\x61\xa0\x95\x3c\xea\x06\x5b\x65\x7d\xa8\x91\x9c\x99\x17\xa1\xf5\x40\x14\x3e\xe0\x43\xe3\xbe\xf4\x3f\x4f\x2e\x1a\x2f\xec\xd6\xd3\xa4\x8b\xa1\xa7\xb0\x69\xae\xc7\xe5\x4a\x22\x5b\x79\x06\xb6\x3a\x4b\x43\x46\xcf\xfd\x9a\x51\x1b"
		"\x4d\xfa\x5f\x9b\x5b\x09\x6d\x9a\x32\x63\xeb\xbd\x2d\xf5\x3a\x25\xf9\x26\x4e\x01\x11\xff\x1f\x46\x4b\xbc\x86\x33\x7d\x8a\xae\xbb\xe1\xaa\x1f\x18\x7d\x98\x68\x6d\x30\x7e\x18\x99\x45\xdc\x63\x26\x94\xb8\x96\x21\x8c\xe1\x91\xac\x51\x63\xeb\xff\xc9\x3a\x0c\x2f\xfb\x69\x3c\xe7\x24\xfe\x13\x23\x10\x62\xff\xe2\xdc\x77\xdf\x77\x76\x5b\x66\x2f\x9f\x7d\xf2\x96\xd3\x46\x28\x34\xb1\xa9\x23\x80\x00\x96\xdb\xce\xee\x9e\x09\x91\x99\xb1\x2f\xc3\x1f\xd3\xb6\x13\xdc\xed\x4a\xf9\x6e\x3e\x5d\x6f\x95\xde\x8c\x82\x90\x76\xf6\xe3"
		"\xb7\x6a\x5d\x9f\x81\x2b\x3b\x9f\x6d\x04\x61\xf5\xd6\x5b\xde\xe8\x92\xcd\x12\xf6\x82\x02\x6a\x50\x53\x11\x51\x10\x14\x94\xd0\x07\x64\xe5\xd5\xb2\x5e\x6f\x3c\x35\x18\xdc\x9d\x30\xf5\x93\xfa\x66\x05\x08\x64\xbc\xd2\x4d\x35\x78\x9e\x03\x03\xa4\x03\x3b\x65\x4f\xb8\x0f\xa2\x11\x1e\xb5\xca\x39\x44\xfa\xdb\x2c\xbe\xd9\xe8\x14\x7e\xfa\xce\x8c\x3a\xd3\x58\x11\x4c\x0c\x48\x8d\xa3\x48\x57\xb5\x11\xbe\x1a\xb6\x24\x6c\x6f\x4f\xc4\xe8\xc1\x26\xf1\x34\x22\x10\xc6\x8b\x4b\x22\xc7\x03\xbc\x07\x89\x70\xd7\xe5\x53\x75\xd4\x03"
		"\x6c\x6a\xcc\xa5\x30\xc7\x13\x1b\x49\x75\xfd\x86\xdc\x75\x95\xc6\x98\x84\xb9\x1f\x81\x71\x09\x8a\x62\x4a\x11\xe1\x82\xef\x42\x94\x7e\xeb\x1c\xaa\xa4\x3d\xde\x94\xf5\x11\xdc\x75\xf0\x7b\xa8\x8c\xd4\x71\x3b\x5b\x98\xdd\xd4\xa2\xc7\xdd\x5c\xb0\x8e\xdd\x97\x76\x4c\x9e\xd0\xbf\x69\x94\xa2\x56\xfc\x08\xad\x6c\xe6\xfd\x63\x2b\x56\x26\x11\x65\xc2\x72\x20\xc2\x6f\x44\x14\x4b\xb2\x01\xd2\x14\x03\xdd\xf0\x49\xde\xd6\x76\x65\xaf\x07\x6e\x56\xce\x90\xa1\x1a\xf2\xa5\x00\x63\xef\x4c\x0e\x55\x0a\x0d\xbd\x7c\x86\xf0\xe9\xf9"
		"\xb5\xb0\x5a\x22\x4d\x57\x2c\x46\x89\xd1\x9d\x4a\xee\x7c\xa2\x9b\x25\x4d\x03\x6d\x32\xc2\x13\xe7\xbf\x98\x89\xed\xe5\x0e\xb0\xec\x46\x82\xf6\x69\xf8\x65\x50\x06\xfe\x48\x37\xaf\x4d\x63\x64\x7e\xb1\x97\xd2\xd3\x55\x98\xba\x0d\xe1\xa6\x33\x82\xf1\x0c\xf0\xe0\xe7\x24\x54\xb4\x24\x08\x7b\xf7\x9a\x22\x5f\x57\xae\xff\xca\xb7\x77\x59\x3e\x90\x2e\xd9\xc2\xc8\x20\x2f\xfe\x07\x70\x92\x2f\xf9\x6a\x7b\x81\xe5\x1d\x34\xe0\xf0\xdb\xe5\xc1\x44\x6f\xb8\xa8\x3f\x1f\x3d\x6c\x6a\x54\x47\x51\x6a\x89\x94\xe8\x7e\xa5\x9a\x3f\x3a"
		"\xf1\x1d\xaa\x89\x2b\xd6\x65\xfe\xa1\x5c\xeb\x04\xa8\xfe\xfc\x52\xf5\x3a\x19\x70\xdd\xea\xc1\xd0\xc8\xac\x81\xf6\x23\x9a\xc2\x8c\x25\x8c\x78\x25\x8e\x19\xf4\x0e\x05\xe4\xad\x35\x5a\x9c\x60\x3a\x59\x52\x8c\xbe\x7a\x86\x4f\x6d\x71\x3a\x3f\x82\x9a\x43\x5e\xba\x72\x93\x69\x83\x6c\x38\x75\x60\x43\x08\x56\xe1\x52\x92\xd8\x6c\x74\x1d\xeb\x4e\xe6\x79\x62\x01\x21\xaa\x0b\x40\x6f\x6e\xa8\xe9\x86\x11\x0c\x18\x4f\x25\x35\xab\x62\xbd\x9d\x32\xd0\x08\xe3\xe3\x60\x19\x4a\xd3\xe9\xa2\xd8\x1b\xb4\xf8\xd9\xe1\x0e\xe1\x0b\x9a"
		"\x0a\x58\x43\x31\x2b\x75\x42\x38\xf2\x79\x64\x8e\xe1\xcb\x2e\x51\x05\x58\xbd\x62\x69\xc8\x6a\x45\xa5\x7b\xd3\xad\x08\x95\x90\x91\x92\x2f\xe3\x1d\x5a\xda\xe9\x66\x60\xd4\xe5\x8a\x36\x34\x86\x5a\xd7\x09\x08\x7a\xcf\xc3\x91\xe8\x9c\x91\x77\xa5\x96\xa8\x90\x66\x58\xcc\x87\x1d\x32\x53\x4f\x8c\x9b\x83\xb5\x58\x5a\x3b\x60\x7e\xe8\xa9\x97\x8a\xdc\x80\x72\x1a\xd6\x6f\x79\xa3\x00\x22\x52\x85\x98\xc2\xbc\x58\x17\x06\x75\x46\x79\xf8\x40\xba\xf9\xfd\xb9\x00\x77\x2f\xbf\x9e\x7c\x17\x23\x0a\xc7\x90\x12\xc6\x1e\x04\x74\x1b"
		"\xfd\xf1\x20\x98\x48\x7c\xda\xab\x8a\x27\x8c\x96\x9e\xe8\x6f\x75\xea\x27\xde\x7a\x8f\x07\x30\xbf\x55\x88\x30\x7c\x84\x58\x26\x48\x9c\x7e\x4f\x37\xcf\xae\xb1\x1e\x30\xbe\x45\xf8\xb2\xba\x9f\xfe\xb2\xcb\xdd\x9d\xec\x8f\x88\x7b\x07\xe9\x8b\x71\x6f\x5f\xd6\x0b\x27\x53\x0c\x0d\xba\xef\xdf\xc4\x5c\x70\xbb\x77\x2d\xb0\x3d\xfb\x15\x98\x99\x64\xd3\x78\xe4\xec\x29\x26\x54\x34\xb2\x8d\x35\x0b\xcc\x19\x48\x38\xc1\x9b\x01\x3a\x0b\x61\xf7\x65\x06\xf1\x47\xa0\x6c\x59\xc5\x86\x9a\x0f\xd5\xfe\x16\x48\x13\x26\x75\xf8\xbc\x0e"
		"\x42\x7a\xf8\x03\x04\xb6\x77\xb7\x52\x53\xdc\xe0\x56\x62\x06\x46\xdc\xa9\x82\xdf\x6f\xd4\x94\xfc\x32\x5f\xdf\x80\x2c\xf8\x60\x2f\x07\x88\x8a\x08\x84\x50\x3a\x71\xc2\xf3\xde\x4d\x29\xb5\x8f\xad\x96\x2b\x11\xc0\xe6\xc8\x33\xd1\x49\x7d\x65\x1c\xd2\x4a\xac\x19\x79\x72\x7b\x04\xca\xd1\x04\xb3\xdf\x70\x2e\x31\xd1\x41\x2c\x94\x74\x01\xa3\x9a\x22\x39\x84\xdb\x12\x91\x64\x0f\x85\x1d\x86\xfa\x16\x3f\xf6\x7b\x40\xa9\xe2\x20\x7a\x3f\xcd\x9a\xdf\xee\x61\x08\xd1\xa1\x78\xaa\x6d\xdc\xca\x33\xea\xfe\x65\x52\x13\x84\xbe\xa8"
		"\xf9\x7e\xfc\x01\x33\xfc\xc7\x9e\xd1\x00\x4c\x03\xdb\x7c\x59\x50\x47\x77\x44\x94\xd2\x25\xa4\xdc\x47\xf5\x3a\xfa\xd0\x3a\x3c\x56\x1d\xc6\xee\x74\x5c\xf4\x6a\x3f\xd5\x57\x19\x0f\xd5\x98\xf5\xfd\xb5\x0f\x81\xb7\x2a\x27\x16\x5b\xf2\xe8\xcb\xbe\x2d\x16\xe6\xa7\xda\xb3\x61\xfc\xda\x84\x6d\x29\x32\xf5\x1a\x0b\x42\x87\xe8\x98\x0f\xf8\x7d\x01\xe2\xd7\xd1\x46\x27\x92\x29\x5b\x92\x7c\xfd\xd0\xc3\x0e\xe9\x6a\x58\x14\x6b\xbd\xa2\xdd\xc0\xa0\xfe\xe4\x92\x9d\x43\x5a\xf9\x93\x44\x14\x10\x83\xa2\x5f\xc0\x92\x4e\x61\xb3\xce"
		"\x68\x13\x81\xe4\xc7\x32\xfe\x72\x38\x4a\x42\xff\x38\xff\x83\x7d\x9f\x64\xa8\x9b\x43\x45\x27\xa0\xe8\xca\x16\x0f\xfc\x78\x5c\x28\x9b\xb2\xe3\x33\x49\x92\x4e\xd5\x8d\x27\xca\x24\x99\xb3\xa6\x15\xbb\x5b\x87\x71\x37\x8d\x05\xe0\xa5\xf3\x21\x11\xf4\x0a\x9e\x45\xcd\x37\xd0\xb9\x62\xc1\xfb\x11\xc8\xe7\xfe\xe0\x6a\x52\x0c\xc8\x35\x7e\xd9\xad\x73\xf3\x3a\xf5\xc2\x46\x90\xf8\x09\xa5\x75\xab\x4d\x3a\x22\x45\xa5\x8f\xba\xca\x06\xbe\xe7\x4b\x92\xc9\x2e\xc1\x6c\x75\x6a\xfe\xc6\x41\xc7\xcd\x47\xd7\x58\x8b\xdd\x77\x3b\xbf"
		"\xfa\xe6\x71\x2b\x88\x35\x94\xa5\xca\xef\x26\x2b\x0c\xa1\xd5\x46\x31\x28\x59\x4a\x74\x51\x92\xce\xc3\xe3\x7c\xbb\x37\xb7\x4e\x3a\x37\x15\x33\x40\x6e\xbc\x66\x32\x5e\xd5\x42\xce\x36\x5c\x32\xb1\x19\x95\x53\x87\x0a\xae\x51\x25\x45\xbb\x0d\x73\x72\x03\xf4\x16\x0b\x1b\x65\xdd\xd4\x7a\x5a\x9f\x88\xdc\x6a\x90\x84\x84\x70\x9d\xee\xa9\xb8\x91\x93\xec\x1b\xa7\x51\x23\xb9\x82\xc2\x3f\xa2\xb3\xea\x13\x97\x16\x2d\xf0\xc3\x0f\xf3\x7d\x81\xf5\x77\x5f\xc1\x4c\x29\x60\x1d\x90\xa4\x03\xa2\xea\xf0\x9e\x37\x2f\x90\xe2\x54\xd3"
		"\xb5\x13\x8f\x11\x8a\x2f\x9d\x28\x00\xb2\xde\x9e\xc2\xb5\xb1\xaa\xeb\xfe\x8a\x5a\x9b\x2d\xeb\x1a\x3e\x6d\x92\x7a\xc0\x1a\xf3\x06\x38\x67\x8f\xbb\xbf\x8f\x53\xa6\x5e\x8d\xad\xde\xd7\xfa\x3f\x95\xd8\xde\xa9\x0c\x5a\xa2\xb7\x8f\xe9\x6c\x8a\x4b\xa1\x9b\x98\x6d\x48\xa5\x94\x39\x97\x52\x35\x86\x9f\x73\x00\x18\xf0\x40\x8c\x75\x51\x6f\x8f\xb6\x64\xbb\x19\xce\x38\xaf\x7c\x88\xda\xf5\x68\xd3\xde\xdc\xa6\xdd\x94\xd6\x70\x43\x95\xf2\xf9\xdf\xf0\x86\xd8\x82\x69\x15\x9f\xa2\x1a\xc1\xac\xd9\x48\xf3\x3f\xff\xea\x2a\x27\x27"
		"\x77\x02\xf8\xd1\x37\xb3\xf2\xb1\x41\xf3\x44\x57\xb9\x9e\xe9\x03\xd3\x05\xbb\x8a\xe4\xf8\xfe\xd1\xe1\x62\x5f\xe5\xb7\xa9\x73\x1d\xb4\x88\xc1\x49\x25\x01\x16\x03\xe8\xbe\xb0\x94\xd4\xca\xdf\x80\x5d\xa3\x79\xc6\xbe\x5d\x07\x90\x71\xb9\x74\x11\x87\x55\x09\x0d\x3f\xe7\xcb\xf6\x5f\xe0\x73\x8e\x75\x57\xdf\x64\xbd\xc1\x23\x18\xa6\x46\x67\x55\x80\x90\xab\x5c\x8a\xaf\x03\x7d\xfc\xb4\x4e\x4a\xd8\x23\xc6\x40\x0b\x08\xce\x5a\xc4\x62\x13\x74\x23\xa7\x3d\x0d\x8f\xd4\xd6\x08\x22\x83\xdc\x62\x71\x27\x42\x7d\xc0\x2e\x15\x9a"
		"\xac\x65\xe6\xa3\xb2\x80\xa6\x70\xa7\x92\x50\xc2\xcc\xcc\x4b\xc2\x28\xe6\xc7\x2a\x5c\xdb\xf5\x90\x25\xb3\xad\xd6\x03\x8b\x1f\x63\x9e\x9b\x11\x7b\x5a\xe8\x4c\xf5\x11\x01\xa7\x98\x5c\x19\xae\x72\xe5\x7c\x55\x9c\x57\x4a\x1c\x2a\x22\x03\xd9\x88\xfc\x8f\x72\x3a\x2e\x27\x47\xcb\xc6\xae\x80\x29\xe8\xf1\x4f\xc0\xe4\x50\x16\xd4\x67\x32\x0b\xbe\xbd\x25\x7a\x1f\x69\xd9\x82\x28\xfc\x78\x53\xba\xbc\x34\x41\x7b\x14\xf0\xd9\x5d\x9f\x0f\xd7\x33\x2b\xa3\x4b\x77\x9b\x77\xd2\xad\x42\x52\x47\x94\x06\xe4\x22\x8e\x0b\x48\x18\x13"
		"\xb4\x0d\x30\xd7\x2f\x53\x32\xb0\x27\xe9\x34\xb7\x25\xc2\x6c\x01\x1a\x73\x37\x45\x13\xc4\x43\x8d\x3e\x36\x0c\xdf\xee\x76\x0e\x31\xb5\x42\xcd\xd5\xfd\x82\xc8\x71\x99\x1d\xb6\x96\x03\xa5\xd3\xe5\xa9\x9e\xd4\x81\x1d\xa1\x68\xb9\xb8\xa4\xd6\x88\x99\x3e\x22\x7a\x21\x65\xa0\x63\x30\x50\xff\x83\x29\xb2\x91\x9a\xbe\x4b\xfb\xba\xa7\x56\x4f\x80\x96\x58\x61\x03\xb5\xb8\x69\xd0\xc6\x37\xb4\xf4\x91\x38\x8a\x1f\xe1\x83\xbd\xd9\x16\x10\xe0\x11\x02\x7a\x7c\xd2\x38\xc6\x2b\x36\x8d\xe2\x76\x0f\x13\x40\xad\x04\xe3\xea\x59\xe7"
		"\xa6\x24\xb4\x1d\xf2\x78\xd5\x57\x3f\x4b\x93\xf3\x7b\x18\xd6\x26\x3a\xec\x1a\xd8\x7f\xa0\xff\x91\xc2\x61\xda\xf3\x8b\x33\xdb\x83\xc8\xc9\x65\x06\x8a\x0a\xaa\xa1\x44\x48\xd1\x49\xc0\x5e\xf7\x2b\xdd\x74\x63\xb7\x84\xcb\xa9\xbf\x74\x98\x68\x02\xbf\xd6\x2f\xbf\xa9\x90\x46\xcb\xc8\x26\xef\x0e\x7c\x92\x91\x43\xfc\x7c\xbe\xe6\xdf\xd0\xfc\x9f\xd2\xc9\x2c\x8b\x6f\x62\x94\x8c\x96\x91\xb5\x16\x8f\x0c\x0b\xf8\x45\xc6\x72\x6b\xe7\x3a\xb5\xfd\x61\x71\x21\x40\x02\x62\x4f\xe3\xb9\x8f\xee\xa4\x5c\x91\xf7\x6f\x74\xcc\x47\xa8"
		"\xd8\xad\x31\x9d\xf9\xd4\x36\xc8\x94\x49\xe6\x7d\xe6\x02\x7c\x5e\xfa\x2a\x13\x40\x4d\xa4\x44\xe0\x91\xda\x07\xbf\xc7\x29\xb1\xbf\x89\x67\x42\xfe\xc5\xd7\xdb\x7f\x9c\x9a\x4b\x28\x89\x3e\x4c\x2d\x1e\x4e\x75\x62\xf8\x82\xe1\xee\xf4\x96\x79\x63\xfa\x90\x6e\x0d\x0c\x36\x90\x1d\xe7\x98\x0a\xcf\x61\x82\xd5\xe7\x80\x75\xcc\x70\x3c\xaa\x2c\x5a\x2c\xbc\x66\x8a\x80\x06\xf9\x0a\x1b\x84\x7a\x47\x63\x9e\x6b\xfe\x01\xad\x69\xaa\x83\xed\x90\x77\x0f\xa2\x9f\x6c\xe6\x5f\xdd\x89\x22\xb5\xd1\xcc\xe9\xb8\xf1\x6a\x63\x3c\x34\x8e"
		"\xf4\xbf\xdc\x94\x3d\x46\x82\x68\x1e\xeb\xbe\xc0\xd3\x73\x58\x9e\x3d\x93\x52\xdc\xcc\x94\x62\x83\x5a\x0a\x60\xab\xe8\x46\x3a\xe5\xf8\x9d\x73\xc6\x24\x82\x59\xdd\x1e\xb1\x40\x80\x3a\xf2\x6f\xa7\x46\xa3\x92\xed\x87\x43\x94\xf3\x2c\xec\x3f\x43\xef\xbc\x50\x44\x50\x4c\x74\x34\xde\x17\x3a\xc8\x9d\xe2\xc9\x18\xa7\xa9\xfa\xff\x37\x04\x81\xd1\x6c\x18\x70\x99\xb3\x09\x0e\x8e\x63\x55\x99\xd6\x87\x77\xaf\x91\xea\x7b\xe3\x85\x4d\x5d\x0a\xfc\x28\x0b\x01\x3c\xf4\xa8\x0d\xdc\x9a\x2b\x76\x64\x16\x7d\xcf\x4c\xf6\xa7\x57\x87"
		"\x92\x5c\xe5\x7a\x93\x4d\x14\x96\x2b\x3d\xc5\xc1\x5f\x78\x4d\xe1\xf3\x6f\xcf\xb2\x50\xf1\x4b\x24\xd6\xa7\xf4\xa9\x7f\xde\x97\x5c\x61\x83\x19\x95\xf9\x91\x76\x25\xbc\xd2\xb1\x8d\x5b\x85\x28\xce\xbc\xf6\xa5\xd6\x88\xd4\x4a\x27\x68\xc0\xf9\xdf\x02\x30\xe5\x7b\x7d\x93\xb2\x9c\x18\x32\x07\x3c\x66\x38\x2f\x8e\x53\x1b\xaa\xf0\xda\x6b\xd8\x3f\xbe\xdc\x17\x24\x21\x54\x14\x48\x6b\x55\x6d\xcc\x3d\x7a\x40\xf8\x37\xef\x30\x9b\xf2\x2d\x5e\xf9\xa3\x41\x98\x0a\x4b\x67\xb0\x6b\x12\x04\xe3\x88\x35\xa7\xde\xae\x27\xc0\xa2\xeb"
		"\x28\xb3\xdb\x76\x0d\x96\x84\x3c\x11\x95\xe9\x49\x21\x23\x71\xb5\xb4\x56\x87\xe0\x29\x56\xfb\x64\x83\xbd\xcb\x39\xac\x5f\xd8\x0f\xee\xa2\x09\x96\x98\x77\x29\xc7\x4e\x1a\x09\x0b\x83\xb2\x47\xf3\x91\x5a\xa4\x3a\xd2\xe1\x5e\x01\x85\xdc\xe1\x45\xc1\x92\x6f\xe1\x7b\xdb\xa6\x4f\x51\x33\xc2\xb3\x19\x90\x1b\x69\xf4\xe5\x59\x77\x57\x4d\x0a\xc0\x64\x45\x38\x0d\x86\x28\x7d\xa0\xc5\x2c\x0c\x9d\x57\xb4\xf6\xa0\x27\xa1\x91\x7b\x9d\xab\xae\x27\xf1\x4f\x1b\xe5\x13\x66\x5e\x7d\x19\x51\x5c\x2f\x90\xce\xe9\x28\xa1\xe8\x5a\x63"
		"\xf3\x0e\x44\xbf\x3d\x84\x73\x99\x28\x5f\x06\x6e\x97\x41\x19\x2f\x7b\x02\x29\xb7\x1d\x71\x27\xb5\x82\x24\xf8\xfb\xc1\x7e\xe9\xcf\x93\x10\x9c\xa3\x74\x11\x5b\xb5\xfe\x8d\x2d\xd8\xf2\xab\x72\xd8\xfd\x0b\x52\xf6\xfe\x96\x06\x5c\xea\x3c\x59\x81\xa2\xa2\x78\xf0\xfd\xc5\x9a\x9c\xf2\x4b\xb9\xe2\xc0\x41\x4b\xa3\x4f\x46\xba\x30\xea\xfd\x52\x27\x69\x70\x1b\xdd\x12\x58\x8f\x6e\x5f\x17\x99\x0f\x99\x96\x28\xb6\x6e\xcf\x29\x1a\x11\x1b\x94\x62\x9f\x81\xd9\xa6\xd9\x33\xa4\xea\x17\x02\xb3\x7f\xb0\x8d\x71\xcc\xca\xf6\x15\xf6"
		"\xe7\xa5\x44\xf2\xb4\x0a\x4f\x2b\x84\xa2\x77\x0f\x3c\x0c\x75\xf7\x53\xbc\x39\xe2\xb4\x3b\xd2\xc0\xc1\xb7\x94\xf3\x56\xf5\xdb\xf6\x71\x58\xe6\x39\xe7\x11\x19\xfb\x25\x51\x91\x89\x6b\x82\x1a\x5e\xf0\x89\xae\xf7\x3f\xf5\x6b\x7c\x44\x00\xdb\x9d\x5b\x92\xee\x5e\x60\xc4\x2a\xd2\xa5\x52\xa7\xbe\x84\x5d\xa7\x38\x2d\x6a\xa3\xd4\x2b\x17\xbf\xcc\x9d\x1a\xd2\x37\x07\xb7\x91\x4e\xbf\x88\x8b\x8b\x77\x09\x4c\x60\x2a\xf5\x47\x35\x1c\xa9\x1a\x5b\x15\xbd\xaf\xa5\x70\xc8\xab\x5e\xec\xd6\xf2\x73\xfe\x25\x69\x5d\x2e\x69\xb6\x7c"
		"\x6a\x5b\x3e\x18\x3e\xc7\x2f\x9f\x2b\xaa\xa0\x34\xa8\xe7\xcd\x52\x03\x97\xfd\x44\xcb\x60\x2a\xa6\xa7\x40\xfa\x12\x3d\x6c\x51\x4b\x22\x41\x6a\xac\xfb\xa2\xe6\xe1\x2b\xf0\xb7\x74\x0d\xdc\xae\x58\xff\x22\x1d\xdb\x00\x0f\x78\x2b\xc8\x0b\xa0\x17\xdb\x13\xef\x9c\xc2\x15\x0b\xce\x57\x68\xa2\x2a\xc9\x0b\x06\x48\xf9\x98\x30\x0b\x5c\x9f\xb6\xa0\xfc\x2e\x28\x09\x6c\x51\xa8\x2f\xba\x98\xb3\x56\xea\xf1\xe3\x99\x53\x63\x52\xdd\x8d\x2b\xa9\x43\x4e\xab\xcb\x36\x71\x76\x17\xb1\x47\xbe\x4c\xdc\x65\x46\x25\x90\x81\x3e\x15\xb6"
		"\x8b\xa2\xe1\x02\x66\xe1\xdf\x5b\xae\xe4\x51\x96\x6b\xbc\xd8\x7d\xae\x63\xb7\xef\xe3\x02\x9c\xe6\x4e\x7d\xbf\xde\x0c\xc0\x2c\xc5\xef\xb3\x29\xf0\x46\x12\xab\x9d\x8f\x18\xcd\x8d\xe0\x4c\xf9\x5a\x1c\x81\xc9\xb2\x8c\x28\x8e\x1a\x86\xec\x05\xaa\x18\x47\x79\x13\x8a\x3b\x81\x82\x99\x19\x67\x7a\x9c\x3a\x74\x44\x7f\x49\x82\xac\xd3\xb9\x55\xaa\x09\x39\x6b\xc9\xc4\x6b\x18\x53\x23\xd4\x68\x12\x40\xb0\x6d\xc3\xd2\x46\xe7\x89\x9e\x8b\xcf\x1d\x9e\x63\x92\x7d\x43\xfe\xa3\x3b\xcc\x43\xf1\xa6\x27\x11\xa1\xfa\xe3\x79\xcd\xfc"
		"\x96\x83\x5d\x48\xc3\xfb\x69\xfd\x21\x43\xe6\xe5\xeb\x9c\xd0\xc7\xc4\x94\x18\xd7\xd3\xef\x56\x03\xb5\xa4\x73\x26\x67\xe1\x18\x83\x6c\xb5\x6d\xfc\x15\x97\x37\x7c\x0b\x2d\x41\x44\x63\x4b\x66\xb8\x9e\x2d\x41\x31\x4c\xff\x6f\x55\x60\xad\xb7\xf8\xee\xdb\xbb\x9e\xcf\x39\x8e\x15\x25\x03\xa7\xf9\xf9\x46\x46\x44\x5a\x6e\x29\xd4\x37\xe5\xe7\x6f\xca\x50\xaa\xba\x48\x88\xdf\x6d\x50\x44\x46\xda\x69\xee\x1d\xbf\x61\x62\x6a\xfa\xef\x53\x0a\x75\x95\x3b\xfc\x93\xb8\x35\x94\x59\xdd\x0c\xa2\xbf\x67\x5b\xbb\x37\x32\x30\x20\xf6"
		"\xf9\xd8\x41\xf7\xe7\x4d\x2c\xbe\x0e\x2f\xd7\xe5\xa2\x36\x79\x1f\x5a\xa9\xef\xc2\x59\x05\x68\x48\x2a\x0e\xf3\xa2\x95\x1d\xcf\x05\x8a\x34\x05\x84\xc4\x4d\x2f\x7d\xfc\x39\x53\x51\x65\xc9\x7c\x5b\x11\x34\x68\x23\x6c\x5b\x84\xac\x1a\x1d\x21\xc3\x93\x19\xde\x5e\x05\x01\x22\x02\x84\x08\xe7\x25\xe3\x7f\x91\x9c\x6c\x7b\x85\x04\x58\xe7\x18\x2a\xc0\xc6\x83\x38\xab\xa1\x6e\x8d\xca\x63\x81\x9c\x80\x3e\x7d\x13\x94\x3d\xc1\x84\x62\x38\xc6\x96\xfe\x02\xc1\xd6\x0b\x08\x64\x65\xcf\xfe\xd0\x28\xa6\xc1\x06\x9b\xc5\xe1\xf9\xfe"
		"\xc6\xe1\x99\xe0\xbc\x4a\xb8\x3b\x45\xd7\x6d\x0e\xa0\x2e\x4d\x31\x79\x12\x7d\x38\x45\x3e\xf3\xe7\x78\x0d\x44\x71\x0e\x8b\xf1\x7b\x01\xa5\x2c\x2c\xe4\x9e\xab\x88\x81\x26\x3e\x68\x41\xdf\x18\xc5\xb9\xf9\xae\x57\xb1\xaa\x0e\x41\xa0\xd2\x56\x53\xe9\x63\xfb\xdb\x8e\x28\xc5\xd6\xad\xe4\x44\xa8\xbf\x09\x60\x10\xd2\xb2\x9a\x36\x1c\xd8\x0a\x73\x72\x9d\xf0\x16\xe2\x94\x97\x0a\x34\x79\x64\xb8\x52\x2f\x51\xc1\x62\x8d\x08\xef\x97\x5e\x09\x7d\x4a\x0d\xed\xf0\xfe\x6e\x4c\xaf\xee\x50\x06\xd7\xd4\x87\x55\xd7\x59\xe9\xca\x93"
		"\x84\x6f\x0a\x09\xbb\xa5\xc7\xdf\x28\x17\xed\xe6\x66\x64\x40\x1c\xa4\xfc\x3a\x22\x1f\x4f\x43\x77\xb5\x62\x86\x26\x84\x4e\x29\x5a\x70\x37\xab\x9a\x4b\xd7\x3f\xaf\x9e\x21\x92\xdd\xb7\x10\xb7\x54\xad\x28\xe2\xd5\xe0\x45\x36\xab\xfe\xeb\xaf\x39\x1d\x48\xe9\xa1\x71\x34\xda\x63\x91\x78\xb3\x83\x6b\x89\xe1\x7f\xa9\xec\xe1\xdc\x7f\xb3\x36\x4b\x0b\x72\xbe\xfa\xa6\xed\xaa\xa7\xf9\x76\xf6\x50\xed\x3f\x37\x84\xd3\xb5\x29\x4f\xa2\x43\xc9\x87\x5b\x1d\xe0\x4b\xfb\x8e\x95\x11\x5d\xa5\x54\x33\x02\xc6\x77\xb8\xf2\xde\x6c\xd2"
		"\xb8\xe4\x44\x14\x5d\xb8\x01\xc1\x2c\xf2\x9c\x22\xa9\x61\x16\x92\x7e\x83\x1b\xad\x7f\x1e\x8b\x8b\xa8\x0a\xe2\x22\x44\x2e\xe6\x74\x69\xe0\xfb\xcd\xb6\x5f\xd7\x9e\x8d\x7a\x63\x14\x16\x03\xd7\x6a\xb1\x16\xd4\x73\xbc\xba\xfd\xb1\xd2\xf1\x67\x7c\x3c\x48\x94\x91\x03\xef\x05\x82\x18\x01\x36\x02\x45\x2c\xb0\x73\x82\x20\x3f\xc2\x6a\xb3\x2d\x8d\xe1\x55\xbd\x74\x53\xf5\xea\x6e\xbf\x74\x67\xde\x27\x79\x3e\xae\x18\x76\xdb\x58\x4c\x49\x71\x67\xb9\x05\x33\xd7\x54\x9a\x29\xc3\x71\xf8\x73\x79\x50\x62\x08\x4f\xa1\x9f\x80\xd4"
		"\x00\x46\xde\x63\x3b\xb9\x16\xb0\x02\x9b\x25\x9a\x6b\xf3\xc0\x0b\xbf\x75\x89\xf5\xee\xa1\x02\x1e\x4a\x2e\xa5\x32\x6f\x10\x78\x98\xa4\xbd\xcd\xd1\x83\xa0\xa4\x02\x25\x62\xf9\x46\x6a\x89\xdd\x61\x73\xb8\x61\x96\x24\x48\x15\x2e\x9e\xa8\xa4\x1d\xaa\x3d\x24\x30\xfd\x54\x37\x3e\xd8\x65\x26\xe4\x26\x4d\xa6\xe5\xcc\xe7\x47\xa1\x81\xb3\xd1\xa5\x82\x3e\x97\x97\x81\x31\x01\x9f\xb3\xe9\x15\xcd\x11\x1f\xd1\x7c\xd7\x64\x38\x16\x1d\x3b\x14\xcc\xd0\x2a\xd3\xb3\x0d\xe2\xff\x5c\x63\x23\xed\x39\x37\x8a\x2d\x71\xe0\x7d\x31\x92"
		"\x25\xc2\xbd\x39\x15\x9a\x5e\x23\x72\x07\x51\x19\x4b\x17\xd3\x7f\xd3\xb8\x73\xb7\x28\x66\x90\x76\x35\x3c\x71\xc2\xe7\x4c\x03\x46\x00\xac\x2e\x07\x57\x96\x03\x1a\x83\x6d\x75\xdb\x84\x45\x25\xe0\x75\x17\xae\xc0\x80\xc0\x37\xc6\x83\x7a\x8b\x48\x27\x95\x50\x67\xe9\x34\x2e\xec\x9b\x31\x76\x9e\x59\x48\x14\x29\xeb\x43\xa1\xd2\x1a\x53\xff\xaa\x03\x19\xf8\xe3\xe2\x2e\xbd\xd0\xaa\x72\x5c\x36\x7a\x7f\xdb\xbf\xd4\x39\x12\x25\x2a\x9e\xc6\x39\x71\x6d\xb2\xdf\x33\xa6\x6e\xeb\x2b\xd2\xdd\x56\xc8\x82\x45\x73\xbb\x9a\x47\x26"
		"\xe7\x72\xb1\x39\x09\x94\x2d\x4f\x41\xbb\x4d\x76\x70\xc2\xc2\x0f\xec\x5a\x3f\xbc\x4a\xf2\x4a\x35\x4f\xfc\x4c\x6a\xb5\x6f\x53\x8a\xef\xea\x60\x36\x14\x0d\x24\xd8\x5e\x84\x5b\x76\xbb\x52\x15\xa5\xec\x4f\xbe\x2a\x6f\x54\x66\xe5\x4f\xd8\xa6\xb2\xa8\x02\x7f\xb8\xd5\xcb\xd9\x25\x40\x6f\x6d\x19\x32\x86\x13\x6f\x61\x5e\xc0\x4f\xbb\xfe\xcc\x16\x3f\x4d\xa0\x8c\x24\x28\x96\x1a\x53\x3f\xa8\xdd\xa4\x17\x9b\x0e\xbf\x6f\xd3\xfb\x32\xc4\x4e\x91\xba\x49\xaf\xca\x19\xbe\x91\x0d\x06\xe8\x70\xf1\x11\x30\x9d\x46\x75\x87\xcb\x23"
		"\x67\xdf\xae\x0c\x81\x0b\x00\xec\x69\x41\xeb\xec\xbd\x13\xa0\xd4\xcb\x01\x10\x14\x9b\x4b\xa2\x83\xa1\x75\x6c\xbc\xcb\x54\x4b\x64\xf4\x02\x81\x64\xb2\x77\x31\x52\x69\x47\xc2\xc8\xb7\x45\x9f\xe3\x47\xb0\x0a\xc2\xe4\xdc\x8c\x68\x67\x63\xa0\x3b\x89\xe0\x49\x72\x8e\xd0\x3d\xf8\x30\x85\xa8\x54\xf3\x77\x19\xe3\x5e\x59\x17\x26\xc2\x5b\xc7\xa8\xee\x2f\x5b\x48\xe0\x26\xf5\xa5\xa6\x6f\x86\xfa\xa4\xab\xe6\x4f\x09\x53\xfb\x7b\x33\x89\xdc\x0a\x0f\x7e\x16\x09\x1a\xc3\x11\x48\xa8\x9c\x1a\x2e\x5c\xdc\x20\x22\x97\x3a\xee\x04"
		"\x25\x97\xd7\x6d\x4d\x01\x19\x76\xfc\x18\x67\xa6\x4b\xfa\x72\x1d\x52\x08\x9d\x99\x40\xe6\xb1\x3d\x75\x51\xd2\xd3\x5d\xed\x61\xf2\x64\xa8\x28\xb1\x06\xa7\x5d\xc9\x16\xc1\xb0\x47\x36\x04\x51\xfc\x5d\xc9\xf0\xbf\xf1\x68\x7f\xa3\x2c\x33\x9e\x40\x04\xdd\x79\x16\x32\x72\x78\xaa\x7b\xf9\x9a\xb9\x85\xfc\xc8\xe8\xf0\x97\xf9\x52\xf2\x20\x9c\x0b\xe2\xbe\x91\xfa\x4e\x0e\x78\x46\xa8\xf2\x9c\xae\x8e\x00\x3a\x51\x63\xf4\x93\x57\x92\xdb\x54\xd2\xfb\x73\x70\xe1\x6b\x2a\x54\x61\x51\xab\xf9\x3d\x3e\xbd\x6c\xda\x73\x5b\x7b\x39"
		"\x55\x03\xac\xd0\x13\x13\xb1\xe8\x22\x88\x63\x7a\xdd\x56\xc4\x7a\xe8\xbc\xde\x06\x15\xa0\x1c\xc6\x7a\x97\x5e\xd0\x5c\x2f\x6d\xb5\x2c\x00\xd7\x6d\x1e\x7a\xc3\xaf\xd0\xbb\x0b\x8e\xc6\x67\x48\x03\xcf\xec\x7d\x20\x04\x54\xfd\x33\xd0\x9c\x13\xfc\x81\x71\x3b\xff\xf2\x56\x7f\xb5\x4c\xfa\x29\x71\xfa\x13\x76\xe0\xaa\xf9\xfa\x2e\xda\x53\xbe\x8e\xe5\x81\xd3\x73\xf2\x87\x6f\xcf\xa5\x9d\x16\x33\x45\x6e\x81\xf1\x58\xc9\x96\xe0\x43\x7a\x68\xb9\x61\x38\xfa\x6b\xda\x00\xdb\xc1\x85\x79\x07\x91\xd3\xb6\x01\x66\xc8\x19\xdb\x8a"
		"\x95\x2c\x9e\x17\x51\x44\x59\xaf\x9f\xec\xda\x37\x5a\x75\x13\x63\x1c\x54\x4f\x33\x15\x49\xbb\x5c\x44\x95\xd5\x35\x3f\x4d\xce\xe7\xbf\xf1\xea\xc8\x15\x52\xc6\xb3\xfb\x29\x04\xf8\x80\x48\xda\x91\xe1\x7f\xd5\x96\xf0\x30\xdd\x5c\xc8\xe5\x05\x36\x00\xe6\x4e\x7e\xdd\xcf\xc8\x0c\x03\xf9\xc2\xb1\x01\xeb\x8f\xd2\xbd\x13\x32\x2f\xba\xe4\xa0\x0a\xba\x02\xb0\xb5\x6e\x97\x29\xe7\xe8\x8c\x00\x4c\xfd\x8b\x8a\x4b\x69\xd8\xa1\xbd\xaa\x87\x0e\x1d\x23\x9c\x40\x76\x77\x94\x86\xa8\xba\x7d\x13\x7e\x22\x54\xd7\xa7\x13\x66\x5d\x65"
		"\xe8\x44\x33\x09\xb3\xb6\x5d\xaa\xa9\xd2\x18\x9b\x2e\xd9\xff\xa8\xd7\x33\xa9\xd9\xee\x81\xcb\x96\xf6\xa4\x84\x96\x17\x5f\x7e\x5c\xc1\xca\x70\x3a\x63\x39\x48\x80\x24\xc4\x3c\x99\x35\x81\xc3\x2e\x3a\xff\xe7\x7b\x45\x31\x60\x4d\x29\x9c\xf1\xa1\xbe\x0e\x59\xc6\x31\x97\x03\x90\x03\x2d\xd7\xbf\xe1\x4b\xa2\xdf\xc6\x78\xe0\x68\xee\x91\x10\x13\xd9\x09\x95\xb3\xa0\xa4\xae\xfb\x06\x75\xff\x61\x37\xc3\x25\xfd\x16\x22\x6c\x4e\xaa\xb5\xa6\x39\x79\x40\x66\x65\x61\x20\xd4\x96\x5e\xfb\x41\x53\x84\xf1\x3d\xca\x3e\xa5\xb7\x97"
		"\x3e\x1d\xe1\xb9\xc2\xfc\x33\xd1\x00\x47\xe7\x00\xca\x1f\x46\xbe\x97\x0e\x0d\x63\xb0\xb3\x0d\x31\xf3\xa9\x53\x87\x16\xef\x93\x92\x5e\xe6\x0a\x03\x6e\x07\x4f\x62\x0a\x1c\x83\x2a\x03\x7b\xcc\x95\x27\xee\x2f\x8d\xd7\xaa\xec\xeb\xf7\x93\x4d\x73\xca\x61\x8a\xb6\xea\x1a\x1e\x90\xae\x2e\xf3\x4d\xce\xc3\x2b\x67\x2a\xe9\x67\x27\x9b\xab\xa0\x48\xd3\x7d\xd3\xc0\x97\xbc\x9e\x2f\x1f\xaa\x78\x9a\xf6\x29\x2e\xab\xea\xbc\x96\x6b\x13\x82\x52\x44\x1c\x0d\x38\x21\xbf\xbb\x31\xe0\x4d\x67\xfd\x2a\x39\x16\x16\x4d\x29\x58\x39\x91"
		"\x5d\x1a\x5f\x08\xd8\x3e\x0c\xd1\x67\x3e\x14\x39\x2c\x44\xaa\x75\xec\x0f\xe7\x89\x5e\xad\x1e\xbc\x6a\x9d\x88\xc4\xa1\xa9\x46\xf7\x84\x53\xb1\x33\x80\x53\x9d\xf9\x78\xb2\xf2\x7c\x01\x06\x91\x49\x8d\xd2\xe4\x6d\x41\x37\xe5\xc2\x21\x3e\x9e\x31\x5e\x9a\x6f\x55\x66\x6c\xe7\xfd\xfc\x50\xf5\x9c\xe3\x9b\x49\x1b\x5a\xeb\x1a\xbc\x65\x3c\xaa\x2d\x49\x91\xc2\xb2\x70\x8a\x30\x58\x6d\xf4\xc1\x0a\x65\xa0\x61\x34\xe0\x3c\x47\xb5\x54\xf4\xaf\xeb\x91\xab\x67\x1f\xb3\x9f\xb1\x25\x79\xd9\x4f\xd2\x6a\xae\x78\x84\x80\xee\xe7\x16"
		"\x36\xf4\xbd\x3c\xbf\xed\x37\xc7\x98\x0c\x9b\xa1\x8e\xad\x95\x67\x07\xd5\xe7\xe3\x2d\x95\x55\xf2\x9d\xc2\xb6\xac\xec\xbb\xe9\x60\xe0\x81\xb1\x53\x7b\x1c\x5d\x0f\x05\xa8\xb6\xba\xe2\xbe\x6e\x8f\xe2\x04\x29\x16\xe2\x07\x49\x2b\x95\x42\x4a\xea\xeb\xb3\xa6\x81\x75\x31\xc2\xde\x20\x66\xad\xff\xc7\x94\xd4\x46\x5f\x52\x35\x18\x74\x9b\x17\xcd\x80\xf4\x2d\xe4\x54\x96\x0b\x11\x2c\xa1\xdc\xf7\xe7\x9e\xbb\x9d\x39\x95\xc2\x50\x67\xbd\x6b\x43\x5b\xb9\x22\xcb\xc0\x27\x53\xc4\x53\x6d\xe6\x98\x36\x5a\x95\x89\x5a\x0e\x26\x2a"
		"\x51\x05\xdd\x41\xb8\x4d\xb0\x73\x93\xe8\x36\x4a\x6a\x3a\x16\x84\x96\x64\x11\x72\x8d\x57\xfc\x78\xb4\x71\x32\x0a\x1d\x70\xd5\x6e\xc7\x0e\x47\x94\x80\x01\x37\xa0\xf4\x92\x50\x40\xc5\x3e\xf5\x05\x26\xd0\x28\x29\x39\x2d\x0f\xf7\x71\xa0\x18\xa8\x48\x31\x07\xb6\xd5\x6c\x6a\xc6\x34\xc0\x9d\xc3\x67\xe0\xa6\x94\xf6\x30\x48\x27\x16\x3a\xe0\x63\xf8\x2b\xb8\x58\x2c\x1d\xd5\xda\x5e\xf7\x73\x23\x6c\xe0\xbd\x5a\xc8\x08\xb7\x33\x46\xa9\xa2\x2b\x76\xca\x73\x98\xdc\x87\xfe\x99\xc3\x15\xaa\x01\xbd\x28\x93\x3f\x56\x6b\x09\x15"
		"\x91\x0d\x2d\x80\xff\x25\x09\x25\x81\x47\x26\xa3\x5b\xd3\xaf\xef\x12\xc2\xda\x55\x37\xcb\x8a\xa2\x86\xca\x91\x0f\x7c\x08\xcb\xfe\xe6\xa3\x7d\xd2\x01\x35\x3c\x59\xd6\x1d\xed\xd0\x3a\xbb\xef\xc1\xa0\xde\x9c\x30\xb3\xf1\x24\xbc\x59\x17\xbe\x57\x64\xf4\xa5\x0e\xe6\x04\xcc\x6f\x65\xc3\x03\x53\xbf\xed\xf5\xd1\x4f\xbb\x87\xea\x58\x5b\x69\x25\x8d\x25\xe8\xae\x1f\x5b\x37\xf2\x06\xae\xa9\xe3\x2a\x18\xe8\x60\x69\xd4\x4d\x4f\x5d\xa0\xb4\x81\x31\xf8\x25\x51\x73\x59\xee\x38\xfa\x5e\x9d\x5f\xeb\xe7\xd2\x3c\x83\xa4\x99\x32"
		"\x11\x80\x77\x27\x3e\x02\x98\x4b\xf2\xcd\xc6\x7a\xe7\x8a\x1f\xe4\xac\xe7\x96\x7e\x0f\xcb\x3f\x17\xe4\x29\xad\xe0\x1f\xa9\x77\x90\xa0\x40\xf9\xab\xdb\x31\xf2\x95\x01\x3d\xb3\x0d\x61\xf8\xc2\xcf\x98\x48\x6b\xeb\xaf\xc6\x6d\xcd\xfe\xec\x0d\x20\x56\x46\x53\x21\xbb\x2f\x3f\x67\xf0\x95\xf6\x52\xe6\x31\x04\x92\x73\xb7\xbd\xb3\x28\xdf\x49\xaf\xe0\xbb\x2e\x2a\xfb\x7f\x2f\xae\x5f\x79\x38\xc4\xf1\x28\x0d\x08\x16\xcd\x79\xd1\xd5\xb4\xc3\xa8\x79\x2c\xe4\x08\xd6\xad\x18\x6c\x2f\xd4\xfd\x50\x9d\xd7\x68\xab\x89\x11\x95\xcf"
		"\x31\x6e\x58\x05\x9d\xa4\xc0\x08\x00\x6b\xb6\xd5\xdf\x98\x3b\xef\x61\xe5\x4e\x0a\x3b\x04\x41\x73\xbe\x70\x0c\x86\x2b\x17\x73\xf7\x06\x88\xa6\x6c\x96\x04\x24\xec\xa7\xbf\xe5\xe3\x2c\x07\x81\xc4\xe3\x80\xd2\xe7\x43\x5e\xb0\xf3\x0e\xf1\x2c\xda\x8b\xe9\x7d\xcb\x34\x54\xd7\x90\x6c\xd7\xb6\xcb\xa3\x26\x9e\x5f\x11\x35\xe1\x9c\x61\xd7\x9d\x81\xb7\x58\x6d\x8b\x67\xbe\x7d\x96\xa1\x64\xef\x57\x42\xbc\x05\xf0\x2d\x1f\xeb\xc2\x61\x23\x62\x07\x81\x0c\x72\x40\x54\x37\xb0\xe3\x92\x09\xc2\x62\x5c\x36\x3c\xc4\x1e\xa4\x02\x3d"
		"\x32\x3e\x90\xea\x99\xb2\x13\x84\x16\xb1\xaf\x23\x5a\x0a\x7c\x87\xae\xe3\x6c\xcb\x4d\xe2\xf3\xfc\xf0\xed\x99\xed\x71\x0d\xea\xd7\xc4\x22\x27\x1a\xa5\x7e\xef\xdd\x9d\x02\xb0\xaa\x36\xe4\xee\xe5\x7e\x9d\x63\x21\x61\x6b\x3e\x2d\x37\x42\xff\xb2\xc5\x41\xeb\xe7\xcd\x81\x67\x1e\x06\x87\xd9\x9d\xb1\xc0\x62\x8f\x37\xfa\x21\x97\x7c\x2c\xb6\x30\x8b\x31\xd7\x34\x94\x75\xd3\x80\x7c\x5f\x89\x23\xc1\x7a\xac\x40\x23\x13\xf0\xd1\x8f\x3f\xf8\xb7\x88\x2a\xcd\x3e\x1c\xa0\x45\xa4\x8b\x6a\x12\xb9\x2f\x27\x61\x5b\x24\x67\x71\x9b"
		"\xb6\xb4\xd6\xfe\x5f\xf8\x21\x3e\x87\xbb\x62\x38\xed\x44\x28\x20\xe2\x5d\xcb\x47\x29\xa8\x9e\xbe\x62\xa8\x55\xe7\x44\x38\xb1\xe7\xee\x3e\x21\x99\x48\xae\x76\x04\x26\xd7\x15\xb7\xa9\x9e\xb2\x28\x84\xec\x6e\xbd\x85\x7d\xd1\x08\x78\xdd\x9e\x79\x65\xc0\xe0\x25\x04\x55\x0c\x72\x95\xb9\xc4\x53\x45\xfa\x50\xde\x7c\x65\x1d\xdc\xb1\x2d\x15\x65\x56\xe2\xa5\x89\xd4\xd4\x88\xbf\xe2\xf0\xcb\x80\x68\x56\x29\xbc\x3a\xa6\x43\xb4\xbb\xcf\x59\xed\x98\x52\x03\x80\x4f\x71\x80\x46\xa8\xef\xab\x7d\x72\xa2\x8e\xdf\xd1\x3f\x1d\x9b"
		"\x98\x40\x98\x01\xc8\x06\x88\x5c\xd3\x22\xaa\x47\xf7\x7b\xc4\x4d\x0a\x9e\x8c\xc5\x5e\xf7\xed\xe0\x7c\x06\xe0\xc8\x7b\x65\xcf\x10\xe5\xb7\x29\xca\x30\xf0\x00\x0d\x48\xa2\x34\xeb\x2e\xe1\xdf\xcd\xe2\x5d\x66\xad\x45\x08\x49\x8f\x1a\x68\x20\x28\x16\x05\xe4\xcc\x55\x63\xf1\x4b\x09\x24\x66\x68\x5e\xf4\xce\x8e\xc2\xb7\x3a\x61\xdb\x6d\xa7\xd7\x26\xd9\x64\x83\x84\x0f\x06\x72\xde\xf3\xc7\x08\x45\x34\x56\x06\x52\xdb\x0e\xd8\x88\xe9\x5f\x2e\x2e\x92\xff\xeb\x2a\xb1\xd3\x16\x0d\xda\x78\xca\xf0\xa9\x19\xb4\x92\x7d\x08\xaa"
		"\xa1\x80\x06\xd2\xe7\xfa\x33\x1c\xc2\xca\xce\x59\x3c\x82\x52\xe5\x18\x80\x38\xaa\xbf\xd8\xd8\x7a\xbd\xa6\x4f\x0c\xdc\x2b\x12\xd3\x8e\xb2\x2e\x2d\x3d\xc3\x87\x80\xfe\x4d\xd2\x3e\x1d\x0f\xd4\x71\x49\xef\x17\x82\x57\xef\x32\xfa\xe0\x04\x03\xd1\xb4\x9a\x42\xaf\xb7\x60\x2b\x99\x9e\x1c\x23\xdd\x96\xb7\x4d\x62\xdf\xb9\x34\xe8\x51\x4f\xde\x54\x0a\x87\xf8\x60\x56\x5c\x10\x48\x95\x42\xd7\x6c\x82\xfa\xab\x74\x29\xdd\x31\x1b\x9d\xa7\x7d\xb5\x94\xd0\x53\xb4\xb1\xed\x82\xc1\x24\x08\x3f\x8b\xa7\xfe\x5d\x6b\xd3\x5c\x8c\xaa"
		"\x95\x6c\x91\xf6\x9f\x19\x2f\xc7\x0c\xd6\xd7\xa9\x32\x92\x6c\x22\xe2\xba\x47\x17\x04\x99\x7e\xd3\xb1\x66\xe5\xea\xee\x00\x9d\x63\x94\xa7\x15\x37\xa8\x28\xca\x72\xb7\xa9\x45\x17\x0a\x34\x39\xa9\x4f\x46\xe1\x6b\x8e\xa3\xd1\xf0\xe7\x3c\xca\xb6\x05\x79\xb5\xe8\x73\x87\x50\xdf\x63\xe4\xc3\x8a\x12\x54\xa0\x2f\x72\xdd\x6d\x5e\x3c\x75\x5f\x7d\x11\xd2\x7b\x9b\xae\xb1\xa9\x2c\x37\x97\xfa\xa1\xde\xd4\x7b\xe9\xff\xd4\x2b\x88\xe8\x7e\xd9\x11\xd2\x59\x67\xae\x19\x4d\x44\x5a\x7b\x7c\x3b\xab\xeb\x7a\x98\x4c\xb3\x2c\xed\x10"
		"\x7c\x56\x7f\x7e\x59\xcc\x56\x6e\x0a\xf8\x42\x66\x59\xf7\x6b\xae\xc0\xd3\xd1\x2f\x9c\x1d\x4a\xda\xc6\x58\xff\x57\xd6\x24\x98\xed\x2e\xd9\x56\x15\xb5\x4e\x5b\x4f\x06\xf1\x65\x60\x9c\x62\x43\x38\x7c\x6f\xb4\x44\x18\x98\xb5\x23\x5a\x1b\x9a\x98\xa7\x1e\x55\x58\xfc\x4a\x25\xf1\x13\x18\xe2\x69\x99\xd3\x7b\xac\x33\xc3\x5c\xfc\xac\x9f\xd2\x77\x33\xac\x3e\x9c\xeb\x1c\x3b\xeb\xcb\x5b\xd2\x20\x17\x41\xb1\x3e\xaa\xb8\xf7\x18\x37\xcc\x50\x28\x83\x22\xb8\x2c\x8a\x26\x6e\x77\x79\x73\x48\x66\x5a\x7e\x0b\xe6\x83\xba\x5b\xf5"
		"\x8a\x76\x15\x9b\x41\x19\xf1\xda\x98\x51\xd2\xb7\x1f\x9c\x7d\x30\xdd\x96\x7e\xb2\x11\x39\xf6\x11\x1a\xc7\xb4\x08\xbf\x95\xcb\xfc\xd0\xbf\x9c\xbf\x2a\x77\x8d\x9b\xd6\xdd\xca\xa1\x04\x6e\xfd\x85\x5c\x26\x35\xb1\x84\xc6\xfc\xad\x3e\x9f\xbc\xed\x86\x44\x47\x1c\x60\xac\xe2\x4c\x8b\x3f\x5c\x41\x00\x99\x68\x11\xed\x66\x34\x54\xfc\xfb\x68\xc2\x53\x8d\x86\x2f\x3b\xcd\x6e\x4e\x89\x31\x5e\x3f\xb5\x10\x9a\x39\x0f\x85\xbe\xec\x43\x6c\x23\x8f\x98\x20\xba\x6b\x47\xf1\xa7\x3a\x10\x5a\xae\x88\x34\x1b\xbf\x02\x35\x7d\x95\x77"
		"\x7f\xcb\x77\x3d\xa5\xb4\xeb\x48\x08\xba\xff\x17\xcf\xbb\xa6\x5b\xd6\xe4\x3f\x87\xf4\xbf\x7a\x96\x6c\xcb\x89\xd3\xca\x18\xcb\x43\x56\x64\x7b\xf1\x6e\x49\x12\xde\x5d\x42\x16\x55\x50\xed\x6b\x8e\x0b\x18\xc3\x21\x41\xa8\x29\x21\x9e\x64\x8b\x20\x2e\x8b\x8f\x1c\x7e\xc3\x3d\xc9\x35\xd8\x2e\x1a\xd5\xac\xc8\x9b\xe7\x9c\x44\x33\x3a\x10\x8f\xb5\xcb\x82\xfb\x57\x41\x21\x90\x05\x16\x0c\x19\xee\xac\xe5\xee\x7a\x09\x0d\x34\x47\x55\xd9\xbf\x6a\x6c\xc6\x3e\xec\xce\xc8\x70\x78\x31\x32\x32\xe9\xa6\x9b\x4b\x76\x9b\x58\x28\xa2"
		"\x77\xa7\x57\x4c\x53\x9d\xae\x55\xa0\x17\x0c\x8e\xdd\x62\x02\x19\xaa\x1a\x8e\x9c\x65\xaa\x6c\x81\x88\x2a\xc6\x28\x14\x26\xb1\xe7\x4a\x29\x36\xed\xbf\xc0\x7b\xe3\x4f\x41\x41\x62\xe9\xb7\x69\xc8\x06\x91\x4c\x5f\xad\xe6\xf0\xf3\xd1\x4f\x13\x50\x08\x6c\x8b\xe1\x74\x3e\x7b\x22\xc2\x3e\x2e\xb5\x4a\xd1\xc2\x3c\x93\x4c\x07\x66\x69\x96\xdf\x83\x30\x20\x52\x88\xf8\x12\xfb\x9a\x85\xdf\x54\x23\x12\x2e\xeb\x13\x13\xf1\xe0\x9f\x30\x6e\xe6\x2e\xae\xe5\xd4\x63\x0a\xca\x53\x06\xd5\xbc\x4a\x45\x01\x89\x99\xb1\xf8\x91\x70\x00"
		"\x0b\xd9\x4e\x1e\x1e\xfa\xf5\xb6\x35\xce\x39\x51\xdf\x04\xe2\xf3\x96\x52\x5b\x97\xac\xbc\xd8\x78\x42\xbb\xd2\x9d\x9a\x00\x28\xd3\xc9\x5e\xe7\xe5\x7e\xd7\xc8\x82\xec\x66\x6a\x36\x8a\xf8\x62\x88\xf4\xde\xa2\x4e\xd6\xec\x52\x88\xa8\x99\x4b\xa3\x75\xab\xfb\xa7\x73\x69\x0e\x03\x24\x2a\x75\x10\x88\x7f\xdb\x68\x95\x4a\x84\x76\x7b\xb5\x68\x6f\xa1\x3d\xf1\xd9\x8b\xc9\xd0\x33\x2c\x0e\x73\x07\x68\x9f\x7a\x37\xea\x31\xba\x31\x23\x88\x4a\xab\xc8\xbb\x0e\x4c\x45\xc6\x9e\x30\xe6\x7b\xc5\x49\x13\x64\xd4\x42\xb1\x2d\xa7\x9a"
		"\x5d\x25\xf8\x51\x2a\xce\xd4\x3b\xa9\x4c\x87\xf3\x01\xb4\xdb\x4a\xc1\x28\x0e\x35\xcf\xc1\xe4\x41\x54\xe3\x1d\x41\x6b\xab\x91\x7c\xcb\x36\x72\xcd\x2e\xbe\x4e\x83\x07\xac\x42\x45\xbc\x9d\xaa\x96\x4a\x36\xe4\xfe\x97\x51\xca\xa7\x8e\x81\x63\x7f\x58\x8d\x13\x7e\x69\xa4\x82\xda\x55\xe4\xea\x1a\x52\x15\xeb\xe1\x46\xc5\x1f\xaa\xa3\x21\xf0\x36\x73\x15\xf5\x69\xc2\x39\x5d\x2d\x13\xc5\x3d\xa1\xc8\xad\x5a\x91\xfd\xa5\xe2\x29\x0a\x6b\xbd\x9d\xbb\xef\xed\x7a\x1a\x71\x37\xdd\xc9\x93\x17\x35\x88\xd3\x87\x4a\x46\x56\x2b\x1f"
		"\xf0\x97\xa4\xe2\x1a\xd7\x71\xce\xbb\xac\x3c\x47\x17\xfa\xd7\x93\x2b\x2e\x11\x6e\xe0\xe9\x38\x82\xc9\x81\x02\x7c\xbd\x35\xfa\xc8\x1b\xcb\x16\x2a\xe4\x4e\x93\x17\x2a\x73\x84\x1b\xcd\xdf\xf8\x25\xa1\xd2\x31\x42\xcb\x4f\xf5\x23\x3d\xc6\xc4\x39\x79\xa0\x10\xa5\xa4\xe7\x92\x1d\xc7\x06\x46\x12\xd8\x3a\x64\xac\x75\xb6\x39\x33\x30\x44\x2e\x43\x29\x3d\xeb\x5b\x00\x3d\x20\x1d\x78\x88\xb0\xe2\xa1\x49\xc9\xa7\xc3\x6a\x3c\xb4\x77\x8f\x4f\x2d\x3c\x71\x0a\xef\x9e\x15\xce\x5f\xa9\x5a\x88\x03\xd9\x77\xb8\x29\x41\x10\x9c\xae"
		"\x26\x8e\x33\x16\xf8\xd5\x8e\x2b\x8c\x53\xaf\x34\x02\x8f\xea\x99\xac\x67\xe6\x06\xdd\xa7\x95\xb4\x7e\x62\xd1\x81\xbc\x2d\x4d\xcd\xe4\x6a\x13\x0e\xd6\xaa\xb2\x59\xf9\x98\xf6\x2f\xff\xf8\xa8\xcf\xde\xac\x56\xbd\x2b\x11\xfa\xb9\xfa\x0f\x44\x65\xf6\xae\x9e\xd1\x8b\x38\xa1\xd3\x6f\x10\xb9\x86\x88\x52\x37\x7f\x8e\x7b\xa4\xb4\xe5\x6f\xaa\xe1\xf0\x0d\xd3\x38\xd5\x49\x8f\xfa\x23\xa0\x01\x52\x3b\x28\x0a\x8e\x56\x5c\x2c\x04\x25\x09\xe4\xdb\x01\xbd\xb3\x15\x31\xdf\xdb\xfc\xf7\xdd\xf7\xcc\x64\x48\xb5\x23\x0f\x00\xd7\x68"
		"\x93\xce\x07\xe3\x33\xef\xb2\x0c\xdf\x9c\x12\x8f\x80\x40\x0e\xa0\x2a\x4b\x8c\xa0\xf7\x5e\x19\x6f\x02\x00\xfa\x8d\xb0\x11\xb4\x06\x34\xb8\x30\x63\x2d\xd3\x74\x5b\x33\xce\x3d\x3f\xef\x77\x39\x69\x52\x30\xee\x1c\x55\xf3\x00\xe4\x49\x2c\xa7\xa8\xa2\xfb\x72\x29\x03\x2b\x36\xc8\x27\x5f\xd2\x61\x39\x95\x0e\x8c\x5f\x23\xe0\x43\x66\x9e\xa2\x83\x60\x4a\x56\xda\x18\xf7\xf1\x3d\x62\xba\x75\xe7\xc0\xab\x8e\xb1\x8b\xe4\x16\x02\xc6\xe0\x76\x5d\xec\xed\xed\xfe\x74\xf5\x1a\xd1\x85\x2d\xd8\x2f\xf9\xd9\x79\x6f\x33\x65\xfd\xd1"
		"\x31\xca\x3b\x52\x29\xc6\xae\x14\xaa\x76\x8e\x98\xab\x94\x9f\xd9\x70\xae\xaf\x2f\x29\x29\x46\x88\x3f\xce\x14\xc1\x89\x1e\x09\xdd\x53\xe6\x98\x4e\xc9\x81\xcb\x45\xa5\xf4\xbf\x15\x49\x4f\xa7\x05\x93\x7d\x5d\xee\xfe\x85\x65\x3b\x0d\x15\x40\xeb\xd4\x43\xc9\x01\x38\xed\x99\x7e\xd6\x46\x88\x53\xb3\x44\x71\x18\xb8\xd2\x68\x0c\x9f\x3f\x0d\xd4\x2b\xa1\xb5\x3e\xa1\xc9\xf2\x7a\xbe\x61\xb9\x8c\x80\x97\x30\x62\x24\x5e\xdb\x5b\xc8\xcc\x63\x4d\xf9\x0c\xff\x83\x5b\xdf\x32\x6c\xe0\x81\x05\xfb\x26\xa6\x6e\x3c\x83\xa5\xe9\x2d"
		"\x6d\x99\xcc\x85\x1d\xeb\x47\x58\xc4\xac\x16\x22\xe4\x1f\xcc\x82\x7b\x8a\x66\x7c\x4c\x41\x4d\xff\x29\xce\xef\xe6\xdf\x09\x48\x7f\x7c\x8a\x38\xbb\xc4\x87\xb0\x0c\x49\xee\xbc\x5a\x27\x8b\x15\x99\xca\x52\x71\x22\xaa\x38\x45\xf1\x33\x97\x13\x12\x3a\x97\xd4\x35\x53\xf3\x02\xcf\xed\xf2\xf8\xfc\x7e\x18\x79\xaa\x6d\xae\xed\x64\x7e\xb3\xa1\x73\x00\x16\x59\x89\x54\x05\x2c\xb6\x46\x70\x7a\xad\x7d\xae\x05\x5c\xe2\x01\x6b\x0a\x06\x0d\x09\x4e\x65\x4e\xb6\xb3\xa2\xbc\x16\x8d\x2c\x5e\x8d\xea\xf9\x8d\x8c\x5e\x0d\x11\xcd\xdd"
		"\xf3\x2a\xb9\x9a\xb2\x3b\x7d\x09\xd4\x08\xe1\x2b\xc1\x73\xf5\xb6\x16\x02\x92\x4d\x86\x05\xca\xc0\xd4\x86\xee\xd9\x26\x76\x44\x83\x01\xd5\xed\xd1\x12\x60\x15\x3b\x4c\xdf\x28\x3f\x7c\xf7\x3f\x33\x6e\x15\x5f\xc1\xc1\x50\x54\x49\xfe\xe0\x77\x7d\x71\x1d\x8e\x79\x60\x4e\x60\xe7\x51\xf6\xf4\x94\xdb\x77\x67\x44\x8a\xd6\xc7\xdb\xd3\x9a\xe0\x68\x11\x95\x22\xaf\x82\x6b\xa2\x85\x28\x55\xe7\x77\x3f\x2b\x94\xf8\xfe\x7f\x8b\xdb\x38\x19\xa8\x29\x8b\x40\xe9\xd3\x76\x9c\x36\x94\xb4\x8e\x1a\x28\x4c\x0e\x5b\xc9\x79\x0a\xd9\x87"
		"\xec\x63\xb5\xc4\x57\x46\x9d\xf1\x6f\x47\xcc\xa6\xb3\x41\x4a\x1c\x56\x0d\x35\xd4\xf2\xa9\x05\x80\xd6\xf0\xc4\x9a\x01\x43\x34\xc6\x24\x84\xc5\xa6\x99\xd9\x61\x72\xb5\x8f\xf7\x09\x45\x5c\xbc\x8f\xc5\xa9\xe6\x60\x24\xba\xb1\x4f\x50\x24\x54\x3c\x72\xdd\xdc\xa6\xd5\x8e\x6e\xdb\xf1\x45\x10\x2a\x4d\xb3\x55\x8c\x5d\xa1\x01\x50\x53\x7e\xcd\x0f\xad\x37\x11\x15\xbd\x8e\xb2\x4e\x14\x14\xb6\xd1\x4c\xb6\xcf\x82\x8d\x0d\x33\x18\xd5\x2d\xeb\x70\x8f\xf0\xad\x83\xc7\x93\xa4\x83\xff\x53\xa8\x41\xba\x08\xb8\xc7\x51\xaa\x2f\x3c"
		"\x01\x17\x10\x02\x9e\xb1\xdb\xa8\xa6\x58\x62\xdf\x64\x71\x31\xed\xd1\xf6\x53\x10\x86\x3a\x9f\xf9\x98\xa3\xac\x68\x1e\xbd\x79\x4b\x47\x16\xeb\xd0\xd4\x52\x49\x52\xc8\x06\x24\x95\xf2\xf7\x04\xbf\x1e\x23\xb5\x89\x7c\x1f\x75\xd3\x07\x3c\x5b\xe1\xf8\x0b\xd4\x60\x47\xff\xcc\x0f\xcd\x25\x21\xe6\xd5\x5f\x96\xbc\x96\x9c\x55\xdf\x46\x3b\x7c\x56\x4e\x2c\x80\xe8\x6b\xe9\xab\x69\x62\x88\x5c\x03\x49\xea\x7e\x7a\x57\x46\x4e\x25\x2e\x71\x1b\x5b\x41\xa0\x48\x9b\xcd\xae\xc3\x4d\x19\x9e\x9f\xb1\x3d\x57\xde\x80\xbe\x32\x57\xba"
		"\x50\xcf\x0f\x7f\x0e\x18\x35\x25\x7a\x87\xf3\x81\x8d\x6a\x4e\xe3\x97\x26\x7b\x08\x70\x7c\xc2\xd3\xec\xd9\x52\x63\x98\x62\x04\xa5\x07\xac\x24\x55\x47\x07\x79\xbe\xa4\x7d\x36\xc3\x13\xeb\xc2\xfc\x7d\xd9\xe6\xa7\xd5\xfc\xb1\xd6\xc7\x4a\x1a\x29\x9d\x71\x8d\xed\x92\x82\x73\x63\x9b\x52\x33\x84\x94\x0b\xa4\x4b\x16\xb9\x05\x12\x02\x08\x47\x1b\x6b\x82\x4b\xc3\xf4\xc6\xcf\xea\xed\x97\x84\x46\x19\x13\x3c\x79\xb4\xc0\xe2\xcc\x4b\xcd\x28\x33\x6b\x77\x24\x83\x71\xe3\xd3\x2e\x47\xd3\x11\x7c\x6b\xbb\xf7\x8b\xa3\x03\xa3\x3b"
		"\x9f\xf7\x08\xdb\x1c\x7f\xe5\xf1\x16\xed\xf9\xff\x1d\x73\x1d\x62\x2c\x7c\xa5\x56\xc1\xbf\xfa\x4a\x96\x3e\xa0\x67\x66\x27\x7e\x77\x09\xfd\xd8\xb5\x1c\x70\x81\x74\x47\xfd\xe6\x0f\x88\x63\x51\xb5\x9c\x3b\xb1\xec\x6a\x61\x7b\xd6\x3f\x78\x22\xf4\x3e\xb8\x72\x44\x7b\x2d\xae\xad\x20\xda\x00\x46\xcf\xdc\x8b\xf9\x31\xd8\x1e\xde\x2b\xc4\x3b\xdb\x36\x0b\xfb\x64\xbb\x67\x29\x3d\xe8\x2f\xa7\x54\xae\xbc\xb7\x0f\xeb\x3e\x19\x02\x87\xf7\xb5\x03\x6c\xaf\x20\x03\x08\x33\x92\x0a\x23\xa7\x06\x59\x03\x3b\xd4\x36\x45\x9b\x53\x99"
		"\x7f\x82\x8c\xfa\xd1\x80\xf5\x55\xf8\x56\x92\xed\xb2\xdf\xee\x2d\xd1\x54\xda\x76\xa3\x99\x97\x95\x8b\x3d\x39\x51\x65\x33\x5e\x5b\xfa\xe6\x2a\xfc\xdd\x02\xdc\x6a\x7c\xf3\x87\x39\x6e\x48\xc1\xcb\x4e\xbc\x0d\x79\xf8\x9d\x01\x54\x6b\x51\x78\x0f\xe2\xc1\xed\xfd\x36\xfd\x17\x24\x80\x85\x71\xa9\xbd\x49\xa2\xe8\x3b\xa7\x03\x14\x91\xd0\xb0\x53\x98\x60\xc5\x90\x10\x7e\x8c\xdf\x04\xd1\x4b\x0d\xc6\x4b\xa6\x0a\xbb\x89\x1e\x1b\xb2\x93\x72\x94\x9d\x2a\x45\xd4\xb8\xde\x5a\xbf\x93\x83\x99\xf3\xaa\x93\xf6\x4f\x0b\xa2\x9f\x9c"
		"\xd2\xf3\x3c\xf4\xb6\x13\x0e\x4f\x4f\xd7\xe5\xee\x18\x97\xc8\x4b\x38\x30\xe3\x19\x8f\x39\xc4\xe1\x16\x29\x9c\x38\x60\x45\xf5\x60\x04\xa5\x2b\x30\x08\xd0\x34\x40\xf9\xd3\xaf\x61\x90\x45\x61\x5d\x68\x80\xd9\x0d\x7e\x81\xa8\xe9\xbb\x0d\xde\x6b\x53\x1b\x9c\x99\x0a\x77\x89\xbc\x55\x66\xfe\xc0\x90\xef\x73\x7d\xbe\xcd\xa0\x6b\x94\x24\x4d\xd0\x56\x4a\xfa\xba\xa8\x3f\x42\x2d\x6c\x63\xd5\x97\x8f\x0f\x32\x09\xd3\x59\xb1\x3b\x5d\xb5\xb2\x88\x89\x54\xc0\xef\x73\x5c\x18\xbd\x2d\x69\xcb\xd9\xd6\xe8\xef\x64\xc6\x21\x31\x04"
		"\x98\xac\xb1\x20\x43\xfe\xe2\xbe\xaa\x7d\xdd\x83\xf3\x94\xde\x6d\x87\xc5\xdd\xe3\x48\x5e\x57\xbf\x62\x6e\x35\xba\xf0\xda\x5d\x58\xef\x73\x04\xf4\x62\xf5\xdc\x55\xbc\xd8\x09\x2e\x4b\xd1\x29\xbe\x72\xf3\x0f\x03\x5f\xc5\xa8\x42\xa1\x24\xf5\x80\x9f\xe8\x27\x81\xd2\xa3\x25\xa2\x84\x00\x22\xdb\xce\xf2\xa3\xa8\x5c\x38\xf6\xbc\x9f\xe5\x9d\xbd\x9d\x21\x4f\xcc\x27\x5f\xc8\x00\x0c\x17\x5f\x51\xd2\xd1\x45\xba\x90\x3c\xef\xf1\xe1\xe1\x7c\x24\xe9\x59\xf3\x2d\xf5\xc6\xb6\x06\xe9\x9e\x8a\x7a\xe2\xf2\xcb\xf4\xd9\xd2\x47\xd6"
		"\xe5\x3a\x5a\x38\xcc\x18\xf5\xfc\x42\x5d\xfe\x9a\x41\xe9\xd5\xda\x60\x5f\x6e\x96\x3a\x89\xe7\x83\x03\x40\x69\x65\x3e\xd1\xe2\x9b\x34\x4b\x06\xe4\x56\x3a\x97\x72\xee\x4d\x2b\xdf\xd6\xfb\x8c\xa5\x94\xc9\x72\x68\xe2\x4c\xbf\x2e\xb6\xea\xae\x0c\x72\xfb\x60\xb0\x66\x05\xda\x23\xa2\xc3\x0b\xd8\xa2\xe4\xca\x99\x3b\xda\x9a\x28\x81\x80\xf8\xa6\x63\x73\x5d\x5a\x9d\xe8\xf1\xd7\x68\xe7\x6f\x6f\x98\xf1\x8b\xd7\x8d\x3c\x82\xa9\xfe\x47\xa9\x1d\x87\x49\x09\x03\xcc\x04\x4b\x60\x6f\x3e\x75\x25\x21\xef\x14\x9c\x67\xa2\xfd\x6f"
		"\x4e\xb3\xeb\x69\xb5\xd4\x12\xd3\x05\xa5\x4f\x7c\xee\x6b\x3d\x80\xda\xb5\x71\xe2\x2b\x54\x64\x57\xd1\x69\x59\x4d\xb4\x58\x40\x46\xa5\xaa\x9b\x07\xef\xac\x3c\xd2\x15\xca\xd6\x6f\xe5\x41\xe1\x00\xcc\x24\x93\x6d\xc2\x3c\xc3\x7a\x56\x99\x71\x8e\x7e\x55\xa3\xdc\xb9\x0e\x27\x07\xba\x60\x4a\x89\x9d\x3e\x5a\x03\xba\xec\x78\x68\x37\xde\x53\x83\xb7\x5d\x58\xb6\x47\x54\x9f\xc5\xfe\x95\xf1\x4e\xba\x34\xb0\xa7\x41\x18\xb5\x16\x73\x89\xb3\x22\x8d\x5e\xd5\x06\xd8\xf1\xbe\x66\x07\xf1\x24\x7e\xe6\xe0\x63\x5c\xd6\x33\x15\x53"
		"\x37\xf4\x27\xc0\x2f\x40\x05\x23\xaa\xd3\x2b\xa8\x90\x04\x03\xe4\xc3\xda\x0d\xb4\x8f\x23\x21\xe3\x72\xd8\x52\x2e\x0f\xab\xe5\x83\x5f\xe6\x16\xc8\x16\xd4\x57\xaa\x75\xf7\x8c\xde\x4c\xf6\xf8\xd4\x0d\xd0\x40\x11\x4e\x35\x63\x56\xb9\x85\x61\xb2\xe5\xce\x3f\xbb\x33\x7a\xea\x68\x42\xfa\x48\x63\x71\x00\x3d\x95\xea\xec\xa9\xdd\x8d\x38\xe3\xaa\xea\xa5\x97\x73\x9b\xe6\xb3\x3a\x9c\xe8\x63\x51\x63\xe0\x87\xe9\xed\x20\x79\x53\x1d\xa2\x8c\x8b\xa1\x32\x2a\x6a\xb1\xbd\x88\x82\x93\xb1\x5e\x94\xd2\xe2\x55\xfa\x47\x32\x96\xb3"
		"\x84\xfc\xc6\x44\x5b\x9f\xf4\x2e\x2d\xef\x04\xbe\x4a\xf8\xa2\x85\x6c\x79\xe0\x88\x32\x2a\x20\xda\x66\x8b\x4f\xa5\x50\x4b\x9d\xd2\xfd\xf6\xe5\xbc\xe0\xa3\x2d\x6b\xc0\xd8\x35\xd7\xdc\x45\xcc\x50\xcb\x35\xf3\x89\xac\xba\x9b\x3d\x91\xf4\x8b\x7e\x2d\x4a\xe6\xd1\x9a\x01\x47\xf1\xae\x48\x66\xe2\xac\x0d\x86\xed\x04\x0e\xea\x75\xfc\x9c\x57\x4b\x82\xe5\x4d\x37\xc9\x0d\xe4\xd3\xac\xda\x51\xe1\xc8\x5f\x65\x25\x38\x37\xc4\x60\xfc\x58\x4a\x7a\xec\xdf\x1f\xbb\x02\x06\x2b\x8b\x76\x83\x22\xf4\x69\x75\x78\xb5\xd4\xfa\xb7\xd1"
		"\x31\x9e\x27\xf2\x26\xcb\x09\x54\x40\x23\xc0\xaa\xec\x40\xb5\x7a\xd2\xad\xdb\x24\xaf\xc3\xd5\x5f\xb0\x5f\x7e\x76\x92\x40\x06\x21\x87\x48\xcb\x0d\xaf\x8e\x23\xe5\x2b\xff\xad\xc5\x9c\x5a\x1f\x8d\x59\xd8\x19\x03\xd1\x4e\x3b\x05\x41\xac\x14\xd8\x4d\xb2\x5a\xc9\xa2\x29\x07\xef\x0d\xef\x68\xc2\x93\x33\xee\xa9\xce\x54\xa3\x2a\x71\x7f\xd3\xed\x08\x30\x78\x0e\x24\x71\x43\x04\x66\x9a\x89\x51\xf7\x3c\x17\x01\x2d\xc7\xe3\x5a\xbb\x1f\x06\xed\x4b\x74\xcf\xdf\x57\x25\x96\xc3\xca\xa0\x32\xef\x9f\x29\xd0\xb8\x30\x65\x02\x7b"
		"\x9b\x85\xeb\x44\x05\x92\xd8\xa0\x2f\x31\xa2\xae\x6d\x11\x08\x4a\x8e\x9e\x4d\x13\xe0\x25\x21\x07\x98\xb4\x4a\xcc\xa4\x44\x64\x97\x2c\x73\xc0\xa5\xaf\x6c\x08\x51\x26\xbe\x99\x09\x1b\xe4\xe5\x26\xf1\xa7\xa9\xfe\xd2\x81\x64\xc0\x4e\xf9\x65\x0d\xd1\xd9\x1e\x96\x24\xea\x78\x14\x6e\x1d\x22\xfa\xc2\xdf\x1f\xf6\x48\x66\xa8\x81\x3a\xb1\xe6\xc5\x41\xa0\xd0\x4a\xb1\x08\xeb\xbb\x48\x9c\x55\xf1\x00\x8f\x21\xa3\x75\x71\x60\xbe\xe7\x02\x2b\xd9\x2c\x0b\x9a\xb2\x96\x66\x58\xe3\x9b\x14\xea\x1e\x58\x4b\x51\x1f\x3f\xfb\xea\xdb"
		"\x04\x66\xc5\x6a\xda\x7c\x30\x9a\x51\x9c\x77\x22\xa7\xe7\xb8\x7c\x17\x09\x87\x7e\x0f\x10\x06\x88\xcb\x60\x1c\x02\x97\x6b\x1e\x4b\xbc\xe1\xf8\xf8\xd6\x4c\x1e\xdb\xdf\x0f\x8f\xf9\x90\x50\xc4\xb7\x2f\x2d\x59\x3a\x59\xc7\xd7\x20\x26\x88\x4e\xda\xb2\x1a\x3d\xd5\x72\x26\xf7\xf6\xe4\xb4\x95\x38\x9f\x2a\x80\x79\x1d\xe0\xc1\xa8\x95\xff\xc5\x62\xfe\xa7\x0c\xd5\x4d\x11\xa3\x38\x28\x30\x6c\x80\xcd\x3f\x25\xe8\x7e\xf4\x1f\xbf\x85\xe6\x7b\x94\xfc\xf4\x34\x34\x98\x06\x8e\xe1\x70\x90\xc9\xcb\xec\x95\x5c\x7b\x0e\x8e\xe0\xd9"
		"\x6d\x80\xc2\x50\xf1\xf1\x37\x5e\x4d\xaa\xf0\x4f\xf9\x0f\x72\x0c\x8e\x94\xc6\x6a\x6a\x2d\x69\x2e\xb2\xa4\xe0\x96\x8f\xae\x7e\x2d\x07\x69\x71\x42\x65\xbe\x99\x63\x6e\x3d\xc7\x03\x9a\x62\xaa\x67\x80\x8f\x66\x61\xc8\x11\xe2\x45\x08\x89\x6e\x1e\x81\xa5\x73\x74\xff\x73\x16\x16\x91\xa8\x9e\x25\x40\x5f\x7d\x45\xaa\xc3\x25\xd6\x43\xab\x2a\x07\x48\x48\x8f\xf4\x68\x2c\x53\x9a\xec\xab\x37\xa4\x88\x66\x04\x0e\x9c\x58\xff\x49\x2f\x21\xa7\x27\x44\xcf\x4e\x38\x6b\xa3\x46\x52\xc5\x1f\x8f\xa9\x8d\xed\x87\x32\x87\xaf\xd3\x98"
		"\x27\xfd\x1e\xcd\xb5\x45\xe5\x2b\x00\x6c\xb4\xfb\xb8\x87\x2a\x14\x47\x6e\xed\x48\x58\x53\x2a\x8b\x63\xb8\xe8\x65\xf7\x91\xd2\x07\x5b\xb3\xf9\xa9\x50\x01\x64\x57\x23\xc3\xa0\x25\xff\xc6\x11\x5f\xf7\x57\x70\x3c\xb4\xe1\x4b\x77\xc1\x03\xb5\x39\xce\x40\x96\xa3\x7e\x68\x91\x1f\xbc\x82\x4a\xbc\xf0\x23\xe1\xea\xbe\x79\x37\x24\x83\xed\xa0\xac\x58\x1a\xc9\x61\x04\xfa\x4a\x4d\xb4\x5a\x2f\x46\xe9\x33\x8f\xfc\xf1\x1b\x57\xfc\xd2\x68\xff\x5e\x58\x44\xe1\x31\x7b\x45\xfe\x83\x76\x99\x15\x4e\xec\xbd\x86\xa4\x50\x43\x0f\xc0"
		"\x08\x60\x22\xee\xf5\x44\xd6\x17\x12\x44\xe1\x00\x46\x74\xa2\x99\x7d\xdd\x19\x02\x2e\x76\x6b\x71\x40\x58\xac\x43\x00\xef\xb0\x7f\x67\x30\x52\xda\x28\x7a\xd2\x9e\xa2\xad\xe6\x6b\x64\xc3\xe2\xe0\x9f\x59\xd9\x6b\x47\x5c\x66\xe8\x27\x3b\xce\xcb\xcb\xdc\xb1\xe6\xf6\x41\x82\x88\x70\xd9\xa7\x28\xf3\xc6\x45\x1d\x22\x3d\x14\xee\xe4\x74\xe1\x21\xd9\xdb\xf4\xda\x18\x72\x6a\x2c\x1b\x44\x42\x64\x89\x54\x69\xca\xaa\x8d\x41\xd6\xd0\x95\x22\x46\x2a\x93\xbd\x99\x14\x54\xea\xdc\x69\xd9\x48\x76\xce\x98\xb1\x13\x8f\xba\x39\xac"
		"\x0a\xcf\xd4\x1e\x8a\x54\x1a\x43\x50\x3a\x2a\x1a\x98\x25\xee\xb9\xa1\xb1\x16\x22\xd1\xa0\x6a\x00\x44\x9d\xe0\x47\x2b\x1d\x81\xf8\xa4\xe6\x84\x3f\xea\xec\xbb\xf1\xa7\x95\x12\xd4\x0c\x73\x30\xb6\x71\x0f\x8c\x6d\x91\xdd\x9b\x47\xa7\xae\x43\x79\xa0\x08\xc3\xc7\x52\x90\x60\x69\xbd\x11\xfc\x4c\xc1\xb3\x60\xb7\x18\xb5\xa3\x66\xb5\xd7\xc6\xe0\xc2\xc4\x80\xbb\xa9\x0d\x1b\x29\x7b\x80\x92\x31\xb6\x47\x71\x63\xcd\x20\x07\xa3\x6b\x1f\x10\x34\x38\x5b\x2f\xa6\x40\x9a\x3d\x96\x0a\x4b\x9c\xa2\x11\xe6\x9e\xef\x77\x0e\x4b\x1e"
		"\xf2\xe3\x53\x34\x97\xab\xdc\x72\xbb\x34\xf9\xb0\x6e\x3b\xbb\x11\x78\xf9\x6a\x60\x42\xb3\x85\x57\x39\x37\xbd\x6a\x3f\x15\x3a\xcd\x8c\x66\xbc\xfc\x97\x1f\x25\x7c\x62\x9c\x00\xe1\x9c\x9f\xc8\x88\xf1\x7e\x10\x97\x04\xe3\x81\xa4\x1f\xc5\xff\xeb\x6a\x9c\x22\x35\x25\x25\xb6\x9f\x36\x3a\x66\x8c\xfd\xbc\xbf\xad\xd1\xb9\x45\xef\x41\xe5\x04\x91\x5f\x13\x44\x35\x25\xe6\x4c\xb5\x53\x41\xa0\x73\xf7\xee\x1c\x7e\x78\xf1\xed\x62\x43\x16\x24\x97\x12\x8e\x3e\x75\x32\xbf\x7c\x2c\x12\xf2\xa4\xfa\x48\xf3\x0e\x5c\x98\x8d\x07\xc6"
		"\x6b\x0f\x72\xc5\x26\x59\xf5\x6c\xdb\x23\x8f\x09\x17\xb5\x67\xd4\x2b\xbe\x72\xf2\xa9\x74\x0e\xfc\x4d\x88\x76\xd5\x8a\x60\x2c\xbe\xd2\xbe\x3b\x92\x20\x80\x3f\x9e\x6e\xbe\x32\xd7\x85\x70\x68\x27\xbd\xa1\x67\x98\x41\x21\xf8\xe7\x1c\xc0\xc4\x52\x3f\x40\x0b\x30\x16\xde\x28\x77\x3c\xcd\x1e\x19\x03\xb8\xd1\xd4\x8d\x43\xb1\xd8\x0d\x5d\xad\x8e\x2e\xfb\x0a\x8f\x71\x3f\xff\x13\x39\x51\x6e\x5e\x75\x56\x5e\x0c\xa1\xee\x90\xc1\xe6\x6d\x85\xd7\xc8\x4f\x7e\xcb\x29\x2b\x1b\x4b\xbe\xbe\xe9\x08\x5c\x10\x93\x3c\xe0\x89\xe7\x6d"
		"\xfe\xde\x95\x6d\x37\x26\x0e\x90\x38\xfd\xad\xd6\x1b\x53\xf1\xcf\x11\x44\x3b\xe5\x6c\x5f\x31\xfb\xf0\x31\x81\x1a\x31\xd5\x4b\xc2\x75\xec\x38\x8b\xec\x4e\x60\xa5\x12\x77\x13\x77\x01\x8a\xf0\x66\x00\x00\x03\x39\x2e\xfa\x8d\x54\x60\x9c\x06\x54\xf0\x69\x8a\x59\xa3\x8e\x6c\xf6\xd6\x7d\x83\x15\xc2\x60\x9d\x62\x8e\x2b\xe2\xb0\xc8\xc2\x4f\xc2\x86\x73\x06\x33\xd6\x3c\x8c\xaa\x47\xf0\x26\x7c\xad\xad\x12\xb1\xea\x0c\x48\x6f\xc0\x0f\x4b\x53\xd6\x3c\x6e\x4e\x15\x5d\x96\xf0\xbf\x98\x19\xb7\x84\xe5\x1b\x20\x12\x21\x1a\x62"
		"\x72\x32\xc7\x96\x5a\xb0\xa6\xc5\xb7\x1c\xe4\xa2\x71\x46\xae\x90\x23\xcb\xbf\x13\x6a\xdf\x4a\xfc\x48\x03\x15\x95\xd7\xc7\x17\x54\x8a\x7b\xb3\x18\xd6\xf5\xf9\xa6\xcb\xd8\x12\x7c\x65\xa2\xd3\x94\x0d\x85\x34\xd6\x04\x03\xff\x81\x12\x72\xf3\x18\x08\x6c\xfe\x3c\xb7\x6e\x18\x5f\x69\x3d\xc1\xce\xd8\x9d\xe4\xd8\xbb\x56\x79\x02\xb0\xe3\xd5\x6a\xa6\x80\x32\xc9\xc3\x9c\xbb\xe6\x34\xd3\xfc\x99\x9a\x14\xea\xec\xb6\x59\xca\xc8\xeb\x10\x1a\x6f\x20\x17\x46\x2b\x1c\x0e\x05\xf7\x6d\x4e\xd3\x04\x55\x04\x9f\xe9\xdf\x20\x9d\x9f"
		"\x30\x6e\x5c\xdc\x57\x70\x61\x5e\x41\x52\xb4\x0b\xed\xdf\x1e\x2c\x66\xf3\x70\xf7\xd3\x45\x8d\x19\x2c\x2c\xdc\xea\x6e\x5c\x5c\x90\x42\xfe\x6c\xe5\x6e\x5a\xc8\x8f\xb2\xd6\xa1\xfe\xcd\x74\xa7\x11\x2b\x19\x22\x24\x71\x67\x4d\x13\x33\xeb\x9f\xee\xea\x14\xff\x20\x34\xa4\xbd\xe5\x85\xd0\x5e\x24\xba\x27\x18\x47\x01\x09\xa6\x85\x98\x3c\x8d\x58\x65\x01\x4b\xd8\xf5\x4a\xa2\xc5\xcd\x3f\xe8\xf5\xd6\x7c\x4d\xf9\x54\xce\x21\xf0\x02\x92\xb7\x0d\x23\xb4\x34\x65\x99\x76\xee\x6a\xd4\x4a\x6f\xd2\xdd\xf9\x74\x70\x5b\x7b\x84\xd9"
		"\x95\x15\xef\x88\xca\x61\x0d\x9b\x8d\xab\x87\xc5\x71\x13\xbf\xf8\x3f\x4a\xee\x8e\x96\x9e\x2f\x92\x45\xb8\xef\xeb\x4f\x7e\x5f\x1d\x46\x8e\x5e\x11\xbc\x87\xdc\x8a\x3c\x73\x2e\x16\x8e\x71\x11\x20\xbd\x93\x14\xdd\x64\x81\x16\x04\x21\x9e\xb9\xac\x0c\xf6\x16\x2d\x92\x43\x08\xca\x4d\x59\xa6\xec\xed\xb1\xee\x6e\xfa\xa6\x85\x8a\x37\xc7\x60\xe5\xb3\x81\x77\x78\x9f\x44\x9e\x62\xb1\x9b\x4f\x72\x5d\x49\x9f\x7b\x10\xad\x40\xe8\x0c\xfa\x0c\x5e\xeb\xc1\x5b\xed\xa0\x3c\x8d\xf4\xec\xa4\x99\x41\xbf\x07\x4f\xa6\x86\x0d\x7b\x9e"
		"\x18\xac\x73\xa5\xd0\x7f\x65\xd3\x27\xd3\x9b\x77\x0d\xc8\xcc\xe0\xab\x8f\xc3\x70\xa6\xaa\x10\x37\xf1\x84\x0c\xdd\xa6\xba\x54\xe0\xe8\xd2\x3a\xf0\xf4\xb8\xc5\xc2\x50\x9f\xbd\x74\xf4\x0c\x39\xba\x56\x4c\x8c\xc2\x4b\xfd\xa0\xeb\x04\xc9\x00\x48\x06\xdc\x97\x9f\x09\x8b\x9b\xe8\x1f\xf4\xd0\x5a\x4e\x1a\x37\xea\xcb\xbc\xec\x11\x9d\xe8\x14\xd5\x49\xff\xdb\xa2\x49\x40\xf7\x6c\x72\x11\xfb\xdd\x94\x5f\xad\x8e\xc8\x67\x11\x86\x61\x07\xb7\x73\x62\xcb\xb3\xfa\x05\x68\x62\x4d\x32\x9d\x5b\xd4\xd6\xac\x45\x1f\x86\x86\x6e\x6f"
		"\xd2\x8a\x43\xd0\x38\xb1\xfa\x36\xa1\x40\x68\x29\x78\xc1\xb1\x84\xeb\xf6\xc9\x9d\xb4\x58\x29\x68\x75\x89\x80\xb8\xd5\xc1\x73\x5f\x6e\x80\x52\x1a\x0e\x46\x31\x06\x6f\x92\xc6\xa2\x1a\x7b\x75\x4c\x48\x4f\x65\xf2\xfc\x5b\x4a\x42\x17\xd2\xdf\x90\xdc\x10\x7c\xd1\xb5\xef\x01\xe9\xdb\x9c\x97\x78\xb6\xc2\xab\x74\x7d\x7e\x82\xdb\x94\xc6\x37\xf3\xe0\x23\x83\xd7\xf7\xc3\x9e\x54\x65\xf6\x63\x0d\xf8\x60\x04\x3a\xc4\x43\x45\xb7\x7b\x52\x8d\x81\x15\xe8\x34\x02\x1c\x2c\x61\xf0\x9d\x98\x82\x57\x86\x6b\xf4\x18\x42\x2b\x0b\x80"
		"\xbc\x53\xc3\xeb\x01\x75\xc6\x99\x61\x82\x94\x22\xf3\x07\x50\xf6\x03\x6d\x41\x6c\x0a\xd8\x9f\x3f\x7b\x3c\xf4\x88\x3c\x6c\x14\xde\xe8\xae\x2a\xff\x6e\x47\xfc\x63\x3e\x13\x21\x33\x09\xbc\x8a\x63\x1a\x67\x8d\x38\x93\x8e\x67\x09\x3c\x04\xc9\x0a\xa6\x32\x01\x17\xf5\x48\xbc\x78\x5f\xc4\xbc\xd8\x0d\x42\xa1\x38\xff\x1d\x6a\x60\xf6\xb2\xd2\x62\x64\x96\x9e\x26\xef\x11\xd0\x06\xf5\x4c\x40\xd4\xca\x53\x7a\x5d\x3e\x78\x9d\xd9\x3c\x25\x4e\x41\x78\x56\xa0\x6c\x6d\x33\xb2\x92\x0b\x68\x72\x78\xe8\x62\x7c\x2e\x06\xec\x8d\xb6"
		"\xd7\xed\xed\x08\x22\xb3\xf7\x62\x18\xf9\x3f\x4e\x5a\x7d\xd2\x1b\x90\xb9\x4b\xce\x20\xda\x34\xd6\x22\x6d\xf2\x21\x8b\x35\x5c\xf4\x45\x9b\x1c\x00\x9d\x27\xda\xd3\x5c\xf1\xac\xb0\x31\xa1\xb6\x85\xcc\x4c\x23\xf3\x7b\x9f\x02\x2a\xa6\x50\xf3\x16\x31\xc9\x29\x93\xfd\x9f\xca\x1b\xc1\x8d\x74\x83\xb3\x0f\x46\xd5\x27\x81\x56\x5c\x02\x26\x3f\xf8\xdd\x2f\xd8\xd1\xbb\xd7\x6e\x82\x61\x82\xad\xab\x23\x0b\xa7\xbe\xfb\x67\xa6\x2e\xc6\xe9\x43\x8d\x8e\x88\x78\xb4\x3c\xb0\x90\x63\xfa\xc0\x89\x0d\x11\x60\x11\x4e\x48\x12\xfd\x52"
		"\xef\x17\xe6\xc2\x0b\x00\x6b\x13\xf7\x61\x81\xc0\xb5\x3b\x47\x8d\xc1\xe2\x23\x88\x3b\x1f\x14\x2a\x85\x03\x35\x98\xd7\xd3\x13\x3b\xb4\x89\x5a\x44\x75\x25\x72\xa7\x56\x9a\xf3\x65\xdc\x7b\xb7\x73\xec\xe3\xd6\x08\xf1\xbd\xbe\xe1\x6a\x79\xc3\x55\xf0\xde\xf0\x43\x70\xa9\x89\x6e\x4f\x35\x90\xed\x7e\xb0\x01\xe9\xac\xaf\xf3\x33\x99\x02\x66\x88\x4e\x50\x21\xc7\x89\x1e\xcb\xfd\x2b\xa4\x36\x96\xb1\xec\x34\x43\x71\xf8\x39\xbc\x4a\x85\x28\xa7\xd6\x91\xdb\x62\xde\x36\x6c\xe1\xd0\xc4\x73\xb1\x43\x8a\x4e\xf1\x43\x71\xa2\xc7"
		"\x6f\x2b\x39\x18\xec\xa9\xf8\x88\x0c\xb4\x97\x95\x23\x04\x27\x96\x3c\xbe\x08\xba\x10\x4a\x47\xa5\x29\x1d\xc6\xb0\xef\x08\xbd\x3f\x58\x8f\xed\x57\x87\xca\x57\x4f\x4c\x09\xc6\x04\xd9\xdb\xff\x28\x5c\xe2\xee\x0f\xa1\x36\x47\xf9\xba\xf3\xcd\xd7\x20\xea\xbd\x1e\xc4\xe6\xce\x28\xbc\xc2\x50\xa1\x7e\x67\xf3\xf9\x1b\x2e\xf1\x62\x3e\xd3\xf4\x24\x91\x67\xa4\xdf\x1f\xd9\xad\xf4\x3a\xad\xce\x76\x34\xb2\x41\xef\xc1\x62\x2d\x27\x14\x54\xee\x57\x84\x36\xd9\x94\xe3\x74\xf8\xf4\xbf\x8e\x59\xc1\xa1\x27\x41\x7f\xf1\x41\x3b\x59"
		"\x05\x00\xe7\x0d\x28\x4f\x54\xf6\xf2\x39\x23\xdb\x2f\xe6\x2b\x0f\x78\x3f\x1f\xb7\x37\xd0\x42\x44\x9e\x25\xff\xf9\x06\x0d\xb6\xd6\xd7\x72\x1d\x6f\x1b\xff\x89\x1f\xd5\xdc\xa6\xa7\x13\x58\xa1\xb9\x38\x48\x2a\x9e\xa3\xdf\x94\x0b\xb3\x55\xab\xc5\xc2\x06\x38\x54\x9f\xd2\x8b\x1b\x3f\xc6\xdd\x8b\xd8\x1d\xd9\x49\x13\x9f\x97\xfc\x97\x3e\x94\xc7\xd7\x78\x6a\x0b\x65\x38\xe0\x31\x67\xa3\xf3\x2c\xd9\xb6\xa0\xce\x85\xbb\x6f\x58\x6c\x01\xef\x52\xf2\x4a\x7a\x93\x04\x24\x0a\x50\x8f\x91\x68\x30\xc8\x30\xb7\x90\x75\x19\xcb\xc9"
		"\xcb\x50\x9e\x9f\x92\x04\xa5\x3e\x83\x24\xc6\x79\xc4\xb4\x4f\x54\x07\x57\xc9\xb0\xd8\xde\x8d\x68\x4e\xe7\x0d\x6e\xfe\xe5\x7d\x57\xef\x1e\x64\xf4\x51\x04\x11\x54\xcf\x15\x2b\xf0\xed\x56\xd9\x40\x06\x93\x38\x35\xe4\xbe\x87\x17\xdc\xe8\x53\xb9\xed\x81\xf0\x6e\xb6\x30\xb3\xc9\xe7\xf9\x4e\xd1\x36\xc7\x6f\x8a\x1b\xa6\xd0\xf6\xff\xb4\x4c\xc6\x7b\x45\xf8\xff\x89\xdf\xce\xff\x4c\xe0\x36\xa5\x48\xe1\x17\xda\x55\xb6\x08\x0f\x7e\xa3\x2c\xe9\x3c\x52\x35\x65\x0b\x51\xd2\x9a\x15\xbd\xf0\xa6\x2a\xb2\x5b\xf3\xdd\x18\x92\xc6"
		"\xd5\x5b\x3d\x8e\x35\x7b\xc0\x9a\xe0\x26\x97\x3e\x7e\x54\x25\xe9\x41\xda\x65\xbb\x98\x33\xb2\xc2\x89\x1d\x9c\x13\x47\x97\x06\xaf\x89\x8c\x58\xa9\x3b\x10\x76\x91\x8d\x70\x44\x75\xf3\x4a\xc4\x52\xd3\x8f\x07\x57\x77\x46\xab\x3b\x2f\x5e\x63\xec\x2f\x0e\x1c\xa5\x0d\xc8\x49\x4e\x53\xda\x85\x7a\xd7\x1b\x89\xfb\xe7\x59\x1c\x1d\x1d\x1c\x0a\x78\xe1\xa0\x94\x8c\x5e\x56\x32\x13\xe7\x92\xd2\x8d\xd3\x56\x50\x51\x65\x63\x79\x5b\x67\x54\xfc\x6e\x3b\x4b\x6f\xe9\x03\xbf\xc4\x20\xfa\x16\xee\xf4\xe2\xd5\x5f\x14\x46\x24\xa8\x2e"
		"\xc6\x3b\x8b\xa8\x61\xac\xf2\xd0\x43\x1d\x02\xdf\x84\x98\x58\x95\xf4\x5a\x80\xbc\xa5\xaf\x89\x78\x1b\x0d\xcc\x1f\xf4\x3b\x17\x67\x01\x16\xee\x8b\xdf\xea\x4b\x5e\xc9\xd8\xf9\x50\x42\xa8\x38\x5a\x85\x11\x0d\x5d\x46\xa5\x3a\x01\x6d\x58\x23\xa0\xc6\x14\x7f\xed\xfc\x64\xf7\xcf\x04\x9d\x69\x48\xde\x26\xec\x56\x26\x64\xb0\x13\x8e\xdd\x41\x82\x88\x62\xf0\x16\x7d\x03\x9b\xcc\x48\x2d\xf4\x9b\xd7\xbe\x19\x57\xaa\x4c\xa7\x4c\x93\xd1\xaf\xa4\x80\x91\x1f\x01\x85\x33\x9c\x14\x0c\xa7\xa4\xf7\x79\xd5\xba\xb1\x23\x2f\xcf\x8a"
		"\xeb\xf9\x60\xdf\x16\xab\xb7\x5b\x75\xcb\xa6\xe9\xed\x61\x72\xed\x05\xfa\xcf\xcb\xbc\x0a\xbb\x95\x9c\x15\x86\xb9\xf3\xdd\xf1\x19\x58\x00\x2e\x24\xb1\xcc\x4c\xc5\x79\xc8\xd1\x4e\x05\x6a\xd3\x61\x8d\x2f\xdb\xdb\x01\x1d\x45\x1e\xfc\x8c\x25\xf6\xd1\x72\xe3\xdd\x70\x11\xdb\xc1\xb7\x3c\x59\x27\xd4\x2f\x0a\x82\x04\xfe\x7c\xc2\xcc\x91\x1a\x7e\xf1\x43\xf1\x95\x5a\x74\xb6\x5d\x35\xcc\x2a\x3d\xb7\xc2\x63\x41\x7f\x91\x70\x5e\x01\xcc\x4a\x9f\x1b\x72\xb9\xce\x63\x05\x82\xe8\x14\xe4\x59\x66\xc1\x84\x74\x2f\x09\xc5\xf7\x44"
		"\x63\xeb\x75\x34\xde\x37\x69\x52\x91\x56\x21\x18\x79\x6a\x46\x79\x03\x56\x5f\xd3\x75\x34\xfb\xd0\x6e\x9c\xc2\xa6\x28\x36\x61\xb7\x62\xad\x61\x36\xcc\xd1\xcb\x19\xf7\x19\x4c\xf8\xac\x1a\x3d\x8a\x39\x49\x0a\x75\xa9\xca\x3a\x34\x32\x21\x37\x37\x1b\x7d\x65\x8c\x63\x59\xdd\xee\x03\x89\x3c\xba\x55\x29\x11\xa2\x25\x40\xfb\xfe\x21\x38\x26\xfa\xd6\x32\xb5\x5a\x70\x53\xc1\xc2\x85\xdc\x09\x5d\x23\xd5\x8e\xa3\x02\x43\xb5\x9e\xdd\xf6\x62\xc1\xe5\xb4\x8a\x50\x5b\x6c\x32\x12\x35\x4b\xf5\x72\x04\xcd\x93\x46\x9f\x46\xf0\xcd"
		"\xb2\x95\x3f\x5e\xdb\xe9\xe8\xaa\xdf\x75\x4c\x88\xa3\xce\x2c\x8d\x4b\x74\xbe\xff\x3c\x0a\x79\x69\xa5\xd5\xc8\x5b\x3c\x2f\x63\x67\xae\x13\x82\x51\x01\x74\x0f\xb4\x9c\xa1\xd4\x7a\x8e\xdf\x09\xb5\x5d\xd6\xf4\xc6\x57\xdc\x77\x48\x7a\xc6\x78\xf7\xb1\x58\x80\x85\x91\xaf\xd8\x04\xa8\xf5\x86\x67\x20\x0a\x96\x05\x32\x83\x15\x13\xc2\x49\x94\x14\x96\xa3\x99\x89\xc3\x94\x66\x86\x51\x5b\xd5\x96\xd3\x80\x89\x11\xa3\xfc\xbb\x38\xe0\x1a\x25\xb7\xbf\x10\xab\x84\xe5\x3f\xf4\x48\x75\x1d\xd7\xfa\x7f\x4e\x45\x23\x84\xf0\xf1\x5d"
		"\xa8\x17\x6e\x5f\x8d\x38\x47\xa0\x5c\x61\x0b\x2c\xa2\x7e\x7c\x58\xb2\x10\x69\xf4\xa1\xac\x72\xe7\xb4\x32\x55\x0a\xcc\x08\xe9\x99\xe8\x7c\x2f\xa8\xa1\x37\x1c\x12\xa3\x4c\xcf\xd1\x13\x2b\x66\x2a\xa5\xa3\x7f\x2c\x56\xb7\x22\xae\x91\x8a\xcc\x97\x9c\x7a\xb4\xf5\xd8\x46\xbb\x11\xc7\x05\xa0\xec\x6a\x9d\xf4\x09\xcf\x33\xf5\xad\xb3\xf7\x4a\x70\xa0\x86\xe2\x1d\x9f\x78\x5b\x2e\xfb\x2e\x4d\x7a\x99\x89\xb0\x03\xab\xd9\xf4\xdb\x2c\xd2\x53\xf7\x74\x64\x32\xe1\x5f\x5c\x37\x3c\x8a\x0e\xb1\x42\xcb\xb1\x6f\x1a\x7c\x35\x70\x48"
		"\x5e\x71\xba\x0b\x8d\x76\xc1\xab\x3b\x18\x19\x56\x64\x6f\x10\x88\xe0\x03\x4c\x58\x28\x25\x17\x67\x5c\xc5\x54\x59\x5d\xd2\x98\xee\xff\x6c\xe7\x27\x58\xe5\x89\x99\x97\x1d\xda\x77\xdd\x3b\x60\x31\xbb\x90\x38\x43\xb6\xe1\x7a\x05\x80\xfd\xd5\x78\xcb\xce\x12\x93\xf1\xfa\xce\xbc\xfc\x1b\x6e\x1e\xbb\x9e\xf0\x4c\x17\x4a\x3a\x9f\xdf\x0a\x78\xf9\xba\x99\xf5\x50\x9e\xeb\x8c\x13\x07\x6d\xee\x2b\x5e\x9f\x33\x65\x19\x72\x7c\x2f\xb3\x9e\x5f\x21\x1e\x0c\x4f\x05\x9f\x6b\x37\xcc\x11\xf1\x3e\x99\xc1\xd0\x7d\x58\xdb\x86\x0d\x19"
		"\x77\x51\xa3\x50\xec\x33\x26\xa7\xc7\xfe\xb9\x44\x28\xb2\xfa\x27\xa2\x95\x95\xad\xee\xf3\x29\x3d\x5d\x68\x34\x55\x68\x55\x76\x3b\xfe\xb0\x5d\x7d\xda\x9f\x89\x2d\xf5\x82\x8c\x7d\x3f\x66\x02\x1d\xf5\x86\x66\xcb\xfd\x54\xe7\x60\x46\x4a\x11\xcc\xa2\x65\x70\x28\x1d\xa5\x03\x95\x08\xbf\x10\x0e\x8b\x8e\x8f\x2b\x87\x1b\x76\xdf\xa3\x09\x61\x57\x7c\x42\x00\xb4\xef\xc4\x42\xf5\x11\xaf\xa8\x27\xf1\x41\x1b\x70\xdd\x71\xe2\xb4\x82\xaf\x54\xc6\x4a\x7d\x66\x60\x83\x60\x17\x46\x30\xb5\x4e\x80\x83\xf3\xf7\x29\xc7\xcb\xf7\xf4"
		"\x75\x4d\xb2\x59\x32\xbd\xc7\xab\x9e\x1c\xf1\xd5\x58\x26\x6f\xb4\x67\xdd\xd8\x36\xdf\xe0\x56\xbf\x3c\xf0\x69\x17\x75\x19\x84\x1c\x8c\x39\x4b\x6f\x7c\x6c\xb2\x3b\xe1\x95\x79\xca\x37\x45\xf0\x5e\x4a\xd6\x94\xac\x3a\x6f\x41\x8b\xcb\xee\x12\xac\x30\x3d\xf5\x21\xb1\x95\xcd\xd1\x41\x02\x92\x4c\xe1\x2b\x78\x4e\x0f\xbf\xed\x01\x9f\xab\xe2\x30\x83\x1d\x30\x41\xc7\x7d\x1a\xb3\xcb\xb0\xa3\x69\x9f\xfe\x5b\x65\x07\x19\x92\xf3\xaa\x94\xb4\xd9\xe2\x13\xac\x40\xea\x2d\xdb\x92\x35\xea\xf2\xc0\x4e\x00\x05\xb7\x26\x64\x69\x78"
		"\xf5\x44\x7c\xdd\x27\xf6\x5a\x42\xa1\x71\x56\x7c\xd6\xb8\xe1\xc8\x9d\x2f\x08\x05\xcc\x0b\x09\x75\xa6\xca\x8b\xe3\xc0\xba\x6e\xf6\x5e\xdc\x7f\xc9\x2a\x0c\x2d\xde\x6f\x3d\x2b\xe5\x77\xaa\x59\x3f\x74\x60\x91\x8d\xe2\xfd\x2d\x30\x9e\xfc\x8d\xc0\xb6\x8e\x17\x38\xaa\x04\x0b\x50\x13\xc4\xf7\x42\xaa\x89\xc9\xd6\x7e\xd7\x78\x44\x7c\xe4\x53\xdd\x62\x49\xbf\x06\x01\x0d\x6c\xae\x60\x40\x30\x79\xc3\xdb\xd8\x60\x1e\xf3\x08\xcd\x22\x74\x4e\xcf\x91\xd8\xf6\x65\xe8\x00\x70\xf7\xb5\x15\x45\x5e\xcf\x01\xa8\x3e\xee\xde\x83\xea"
		"\xf5\xa1\xbc\x16\xfe\xae\x2f\x7b\x13\x7c\x58\xe9\x03\xfc\xcb\x02\x29\x71\xc2\x11\xd2\xf8\x4b\xb2\x78\x61\x01\xa6\xdb\x91\x7b\x0d\xfa\x62\x8f\x03\x39\xab\x3a\xa0\x55\x37\xe7\x31\xc0\x86\x7a\x78\x2d\x31\x8f\x0a\x77\xac\x35\xe7\x73\xd4\xf9\x96\x14\xa3\x8e\x0f\x04\x72\x43\x92\xe3\xe5\xcb\x40\xa0\xd4\x38\xf5\xdb\x0c\x6d\x23\x66\x6f\x51\xfa\x32\x0d\x29\x76\xd4\x94\xca\x71\xed\x94\x43\x4b\x04\x66\x7d\x35\x7d\x14\xe8\xeb\xc2\xf6\x09\xfa\xee\xef\x04\x30\x22\x13\x03\x79\x66\x94\x56\x0d\xdd\xf0\x02\x91\x08\x52\xb5\xfd"
		"\x18\x7e\x89\x06\x4c\x67\xad\x35\x4c\x15\x41\xdb\x89\x44\x81\x51\xef\xec\xdb\xd6\x45\xdf\xc7\x07\x1d\x66\x41\xd9\xa1\x0c\x34\x07\xc1\xbb\x74\xe4\x47\x66\x17\xef\x7b\x06\x12\x2a\x8f\x0e\x26\xf5\xe5\x9a\xdb\xb8\x6d\x9e\x80\xef\xfd\xb6\x17\x76\x1b\x6e\x7e\xc2\xa0\xa4\x05\x0b\x66\x08\x0b\x5e\x15\xc0\xb8\x29\xac\x76\x09\x6c\x46\x1d\x88\x6e\x3b\x2f\x82\x25\x14\x1d\x7b\xe8\x52\xab\x45\xfa\xa3\x74\xe0\xb3\x9f\x74\xca\x6a\xa0\x3b\xb9\x2a\xdd\x51\x6c\x0a\x16\x05\x85\x7d\xd7\xa7\xc0\x89\xc2\xc2\x5b\x79\x85\xe1\xf5\xf7"
		"\x1b\xd6\x57\x66\x20\xb0\x18\x2f\x60\x9a\x2b\x60\x8f\xf9\x91\xae\xff\xc8\x9e\x85\x0b\x34\xd7\xcf\x35\x98\xfa\x08\xe5\x3c\x18\xc1\x60\xb8\x3c\xb5\x26\xa6\xbd\x9e\x6e\x48\x21\x10\x2b\x17\x32\x3e\x2f\x68\xd1\xff\x9a\x5f\x6d\x7c\x9b\x36\x1e\x1a\x69\x59\x6f\x84\x38\x8c\xfc\x78\xd0\xfb\xd8\xfc\x01\x3f\xa2\x5d\xf8\x74\x11\xe5\xc5\x00\x94\x4e\x8a\x14\x95\x01\x76\xde\x98\xc2\x0c\x62\xfe\xc3\x7d\xe5\x7d\x54\x80\xb7\xf9\xc6\x76\x67\x0a\x5b\xbb\x51\xd2\x92\x6b\x9c\xbe\x67\x01\x7a\x21\xfa\x40\xe3\xad\x17\x46\x6f\x2f\xd3"
		"\x39\x5e\xbc\x81\xfb\xd7\x7f\xff\x76\xed\xf6\x7b\x2a\x02\x44\xf4\x5d\x53\x28\x19\x7d\xa3\x3e\xb7\x91\x7f\x9d\xb0\xda\xbf\x88\x43\x4c\xc7\x1f\xf8\x26\x6e\x27\x31\xf4\x57\xca\x66\xae\xc2\x8c\x2a\xa1\xca\x65\xc6\x16\x22\x0b\xad\x56\x5e\x7f\x0f\x7d\x47\x84\x88\xe0\xde\xb1\x23\x4c\xbb\x24\x7b\x83\x76\x4a\x33\xdc\x56\xa9\xb6\x0b\x5a\x83\x87\x3f\xa2\x8e\x82\x92\x05\x91\xd4\xc6\x37\x3d\xc0\xee\xb0\x43\x54\xb6\xbd\x96\x33\xbc\x5e\xe1\xff\x90\xbf\x6e\xda\xaf\x2e\x6b\x92\x27\x6d\xb2\x67\x21\xcc\x03\x16\x9c\xa3\x35\x00"
		"\x91\xf9\xea\xb2\xdf\x6b\xa0\xc2\xc2\x0c\x58\x20\x0c\x9f\x62\xf7\x6f\x52\xa2\x5e\xba\x20\xa5\x63\xae\x1c\xc0\xdd\x4c\x3f\x6b\xa7\xc9\x85\x4f\x65\x46\x7c\x31\x3f\x5c\x77\x8d\x62\xd0\x0a\xca\xe3\xd2\xc1\x7d\x07\xbc\x2d\x28\xee\xcd\xf9\xbc\x4e\x25\xe3\x73\xf4\xc8\xed\xe1\x5e\x1e\x56\x1d\xc3\xd7\xe0\x5b\xc4\x8a\xfe\x13\xe1\xf7\xd8\x89\xf5\xb9\xb4\x82\xf7\xf3\x2b\xbb\x04\xbf\x91\x8c\x51\x1a\xde\x1d\x51\xe2\x51\xac\x64\xd7\xb9\x7f\x6a\x62\xef\xb2\xa8\x27\x27\x88\x38\x5b\x06\x4e\x3a\x1b\x2c\x63\x12\x17\x99\xcd\x9c"
		"\x6d\x57\x16\x75\x45\xf1\x35\x86\x1e\xf7\x65\x34\xcd\x02\xc0\x8a\x5d\xf3\x89\x0c\x9d\x37\x88\xdc\x1b\xea\x66\x73\x3a\x0b\xe4\x2b\xad\xca\x15\x6c\x2f\x6e\xfa\x50\x76\x39\x24\x67\x04\x2f\xf8\x59\xfa\xea\x78\xc9\x2c\x5f\x9f\x98\x3e\xb1\xc6\x27\xfb\x2e\x6e\xe7\x19\x15\x1a\xea\x14\x56\x17\x7c\x5b\xe2\x5d\xb4\xd5\x0b\x4b\xe7\xa8\x80\x67\x1a\xac\x50\x6f\xc9\x7b\x18\x59\xf9\xb3\x65\x82\x2b\xa0\xf3\xf4\x2c\xac\x95\x82\xd1\xfa\x47\x28\x2f\x60\x61\x1e\x84\xb0\x3f\xaa\xf3\xe4\x70\x95\xb1\xdd\x69\x4b\x8c\x5f\xd4\x8e\x83"
		"\x74\xb5\x2a\x0e\x89\xa5\xf9\x0d\x60\xb8\x0e\xa6\x93\xb4\x94\x8e\xff\x62\xdf\xd8\x5e\xae\xa3\x9d\x2f\x56\x70\xb1\x6a\x0e\xe5\x01\x6b\xc6\x1c\xce\x32\xb3\xf3\x07\x7f\xfc\x57\xb1\xd0\x75\xcd\xd9\x14\x36\x5e\x6b\xe3\x80\xe7\xda\x27\x34\x02\xab\xcc\xb9\xf8\x73\xce\x0a\xc1\xb6\x00\x18\x15\x3f\xa9\x81\x67\x89\x57\x7d\xaf\x2f\xc2\x98\x50\x21\xb7\xdf\x65\xfa\xe5\xbd\xab\x04\x90\xe5\x81\xd2\xde\x35\x8a\x61\x22\xb5\x8c\x27\x82\x3a\x1f\x4b\x95\x72\x26\x69\xb6\x9d\x28\xfb\xde\x51\x40\xdd\x55\x3b\x1a\x9d\xe3\x85\x37\x10"
		"\xf5\xc8\x32\x77\x3d\xd0\x6c\xc8\x58\xc4\xeb\x9b\x06\x8b\x1a\xb6\x13\x96\xc3\xf2\xad\xd0\xe2\xe8\xbf\x77\x34\x54\x88\xae\x6c\x0e\xe9\xb4\xee\xf3\x0a\xd2\xf8\xb9\xdc\x02\xd0\x3c\xa1\x6c\x0d\x37\xa9\xea\x96\x3d\x66\x9c\x94\x65\x95\x9f\x1c\xc0\x06\x49\xba\x99\x88\x57\x83\x80\x0e\x53\x03\x4a\x7c\xd2\x8d\x05\x44\x70\xbe\x2c\xea\x0c\xc1\xc5\x2c\x6b\x82\x08\x7b\x4c\xd5\xa2\xb6\x42\x39\x77\x6c\x2f\x58\x7b\x05\xd2\x34\xdc\xe2\x4f\x02\x51\x9b\xdb\xdb\x39\x05\x9a\x0b\xdb\xd6\xab\x16\x04\x96\x9d\xd8\xb2\xa9\x40\x09\x44"
		"\xdd\x0e\x28\x3d\xea\xc8\xc6\x77\xf1\x4b\xeb\xdb\xca\xb3\xbc\x6c\xa1\x26\x2c\x03\xe7\x6c\x28\xb4\x7b\x0f\x94\x0d\x9f\x75\x2f\x1c\xba\x16\x67\xb4\x19\xe5\xcb\xad\x9c\xc3\x0a\xc6\x6e\x43\xfe\xa2\x1b\xb6\x2a\xb8\x10\x20\x2d\xc2\x57\x30\xae\x11\x5e\xc1\x80\x6a\x62\x16\x71\xe6\x5e\x3f\xe0\xcf\xad\x7b\x07\x65\xcb\x7b\xa0\x0a\x8e\xd6\x0a\x68\xde\xd7\xb9\x2d\xca\xb0\x07\x26\x28\x37\x13\x81\x80\x02\x74\xfb\x4c\x47\x11\x8e\x06\xed\x52\x6c\xe6\x6b\x6d\x1a\x34\x32\x06\xb5\xc3\x39\x32\x78\xbd\x33\xd0\x99\x3c\x27\x4a\x06"
		"\x3e\x0c\x23\xe4\xd4\x12\xdc\x3e\x94\xd7\x30\xea\xc3\xdc\xba\x55\x27\x31\x6f\xfc\xd7\xd3\x2e\xf4\x96\x4b\x72\x0a\xe5\xce\x25\x32\xac\x8c\x0f\x8f\x7f\x0e\xa3\xda\x81\x78\x15\xc6\x71\x93\x24\x37\xf7\xaa\x8d\x71\x76\x13\xe5\xfc\x78\x5c\x35\xe5\x34\x61\x4c\xb8\x0b\x2d\xcf\x76\xa1\xae\xb2\xca\xda\x4d\x13\x88\xde\x1d\x6b\x48\x33\xb7\x3b\x97\xb3\xf7\x18\x50\x13\x0c\x38\x91\x0c\xde\x1a\x9f\xb2\xed\x16\xd0\x68\x09\x4a\x14\x59\x0b\xa4\xe9\x23\xe6\x8b\x25\xd0\x6a\x5b\x77\xed\x0c\x4e\x34\x98\xdb\x81\x9a\x34\xa6\x89\x4c"
		"\xad\xa8\x71\xf5\x22\x99\x29\xec\xad\xbb\xac\x67\xa5\x53\xa3\xdb\xa7\xce\x15\x91\x07\xea\xc1\xfb\x66\x57\x47\x5d\x4a\xb7\xf3\xf8\x3f\xb8\x1a\x5d\x6f\xf3\x1d\x97\xf6\xaa\xf9\x37\xaa\xe1\x8c\x57\x57\x5c\x3d\x84\x49\x52\xa1\x6c\xa4\x0e\x1f\x01\x74\x11\xcf\x78\x5f\xac\x42\x6c\xe9\x4e\xa2\xf0\x74\x56\x24\xe9\x57\xaa\xd1\x38\xfa\xd2\x2c\x58\xc1\xaa\xd9\x9b\xd6\xee\x36\x16\x29\xcf\x57\xa3\x85\xef\xb3\x30\x47\xcf\x78\x7e\x1d\x77\xd4\x91\xdb\xeb\xfe\x00\x8c\xad\xe0\xa8\xf7\x65\x39\xeb\xd3\x61\x34\x6e\x27\xcb\xbb\x11"
		"\x38\x65\x39\xc9\x2a\xd7\x67\x0d\xb1\x9a\x4c\x35\x65\x23\x0e\x9e\x76\x6e\x32\x68\x7c\x54\xaa\x52\x4c\x44\xb1\xd6\xc6\x18\x0a\xef\x67\xf7\xc9\x36\xe1\x52\xa4\x97\xfb\x6a\x7e\x8b\x94\x24\xcf\x35\xc2\xf0\xff\x7a\x3b\x76\xea\x5e\x87\x74\xc2\xf9\x3e\xce\x0b\x67\xd6\x75\xbe\x51\x73\xa9\x72\x3b\x43\xe7\xc0\xe1\x08\xc8\x90\x3c\x86\xc2\xb8\xc4\x2f\x5b\x5b\xcd\x16\x5c\xc2\x0d\x02\x1c\x9c\x7e\xfb\x96\x79\xd1\x66\xcc\x23\x24\xae\xe6\xae\x03\xc1\x14\x3c\x99\x70\xb6\x71\x8b\x7e\x5c\x74\x2d\x72\xd3\xcd\x3a\xcb\x26\x2c\x9e"
		"\x4c\x9b\xc4\xdb\xbc\xf9\x76\xf8\x49\x71\x7c\xd7\x27\x29\x50\x5f\x39\xbc\xd2\x78\x91\x56\xe1\x13\xa8\xf9\xb5\x68\x68\x6e\x68\xfa\x1f\x36\x76\xe3\xa2\xcd\x47\xd6\x71\xa5\xd0\xab\x00\xa6\xba\x16\x0d\xd5\x21\xec\xb6\x89\x15\x08\x60\x68\x19\x00\x4e\x6d\xb3\x2a\x65\xf0\xdb\x01\xeb\x5d\xcd\x41\x2b\xed\x57\x4f\x24\xfd\x80\x92\xf0\xdd\x14\xd4\x0e\x87\x5e\xdd\x20\x2a\xe2\x31\xf0\xa7\x05\x87\x29\xa2\x71\x9c\x99\xa2\xf7\xc0\xbb\xbb\x3c\x3d\x36\x1a\xe3\x89\xed\x80\xc3\xe7\x1b\x72\x4f\x85\xbe\x5e\xe1\xdc\x55\x18\x4e\x47"
		"\x2a\x1a\x6e\xab\x34\x07\x02\x0c\x7f\xb5\x0a\xbe\x4a\xc4\xa9\x85\xc7\x82\x0f\xbf\xf4\x9f\xcd\x8b\x45\xe8\xb3\x1a\x36\xf5\x63\xfb\x48\xa3\x6f\x0a\x18\x6b\xbf\x0f\x10\xb7\xae\x2a\xc9\xda\x8a\x8d\x68\xc7\x7c\x26\x99\xef\xa0\x3c\x56\x90\xa1\x55\x98\xe6\x45\x51\x0c\x44\x90\xb8\x3a\xb0\x02\xc7\x58\x12\x4a\x3a\x44\x07\xaa\xda\x3e\x72\xff\xe1\x1b\x21\x97\x28\x21\xa5\x9f\x36\xc4\xc0\x1a\x49\xe8\xf3\x1f\xa9\xf6\x50\x12\x97\x39\x85\x8e\xe8\x5f\xa1\x8c\x9c\xa8\xaf\xd9\x9c\x81\xcd\xcf\x45\x20\x45\xca\x07\x35\x42\x9c\x9c"
		"\x7c\x33\x0f\x26\x51\xa2\x38\x0e\x05\xe1\x96\x77\x61\xe7\xe9\xe4\xab\x01\xad\xf9\xa6\x02\x71\x4c\x77\xb6\xd6\x5f\x0a\xcf\x3c\x3a\x73\x78\xc0\x56\x3c\xf4\x1d\x91\x78\xf6\xc0\x9f\x11\xab\x68\x6e\xe9\x5d\x0e\x6a\x37\xbd\xdb\x7e\xab\x32\x77\x9e\xf2\xe6\xf3\xd5\x31\x9a\x55\x42\x06\xfa\x8f\xbc\x6e\x79\xc4\xad\xd7\x4f\x2c\xa7\x69\x4f\xde\x9c\x94\xb8\x93\x41\x4f\x99\x8b\x0b\xc3\xe5\x26\x14\x04\x14\x2d\xd4\xe5\x93\x3a\x8c\x83\x2e\xf2\xc5\x06\x99\xec\x09\xf1\x6d\xcf\x69\x71\x10\x31\xa7\xa1\x94\xa2\xe6\x11\x73\xb4\xc9"
		"\x68\xed\x0c\x77\xc6\xbb\xc0\x60\x97\xa0\xd8\x33\x9d\x0b\xd7\x37\x2a\xb6\x1f\xd1\x4b\x64\x49\x2e\x58\x03\xb0\x83\xc7\xd8\xfe\x03\x46\x83\xaf\x46\x91\x72\x0f\x9c\x76\x1e\x92\x5c\x0c\x76\x92\x2d\x3a\xf2\xa6\x8a\x3f\xe3\x36\xcc\x80\xbf\x4b\x88\x1c\x0a\xbb\x7f\x3b\x54\x42\x02\x15\xf2\xb9\x64\x2f\xb8\xc6\x34\x0c\xe2\x8b\x8e\xb3\xd9\xf1\x02\x0b\x2f\x5a\xdf\x05\x0c\xf2\xb1\x88\xd7\x83\xd7\x85\x1b\xcd\xd2\xb7\xa7\x57\x92\x8d\x2e\x0d\x7a\x6a\x8f\x9e\x61\xee\x55\x22\x67\x25\x07\x98\x77\x2f\x54\x09\xb8\xd2\x1e\x6f\xb9"
		"\x07\x6c\x68\x97\x5c\x54\x73\x13\xd1\x20\x85\x99\x98\xae\x9d\xfa\x27\x06\xcc\xfa\x83\x10\x17\x70\x5e\x1d\x05\xc3\x4b\xab\x4b\x78\x73\x78\x58\xda\x49\xe3\xbb\x26\x2d\x3c\xb4\xb9\x11\x20\xa9\xfa\xb7\x22\x57\xcf\x09\x0e\x98\xdd\x35\xa4\x71\xdc\x02\x59\x18\x15\x45\x04\x31\xb1\xb8\x13\xb1\x56\x8a\x1c\x25\x3c\x01\x65\x09\x62\xff\xad\xff\xe5\x91\x97\xb0\xd9\xe0\x1d\xe7\x7c\xe9\x24\x33\x87\xf6\x53\x98\x58\xc1\xef\x5f\x41\x47\x90\x96\x02\xb9\x6f\xa2\xa1\x52\xa4\x37\x88\xc6\xd8\xe9\xed\x57\x61\xd1\xd1\x2b\x9b\xec\x25"
		"\x24\x57\x4b\x85\xdc\x5b\xcf\x80\x6e\x9e\xde\xb2\x66\xd2\x38\x23\xf4\x13\x0a\x55\xbd\xa1\xd3\xba\x4f\x00\x07\x61\xfb\xbc\xcf\x06\x13\xfe\x8a\x9f\x29\x22\xe9\x9a\x53\xc7\x6b\x51\x0d\x9d\xcc\xda\x47\xfb\xe2\x3a\x8f\xbd\x0f\x1f\x0e\x86\x48\x01\x90\xf3\xdd\xc1\x01\xae\x90\x5b\x2a\x8b\x5c\x4c\x7d\x34\x85\xf7\x35\xce\xc6\x91\xf9\x17\xd2\x53\xe3\xd9\x37\x37\xf8\xa3\x48\x8a\xcf\x87\x36\xe7\xf7\xc7\x96\xed\x23\x3f\x81\x9b\xcc\xe9\x5c\x32\xfa\xa0\x8f\x53\x22\xde\x2b\xd5\xea\x87\x40\x28\xdc\xbc\xa2\x23\xab\xa0\x22\xcf"
		"\x8b\x87\x83\x63\x82\x0c\x37\x2f\xb3\xa2\x94\xb2\x5d\x1c\x53\x41\x0c\xf1\xda\x35\xea\x6b\xae\x34\x85\xe9\xaa\x32\xa3\x76\x89\x06\xb6\x45\x09\xc3\x94\xb2\x35\x32\x00\xb2\xcc\x6e\x1e\x46\x41\x2a\xe0\x50\x01\x56\xab\x0d\x57\xb9\xc5\xd2\x8e\x68\x8b\x1c\x02\x0c\xe5\x73\xe9\x4b\xae\xac\xf9\xbc\x70\xd5\x94\x89\xd8\xcf\x25\xb2\x65\x33\xbf\x4c\x4e\x0d\x5f\xc6\xb0\x2c\xf0\x0b\x65\xcd\x53\x1c\xbf\x34\xc1\x62\x15\x79\x2f\xd1\xc7\xde\x70\x50\xa1\x6d\xb0\x56\xeb\x83\x73\x4a\x73\x42\x0a\x0e\x9e\x86\xfc\xa7\x97\xb9\x9c\x94"
		"\x50\x8e\xb0\x0f\x3f\x02\x99\x75\xe7\x49\x27\x98\x4f\x2e\xd5\x1b\x6a\x0b\x63\xc5\xe4\x9c\x8e\xc0\x34\x93\x1a\xfc\x76\x39\xe0\x90\x87\x77\x49\xff\xa4\x7f\x05\x64\x84\x7a\x0a\x54\x5a\xf7\x6c\xb8\xb4\x8e\x2d\x04\xc5\xba\x38\xd0\xfb\x98\x9f\xda\x04\x6c\xab\x9b\xad\x8b\x69\x3c\x43\x55\x16\x51\x99\xb0\x1d\xbf\x82\xcf\x52\xcc\xac\x5e\x16\xf5\x5b\xb0\x70\xd1\x42\x3a\x20\xa1\xb7\xd5\x42\x8d\x40\xac\xc6\xb6\x29\x6b\x15\xeb\x8e\x17\x29\xd2\x39\x5a\x0a\x99\x2a\xf0\xe8\x60\x03\x33\x93\x6f\xa5\xdb\xd0\x9c\x7a\xdd\x41\xd9"
		"\x6c\x80\x2a\x6f\x88\xe0\xc9\xeb\x2c\xad\x46\x80\x96\x26\x57\x03\x1d\xe1\xb7\x8a\x08\xe9\xb7\x0c\x6c\x9c\xa7\x5a\x0e\xe3\x16\xd1\xd8\x00\x6e\xf5\x95\x27\xfd\xd4\xd5\x38\x42\x8c\xed\x2b\x34\x17\xc3\x2f\xda\xd0\xbf\x63\x4b\x44\xef\x2b\x41\xf0\x4a\x8d\xc0\x00\xe5\xd2\xd8\x3c\xe8\x0a\x3f\x16\x0f\xcb\x12\x97\x37\x5c\x03\x40\x5e\xc1\x58\x4f\xee\x1e\xd0\xfc\xc6\x0b\x14\xd9\x75\x18\xe7\x1a\xd1\x3f\xd8\x4e\x8f\xe5\x5b\x0b\x71\x9e\xa6\x2b\x77\x7c\x91\xd4\xde\xed\x12\xb7\x14\x76\x5b\xfa\x80\xfc\xa8\xf2\x0e\x9e\xde\x17"
		"\xb4\x43\x86\xf3\x2a\xef\x6d\x75\x41\x17\xf0\x5b\xb3\x3d\x9a\xd7\x3a\xc1\x19\xd5\xd8\x3a\x78\x7b\xe6\x9c\x90\x1b\x93\x48\x8f\x05\x54\x30\x16\x96\xca\xdb\x42\x2d\x60\xf8\x02\xab\x8c\xc8\x57\xf7\x9d\xa4\x94\x04\x90\xb5\x66\xd2\x7b\xbd\xf4\x28\x90\x18\x46\x30\x48\x54\x92\x5c\x06\xe2\xdc\xaa\x9c\x12\xb6\x22\x90\x9c\x28\x86\xdd\x97\x5d\xec\x2f\x42\x15\xa5\xa4\x89\xe2\x53\xcd\xaf\x37\xa0\xb6\x76\x85\x98\x11\x04\x4b\x07\xcb\x5a\xa4\xa0\x7f\xeb\xad\x1e\x1a\x7f\xb5\xd8\xba\x66\xce\x09\xba\x3c\xf0\x08\xac\xdd\xf3\x5a"
		"\x0a\xf3\x0f\xc4\x24\xf2\x93\xf1\x68\x34\x0e\x05\x2f\x37\xab\x5f\x8e\xa3\x3f\xd5\xa5\xbe\x08\x9a\x28\x50\x7b\x98\xdd\x13\x8a\xd0\x49\x88\x44\x6a\x37\x65\xc6\x06\x5c\x95\xb0\x72\x21\x02\x98\x3d\x7f\xad\x4b\xf3\x6f\x74\xcb\x1f\x3b\x45\x6a\x19\xf2\x43\x6e\x6f\xd4\x63\x1f\xf9\x2e\xac\xac\x10\x69\xf2\x09\x5b\xc5\x59\x7e\xed\x3c\x0f\x17\xe4\xd7\xb9\x34\xb8\x30\xc8\x60\x98\x9a\x14\x0e\x75\xc7\x3e\x24\x88\x61\x96\x6b\xe2\xae\x85\x51\x0b\x58\xcd\x06\x82\x77\x33\xf3\xe9\x0b\xbd\xac\x44\xa2\xc2\xc5\xab\x03\x10\xb9\xc7"
		"\x16\x82\xcc\xf1\xae\xc0\x2a\x2b\x5e\x50\x91\xfc\xcb\x28\x77\x1b\xf6\x11\x0b\xe7\xb8\xd1\x14\x3e\xaf\x1f\x61\x70\xd3\x14\xb3\xa2\x3d\x8d\xf1\x6e\xf4\x30\x26\xe3\xde\xed\x9d\xf2\x0e\x5b\x82\x4d\x40\xf4\x62\xf1\xbe\xd9\x32\x43\x4d\x45\x6c\x07\x3e\x0f\xec\x41\xb6\xe7\x95\x11\x60\xb4\x68\xbf\x5a\x71\xa6\x6e\x5f\x47\xb4\x0f\x12\xf8\x13\xc6\xf5\x1c\x46\x47\xb0\x03\x72\xab\xd7\x46\x2a\xd9\x2d\x00\x5f\x85\x2a\xf5\x3c\x8a\x9b\x76\x28\x00\x47\x3a\xdf\x6c\xb7\xae\xa3\x25\x1c\x15\x35\x2b\x39\x74\xfd\xc5\x6e\xc0\x9b\xf0"
		"\xb0\x65\xd5\x04\x5b\x84\x2a\xb1\x24\x02\x06\x2c\x39\x36\x9d\x67\x19\x84\x30\x43\xfa\xeb\x44\x75\x78\x17\x47\x4e\x8d\x84\x5b\xa5\xe5\xc4\x28\x40\x3a\x83\xac\x59\xad\x79\x3b\xd3\xb4\x3b\x9e\x62\x1f\x1f\x97\xca\x41\x80\xbe\x8d\x1b\x76\x03\xc9\x40\x84\x13\xa6\x0d\x4d\x67\xe3\xdf\x0e\x10\xb0\x79\xa5\x8f\xc9\x70\xf2\xd9\x03\x01\x7e\x39\x54\x51\x4a\x2a\xe8\xdf\xa6\xc6\x9d\xe7\xb7\x7a\xa0\xe7\x9a\x4f\x73\xde\x53\x40\x21\x6a\x5e\x84\x36\xe0\xe4\x13\x51\x9f\x2e\x6f\x97\xd2\x38\xb4\xde\xe3\xa1\x55\x27\xce\x94\xa2\x88"
		"\xff\x3a\xa3\x71\x0e\x1a\x5a\xe5\x4f\x21\xe0\x7c\x27\x48\xcb\x79\x9a\xfa\x01\x5f\x38\xad\x2b\x64\xca\x39\xf9\x66\x06\x49\xa0\xa5\x4b\x85\x95\xa3\xbe\x2b\xa7\xa9\x57\xe9\x1e\xf8\x52\x56\xac\xbf\xae\xb3\xf9\xea\xd8\x92\x49\x7e\xfb\x2c\xe9\xbb\x15\xb4\x2a\xbc\xe9\x4d\x78\x77\x9c\x8d\x50\x6c\x2f\x88\x37\x16\xa9\xf2\x83\xd8\x01\x15\x3e\xbe\xe7\xb9\x91\x49\x84\x74\x95\x35\x9a\xfc\x2a\xa9\x15\x6f\xb9\xc1\xd6\x88\x19\x37\x6d\x0d\x68\xda\xb8\x94\xdd\x2b\x25\x10\x67\x52\x66\xc7\xac\x44\x8d\x7a\x1d\x40\x3b\xa5\xf5\x17"
		"\x5f\x19\xdc\x33\xa2\xfb\x55\x33\x46\x1d\x50\x1f\x43\x5b\xff\x2c\x76\xe0\x98\x26\x86\x4f\xd3\x8e\x4e\xf6\x47\x31\xc8\x4d\x0e\x87\xde\x25\xcb\x22\x9e\x0b\x3c\x5f\xf4\x9d\x3e\xc8\x13\x61\x51\x09\xc7\x1f\xed\xee\xad\x59\x31\x5d\xae\x69\x8a\x16\x09\x65\x15\x51\xab\xa8\x87\xb1\x02\x03\x81\x28"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries2), 0xc79);

	const char parameterData[] =
	{
		"\x78\xda\xad\x7d\x3b\x9b\xe3\xc8\x92\x5d\x22\x12\x00\x41\x16\xab\x9b\x33\xc3\x3b\x5b\xab\x2d\xe9\x2b\xa3\x8c\x32\xda\x68\x63\x8c\x36\x64\xb4\x21\x63\x8c\x35\xae\x21\xe3\x1a\x32\xae\xb9\xa6\xfe\xbf\xb3\x02\x48\x24\x11\x71\xe2\x44\x26\x6a\x56\xed\x74\x11\x6f\x24\x32\xe3\x79\xe2\x44\x4a\xff\xf9\x9f\x69\xfe\xd7\x3f\xfe\x17\x39\xaf\x7f\x4f\xa9\x4b\xeb\xdf\x32\x3d\xfe\xef\xd2\x25\xe5\x74\x7d\x1c\xbf\x1c\x23\xf3\xb6\x71\xdd\xd6\x95\x6b\x95\x73\x96\x6b\xa6\xc9\xec\xeb\xd4\xfd\xba\x34\x99\xbf\xf3\x7c\xbd\x61\xbe\xde"
		"\x54\xee\x21\xe4\x39\xe6\x63\xef\xc7\x5d\xdd\xef\x43\x7a\xdd\xce\x93\xcb\xfd\x7e\xe4\x59\x12\x79\x16\xfc\x7f\xb9\x6f\x56\xef\x76\x3f\xff\xfe\x7c\x7a\x8c\xf2\xed\xbe\x2f\x70\xfe\xf4\x38\x9f\xdd\x7b\xb9\x4e\x3f\x9f\x37\xaa\xf3\xb6\x6d\xaf\xf3\x91\x6f\xf6\x9e\x72\x35\xd7\xe9\xe7\x6d\xe3\x3a\x4e\xa7\xf9\x1a\xe7\xf9\x9c\x2f\xea\x9c\x32\x96\xd1\x38\xb3\x67\xea\xe0\xf8\xe5\xbe\x13\xbc\x6b\xf4\xb7\x94\xe3\xf2\x7c\xde\x3a\xee\xdb\xf7\xda\xbe\x85\xfe\x2e\x8f\xf9\x24\x2f\x66\x1f\xfe\xc6\x63\xfb\xf9\x3d\x0f\xf2\x11\x9f"
		"\xa3\xc6\xdc\xbe\xd3\xfd\x5b\x0d\x65\x8e\xc0\xb6\x43\x7a\x87\xf7\xbf\xdc\xe6\xd4\xa8\x8e\xbf\x8f\xfb\x75\xde\xdb\xfe\x6e\xfa\xda\xd1\xf6\xe5\x9e\xa7\xf4\xa1\xe6\xf1\xf2\x6d\x2f\xf3\xf6\xe5\x1e\xaf\xe1\xf3\x1c\xd5\xb3\x96\xf9\x10\xfd\x2e\xf7\xeb\xe7\x67\x9e\xd6\x73\x9f\xe6\x7b\x7e\x4d\xdf\xd3\x2f\xe9\x47\xfa\x2d\xfd\x4f\xfa\x6c\xe3\xfc\xcc\xa7\xdb\xb1\xdf\xd2\x73\xfa\x63\x3e\x7e\x39\xf6\x67\xfa\x5b\xfa\x33\xfd\x4b\xfa\x77\xb7\x4e\x96\xeb\x1f\x6e\xef\x7a\xbf\xbe\xbf\xe6\xcb\xed\x9a\xd3\xbc\x6f\xb9\xe6\x79\xbe"
		"\xe6\x97\xf9\xde\xbf\xcc\xd7\xfc\x75\xbe\xe6\x35\xfd\x1d\xc6\xf4\x3e\x0e\xb5\x35\x83\x6b\x6c\xef\xef\x7e\x7d\x16\xbf\x66\x2f\xe1\x3a\x6b\xad\xa5\xda\xdf\x8f\xb5\xd8\x4d\x8f\xff\x6f\xf3\xb9\x7b\x79\xfc\xce\xdd\xbe\x7b\xe7\x75\x6c\xf4\xb6\x61\xde\x76\x20\xc7\x0a\x39\x56\xdc\x75\x27\x90\xa7\xdb\x38\x6c\xef\xa1\xc6\x26\x4f\x8f\xf5\x8e\xfb\xe5\xf1\x6d\xb6\xdf\xb9\x8c\x73\x65\x0d\x57\xf7\xaf\xf2\xc3\x5c\x5b\xfd\x5e\xe4\xfb\x43\xfe\x90\x6b\x4c\xf3\x3c\x2f\xfb\xf2\x7c\xde\x41\x5e\xb6\xf5\xc8\x64\x90\xfe\x9d\xa7\x6d"
		"\xfc\x96\xf7\xce\xf3\x1a\x64\xb2\x46\xeb\xa9\x65\x9c\x8b\x1e\xcd\xd3\x6d\xbe\xe9\x73\xaa\xb2\x92\x8c\x05\xbb\x57\x06\xb9\x68\xf4\x9c\xf0\x6f\x65\xfe\x66\xdf\x75\x3d\xaf\x57\xf7\x34\xdb\x93\x7a\x96\x1c\x9c\x93\x27\x33\x56\xcb\x5a\x9d\xe4\xcd\x5e\x6f\x3d\x26\xcb\x36\xb6\x7a\x1e\xb1\xe7\x12\x78\x2e\xbd\xef\x71\xcc\xa2\x07\xd2\x0b\x9f\x07\xb3\xcc\x39\xca\xf7\x59\x9e\xfd\x08\xbf\x33\xd5\x55\xfa\xbd\x13\xdc\x23\x91\xe7\x80\x6f\x4a\xef\x01\xdf\x21\x65\x3b\xb7\xcd\x6f\x78\x3f\x73\x8c\xbc\xf0\xdf\x99\xcc\x03\xfc\xce"
		"\xa0\x33\x85\x7d\x77\x98\x3b\x7a\x1d\x30\x99\xa0\xcf\x31\x63\xa6\x8e\xb9\xdb\x53\x7e\x3c\x6e\x6b\x64\x91\xc9\xf9\x2d\x9d\xe7\x35\xfb\x5c\xd6\x6c\xde\x9e\x6d\x28\x6b\x56\x1d\x7f\x28\x73\x0b\x65\x44\x9e\x1e\x76\x5a\xa7\xed\x90\x75\x8d\x76\x60\xe7\x69\xfd\x8b\xba\x62\xd0\xfa\x5e\xb6\xf7\x2b\xba\xec\x24\xdf\xe9\xb8\x67\x79\xa1\x73\x4a\x98\x2d\x44\x6c\xa4\x48\x76\xd6\x6c\xa7\x45\xce\xdc\x9e\x6b\x1e\xc3\xa3\x92\x7b\xcb\xbe\x7e\x1d\xaf\x29\x7d\x80\x3d\x6f\xaf\xd9\x67\x7f\x1c\x5b\x77\xf7\x71\xb8\x1a\x99\x27\xe0\x07"
		"\x18\xd9\x4c\xd6\x96\x93\x89\x02\xf2\x92\xc8\x7a\xf4\x33\x3a\x9c\x1f\x20\x13\xf5\xb5\xfb\xc0\x0e\xc5\x71\x67\xc7\xd3\xe7\x96\x58\x76\xe2\x7a\xab\x7d\x37\x76\xff\x0e\xd6\xe1\x28\x56\x0e\xe9\xeb\x0d\x70\xbd\xf2\xad\x8f\xf2\x51\xbd\xef\x72\xaf\x21\xc3\x71\xeb\xf6\x71\x5d\x5b\xcd\xb5\xa2\xe6\xd1\x20\x6f\xd6\xa6\xad\xd9\xed\x6a\xfb\x84\xf7\x97\xfb\xb5\x42\xfd\xc3\x7e\x93\x39\xa0\xb7\x15\x1d\xa3\xe5\x81\x04\x7a\x92\xca\xb2\x55\xef\xf5\xfa\x3b\x28\x3f\x68\x93\x0b\xaf\xea\xfc\xb3\xff\xbb\x36\x37\x82\xf5\x61\xf4\x6d"
		"\xbe\x84\xf3\xd5\xfd\x5e\xc7\xd8\xf8\x20\x4c\x37\xce\xb2\xe2\x49\x7e\xb8\xeb\xf4\xf3\x37\x18\x6e\xfb\x17\x7b\xfd\xbb\xb3\x75\xa8\x2f\x1f\xdc\x57\xef\xcf\x12\xd8\x44\xf0\xf7\x18\xad\x1b\xa2\x57\x6e\xfa\x60\xf1\x59\x60\x8e\x19\x39\x0a\xc7\xb2\x79\x7f\x94\x37\x6e\x47\xa1\xee\x97\x4b\xa8\x2f\x3b\x65\x53\x2f\x3e\xd1\xd3\x7c\xaf\x2f\xc5\x67\x03\xfb\x2d\x57\x64\x4c\x27\x44\xff\xe9\x73\x20\x4e\x83\x6b\xfc\x31\x27\xcd\x3b\xcd\x3e\x81\x8a\x27\x44\xeb\xb4\xd8\x4b\x67\xf9\x39\xeb\xe3\x3f\xbd\x0c\x08\xd6\xcc\xc3\x5e\x90"
		"\x4b\x68\x03\xa3\x5d\xc5\xe6\x2d\x5b\xef\xa3\xdc\xe7\xab\x91\x7d\xda\x0e\x88\x64\x3f\xb9\x87\x54\x6c\xdd\xe8\xef\xe8\x19\xd0\x76\xc5\xf9\xde\x45\xf6\xde\xe3\xba\x57\x6a\x1b\xa2\x2d\xc5\xf4\x75\xa8\x7f\x94\x3d\x10\xda\x4d\x6c\xdb\x3a\xbf\xa2\x77\x2d\x73\x64\x9c\xe7\xc8\x41\xd9\x69\xd1\x3c\x1e\xd2\x4b\x75\x7e\x9a\x67\xac\xd8\x35\x68\x0f\x9a\x6b\xc0\xf3\x37\xf5\x02\xac\x09\xa3\x5f\xcb\x6f\xf0\x5d\xa2\x38\x67\x89\x6f\x8c\xf2\xba\x6b\x0e\xe1\xbb\xd7\xc6\x42\xbf\x6b\x97\xb8\x9f\x4b\x65\xff\x3a\xcf\xf4\x37\xae\xf9"
		"\x83\x02\xef\x33\xe8\x98\xa6\xd9\xb6\xc4\x8f\x30\xce\x78\x79\xc4\xbf\x8e\x2e\xf6\x03\x71\x2b\xb9\xdb\x06\x5f\x67\x7d\x72\x49\x7f\xa4\x5f\x8b\x3f\xa6\x7d\x66\xe1\x3e\x14\xea\x30\x67\x0b\x2d\x36\xbf\x70\x3d\xa2\xd7\x9f\x44\x3a\x76\xf9\x8e\x28\x17\xd5\x9a\xbe\xaf\xdb\x6b\xc5\x87\xbb\x06\xd7\x22\xbe\x65\xb2\xfe\x5c\x0f\xdf\x04\xd7\x6d\x14\xdf\x88\xe2\x1f\x35\xfd\xd6\x92\x67\x52\x59\x33\x4e\xb6\xbb\x79\xd7\xd3\x73\xd0\x96\xd5\xef\xd7\x55\x62\x22\xe5\x1a\xce\x6f\x21\xef\xa2\xff\x5e\xd6\xf2\x21\x7d\xd2\x7e\x4c\xc4"
		"\x7f\x96\x4b\xf5\x9e\x65\x9c\xdd\x98\xc2\x36\xbd\xce\xfb\x1d\xb2\x81\x3d\xdf\xcd\xbe\xa6\xb1\xeb\x17\x92\x73\xb1\x3a\xfa\x26\xcb\xf0\x39\x33\xf7\x07\xab\xdf\x1e\x62\x9b\xf4\xff\x8a\x5e\xde\x15\xbf\x97\x0b\xd7\x1f\x10\x5b\x72\x7a\x23\x93\x98\xa4\xd8\xf8\x87\xcc\xef\x7c\x24\x7e\x22\x93\xc7\x54\xf7\xa3\xaf\xa2\x75\xf7\xe3\x79\xaf\xbb\xc6\xea\x91\x4b\x90\x57\xea\x5f\xb9\xb8\xb7\xd2\x2f\x22\x17\x1a\x8f\x38\xaa\x98\xe9\x60\x64\xca\x99\x3e\x87\xe8\xd8\x74\xf1\x1d\xd5\x18\x2c\x3a\x7d\x22\xbf\x97\x31\x7c\x9a\xef\xf5"
		"\xf0\x09\x92\xfd\x8e\x3a\xe7\x56\x74\xc4\xb0\xc6\xee\x27\x26\xd7\xf0\xef\x6c\xbf\x3b\x1e\xd7\x77\x2f\xce\x7e\x99\x98\xdd\x1e\xd9\xab\xc5\x97\x43\xbb\x67\x9d\x03\x4f\x5a\xef\x8b\xb7\x37\x96\xdf\x27\x7d\x3f\x1c\x37\x35\xff\x9f\xcb\x37\x41\xdb\x05\x7f\xbb\x1c\xe1\xa6\xb7\x1f\xf6\x06\xc4\xe1\x7a\xf5\x6e\x35\x9b\xbc\x87\xb8\x9b\xa0\x9c\xca\xd3\x23\x2f\xa2\x7f\x1f\xcc\x39\xc4\x97\x55\x36\xea\x4d\xdf\xe4\xfb\x9c\xf8\x32\xeb\xf5\x4b\xfa\x49\xe3\xe1\xec\xf9\x6e\xf7\x62\x31\xf7\xd0\x87\xb9\x84\x31\x2c\xf4\x8d\x44\xae"
		"\x3c\x1e\x4a\xe4\x85\xd6\xc9\xe6\xbd\x20\x16\xd6\xa1\x8d\xef\xe6\x28\x89\x93\x18\x9b\x61\x1e\x93\xbc\xfa\xd0\xdd\x14\xc6\x1d\xd0\x46\xd5\x76\xf0\xe6\xc7\xbe\x42\xce\x65\xc9\xf5\xbd\xde\x64\x78\xc9\xb5\xe1\x5a\xc4\xfc\x7d\x9c\x2f\xbd\x10\x59\xb6\xda\x37\x9d\x92\x73\xdd\x79\x7f\x8c\x1b\xf4\xcc\x91\xe8\x1f\xfa\xbd\x20\x2e\xc5\xe4\xb2\x89\x79\x16\xb9\x50\xe6\xb8\xce\xb1\x75\x88\x65\xf0\xf1\x19\x13\xcb\x51\x79\xee\x3e\x29\xfd\x18\xc4\xc6\x8a\x6e\x46\x9c\x40\xd1\xdf\x1d\xe0\x04\xf4\x75\xb7\x3c\xf4\x7d\x0c\x97\xb9"
		"\xdd\xdf\xf2\xb1\xf7\xed\x39\xd9\xf8\xd5\xc0\x74\x33\xc9\x27\xb1\x9c\x91\x97\x41\xc4\xfe\x4b\x10\xf7\xaa\xd8\x58\xf7\x67\x7d\x0b\xd7\xd0\x29\x7f\x4f\xcf\xb3\x6c\xf8\x5a\x64\x43\x14\x6b\xc3\x78\x02\xea\x3c\x1d\x8b\x41\x59\xf5\x59\x7b\x6f\x97\xdd\x43\xe6\x30\xc4\x02\x1f\xf1\x54\x95\x77\x7c\xd2\xef\x5a\xbe\x67\xf6\xb6\x98\x8b\x8d\x90\xeb\x46\x76\x3a\x1b\x9f\x01\xec\xd6\x03\xea\x65\x12\x0b\x47\x5d\x88\xfb\xb5\x8d\x36\x4a\x3d\x37\x57\xc6\xd2\xe4\x5f\xc1\x27\xed\xd7\xfc\xe0\x12\x6f\xc3\x78\x71\x1f\xac\x73\x96\x87"
		"\xeb\x00\x67\x22\x3b\xbf\x2b\xca\xd6\xbe\x96\x5b\x59\xf7\x53\xd9\x23\x6f\xde\xfe\x95\x38\x6e\xe8\x64\x08\x89\x07\xe7\xc6\xf3\x65\x75\xfc\x40\x72\xa1\x7a\x6e\xd2\x18\x22\xc4\x6b\xca\x33\xea\x67\x62\xdb\xb4\x2f\xbe\xc8\xa3\xe2\x3b\x08\xe4\x3f\x7b\x12\x97\xa0\xb1\x64\xb6\xce\x11\x2b\x91\x14\x66\xa2\xb3\xcf\xd4\x75\x76\x9f\xd6\x47\x99\xe5\x88\x31\xcf\x44\x7c\x94\xe5\xd9\x27\xb0\xed\x8c\x9e\xcd\xdb\x3d\x85\xc8\x11\x7c\xe6\xc7\x3d\x3b\xfb\xdd\xcc\x9c\xee\xa6\xfa\xf6\xce\xeb\x10\xb3\x2f\xf2\xed\xb5\xbf\xd8\x59\x7d"
		"\x9e\x93\xbd\x76\xb1\x1b\xac\x7e\x7c\x51\x18\x11\xef\xdb\x64\x65\x07\xa2\x0e\x12\xd0\x71\x34\x16\x03\x39\xc4\xa2\x1b\x11\xbb\x16\xdd\xc7\x61\x61\xe4\xec\xfd\x0e\xb2\x8e\xcd\x37\xcf\x95\xb5\x4f\x7c\x06\x6d\x6b\x62\xac\xc2\xe5\xad\x08\x36\x2d\x07\xd8\x46\x21\xf1\x5b\xfb\x5c\x67\x9e\x23\x65\xc7\xd6\xe2\x23\x90\x27\xef\xcd\x33\x9c\xc3\x3c\x35\x1b\x23\xe6\xcb\x57\xe3\xb8\xb8\xde\xc4\xdb\x1e\x2c\x97\x39\xe2\x98\x26\x3b\xce\xec\x3b\x97\x7b\xe9\x7c\x50\x0f\x71\x5e\x7d\xdc\x22\xcb\x9e\xe5\x7b\xf8\xce\x42\x74\xa4\xce"
		"\x7b\x86\x31\xee\xc6\x98\xe0\x77\xcb\xb5\x31\x52\x73\x6a\x19\xfb\x61\xcd\xd3\xe0\xf5\x0f\x02\x39\x37\x12\xcf\x14\x16\x13\x05\x9f\xd1\xda\xa8\x57\x83\xad\x38\x80\xdd\x59\x6c\xb0\x09\x62\x54\x83\xc1\xd4\x9d\x09\x16\xef\x6a\xec\x6c\x8e\x8b\xe9\xdd\x33\x44\xf9\xda\xfa\xf5\x97\xb8\x8b\xc5\x11\xb3\xbf\xad\xfd\x6e\x7f\x4b\x9e\x5c\xee\x53\xe0\x78\x21\xe7\x2f\xcf\x9e\xd5\x7b\x4a\xbe\x84\xcf\x2d\x4e\x4f\xf0\x98\x12\xc3\xab\x78\xfc\x8a\xb2\xd3\x55\x3c\xc9\x61\x96\xb3\x8f\x43\x3f\xe2\xb7\x6a\x8c\x07\x88\x25\xf4\x05\xbb"
		"\x93\xde\xaa\x58\x36\x36\xfe\x26\x4e\x8e\x76\x3d\xf1\xa9\x7a\xf7\x4d\x2e\xa1\xcf\x55\xc3\x55\x69\xff\xab\xc4\xee\xb3\xce\xdb\x67\x9f\x27\x2b\xeb\x9f\xe2\x9e\x65\x8a\xfd\x72\x41\xfd\xa7\xe6\x71\xe3\x39\x25\xca\x4b\x8a\xcd\x5b\x88\x5c\x9d\x0e\x14\xc0\xb5\x44\x39\xb5\x0e\x30\x66\x03\xc8\xae\x81\xac\x83\x01\x62\x96\xe6\x1b\x62\x4c\x54\xee\xe3\x3b\x89\x1d\x8f\x29\xb1\x1c\x8f\x8d\xaf\x32\x9d\x88\xb8\x2a\xcc\xe1\x76\x90\xe3\xe9\x95\xff\xa3\xdf\xfd\x00\xf6\x75\xcd\xd6\xc6\x98\x20\xd5\x99\xd9\xdb\x48\x35\xdc\xa5\xf9"
		"\xee\x65\xbd\xe5\x35\x8e\x6b\xf0\xdd\x1b\xfe\xbf\xd3\xb9\xbc\xe4\x7d\xe2\xc8\x97\x66\xdf\xa4\x16\x0b\x74\xf1\xa7\x20\x26\xd5\xe5\x0b\xbf\x87\x8a\x6f\xb9\xbf\xd3\x99\xd8\xc1\xc1\xba\xce\x5b\xfe\x30\xf2\xc3\x8d\x4e\x81\x7b\xf6\x18\x83\xca\x81\x6c\xc1\xe7\x93\x6b\x15\xf3\x6b\x6c\x6b\x88\x43\x1d\x15\xce\xa3\xc8\x2c\x13\xe3\x17\xbd\xfe\xfd\x6f\x49\x3e\x7f\xcd\xee\x65\xf4\xac\x9c\xfd\x3d\x13\xc1\xd7\x18\x1b\xd9\xe3\x43\x35\xa6\xb4\xc4\x12\x33\xc6\x17\x45\xe1\x69\x1e\xcf\x7f\x01\xfd\xb7\xe1\xd7\xf1\x3b\x1f\xe4\x5e"
		"\x23\xb0\x07\xbf\xa7\x9f\x23\x7c\x2e\x37\x87\x08\x8e\x4f\xd7\xf1\x28\x99\xc4\xe2\xee\x99\xd4\xf8\xc8\x5a\x3f\xc1\x7c\xe7\x0e\x63\xf8\x72\xae\xea\x6e\xfc\x16\x5b\xee\xfc\x2d\xc0\x98\xbe\x3b\xfc\x3e\xcb\xaf\x2f\xfa\xfc\x84\x3e\x2a\x89\xa1\x66\x3a\x2f\x54\x9c\x49\x8d\x2b\xf3\x33\xd0\x8f\xb8\x61\x02\xf2\x7b\x3a\xcb\x37\x9a\xb7\xeb\x64\x6a\xd6\xf3\x1c\x09\xfe\x8f\x62\x4e\xf4\xbc\x79\x3c\x6f\x10\xb3\x22\xb6\xbe\xd1\x5d\x7a\x5b\x9e\xe7\xa4\xd8\x39\x69\xf0\x1f\x65\x9e\x43\x2e\xa1\xac\x85\x23\xe8\xac\x6d\xfc\xce\x15"
		"\xdf\xef\xc2\xf5\x15\xd8\x3c\x03\xd8\x6a\x74\xdb\x2a\x43\x96\x31\x3f\x26\x2f\x6b\x46\x38\x36\x43\x6d\xcd\xb2\x6d\x20\x58\xa2\xd1\xe5\x9b\xa3\x5a\x9a\xd7\x9b\x8d\x69\xe6\xaa\x6c\x18\x41\x5e\x67\xa6\xe6\x90\xbc\x35\xaf\x7b\x84\x9a\x22\xf7\xcd\xc1\x57\x77\xf9\x76\x56\x43\x84\x38\x54\x8d\xe7\x56\x75\x48\xe8\x8b\x2d\xb2\xea\x94\xc1\x5f\x0c\x7c\xd0\xc9\xf9\x8b\xf7\x39\x78\x90\x77\x8a\xb9\x5d\x62\xbc\xe7\xfc\x3d\x7d\x95\x1f\x6d\x4c\x47\xb1\x9b\xc0\x5f\x8c\x30\xcc\x52\x7c\xf0\xec\x71\x92\x3a\x1f\xf3\x34\xdf\xff\x0b"
		"\xbb\x3f\xde\x47\xc8\xfb\xe1\x9a\x56\xf9\x8f\x28\x1f\x82\xdb\x8e\xe9\x1e\x13\x3e\x3f\x72\x57\xac\xbe\xc8\x1e\x7f\x56\x79\x93\x16\x2e\xae\x86\x9f\xad\x61\xec\x33\xd8\x95\x43\xc5\x57\x89\xfc\x47\xfd\x3b\x5c\x5f\xca\x1e\x3c\xa8\x63\x04\xfc\x69\x63\x3b\x08\xf7\x7f\x3d\x46\xf5\xec\xfc\xf3\x92\x97\x7f\x9a\xc7\x70\x19\xf3\x2f\xe9\x0f\xbe\x5e\x57\x5d\x78\x58\x8f\x5f\xbe\xd1\xf3\x7a\xfc\x65\xad\x23\xec\x75\xee\x3f\x9f\x4d\x3c\x91\xc7\x16\xb1\x5e\xee\x6c\x73\xd1\x4a\xcf\xf5\x8f\x7a\xca\x77\x8a\x4d\xcf\x90\xdf\x1d\x14"
		"\xde\x43\xc7\x8a\xdd\x33\x45\xd7\x59\xc7\x2b\x1b\x19\x6a\xeb\x7e\x4f\x7a\x0e\x77\x97\xc6\x7b\xa8\x79\x80\x3e\x36\xc4\x04\x72\x80\x0f\xdc\x9b\xd3\x62\xb5\x0d\x68\x07\x20\x9e\x08\xeb\x8c\x9d\x4d\x93\x35\x26\x61\xf2\x31\x44\x27\xeb\x7d\xbe\xd9\x7c\x83\x1c\xe7\xf7\x4d\x5c\x2d\x38\x6e\xcb\xf5\x13\x9b\x93\xfa\x1a\x16\xfb\x1c\xd5\xf8\x18\x3f\x4e\xa6\x2a\x9e\xb8\xe4\x35\x6a\xb9\x16\xe6\xc7\x8e\xd5\x58\x6f\x10\xf7\xac\xf9\xc2\x09\xfc\x0a\x12\x2f\x19\x5c\x5d\xb1\xae\x51\x7e\x8f\x7d\x60\xb9\xc7\xf6\x8e\xb5\x38\x67\xaa"
		"\xe7\x7d\xdc\xdc\x6b\x7c\xef\x3e\xc0\xc8\xdf\x30\x48\xc9\xe3\x6f\xb2\xca\xbd\x36\x63\xf9\x90\x8b\x0c\xc7\x7d\xcd\x53\x1a\x1c\x4d\xa0\x0f\x72\x25\x5f\x1a\xd6\x78\xac\x7e\x88\xb1\x49\xc9\xb6\xa2\xb7\x27\x65\x9b\x47\x98\x49\x5a\x4b\x51\x5b\x67\x24\xaf\xbf\xa7\x06\x95\x61\x70\xd0\x0e\x89\x72\x3e\x2e\x07\xce\x62\xeb\x7b\x73\x18\x81\x2c\x8c\xf6\xb1\x1a\x4e\x5d\x3b\xf9\x90\xc1\x04\xd7\xdb\x37\xde\xb9\x86\xcf\xc6\xd8\x9a\xd6\x81\x39\xb8\x76\x84\xbf\x37\x58\x68\xc0\x3d\xeb\x98\xcc\x90\x6c\xec\x4b\xb0\xb6\x4e\x7d\x97"
		"\xdc\x18\x5f\xfa\x3c\xca\x07\x43\xbb\x74\x08\xea\x0d\x99\x7d\x7c\x64\xb5\x86\x80\x2b\xa6\xbc\x06\x19\xf9\x00\xee\xb5\xf0\xcc\x3f\xf6\xdc\x15\x9c\x93\x63\x59\x63\x27\x82\x71\x1f\x5d\xee\x13\xd6\x64\xa5\x6e\x5f\xe4\xdc\xa8\xff\x24\xf6\x4b\xd1\x4d\xf2\x52\xad\xb1\x2a\xb9\xd6\x1e\xb8\x5b\x4c\x0c\x8b\xda\x39\x93\xab\x61\x40\x9f\x12\xf7\x0f\x06\xff\xcf\x38\x4e\x36\xff\xea\x09\xfc\x50\xca\x85\x42\x7c\x8f\x33\xe4\xe0\x0c\x16\x22\xa8\x39\x64\xd7\x7a\x22\xd8\xf7\x9c\x1a\xc7\xaa\x71\xe9\xc8\x5c\x3c\xc8\x5b\x1b\xa7\x52"
		"\xfc\x43\xf9\xa0\x75\xf9\x8f\xfd\x84\x6f\x24\x07\xd8\x95\xc8\x57\x3b\x91\x77\x3c\x44\xcf\x43\xc6\xb6\x8c\xc9\x90\x3e\x3e\x77\x5f\xbc\xd6\x7f\x61\x1f\xd3\x1b\x52\xa9\x5f\x60\x3a\x82\xe1\xb2\x19\xb6\x83\xf9\xe3\x06\x47\x8e\xb8\xce\x14\xd7\xb5\xdb\x18\xe2\xf6\xbb\x57\x31\xb8\x56\xdd\x1b\xd6\xed\x4b\x80\xc9\xc2\xda\x87\x68\x3b\xad\xf7\x92\x17\xc8\xdb\x06\x75\x2a\xf4\x79\xc9\xfe\xa4\xf3\xcb\xbd\xc1\x7a\x74\x26\xe7\x71\x7e\xc4\x5d\x27\x16\x2b\x27\xba\xa4\xf6\x5e\x91\xdd\xa3\x71\x80\x88\x0b\x8b\xf0\xe5\xe8\x97\x31"
		"\x9b\x50\x72\x90\x4f\x21\x3e\x62\xce\xab\x7d\xac\x7c\x41\x93\x6f\x20\xf5\x91\x38\xbf\x1e\x63\x9b\x75\x2c\xc3\xd6\x72\xd4\x30\xc7\xb7\xf3\x57\xbb\xea\x29\xe4\x4e\xe1\xf5\x04\x1d\xcd\x59\x96\xb8\xc0\x6b\x45\x17\x06\xf1\x79\xcc\x11\x40\xbd\x70\x67\xb0\x00\xd6\x77\xe9\x54\x8e\xb8\xc3\x18\x5c\x10\x8f\x67\xdf\x45\xcf\x45\x33\x36\x98\x5b\x63\x75\xc4\x79\x8d\x6d\xac\xb2\xca\xd4\xfb\xad\x75\x03\x0b\x57\xc5\x11\x30\x23\x1a\x7b\xfe\xb0\xab\xd4\xb6\x2c\x9e\x93\x02\x6b\x72\xaa\xb8\x4a\x52\xcb\x5b\xf5\x31\x92\xc7\x2c\xb9"
		"\x5c\x48\x3a\x43\xed\x9a\xad\x2f\x4b\x50\x1b\x58\xc3\x44\x8a\xc4\x39\x6a\x9d\x23\xc6\x7d\xbd\x5c\x9b\x36\x6e\x0f\xf5\x07\x7d\x0a\xea\x84\x0c\x9e\xe1\x1c\xd6\xf2\x47\xb5\xf0\xc8\x15\x74\xaa\xd4\x30\x2d\xd8\xd6\x93\xfc\x98\xe7\xd4\xcf\x2a\x86\xbd\x7a\x4e\xae\xd4\x22\xd7\xea\xfb\x83\x5a\x58\xc3\xb5\x22\x2f\x30\x66\xd7\x50\xbe\x51\x9c\x03\xd6\x8e\x10\xb9\xa6\x31\xde\xfa\xda\x3a\xae\xc5\x38\x10\x04\xec\xc1\x41\xbc\x8d\x9a\x75\x4c\xca\xf0\x05\xf5\xd4\xb6\x15\x38\x9e\x7e\x5b\x8d\xef\x50\xb2\x0d\x73\x76\x37\x3e\xb7"
		"\xfc\x3e\xcb\xd2\x6f\x74\xde\x3a\x39\xfa\x88\xb9\x5c\x7c\x6d\x30\xe8\x8e\x65\xbe\xeb\x6d\x8b\xed\x8e\x71\xab\x3e\xfa\xad\x7d\xf9\x55\x06\x3d\xa5\xef\x37\x8e\x36\xe6\xe3\xc4\xdc\x8d\xd3\x2a\xff\xae\x8d\xdc\xcb\x47\x3d\x46\x8d\xba\xdc\xc5\x53\xae\x5c\xe7\xe9\x78\x29\x91\x7f\xcc\xa7\xc7\x6f\xd6\x25\x8b\xc5\x60\xf5\x78\x7d\xb6\x72\xa1\xd8\x05\x87\x35\x86\xf4\xc4\xb0\xe7\x88\xcf\x87\xf8\x20\x62\xf4\xa3\x3a\x52\xf9\x44\x7d\x67\xc1\x7e\x84\xdc\x23\xfa\x5d\x1a\x7c\x14\x1d\xf8\xbc\x68\x6f\xa3\x9e\x1f\x72\xcc\xa5\x36"
		"\x86\xb5\x09\x96\x2f\x94\xf1\x6f\x21\xce\xbd\x0f\xae\xf7\xc8\x3b\xa5\x6f\xb1\x5f\x98\xbf\x5b\x5b\x53\xa6\xdd\xfc\x10\x2c\x97\x21\x01\x17\x94\xb3\x1f\x54\x9e\x65\x19\xb7\x93\xbc\x87\xcf\x39\xa5\x8f\x6a\xcc\x57\x76\xd6\xa0\x9c\xe5\x63\x5f\xed\x69\xe5\xf8\xd6\xba\xaa\x5d\x2f\xaa\x09\x3e\x25\xcc\x91\x5f\xab\xbf\x3f\xc3\xcf\x83\xb2\x97\x6d\x3b\xca\xbb\xab\x49\x1a\x20\x1e\x81\xf5\x08\x5a\x0f\x76\x12\xfb\xf6\xb5\xfa\xc2\x21\xf0\xfd\x0f\x24\xf7\x6f\xe3\x35\xbe\x46\x5b\xe4\xd2\xe6\x39\x51\x75\x62\x11\x8e\x86\xaf\x93"
		"\x77\x9a\x23\x67\xef\x20\xc0\x63\xd5\x57\x78\x35\x39\x77\xec\x99\xe6\xce\x30\xe7\x40\x39\x63\x83\x9a\xa6\x30\x4e\xc3\xb0\x24\x18\x2f\x91\x9d\x75\xf5\x25\xe6\x43\xf0\xde\x61\x3c\x04\x6b\x29\x42\xae\x4f\x8f\x6d\x8b\xf2\xc3\xbe\x9e\xe1\x1c\xd6\x81\x3b\xbf\x2b\x98\x07\xe1\xfe\x34\x71\xbb\x2f\x7b\x7e\x16\x83\xe5\x4d\x93\xe3\x12\x70\x73\xaf\x11\xb3\xea\xa4\xad\x07\x47\xe2\x2b\xb2\x39\xcc\xb0\x1b\xb1\x0c\x79\x69\xfa\xb7\x78\x5c\x9f\x10\x3f\x68\xf1\x8c\x23\xd4\xef\xe6\xda\xfe\x54\x72\xc7\x25\x6f\xbd\xd9\x54\x98\x93"
		"\x1f\x00\x87\x4e\x6b\xf7\x33\xc1\xb2\xc8\x35\xe4\xe1\xf4\x72\xe6\x6a\xe4\x4a\x7e\x70\xc6\xaa\x1c\x36\x1c\x7b\x2a\xeb\x04\xf5\x1d\xd1\x27\x2e\xc6\x93\x59\x3c\xe1\xba\x2f\x7f\xcd\xbe\x7d\xa4\x9b\x60\xbe\x76\xa4\x8e\xd7\xc8\xe9\x82\xbb\x13\x85\x3f\x89\xf4\xa2\xae\xeb\x0c\x62\xd0\xa6\x0e\x36\x59\x5c\x1c\x95\x03\x0f\xac\x16\xf0\x42\xaf\xdb\x17\xac\xe8\x11\x70\x54\xee\x78\x78\xde\x43\x63\x4c\x22\xdb\x8c\xe1\x88\x5b\x18\x3a\xa6\x7b\x6a\xbf\x4b\x4c\xf2\x89\xc5\xb4\x84\xe4\x26\xe0\xbc\x45\x8e\x2c\xfe\x4d\x13\x0f\x85"
		"\x35\xdc\xc4\xde\x1a\x0d\x67\xfc\x44\x6b\xdb\x5b\x35\x9f\x06\x37\xc1\xec\xd4\xe5\x59\x8b\x2f\x86\x32\x33\x13\x9e\x40\xb5\x96\x11\x8f\x11\xe9\x1b\x61\x75\xf9\xc2\x31\x9c\x74\x1b\x59\x8b\x51\x2d\xe4\xa1\x91\x2f\x1e\x28\x47\xb7\xc5\x53\x6a\x1c\xe4\x90\x2a\x58\xf0\x15\x53\x96\xe7\x7b\xf6\xf3\x7c\x59\xf4\xf0\x38\xcb\x9e\x43\xfa\xde\xb0\x77\x48\x9d\x95\x7a\xbf\x2c\xfb\xeb\xbd\x99\x0f\x51\xe5\x7d\xab\xd8\x90\x86\x7f\x52\xa6\x8a\x5e\xf3\x58\xcb\xea\x9a\x52\xf2\x45\x0a\x67\xbc\xe6\xb5\x26\xbe\xcb\x98\xe2\x75\xec\xf0"
		"\xcc\xdd\x4b\x3b\xcf\xc6\xf2\xbe\x72\xa9\xda\x67\xe2\xea\x9a\xcf\xce\x9f\x1d\xb5\x8c\xef\x26\xca\x49\x31\x98\x58\xf1\xac\xc7\x64\xcb\x31\x94\x6d\x8c\x97\x06\x7d\xf2\x16\x7f\x2b\xd6\x50\x7b\x1c\x90\xd7\xf3\x7f\x95\x3f\x9e\xe3\x97\x26\xc7\xc1\xa1\xf1\xde\x13\xf1\xc9\x6e\x36\xac\x34\xfc\x2c\xc5\x55\xc0\xe6\xb9\xe1\xd2\x88\x78\xcb\xd4\x75\x0c\x06\x2e\x88\x59\x9e\x82\x1c\x5f\x91\xef\x74\x1f\xd6\x09\x38\x0c\x3f\x8f\xe1\xb0\xbf\x8b\x5e\xeb\x76\xe4\x90\x73\x50\x6f\xa9\xe3\xf8\x34\x36\x45\x74\x85\xce\x5d\x57\x7d\x3f"
		"\xd9\xf2\x26\x07\xcc\x93\xe6\x8a\x9e\x4d\x95\xef\x49\xf2\x07\x25\xbf\xf6\x45\xbe\xdf\x7a\x3a\xb0\x5e\x1d\x39\x38\x6f\x59\xeb\x27\x22\x8b\xab\x39\x3c\x5d\xb3\x31\xdb\x36\xbd\xfb\xa6\x9b\x6c\x5d\xfc\xb1\x2f\x0f\x4e\xc0\xa8\x7e\x9a\xe0\xbc\x0a\xd6\x2c\xd8\x3e\xc8\x5b\x1d\x47\x22\x2a\x6f\x1b\xd4\x48\x96\xb5\xb8\xac\xe5\x27\x82\x4d\x1d\x55\xff\x0b\xc4\x39\x08\xe3\xf3\x22\xfe\x76\x9f\x5f\x48\xaf\x10\xe2\x23\x65\x8b\x03\xc6\x9a\xca\x9e\xe5\x43\x08\x17\x56\x5f\xe1\x84\x32\x75\xf7\x0a\x07\x8b\x18\x58\x97\xef\x4e\x57"
		"\xce\xb5\x5b\xc6\x45\x1d\x37\xb9\x71\x3c\x87\xbf\x33\xe1\xf1\xf2\xbd\x4f\x6c\x9c\x9c\xde\x07\xc6\xce\xc4\x90\x2b\xcf\xdc\xe2\x77\xce\x79\xc3\x51\x9f\x97\xf5\xb5\xf6\x57\xa1\xf5\xa2\xc0\x1d\x8d\x3d\x74\x32\x72\x17\xa9\x5c\xe5\xb8\xf6\xfc\xd1\xdb\xc7\x84\xf9\x67\xaf\x4f\xf4\x7b\x22\x6f\xf3\xb0\x1e\x77\x22\xb9\x80\x65\xbe\x1f\x57\x0e\x63\x3d\xdf\x26\x57\x9b\x0b\x78\x28\xac\xdd\xcb\x0c\x47\x15\x63\xe6\x25\x9f\xe3\xbe\x4b\x19\xe2\xd8\xc1\x9a\x95\xd5\xc7\x3d\x55\xf4\xef\x40\x74\xee\x40\xf0\x5e\x6c\xff\x01\x7a\xf1"
		"\x2c\xfb\xc6\xdb\x3d\x97\x31\x8b\x62\xf5\x1e\xb7\x5f\xe3\x48\x6f\xca\xf8\xbc\xf9\x41\x27\xc2\x7f\x75\x20\x1c\x62\x23\xf1\x57\x07\xc5\x05\x7e\x56\xbe\x96\x40\x2d\x9e\xe1\x1e\x4d\x93\xc3\xdc\xf3\x3a\xfb\x69\xb7\xff\xcb\xfa\x25\xd5\x6a\x87\x22\x2e\xae\xb0\x36\x1c\x73\x86\x79\x8b\x19\x67\xc2\xc3\x8a\x3c\xc3\x58\xa3\x77\x08\x78\x35\x1d\xcf\x02\x62\x59\x30\x66\x44\x6c\x1c\x09\xe2\xcc\xa8\x37\x97\xef\xfe\x3c\x7f\xb3\x2f\x2a\x0f\x2d\x80\x61\x17\xd5\xa3\x29\xdc\xb6\x23\xde\xd0\xf2\x2b\x96\xb9\xff\x34\xeb\xf9\x33\x95"
		"\x9d\x6f\x9f\xe2\x6c\x2d\x3e\xcd\x17\xb9\xf7\xab\xe2\x79\x58\x1e\xdf\xad\x8d\xd7\x62\x6f\x2e\xf5\x4d\x5f\x31\x6f\xbf\x27\x27\x47\xfc\x46\xca\x37\x5b\xc9\x77\xb4\xb8\x6c\x8d\xbd\x99\x37\x6c\x60\x68\x4b\x4a\x85\x43\xac\xc2\xb3\x5d\xf2\x73\x63\xfa\x30\x3e\x76\x78\x7c\x90\x47\xf2\x75\x83\xc0\x0f\xba\x57\x56\x61\x1e\xf0\x11\xa3\x8e\xea\x1a\xb6\xef\x6f\x30\xd4\xc9\xd6\x67\x61\xed\x46\xbb\x6e\x64\xcb\xef\x0f\x04\x83\xcc\x7c\xb4\x7d\xbe\x9f\xef\xc7\x55\xcd\xb9\x64\xdb\xc7\x8f\xd9\x0c\xc6\x26\xcb\x5b\x7c\xaa\xf0\x73"
		"\x1d\xf5\x58\x1a\x1b\xe3\x1c\xf0\x8f\x20\x66\x3a\x96\xa7\x83\x8e\x67\x07\xfc\x91\x1b\x96\xc0\xd7\x70\xc6\xfb\x2d\xce\xcb\xf0\x22\x66\xd2\xbf\x30\x4f\x84\xbf\xe5\x42\xbe\xdf\xb9\xde\xcf\x10\xf8\x3b\xa6\xb5\x97\x89\xc1\x57\x64\xcd\x67\x7b\x97\x91\x47\xc7\xb3\x69\x71\x93\xb4\x16\x93\xd8\x93\x05\xa7\x76\x94\x28\x9e\x4d\xf0\x25\x12\xdb\x29\x7d\x14\x6b\x53\xf6\xea\x91\xc5\x9d\xb0\x57\x13\xc3\xca\xca\x67\xf8\xf6\xa0\xc7\x62\x20\xb7\x19\x67\xa5\x96\xdb\x65\x2e\x63\x9d\xd5\x01\x7a\x6b\x78\x9e\x26\x5f\xd3\x3f\x38\xdc"
		"\xfa\x36\x1e\x67\x82\xff\xd7\xbd\x3c\x2c\xcf\x0f\xf8\x84\xeb\xfb\x4c\x41\xee\x8d\xd5\xd1\x66\x56\x03\x9d\x81\x17\x80\x60\xf9\x10\x13\x82\xbc\xa1\x28\x23\x31\xf6\xe1\xea\xa8\x20\x46\xe0\xf4\xa4\xc2\x58\x8d\xa4\xd7\x2a\xeb\x0d\x17\xf5\xe2\x63\xf1\x8f\x81\xe0\x25\x0e\x51\x4d\x91\x00\xce\x74\x47\x0d\x16\xf6\xfe\x63\x5c\x85\x7d\xc3\xe6\x1b\x28\xae\x8d\x70\x94\xe4\x97\x5d\xb5\xa0\x8f\x3a\xaf\xec\x6d\xc5\x90\x3b\x80\x70\x57\x33\x9e\x77\x01\xfe\x74\xc9\x81\xee\x51\xb9\xcc\xae\x66\x47\xe7\x73\xd0\xd7\xf3\xd5\xe4\x77"
		"\x36\x6e\xbe\x0d\x47\x77\x56\xb2\xdd\xd4\x55\x11\x0e\x24\x33\xcf\x31\x67\x2d\x5c\xc6\xe4\x4a\x8e\xae\xec\x1b\xd5\x33\x64\xb9\xec\xae\x25\x99\xb2\xe5\x3a\x77\x3d\x2e\x6f\xf9\x8a\x0f\x8f\x11\x66\x76\xa8\xc4\x79\x96\x85\x2b\xfc\x0b\xac\x91\x43\xa5\xf7\x89\xce\x51\x1d\xd4\xbb\x7d\xba\x2e\x0e\x78\xe1\x30\xdf\x81\x7e\x1e\xf2\xf5\xd5\x7a\x55\x94\x39\x79\x62\xf5\x19\x81\x2d\xd8\x13\xdf\x99\xd5\x72\xd0\xf8\x31\x1b\x63\xf1\x7e\xaf\xcb\x79\x64\x9f\x27\x16\xe0\xe8\xd7\x3e\x62\x87\x9c\x5f\x9f\xe9\x5b\x1c\xf4\xc7\xa4\x75"
		"\xcf\x84\x8b\xac\xaf\xd5\x9d\xb2\xba\xe9\xa0\xd7\x56\x5f\xe9\x2b\x82\x7a\x78\x89\x67\x3c\xc9\x5b\x93\x97\x3d\xaa\xe7\xa9\x3d\x13\x3b\xaf\x70\x0c\x1e\x61\x2c\x0e\xc1\x79\xa3\xe6\xee\x88\x9e\x2f\xa8\x33\xcd\x01\xc7\xe4\x88\xdf\x41\x5e\xda\x3d\xd9\x12\xc8\x2e\xb0\xa3\x18\xe7\xa9\xe1\xca\x96\xb7\x18\x3f\x56\xe3\x60\xcb\x88\x45\x8e\xeb\x22\x24\xf9\x9e\xee\xbd\x89\x5d\xdb\xf8\x0a\xf2\x35\xe9\x5e\x7f\x47\xf9\xe6\xf0\xda\x68\x1b\x0c\x58\x73\x44\xe2\x3c\x59\x71\x51\x3c\x39\x0e\xc9\x2d\xdf\xf5\x0c\x18\xb7\x6c\x38\xc6"
		"\xdf\x43\x5e\xba\x6e\xad\x3b\x1e\x09\xd7\x0c\xc6\xef\x98\x1f\xa1\x63\xae\x39\xe8\xe5\x3e\x41\xdd\x21\xf3\x5d\xfd\x77\xb2\xbd\x82\x34\x17\xef\x21\xbd\x55\xb1\x65\xe6\x3b\xe8\x3e\xe2\x72\x06\x9c\xc6\xd9\xd6\x94\xaf\xc7\xb8\xfc\x3c\xe1\xea\xe9\x03\xce\x1f\x3a\xde\x78\x2c\xa9\xcf\x35\x3e\xb1\x96\x3b\x62\xf9\x83\x1e\xfd\xf3\x56\x3c\x0c\xf2\x4b\xb9\x3c\x10\x8c\xa5\xe6\x3f\xe4\xfc\xb0\xd7\x58\x46\x91\x9c\x78\xe1\xd9\x59\xe4\xcc\xa4\x7a\xbe\x6a\xb9\x40\x39\x87\x6b\xdc\xb9\x89\xf3\xb7\xd2\x7d\x72\x89\xfb\x13\x91\x98"
		"\xc3\x32\x5f\xcf\x0f\x8c\x40\xdf\xee\x4d\x1e\xec\x1b\x59\xdd\xee\x5f\xcc\x7b\xa3\x6f\x1d\xe5\xc1\x33\xc4\xd7\x9f\xd3\x47\xb8\x7f\xb1\x3b\xbf\x06\xfd\xe6\x71\x5b\xe9\x5f\xf6\x54\x99\xb7\x58\x07\xfe\x74\xcb\xe5\x7c\xbb\x61\x7a\x74\xbf\x32\x83\x75\x81\x75\x3a\xc0\x3a\x18\x80\x77\xbb\x8c\xcf\xb1\x52\x7b\x81\xb5\x6a\x39\x4d\xaa\x9e\xd2\xcb\xc8\xf8\x5c\x1b\x2b\xea\xd7\x9e\xaf\x87\xfc\x41\xb8\xd7\xdb\x31\x6e\x5a\xef\x43\x62\x81\x34\x3e\x2e\x80\x37\x95\xbf\x70\x8c\xeb\x6b\xc3\xe2\x5f\x4a\x96\x04\xb9\xbb\xd2\x7f\x89"
		"\xda\x70\xaa\x8e\xb1\xff\x0b\xcf\xcf\xb6\x09\xcb\xb5\x46\x1c\xff\x6b\x7c\x7d\x5c\x65\x59\x96\x69\x57\x6f\xa4\x5c\xe3\x7b\x60\x7c\x28\xd9\xe7\x1c\x8f\x88\xf9\x64\xb1\x23\x57\x47\xac\xe5\xd6\xbb\xe2\x94\x38\x87\x1c\xb8\xb5\x3c\x34\x8d\xfd\xea\x98\x73\xd0\xb3\x78\x20\xbd\x84\x6b\xdc\x5f\x43\xb3\xbe\xd2\x73\xf6\xe5\x00\x7b\x8f\xb5\x1f\xd4\x1f\xd0\xdc\x91\x04\x8b\x1d\xd6\xd8\x95\x5e\x45\xac\x06\x58\x3c\x87\x87\x10\x1f\x15\xf1\xe6\x22\x24\x6f\xcc\xfa\x37\x54\x7c\xe3\x08\x8f\x92\xf2\xc5\xea\x43\xf0\xe7\x0e\xf0\xbb"
		"\x4f\xaa\x2f\x1b\xe1\xd9\x91\x3d\xb5\x24\x39\xe0\xb5\x53\xdb\x8d\x9f\x98\x2b\x3d\xf0\x72\xdc\x57\x13\xf1\x32\x71\xdd\x2c\xc1\x09\x35\xb0\xc4\x8e\x8b\x25\xc0\xee\x22\xe6\x58\x22\xee\x16\xc5\x31\x90\x53\x1c\x47\xeb\x0d\xd7\x25\xe6\x7c\x37\x7b\xd4\xe8\x15\xdd\x67\x26\x71\x1b\xca\xfa\x45\x4a\xaf\x8a\xe5\xc8\xb5\x7d\xf0\x4a\xfc\x24\xe6\x9d\xee\x80\xab\x5c\xd7\x77\x9f\xe4\x83\xf3\x2b\x90\x7e\xba\xb8\xce\x68\x6d\xa3\xca\x75\xd3\x3e\x6a\x99\xf4\x93\xc0\xde\x6a\xc2\x79\x92\x4d\x0f\x75\xf4\x21\xb3\xf7\x49\x91\x33\x4c"
		"\xc7\x56\xce\x80\x91\x16\xd7\x93\xee\xec\x62\xa7\x88\x37\x30\x7c\x56\x44\x86\x45\x58\x39\x56\xdb\xfc\x55\xfe\x6c\xf7\x7a\x27\x3d\xa7\x5b\xb1\x84\x81\xf5\x94\x20\x38\x54\xb4\xef\x5d\x9e\x9b\xf8\x53\x52\xe1\xbe\xa2\xbd\x4f\x3f\x21\x1b\x87\x4f\xe4\x87\xa3\x6f\x52\x62\xda\x58\x1b\x6f\xb0\xb3\x10\x63\xba\xad\x0b\x88\x1d\x0d\x18\x93\x43\x2e\x42\x99\xda\xfc\xe0\xf2\x12\x73\x81\x62\xac\x86\xd4\x95\xa3\xad\xe2\x63\xb8\xc8\x41\xb4\x8e\x8f\xdc\x71\xa1\xcf\x5a\xdf\xb2\x78\x4d\x94\x0b\x00\xbd\xdb\x4b\xa3\xc7\x77\xb2\x7d"
		"\xe4\x35\x97\x5d\x76\xb2\xb8\x9e\x3f\xed\x9b\xdb\x36\x9f\x6a\x40\x1b\x5b\x2e\xcd\xf8\x19\xe2\x2d\x47\xe0\x49\x2f\x5c\xc7\x8e\xd3\x82\xcd\xab\x88\xab\x4f\xc5\x63\x0b\x5f\xee\x53\xfa\xd1\x5c\xb7\x78\xce\x9e\xb5\xc0\xb8\x04\x6b\xfc\x8b\x51\xaf\xc1\x90\x6f\x47\xc5\x7d\x6b\x71\xbe\xbe\xc2\xf9\x77\x60\x6b\x3d\xc8\x23\x1c\xd5\x9c\xed\x03\x9b\x86\xe6\xc9\x5a\xf2\x04\x74\xbe\xf3\x2f\x18\xf7\x48\xc4\xd1\xd8\xc0\xa3\xe9\xeb\x76\x2a\xa7\x8d\x3d\xc0\xaa\x71\xd2\x34\xf1\x3a\xc9\x4a\x8e\x54\x48\x4c\x9f\xc5\xcf\x4d\xec\x1f"
		"\x7a\x4c\x75\x8f\xf8\x04\xcf\x95\x19\x4c\x35\xd8\x20\x3a\x4e\xd2\x07\xb5\x69\x47\xf9\x08\xe5\xdd\xed\x77\xae\xac\xe9\xec\xfb\x52\xd0\xef\x10\x60\x88\xe3\x78\x84\xc2\x77\x2e\x7d\x2c\x16\x3c\x55\xfa\x88\xf3\xb9\xc4\x9e\xcc\xc4\x2f\x3a\x48\x9c\x3b\x72\x31\x00\x65\x63\xbb\x7a\x50\xf6\x1d\xc5\xf6\xd2\x62\xbc\xaa\x5d\xd0\xab\xbc\x57\xdc\xed\x4f\x12\xd7\x05\xe4\xec\x6b\xe4\xaa\xd8\xfc\x28\x2f\x13\xf5\x61\x0f\xf8\xd8\xf6\xf4\x34\x34\xba\x40\x2c\xc6\x5a\x52\xec\x27\x0e\xf0\x5d\x90\xf3\x17\xe7\x0a\xe5\xc9\x21\x39\x16"
		"\xd6\x5b\x61\x84\x9a\x0f\xbb\xc6\xce\x96\x6b\xcc\x70\xdc\x79\x3e\x7b\xe4\xd5\xef\x5b\xdc\xbf\x39\x90\x71\xe9\xd2\xac\x7f\x18\x49\x3e\xc3\xf9\xf0\x89\xf4\xc4\xab\xc5\x1f\x92\x9f\xc3\xf2\xa8\x8b\xe5\x3e\x69\x95\xf7\x29\xed\xe8\xcd\xae\xe7\x60\xe6\x7c\xf4\xc5\x87\xd0\x36\xa1\xf3\xad\x19\x3f\x55\xaa\xf7\x5d\x75\x7d\x91\xc4\xeb\x1a\xf4\x29\x97\xb9\x8a\x36\x58\x4f\xb8\x8c\x2c\x9f\x83\xb7\x79\x68\x7d\x9e\x6c\xf8\xe5\x5a\xdf\xb5\x9b\x1c\xcd\xd6\xfe\xc8\x15\xae\xc0\x1a\xdf\xbe\xc9\x03\x90\x5e\x44\x7d\xba\x34\xf9\x9c"
		"\xdd\x9c\x59\xd7\x91\xe9\xf5\x0e\x31\xb0\xa2\x27\x46\xc0\x60\x0f\xd0\xcf\xa1\x97\x6b\xdc\x83\x53\xf5\x38\xe8\x80\x83\xae\x96\x13\x29\xef\x88\xfd\x4a\x5c\x6d\x1f\xc6\x29\xc1\x86\xee\x93\xd7\x93\x8c\x97\x18\x6d\x1c\x87\x93\x5a\x31\xc8\xbd\xeb\xe9\xf1\x12\xf7\x48\x20\x18\x05\x8a\x63\x05\xfe\xef\x16\x2e\x36\xda\x36\x01\xe6\x84\xd5\xbc\x47\x3d\x05\x47\xe0\x23\xa3\x5c\x21\xf2\xd6\x8c\x55\x89\x90\x6b\x92\x9a\x1e\x17\x9f\x45\x5d\x81\xbd\xa3\x42\x7b\x2e\xe8\xcd\x40\xfa\x44\x45\xb5\x56\x3d\xc3\x8e\x14\x5e\xff\x90\xe7"
		"\x54\x61\x0c\x5d\x1d\xad\xcd\x01\xf9\xde\x7c\xa5\x7f\x93\x8e\x7d\xeb\xdc\xc9\x4b\x8c\xdd\x0c\x7b\x86\x5f\x14\x96\xfe\xdd\xd6\x29\x0a\xc4\xfb\x33\xeb\x11\x71\x81\x5e\xdf\xd7\x90\x53\xd7\xf5\xd4\x80\x7c\x45\x17\xf4\x39\x6b\xd6\x40\x47\x36\x79\x8a\x39\xd7\x7b\xec\x93\x9d\x62\x8c\x50\x0e\xfa\x63\x76\xa4\xa7\xf0\x90\xde\x76\xf5\x9d\xa6\x7c\xfd\x0a\xef\xfb\xe8\xf9\x97\x5f\x4d\xbe\x02\x71\x69\x39\xef\xa8\xf1\x0e\xd6\x60\xe4\x53\xc5\x7d\x8e\x6c\x7c\x8e\x61\x15\xe2\x7a\x96\x73\xa5\x67\xa2\xe7\x91\x73\x35\x5d\x35\xcc"
		"\x0b\xc9\xf5\x45\x7c\xb0\x55\x8c\x5a\x85\x6f\xaa\xf8\xbc\xe7\xf4\x23\x7d\x91\x9f\xd6\x9f\x4c\xbe\x06\xc9\xe9\x11\xe6\xf7\x8b\xc7\xe1\xf4\xe9\xa5\x8a\x19\x2c\xf6\x74\x9f\x36\x39\x29\xc9\xf7\xd0\x61\xb2\xb4\x97\x18\x03\xd4\x33\xff\x96\xe4\x4f\x87\x6c\x63\x04\x8f\xf8\x1d\xd8\x90\x11\xdf\x7f\xf4\x7f\x88\x01\x4b\x15\x3b\x49\xee\x76\xd2\xa3\x16\x0c\xb9\x20\x6b\x5c\x62\xf9\x3e\x7f\xab\x3e\xbc\x92\xad\x85\x2b\xe6\x86\xb7\xcf\xf7\x7e\x32\x5f\xd7\x7e\x32\xd5\xba\x9e\xa5\x17\x84\xdc\x73\x47\xcf\x86\x07\xa4\xc2\x0d\x25"
		"\x6d\x0e\x7f\x9d\x07\xee\x6b\x5c\x0d\x1a\x9f\x48\xb0\x8c\x02\xfc\xcb\x0c\xcb\xc7\xec\x4f\xfd\x4d\xb0\x16\xba\x4f\x6f\xd5\x5c\x5d\x6d\xad\x31\xbe\x32\x16\x67\x43\xbd\x66\xfa\x35\x10\xee\x35\xc4\x95\x1f\x20\x5e\xd6\x13\x19\x71\x40\x2e\x6d\xa9\xfc\x7e\xd4\x1a\x7b\xbd\x42\xf5\xa3\x68\x5f\xc6\xf7\xe4\xa3\x31\x74\xe3\x1f\x7e\x34\x6b\xd7\x74\x9f\xe5\xf2\x2d\x98\xcf\xe0\x74\x17\x70\x02\xb3\x9c\xa0\x5b\xaf\xd0\x87\x15\xfb\x09\x6c\x7c\x18\xf6\xda\x22\xb1\x9e\xe5\x36\xaf\x8f\x7d\xa3\x4f\x7d\x10\xce\xa1\x6b\x78\x1c\x95"
		"\x7f\x55\xe7\x12\x52\x35\x8c\x24\x8e\xcc\x72\x3d\xb5\xfd\x12\xf5\xb8\x4d\x95\x9e\x8d\x19\x7b\x79\x6d\x71\xe2\x3e\xbd\xd5\xeb\x5f\xc0\x06\xd2\x71\xdb\xbc\xca\x26\x16\x23\x38\xa6\x8f\x5d\xdc\x11\xd4\xb6\xca\xfc\x1a\x5a\x0e\x1f\x83\x3a\xe0\x69\x87\xdf\x8c\xdb\xcb\xb5\x4a\xac\xb7\xc4\x10\x51\xdf\x3b\xfc\x3a\xc4\xb4\x4c\x7d\x6d\xa0\x7f\xa9\xcf\x59\xc1\xbc\x57\x75\x3b\xe1\x74\x6e\xe1\xeb\x18\x86\x21\xca\xbd\x66\x32\xa6\x65\x1e\x9d\xe4\xad\xda\xfb\xc1\xf5\x4a\x21\x75\x55\x07\x92\x4f\x73\xf1\xe1\x5c\x79\x6f\xad\x0f"
		"\xbb\x4b\x53\xd6\xb2\xb8\x52\xab\x26\xb5\x0f\xfa\x7e\xd7\x63\x6f\xba\xc7\x62\x10\xdb\x67\x7a\x2c\x4f\x34\x3e\xad\xe3\xde\x27\x8d\x0f\x8e\xf2\x3b\x42\xb0\xfe\x95\x67\x66\x76\xfd\x41\x38\xd7\xb1\xb3\x25\x32\x97\x51\x03\xe6\x69\x19\x8e\x20\xf1\xbc\x09\xed\x4f\x01\xfa\x37\xc2\x35\x4d\xf2\xb1\x8f\x5b\x1c\xe5\x75\xf2\xf9\xc7\xda\xda\xd3\x3a\xe2\x20\xf1\x3a\x1a\x76\xe4\xd2\x23\x5f\x9f\xf6\x46\x02\x99\xe9\x64\x4e\xc4\x3b\x1a\xe4\xe2\x28\x96\x08\x71\xcf\x41\x3f\x67\xdd\xdb\xb2\x56\xb7\xbf\xf8\x3c\xcf\xe9\xe7\x2c\x37"
		"\xff\x4c\x5f\xe5\xef\xf3\x11\xff\xd8\xc5\xbd\x45\xd7\x56\xb6\xba\xb7\x56\x4f\xc6\xe6\xc8\x2e\x3e\x34\x82\x9b\x1b\x82\xfc\x68\xcd\x2e\x08\xf1\x1d\x29\xd6\xf9\xc5\x96\x3c\x06\x3d\x5c\x9e\x6a\xdc\x3f\x42\x7a\x7d\x41\xff\xc5\x5c\xe3\x05\x02\x7f\xac\xe6\xcf\x51\x0e\x19\xc2\x9b\x76\x52\xba\x32\xa7\x4b\xbb\xb6\x24\x5f\xf6\xd7\xd0\x64\x2e\x7f\x76\xf5\x53\x63\x18\xb2\x1c\xf4\x50\xab\xe4\xf0\x9d\x0e\x4e\x24\x97\x5f\xab\x8b\x5d\xe3\xb6\x13\xe1\xea\xcd\x0c\xef\x59\xe9\xe5\xd0\xd7\x6a\x99\x99\x1c\x0b\xe2\xdf\xac\x16\x2d"
		"\xc4\x30\x35\xfa\xc9\xb6\xb8\xe8\x28\x1e\x40\x38\x46\x7b\x0c\xf0\xe0\x55\x0c\x16\xe2\x10\xa2\x3c\x81\xd8\xfe\x46\x26\xa6\x1b\xac\xe5\x5b\x7d\x79\x30\x3f\x29\xd6\x8b\xd8\xdb\xd5\xe3\xd5\x3e\xbc\x4e\xad\xc7\xa1\x5b\x13\x9f\xb8\xcf\xae\x67\x20\x18\xb5\x9e\xf8\xf7\xbd\xd8\xfc\x98\xc6\xa3\xd6\x78\xdf\xf4\x9c\x1e\x81\x57\xbc\xca\xc5\x2a\xde\xa7\xcc\x41\xef\x6d\x8c\x17\x1e\x74\x9d\xf8\xa3\x6f\xfd\xfd\x3d\xb1\xdf\x38\xdd\x4e\xfa\xae\x7a\xbe\x53\x8f\x17\x2f\xf1\xec\x47\x5c\xde\x8c\xbf\xdf\xef\x30\x90\x2a\xe6\xdb\xd7"
		"\xf8\xb7\xc5\x62\xe8\xe2\xe7\x86\x9e\x19\xa2\xb0\x56\xe2\xf1\xb1\x0c\x87\x98\x49\xdd\xd1\xc1\x71\xa8\x41\xbd\x27\xa9\x21\x1c\x76\xf0\x01\x1e\xc2\x6f\x03\x3d\xef\xc2\x7d\x95\x5a\x56\xe2\x33\x4e\x3b\x6d\xb7\x22\xb7\xb1\xee\x17\x7d\x97\x0e\x62\x98\x34\x56\xa3\xfd\x5d\x12\xc7\x71\x71\x05\xb9\x54\xeb\xfd\x5d\xde\x82\xd5\xbc\x82\x5e\xa7\x3c\x4a\xaa\x7f\x23\xd3\x33\xac\x2e\x35\xec\x41\xa0\x62\x7f\x03\x91\x43\xc5\x1e\x66\xef\xcb\xf2\xd1\x12\xc4\x6d\xa5\xd6\x1b\x22\xf1\xdc\x76\x68\x13\x04\xf8\xac\x81\x72\xd9\x92\x7a"
		"\x0e\x85\x59\xef\x64\xaa\xea\x0a\x09\xf2\xa8\x8c\xbf\x99\xc6\xb8\x1e\x35\x08\xf7\x9c\xc8\xf3\x5a\x53\xf6\xeb\x3c\xaf\x7e\x9f\xe5\xc9\xbf\x3c\xf8\x2f\x3e\x77\xac\xce\x27\x54\x6b\x7f\xd6\xb1\x9b\x48\x4c\xe3\x40\x6a\x84\xa2\x5e\x99\x85\x03\x73\xa4\xba\x7b\xdb\xb7\xd8\x13\x4f\xf2\x83\xf7\x51\x44\x3b\x1d\xf6\x15\xae\xb1\x1a\x8f\x57\x2d\x3f\x26\xad\xbe\xe6\x19\xb0\x23\x9a\x0f\x91\xc5\xcd\xf3\x2c\xaf\x72\xe1\x5b\xfc\x83\xe6\xc1\x1e\x75\xfc\x84\xcf\xb3\x70\xf5\x9d\xb1\x77\x5f\xe2\x9c\xa0\xb6\x6f\x5e\xc1\xce\xbd\xb8"
		"\xbc\xac\xeb\x19\x14\x60\xb7\x33\x70\x19\xb0\x79\xae\xf3\x4c\xa6\x96\x40\xa0\x66\x4d\x78\x3e\x63\x94\xd8\xb6\xd7\x35\x73\x47\xe2\xef\x8e\x01\xdf\x20\xe7\xec\xfe\xa8\x72\x22\xb0\x3c\x40\x24\x6f\x06\x81\xde\xba\x72\x76\xba\xb3\x9a\x5b\x09\x7a\x95\x61\xcc\x85\xfe\x66\xb8\x11\xb4\x25\x59\x6d\x0d\xfa\x7e\x12\xd4\x84\xb1\xb8\x11\x70\x21\x0e\x04\x13\x37\x2a\xbd\xb9\xe4\xe5\x96\xb8\xc1\x45\xfe\x9c\xe7\xfd\xdf\xe7\x91\xf9\x87\x3d\x3f\xeb\x9a\x1a\xeb\xcf\x6a\x6e\xf6\x47\xde\x22\xc8\x83\xee\xe1\xde\xdd\xa3\x57\x68\x2d"
		"\x1c\xe3\xd7\x21\x73\x66\xac\xc4\x08\x24\x38\xe6\x81\x01\xa8\xf4\x5e\xcf\xad\xda\x11\xe8\x7d\xb8\x61\x5a\x00\xcb\x81\x36\x21\xc9\x55\x50\x4c\xbc\x9b\x5f\xe7\xf6\x35\x9c\x8d\xe1\x39\xce\x0a\x9e\x77\xf9\xce\x9a\xff\xcd\xd5\xe2\x91\x3c\x08\xe5\x78\x29\x31\xfc\xb4\xf5\x4e\x1d\x12\xf0\xe9\x44\x7c\x82\xc0\x93\x2b\xb9\xc8\x95\x8d\x3b\x6d\xd9\x57\xf8\x42\x4b\x9d\xb3\xae\xb9\x32\x58\x9d\x79\x5e\xf7\x79\xb6\xf9\xf3\x7b\x18\xb7\x11\xb5\x06\x75\x2f\xd5\x7b\x4f\x97\xed\x1d\x07\xe0\x80\xeb\x57\x7c\x90\xe7\xe8\xf5\xfd\x56"
		"\xa8\xcd\x81\x75\x30\xc0\x93\x79\x58\x31\xc9\x5f\x67\xfd\x7a\x99\x6d\xb4\xdf\xe4\x67\xfa\x5b\xfa\x5f\xe9\xf7\xf4\xef\xb3\xdd\xf0\xf7\xf4\xaf\xe9\x7f\xa7\x7f\x4b\xff\x27\xfd\x8f\xf4\x4f\xda\x33\x91\xcb\xe4\x0d\xd7\x64\xeb\xea\x88\xbe\x09\xe2\xbc\x03\xe8\x83\x28\x76\xca\xf2\x48\x12\x70\x4f\x3e\x38\xdb\xe6\x77\x3d\x41\x5e\xaf\xb5\x7f\xd0\x35\xa9\x8e\x1f\xf2\xbd\xca\xe9\x15\xc5\x68\xaa\xf5\x24\x0d\x4e\x22\x97\x53\x96\x29\x96\x7f\x2c\xde\x0f\xb1\x2e\x8a\xbd\x08\x7a\x0f\x63\x0f\x67\xc1\x5a\xa6\xf5\xb7\xe3\xf4\x6d"
		"\xe5\x78\x52\xbd\x36\x5a\x48\xaf\x54\x49\x41\x9f\x18\xc8\xbd\xde\x72\x9f\x84\xf3\x7f\x90\x20\x47\x59\xdb\x07\xf9\xc8\xa8\x76\xc8\xed\x2b\xd7\x0c\xfa\x56\xe0\x7d\xa2\xb8\x75\x94\x17\x78\x8a\xf8\x4b\x77\xf0\x7d\x61\x6f\x9b\xa8\xce\x39\xc2\x98\xb4\xde\xb1\x96\xef\xad\xe1\xee\x90\xa3\xca\x71\x30\xa5\x76\x1e\xbe\x97\x76\xef\xbc\x61\x0f\xa7\x3f\xe9\x35\xc3\xec\xd1\x9a\xbf\x5c\x8b\xd1\x9e\x20\x26\x80\x3d\x8f\x3b\xc0\xc3\x4a\x8d\xdb\x26\xc8\xc5\xb2\xf9\xd2\x61\x2d\x6e\xad\x9f\x9f\xf8\x9c\x49\x0f\xb9\xa6\xad\x9f\xd7"
		"\x14\xcb\x64\xf1\x39\x9a\x3e\xea\x1d\x1a\xf4\xa9\x34\x75\x13\x46\xaf\x61\x8c\xe9\xea\xf0\xe1\x82\xbd\xc4\xb1\x96\x02\x7b\x03\x64\xe4\xb2\xb7\xf6\x30\xad\xb3\x61\xf9\xba\x06\x47\x76\x2d\xc6\x3f\xb4\x7a\x49\x48\x1d\xaf\x30\x28\x3d\xe2\xea\xb2\x49\x5c\x64\x84\x5e\x33\xad\x5e\x7f\xbd\x70\xbe\x0b\x59\x6d\xc4\xa5\x57\xe6\x09\xfa\xb6\xe5\x20\xcf\x3e\xc8\xc6\xd7\xfc\x8b\xfc\x08\xdf\xe5\x99\xc8\xd7\x5a\x1f\xaa\x48\xe7\x9f\x57\x5e\xd1\x28\xdf\x7f\x24\xfd\x60\xfe\xd2\xb9\xf0\x7e\xbb\xb7\x6b\x4c\x2a\x89\x93\x3c\x81\x3c"
		"\x64\xf9\xfd\x13\xc1\x29\x56\x7b\x84\xe7\x40\x8e\x83\xcc\x67\x38\x2e\x8d\x07\x32\x5c\x8d\x2b\xcf\xef\x90\xda\x18\xbf\x9e\xd5\xcb\x43\x1f\x17\x16\xa7\x72\xf9\x4b\xa8\xe5\xf1\xfd\xfa\xee\x31\x94\x43\xc0\xcf\x73\x04\x7e\x5d\x97\x27\x50\xf6\xf4\xb1\xd5\xbf\x8f\x8c\x97\xb3\x33\x85\xe0\xc5\xb3\xc5\xd1\x95\xda\x25\x8c\xe3\x45\xdc\x34\x13\xe3\x8c\x16\xfb\xad\x9e\xd3\xe2\x03\xfc\x11\xf6\xf8\xce\xf0\x0d\xee\x7d\xe5\x7e\xa4\x5f\x0b\x2e\x96\xf5\x3a\xcc\xed\x9e\x97\x87\xa8\x7f\x9f\xc2\x50\x67\xd2\x1f\x22\xd2\xef\x58\xcb"
		"\x11\xeb\xcf\x6b\x1d\x0b\x67\xec\x9c\x57\x5e\x17\x41\xee\xf9\xe0\xb1\x53\x18\xcc\xa9\x12\xf3\x5d\xf4\xe9\x59\xe9\xfe\x2c\x71\x7f\xef\x01\x70\x43\xc8\x49\xc3\x6c\xfd\x93\xbc\x35\x30\xee\x7f\xd0\xfa\xa5\x41\x73\xf8\x65\xe0\xe2\x4a\x71\xef\x55\x5d\x6f\xe2\x38\x5a\x2b\x7d\x0d\x3c\x7f\xdf\x86\x9b\x2e\x79\x86\x71\x7e\xde\x63\xfa\xb1\xc3\x36\x78\x75\xfd\x96\x91\x9f\x66\x08\x6a\x35\xa8\xcc\x0e\x6c\x74\x69\xda\x29\x57\x93\xfb\x1b\x15\x17\x60\x66\xfd\xdb\x48\x4e\x15\xfd\x31\xda\x67\xbc\xd9\x37\x94\xf7\x95\x32\xbc\x8c"
		"\xd9\xca\x53\x8a\xe7\xcc\x5b\x3c\xde\xcc\x59\xd2\xc7\x9c\x72\x9a\x64\x82\x39\x24\xfc\x9f\xc5\xae\x3e\xe6\x86\x8e\x4c\xfc\xfb\xea\x9e\x0b\x9f\xc1\x97\x45\xd8\xd9\x5a\x8f\x72\xd3\x27\x42\xbe\x57\x31\x86\x98\xf7\x43\x9c\x61\x18\xa3\x66\x18\xcd\xd4\xc6\x0c\xf6\xc4\x37\xd2\xe3\x7f\x26\x18\x96\xb1\xf6\x2e\xc0\x47\x79\x02\x1b\x7e\x24\xfe\x3b\xc6\x3c\x07\x8d\x83\xd7\x5c\x84\xca\x86\x9b\x76\xf4\xfd\xc4\x1c\x63\x88\xf1\x02\xde\xb8\x9a\x1c\xda\xc3\x0d\x1d\x62\xd4\x2a\xbd\x14\xc3\xdc\x54\x8b\x6f\x59\xe5\x84\x59\x5f\x41"
		"\xc7\x8b\xcd\x78\x95\xd2\x0b\xa9\x95\xaf\xcc\x63\xf9\xa8\xf2\xba\xb7\xe6\x5e\x18\xa3\xb8\xd9\x0c\xdf\x82\x7d\x44\xee\x6b\x5c\xb4\xe2\x71\x42\x3d\x3c\x56\xfa\x08\x63\xbf\xb8\xd0\xf6\x59\xfb\xfc\xfd\xba\xd6\x7a\xb1\x63\x96\x7c\xde\x45\x7e\x18\xb9\xe3\x72\xe9\xcc\x16\x6e\xc4\x67\xce\x72\xb7\xbd\x7c\xbc\x91\xec\xab\xf4\xb7\x28\xf7\x28\xfd\x11\xae\xf2\x67\xfa\xdb\x2d\x86\xfb\x8f\xf4\x6f\xf2\xcf\x59\xea\xff\x07\xed\xf5\x26\x86\x37\x7f\xcb\xa9\xb2\x1a\xe1\x4c\x38\xc6\xa7\x9d\xf1\x2c\x66\xeb\x1e\x54\xde\xf8\x19\x63"
		"\xb2\xa4\x16\xe3\x2b\xe4\x97\x7e\x2f\x71\x69\xec\x95\x8e\xbd\xa0\x02\xee\xa6\x16\xd6\x3a\xec\xab\xbc\xfa\xd1\xcb\x33\x7f\x9d\xe7\xcc\x25\xfd\x99\x7e\x9b\x9f\xe9\x6f\xfa\x99\x22\xae\xf8\x80\x7f\x26\x8a\x83\x47\xf5\x3b\x2d\x5e\x01\xaf\x2f\x00\x37\xa4\xfa\xad\x7c\x9d\x7d\xf3\x8b\x5a\x9b\xcc\xa6\x36\x79\x66\xe1\x35\xe1\x06\xdb\x0d\x3a\x64\x20\xfc\x5a\x03\xf2\xa9\x83\xbd\xed\xea\x64\x76\xe8\xf0\xda\xfc\xc3\xef\xc7\xbe\xd3\xa4\x71\x0c\x8a\x47\x61\x08\xf0\x1d\x53\xfa\x08\xfb\x00\x98\xfe\xa1\xe4\x3e\xb1\xce\xb2\x7d"
		"\x4e\xba\x64\x73\x61\xb4\x8e\x8a\xe6\xdf\x36\x9f\xcc\xe6\xa5\xb8\xfd\xde\xc4\x49\x57\x7a\xb7\x33\xbe\x7a\xec\x91\x35\x02\x9f\x57\xeb\x19\x0e\x01\x36\x07\xe5\x69\x56\x75\x97\x86\x0b\x6b\x9d\x5f\x27\xa8\xcb\x8d\x62\xb1\xa1\x7f\xcd\xe6\xeb\xce\x5c\x33\xb3\x1d\x3b\xb2\x6e\x7d\xff\xf3\x2b\xed\x59\x14\xc5\xd5\x91\x6b\xa5\x6a\x97\x12\x2e\x0b\x9d\x03\x88\xe2\x2e\x0c\xdf\x13\xe9\xfb\x63\x84\xd9\x0b\xfa\xea\x54\x6b\xc5\x2a\x7d\x39\x76\xf5\x6f\x53\xfc\xe8\x11\xcf\xd9\x31\x6f\xeb\xf5\x37\xf9\x59\xaf\xeb\xcf\x1e\x73\x47"
		"\xfb\xf3\xb1\x3c\x49\xcd\xfe\x78\xc4\x52\xe2\x3a\x8e\x51\x82\x5a\x5f\x78\x96\xd6\xb8\x61\x3d\x1d\xe5\x88\x59\xc7\x26\x8a\x49\x3e\x03\xbf\xd8\x48\xea\x30\x26\x82\xcd\x0e\xed\x5e\xe4\x15\x93\x33\xe5\x67\x62\x3d\x3d\x75\xaf\xdd\xae\xd6\xcf\x2b\x93\xba\x8d\x9a\x0e\xa8\xe5\xbb\x12\x89\x9d\xb7\xf8\x1b\xf7\xda\xca\xcc\x26\x6a\xed\x6f\x60\x3c\x22\x6c\x8a\x54\x6a\x08\xa2\x7e\x36\xe1\xba\x27\xf1\x01\xa9\x71\x1a\x91\xfc\x7d\x26\xf8\xf4\xcc\xfa\x78\x4b\x50\xd7\x47\xc6\x5b\xdb\xea\xe2\x62\x28\xd7\xe6\xef\xd1\xf1\xb4\xdc"
		"\x6d\xce\xa9\xc6\x4d\xa7\xed\x4e\x85\xf1\x1b\x09\x57\x39\xeb\x6f\x1a\xd5\x5a\x39\x59\x19\x70\xf9\x64\x62\xc3\xe6\xe4\x7b\xd4\x31\x3f\x62\x89\xed\xfe\x22\x3f\xeb\xc7\x88\x3d\x26\x5a\x27\x2e\x4e\xcf\xea\x7d\x54\xaf\xf9\x53\x84\x27\x0e\xe4\xd0\xff\x8f\x67\x9e\x08\x16\xaa\x4f\x71\x7c\x01\x9f\x27\xea\x3f\x54\x8d\x01\xa5\x4a\x2e\x60\x07\xe7\x39\xe5\x7e\x02\x1b\xd7\xe5\xa6\x02\x1b\x85\xf6\x5a\x82\x9e\x62\xae\xee\xbb\x21\x1f\x1e\xcf\x50\x62\xcc\x15\x9d\x1b\xe9\x3e\x11\xcf\x11\x17\xd9\x30\xb5\xba\x6a\x86\xe9\xa1\x76"
		"\xf8\xce\x3c\x27\xd5\xab\xee\xbd\x7f\xcc\xfe\xea\x4f\xc2\x73\xd2\x03\x37\x42\xd4\x27\xa4\xf4\xad\xbb\xe7\x49\x4c\x9f\x0d\xc6\x9b\xc0\xe2\x12\x81\x6c\x18\x19\xe7\x72\x84\xd7\x65\x39\x8c\xcc\xe5\xf9\x54\xe1\xd9\x45\x5c\x5f\x96\xa9\x5a\x6f\xb6\xf5\x47\xfe\x56\xfd\xf6\x61\x0f\x51\x89\x39\x83\x85\xbc\x67\xab\xa6\x35\xe4\xee\xac\xf4\xcf\x19\x6a\xf1\xdb\xa8\xdf\x86\x8e\xc5\x13\xfb\x8b\xf5\x77\xae\xf5\x7c\x3e\x56\x7a\x4c\x1f\xd2\x56\x63\x73\xfe\x84\xed\x5d\x7b\xaf\x29\xc2\x3e\xec\xac\xd3\x41\x0e\xf7\x33\xc3\x00\x40"
		"\xae\x9c\xf5\x2b\xc1\x7e\x5b\x3d\xab\xcb\x4d\x31\x4e\x66\x5a\xf3\xa2\x5f\x51\x7e\xa9\xbe\x36\x94\x6b\x40\xe3\x03\xd0\x4e\x8b\x62\x78\x18\x4b\x81\xe3\x32\xf2\x1a\x37\x6c\xf4\xc8\xbf\x8a\x7c\xcc\x2a\x3f\x68\xa5\x66\xda\xf1\x4b\x07\x39\x07\xbd\xce\x0f\x0d\x59\x2e\xa9\x81\xd9\x82\xba\x50\x5a\x3f\xb2\xda\x13\x25\x6f\xf8\x24\x3f\xf6\xf7\xd7\xac\xd9\xea\x0c\xfb\x4f\x72\x76\x9d\xeb\xeb\xcd\xea\x35\x3c\xce\x4b\xe7\x09\x4d\x0d\x05\xb5\xe3\x5e\xe3\x3e\x7c\x66\xce\x03\xf6\x9a\xcc\x7b\x21\x3a\x76\xa8\x70\x41\x46\xf3\x9d"
		"\xe2\x6b\x1b\xfb\xf5\x35\x19\x37\x8e\x8f\x8d\xb4\x73\x62\x28\xaf\x9c\x7c\xd4\xeb\xab\x5b\xc7\xb9\xdb\x11\x5b\x94\xcd\xf6\x76\xf8\x2d\x12\x77\x38\x07\xf1\xbf\x6a\x2c\x31\x73\x9b\x27\xbc\x76\xad\xbe\x91\xd8\x2f\x35\xbe\x9e\x28\x5e\x50\xc3\x39\xf6\x02\x58\x3a\x85\x81\x3b\x36\xec\xcc\x5b\xdf\xe7\x4a\x3c\x68\x6f\xee\x52\x54\x3c\xba\x15\x77\x1e\x01\xf7\xf2\x75\xcd\xfd\xfc\x96\xfe\xb4\xbc\xdd\xa6\x5f\x49\x45\xc7\x96\x7e\x9f\xf3\xfa\xda\xa5\x43\x83\x1c\x05\xf6\x49\xcc\x11\xaf\xbb\xc9\x6b\xda\x58\xdc\x01\x6b\x9e\x2a"
		"\xbe\x7d\x14\x13\xe2\xf7\x7c\x6f\x6e\x97\x08\x8b\x83\x7e\xf4\x5a\x17\x10\x71\xa6\x47\x98\xb0\x89\xc4\xc3\x42\x5f\xab\xd6\xdb\x3b\xf2\xd5\x34\xce\x95\xd8\x9c\xd5\x3a\xd4\xec\xfb\xd5\xa1\xee\x10\xc8\x05\xef\xc9\x55\xc4\xf8\x9a\xbe\x19\x2b\x3f\xb6\xb0\xa1\xe2\xeb\xb4\x73\x80\xd3\x15\x99\x76\xdb\x4c\xb6\xd7\xec\x95\xea\xc0\x28\xfe\xd0\xac\xab\x65\xb2\xa2\xc1\xbd\x43\xb1\x1c\x3b\xfb\x04\xeb\xe3\xa8\xbc\xac\xc4\xd7\xa9\x9c\x6e\xc4\xbb\xfb\x00\xaf\x19\x61\xf4\x59\x8c\x1e\xed\xcd\x21\xd2\x9f\xc9\xf3\xf3\x50\x5e\x7b"
		"\xd2\x37\x87\xc5\x39\x26\xf1\xbd\x5a\xa6\x00\xcb\x50\xe3\x8d\x19\x08\x06\xa9\x67\x75\xa3\x12\xfb\xa0\xc7\x20\xfe\x77\x8a\x72\x25\x81\xfe\x8d\xfa\x4a\x32\xdd\x34\x32\x3f\x8a\xd4\xf4\x8f\xc4\xcf\xd3\x79\x83\x11\x30\x1c\x3d\xe1\x38\x1c\x84\xd7\xbc\x1b\x9b\x5e\x88\x8d\x4f\xb9\xf6\x6d\xff\xdd\x1a\x77\x66\x53\x86\x06\xe3\xc3\x7a\x6a\x44\xd8\x26\x9a\x5b\xc6\x7c\x53\xd0\x53\x99\xd9\xf0\x3d\xc1\xc4\x8c\xc4\x5e\x19\xa1\xbe\xb7\x86\x0f\x18\xf3\x4b\x75\x6e\xf6\x52\xe9\x25\x10\xd4\xbf\x44\x32\x35\xb2\xf7\x32\x89\x7d\x4f"
		"\xcc\x4f\x4a\x6f\xbb\xb1\x8e\xb4\xa7\x1a\xc9\x23\x34\x6b\xe1\x2a\xf9\xda\x62\xf3\xdd\x79\x7b\x3e\x76\xf1\x79\x44\xf1\xd8\xa8\x17\xe3\xb4\xda\x63\xae\xe6\x5e\x5e\x9b\xf9\x02\x56\x67\x86\xb6\x9f\xe3\xd8\x50\xb5\xcb\x31\x8e\xc2\xd6\xad\x74\x6b\xef\x9e\xa9\xe2\xaf\xeb\xef\x33\x68\x8e\x1d\x85\x47\x3f\xa8\x5e\x85\x99\x71\xd8\x45\xbd\x9d\x23\x4e\xcf\x46\xef\x27\x1d\x53\xaa\xd5\x43\x31\xac\xc0\x5f\x89\x45\x17\x4e\x80\x51\xde\xda\xf5\xae\x9f\xc1\xb7\x55\x6c\x61\x5b\xfb\xf2\xb2\xeb\x9c\x88\x47\x0f\x9f\xe3\x44\x38\x46"
		"\x29\xd7\x45\x85\xcf\x7d\x48\xbc\x5e\x87\xf6\x7b\x6d\xbc\x27\xb3\x6d\x58\x6c\xdc\xd5\xb6\x2a\x3b\xf3\x44\x70\x30\x6c\xfc\xa3\x9a\xd0\x41\x08\x97\x37\xab\x05\x8f\xb0\x64\xcc\x0e\x80\xf8\x48\xb8\x2e\x19\xaf\x64\xc0\x1f\x12\xe1\x42\x18\x97\xf5\xa0\xb8\xfb\x25\x5d\x7c\x3d\x4c\x20\xc7\x19\x67\xc9\x44\x6c\x42\xab\x0f\xb9\xcd\x1a\xda\x2c\xc2\xe3\x6a\x83\x04\xbd\x80\x76\xf6\xbc\x39\x32\x6e\x3d\x90\x31\x11\x3f\xce\xd8\xd0\x87\x43\xa0\xdf\x6c\x5e\x78\xc3\x90\xba\x3e\x32\xd8\xab\x00\xe3\x4b\x91\x5f\x29\x64\x3d\x88\x7f"
		"\xde\x89\xd8\x00\x58\x73\x3c\x35\x71\x87\xcc\x67\x7e\xa9\xfa\x7a\xa6\x96\x6d\x95\x1f\x0c\x3b\x97\x6b\xbc\xc5\x11\xc7\x08\xda\xf1\xc9\xf7\xb7\x3e\x7e\x32\x6f\xc0\xe4\x45\x2d\x9f\x27\xc2\xd7\xf8\x88\x1c\x45\xd8\x63\x21\x83\x8e\xc6\x1e\xde\xb5\x9e\xde\x26\x26\x8b\x7c\x6d\x5b\x5f\xcc\x82\xcb\x32\xf5\x8d\xea\x9c\x11\x72\x7e\x8f\xf3\x30\xa6\xac\x8e\x9f\x74\x7f\x33\x35\x5f\x1f\x3d\x32\x81\x2f\x08\xb7\xdd\x6a\xdd\x75\x9d\x47\x52\x3e\x05\x9c\x7b\x9a\x8f\x7d\x46\xbe\xb7\xec\x6b\xac\x3d\x36\xf5\x5a\xe5\xf4\x61\x5c\x35"
		"\xb6\x3e\xd3\xaf\x43\xc7\x3b\x04\x7d\xc5\x7b\xe6\xdb\x01\x66\x54\x34\x8f\xc6\x8a\xfb\x36\x35\x7b\x24\x3e\x79\x72\x7c\x6d\x57\x9a\x13\x1d\x23\x2e\x2a\xac\x3f\xc4\x7e\x62\x4c\x97\x03\xf7\xd6\xa1\xd2\xef\x72\x99\x57\xcf\x0d\x5b\x8b\xf6\x78\x8a\x6a\x40\x2a\x9c\x63\xd5\xf5\x45\x7a\xdc\x09\xe1\x50\x77\x35\x8f\xad\xfc\xe4\x1a\xcf\xfd\x55\x7e\xa4\xdf\x20\x9e\x3e\xee\xe1\x8e\xae\x6d\xcf\x1c\x23\x51\x8b\xe5\x75\xaa\xae\x68\x17\x3f\x45\xb9\x4f\x86\xf9\x9e\x21\x7f\x0b\x35\x71\xba\x77\x0c\x93\x61\x1d\xa9\x9b\x9b\xa0\xf7"
		"\x22\xe5\xee\x93\x17\x87\x07\x70\x75\x78\x35\xbc\x79\xaa\x70\x46\xa0\xdf\x9d\xa7\x70\xbc\x3b\xb2\x7e\x5b\x79\xbf\x5a\x6c\x6e\x4c\x1f\x1e\x53\x2c\xb6\x67\x52\xe4\x6b\x4f\x7b\xe3\x86\x3a\xf7\xbc\x37\xae\x47\xee\xdb\xad\xf8\xc4\x83\xe1\xfc\xac\xf7\x9c\x68\xe6\x75\x2b\xb9\xd3\x28\x67\x39\x7d\x02\x77\xe8\x70\x01\x50\xef\x35\x41\xac\x98\xe1\x15\x58\xcd\xf8\x31\xc2\xc3\xc9\xbd\xd7\x66\x26\x75\x16\x6e\x9d\xc1\x5a\x98\x08\xef\x04\x3b\xe6\xfc\x58\x4b\x50\x9b\x6b\xb8\x54\x27\xda\xab\x18\xbf\x49\xe1\x9d\x7d\xaa\xf4\x23"
		"\xc1\x7c\x38\xad\xed\x64\xdc\x78\x91\xef\xee\xd6\x82\xaf\x8b\xd7\xf6\x1e\xfe\xde\xa3\x47\x91\x2b\xc1\x71\x86\x22\x76\xbf\x82\x63\x60\x7e\x2d\x72\x8b\x87\x58\xb7\x14\xf8\x20\x64\x9e\xd1\x9e\x1e\xe8\x47\x46\x18\x51\x86\x67\x20\xba\xde\xe0\xf5\xb4\xdd\x9b\xeb\xfe\xcf\xb9\xc1\x2b\x2f\x84\x33\x6e\x00\x3e\x92\xd2\xcb\xfb\x18\xe4\xc5\x69\xde\x58\xc9\xfb\x03\xe1\x8a\x44\x1c\x75\x16\xd2\xf7\x50\x5e\x4d\x3f\x5a\xac\x49\xed\x13\xe7\xb8\x42\xcc\x59\xcd\xee\x61\xf3\x7c\x94\x36\x9e\x89\xc5\x1f\x70\x6c\x4d\x0f\x52\x8c\x9b"
		"\x07\x9c\xd2\xa5\x2e\x7a\xd1\x23\xa7\xf4\x11\xd6\x13\x7e\x46\x6e\x17\xbf\xa8\x60\xae\x7e\x95\x7b\x8d\xd8\xef\xe9\x1f\xf3\x99\xff\x4c\xff\x2a\xff\x91\xfe\x5b\xfa\xbf\xbb\xb1\x85\xcc\xa7\xa2\x6b\x1e\x7a\x34\xf6\x51\x5f\x6c\xe1\xb1\xf4\x52\x1f\xde\x55\x30\x71\xac\x77\x4e\x84\x4b\x0e\xed\xcf\xf4\x4a\x6d\x4f\xdd\xc3\x1d\xf5\x8a\xeb\x01\x29\x41\x3f\xd7\xf9\x19\x86\x20\x6e\xc9\x30\xbb\xd8\xd3\xb3\xf0\x4d\xb2\x9c\x74\xb4\xde\x68\x3f\x49\xd2\x5b\xab\x86\x57\xd7\xf8\x00\xf4\x39\x05\x6a\x8b\x29\xb7\x05\xab\x3b\xee\x54"
		"\xbf\x9d\xa8\x37\x63\xa7\xb0\x06\xdd\xea\x73\x76\x57\xf3\xbb\x5f\x7f\x8b\x9a\x63\xa2\x6a\xca\xba\x6e\xfa\x54\x5d\xea\xcb\xbc\x0e\x5e\xe5\x9f\xe9\xbf\xab\xba\x54\xfc\x96\xd8\xfb\x9a\xf5\x13\x28\x98\xc2\x89\x8c\x5d\xf1\xa5\x4f\x86\x4f\x97\xf9\xef\x90\xfb\x09\xce\xff\x32\xdf\xeb\xe2\x6a\x95\xfd\x75\x0e\xc0\x4d\xd5\xba\xde\xaf\xf3\xf3\x5f\x4d\x9d\x7a\xfd\xba\x47\xc8\x6d\xe8\xe3\xa3\x6b\x68\x3d\x8f\xff\xeb\x39\xeb\x79\xef\x37\xfe\xab\x27\x2d\x2f\xb2\xaa\xdd\x67\xfd\x62\xe7\xdf\x07\xb5\xbf\x86\x73\x66\x9c\xfb\x3a"
		"\xd6\x81\x71\x87\x51\xc9\x3b\xf3\xde\x59\xf5\x48\x55\x5c\xc2\xb7\x63\x55\xed\x57\x5e\xaf\x29\x78\x8f\xe4\xb9\xd5\x58\xec\xa7\x4f\xf6\xdd\x25\x03\x8f\x86\x8b\xe3\x9d\x55\xdf\x5d\x86\xbd\xba\xda\xfa\x0f\xb2\xa6\xc5\x7d\x5b\x6e\xa7\x4d\x26\x3f\xb4\xd5\x9b\x1c\x54\x3f\xaa\x2f\xf3\xdc\xf9\x65\x5e\x2f\xbf\xce\xb6\xcd\xef\xc5\xdf\x5e\xd6\xf9\x2c\x27\xa4\x9b\x65\x68\x37\xcb\xd0\x6e\x96\xa1\xdd\x77\xe3\xe3\x65\xe0\x44\xdd\x78\x58\xc9\x38\x66\xc2\x23\x9c\xb6\x78\xdb\x98\xef\xbc\xb5\xcf\xc8\x07\x5b\x7c\xe6\xfc\x31\xcb"
		"\x8b\x6f\xf6\x7a\x99\xe8\x2c\xc4\xd4\xeb\xfe\xd0\xc4\x86\x7d\x6c\xef\x6c\xaf\xe9\xdb\xbb\x07\x3d\x87\x26\xc2\x4d\x35\xb0\xde\xca\x2b\xe6\x74\x14\xc5\x37\x6b\xd6\xe2\xd5\xf7\x98\x37\xfc\x42\x13\xf4\xcb\xb5\x35\xbb\x46\x0e\x22\xe7\x38\x62\x95\xd5\x7d\x7b\xda\xab\xe0\xd5\xf6\xfa\x48\xbc\x1f\x6b\x86\x9e\xc5\xa2\xde\x3f\xec\x31\x85\xbe\x4e\x70\x1e\x7b\x4e\x9d\x33\xe1\x39\x7f\x7b\xac\xb3\x69\x55\x5d\xe8\xa4\xe2\x02\xdb\x33\x58\xdc\xac\xbb\xee\x1a\x2b\x7c\x4a\x6f\x6e\xdc\x0b\x46\xee\xa8\xaf\xab\x63\xe1\x46\x2e\x2b"
		"\xee\x5a\xcd\x87\x68\x7a\x78\x5f\x69\x9d\x4d\xef\x72\x19\xeb\xdc\x01\x5e\xa6\xee\xb1\xc6\xcf\x01\x6f\xd2\x2b\xd9\xae\xe6\x60\x58\x33\xee\xe7\xf2\x49\xfb\x41\x30\x1e\xd3\x5a\x47\xfa\xf4\x98\x7b\x2c\xe7\xc2\xbf\x4b\xf1\x3b\x06\xe8\x7b\x55\xf2\x1e\xe8\xc7\x58\xfb\x76\xef\xb9\xfe\x99\x1f\xbc\x22\x6a\xbd\xf0\x18\x3c\x8f\xf7\xeb\xd8\x7a\xd1\x07\xa3\xe6\x6b\x26\xb9\x54\xdf\xc7\xdd\xd7\xfb\xa0\xde\xc7\xef\x67\xfa\xae\x66\xcf\x11\xdd\x93\x9c\x80\x60\xff\x25\xd7\x6b\xac\xaf\xbe\xeb\x38\x7f\xaf\x62\x9f\x3e\x11\xf9\xf2"
		"\xe0\xda\x86\x98\xb2\x9b\x27\xab\x6f\x70\xae\x8c\xf9\x89\xbc\x73\x7e\xf4\x8a\x78\x6f\xda\x80\x27\xf7\x7c\x96\x07\x7c\x02\x3e\xa0\x22\x43\x47\xb2\x56\xb6\xf3\x5a\xf7\xfd\x46\xbe\x13\xf4\x65\x66\x3c\x67\x2c\xff\x98\xef\x38\x95\x27\xe2\xab\x3b\x1f\xb5\x70\x88\x0b\xeb\x25\xb1\xc9\xc8\x31\x9c\x63\x56\xb6\xda\xb9\xac\xf3\xf5\xc1\xda\xa8\xe4\xcb\x74\xcc\xdf\xe0\x7f\x82\x3c\x18\xeb\x61\xb8\xd4\x32\x8c\x0d\x3b\x3a\x3a\xe7\x54\x38\x0f\x35\x46\xbf\xcc\x49\x1d\x73\xdc\xe1\x2f\xd4\x7c\xb0\x4c\x6c\x45\x94\x1f\x39\x4d\xb4"
		"\x7e\xbd\x5b\x31\x49\x18\xd3\xae\xfd\xce\xc4\xe6\x1e\x1e\x7c\x29\xbd\xb7\x1f\x6f\x78\x42\xf5\x3c\xb9\xd6\xa3\xed\x7e\x2d\x57\x5b\x96\x5f\xea\xc7\xa9\xfb\x2e\xf3\xee\x10\x70\xda\x87\xdc\x06\x81\x0e\xa3\xf2\xa9\x0b\xf8\xe5\x4c\x0c\xe0\x95\xc4\x21\x5f\x83\xef\xe1\xe5\xdd\xb2\xc6\xa6\x87\x7e\xf8\xb1\xc3\x2f\x7b\x77\xdf\x6c\x22\x31\x0f\x1d\x3b\x78\xd8\xcc\x59\x73\x30\xbd\xde\xfa\x75\x3d\xcb\x37\xdb\x1f\x6e\xb5\x73\x58\x9f\xbb\xd2\xab\x1e\xc7\x64\x74\xb6\x11\x7f\xf6\xe3\x8a\x89\x7d\xba\xd5\x2e\xfc\xd1\x98\x8b\x76"
		"\xac\x33\xd8\x0c\x39\xbd\x50\xbb\x51\xe8\xdf\xbd\x8b\x45\xe8\xfb\xf5\xd0\xeb\x80\x6d\xe7\xeb\xe3\xda\xc8\xdb\x5f\x0c\x47\xf5\x48\xec\xeb\x48\x27\x87\xb9\x7d\x17\xff\xb6\xfd\xb6\x6c\x5f\x0e\x2b\x3f\x1d\xdf\x27\x19\xcb\x38\x2e\xe2\x7f\xe7\x64\xb9\x6c\xa2\x73\xf0\x98\xcf\x1e\x5f\x62\x6d\x83\xd1\xf7\x78\x9d\xbb\xce\x1a\x8c\x1d\x6e\xb7\x8f\xca\x26\x12\xf2\x1c\x03\xb9\xef\x00\x1c\x42\xd9\x3d\x6f\x74\x5f\x2b\x1b\xb2\xe3\x8b\xb3\xb1\xd4\x2d\xc6\x60\x9f\xab\xc7\x7e\x45\xea\xbb\xe7\x34\xf1\x7c\x4d\xc3\xbe\x64\x3c\x96"
		"\x9d\xf1\x19\xff\x1f\xca\x34\x05\x91"
	};
	dict.loadParameterInfo(reinterpret_cast<const uint8*>(parameterData), 0x2e09);

	const Nativizer::CompactFunctionEntry functionList[] =
	{
		{ 0x94f7b87d97b4e4a8, &exec_94f7b87d97b4e4a8, 0x0000381e },
		{ 0xc5cec63f8409af93, &exec_c5cec63f8409af93, 0x000022a9 },
		{ 0xa3601c14c92357f7, &exec_a3601c14c92357f7, 0x000037c6 },
		{ 0xa8bc963b9ec533e4, &exec_a8bc963b9ec533e4, 0x00000dfc },
		{ 0xd2f81be51434c9a2, &exec_d2f81be51434c9a2, 0x00000028 },
		{ 0x7fd49bc63ba965fa, &exec_7fd49bc63ba965fa, 0x00000000 },
		{ 0x9420c1e8a5291f33, &exec_9420c1e8a5291f33, 0x00000009 },
		{ 0xd76acf46f718c565, &exec_d76acf46f718c565, 0x00000001 },
		{ 0x5fb918d00c90278e, &exec_5fb918d00c90278e, 0x000002ee },
		{ 0xf55b7d65ea9ca382, &exec_f55b7d65ea9ca382, 0x00000f97 },
		{ 0x1c91ab52a4c103a5, &exec_1c91ab52a4c103a5, 0x00002591 },
		{ 0x6b825a1acb77a4a6, &exec_6b825a1acb77a4a6, 0x00001601 },
		{ 0x22e4f9f7addfc49b, &exec_22e4f9f7addfc49b, 0x000014d7 },
		{ 0x01fd245825ea2674, &exec_01fd245825ea2674, 0x0000096d },
		{ 0x7f67cc3e0625772f, &exec_7f67cc3e0625772f, 0x00000039 },
		{ 0xc2efcdfe19757a7d, &exec_c2efcdfe19757a7d, 0x00004844 },
		{ 0x01a101d08760e841, &exec_01a101d08760e841, 0x00000772 },
		{ 0xa7c46930c202e1ec, &exec_a7c46930c202e1ec, 0x000005d9 },
		{ 0xa37a99488af38ff1, &exec_a37a99488af38ff1, 0x00002fd9 },
		{ 0xbf97679aae818c13, &exec_bf97679aae818c13, 0x00000000 },
		{ 0x9ad501e134863df5, &exec_9ad501e134863df5, 0x0000098b },
		{ 0xf667a6805c727cdf, &exec_f667a6805c727cdf, 0x0000273a },
		{ 0xe4badf1ef0947665, &exec_e4badf1ef0947665, 0x000008d2 },
		{ 0xd1c250796e027a94, &exec_d1c250796e027a94, 0x00000bb6 },
		{ 0xb8725eb0861e3767, &exec_b8725eb0861e3767, 0x00000022 },
		{ 0x64a99bd0ab6030ff, &exec_64a99bd0ab6030ff, 0x00000341 },
		{ 0xf4357d2d67f50a43, &exec_f4357d2d67f50a43, 0x00003861 },
		{ 0x6c8d81635e788a03, &exec_6c8d81635e788a03, 0x000029a6 },
		{ 0x1decb5bfab67cf06, &exec_1decb5bfab67cf06, 0x00000d76 },
		{ 0x2a03f405cf235d3b, &exec_2a03f405cf235d3b, 0x0000465c },
		{ 0x204812ae11dd1df3, &exec_204812ae11dd1df3, 0x0000002d },
		{ 0x84f97c724dcc3bdf, &exec_84f97c724dcc3bdf, 0x00004806 },
		{ 0xe837650490ab1bd4, &exec_e837650490ab1bd4, 0x00000bfd },
		{ 0x73f71da72409cdee, &exec_73f71da72409cdee, 0x00000003 },
		{ 0x4acc6c8a5d8690ab, &exec_4acc6c8a5d8690ab, 0x0000021d },
		{ 0x30a703b9fbcffc27, &exec_30a703b9fbcffc27, 0x00001461 },
		{ 0x1f1832da7c352529, &exec_1f1832da7c352529, 0x0000317a },
		{ 0xa263de5a143465f8, &exec_a263de5a143465f8, 0x00002880 },
		{ 0xcbc709f850f2b8bc, &exec_cbc709f850f2b8bc, 0x00000318 },
		{ 0x8dcbb900da64b14d, &exec_8dcbb900da64b14d, 0x00003a9c },
		{ 0xbbe2070bea99ffb0, &exec_bbe2070bea99ffb0, 0x0000208e },
		{ 0xf047ee88a887d58e, &exec_f047ee88a887d58e, 0x0000308a },
		{ 0x637ecec846e6ca30, &exec_637ecec846e6ca30, 0x00000229 },
		{ 0x5e42d8308a06585f, &exec_5e42d8308a06585f, 0x00002d75 },
		{ 0x2ff77cd46d71c53c, &exec_2ff77cd46d71c53c, 0x00000d8b },
		{ 0x30b730e7b0b9092d, &exec_30b730e7b0b9092d, 0x000007bb },
		{ 0x8f994c348b7b9912, &exec_8f994c348b7b9912, 0x00000006 },
		{ 0x0d9cad3a91f5b68d, &exec_0d9cad3a91f5b68d, 0x00000137 },
		{ 0x9a9419ec7433ac94, &exec_9a9419ec7433ac94, 0x00001d0a },
		{ 0xc9fb7eca143f93fc, &exec_c9fb7eca143f93fc, 0x00001aea },
		{ 0x9d1353a009e72e1f, &exec_9d1353a009e72e1f, 0x000004e4 },
		{ 0xb26b22b330cb2ddc, &exec_b26b22b330cb2ddc, 0x000005b3 },
		{ 0xa6968f8ee5dad7f3, &exec_a6968f8ee5dad7f3, 0x000014a6 },
		{ 0x39d56faee91bfaef, &exec_39d56faee91bfaef, 0x000016d2 },
		{ 0x5a6c1cc52a9eb6f1, &exec_5a6c1cc52a9eb6f1, 0x00001433 },
		{ 0x3156da18aee014a5, &exec_3156da18aee014a5, 0x00000000 },
		{ 0xe5e1012160fdfbcf, &exec_e5e1012160fdfbcf, 0x00004450 },
		{ 0xc1fcd5dc9d1d90b5, &exec_c1fcd5dc9d1d90b5, 0x00001012 },
		{ 0x0c2e218df70a96fe, &exec_0c2e218df70a96fe, 0x000007c1 },
		{ 0x92d09f4d30599785, &exec_92d09f4d30599785, 0x00000a83 },
		{ 0xf3b44963624766c9, &exec_f3b44963624766c9, 0x00003dd7 },
		{ 0x6d619579b8d162a0, &exec_6d619579b8d162a0, 0x0000000b },
		{ 0x21ef52a297768134, &exec_21ef52a297768134, 0x000002c6 },
		{ 0x2cd8a7cefd07c530, &exec_2cd8a7cefd07c530, 0x00003e53 },
		{ 0xafe71840cc353c57, &exec_afe71840cc353c57, 0x00000dba },
		{ 0x0a0e5a38b034a450, &exec_0a0e5a38b034a450, 0x00002e90 },
		{ 0x8846895ac0a5fa92, &exec_8846895ac0a5fa92, 0x0000001d },
		{ 0x2a0e8089dd7554c1, &exec_2a0e8089dd7554c1, 0x00003d30 },
		{ 0xc8b4a676fa498a87, &exec_c8b4a676fa498a87, 0x000033a3 },
		{ 0x3536561526b16c6d, &exec_3536561526b16c6d, 0x00003f15 },
		{ 0x6e4993262d448ed5, &exec_6e4993262d448ed5, 0x00003acb },
		{ 0xab7b13cd6ce83964, &exec_ab7b13cd6ce83964, 0x000003bd },
		{ 0x5640a91da0e4bdf6, &exec_5640a91da0e4bdf6, 0x00001102 },
		{ 0x4c7f93813b512975, &exec_4c7f93813b512975, 0x00000845 },
		{ 0x6962e1556ddfa5a9, &exec_6962e1556ddfa5a9, 0x00001819 },
		{ 0xc68edb301bca57ea, &exec_c68edb301bca57ea, 0x000025c6 },
		{ 0xbbbd594751734687, &exec_bbbd594751734687, 0x00000de1 },
		{ 0x937947952ed5cba3, &exec_937947952ed5cba3, 0x0000000f },
		{ 0x6f371f2fa738f894, &exec_6f371f2fa738f894, 0x00000014 },
		{ 0xd166eb080de073df, &exec_d166eb080de073df, 0x00000099 },
		{ 0xdd9f15bbb28d6e48, &exec_dd9f15bbb28d6e48, 0x0000190f },
		{ 0x71daaef19ea1da0e, &exec_71daaef19ea1da0e, 0x00002511 },
		{ 0xaeefe3610d3d0b57, &exec_aeefe3610d3d0b57, 0x000001cf },
		{ 0xa0a4065228352414, &exec_a0a4065228352414, 0x00001246 },
		{ 0x6aa7485a5ad555aa, &exec_6aa7485a5ad555aa, 0x0000158e },
		{ 0x90f6b8df48bc8226, &exec_90f6b8df48bc8226, 0x0000149d },
		{ 0xe7d96c0b0d09f3f5, &exec_e7d96c0b0d09f3f5, 0x000046fc },
		{ 0x5f971bf34600fba2, &exec_5f971bf34600fba2, 0x00000016 },
		{ 0x0c679e5038b93feb, &exec_0c679e5038b93feb, 0x000040f6 },
		{ 0x598523f2ce23e35f, &exec_598523f2ce23e35f, 0x0000114d },
		{ 0x915c4d39eec7771b, &exec_915c4d39eec7771b, 0x00000312 },
		{ 0x9c84e03997c7b4fd, &exec_9c84e03997c7b4fd, 0x000002a8 },
		{ 0xd50ce60a630f7033, &exec_d50ce60a630f7033, 0x00000042 },
		{ 0x746a748db1b03951, &exec_746a748db1b03951, 0x00000018 },
		{ 0x9cd7dc267fb3350a, &exec_9cd7dc267fb3350a, 0x0000013b },
		{ 0x76b7114faf2f558d, &exec_76b7114faf2f558d, 0x00003cdb },
		{ 0x1576974d1628df13, &exec_1576974d1628df13, 0x0000001b },
		{ 0x51dd82d0e09c6f2a, &exec_51dd82d0e09c6f2a, 0x00003261 },
		{ 0x2014d78e16315665, &exec_2014d78e16315665, 0x00000036 },
		{ 0x472864d608e2d250, &exec_472864d608e2d250, 0x000007b4 },
		{ 0x0c32f5a73e799422, &exec_0c32f5a73e799422, 0x00000f78 },
		{ 0x9c1ac7205fcb4676, &exec_9c1ac7205fcb4676, 0x000001d8 },
		{ 0x62b6308e8464a5f8, &exec_62b6308e8464a5f8, 0x0000001f },
		{ 0xa03bcd30cb565cdb, &exec_a03bcd30cb565cdb, 0x00002562 },
		{ 0x3134cd3c8bbea023, &exec_3134cd3c8bbea023, 0x00000094 },
		{ 0x80f4fb94632d3e1a, &exec_80f4fb94632d3e1a, 0x00000ca4 },
		{ 0x3849bac360eeec4b, &exec_3849bac360eeec4b, 0x000007be },
		{ 0x595a6767664987c0, &exec_595a6767664987c0, 0x0000476c },
		{ 0x504ec1d8ea72e5de, &exec_504ec1d8ea72e5de, 0x00000665 },
		{ 0x235e2c2f05e75e86, &exec_235e2c2f05e75e86, 0x0000394a },
		{ 0x0a50b479d8efdbf9, &exec_0a50b479d8efdbf9, 0x00000d7f },
		{ 0xc5551414c134e217, &exec_c5551414c134e217, 0x00001fd0 },
		{ 0xd2553f7b59f01294, &exec_d2553f7b59f01294, 0x0000458b },
		{ 0x75ab39378792ab44, &exec_75ab39378792ab44, 0x00000afc },
		{ 0xc7efb107ab74960f, &exec_c7efb107ab74960f, 0x0000093c },
		{ 0x9c0f8b146f7b0915, &exec_9c0f8b146f7b0915, 0x00001cef },
		{ 0x8a1db7334f3155a8, &exec_8a1db7334f3155a8, 0x00002c2d },
		{ 0xa8f6971331915339, &exec_a8f6971331915339, 0x00000b06 },
		{ 0x8b68839f06312d83, &exec_8b68839f06312d83, 0x00000512 },
		{ 0x2f1836d10acc4ea8, &exec_2f1836d10acc4ea8, 0x00003e8c },
		{ 0xdc3241de43709c58, &exec_dc3241de43709c58, 0x000007d5 },
		{ 0x08fab55db3320861, &exec_08fab55db3320861, 0x00002fde },
		{ 0x7192993c55f26754, &exec_7192993c55f26754, 0x00004542 },
		{ 0x28fd6fa94b2457d7, &exec_28fd6fa94b2457d7, 0x0000002b },
		{ 0x09d5568ae81bee29, &exec_09d5568ae81bee29, 0x00001497 },
		{ 0xf08304f78a6569eb, &exec_f08304f78a6569eb, 0x00000f7a },
		{ 0x241786c029ed3b85, &exec_241786c029ed3b85, 0x00000192 },
		{ 0xd580c8b7b6331a68, &exec_d580c8b7b6331a68, 0x00000496 },
		{ 0x87b438ff5094ec79, &exec_87b438ff5094ec79, 0x000007cc },
		{ 0xc2b21eda2fa9f706, &exec_c2b21eda2fa9f706, 0x00000abb },
		{ 0xa2ebdc0491b2fdbc, &exec_a2ebdc0491b2fdbc, 0x0000003e },
		{ 0x13bbb6d00c3c45a4, &exec_13bbb6d00c3c45a4, 0x0000299a },
		{ 0xe7e194cea2cfd15f, &exec_e7e194cea2cfd15f, 0x00001055 },
		{ 0x33c36d0a67dd0252, &exec_33c36d0a67dd0252, 0x0000376f },
		{ 0x982dd2233d48e6e5, &exec_982dd2233d48e6e5, 0x000001bb },
		{ 0xefc50c7e6fe8c312, &exec_efc50c7e6fe8c312, 0x0000068c },
		{ 0x0ca7731a2a1cbb73, &exec_0ca7731a2a1cbb73, 0x0000400b },
		{ 0x9983f21b368d8698, &exec_9983f21b368d8698, 0x00000000 },
		{ 0xc97e5b406ec696b2, &exec_c97e5b406ec696b2, 0x00000031 },
		{ 0xf78c6f9ec981cbcf, &exec_f78c6f9ec981cbcf, 0x000014c3 },
		{ 0x551d78caf87bc3c5, &exec_551d78caf87bc3c5, 0x0000439c },
		{ 0xf96d8916ac8add69, &exec_f96d8916ac8add69, 0x000006da },
		{ 0xc3a1a3a0c471c27d, &exec_c3a1a3a0c471c27d, 0x0000003b },
		{ 0x78e8b997de360e12, &exec_78e8b997de360e12, 0x000007ff },
		{ 0x83efdae6bfe4c520, &exec_83efdae6bfe4c520, 0x00002f32 },
		{ 0x96bab6f29f7caeaf, &exec_96bab6f29f7caeaf, 0x00000b31 },
		{ 0x4c4f598e5cfc58e6, &exec_4c4f598e5cfc58e6, 0x000004c7 },
		{ 0xdb53bd8479a20567, &exec_db53bd8479a20567, 0x000042c7 },
		{ 0x84224d4b0fa4be79, &exec_84224d4b0fa4be79, 0x00000729 },
		{ 0x79448f1cc38f4e46, &exec_79448f1cc38f4e46, 0x00000040 },
		{ 0x2ae4aacca7ad87e1, &exec_2ae4aacca7ad87e1, 0x00000285 },
		{ 0x67e5ae06db48adb2, &exec_67e5ae06db48adb2, 0x0000320e },
		{ 0xb3875b56b8cc3dc2, &exec_b3875b56b8cc3dc2, 0x000006d3 },
		{ 0x59f4c128b282d870, &exec_59f4c128b282d870, 0x00001cb5 },
		{ 0x538d60420ed67062, &exec_538d60420ed67062, 0x00003dfa },
		{ 0x10e26f3013e7d607, &exec_10e26f3013e7d607, 0x0000028a },
		{ 0x81019b3fba446e48, &exec_81019b3fba446e48, 0x00000044 },
		{ 0x1fd807b5f295fcdd, &exec_1fd807b5f295fcdd, 0x00001048 },
		{ 0xa6adffa5dd795f5f, &exec_a6adffa5dd795f5f, 0x00001b84 },
		{ 0x79a8c285b885acc2, &exec_79a8c285b885acc2, 0x00001f13 },
		{ 0x42ecbd8096ac9bd5, &exec_42ecbd8096ac9bd5, 0x000002f2 },
		{ 0x103aebe39d1d1e7e, &exec_103aebe39d1d1e7e, 0x00003006 },
		{ 0xe89375035c49b947, &exec_e89375035c49b947, 0x0000014c },
		{ 0x2737da95dc2f1637, &exec_2737da95dc2f1637, 0x00002bab },
		{ 0x3e3b178d82344703, &exec_3e3b178d82344703, 0x000016a4 },
		{ 0x631a1f1093d4603e, &exec_631a1f1093d4603e, 0x00000170 },
		{ 0x096e4fa8b3e5ab5b, &exec_096e4fa8b3e5ab5b, 0x000009a2 },
		{ 0xc774169389f69f02, &exec_c774169389f69f02, 0x00000046 },
		{ 0xe8b5dc41a1cd3670, &exec_e8b5dc41a1cd3670, 0x0000004b },
		{ 0xe997f0f38a033101, &exec_e997f0f38a033101, 0x00000f9e },
		{ 0xe519e6787650d40b, &exec_e519e6787650d40b, 0x00004297 },
		{ 0xc78b87091b217e31, &exec_c78b87091b217e31, 0x000019b7 },
		{ 0x83c6d5da902d1e65, &exec_83c6d5da902d1e65, 0x0000090d },
		{ 0xbef3d04b7bc2722b, &exec_bef3d04b7bc2722b, 0x00000a57 },
		{ 0xd98a9ab0bc384fc2, &exec_d98a9ab0bc384fc2, 0x000009b0 },
		{ 0xff1b53dba58a3c01, &exec_ff1b53dba58a3c01, 0x0000045d },
		{ 0xfc73efa8ed382d75, &exec_fc73efa8ed382d75, 0x000017c1 },
		{ 0x3e5068847e3f38dc, &exec_3e5068847e3f38dc, 0x0000019b },
		{ 0xd74ebc0280d514a7, &exec_d74ebc0280d514a7, 0x00001909 },
		{ 0x9c2d9373cde63835, &exec_9c2d9373cde63835, 0x00003557 },
		{ 0xa718c936b408b91f, &exec_a718c936b408b91f, 0x00002beb },
		{ 0x44040d5bf825651e, &exec_44040d5bf825651e, 0x0000410c },
		{ 0x573a2262ea9ffe10, &exec_573a2262ea9ffe10, 0x0000004f },
		{ 0x23fe29c9451f08c7, &exec_23fe29c9451f08c7, 0x00002ad7 },
		{ 0xbe40a23385969f79, &exec_be40a23385969f79, 0x00001b10 },
		{ 0xd9c33ce485ce087b, &exec_d9c33ce485ce087b, 0x0000103e },
		{ 0x893c85af96cedd1e, &exec_893c85af96cedd1e, 0x00000054 },
		{ 0xe67e35ded9d45442, &exec_e67e35ded9d45442, 0x00000260 },
		{ 0xfce4e049813b26ff, &exec_fce4e049813b26ff, 0x00002139 },
		{ 0x0767de2304038cf2, &exec_0767de2304038cf2, 0x00001b7a },
		{ 0xefee09377559e3b6, &exec_efee09377559e3b6, 0x00002377 },
		{ 0x524fa008ed97bd77, &exec_524fa008ed97bd77, 0x00000056 },
		{ 0xc8b3f315d6b4a6a9, &exec_c8b3f315d6b4a6a9, 0x00001005 },
		{ 0x76ebbcea624e7215, &exec_76ebbcea624e7215, 0x00001d83 },
		{ 0x7bc23b7ebbf63b54, &exec_7bc23b7ebbf63b54, 0x00000ae8 },
		{ 0xde5a3ea369628872, &exec_de5a3ea369628872, 0x000024c2 },
		{ 0x867c7e7c5844055d, &exec_867c7e7c5844055d, 0x0000005a },
		{ 0x00ae56fd5e8b56ab, &exec_00ae56fd5e8b56ab, 0x00000909 },
		{ 0x1ea0b69e3106256d, &exec_1ea0b69e3106256d, 0x00001c3d },
		{ 0x9ec25470bc2aa60d, &exec_9ec25470bc2aa60d, 0x0000054e },
		{ 0xa7652a1c516521ec, &exec_a7652a1c516521ec, 0x00001a2d },
		{ 0xc2d94c061cf0ab27, &exec_c2d94c061cf0ab27, 0x0000009c },
		{ 0x08586daefaed33d0, &exec_08586daefaed33d0, 0x000001ad },
		{ 0xa1142038483919f2, &exec_a1142038483919f2, 0x000010eb },
		{ 0xd7ec402fd4451d7e, &exec_d7ec402fd4451d7e, 0x00000347 },
		{ 0x717e099d69b26355, &exec_717e099d69b26355, 0x000044dc },
		{ 0xbf86a7aeb04c5aff, &exec_bf86a7aeb04c5aff, 0x0000005d },
		{ 0x326c77d4ef01c16d, &exec_326c77d4ef01c16d, 0x000007a1 },
		{ 0x1130c2311ae72676, &exec_1130c2311ae72676, 0x00001a33 },
		{ 0x16bd3d632d840eb3, &exec_16bd3d632d840eb3, 0x000001f0 },
		{ 0xac3eb350e0a8638b, &exec_ac3eb350e0a8638b, 0x00001c45 },
		{ 0x13218c67257948a1, &exec_13218c67257948a1, 0x0000372b },
		{ 0xc08206c070abfdf4, &exec_c08206c070abfdf4, 0x000002bb },
		{ 0xea1e7d023cf6a2d1, &exec_ea1e7d023cf6a2d1, 0x00000df7 },
		{ 0x1357e198b387697c, &exec_1357e198b387697c, 0x000003bf },
		{ 0x2f863bba83614a66, &exec_2f863bba83614a66, 0x00000062 },
		{ 0xddcc69f91454f81b, &exec_ddcc69f91454f81b, 0x000000aa },
		{ 0x5c0ae6feca1495b5, &exec_5c0ae6feca1495b5, 0x00000576 },
		{ 0x588628d9af09e56f, &exec_588628d9af09e56f, 0x000009d3 },
		{ 0x6d5013480a2b3667, &exec_6d5013480a2b3667, 0x00000068 },
		{ 0xdf4b302fb1ec7c68, &exec_df4b302fb1ec7c68, 0x0000079c },
		{ 0x493b6d838d8318fa, &exec_493b6d838d8318fa, 0x000017f8 },
		{ 0x238167cfd761b41c, &exec_238167cfd761b41c, 0x00001069 },
		{ 0x5642d70bcb3ce9ee, &exec_5642d70bcb3ce9ee, 0x0000295d },
		{ 0x2d7ee39442a406a8, &exec_2d7ee39442a406a8, 0x000005fa },
		{ 0xd9aab9a3493ddc37, &exec_d9aab9a3493ddc37, 0x000036cc },
		{ 0x9e3b072e87b7e70d, &exec_9e3b072e87b7e70d, 0x000030f9 },
		{ 0x5c11d68c88dedb4c, &exec_5c11d68c88dedb4c, 0x000004c2 },
		{ 0x718243e8d316f285, &exec_718243e8d316f285, 0x00002aee },
		{ 0x4e03585a6fd159e0, &exec_4e03585a6fd159e0, 0x0000257d },
		{ 0x7bd9537460ea46e4, &exec_7bd9537460ea46e4, 0x0000086d },
		{ 0x64c47fc9df0b4433, &exec_64c47fc9df0b4433, 0x00000480 },
		{ 0xb371657899fe40ae, &exec_b371657899fe40ae, 0x00000604 },
		{ 0x6ec61dc81076faff, &exec_6ec61dc81076faff, 0x000000c5 },
		{ 0x866b1159a9e712dd, &exec_866b1159a9e712dd, 0x0000030b },
		{ 0x3524cdf9dd90a274, &exec_3524cdf9dd90a274, 0x00001541 },
		{ 0x87899d765d3a028a, &exec_87899d765d3a028a, 0x00000f63 },
		{ 0xf03ca366558c6c65, &exec_f03ca366558c6c65, 0x0000243b },
		{ 0x9507dccc5208d6dd, &exec_9507dccc5208d6dd, 0x00000c72 },
		{ 0xbc1f57eee02da242, &exec_bc1f57eee02da242, 0x000005d5 },
		{ 0x072255c145f6efcb, &exec_072255c145f6efcb, 0x000047d9 },
		{ 0xe0c06d58cdc47925, &exec_e0c06d58cdc47925, 0x000006ed },
		{ 0x06cd31376a4a4e9b, &exec_06cd31376a4a4e9b, 0x00001add },
		{ 0x03e49ff8939292de, &exec_03e49ff8939292de, 0x000014e1 },
		{ 0xe1ff2c4ffc411429, &exec_e1ff2c4ffc411429, 0x000008b5 },
		{ 0x87b0e6984519a1e5, &exec_87b0e6984519a1e5, 0x00004885 },
		{ 0x909db0d19398e8cd, &exec_909db0d19398e8cd, 0x000004f6 },
		{ 0xcc5ba5350ab0bfe6, &exec_cc5ba5350ab0bfe6, 0x00002f60 },
		{ 0x0cdc61744c0727dd, &exec_0cdc61744c0727dd, 0x0000006c },
		{ 0xc82b861089c99d36, &exec_c82b861089c99d36, 0x000018e7 },
		{ 0x0d69974b3561b785, &exec_0d69974b3561b785, 0x000041bb },
		{ 0xcfbbe3f4e7d82f09, &exec_cfbbe3f4e7d82f09, 0x000031c6 },
		{ 0xd278fb3d27bd8c5c, &exec_d278fb3d27bd8c5c, 0x00000075 },
		{ 0xa2951881b06ca0ec, &exec_a2951881b06ca0ec, 0x00003ef7 },
		{ 0x79d8b203266c46b4, &exec_79d8b203266c46b4, 0x00000281 },
		{ 0xaca946a70667c7f6, &exec_aca946a70667c7f6, 0x000022cf },
		{ 0x072da0e4475c4ffa, &exec_072da0e4475c4ffa, 0x0000018d },
		{ 0x22ba5eb50d42cede, &exec_22ba5eb50d42cede, 0x00003194 },
		{ 0x545505d2a9be575a, &exec_545505d2a9be575a, 0x000002f9 },
		{ 0x9c6cff0f76dc73f7, &exec_9c6cff0f76dc73f7, 0x0000025b },
		{ 0x737e149bbea50dc1, &exec_737e149bbea50dc1, 0x00000000 },
		{ 0x156a3184919e002e, &exec_156a3184919e002e, 0x00000cc1 },
		{ 0x4619ccfdbd191f5c, &exec_4619ccfdbd191f5c, 0x00000b90 },
		{ 0x8596c01b121ef2ad, &exec_8596c01b121ef2ad, 0x00001fa2 },
		{ 0x8857377091aaaab0, &exec_8857377091aaaab0, 0x00001d03 },
		{ 0x4bc0864393aa1e28, &exec_4bc0864393aa1e28, 0x00003230 },
		{ 0x84c52dc56d45abe5, &exec_84c52dc56d45abe5, 0x0000464c },
		{ 0xdd72b0e257b97ec8, &exec_dd72b0e257b97ec8, 0x00000079 },
		{ 0xfa620799daf3413b, &exec_fa620799daf3413b, 0x000007a8 },
		{ 0x8ddfeee91ffaf671, &exec_8ddfeee91ffaf671, 0x0000007c },
		{ 0xe4f161c177ff1adc, &exec_e4f161c177ff1adc, 0x0000007f },
		{ 0x29ed2de56a0647ea, &exec_29ed2de56a0647ea, 0x00000303 },
		{ 0x3c6d34540847839c, &exec_3c6d34540847839c, 0x00001cd9 },
		{ 0xd38b31bd17b63322, &exec_d38b31bd17b63322, 0x00000252 },
		{ 0x6f07091b9717628e, &exec_6f07091b9717628e, 0x00000082 },
		{ 0x3cb71f0f0c81f373, &exec_3cb71f0f0c81f373, 0x0000207c },
		{ 0x866a4bd7509d6d68, &exec_866a4bd7509d6d68, 0x00001a30 },
		{ 0xdaf316247ba5f265, &exec_daf316247ba5f265, 0x000008c1 },
		{ 0x8e1c3f8fd5195139, &exec_8e1c3f8fd5195139, 0x00004866 },
		{ 0xa75d09499af7ed43, &exec_a75d09499af7ed43, 0x00001a9f },
		{ 0x74fdde7c8c71464c, &exec_74fdde7c8c71464c, 0x0000337b },
		{ 0xfd11d8382e4bda55, &exec_fd11d8382e4bda55, 0x00000085 },
		{ 0x5e3724e95f647ebf, &exec_5e3724e95f647ebf, 0x0000008a },
		{ 0xee71b8b2e72a5e3f, &exec_ee71b8b2e72a5e3f, 0x0000383e },
		{ 0x47940b50d7cb6a43, &exec_47940b50d7cb6a43, 0x0000008d },
		{ 0x68dabec593ebac50, &exec_68dabec593ebac50, 0x00000621 },
		{ 0xfdc8f7030d474882, &exec_fdc8f7030d474882, 0x00002146 },
		{ 0x2c9378fcf03b85d2, &exec_2c9378fcf03b85d2, 0x00000090 },
		{ 0x20bd6f9bf9e044bf, &exec_20bd6f9bf9e044bf, 0x00000945 },
		{ 0xd2781f717b685a62, &exec_d2781f717b685a62, 0x00002225 },
		{ 0x35ba81eea66c1aad, &exec_35ba81eea66c1aad, 0x00002ac2 },
		{ 0xf27cb97e8cd0414d, &exec_f27cb97e8cd0414d, 0x0000153b },
		{ 0xc7e53bc223595393, &exec_c7e53bc223595393, 0x00000097 },
		{ 0x2d361b303c5ec508, &exec_2d361b303c5ec508, 0x00000662 },
		{ 0x29900a5337a99c55, &exec_29900a5337a99c55, 0x000006cf },
		{ 0x291bac5b40b115fe, &exec_291bac5b40b115fe, 0x00003ba6 },
		{ 0xfaad68d579500984, &exec_faad68d579500984, 0x000010da },
		{ 0x8e3162448a4028fd, &exec_8e3162448a4028fd, 0x00002058 },
		{ 0xb04ec59fdb68cce0, &exec_b04ec59fdb68cce0, 0x0000009f },
		{ 0x6764a58aca6150bc, &exec_6764a58aca6150bc, 0x00003857 },
		{ 0xbef8cfe50ca04460, &exec_bef8cfe50ca04460, 0x0000277e },
		{ 0x73573b1760ab70e9, &exec_73573b1760ab70e9, 0x000012e0 },
		{ 0xc1744b8b8f8fa4f1, &exec_c1744b8b8f8fa4f1, 0x00002b14 },
		{ 0x015066f60a1a4587, &exec_015066f60a1a4587, 0x0000166a },
		{ 0x9343f3b23df467c0, &exec_9343f3b23df467c0, 0x000000a3 },
		{ 0xdb7fe2252e6fe047, &exec_db7fe2252e6fe047, 0x00002671 },
		{ 0xb322e2d44e386434, &exec_b322e2d44e386434, 0x0000245e },
		{ 0xfaec371794844685, &exec_faec371794844685, 0x000000a7 },
		{ 0x37bb1620fbc5196d, &exec_37bb1620fbc5196d, 0x00003a52 },
		{ 0xbc38e35b77dc3a47, &exec_bc38e35b77dc3a47, 0x000000cb },
		{ 0xe152669fa11bfc82, &exec_e152669fa11bfc82, 0x00001734 },
		{ 0xe84eda37c3e64fa0, &exec_e84eda37c3e64fa0, 0x000004d7 },
		{ 0x9477eb2e01b97c3b, &exec_9477eb2e01b97c3b, 0x0000084a },
		{ 0x0d9b49f68e5bd7fc, &exec_0d9b49f68e5bd7fc, 0x000000b0 },
		{ 0x46afdeb7012163a0, &exec_46afdeb7012163a0, 0x00004392 },
		{ 0x23e9049bd206230d, &exec_23e9049bd206230d, 0x00001f2f },
		{ 0x577b64bc518768e8, &exec_577b64bc518768e8, 0x0000183d },
		{ 0xca821c23b1bcbb67, &exec_ca821c23b1bcbb67, 0x000000b4 },
		{ 0x253c36a205bef272, &exec_253c36a205bef272, 0x0000207f },
		{ 0x874cda54250efb3d, &exec_874cda54250efb3d, 0x00004937 },
		{ 0xfe4a0926727797db, &exec_fe4a0926727797db, 0x000009c8 },
		{ 0xbac2cc97a5a7bdbe, &exec_bac2cc97a5a7bdbe, 0x0000021b },
		{ 0x85c679ddf3d36154, &exec_85c679ddf3d36154, 0x000000b7 },
		{ 0xe37b6c44535da849, &exec_e37b6c44535da849, 0x00000eaa },
		{ 0xc28a7e1c90fc22ab, &exec_c28a7e1c90fc22ab, 0x00000562 },
		{ 0xce299094559b4ff1, &exec_ce299094559b4ff1, 0x00000133 },
		{ 0x407c868cc0a0a1c7, &exec_407c868cc0a0a1c7, 0x00002319 },
		{ 0x36f3c39e6c495314, &exec_36f3c39e6c495314, 0x00002f06 },
		{ 0xfa4441fc00c25c6d, &exec_fa4441fc00c25c6d, 0x000000ba },
		{ 0xccff530bfc7b168e, &exec_ccff530bfc7b168e, 0x00002b1f },
		{ 0x9cd667ce3a74a0fd, &exec_9cd667ce3a74a0fd, 0x000029ba },
		{ 0x88fd0489726f5e61, &exec_88fd0489726f5e61, 0x000004af },
		{ 0xed1b3165f5de1dd5, &exec_ed1b3165f5de1dd5, 0x00000867 },
		{ 0x36ad474eae048295, &exec_36ad474eae048295, 0x00000ef6 },
		{ 0x1c9ee85f9b273197, &exec_1c9ee85f9b273197, 0x0000036d },
		{ 0x782803d55dabd970, &exec_782803d55dabd970, 0x000005f4 },
		{ 0xc718e54e986e9fe4, &exec_c718e54e986e9fe4, 0x00000ffa },
		{ 0x6822bc2158fe31b5, &exec_6822bc2158fe31b5, 0x00001d60 },
		{ 0x5d7583a69c712712, &exec_5d7583a69c712712, 0x0000034f },
		{ 0xef642f307d101242, &exec_ef642f307d101242, 0x0000020d },
		{ 0x229b2e766a270c69, &exec_229b2e766a270c69, 0x00000aec },
		{ 0x3c117c53c03f5f95, &exec_3c117c53c03f5f95, 0x000000bf },
		{ 0x37b0b64a7ee70c7e, &exec_37b0b64a7ee70c7e, 0x000000dc },
		{ 0x1dfa00c22a5e362b, &exec_1dfa00c22a5e362b, 0x0000207a },
		{ 0x0ae0413b1780a01a, &exec_0ae0413b1780a01a, 0x00000e78 },
		{ 0xa2d839eb959be9c4, &exec_a2d839eb959be9c4, 0x00003ffe },
		{ 0xb6b3c0535c828aa3, &exec_b6b3c0535c828aa3, 0x000004c4 },
		{ 0xc8627804e0428439, &exec_c8627804e0428439, 0x00002041 },
		{ 0xb527e8277d792e26, &exec_b527e8277d792e26, 0x0000299e },
		{ 0xe986b73588310670, &exec_e986b73588310670, 0x000008ee },
		{ 0x9c4be3e6152cc56a, &exec_9c4be3e6152cc56a, 0x00000a1c },
		{ 0xbd535ca07dc61209, &exec_bd535ca07dc61209, 0x000030f0 },
		{ 0x88226fedb0812d7a, &exec_88226fedb0812d7a, 0x000001a1 },
		{ 0x0b565f800dab260e, &exec_0b565f800dab260e, 0x000021ab },
		{ 0x9d2639015e38d063, &exec_9d2639015e38d063, 0x000009ab },
		{ 0xfade35abd3db5a0a, &exec_fade35abd3db5a0a, 0x000003e0 },
		{ 0xc9630ec594e1bf25, &exec_c9630ec594e1bf25, 0x00001d79 },
		{ 0xc3005d80678a7ab4, &exec_c3005d80678a7ab4, 0x00000c10 },
		{ 0x86d1145c69b1f135, &exec_86d1145c69b1f135, 0x00002e16 },
		{ 0x89be115de5ce8b99, &exec_89be115de5ce8b99, 0x000043a9 },
		{ 0x846bcc0d7b07e15d, &exec_846bcc0d7b07e15d, 0x00001504 },
		{ 0xe6648b0a814eb595, &exec_e6648b0a814eb595, 0x00000faa },
		{ 0xdb003d6a2105d691, &exec_db003d6a2105d691, 0x0000401c },
		{ 0xb4a0ee0b0b02da5d, &exec_b4a0ee0b0b02da5d, 0x000039fe },
		{ 0xa649ae4bc5a3b43f, &exec_a649ae4bc5a3b43f, 0x00000d39 },
		{ 0x139729983dcc96e1, &exec_139729983dcc96e1, 0x00000254 },
		{ 0x409e49527c4b0ec3, &exec_409e49527c4b0ec3, 0x000020dc },
		{ 0xbaca72e816a4d833, &exec_baca72e816a4d833, 0x0000380e },
		{ 0x81906562074c7e26, &exec_81906562074c7e26, 0x000002b2 },
		{ 0x100b282480c05358, &exec_100b282480c05358, 0x000003bb },
		{ 0x29626f16f98b6e4c, &exec_29626f16f98b6e4c, 0x00000a9a },
		{ 0x67e1f7845788c0d4, &exec_67e1f7845788c0d4, 0x00001465 },
		{ 0x1189e4bb1a9b3890, &exec_1189e4bb1a9b3890, 0x000000d0 },
		{ 0x70b8840521458772, &exec_70b8840521458772, 0x000016fe },
		{ 0x28c9576f66de65db, &exec_28c9576f66de65db, 0x000047aa },
		{ 0x1aef154009e3130c, &exec_1aef154009e3130c, 0x00000152 },
		{ 0xc355cbcc570d6e31, &exec_c355cbcc570d6e31, 0x00001287 },
		{ 0xe4c47f28e8374967, &exec_e4c47f28e8374967, 0x000005e9 },
		{ 0x3c749cf6e2499261, &exec_3c749cf6e2499261, 0x000000d6 },
		{ 0xfab7897ca57bd167, &exec_fab7897ca57bd167, 0x00001c05 },
		{ 0x631638fe374d3cc3, &exec_631638fe374d3cc3, 0x00000000 },
		{ 0x2c04910f80847ef8, &exec_2c04910f80847ef8, 0x00000103 },
		{ 0xeaccd307fddb52b4, &exec_eaccd307fddb52b4, 0x00003642 },
		{ 0xbcf23be5b5f3de2e, &exec_bcf23be5b5f3de2e, 0x00002c57 },
		{ 0xc957bb893a5ebe7d, &exec_c957bb893a5ebe7d, 0x0000107f },
		{ 0xa838df31f40e1b00, &exec_a838df31f40e1b00, 0x000042c2 },
		{ 0x547db2d182bf67d5, &exec_547db2d182bf67d5, 0x00000316 },
		{ 0x1c4d4eaae80c1189, &exec_1c4d4eaae80c1189, 0x000021d5 },
		{ 0x92b61f85c18a354d, &exec_92b61f85c18a354d, 0x00003dbc },
		{ 0x82c7316e3ac3bfa3, &exec_82c7316e3ac3bfa3, 0x00000188 },
		{ 0x75c3d01a840a4cff, &exec_75c3d01a840a4cff, 0x000001f8 },
		{ 0x6129b753f350aa18, &exec_6129b753f350aa18, 0x00001009 },
		{ 0xc53ed8ba30cd95ea, &exec_c53ed8ba30cd95ea, 0x00001d6b },
		{ 0xa089313a33c2be86, &exec_a089313a33c2be86, 0x00001e94 },
		{ 0x3c40d16dc758d5f7, &exec_3c40d16dc758d5f7, 0x00003ccd },
		{ 0x8a49e1f1973f39d9, &exec_8a49e1f1973f39d9, 0x00000224 },
		{ 0xfbaaf23bbcf3728a, &exec_fbaaf23bbcf3728a, 0x000036f5 },
		{ 0x52bd6b78516c0f90, &exec_52bd6b78516c0f90, 0x000046f3 },
		{ 0xcb1b7e290babe392, &exec_cb1b7e290babe392, 0x000000f0 },
		{ 0x4cfd6288baef7076, &exec_4cfd6288baef7076, 0x00000374 },
		{ 0x25f439fbade6f690, &exec_25f439fbade6f690, 0x000000e3 },
		{ 0xec059e8eccfdce27, &exec_ec059e8eccfdce27, 0x000002e2 },
		{ 0x94fb88323db4c110, &exec_94fb88323db4c110, 0x000015b6 },
		{ 0x39fb0835cec1fe3d, &exec_39fb0835cec1fe3d, 0x00003b4e },
		{ 0x06a00a350e73ed9e, &exec_06a00a350e73ed9e, 0x00000852 },
		{ 0x44aa0d2973888d48, &exec_44aa0d2973888d48, 0x00000ee6 },
		{ 0xc8351e02e52e806a, &exec_c8351e02e52e806a, 0x00002ab0 },
		{ 0xf101243c9a387062, &exec_f101243c9a387062, 0x00001fba },
		{ 0x13d6b35ba5b130d9, &exec_13d6b35ba5b130d9, 0x0000115c },
		{ 0xd4a9d7bbf1121460, &exec_d4a9d7bbf1121460, 0x0000060d },
		{ 0x5070f0889a1b3b0e, &exec_5070f0889a1b3b0e, 0x000010b5 },
		{ 0x3a2b4dcf737b0ca5, &exec_3a2b4dcf737b0ca5, 0x000047e8 },
		{ 0x1424fca6a839b6db, &exec_1424fca6a839b6db, 0x0000157c },
		{ 0x442d78cb14e508c1, &exec_442d78cb14e508c1, 0x00001eb4 },
		{ 0xbb9c9944f50787d5, &exec_bb9c9944f50787d5, 0x000039b7 },
		{ 0x6fe89e80b16ffc45, &exec_6fe89e80b16ffc45, 0x00000bba },
		{ 0x1df474c839d889a9, &exec_1df474c839d889a9, 0x000007f3 },
		{ 0x01f3bef85695dae5, &exec_01f3bef85695dae5, 0x000015be },
		{ 0x101c3bc298405db7, &exec_101c3bc298405db7, 0x00004037 },
		{ 0x895f3fb1eff0e056, &exec_895f3fb1eff0e056, 0x000021a7 },
		{ 0x62b8d7bbeab04e13, &exec_62b8d7bbeab04e13, 0x000001fb },
		{ 0x10b2fe610a3271dc, &exec_10b2fe610a3271dc, 0x00000751 },
		{ 0x14087400f7f50115, &exec_14087400f7f50115, 0x000022e5 },
		{ 0x1553764cf488499f, &exec_1553764cf488499f, 0x0000041b },
		{ 0x0f2a978165431a07, &exec_0f2a978165431a07, 0x000000e9 },
		{ 0x869fa74335197ca9, &exec_869fa74335197ca9, 0x00002154 },
		{ 0xd965f4b1d2552776, &exec_d965f4b1d2552776, 0x000000f4 },
		{ 0x9bbeaeb6ff86b0bf, &exec_9bbeaeb6ff86b0bf, 0x000048c5 },
		{ 0x4d7fa61148ec9a67, &exec_4d7fa61148ec9a67, 0x000046de },
		{ 0x18f72e1cd94f8275, &exec_18f72e1cd94f8275, 0x000032f5 },
		{ 0xc319ef7b959ec218, &exec_c319ef7b959ec218, 0x00000000 },
		{ 0xf967b78e765b9963, &exec_f967b78e765b9963, 0x00000597 },
		{ 0xb21de420ba7ca5d4, &exec_b21de420ba7ca5d4, 0x00001fea },
		{ 0xa510f527a52f45d6, &exec_a510f527a52f45d6, 0x000006c6 },
		{ 0xb448d06131c5db98, &exec_b448d06131c5db98, 0x0000249b },
		{ 0x8b30c3d150f13f4f, &exec_8b30c3d150f13f4f, 0x00000118 },
		{ 0xde2cd73a9e49c4dc, &exec_de2cd73a9e49c4dc, 0x000005b6 },
		{ 0x69fe009be9d9b35b, &exec_69fe009be9d9b35b, 0x00000143 },
		{ 0xb1f467be7fbc353c, &exec_b1f467be7fbc353c, 0x0000040d },
		{ 0x0a3158a19817e7c2, &exec_0a3158a19817e7c2, 0x0000038e },
		{ 0x4065ceaee8daec77, &exec_4065ceaee8daec77, 0x000008a8 },
		{ 0x5627ad37a01122a2, &exec_5627ad37a01122a2, 0x000003e6 },
		{ 0xdeb7d92e7d8cd40e, &exec_deb7d92e7d8cd40e, 0x00000a71 },
		{ 0xeefd1339bb6b8cac, &exec_eefd1339bb6b8cac, 0x000000f8 },
		{ 0xc5cbf241bf407c63, &exec_c5cbf241bf407c63, 0x0000338f },
		{ 0xa48b6880c3c78749, &exec_a48b6880c3c78749, 0x000015c8 },
		{ 0xd4f224dea25955ec, &exec_d4f224dea25955ec, 0x00000878 },
		{ 0xabff9e22242f851e, &exec_abff9e22242f851e, 0x00004736 },
		{ 0x73b9674d9524ac7b, &exec_73b9674d9524ac7b, 0x000016c3 },
		{ 0xc9c18640eb6fd8b3, &exec_c9c18640eb6fd8b3, 0x00000c2f },
		{ 0x38f8df19a98a2aa8, &exec_38f8df19a98a2aa8, 0x00000c4d },
		{ 0xbe8a686948e88560, &exec_be8a686948e88560, 0x0000055b },
		{ 0xb8241afee10c470c, &exec_b8241afee10c470c, 0x00001657 },
		{ 0x41a2257a27060dda, &exec_41a2257a27060dda, 0x00000247 },
		{ 0x8461615c9d2291c0, &exec_8461615c9d2291c0, 0x0000310e },
		{ 0x9b157c624d23c34b, &exec_9b157c624d23c34b, 0x000003a4 },
		{ 0xab2ee7042330ff5f, &exec_ab2ee7042330ff5f, 0x00000c21 },
		{ 0x8ff6f584b2449f62, &exec_8ff6f584b2449f62, 0x00000f29 },
		{ 0x92a5254838713f51, &exec_92a5254838713f51, 0x00000fc5 },
		{ 0x31137484ebb14af5, &exec_31137484ebb14af5, 0x00000110 },
		{ 0xef03ea6facbcbcc1, &exec_ef03ea6facbcbcc1, 0x00002d7a },
		{ 0xca40e634ff8d3d04, &exec_ca40e634ff8d3d04, 0x0000083b },
		{ 0xb3f56307aed1bd15, &exec_b3f56307aed1bd15, 0x00000901 },
		{ 0xc82ff10fd52ba12b, &exec_c82ff10fd52ba12b, 0x00000453 },
		{ 0xd0bf00356c07e242, &exec_d0bf00356c07e242, 0x00003bbc },
		{ 0x458b61b6d4d37ca3, &exec_458b61b6d4d37ca3, 0x00000338 },
		{ 0xfd482708d31e63dc, &exec_fd482708d31e63dc, 0x00000816 },
		{ 0xe3f4fb61d9c42b57, &exec_e3f4fb61d9c42b57, 0x0000247f },
		{ 0xbb7312862ab44cb3, &exec_bb7312862ab44cb3, 0x0000057f },
		{ 0x4966f0df6a33d820, &exec_4966f0df6a33d820, 0x00002cad },
		{ 0xb7bab96e58de5968, &exec_b7bab96e58de5968, 0x00000941 },
		{ 0x89d041747aa99552, &exec_89d041747aa99552, 0x00000f7d },
		{ 0x14999e779d96c75d, &exec_14999e779d96c75d, 0x00003f00 },
		{ 0x2bb6072d6b7886f1, &exec_2bb6072d6b7886f1, 0x0000015c },
		{ 0x025383c706c07f52, &exec_025383c706c07f52, 0x000048d8 },
		{ 0x5ef786253a7212de, &exec_5ef786253a7212de, 0x00003721 },
		{ 0x355bc5d0fabd5c48, &exec_355bc5d0fabd5c48, 0x000001c0 },
		{ 0x40a5947fa97cbb84, &exec_40a5947fa97cbb84, 0x000048c1 },
		{ 0x469040e816fd96e3, &exec_469040e816fd96e3, 0x00001fe4 },
		{ 0xf12dd83f8097e0e3, &exec_f12dd83f8097e0e3, 0x000033ca },
		{ 0x2cccdf8d756a4f42, &exec_2cccdf8d756a4f42, 0x000008ad },
		{ 0x54b4616e61a0939d, &exec_54b4616e61a0939d, 0x00003969 },
		{ 0x7faaf1a4373f17c7, &exec_7faaf1a4373f17c7, 0x00003cdf },
		{ 0x51b546933f973425, &exec_51b546933f973425, 0x00000125 },
		{ 0x15da65d34245951f, &exec_15da65d34245951f, 0x0000018a },
		{ 0xd66746297549ee4c, &exec_d66746297549ee4c, 0x000006d7 },
		{ 0x52002840cd6dcac4, &exec_52002840cd6dcac4, 0x00000e3b },
		{ 0x505272983531b8b4, &exec_505272983531b8b4, 0x00000412 },
		{ 0x967bb14d0f8505dd, &exec_967bb14d0f8505dd, 0x0000012a },
		{ 0x2bf68ad7018326c1, &exec_2bf68ad7018326c1, 0x0000012f },
		{ 0x7e2fed560ba49715, &exec_7e2fed560ba49715, 0x0000075b },
		{ 0xd9900b69273f4144, &exec_d9900b69273f4144, 0x00000b6c },
		{ 0xf50e5d79ab4afcee, &exec_f50e5d79ab4afcee, 0x0000027d },
		{ 0xa7d3caf2017ac533, &exec_a7d3caf2017ac533, 0x00001afb },
		{ 0x89b744d811a5e8c1, &exec_89b744d811a5e8c1, 0x000005c2 },
		{ 0x447a43ff4093e1eb, &exec_447a43ff4093e1eb, 0x00001f18 },
		{ 0xfc173bb3059cba13, &exec_fc173bb3059cba13, 0x00003a92 },
		{ 0x1517daa95a46474f, &exec_1517daa95a46474f, 0x00000b9f },
		{ 0x01f65b96d4fc13da, &exec_01f65b96d4fc13da, 0x00000141 },
		{ 0xab92de7d4d31984c, &exec_ab92de7d4d31984c, 0x0000152f },
		{ 0x41b35f3400838285, &exec_41b35f3400838285, 0x00003025 },
		{ 0x24ff7b59d37ed85d, &exec_24ff7b59d37ed85d, 0x00000fdd },
		{ 0x510eb8dbea5e881f, &exec_510eb8dbea5e881f, 0x0000156e },
		{ 0x3f43f363ba4c6934, &exec_3f43f363ba4c6934, 0x00000363 },
		{ 0x42307eb83f3880ea, &exec_42307eb83f3880ea, 0x00000146 },
		{ 0xc1f7d4946481af4d, &exec_c1f7d4946481af4d, 0x000008aa },
		{ 0x4ce8734e80d03ad8, &exec_4ce8734e80d03ad8, 0x00001c1a },
		{ 0x58137e0c516d8c7e, &exec_58137e0c516d8c7e, 0x00001dde },
		{ 0xe6ae6d3dd28558a4, &exec_e6ae6d3dd28558a4, 0x00000a0e },
		{ 0x9d25b21dfd296664, &exec_9d25b21dfd296664, 0x0000136f },
		{ 0xa0726357bfd0b12b, &exec_a0726357bfd0b12b, 0x000001df },
		{ 0xf7ac386ec822af99, &exec_f7ac386ec822af99, 0x0000014f },
		{ 0x0e46fe158c996efb, &exec_0e46fe158c996efb, 0x00000155 },
		{ 0xfc7ac7031447bf3e, &exec_fc7ac7031447bf3e, 0x00000369 },
		{ 0x5f150e29eeaa350c, &exec_5f150e29eeaa350c, 0x000015c5 },
		{ 0x962b99ac2c1e96f2, &exec_962b99ac2c1e96f2, 0x00003058 },
		{ 0x35783cb981f0f6cb, &exec_35783cb981f0f6cb, 0x00000e33 },
		{ 0x7b7b2d639cf64dfb, &exec_7b7b2d639cf64dfb, 0x00000158 },
		{ 0x417ba336c1e777c2, &exec_417ba336c1e777c2, 0x0000077d },
		{ 0x73a9e35b6c2b37b8, &exec_73a9e35b6c2b37b8, 0x00000994 },
		{ 0x7abfe9df3e026bf4, &exec_7abfe9df3e026bf4, 0x00000335 },
		{ 0x3579cbe0f71a98e8, &exec_3579cbe0f71a98e8, 0x00003af0 },
		{ 0x65d7022203f98b98, &exec_65d7022203f98b98, 0x0000015e },
		{ 0x59134f155e6d3248, &exec_59134f155e6d3248, 0x00000555 },
		{ 0xceb30dd51a65bb24, &exec_ceb30dd51a65bb24, 0x000001a3 },
		{ 0x59314229697c1db3, &exec_59314229697c1db3, 0x00000162 },
		{ 0x2b5b1e7cd5062bba, &exec_2b5b1e7cd5062bba, 0x000001d2 },
		{ 0x77c4684f46ab0771, &exec_77c4684f46ab0771, 0x00000cdc },
		{ 0x0109aef90d83cd11, &exec_0109aef90d83cd11, 0x00004355 },
		{ 0x9bb9a401abc7a7f1, &exec_9bb9a401abc7a7f1, 0x0000234a },
		{ 0x97946c6ad467dbaa, &exec_97946c6ad467dbaa, 0x00000799 },
		{ 0x56c7aa664c8c4397, &exec_56c7aa664c8c4397, 0x00000165 },
		{ 0x5f2a64cf4af9b3dd, &exec_5f2a64cf4af9b3dd, 0x000002d9 },
		{ 0x419a29d9919c4bda, &exec_419a29d9919c4bda, 0x00000294 },
		{ 0x2e944aeb61741627, &exec_2e944aeb61741627, 0x000001b1 },
		{ 0x3db3c7dd39da7470, &exec_3db3c7dd39da7470, 0x000021e5 },
		{ 0xb474954f2b72c674, &exec_b474954f2b72c674, 0x0000016b },
		{ 0x6a41476c984997df, &exec_6a41476c984997df, 0x000035b9 },
		{ 0xacbc3bd8a32dfd93, &exec_acbc3bd8a32dfd93, 0x000003ad },
		{ 0x380300e83725a488, &exec_380300e83725a488, 0x00000cec },
		{ 0x1214227765ce6c0d, &exec_1214227765ce6c0d, 0x000015e3 },
		{ 0x3ea58e67575c128a, &exec_3ea58e67575c128a, 0x000003b6 },
		{ 0x48e90ac51e81a43a, &exec_48e90ac51e81a43a, 0x00000176 },
		{ 0xd154c068038a8c54, &exec_d154c068038a8c54, 0x00003e0f },
		{ 0x2a8a22d32d0da2d9, &exec_2a8a22d32d0da2d9, 0x000005ec },
		{ 0x9504e2fc121abc21, &exec_9504e2fc121abc21, 0x00000859 },
		{ 0x172c87a33633fb1f, &exec_172c87a33633fb1f, 0x00001f93 },
		{ 0xb0275e96707c2dce, &exec_b0275e96707c2dce, 0x0000076c },
		{ 0x98f50d2765e379e0, &exec_98f50d2765e379e0, 0x0000017b },
		{ 0x537c9437df9803a3, &exec_537c9437df9803a3, 0x00003f28 },
		{ 0x2a4a08ea2871ed91, &exec_2a4a08ea2871ed91, 0x000002d3 },
		{ 0x3f148af9c4b9e971, &exec_3f148af9c4b9e971, 0x000006f6 },
		{ 0x9a2010d1575cf887, &exec_9a2010d1575cf887, 0x000001dc },
		{ 0x198658ae6de34e48, &exec_198658ae6de34e48, 0x000017ec },
		{ 0x35d8ccad08890176, &exec_35d8ccad08890176, 0x00002c46 },
		{ 0xd4fda07ec0e33965, &exec_d4fda07ec0e33965, 0x00000181 },
		{ 0x5f35d590c33baea5, &exec_5f35d590c33baea5, 0x00000185 },
		{ 0x697711159c1c67db, &exec_697711159c1c67db, 0x00000190 },
		{ 0x3580e6f378822a5a, &exec_3580e6f378822a5a, 0x00002c96 },
		{ 0x626f57b21af7f9a0, &exec_626f57b21af7f9a0, 0x000002e5 },
		{ 0x16cdcbee3e0b7625, &exec_16cdcbee3e0b7625, 0x00000196 },
		{ 0xb8fbef9f41cdc99c, &exec_b8fbef9f41cdc99c, 0x00000410 },
		{ 0x2bbbb4ff80bfc0be, &exec_2bbbb4ff80bfc0be, 0x00003d77 },
		{ 0x85941578c55a3d1a, &exec_85941578c55a3d1a, 0x000002be },
		{ 0x4df9143fad2db3f0, &exec_4df9143fad2db3f0, 0x00002d2e },
		{ 0xe9aa625de4ff37d9, &exec_e9aa625de4ff37d9, 0x000025ae },
		{ 0xef6b25a90f579ccb, &exec_ef6b25a90f579ccb, 0x00004124 },
		{ 0x028ba6844d09e1c7, &exec_028ba6844d09e1c7, 0x00000244 },
		{ 0x61fde61565585bab, &exec_61fde61565585bab, 0x00002ad2 },
		{ 0x7e0d4ba884332b00, &exec_7e0d4ba884332b00, 0x000006a0 },
		{ 0xc59ca658ca199a10, &exec_c59ca658ca199a10, 0x00000541 },
		{ 0xd7d7d05b0bd59ebf, &exec_d7d7d05b0bd59ebf, 0x000005ca },
		{ 0x8b6db6548664e400, &exec_8b6db6548664e400, 0x0000405f },
		{ 0x958b96145c810980, &exec_958b96145c810980, 0x000001a9 },
		{ 0xacaf3d0f2ccec4b6, &exec_acaf3d0f2ccec4b6, 0x000035e4 },
		{ 0x837938fae27216e0, &exec_837938fae27216e0, 0x000039e9 },
		{ 0x9d0a9cb2aefa7edd, &exec_9d0a9cb2aefa7edd, 0x00000718 },
		{ 0xb3a48993df862139, &exec_b3a48993df862139, 0x000005fe },
		{ 0xb348a323a5033d0c, &exec_b348a323a5033d0c, 0x000008e0 },
		{ 0x48679c85bff9cb07, &exec_48679c85bff9cb07, 0x000001b4 },
		{ 0x1e79b4756636d07a, &exec_1e79b4756636d07a, 0x0000168b },
		{ 0x25cecc73446f5a58, &exec_25cecc73446f5a58, 0x00003bc2 },
		{ 0xafa323ac2e0ce3cb, &exec_afa323ac2e0ce3cb, 0x00002bfe },
		{ 0x9a6c6405a273dc7d, &exec_9a6c6405a273dc7d, 0x00001a97 },
		{ 0xa2357c3b72758bf8, &exec_a2357c3b72758bf8, 0x0000171a },
		{ 0x100df808ca31d03c, &exec_100df808ca31d03c, 0x000001d5 },
		{ 0x0aa3bb6838c503b2, &exec_0aa3bb6838c503b2, 0x0000034c },
		{ 0x626e3f1ba93f93ef, &exec_626e3f1ba93f93ef, 0x00000693 },
		{ 0xfdd80fc09c59caad, &exec_fdd80fc09c59caad, 0x00001442 },
		{ 0x7f723ace06385bd8, &exec_7f723ace06385bd8, 0x00000424 },
		{ 0x108b391bb8776a34, &exec_108b391bb8776a34, 0x00002292 },
		{ 0xd26fa82295fd5fd6, &exec_d26fa82295fd5fd6, 0x00000499 },
		{ 0x8a641e8f175ba065, &exec_8a641e8f175ba065, 0x000013f3 },
		{ 0xc4e35781783b092b, &exec_c4e35781783b092b, 0x00000c03 },
		{ 0x0f41db49be447757, &exec_0f41db49be447757, 0x000001c4 },
		{ 0x0edaa8a3026a93d2, &exec_0edaa8a3026a93d2, 0x000026f9 },
		{ 0x82ab322a30679e90, &exec_82ab322a30679e90, 0x000001c8 },
		{ 0x9d964afea0c3c0cb, &exec_9d964afea0c3c0cb, 0x00000517 },
		{ 0x76e0801f1dafe168, &exec_76e0801f1dafe168, 0x000036d7 },
		{ 0x62991d0a657d8042, &exec_62991d0a657d8042, 0x000001cb },
		{ 0xd949ffa45efccecb, &exec_d949ffa45efccecb, 0x000007b0 },
		{ 0x977b873d098ad1b0, &exec_977b873d098ad1b0, 0x000003da },
		{ 0x313c7d1fd70637dc, &exec_313c7d1fd70637dc, 0x0000333e },
		{ 0x5075782f874bc9ea, &exec_5075782f874bc9ea, 0x0000193a },
		{ 0xf41f10de4731a707, &exec_f41f10de4731a707, 0x00004461 },
		{ 0xe7d5eba742384a84, &exec_e7d5eba742384a84, 0x00004284 },
		{ 0x99865d175d3fe53c, &exec_99865d175d3fe53c, 0x000001e2 },
		{ 0x878d0ebe27f0ce18, &exec_878d0ebe27f0ce18, 0x000001e4 },
		{ 0xfaf9fb27b51bfdd4, &exec_faf9fb27b51bfdd4, 0x000001e6 },
		{ 0x79343e2f2c242a12, &exec_79343e2f2c242a12, 0x000006bf },
		{ 0xe9d774fe5c8d3745, &exec_e9d774fe5c8d3745, 0x000034f8 },
		{ 0x61a8bb8f41d8309d, &exec_61a8bb8f41d8309d, 0x00000bae },
		{ 0xe49ddde8c0dc8adb, &exec_e49ddde8c0dc8adb, 0x000001ea },
		{ 0x9c51cf0f76c55aaf, &exec_9c51cf0f76c55aaf, 0x0000206d },
		{ 0xbd0962225f550050, &exec_bd0962225f550050, 0x00001124 },
		{ 0xa0db71e3beb2b720, &exec_a0db71e3beb2b720, 0x0000279d },
		{ 0x8c1ae2d37a85ecf6, &exec_8c1ae2d37a85ecf6, 0x000040ca },
		{ 0xe3e45a7f6f9c3c6f, &exec_e3e45a7f6f9c3c6f, 0x000001ed },
		{ 0x3820ec308aa08f68, &exec_3820ec308aa08f68, 0x00004390 },
		{ 0x9f282cefb1a4359d, &exec_9f282cefb1a4359d, 0x000003c7 },
		{ 0xca14282e430ad55f, &exec_ca14282e430ad55f, 0x000001f3 },
		{ 0x0be093bacfffd5c3, &exec_0be093bacfffd5c3, 0x000001f5 },
		{ 0x9a44fe4881365568, &exec_9a44fe4881365568, 0x00003712 },
		{ 0x906de19ef52de24a, &exec_906de19ef52de24a, 0x0000258c },
		{ 0x113b89a5bfb42704, &exec_113b89a5bfb42704, 0x000044d8 },
		{ 0xa7f8269e3d7abfcb, &exec_a7f8269e3d7abfcb, 0x000035ea },
		{ 0x363e9726ee7437ee, &exec_363e9726ee7437ee, 0x000001fe },
		{ 0x48fa0087fb3540ed, &exec_48fa0087fb3540ed, 0x0000101c },
		{ 0xe115b7006bfd0f9e, &exec_e115b7006bfd0f9e, 0x00002d1d },
		{ 0x834e20f488810b23, &exec_834e20f488810b23, 0x00000200 },
		{ 0xea7592565e07bcb8, &exec_ea7592565e07bcb8, 0x00002e4c },
		{ 0x24518400231f1890, &exec_24518400231f1890, 0x0000110f },
		{ 0xd2787d566df5761c, &exec_d2787d566df5761c, 0x00000203 },
		{ 0xf60de72af57f8200, &exec_f60de72af57f8200, 0x000005f1 },
		{ 0x2b534d001d460668, &exec_2b534d001d460668, 0x00003880 },
		{ 0xa07e151322333dbe, &exec_a07e151322333dbe, 0x00000207 },
		{ 0x0fdabb7a9c22d7cc, &exec_0fdabb7a9c22d7cc, 0x000004a9 },
		{ 0x8ce6d852902fdb9a, &exec_8ce6d852902fdb9a, 0x00000470 },
		{ 0x36197448eacb0161, &exec_36197448eacb0161, 0x00000209 },
		{ 0x741fa7bea86dcb4d, &exec_741fa7bea86dcb4d, 0x00000a2c },
		{ 0x7c21e62f44ca98ed, &exec_7c21e62f44ca98ed, 0x00002610 },
		{ 0x605e67da31f8d3b4, &exec_605e67da31f8d3b4, 0x0000031e },
		{ 0x1c5137eadd5f9c9d, &exec_1c5137eadd5f9c9d, 0x0000225b },
		{ 0x3175873cd99ef011, &exec_3175873cd99ef011, 0x00001bd5 },
		{ 0x8e68b9781d5560e8, &exec_8e68b9781d5560e8, 0x00000210 },
		{ 0xdaa33b443a444c06, &exec_daa33b443a444c06, 0x00001380 },
		{ 0x933c4997ccb9e183, &exec_933c4997ccb9e183, 0x000039a3 },
		{ 0x66b419bf08e32d82, &exec_66b419bf08e32d82, 0x00004280 },
		{ 0x4d721ec09a99b567, &exec_4d721ec09a99b567, 0x00000214 },
		{ 0xf5f4dbe5572d79fb, &exec_f5f4dbe5572d79fb, 0x000004e0 },
		{ 0x16a20d632d6cf56b, &exec_16a20d632d6cf56b, 0x00002de6 },
		{ 0xae66b2b4c2072a7a, &exec_ae66b2b4c2072a7a, 0x000018a2 },
		{ 0x355d169c37b05bcb, &exec_355d169c37b05bcb, 0x00000216 },
		{ 0x7c9607023889ee67, &exec_7c9607023889ee67, 0x00000277 },
		{ 0xc619693fe5ecb26f, &exec_c619693fe5ecb26f, 0x00003825 },
		{ 0xe3b400b3d8515c86, &exec_e3b400b3d8515c86, 0x000007db },
		{ 0x8f484a1254382b25, &exec_8f484a1254382b25, 0x00000743 },
		{ 0x327c910b136a787f, &exec_327c910b136a787f, 0x0000021f },
		{ 0xa41caecda3cf1cbc, &exec_a41caecda3cf1cbc, 0x00000aca },
		{ 0x55df20a0cddbf6e3, &exec_55df20a0cddbf6e3, 0x00000222 },
		{ 0x189286caf3ee54b4, &exec_189286caf3ee54b4, 0x00000226 },
		{ 0x913afbc72b365d2e, &exec_913afbc72b365d2e, 0x00001a7b },
		{ 0x98a8fe24be15a945, &exec_98a8fe24be15a945, 0x00003b19 },
		{ 0xff7b8ca147666954, &exec_ff7b8ca147666954, 0x00002b0d },
		{ 0x2fef29580100d1ba, &exec_2fef29580100d1ba, 0x00001f79 },
		{ 0x605daeddc54db30d, &exec_605daeddc54db30d, 0x000006fe },
		{ 0x19cc2ba789a9d6c5, &exec_19cc2ba789a9d6c5, 0x00000ce0 },
		{ 0xb882e594dc6d8146, &exec_b882e594dc6d8146, 0x00001ea4 },
		{ 0xe42445ce1325d20b, &exec_e42445ce1325d20b, 0x0000022d },
		{ 0xc66f8e929a0a639f, &exec_c66f8e929a0a639f, 0x00000463 },
		{ 0x30cbc95f3de08689, &exec_30cbc95f3de08689, 0x00000230 },
		{ 0xc670506570b79424, &exec_c670506570b79424, 0x00000811 },
		{ 0x229543c0f13f042a, &exec_229543c0f13f042a, 0x00000232 },
		{ 0x74a4be3af5992b3b, &exec_74a4be3af5992b3b, 0x00000961 },
		{ 0xb99df1a2198c527a, &exec_b99df1a2198c527a, 0x00004241 },
		{ 0x3e84b4cca434a90d, &exec_3e84b4cca434a90d, 0x000048f2 },
		{ 0x909b5af8b19d14b3, &exec_909b5af8b19d14b3, 0x00000f32 },
		{ 0xbce84a9e8904f69d, &exec_bce84a9e8904f69d, 0x00001e97 },
		{ 0x25f88b782f88cf6a, &exec_25f88b782f88cf6a, 0x00001d21 },
		{ 0x2ed0aa5f3ae2b356, &exec_2ed0aa5f3ae2b356, 0x000010bc },
		{ 0x6948a9b706a1c417, &exec_6948a9b706a1c417, 0x00000309 },
		{ 0xe5d2586b7142cb01, &exec_e5d2586b7142cb01, 0x00000e01 },
		{ 0x15c53dec699783c0, &exec_15c53dec699783c0, 0x00000236 },
		{ 0x95c9a9cc6f615461, &exec_95c9a9cc6f615461, 0x00002026 },
		{ 0x57c660dec4686eef, &exec_57c660dec4686eef, 0x0000033e },
		{ 0xcf8c6b8c2974f8eb, &exec_cf8c6b8c2974f8eb, 0x00000545 },
		{ 0x0e5cac9cacb99cac, &exec_0e5cac9cacb99cac, 0x0000023e },
		{ 0x2e6b98269c935fb6, &exec_2e6b98269c935fb6, 0x00001a76 },
		{ 0xb5e78a11e8fe4f3b, &exec_b5e78a11e8fe4f3b, 0x000030fe },
		{ 0x8ccf17bf81a7c822, &exec_8ccf17bf81a7c822, 0x000008a6 },
		{ 0x5056b269a0602cba, &exec_5056b269a0602cba, 0x00000242 },
		{ 0xdd907c90cff3ad9c, &exec_dd907c90cff3ad9c, 0x00002bc3 },
		{ 0xbd8efcbc817ed72b, &exec_bd8efcbc817ed72b, 0x00003596 },
		{ 0xf2dd64585571908f, &exec_f2dd64585571908f, 0x00001a26 },
		{ 0x2a6283547fc5a35e, &exec_2a6283547fc5a35e, 0x000012d6 },
		{ 0x452b27579c0214ce, &exec_452b27579c0214ce, 0x000041d4 },
		{ 0xaa7572093b91e032, &exec_aa7572093b91e032, 0x000002b9 },
		{ 0xcc7b293b6f843e69, &exec_cc7b293b6f843e69, 0x00000e69 },
		{ 0x778e24c5f8b1c5d5, &exec_778e24c5f8b1c5d5, 0x00000abf },
		{ 0x3f7191efbfeeba70, &exec_3f7191efbfeeba70, 0x00000610 },
		{ 0x8270e91bfdec3856, &exec_8270e91bfdec3856, 0x00002772 },
		{ 0x6833c963772ea057, &exec_6833c963772ea057, 0x0000103b },
		{ 0x1bf4b6520532ef92, &exec_1bf4b6520532ef92, 0x0000037e },
		{ 0x245b828c25d47c65, &exec_245b828c25d47c65, 0x0000024b },
		{ 0x478d156657d71cb0, &exec_478d156657d71cb0, 0x000046ba },
		{ 0x8ec47afad2dc6536, &exec_8ec47afad2dc6536, 0x00001d7c },
		{ 0xcf5a06bdb5ede605, &exec_cf5a06bdb5ede605, 0x0000024f },
		{ 0x3a40bda725bb72ca, &exec_3a40bda725bb72ca, 0x00001c4b },
		{ 0x418d40a77783247f, &exec_418d40a77783247f, 0x0000043c },
		{ 0x4a86c582b3f90d5f, &exec_4a86c582b3f90d5f, 0x00000257 },
		{ 0xbd18cad389ebae49, &exec_bd18cad389ebae49, 0x00003a39 },
		{ 0xb92f43e6a5d65f74, &exec_b92f43e6a5d65f74, 0x00000389 },
		{ 0x65bb3923acd6322f, &exec_65bb3923acd6322f, 0x00000ebc },
		{ 0x1d11c8e02b47b05b, &exec_1d11c8e02b47b05b, 0x0000025d },
		{ 0x76e18884ab4072db, &exec_76e18884ab4072db, 0x00000500 },
		{ 0xeb688d9721e6be52, &exec_eb688d9721e6be52, 0x00000f17 },
		{ 0xf3f7b69764f00e79, &exec_f3f7b69764f00e79, 0x00003a08 },
		{ 0x33633ae6d947200d, &exec_33633ae6d947200d, 0x00000264 },
		{ 0xc4e4066fc71f8e5a, &exec_c4e4066fc71f8e5a, 0x00000359 },
		{ 0xae35e56d287532f5, &exec_ae35e56d287532f5, 0x00000268 },
		{ 0x71d5dfc02935e4dd, &exec_71d5dfc02935e4dd, 0x00003655 },
		{ 0x3d5f48122e02ad3e, &exec_3d5f48122e02ad3e, 0x00000735 },
		{ 0xcc3826b13582242d, &exec_cc3826b13582242d, 0x000027f7 },
		{ 0xed809d71b2b9e028, &exec_ed809d71b2b9e028, 0x0000026a },
		{ 0x71258c07dd3fc6d5, &exec_71258c07dd3fc6d5, 0x00003d6d },
		{ 0xb9798f0244b33e3a, &exec_b9798f0244b33e3a, 0x0000026d },
		{ 0x0fb45005fd8beccb, &exec_0fb45005fd8beccb, 0x000027fb },
		{ 0x5dee1ffeea5ef3e5, &exec_5dee1ffeea5ef3e5, 0x00000271 },
		{ 0x879d216c9de266de, &exec_879d216c9de266de, 0x0000483b },
		{ 0x3f8a0b7ca0bfe95e, &exec_3f8a0b7ca0bfe95e, 0x0000199f },
		{ 0x9c69990f76d990ce, &exec_9c69990f76d990ce, 0x00000275 },
		{ 0x3a8fea72a9251259, &exec_3a8fea72a9251259, 0x0000033b },
		{ 0xfb1848927bae7aba, &exec_fb1848927bae7aba, 0x0000027a },
		{ 0x96e99ca4f73d88cf, &exec_96e99ca4f73d88cf, 0x00003ada },
		{ 0x1e86b218f4e3b95a, &exec_1e86b218f4e3b95a, 0x00001dba },
		{ 0x3779eb614d948219, &exec_3779eb614d948219, 0x0000074c },
		{ 0x9bdd787a45db3afc, &exec_9bdd787a45db3afc, 0x00004771 },
		{ 0xcf61a3280884a344, &exec_cf61a3280884a344, 0x000009fe },
		{ 0x8b8ae4eeafcb38c2, &exec_8b8ae4eeafcb38c2, 0x00003204 },
		{ 0x398acea0e40fc633, &exec_398acea0e40fc633, 0x00000e61 },
		{ 0x815f4c9cd97ca915, &exec_815f4c9cd97ca915, 0x00001de3 },
		{ 0x50d2af43fb00a790, &exec_50d2af43fb00a790, 0x00000afa },
		{ 0xd4ded43a527b0b8e, &exec_d4ded43a527b0b8e, 0x00000287 },
		{ 0x3481186ba05745c1, &exec_3481186ba05745c1, 0x0000028d },
		{ 0x2ea9c23a5ebf3eab, &exec_2ea9c23a5ebf3eab, 0x0000028f },
		{ 0x577b4fb4dad5fb0e, &exec_577b4fb4dad5fb0e, 0x00000292 },
		{ 0xb8da5d12391d838b, &exec_b8da5d12391d838b, 0x00002dd1 },
		{ 0x9e789bf3a946db31, &exec_9e789bf3a946db31, 0x00000d6b },
		{ 0xff9073384d0e430b, &exec_ff9073384d0e430b, 0x00001218 },
		{ 0x02e3bd0c06f906bc, &exec_02e3bd0c06f906bc, 0x00000298 },
		{ 0x93dbd85093fbd5ae, &exec_93dbd85093fbd5ae, 0x00000b83 },
		{ 0xf46ada56e6c75c2a, &exec_f46ada56e6c75c2a, 0x00002288 },
		{ 0xb051499014271379, &exec_b051499014271379, 0x00002166 },
		{ 0x446693abd205a2c9, &exec_446693abd205a2c9, 0x00000330 },
		{ 0x214fe2904eed76e7, &exec_214fe2904eed76e7, 0x00001e7b },
		{ 0xe113af56d8e02024, &exec_e113af56d8e02024, 0x000028bc },
		{ 0x66cfe51595388a2d, &exec_66cfe51595388a2d, 0x000006ab },
		{ 0x8422ae372b73342a, &exec_8422ae372b73342a, 0x0000029b },
		{ 0x1a76d825818c3e9f, &exec_1a76d825818c3e9f, 0x0000029f },
		{ 0xf30ebdbcff37bbc4, &exec_f30ebdbcff37bbc4, 0x00000000 },
		{ 0x5b70023a41917c49, &exec_5b70023a41917c49, 0x00000fea },
		{ 0x793b831e3f3e1faa, &exec_793b831e3f3e1faa, 0x00002932 },
		{ 0x73e263600419f871, &exec_73e263600419f871, 0x00002737 },
		{ 0xfb17b869d1a58b92, &exec_fb17b869d1a58b92, 0x00001d5b },
		{ 0xbf61ed5a6a916715, &exec_bf61ed5a6a916715, 0x000002a1 },
		{ 0x8d4c95d04ad738f8, &exec_8d4c95d04ad738f8, 0x00002448 },
		{ 0x3613fb7f6bafcf6d, &exec_3613fb7f6bafcf6d, 0x00000442 },
		{ 0x619cbe0994cba921, &exec_619cbe0994cba921, 0x00001396 },
		{ 0xb0abff7a9aebb619, &exec_b0abff7a9aebb619, 0x00001181 },
		{ 0x7c60e5fe3447f424, &exec_7c60e5fe3447f424, 0x0000181f },
		{ 0x737dd33217ac88a5, &exec_737dd33217ac88a5, 0x000002ad },
		{ 0xf4931955072784c4, &exec_f4931955072784c4, 0x000002b6 },
		{ 0xa74cfed41da4494f, &exec_a74cfed41da4494f, 0x00001ffe },
		{ 0x34a05bd543104365, &exec_34a05bd543104365, 0x00000d0b },
		{ 0x8b2f3d718252a203, &exec_8b2f3d718252a203, 0x000014b3 },
		{ 0x6fc7e166b7f2c7a6, &exec_6fc7e166b7f2c7a6, 0x000002c0 },
		{ 0xc579c55194a47df7, &exec_c579c55194a47df7, 0x0000035c },
		{ 0x772556a4af7b1369, &exec_772556a4af7b1369, 0x000002c3 },
		{ 0x86eab499027d0575, &exec_86eab499027d0575, 0x0000239e },
		{ 0xc11dc73d95576072, &exec_c11dc73d95576072, 0x00001dae },
		{ 0x6f5b19f46aba46c8, &exec_6f5b19f46aba46c8, 0x000007e5 },
		{ 0x8a1326e4d04aa707, &exec_8a1326e4d04aa707, 0x00000695 },
		{ 0xa33f1fcd03df7284, &exec_a33f1fcd03df7284, 0x00004426 },
		{ 0x722d1e99b52c63fc, &exec_722d1e99b52c63fc, 0x0000064a },
		{ 0x9633e4d08741c893, &exec_9633e4d08741c893, 0x00000b86 },
		{ 0xcfc7b9eb2e88cf2f, &exec_cfc7b9eb2e88cf2f, 0x000002cc },
		{ 0x6d8fc8302e2a12e8, &exec_6d8fc8302e2a12e8, 0x000002d5 },
		{ 0xbd110398e687427e, &exec_bd110398e687427e, 0x00000f5f },
		{ 0xc59f4228169ea3df, &exec_c59f4228169ea3df, 0x000002dc },
		{ 0x4c392794e0ce707a, &exec_4c392794e0ce707a, 0x00003332 },
		{ 0x87c770d7168860cf, &exec_87c770d7168860cf, 0x000002df },
		{ 0xb6ce2de83fe5d036, &exec_b6ce2de83fe5d036, 0x00003d02 },
		{ 0x863be7ab2eece97b, &exec_863be7ab2eece97b, 0x000002ea },
		{ 0xe259e12a35f16ea1, &exec_e259e12a35f16ea1, 0x00003fe7 },
		{ 0xf9840c2acf2ff9b1, &exec_f9840c2acf2ff9b1, 0x00000ce7 },
		{ 0xd7950d16d57b7fed, &exec_d7950d16d57b7fed, 0x00002802 },
		{ 0xbf5348de5f4909f6, &exec_bf5348de5f4909f6, 0x00001a80 },
		{ 0xef52e58950fe87d2, &exec_ef52e58950fe87d2, 0x00003b04 },
		{ 0x3c55cee1cb4a8e4e, &exec_3c55cee1cb4a8e4e, 0x0000163b },
		{ 0x131b3949b1f2c2bd, &exec_131b3949b1f2c2bd, 0x000018dc },
		{ 0xd149fedf17d1eb18, &exec_d149fedf17d1eb18, 0x000045d3 },
		{ 0x3cc92da6e250ec70, &exec_3cc92da6e250ec70, 0x00000505 },
		{ 0x490c0a0d2265531f, &exec_490c0a0d2265531f, 0x00000465 },
		{ 0x90ca64758cee628a, &exec_90ca64758cee628a, 0x0000048f },
		{ 0x2565d3df6e744d9c, &exec_2565d3df6e744d9c, 0x00001e5b },
		{ 0x5846366f0a2f2693, &exec_5846366f0a2f2693, 0x000036af },
		{ 0x5e63d7b2643b142e, &exec_5e63d7b2643b142e, 0x000002ff },
		{ 0x0294d36c51b5f6db, &exec_0294d36c51b5f6db, 0x00000779 },
		{ 0x09536182db5bd02f, &exec_09536182db5bd02f, 0x00003efa },
		{ 0x0671d4d1af759a20, &exec_0671d4d1af759a20, 0x00003e1d },
		{ 0x374b572e1e7dd158, &exec_374b572e1e7dd158, 0x000012b7 },
		{ 0x41f9607b0a231e3f, &exec_41f9607b0a231e3f, 0x0000123a },
		{ 0xc8b83ddbab1e075b, &exec_c8b83ddbab1e075b, 0x000028ef },
		{ 0xfd6d2b5aa518a6e4, &exec_fd6d2b5aa518a6e4, 0x00000658 },
		{ 0x4a562561256e1b54, &exec_4a562561256e1b54, 0x0000030e },
		{ 0x6e6e2cb07423c071, &exec_6e6e2cb07423c071, 0x00001ebe },
		{ 0x03a7115d2adeceff, &exec_03a7115d2adeceff, 0x00001c40 },
		{ 0x3d9ff677bc5a1964, &exec_3d9ff677bc5a1964, 0x000009b5 },
		{ 0xd48ed208ebc1b5c5, &exec_d48ed208ebc1b5c5, 0x000011b9 },
		{ 0xd6c90617857f58d8, &exec_d6c90617857f58d8, 0x000004ba },
		{ 0xac1b0f8e2d3779b9, &exec_ac1b0f8e2d3779b9, 0x00002208 },
		{ 0x7b787d6d2415afaa, &exec_7b787d6d2415afaa, 0x00003999 },
		{ 0xe922961044b46476, &exec_e922961044b46476, 0x00002aca },
		{ 0x49b0215ace051987, &exec_49b0215ace051987, 0x0000031b },
		{ 0xde47c2f0790509ac, &exec_de47c2f0790509ac, 0x00002d37 },
		{ 0x0d7511cff1609b32, &exec_0d7511cff1609b32, 0x00003c18 },
		{ 0x33b735907aeb9925, &exec_33b735907aeb9925, 0x00000f0b },
		{ 0xc44fdaae88de7205, &exec_c44fdaae88de7205, 0x00003023 },
		{ 0xf376c932af54e718, &exec_f376c932af54e718, 0x00000579 },
		{ 0xd017c17ef69d884f, &exec_d017c17ef69d884f, 0x00002c3d },
		{ 0xd104c4da6f2a05ff, &exec_d104c4da6f2a05ff, 0x00003440 },
		{ 0x3dfeefd5094ad442, &exec_3dfeefd5094ad442, 0x0000088d },
		{ 0x958fefc57d1948ac, &exec_958fefc57d1948ac, 0x00000321 },
		{ 0xa244e1bf6222cdd0, &exec_a244e1bf6222cdd0, 0x00001109 },
		{ 0x18e5628a64451d2c, &exec_18e5628a64451d2c, 0x000040d5 },
		{ 0xf30d75ace036fc56, &exec_f30d75ace036fc56, 0x00000324 },
		{ 0x639a40b2c67ff8d8, &exec_639a40b2c67ff8d8, 0x00003ce9 },
		{ 0x929ae460ab73543e, &exec_929ae460ab73543e, 0x00001a22 },
		{ 0x0abc711e28e36884, &exec_0abc711e28e36884, 0x000005ae },
		{ 0x6b44b8e1b7f4403c, &exec_6b44b8e1b7f4403c, 0x00000328 },
		{ 0x27e0a85f40f8802b, &exec_27e0a85f40f8802b, 0x000041ef },
		{ 0x0c7a12f842e17442, &exec_0c7a12f842e17442, 0x00000a62 },
		{ 0xa202b5523059bca3, &exec_a202b5523059bca3, 0x000026a5 },
		{ 0x492931d48047ce07, &exec_492931d48047ce07, 0x0000032c },
		{ 0xf2acb05ed8da8b5b, &exec_f2acb05ed8da8b5b, 0x00004835 },
		{ 0xf57bb121e9c27043, &exec_f57bb121e9c27043, 0x000022c3 },
		{ 0x2b3fffe1bc8e156b, &exec_2b3fffe1bc8e156b, 0x00000819 },
		{ 0x7dbea04a27b211a7, &exec_7dbea04a27b211a7, 0x0000032e },
		{ 0x145b144b9e848adc, &exec_145b144b9e848adc, 0x00004728 },
		{ 0x47d600098be16ef4, &exec_47d600098be16ef4, 0x00000f94 },
		{ 0x8e42f2e1b9dd62c1, &exec_8e42f2e1b9dd62c1, 0x00002498 },
		{ 0xc07010e8c1dc711b, &exec_c07010e8c1dc711b, 0x000035dc },
		{ 0x587779e95e8989e7, &exec_587779e95e8989e7, 0x00001325 },
		{ 0x263d5151d74235b7, &exec_263d5151d74235b7, 0x00003fa7 },
		{ 0xc4503572320d9ff8, &exec_c4503572320d9ff8, 0x000036ff },
		{ 0xe2be20c3c4521f38, &exec_e2be20c3c4521f38, 0x00000343 },
		{ 0xf80ae8f7813562a1, &exec_f80ae8f7813562a1, 0x0000276e },
		{ 0x6d1eaef0131ca736, &exec_6d1eaef0131ca736, 0x00002715 },
		{ 0x249190fff32e9391, &exec_249190fff32e9391, 0x00002128 },
		{ 0xd520168a1737e4a8, &exec_d520168a1737e4a8, 0x000010d6 },
		{ 0xb6e3b38f51108ac3, &exec_b6e3b38f51108ac3, 0x00001427 },
		{ 0x7388ef48a5fdde8f, &exec_7388ef48a5fdde8f, 0x00003bd3 },
		{ 0xe3aab61ce471b40b, &exec_e3aab61ce471b40b, 0x000019a7 },
		{ 0xe01ee4e794ee843d, &exec_e01ee4e794ee843d, 0x0000034a },
		{ 0x848b5d974438658d, &exec_848b5d974438658d, 0x00000384 },
		{ 0x5e3c973702a09bb7, &exec_5e3c973702a09bb7, 0x00000c38 },
		{ 0xa4f5d34ccf4b9c5e, &exec_a4f5d34ccf4b9c5e, 0x00000352 },
		{ 0xdf6421d19b56df2e, &exec_df6421d19b56df2e, 0x00001cbb },
		{ 0x532794afb435eae9, &exec_532794afb435eae9, 0x00000356 },
		{ 0xf066143efa59381d, &exec_f066143efa59381d, 0x00000f3f },
		{ 0xde782cc4c1ec95b0, &exec_de782cc4c1ec95b0, 0x00000360 },
		{ 0xf6b03e65c41ecfb5, &exec_f6b03e65c41ecfb5, 0x000008a2 },
		{ 0x87a967890cb9e84a, &exec_87a967890cb9e84a, 0x000021bb },
		{ 0xd3a8f87993c40446, &exec_d3a8f87993c40446, 0x00000367 },
		{ 0x75ccaf104620dc91, &exec_75ccaf104620dc91, 0x0000161d },
		{ 0x0e2de8fb0493730a, &exec_0e2de8fb0493730a, 0x000003c5 },
		{ 0xa6b9ce680b464240, &exec_a6b9ce680b464240, 0x00000421 },
		{ 0x74422a1529c76c74, &exec_74422a1529c76c74, 0x0000142e },
		{ 0x21be99af87fa9c43, &exec_21be99af87fa9c43, 0x00000431 },
		{ 0xa6b231406c88ca2a, &exec_a6b231406c88ca2a, 0x00000370 },
		{ 0x1c733bd4d1657195, &exec_1c733bd4d1657195, 0x0000127b },
		{ 0x6336a8301ee66447, &exec_6336a8301ee66447, 0x00001b33 },
		{ 0xd89e855e6cc62ecf, &exec_d89e855e6cc62ecf, 0x0000037a },
		{ 0xb39bad1be4fc071b, &exec_b39bad1be4fc071b, 0x00003136 },
		{ 0x446dd4d4b570f31f, &exec_446dd4d4b570f31f, 0x00000b7c },
		{ 0xf60d5710a0ee20ef, &exec_f60d5710a0ee20ef, 0x00001037 },
		{ 0x73bbce9d74895c73, &exec_73bbce9d74895c73, 0x00001537 },
		{ 0xfcf59e4853d78176, &exec_fcf59e4853d78176, 0x00003456 },
		{ 0x0684da350e5cd456, &exec_0684da350e5cd456, 0x0000038b },
		{ 0x73dcda5619fab704, &exec_73dcda5619fab704, 0x00000537 },
		{ 0x38aac0221a6ef363, &exec_38aac0221a6ef363, 0x00000ca8 },
		{ 0x53a3ce7653e6c530, &exec_53a3ce7653e6c530, 0x00002542 },
		{ 0x128bb1c6e0ae30e3, &exec_128bb1c6e0ae30e3, 0x00002640 },
		{ 0x4384bbde140f5a7a, &exec_4384bbde140f5a7a, 0x00002a6a },
		{ 0x7f3f54900d6c9050, &exec_7f3f54900d6c9050, 0x00000391 },
		{ 0xd2d44b99656b3d13, &exec_d2d44b99656b3d13, 0x00002740 },
		{ 0x10cdbe7adf955f1e, &exec_10cdbe7adf955f1e, 0x00000398 },
		{ 0x4c1d1842335f0355, &exec_4c1d1842335f0355, 0x0000217f },
		{ 0x991e1c5673cdc49e, &exec_991e1c5673cdc49e, 0x0000039e },
		{ 0x310b48baf333a601, &exec_310b48baf333a601, 0x000022dc },
		{ 0x856e858767da4a1f, &exec_856e858767da4a1f, 0x000007e1 },
		{ 0x3ac096796967368c, &exec_3ac096796967368c, 0x00001e77 },
		{ 0x5bf0f5487528ec84, &exec_5bf0f5487528ec84, 0x00001ecf },
		{ 0x0901c3419029945a, &exec_0901c3419029945a, 0x00004455 },
		{ 0xfa58fad1030dcb9c, &exec_fa58fad1030dcb9c, 0x000003a9 },
		{ 0xfc3ea6b2426661ae, &exec_fc3ea6b2426661ae, 0x00000c0b },
		{ 0xae894f0a90d701bb, &exec_ae894f0a90d701bb, 0x00000624 },
		{ 0x19f39089245fff74, &exec_19f39089245fff74, 0x000014af },
		{ 0x3e8a5e675744f942, &exec_3e8a5e675744f942, 0x000003b1 },
		{ 0xaf38b2c42d5f0a92, &exec_af38b2c42d5f0a92, 0x00003102 },
		{ 0xcd75344527f12b19, &exec_cd75344527f12b19, 0x00000c75 },
		{ 0xcd3a57f6e3c104f5, &exec_cd3a57f6e3c104f5, 0x000011b3 },
		{ 0x149f88f9f167a46d, &exec_149f88f9f167a46d, 0x000009e4 },
		{ 0xe63a11036354d747, &exec_e63a11036354d747, 0x000023b9 },
		{ 0x72d5cbbd647c40aa, &exec_72d5cbbd647c40aa, 0x000003c2 },
		{ 0xe289724a5b2d13f6, &exec_e289724a5b2d13f6, 0x000003cb },
		{ 0xec1f2635942b1726, &exec_ec1f2635942b1726, 0x00002a49 },
		{ 0x042bec2951bca839, &exec_042bec2951bca839, 0x000003cf },
		{ 0x503a0b6667d1fe3f, &exec_503a0b6667d1fe3f, 0x000003d2 },
		{ 0x7175a9bd91a258d9, &exec_7175a9bd91a258d9, 0x000003d7 },
		{ 0x3ec878958a6b2e5a, &exec_3ec878958a6b2e5a, 0x00000a2e },
		{ 0x4385cfd09a185499, &exec_4385cfd09a185499, 0x000003dd },
		{ 0x3a64cd0ff6a36065, &exec_3a64cd0ff6a36065, 0x00000f24 },
		{ 0xe287662be9e79941, &exec_e287662be9e79941, 0x00002fc4 },
		{ 0x18fad45575ee0ce4, &exec_18fad45575ee0ce4, 0x0000284c },
		{ 0xc7b5e901de414b5e, &exec_c7b5e901de414b5e, 0x000003e3 },
		{ 0xee0d58117a8412d7, &exec_ee0d58117a8412d7, 0x00000f76 },
		{ 0x74145e5c2dd069d7, &exec_74145e5c2dd069d7, 0x000003e9 },
		{ 0x144056e01dd629ef, &exec_144056e01dd629ef, 0x00004215 },
		{ 0x342f9687badb6424, &exec_342f9687badb6424, 0x000003ec },
		{ 0xc23d4d9fb8be8dc5, &exec_c23d4d9fb8be8dc5, 0x00004119 },
		{ 0x85ec8f2307ca6abd, &exec_85ec8f2307ca6abd, 0x000047af },
		{ 0x42fd3c498f9b69a2, &exec_42fd3c498f9b69a2, 0x000003ef },
		{ 0x75b8c8f384d9132e, &exec_75b8c8f384d9132e, 0x000003f3 },
		{ 0x5ff5f0ab04c3b7a0, &exec_5ff5f0ab04c3b7a0, 0x0000417a },
		{ 0x1b54aafcfce95412, &exec_1b54aafcfce95412, 0x000003f7 },
		{ 0x52730cc0b6f736a1, &exec_52730cc0b6f736a1, 0x000003fd },
		{ 0x81ff501b924c403e, &exec_81ff501b924c403e, 0x000039ae },
		{ 0xc3716893360f41de, &exec_c3716893360f41de, 0x00001ec7 },
		{ 0x59ae7555dccd2e63, &exec_59ae7555dccd2e63, 0x00003bb7 },
		{ 0x2f0cb1f65fc64c27, &exec_2f0cb1f65fc64c27, 0x00000782 },
		{ 0xb7f45cc5be3551d0, &exec_b7f45cc5be3551d0, 0x00003b33 },
		{ 0x0c2c82d8e0fa0cc8, &exec_0c2c82d8e0fa0cc8, 0x00000405 },
		{ 0x9a8b2f3684745507, &exec_9a8b2f3684745507, 0x0000159e },
		{ 0x9ab3db7d875e84f8, &exec_9ab3db7d875e84f8, 0x000034fb },
		{ 0x2f4bb043e2e80561, &exec_2f4bb043e2e80561, 0x00000415 },
		{ 0x325acf26b67eec93, &exec_325acf26b67eec93, 0x00000fc9 },
		{ 0xed2ffec0b33e9d10, &exec_ed2ffec0b33e9d10, 0x0000041d },
		{ 0x0204b6fdff4c9647, &exec_0204b6fdff4c9647, 0x0000061a },
		{ 0x001557e942431dce, &exec_001557e942431dce, 0x000012a2 },
		{ 0xc23f2d7cb3e324de, &exec_c23f2d7cb3e324de, 0x00002fff },
		{ 0x8bd2d07f8b15ce44, &exec_8bd2d07f8b15ce44, 0x00001832 },
		{ 0x47df1a4db8a12fc3, &exec_47df1a4db8a12fc3, 0x000007c6 },
		{ 0x03b1f02889f28b72, &exec_03b1f02889f28b72, 0x000035a2 },
		{ 0x8b8dfb4050dab92e, &exec_8b8dfb4050dab92e, 0x00000675 },
		{ 0x57d7a1f58024155d, &exec_57d7a1f58024155d, 0x00000c01 },
		{ 0x592fcf57b5bc2612, &exec_592fcf57b5bc2612, 0x00003c2b },
		{ 0x1c510aaf824958ca, &exec_1c510aaf824958ca, 0x0000133f },
		{ 0x61adf2d98690eec9, &exec_61adf2d98690eec9, 0x00000427 },
		{ 0x1bd77fbd4be333f0, &exec_1bd77fbd4be333f0, 0x00002a0b },
		{ 0x0f886021f6cd99ff, &exec_0f886021f6cd99ff, 0x000009cf },
		{ 0x04ec66bc4044367f, &exec_04ec66bc4044367f, 0x0000042a },
		{ 0xe439ca7e38eedbe2, &exec_e439ca7e38eedbe2, 0x0000125b },
		{ 0x66cc5b956f48e70e, &exec_66cc5b956f48e70e, 0x0000042e },
		{ 0x0eee8869dd5776be, &exec_0eee8869dd5776be, 0x00000f36 },
		{ 0x228e11bbe0853da3, &exec_228e11bbe0853da3, 0x00002bb6 },
		{ 0x213546277d6a63b2, &exec_213546277d6a63b2, 0x00003de7 },
		{ 0xa41c28d9c117fef6, &exec_a41c28d9c117fef6, 0x00000437 },
		{ 0x960dd29f03b14133, &exec_960dd29f03b14133, 0x000030ce },
		{ 0xdc54b0eb661f4321, &exec_dc54b0eb661f4321, 0x00001a61 },
		{ 0x3751ca13c1741040, &exec_3751ca13c1741040, 0x00002748 },
		{ 0xbdb00d4f5453e0a6, &exec_bdb00d4f5453e0a6, 0x00000cb3 },
		{ 0x4a81b73cabb44313, &exec_4a81b73cabb44313, 0x00000447 },
		{ 0xa6450c9f435c533c, &exec_a6450c9f435c533c, 0x0000044a },
		{ 0x1b3960c7dead869b, &exec_1b3960c7dead869b, 0x00000786 },
		{ 0x9eb4e03c54f0dd78, &exec_9eb4e03c54f0dd78, 0x00002627 },
		{ 0xaebfe7813da55d5d, &exec_aebfe7813da55d5d, 0x00000b8c },
		{ 0x4347e07f643c1564, &exec_4347e07f643c1564, 0x0000044e },
		{ 0x356cf523c70e89e6, &exec_356cf523c70e89e6, 0x00002f85 },
		{ 0x94a1bf182da82b9f, &exec_94a1bf182da82b9f, 0x00000451 },
		{ 0xcd79f97b51a8ae47, &exec_cd79f97b51a8ae47, 0x000045fd },
		{ 0x580e3570584f9bff, &exec_580e3570584f9bff, 0x000018bc },
		{ 0x3a6cee5aba21add3, &exec_3a6cee5aba21add3, 0x00003a29 },
		{ 0x6a8f9a33592cfe38, &exec_6a8f9a33592cfe38, 0x00001db3 },
		{ 0xe95ce87a816da4a2, &exec_e95ce87a816da4a2, 0x000040fa },
		{ 0x2e22d2b41101f32b, &exec_2e22d2b41101f32b, 0x000007ce },
		{ 0x631ade8b5093e0c7, &exec_631ade8b5093e0c7, 0x00001378 },
		{ 0xe0fcd3553823742a, &exec_e0fcd3553823742a, 0x0000328e },
		{ 0x6b486d33b85113ac, &exec_6b486d33b85113ac, 0x00001077 },
		{ 0xdc48115003c79b71, &exec_dc48115003c79b71, 0x00000f5b },
		{ 0x7f7d50119f0d6824, &exec_7f7d50119f0d6824, 0x00003224 },
		{ 0x23fd1f81405d9957, &exec_23fd1f81405d9957, 0x000013d8 },
		{ 0x7fa5a6428bb97ca5, &exec_7fa5a6428bb97ca5, 0x00001ef3 },
		{ 0x76215e423947f243, &exec_76215e423947f243, 0x00000a40 },
		{ 0x91de08efda3719ea, &exec_91de08efda3719ea, 0x00003c6f },
		{ 0x61be83e8fefb53f6, &exec_61be83e8fefb53f6, 0x00002d71 },
		{ 0x1d0e73764799e6bf, &exec_1d0e73764799e6bf, 0x00000456 },
		{ 0x62d690621d608d05, &exec_62d690621d608d05, 0x0000065f },
		{ 0x5fa3abfc1bba1a69, &exec_5fa3abfc1bba1a69, 0x00001748 },
		{ 0x92030d7f690cb4ed, &exec_92030d7f690cb4ed, 0x000004d9 },
		{ 0x5f045862d8c7be51, &exec_5f045862d8c7be51, 0x00000460 },
		{ 0x7fb92cb9b817040e, &exec_7fb92cb9b817040e, 0x000047c3 },
		{ 0x6bef97fff118af72, &exec_6bef97fff118af72, 0x000004d0 },
		{ 0x3678fdae4f9bca8f, &exec_3678fdae4f9bca8f, 0x00001568 },
		{ 0xe4da44802271729e, &exec_e4da44802271729e, 0x00002c70 },
		{ 0xf88029220c1bcf46, &exec_f88029220c1bcf46, 0x00001e60 },
		{ 0x483f55d71a188a5f, &exec_483f55d71a188a5f, 0x000025e0 },
		{ 0xca3b991dc986974b, &exec_ca3b991dc986974b, 0x000013b5 },
		{ 0xca9b41ada220fe01, &exec_ca9b41ada220fe01, 0x00001860 },
		{ 0xbcd36e16766cf104, &exec_bcd36e16766cf104, 0x00000970 },
		{ 0x4a01d52b2cd5820e, &exec_4a01d52b2cd5820e, 0x00000468 },
		{ 0x4f751db451aef3af, &exec_4f751db451aef3af, 0x00003981 },
		{ 0xa7684a139c711ab7, &exec_a7684a139c711ab7, 0x000006a4 },
		{ 0x7a324beba0a18ec8, &exec_7a324beba0a18ec8, 0x0000046d },
		{ 0xc88fe2d427d27b67, &exec_c88fe2d427d27b67, 0x00000473 },
		{ 0xe4d7b3e76d3916a5, &exec_e4d7b3e76d3916a5, 0x00000000 },
		{ 0xc0a248787c5c8c59, &exec_c0a248787c5c8c59, 0x00001021 },
		{ 0x7c5872096a5bf20b, &exec_7c5872096a5bf20b, 0x00000477 },
		{ 0xe7938612dcfe13ee, &exec_e7938612dcfe13ee, 0x00000755 },
		{ 0x73aebdcb0bcfae9a, &exec_73aebdcb0bcfae9a, 0x0000047c },
		{ 0xc319311f81cfa6f6, &exec_c319311f81cfa6f6, 0x0000057c },
		{ 0xd2fc6c25a6ae6029, &exec_d2fc6c25a6ae6029, 0x00000634 },
		{ 0x1b90187e60376422, &exec_1b90187e60376422, 0x00000827 },
		{ 0x52eaa63cb02007b5, &exec_52eaa63cb02007b5, 0x0000469f },
		{ 0x8b22f30ae9617f4a, &exec_8b22f30ae9617f4a, 0x00000482 },
		{ 0xaae83cc92c5b6bb7, &exec_aae83cc92c5b6bb7, 0x00001410 },
		{ 0x55fd5b11bcf78dc0, &exec_55fd5b11bcf78dc0, 0x0000048c },
		{ 0x71772f2ea94c5515, &exec_71772f2ea94c5515, 0x00003f89 },
		{ 0xd71fb6f77f7351e0, &exec_d71fb6f77f7351e0, 0x00000492 },
		{ 0x26801859edc89949, &exec_26801859edc89949, 0x00000494 },
		{ 0x8bd5d4cef4a3720a, &exec_8bd5d4cef4a3720a, 0x00003db4 },
		{ 0x43840d6581a9075d, &exec_43840d6581a9075d, 0x000025ef },
		{ 0x3336f4b581918caa, &exec_3336f4b581918caa, 0x00000873 },
		{ 0x3b80fee1111e0399, &exec_3b80fee1111e0399, 0x0000049d },
		{ 0x118f799d6a5a4fdd, &exec_118f799d6a5a4fdd, 0x00000e30 },
		{ 0xb0fa82675a90d487, &exec_b0fa82675a90d487, 0x00000d7b },
		{ 0x0b68748a67ab56c7, &exec_0b68748a67ab56c7, 0x000011e1 },
		{ 0x0432cb9dbe18fdab, &exec_0432cb9dbe18fdab, 0x000004dc },
		{ 0xa0bb45523be68512, &exec_a0bb45523be68512, 0x00000bd4 },
		{ 0x8a879e3aa4faae15, &exec_8a879e3aa4faae15, 0x000004a1 },
		{ 0x23a318994f00c450, &exec_23a318994f00c450, 0x000007d0 },
		{ 0x72996b58dda5179b, &exec_72996b58dda5179b, 0x00002101 },
		{ 0x6265027b8d9c4245, &exec_6265027b8d9c4245, 0x00000faf },
		{ 0x3dee302b8bd7f1f2, &exec_3dee302b8bd7f1f2, 0x000004a5 },
		{ 0x63ec473400226f56, &exec_63ec473400226f56, 0x00001437 },
		{ 0x40d5cba335813b8c, &exec_40d5cba335813b8c, 0x00003094 },
		{ 0x22ff608daa7713f6, &exec_22ff608daa7713f6, 0x000004b4 },
		{ 0x89c4591b759380a8, &exec_89c4591b759380a8, 0x000041fa },
		{ 0xa2113456cacdc69f, &exec_a2113456cacdc69f, 0x000004b7 },
		{ 0xe16e4d9e3dbccb13, &exec_e16e4d9e3dbccb13, 0x0000076a },
		{ 0x21e88bce890f7a69, &exec_21e88bce890f7a69, 0x0000117e },
		{ 0x19c443a459fc2655, &exec_19c443a459fc2655, 0x00002033 },
		{ 0xb0b1a6f822becd62, &exec_b0b1a6f822becd62, 0x000004be },
		{ 0x470b1deb3b40006c, &exec_470b1deb3b40006c, 0x000006a7 },
		{ 0x8f75bf8c828de52a, &exec_8f75bf8c828de52a, 0x0000174d },
		{ 0x4955f06807fe1bd7, &exec_4955f06807fe1bd7, 0x0000148f },
		{ 0xe05f4f01431f6ec2, &exec_e05f4f01431f6ec2, 0x00002bf2 },
		{ 0x05b2cc425a2a1ba7, &exec_05b2cc425a2a1ba7, 0x000004ca },
		{ 0x6aae92751a37df0d, &exec_6aae92751a37df0d, 0x000004d3 },
		{ 0x2066148cd2500941, &exec_2066148cd2500941, 0x00001e38 },
		{ 0xc90343a104274902, &exec_c90343a104274902, 0x000008e4 },
		{ 0x07031c363a00b557, &exec_07031c363a00b557, 0x00001cfa },
		{ 0x449b1cf5a243d992, &exec_449b1cf5a243d992, 0x000004d5 },
		{ 0x20f11e28233194c9, &exec_20f11e28233194c9, 0x00001ac4 },
		{ 0xc89fd828e0a07d74, &exec_c89fd828e0a07d74, 0x00003e29 },
		{ 0x6f9658d61ba6c092, &exec_6f9658d61ba6c092, 0x00000763 },
		{ 0xa5cce145b386522d, &exec_a5cce145b386522d, 0x00000000 },
		{ 0x9da3d5e219b488a6, &exec_9da3d5e219b488a6, 0x000046c6 },
		{ 0x654c06c4d694a134, &exec_654c06c4d694a134, 0x0000094e },
		{ 0x964a44d04ee2d882, &exec_964a44d04ee2d882, 0x000024a4 },
		{ 0x95d79b1f9a046a58, &exec_95d79b1f9a046a58, 0x000004e7 },
		{ 0x82b1abf22b07f22b, &exec_82b1abf22b07f22b, 0x0000377c },
		{ 0xfab2f0994f85a9e1, &exec_fab2f0994f85a9e1, 0x00003c76 },
		{ 0x9757dc701516eafa, &exec_9757dc701516eafa, 0x00001186 },
		{ 0x96bbb9851746b4f5, &exec_96bbb9851746b4f5, 0x000004eb },
		{ 0xca945598283e34b7, &exec_ca945598283e34b7, 0x0000071f },
		{ 0x5321fc33e0ef411b, &exec_5321fc33e0ef411b, 0x00000b01 },
		{ 0xc6f02f3bf2eee7a1, &exec_c6f02f3bf2eee7a1, 0x00002982 },
		{ 0x9b0ee68647d7ef74, &exec_9b0ee68647d7ef74, 0x00000703 },
		{ 0x0053adc32ef3e472, &exec_0053adc32ef3e472, 0x0000196d },
		{ 0xef7a8505f14d52ae, &exec_ef7a8505f14d52ae, 0x000004ef },
		{ 0xc81e00162f5e59b2, &exec_c81e00162f5e59b2, 0x00002dc6 },
		{ 0x1d6f5eeac51590f0, &exec_1d6f5eeac51590f0, 0x000004f2 },
		{ 0x27e9aa4b697e9d8c, &exec_27e9aa4b697e9d8c, 0x000045c7 },
		{ 0x454dc22a41d9c695, &exec_454dc22a41d9c695, 0x00003ac2 },
		{ 0xf9c1f6b9b7f2819a, &exec_f9c1f6b9b7f2819a, 0x00000653 },
		{ 0x7e59086534f58c23, &exec_7e59086534f58c23, 0x00003af8 },
		{ 0xaeaa613b2a0c5d2d, &exec_aeaa613b2a0c5d2d, 0x0000165d },
		{ 0xfefd766b47bb3854, &exec_fefd766b47bb3854, 0x00000973 },
		{ 0x37878eb006d8a1a7, &exec_37878eb006d8a1a7, 0x0000106e },
		{ 0x38424a5b1f052daa, &exec_38424a5b1f052daa, 0x000004fb },
		{ 0x7806426148ec6118, &exec_7806426148ec6118, 0x00001cde },
		{ 0xd18d6cc7c2fbd29d, &exec_d18d6cc7c2fbd29d, 0x00003cd1 },
		{ 0x75978437376bb5c5, &exec_75978437376bb5c5, 0x00001d59 },
		{ 0xca5945bcd129b3ec, &exec_ca5945bcd129b3ec, 0x00002bdb },
		{ 0x241c3e04b4fea536, &exec_241c3e04b4fea536, 0x00001543 },
		{ 0x7df1f4918bbaa77f, &exec_7df1f4918bbaa77f, 0x00001294 },
		{ 0x167a77942a5ae954, &exec_167a77942a5ae954, 0x000047b8 },
		{ 0x8a8353bd530413db, &exec_8a8353bd530413db, 0x0000050b },
		{ 0x07f618ab0b705840, &exec_07f618ab0b705840, 0x00000515 },
		{ 0xf0bdcb226ccb5d10, &exec_f0bdcb226ccb5d10, 0x0000051b },
		{ 0x5622e3dce5e8fcc6, &exec_5622e3dce5e8fcc6, 0x00003cb8 },
		{ 0x85086355953f4c6f, &exec_85086355953f4c6f, 0x000036bd },
		{ 0x58c24feb20f234d2, &exec_58c24feb20f234d2, 0x00002ce2 },
		{ 0x68c91a7eedeaf523, &exec_68c91a7eedeaf523, 0x0000051f },
		{ 0x545135e641befd3e, &exec_545135e641befd3e, 0x0000237c },
		{ 0x238d594fcc891f4e, &exec_238d594fcc891f4e, 0x00000000 },
		{ 0x3e3e4ac64a205ba9, &exec_3e3e4ac64a205ba9, 0x00000937 },
		{ 0x6f5b0dcdc30ec9f1, &exec_6f5b0dcdc30ec9f1, 0x00000c41 },
		{ 0x48308cd1b5098c7e, &exec_48308cd1b5098c7e, 0x00000700 },
		{ 0x0fbe01e00d221d2b, &exec_0fbe01e00d221d2b, 0x00000524 },
		{ 0xb3cfbd47d9e43511, &exec_b3cfbd47d9e43511, 0x0000420a },
		{ 0xa68b3a3ab2258519, &exec_a68b3a3ab2258519, 0x00004878 },
		{ 0xb316af0d5b89a7e5, &exec_b316af0d5b89a7e5, 0x0000061c },
		{ 0xd249a779648131e0, &exec_d249a779648131e0, 0x00000a36 },
		{ 0xf5237ecb3044dc08, &exec_f5237ecb3044dc08, 0x00000528 },
		{ 0x65982ce927de6eee, &exec_65982ce927de6eee, 0x0000162e },
		{ 0x7a825d2f0fd6c597, &exec_7a825d2f0fd6c597, 0x0000052c },
		{ 0x689a869fc4053a49, &exec_689a869fc4053a49, 0x00000530 },
		{ 0x297179e293b84b08, &exec_297179e293b84b08, 0x00000535 },
		{ 0x094f0b6e2014efb2, &exec_094f0b6e2014efb2, 0x00004520 },
		{ 0x7268199a82d94711, &exec_7268199a82d94711, 0x0000053c },
		{ 0x5958b901a5505572, &exec_5958b901a5505572, 0x00000000 },
		{ 0x8e32dae2ef1152dc, &exec_8e32dae2ef1152dc, 0x00000b33 },
		{ 0xf6a8eb35a3bfd6b0, &exec_f6a8eb35a3bfd6b0, 0x0000054a },
		{ 0xc203332e00560a14, &exec_c203332e00560a14, 0x00000a3b },
		{ 0x0e10bec99340c474, &exec_0e10bec99340c474, 0x00000550 },
		{ 0xb2dbc13ef996074b, &exec_b2dbc13ef996074b, 0x000012eb },
		{ 0x45d2d3de6c3a96fd, &exec_45d2d3de6c3a96fd, 0x0000235d },
		{ 0x231a908daa8e2d3e, &exec_231a908daa8e2d3e, 0x00000558 },
		{ 0x39915505e643a3d8, &exec_39915505e643a3d8, 0x000007b7 },
		{ 0x895d08a8871eb196, &exec_895d08a8871eb196, 0x000041de },
		{ 0x9d417e3728e1e208, &exec_9d417e3728e1e208, 0x0000055e },
		{ 0xb7965822619e630e, &exec_b7965822619e630e, 0x000024d0 },
		{ 0x3b751081047379ce, &exec_3b751081047379ce, 0x000008bd },
		{ 0x8e2246e78a74bf89, &exec_8e2246e78a74bf89, 0x00000afe },
		{ 0xd09c982718ddf255, &exec_d09c982718ddf255, 0x00000567 },
		{ 0xda807e1aa5e93dc8, &exec_da807e1aa5e93dc8, 0x00003852 },
		{ 0x1cc4c3e65f179d05, &exec_1cc4c3e65f179d05, 0x0000056b },
		{ 0xb16192c35e4d4e1b, &exec_b16192c35e4d4e1b, 0x00003115 },
		{ 0xb5d6f7ba65d8772d, &exec_b5d6f7ba65d8772d, 0x00000f3b },
		{ 0x881a69ae7ee580a7, &exec_881a69ae7ee580a7, 0x0000056e },
		{ 0xedb1e79b566222e1, &exec_edb1e79b566222e1, 0x00001971 },
		{ 0x10038d10fcc5843f, &exec_10038d10fcc5843f, 0x00000572 },
		{ 0x3799c9db3d218f0d, &exec_3799c9db3d218f0d, 0x00000a14 },
		{ 0x678e80783b4a77c3, &exec_678e80783b4a77c3, 0x00000000 },
		{ 0x09c005dbbcbda57c, &exec_09c005dbbcbda57c, 0x00000000 },
		{ 0xd26cb69d86cb0ebb, &exec_d26cb69d86cb0ebb, 0x000009fa },
		{ 0x2ae8bfeb5da33af4, &exec_2ae8bfeb5da33af4, 0x00000582 },
		{ 0xef3ad40b2048c941, &exec_ef3ad40b2048c941, 0x000006b2 },
		{ 0xc43656951eff0e9b, &exec_c43656951eff0e9b, 0x00001ba6 },
		{ 0x68e8d593b26d8bdf, &exec_68e8d593b26d8bdf, 0x0000355d },
		{ 0xc52b855bd9a05f93, &exec_c52b855bd9a05f93, 0x000029f8 },
		{ 0x6d5147aed3d71d51, &exec_6d5147aed3d71d51, 0x00000c9c },
		{ 0x415c9a9a15161f7e, &exec_415c9a9a15161f7e, 0x00000584 },
		{ 0xc2d042c68666c8f2, &exec_c2d042c68666c8f2, 0x00003664 },
		{ 0x14bab8f9f17ebdb5, &exec_14bab8f9f17ebdb5, 0x0000063d },
		{ 0x1885eac63a17c66c, &exec_1885eac63a17c66c, 0x0000252f },
		{ 0x5c4c6724b57abd75, &exec_5c4c6724b57abd75, 0x00000b3c },
		{ 0x345a5c5ce6d7e2a2, &exec_345a5c5ce6d7e2a2, 0x00002c11 },
		{ 0xc418a195450b9b95, &exec_c418a195450b9b95, 0x000032cb },
		{ 0xd2507bb3bb9b950b, &exec_d2507bb3bb9b950b, 0x0000069a },
		{ 0x6909d8bc435853b0, &exec_6909d8bc435853b0, 0x00000589 },
		{ 0xbed8a3a2684467c1, &exec_bed8a3a2684467c1, 0x00003e79 },
		{ 0xcd4cd92a9d88e9b9, &exec_cd4cd92a9d88e9b9, 0x00000c6c },
		{ 0x2484f7ddb4994240, &exec_2484f7ddb4994240, 0x0000375d },
		{ 0x84492036ad0a7f44, &exec_84492036ad0a7f44, 0x000012c1 },
		{ 0x8ac970cfff155c63, &exec_8ac970cfff155c63, 0x00000000 },
		{ 0xd048a6d6732108d8, &exec_d048a6d6732108d8, 0x0000058f },
		{ 0x42c41690c0e034e7, &exec_42c41690c0e034e7, 0x00002c4b },
		{ 0xc8c5c6762fee92af, &exec_c8c5c6762fee92af, 0x0000067d },
		{ 0xa12e70ab9bb9b11c, &exec_a12e70ab9bb9b11c, 0x00001421 },
		{ 0x358056307f704768, &exec_358056307f704768, 0x000009c3 },
		{ 0xdcb49370378657e5, &exec_dcb49370378657e5, 0x000005a2 },
		{ 0x4ffe037401d68a2d, &exec_4ffe037401d68a2d, 0x000005a5 },
		{ 0x3cf29f79a80cfcdf, &exec_3cf29f79a80cfcdf, 0x00002429 },
		{ 0x84f312bff7dcee8e, &exec_84f312bff7dcee8e, 0x000018f3 },
		{ 0xa98c3b0897983f81, &exec_a98c3b0897983f81, 0x000005a8 },
		{ 0xc29f1c23f3ab8fae, &exec_c29f1c23f3ab8fae, 0x000005b0 },
		{ 0xb559e80a963e433b, &exec_b559e80a963e433b, 0x00003a33 },
		{ 0x599784e017939795, &exec_599784e017939795, 0x0000261e },
		{ 0xcbd2bec52b6ecb04, &exec_cbd2bec52b6ecb04, 0x00000000 },
		{ 0x2f64a56583b44164, &exec_2f64a56583b44164, 0x000012c3 },
		{ 0x85688e54ebce9d80, &exec_85688e54ebce9d80, 0x000005b9 },
		{ 0x4e553ca78e2c941f, &exec_4e553ca78e2c941f, 0x000005bc },
		{ 0x204f608a09580e3c, &exec_204f608a09580e3c, 0x00000ba7 },
		{ 0x5f62b0d573e624a9, &exec_5f62b0d573e624a9, 0x000005bf },
		{ 0x4a45a1db24a3f4a1, &exec_4a45a1db24a3f4a1, 0x000005c6 },
		{ 0x8cc1486132afe89f, &exec_8cc1486132afe89f, 0x00000f53 },
		{ 0xfa380b5ca2088b7a, &exec_fa380b5ca2088b7a, 0x000012a8 },
		{ 0x5bab1631d226639a, &exec_5bab1631d226639a, 0x000005c8 },
		{ 0x1d1894e02b4d76ad, &exec_1d1894e02b4d76ad, 0x000005ce },
		{ 0x8af2cb530c62d2f4, &exec_8af2cb530c62d2f4, 0x000005d1 },
		{ 0xfeea614917bc3d90, &exec_feea614917bc3d90, 0x00000000 },
		{ 0x094681d2216b7965, &exec_094681d2216b7965, 0x000005db },
		{ 0x99417f68c643bfb9, &exec_99417f68c643bfb9, 0x0000486e },
		{ 0xa2842ecc9ab88a4e, &exec_a2842ecc9ab88a4e, 0x00000678 },
		{ 0x380619ddfe534cc8, &exec_380619ddfe534cc8, 0x000005de },
		{ 0x578718a6a2e0dcc4, &exec_578718a6a2e0dcc4, 0x00003aae },
		{ 0x0e06427abbc641ed, &exec_0e06427abbc641ed, 0x00000cba },
		{ 0x0ec75504afb9279d, &exec_0ec75504afb9279d, 0x000005e1 },
		{ 0xa0c06f544aee7567, &exec_a0c06f544aee7567, 0x0000224e },
		{ 0xe7f634d9eb2ee335, &exec_e7f634d9eb2ee335, 0x00001166 },
		{ 0xaf65953b02cb2abd, &exec_af65953b02cb2abd, 0x000005e4 },
		{ 0x435fd28d92b44a01, &exec_435fd28d92b44a01, 0x00000a12 },
		{ 0xa89095983d914e60, &exec_a89095983d914e60, 0x00000645 },
		{ 0xda63918c80198ade, &exec_da63918c80198ade, 0x00000f91 },
		{ 0x8e3eb6e239c056ac, &exec_8e3eb6e239c056ac, 0x00002e5c },
		{ 0x7d987ab1a304c307, &exec_7d987ab1a304c307, 0x00000fd9 },
		{ 0xf6b2f2b4a3e053da, &exec_f6b2f2b4a3e053da, 0x00000609 },
		{ 0xf8ba8d67aaa61dc4, &exec_f8ba8d67aaa61dc4, 0x00001478 },
		{ 0xd360df97349c9e40, &exec_d360df97349c9e40, 0x00000614 },
		{ 0x433499463e4e0f69, &exec_433499463e4e0f69, 0x0000426a },
		{ 0xd3d88a880cdfa444, &exec_d3d88a880cdfa444, 0x00001c5b },
		{ 0xcc769e12b8390a7e, &exec_cc769e12b8390a7e, 0x00000616 },
		{ 0xf5581765ea99c059, &exec_f5581765ea99c059, 0x000007fb },
		{ 0x016b017e23bbf0ee, &exec_016b017e23bbf0ee, 0x000024ca },
		{ 0x8419d606c7056094, &exec_8419d606c7056094, 0x00001f5c },
		{ 0x9eaeb4e42422dbac, &exec_9eaeb4e42422dbac, 0x0000097e },
		{ 0x84adb994b24d1953, &exec_84adb994b24d1953, 0x00001f4a },
		{ 0xa602a040ffe6b4ce, &exec_a602a040ffe6b4ce, 0x00000627 },
		{ 0xe0e9905596c1a4bb, &exec_e0e9905596c1a4bb, 0x00000d5f },
		{ 0x657e3b6f37dcf999, &exec_657e3b6f37dcf999, 0x0000062d },
		{ 0xbd90822d9928d367, &exec_bd90822d9928d367, 0x00000631 },
		{ 0x01cf8af2fbe3c1e8, &exec_01cf8af2fbe3c1e8, 0x00002f4f },
		{ 0xddc1ec5fa99de434, &exec_ddc1ec5fa99de434, 0x00000639 },
		{ 0x080509cf74298d00, &exec_080509cf74298d00, 0x00000641 },
		{ 0x843d7d4b0fbbd7c1, &exec_843d7d4b0fbbd7c1, 0x0000280c },
		{ 0xb88d7f454a1b3621, &exec_b88d7f454a1b3621, 0x00000647 },
		{ 0xe6765324204bb282, &exec_e6765324204bb282, 0x0000232b },
		{ 0x9c76537a39fc71f7, &exec_9c76537a39fc71f7, 0x000008db },
		{ 0x6201ae173fd14653, &exec_6201ae173fd14653, 0x0000064e },
		{ 0x38e2d944a36144ed, &exec_38e2d944a36144ed, 0x000015b3 },
		{ 0x24de38ec5f960335, &exec_24de38ec5f960335, 0x0000065c },
		{ 0x3e38a441c5f9a686, &exec_3e38a441c5f9a686, 0x0000111b },
		{ 0x203bb28d93c3c8de, &exec_203bb28d93c3c8de, 0x0000091b },
		{ 0x418ca037251ad010, &exec_418ca037251ad010, 0x00000669 },
		{ 0xe07efcb596745b7f, &exec_e07efcb596745b7f, 0x000015f6 },
		{ 0xe2ab939a01eb427b, &exec_e2ab939a01eb427b, 0x0000066e },
		{ 0x821e800c00cd1a75, &exec_821e800c00cd1a75, 0x00000673 },
		{ 0xb82eee8574feafa1, &exec_b82eee8574feafa1, 0x00001638 },
		{ 0x0c52c7c95801352f, &exec_0c52c7c95801352f, 0x000031aa },
		{ 0x3aaa3eea66285e63, &exec_3aaa3eea66285e63, 0x00001507 },
		{ 0xd87a0afc516bbaed, &exec_d87a0afc516bbaed, 0x000010b1 },
		{ 0xccdbfb6977673b46, &exec_ccdbfb6977673b46, 0x00001c89 },
		{ 0xfa49830a916f9565, &exec_fa49830a916f9565, 0x00000cbe },
		{ 0xcaac255816d4a2ea, &exec_caac255816d4a2ea, 0x000014da },
		{ 0x100b27a171b4fe29, &exec_100b27a171b4fe29, 0x000006f0 },
		{ 0xe9129d8231662579, &exec_e9129d8231662579, 0x00000914 },
		{ 0x2a7c24cb1514705e, &exec_2a7c24cb1514705e, 0x000039ba },
		{ 0x3dcc59973bca79a3, &exec_3dcc59973bca79a3, 0x00002908 },
		{ 0x1dd325fb12e73328, &exec_1dd325fb12e73328, 0x00000924 },
		{ 0x1222aeb69e766c73, &exec_1222aeb69e766c73, 0x00001e41 },
		{ 0xfd332c76f767575b, &exec_fd332c76f767575b, 0x000041ed },
		{ 0xf167e0efc15ac23e, &exec_f167e0efc15ac23e, 0x00002d6d },
		{ 0x1b8888c8ce44e8d5, &exec_1b8888c8ce44e8d5, 0x00000683 },
		{ 0x710654f27000830d, &exec_710654f27000830d, 0x00000688 },
		{ 0x1ff6c58e618ca559, &exec_1ff6c58e618ca559, 0x000009a0 },
		{ 0x065903df5b6e0855, &exec_065903df5b6e0855, 0x0000109c },
		{ 0x55529bf12b93c46c, &exec_55529bf12b93c46c, 0x0000068f },
		{ 0x061c6c4129da47cc, &exec_061c6c4129da47cc, 0x00000691 },
		{ 0x7222f5c1ab477c2c, &exec_7222f5c1ab477c2c, 0x000021df },
		{ 0x4070c8b6e49cd8a2, &exec_4070c8b6e49cd8a2, 0x000010ad },
		{ 0xd4b65c2c5bd60199, &exec_d4b65c2c5bd60199, 0x00003830 },
		{ 0xb6bc8baba3ac459d, &exec_b6bc8baba3ac459d, 0x0000246c },
		{ 0x76e807f1619e60b5, &exec_76e807f1619e60b5, 0x0000085e },
		{ 0xeb1f72dfc7451b28, &exec_eb1f72dfc7451b28, 0x00000906 },
		{ 0x5cf414505857407f, &exec_5cf414505857407f, 0x000006ad },
		{ 0x59e4fb3bdf460946, &exec_59e4fb3bdf460946, 0x00002fc8 },
		{ 0x0e6fe8bdb02c9fe4, &exec_0e6fe8bdb02c9fe4, 0x0000070b },
		{ 0xf92f726a291fa809, &exec_f92f726a291fa809, 0x00000a8d },
		{ 0x8ca3ddc263cc8ac4, &exec_8ca3ddc263cc8ac4, 0x000006b5 },
		{ 0x22c2d3b57a0823b2, &exec_22c2d3b57a0823b2, 0x00001caf },
		{ 0x0472e481f807fa73, &exec_0472e481f807fa73, 0x00000c68 },
		{ 0xb2c5d19f220986cf, &exec_b2c5d19f220986cf, 0x000006b7 },
		{ 0xa18ec9515fed3783, &exec_a18ec9515fed3783, 0x00004740 },
		{ 0x0002aa8723f59a9c, &exec_0002aa8723f59a9c, 0x00003070 },
		{ 0xe09a2cb5968b74c7, &exec_e09a2cb5968b74c7, 0x00003517 },
		{ 0xb4b2eab37ac4f111, &exec_b4b2eab37ac4f111, 0x000006ba },
		{ 0xa204d49525d8c536, &exec_a204d49525d8c536, 0x000006c2 },
		{ 0xa2764a082ced9923, &exec_a2764a082ced9923, 0x00000bdc },
		{ 0x5c01579c27f74e6e, &exec_5c01579c27f74e6e, 0x00002f75 },
		{ 0x7505cdd796dfc9c3, &exec_7505cdd796dfc9c3, 0x000006c9 },
		{ 0x6344673df663c2a1, &exec_6344673df663c2a1, 0x00003cd6 },
		{ 0x36c28c14a5932564, &exec_36c28c14a5932564, 0x000009cd },
		{ 0xe0b9ef89832cb720, &exec_e0b9ef89832cb720, 0x00000ed2 },
		{ 0x4ab6797dd463ee18, &exec_4ab6797dd463ee18, 0x00000dd4 },
		{ 0x8ad1294956f9835c, &exec_8ad1294956f9835c, 0x000006dc },
		{ 0x98abc5de4430b031, &exec_98abc5de4430b031, 0x00002cf2 },
		{ 0xa28453606dfd160e, &exec_a28453606dfd160e, 0x00000a23 },
		{ 0x4c0444b4d7750471, &exec_4c0444b4d7750471, 0x0000443b },
		{ 0x7b7d2c4facec5f03, &exec_7b7d2c4facec5f03, 0x000006de },
		{ 0xaec5913b2a237675, &exec_aec5913b2a237675, 0x000006e3 },
		{ 0x7106a2f45bfe4976, &exec_7106a2f45bfe4976, 0x000006e6 },
		{ 0x4048a48d40d04dbf, &exec_4048a48d40d04dbf, 0x00002508 },
		{ 0x9fa3859b130bcb8b, &exec_9fa3859b130bcb8b, 0x00002278 },
		{ 0x2f78211549cd4dea, &exec_2f78211549cd4dea, 0x000037a4 },
		{ 0xd511928a5cd793fc, &exec_d511928a5cd793fc, 0x00001526 },
		{ 0xadaae573ead3338a, &exec_adaae573ead3338a, 0x000006e8 },
		{ 0x4ef2eb6d4df7a8b4, &exec_4ef2eb6d4df7a8b4, 0x0000351a },
		{ 0x9f89db47202c4daf, &exec_9f89db47202c4daf, 0x00002798 },
		{ 0x515e4e046d501985, &exec_515e4e046d501985, 0x00000f30 },
		{ 0x49cfe840d817a952, &exec_49cfe840d817a952, 0x00002274 },
		{ 0x204fe8f4ee8a2a38, &exec_204fe8f4ee8a2a38, 0x000006f9 },
		{ 0x4bc6e2577dd5b3b0, &exec_4bc6e2577dd5b3b0, 0x000024cd },
		{ 0xf2ddd97a18ab5ebf, &exec_f2ddd97a18ab5ebf, 0x000006fc },
		{ 0x7b171308b81fe464, &exec_7b171308b81fe464, 0x000012f2 },
		{ 0xaeb7cd2a810f25fb, &exec_aeb7cd2a810f25fb, 0x000021a0 },
		{ 0xb8db42e68a41455e, &exec_b8db42e68a41455e, 0x0000389a },
		{ 0xaf31153336de5d0e, &exec_af31153336de5d0e, 0x00000707 },
		{ 0xcb5ebd9272832897, &exec_cb5ebd9272832897, 0x00000000 },
		{ 0x950ed8b79dde3749, &exec_950ed8b79dde3749, 0x00003745 },
		{ 0x91ed4dc3129cd453, &exec_91ed4dc3129cd453, 0x00000712 },
		{ 0x0f6909dcf6f4fe54, &exec_0f6909dcf6f4fe54, 0x0000239a },
		{ 0x416eaa679cfe1ee7, &exec_416eaa679cfe1ee7, 0x00000c27 },
		{ 0x3741abd3e94b86ac, &exec_3741abd3e94b86ac, 0x00000eae },
		{ 0xb23ee218d44c3b4f, &exec_b23ee218d44c3b4f, 0x00000716 },
		{ 0xbb0bf2d93cd500fb, &exec_bb0bf2d93cd500fb, 0x00000722 },
		{ 0x3a0eb0770dd7d969, &exec_3a0eb0770dd7d969, 0x00004491 },
		{ 0xc7a926609c490521, &exec_c7a926609c490521, 0x00001b2b },
		{ 0x4b97b0011dbd1aca, &exec_4b97b0011dbd1aca, 0x00000725 },
		{ 0x819598cf81824e7d, &exec_819598cf81824e7d, 0x00002836 },
		{ 0x7464da9e3099b2d8, &exec_7464da9e3099b2d8, 0x0000072c },
		{ 0x8c87fbf63400851b, &exec_8c87fbf63400851b, 0x00000730 },
		{ 0xf4c5226f315404ea, &exec_f4c5226f315404ea, 0x00000738 },
		{ 0x1807f9e838996ede, &exec_1807f9e838996ede, 0x00001547 },
		{ 0xa7b5ebe92af4d83a, &exec_a7b5ebe92af4d83a, 0x000022a0 },
		{ 0x8bc116a324beab06, &exec_8bc116a324beab06, 0x000021d9 },
		{ 0xe120f764cf6e10d1, &exec_e120f764cf6e10d1, 0x0000073b },
		{ 0x3ea16bdf1f7eeaff, &exec_3ea16bdf1f7eeaff, 0x000039d9 },
		{ 0xbcc0b3c0527968e9, &exec_bcc0b3c0527968e9, 0x000008c6 },
		{ 0x83bf1a8422a2ab90, &exec_83bf1a8422a2ab90, 0x00004801 },
		{ 0x34b0cfef7f704f7f, &exec_34b0cfef7f704f7f, 0x0000073e },
		{ 0xadea8c7924a87000, &exec_adea8c7924a87000, 0x00001cbe },
		{ 0x58656eb0b0eb6e35, &exec_58656eb0b0eb6e35, 0x00000e24 },
		{ 0x1bf4c10bc64695f2, &exec_1bf4c10bc64695f2, 0x00000748 },
		{ 0x863c058d4c1d5dfe, &exec_863c058d4c1d5dfe, 0x00003985 },
		{ 0x0b724483b2a16396, &exec_0b724483b2a16396, 0x000023cf },
		{ 0x41539d1b8302be9e, &exec_41539d1b8302be9e, 0x0000078d },
		{ 0x25d76fca38fa75be, &exec_25d76fca38fa75be, 0x000019ed },
		{ 0x4b5da55774e56a5a, &exec_4b5da55774e56a5a, 0x00000f6a },
		{ 0x22a7141080897877, &exec_22a7141080897877, 0x000009be },
		{ 0x1f4fc18b0aa26444, &exec_1f4fc18b0aa26444, 0x0000447f },
		{ 0xf7f3425c5ba3e521, &exec_f7f3425c5ba3e521, 0x00000b64 },
		{ 0x60e0813e4ebf7b59, &exec_60e0813e4ebf7b59, 0x0000075f },
		{ 0xec876e9e3ee80fd9, &exec_ec876e9e3ee80fd9, 0x00000766 },
		{ 0x38e3041d6f156d36, &exec_38e3041d6f156d36, 0x000033b3 },
		{ 0x1c56cd4a56779196, &exec_1c56cd4a56779196, 0x0000076f },
		{ 0xe07b5fbc1f3ff6c1, &exec_e07b5fbc1f3ff6c1, 0x00002231 },
		{ 0xd03ba049ff813ccb, &exec_d03ba049ff813ccb, 0x00000774 },
		{ 0x4d9f24cf77264d4b, &exec_4d9f24cf77264d4b, 0x00000777 },
		{ 0xdce6aee8dcd5527f, &exec_dce6aee8dcd5527f, 0x00000fbb },
		{ 0x67c4c3ec411a0b34, &exec_67c4c3ec411a0b34, 0x000044da },
		{ 0x83aabedec84105f2, &exec_83aabedec84105f2, 0x00001f71 },
		{ 0xa4b1e63fec385b3b, &exec_a4b1e63fec385b3b, 0x0000078a },
		{ 0x7fcf373e1b6ae43b, &exec_7fcf373e1b6ae43b, 0x00000db6 },
		{ 0x2c74eb453bf6c6bd, &exec_2c74eb453bf6c6bd, 0x000011a7 },
		{ 0x03ce95df218c235d, &exec_03ce95df218c235d, 0x00000f72 },
		{ 0x63357f1c04b53513, &exec_63357f1c04b53513, 0x00000790 },
		{ 0x823a566125836818, &exec_823a566125836818, 0x000011ae },
		{ 0x0e746eec28690698, &exec_0e746eec28690698, 0x0000079f },
		{ 0x0a889e140b03d23b, &exec_0a889e140b03d23b, 0x0000474c },
		{ 0xc78df6609c31ebd9, &exec_c78df6609c31ebd9, 0x00001c93 },
		{ 0x109f370ab553fd05, &exec_109f370ab553fd05, 0x00002e2c },
		{ 0xd46382487aa29ac5, &exec_d46382487aa29ac5, 0x00001126 },
		{ 0x200d02efa935ee8f, &exec_200d02efa935ee8f, 0x0000336f },
		{ 0x53c3659228bad0e8, &exec_53c3659228bad0e8, 0x000007a5 },
		{ 0x7cdb0dc36ef79c6d, &exec_7cdb0dc36ef79c6d, 0x000020f9 },
		{ 0x17596a92b61a3467, &exec_17596a92b61a3467, 0x000007ad },
		{ 0x9e0abd653549b788, &exec_9e0abd653549b788, 0x00000b24 },
		{ 0x7046fbcc4b410670, &exec_7046fbcc4b410670, 0x00000da8 },
		{ 0x9adb7f6d573f1a39, &exec_9adb7f6d573f1a39, 0x00001914 },
		{ 0x952d1ccab34d5611, &exec_952d1ccab34d5611, 0x00003012 },
		{ 0xc147e8d8c58c761a, &exec_c147e8d8c58c761a, 0x000019e1 },
		{ 0xfbe6507c4d34adb0, &exec_fbe6507c4d34adb0, 0x000007c3 },
		{ 0x9d317a131ff4a4a4, &exec_9d317a131ff4a4a4, 0x000021dc },
		{ 0xbdc95334607ffcf7, &exec_bdc95334607ffcf7, 0x000007d2 },
		{ 0xd826505e67e24f2f, &exec_d826505e67e24f2f, 0x000007d8 },
		{ 0xabfe1dc2af59aa63, &exec_abfe1dc2af59aa63, 0x000007de },
		{ 0x173e3a92b6031b1f, &exec_173e3a92b6031b1f, 0x000031b2 },
		{ 0x7d87f93452c43a37, &exec_7d87f93452c43a37, 0x000007e3 },
		{ 0x5e52d48b05b9cb59, &exec_5e52d48b05b9cb59, 0x00001eb9 },
		{ 0x54733a3645369669, &exec_54733a3645369669, 0x00001784 },
		{ 0xeb2dc6ecfc4d8d3f, &exec_eb2dc6ecfc4d8d3f, 0x00001abf },
		{ 0x232fc0ab4e099f78, &exec_232fc0ab4e099f78, 0x000007ea },
		{ 0x516afdc7cd484c2d, &exec_516afdc7cd484c2d, 0x000015a3 },
		{ 0x7da1dfc1b35e728f, &exec_7da1dfc1b35e728f, 0x00003a48 },
		{ 0xf2ad1a52e5ac57d5, &exec_f2ad1a52e5ac57d5, 0x00002615 },
		{ 0x44114c6c76d04d88, &exec_44114c6c76d04d88, 0x000007ee },
		{ 0x2685d097b0fdaeb1, &exec_2685d097b0fdaeb1, 0x00001b4e },
		{ 0xbbe13465a7cf45f8, &exec_bbe13465a7cf45f8, 0x00000803 },
		{ 0x086bc9c407e9923b, &exec_086bc9c407e9923b, 0x00000eff },
		{ 0x704b7f5a9c8c6d78, &exec_704b7f5a9c8c6d78, 0x00000850 },
		{ 0x00401af18d0a0adc, &exec_00401af18d0a0adc, 0x00000806 },
		{ 0xd99a3d692747eabf, &exec_d99a3d692747eabf, 0x0000080a },
		{ 0x166b40ffe6a8ca83, &exec_166b40ffe6a8ca83, 0x0000176e },
		{ 0x43e0bb6db8164733, &exec_43e0bb6db8164733, 0x000011c4 },
		{ 0x0fb221bae52c9c9c, &exec_0fb221bae52c9c9c, 0x0000080d },
		{ 0x9dfddd0250618af8, &exec_9dfddd0250618af8, 0x00000814 },
		{ 0xb8c5daaae4aafcce, &exec_b8c5daaae4aafcce, 0x00000d95 },
		{ 0xcacaac73e152ee72, &exec_cacaac73e152ee72, 0x00000adb },
		{ 0xb157d7a1fdecb75a, &exec_b157d7a1fdecb75a, 0x0000081d },
		{ 0xa01994d3accb3af2, &exec_a01994d3accb3af2, 0x00000823 },
		{ 0x0058fd7cbe16bd7a, &exec_0058fd7cbe16bd7a, 0x00002fca },
		{ 0x2d72c83225444e00, &exec_2d72c83225444e00, 0x00002a58 },
		{ 0xb601788801021afa, &exec_b601788801021afa, 0x0000185b },
		{ 0xf018b8a8a01ba01a, &exec_f018b8a8a01ba01a, 0x000025fc },
		{ 0xa0be288a3111bf3e, &exec_a0be288a3111bf3e, 0x0000082a },
		{ 0xe20d20562305417f, &exec_e20d20562305417f, 0x00000bea },
		{ 0x21b5b1919d34de22, &exec_21b5b1919d34de22, 0x00003402 },
		{ 0xe43db65335809c30, &exec_e43db65335809c30, 0x0000082f },
		{ 0x740ae741de39383f, &exec_740ae741de39383f, 0x00000836 },
		{ 0x7584d864e74980d2, &exec_7584d864e74980d2, 0x0000105c },
		{ 0x48c2cb73ae1468bd, &exec_48c2cb73ae1468bd, 0x000037d1 },
		{ 0x578f768ebc1188e8, &exec_578f768ebc1188e8, 0x0000083e },
		{ 0x71a2e06e6f126dc5, &exec_71a2e06e6f126dc5, 0x00000f15 },
		{ 0x82c1dd787ee951ba, &exec_82c1dd787ee951ba, 0x00000842 },
		{ 0xf0123504fa1a4ad1, &exec_f0123504fa1a4ad1, 0x00001793 },
		{ 0xd76df42de65cd861, &exec_d76df42de65cd861, 0x0000113f },
		{ 0xd0cc744b4534150c, &exec_d0cc744b4534150c, 0x00000fb7 },
		{ 0x5183255a55404cdb, &exec_5183255a55404cdb, 0x00000855 },
		{ 0x9276544c5b9066a0, &exec_9276544c5b9066a0, 0x00002566 },
		{ 0x62524e55406e274e, &exec_62524e55406e274e, 0x00003a3e },
		{ 0x3da3cea9a9a8bb89, &exec_3da3cea9a9a8bb89, 0x00002280 },
		{ 0x5187131efdf9da8b, &exec_5187131efdf9da8b, 0x00000860 },
		{ 0x209a46bafba8267f, &exec_209a46bafba8267f, 0x00000f56 },
		{ 0xfa51990346a56f56, &exec_fa51990346a56f56, 0x0000102c },
		{ 0x58ecb82258179e00, &exec_58ecb82258179e00, 0x000014c8 },
		{ 0x35210cb4f2073ff1, &exec_35210cb4f2073ff1, 0x0000086f },
		{ 0xb85299f433e66841, &exec_b85299f433e66841, 0x0000231f },
		{ 0x9cb9d93448f37290, &exec_9cb9d93448f37290, 0x00000876 },
		{ 0x566610271b994263, &exec_566610271b994263, 0x000010ff },
		{ 0x08117b2ae4097700, &exec_08117b2ae4097700, 0x0000087a },
		{ 0x4c0406dced6dd78b, &exec_4c0406dced6dd78b, 0x00002371 },
		{ 0x1ca66ebdf4d62e1e, &exec_1ca66ebdf4d62e1e, 0x00000a80 },
		{ 0x98ced1fd283c4093, &exec_98ced1fd283c4093, 0x0000087d },
		{ 0x8da9f3b17e1f216c, &exec_8da9f3b17e1f216c, 0x00000880 },
		{ 0x973d0532b5479236, &exec_973d0532b5479236, 0x00003fac },
		{ 0xab1aff8bc0726de9, &exec_ab1aff8bc0726de9, 0x000030af },
		{ 0x15b479a51a9142e5, &exec_15b479a51a9142e5, 0x0000129c },
		{ 0x6445e0246accef7f, &exec_6445e0246accef7f, 0x000009d8 },
		{ 0x8801f7ebcf2bd834, &exec_8801f7ebcf2bd834, 0x00000884 },
		{ 0xd3683e5b68ba7d97, &exec_d3683e5b68ba7d97, 0x00000889 },
		{ 0x666e759fb0eb44ac, &exec_666e759fb0eb44ac, 0x00000892 },
		{ 0xc9e8d60749d42c6d, &exec_c9e8d60749d42c6d, 0x00000000 },
		{ 0x10e2296eb6e4f364, &exec_10e2296eb6e4f364, 0x00001096 },
		{ 0xe960aa66a4c5a45e, &exec_e960aa66a4c5a45e, 0x00000897 },
		{ 0xc96f429722f7a639, &exec_c96f429722f7a639, 0x00002419 },
		{ 0x674807dc17cef51f, &exec_674807dc17cef51f, 0x000026df },
		{ 0x33b01f846b85bbc2, &exec_33b01f846b85bbc2, 0x000008a0 },
		{ 0x5b7ccbb9a27b1c63, &exec_5b7ccbb9a27b1c63, 0x00003ed3 },
		{ 0x2d1b03b01e0d6362, &exec_2d1b03b01e0d6362, 0x000015a8 },
		{ 0x0db9f4fd9d3812b2, &exec_0db9f4fd9d3812b2, 0x0000092d },
		{ 0x0d89ab92e42252e4, &exec_0d89ab92e42252e4, 0x00000e99 },
		{ 0x47c6d7bda29731ed, &exec_47c6d7bda29731ed, 0x000008b1 },
		{ 0xbcec8ceb199df7db, &exec_bcec8ceb199df7db, 0x00002879 },
		{ 0xfcf986db32242700, &exec_fcf986db32242700, 0x000008b9 },
		{ 0xa582a91a39dfe89d, &exec_a582a91a39dfe89d, 0x000009ef },
		{ 0x4e0284a9f833ab9b, &exec_4e0284a9f833ab9b, 0x000011a0 },
		{ 0x1be45f0530bbf337, &exec_1be45f0530bbf337, 0x00002303 },
		{ 0xfd2b62bbbb071d88, &exec_fd2b62bbbb071d88, 0x0000212f },
		{ 0x9839c8192d1aa325, &exec_9839c8192d1aa325, 0x00002248 },
		{ 0x80675978bf3d5917, &exec_80675978bf3d5917, 0x000008fc },
		{ 0x8a2af566917c8a50, &exec_8a2af566917c8a50, 0x00000000 },
		{ 0x42abff1184cb636b, &exec_42abff1184cb636b, 0x00004002 },
		{ 0x5995f79d9631d005, &exec_5995f79d9631d005, 0x00001d48 },
		{ 0xea805b896cd18f56, &exec_ea805b896cd18f56, 0x000008ca },
		{ 0xaf9bc6928213cd14, &exec_af9bc6928213cd14, 0x00000fb2 },
		{ 0x6cd0be107e2e4412, &exec_6cd0be107e2e4412, 0x00000b72 },
		{ 0xc2e57d9a718ec996, &exec_c2e57d9a718ec996, 0x000011f7 },
		{ 0x8d5cf19191a333a0, &exec_8d5cf19191a333a0, 0x00003477 },
		{ 0xd1d3e17cb9b4052f, &exec_d1d3e17cb9b4052f, 0x000008ce },
		{ 0xdac6a285a14d8ac9, &exec_dac6a285a14d8ac9, 0x00000b9c },
		{ 0xb925c1adea651fff, &exec_b925c1adea651fff, 0x000043a3 },
		{ 0x3eb1c5380d638b78, &exec_3eb1c5380d638b78, 0x00000fe5 },
		{ 0x1a4f14161a8c8a3e, &exec_1a4f14161a8c8a3e, 0x00003c8e },
		{ 0x47ae593702fca606, &exec_47ae593702fca606, 0x00000efa },
		{ 0xdf5dc83e107273e0, &exec_df5dc83e107273e0, 0x000015ae },
		{ 0x0df568e6c1a15c3f, &exec_0df568e6c1a15c3f, 0x0000446c },
		{ 0xa4a7bcdfd117eceb, &exec_a4a7bcdfd117eceb, 0x00000c79 },
		{ 0x4788e0676c8fdd7d, &exec_4788e0676c8fdd7d, 0x000008e8 },
		{ 0x7ad359bde386778d, &exec_7ad359bde386778d, 0x000008f2 },
		{ 0x067d6f89b7e065a9, &exec_067d6f89b7e065a9, 0x00000d4d },
		{ 0x3488bf89be42243c, &exec_3488bf89be42243c, 0x00001bc6 },
		{ 0xb50b07fc225399f7, &exec_b50b07fc225399f7, 0x00000a6a },
		{ 0x1b9719aae857e951, &exec_1b9719aae857e951, 0x000008f5 },
		{ 0x0ecff034086dc57c, &exec_0ecff034086dc57c, 0x000008f8 },
		{ 0x77b59dde7267acea, &exec_77b59dde7267acea, 0x00001ea8 },
		{ 0x779df02a14596db5, &exec_779df02a14596db5, 0x000008fe },
		{ 0xbabc996894e965d4, &exec_babc996894e965d4, 0x00001582 },
		{ 0xc7fd43dd996460f4, &exec_c7fd43dd996460f4, 0x000031dd },
		{ 0xf0f2f33f5a0476d7, &exec_f0f2f33f5a0476d7, 0x00000910 },
		{ 0xe8be27a3aca69890, &exec_e8be27a3aca69890, 0x00000bd9 },
		{ 0x079eb1f44f399454, &exec_079eb1f44f399454, 0x0000368f },
		{ 0xcd09ee29913b54b8, &exec_cd09ee29913b54b8, 0x0000445e },
		{ 0x9c413a6ba031fe40, &exec_9c413a6ba031fe40, 0x00001ca6 },
		{ 0x95e93b3fc7f427a4, &exec_95e93b3fc7f427a4, 0x0000349a },
		{ 0x93858a0b3be8763f, &exec_93858a0b3be8763f, 0x000022ee },
		{ 0x9dda20f407e31f73, &exec_9dda20f407e31f73, 0x0000091e },
		{ 0x41bb50de14dde829, &exec_41bb50de14dde829, 0x00000929 },
		{ 0xd69a1c19c239ed6a, &exec_d69a1c19c239ed6a, 0x000022fd },
		{ 0xa13fba8795873bbe, &exec_a13fba8795873bbe, 0x00004449 },
		{ 0x1e9fda0deae41f1a, &exec_1e9fda0deae41f1a, 0x00000931 },
		{ 0xec7143a170f7c312, &exec_ec7143a170f7c312, 0x00001f0e },
		{ 0x92a42ae8193b71b8, &exec_92a42ae8193b71b8, 0x00000da4 },
		{ 0xf8ebce101ef786ac, &exec_f8ebce101ef786ac, 0x0000304a },
		{ 0x1fbba01ab340447f, &exec_1fbba01ab340447f, 0x0000120a },
		{ 0x291e316a151a8f2a, &exec_291e316a151a8f2a, 0x000039f3 },
		{ 0x334ed8b77b79a2d4, &exec_334ed8b77b79a2d4, 0x00000933 },
		{ 0x2750db8cabbec972, &exec_2750db8cabbec972, 0x00000ff6 },
		{ 0xf761310f04ac2acc, &exec_f761310f04ac2acc, 0x0000206a },
		{ 0x784b57d5946852f1, &exec_784b57d5946852f1, 0x00000e16 },
		{ 0x11ce036fd2755f1a, &exec_11ce036fd2755f1a, 0x00002573 },
		{ 0xc5ed41bfc9a50aac, &exec_c5ed41bfc9a50aac, 0x00000949 },
		{ 0x0ba692545dec13fe, &exec_0ba692545dec13fe, 0x00000953 },
		{ 0x63148f1ceac6c146, &exec_63148f1ceac6c146, 0x000010c4 },
		{ 0x2692e6c16003d277, &exec_2692e6c16003d277, 0x00001cd5 },
		{ 0xd1bd6b51f4e20b0f, &exec_d1bd6b51f4e20b0f, 0x00000955 },
		{ 0x1805735c83f3a13f, &exec_1805735c83f3a13f, 0x00000ebf },
		{ 0x0d3c64f235f073d4, &exec_0d3c64f235f073d4, 0x00003f91 },
		{ 0xa6176e133dba0200, &exec_a6176e133dba0200, 0x00000958 },
		{ 0xbf9d903f9fa9ddd1, &exec_bf9d903f9fa9ddd1, 0x00000cac },
		{ 0xb284913a69ac5071, &exec_b284913a69ac5071, 0x0000095c },
		{ 0x75575fac1823f546, &exec_75575fac1823f546, 0x000022bf },
		{ 0xe41aad70303f0252, &exec_e41aad70303f0252, 0x00003d80 },
		{ 0x9e70631f8dc4536f, &exec_9e70631f8dc4536f, 0x00000964 },
		{ 0xce171da1aba8ff56, &exec_ce171da1aba8ff56, 0x000025dc },
		{ 0x1d4bdcb8d82c015a, &exec_1d4bdcb8d82c015a, 0x00000969 },
		{ 0x7ef938c18a9d3eef, &exec_7ef938c18a9d3eef, 0x0000112e },
		{ 0x9459e29edcb7a3c7, &exec_9459e29edcb7a3c7, 0x00002f9f },
		{ 0xcca9c9b0e77b0ba0, &exec_cca9c9b0e77b0ba0, 0x00000975 },
		{ 0xe4cd4080fcb069b7, &exec_e4cd4080fcb069b7, 0x00000979 },
		{ 0x506da2983548d1fc, &exec_506da2983548d1fc, 0x00001f76 },
		{ 0xce74f6741ba503aa, &exec_ce74f6741ba503aa, 0x00002c39 },
		{ 0xef71bf8aa7da455d, &exec_ef71bf8aa7da455d, 0x0000344b },
		{ 0x2e870c4cbe2d5c94, &exec_2e870c4cbe2d5c94, 0x00002867 },
		{ 0x8b1836bd4fdabcc7, &exec_8b1836bd4fdabcc7, 0x00002116 },
		{ 0x084ad127e91bd84f, &exec_084ad127e91bd84f, 0x000033ea },
		{ 0x2c632dab4a6c1eda, &exec_2c632dab4a6c1eda, 0x00000981 },
		{ 0xd0d7bea7f017d485, &exec_d0d7bea7f017d485, 0x00000986 },
		{ 0x4c15eda70fb0496b, &exec_4c15eda70fb0496b, 0x00003ee7 },
		{ 0xbd29ba9430ae15ad, &exec_bd29ba9430ae15ad, 0x0000149f },
		{ 0xfa93745258e8d4ee, &exec_fa93745258e8d4ee, 0x000030f5 },
		{ 0xcb5268c8e63c7f66, &exec_cb5268c8e63c7f66, 0x00000992 },
		{ 0xf4ddd1808850e79d, &exec_f4ddd1808850e79d, 0x00003b09 },
		{ 0x4cd07d4061c6ea4e, &exec_4cd07d4061c6ea4e, 0x00000998 },
		{ 0xcac05ab208800fce, &exec_cac05ab208800fce, 0x0000214b },
		{ 0xbd440ec9e48c7546, &exec_bd440ec9e48c7546, 0x000009a4 },
		{ 0x0f9dce7301eba9d8, &exec_0f9dce7301eba9d8, 0x000009a7 },
		{ 0x6965b00d0a9cc2d8, &exec_6965b00d0a9cc2d8, 0x000009a9 },
		{ 0xaef378dfb042daa3, &exec_aef378dfb042daa3, 0x00003e7f },
		{ 0xb85072736691e150, &exec_b85072736691e150, 0x000036b7 },
		{ 0xef9cdc5d78edecfc, &exec_ef9cdc5d78edecfc, 0x00000b17 },
		{ 0x2f1aaee1be3523eb, &exec_2f1aaee1be3523eb, 0x000009b2 },
		{ 0xad84f0776a610da8, &exec_ad84f0776a610da8, 0x00000e38 },
		{ 0xbc605b529ee6c96d, &exec_bc605b529ee6c96d, 0x00001c96 },
		{ 0xba6fc5a945d29605, &exec_ba6fc5a945d29605, 0x000009b9 },
		{ 0x47666159946bb00e, &exec_47666159946bb00e, 0x0000445b },
		{ 0xce6c120d6e86c8eb, &exec_ce6c120d6e86c8eb, 0x0000108e },
		{ 0x50f5224edc2ef48c, &exec_50f5224edc2ef48c, 0x00002e79 },
		{ 0xaf97e7524d59084c, &exec_af97e7524d59084c, 0x000009bb },
		{ 0xd659912bb346ade3, &exec_d659912bb346ade3, 0x00003ef3 },
		{ 0x1922333c772bc13f, &exec_1922333c772bc13f, 0x00000000 },
		{ 0x2fccaf5b34abe4a5, &exec_2fccaf5b34abe4a5, 0x00000000 },
		{ 0x03963ab91fd65d96, &exec_03963ab91fd65d96, 0x000009d6 },
		{ 0xd3e54488c428f019, &exec_d3e54488c428f019, 0x00002a65 },
		{ 0xbdc42e89be1dc529, &exec_bdc42e89be1dc529, 0x00000e74 },
		{ 0x04d60cc2656e74ec, &exec_04d60cc2656e74ec, 0x000009db },
		{ 0x46d848a7f78c46a5, &exec_46d848a7f78c46a5, 0x000023de },
		{ 0x42813442d0dc3733, &exec_42813442d0dc3733, 0x000009de },
		{ 0x53508846a38ba606, &exec_53508846a38ba606, 0x000009e2 },
		{ 0x073422442b3a5544, &exec_073422442b3a5544, 0x000009e8 },
		{ 0xb389c50365150b64, &exec_b389c50365150b64, 0x000009ea },
		{ 0x582b981a178f2048, &exec_582b981a178f2048, 0x00000f82 },
		{ 0x06013c4129c32e84, &exec_06013c4129c32e84, 0x00001668 },
		{ 0x2a2fec96a04574c7, &exec_2a2fec96a04574c7, 0x00003008 },
		{ 0xb32f889c27535cb1, &exec_b32f889c27535cb1, 0x00000e0e },
		{ 0x0d4b705fd5bdf1f3, &exec_0d4b705fd5bdf1f3, 0x000009f1 },
		{ 0xa785b6f26eb8926f, &exec_a785b6f26eb8926f, 0x00000d15 },
		{ 0xf6300510e78b947c, &exec_f6300510e78b947c, 0x00002e97 },
		{ 0xe848d0165930132d, &exec_e848d0165930132d, 0x000009f5 },
		{ 0xdc7092163abe1939, &exec_dc7092163abe1939, 0x00000af8 },
		{ 0x7e94f55708051ca7, &exec_7e94f55708051ca7, 0x00003b74 },
		{ 0x6a9d826868ebc1af, &exec_6a9d826868ebc1af, 0x00000a01 },
		{ 0x7b07ad9f962d924c, &exec_7b07ad9f962d924c, 0x00000a06 },
		{ 0x6aa45d0d065d02cc, &exec_6aa45d0d065d02cc, 0x00003fa3 },
		{ 0xeac9128498d8a92b, &exec_eac9128498d8a92b, 0x00000a0a },
		{ 0x6a25b32eda002be1, &exec_6a25b32eda002be1, 0x00000a25 },
		{ 0x375c0a2b0ce2f2ae, &exec_375c0a2b0ce2f2ae, 0x00000a17 },
		{ 0x393608dcb8101d34, &exec_393608dcb8101d34, 0x000031f5 },
		{ 0xc04eb2790ca3681c, &exec_c04eb2790ca3681c, 0x00000a19 },
		{ 0x75319ad6a9c2344b, &exec_75319ad6a9c2344b, 0x00000a1f },
		{ 0x57d65dd999819c5f, &exec_57d65dd999819c5f, 0x00001af6 },
		{ 0xb43506f9d4e9c673, &exec_b43506f9d4e9c673, 0x00000df1 },
		{ 0x8a98cce5394d403b, &exec_8a98cce5394d403b, 0x0000140c },
		{ 0xeef5f904dd83d5cf, &exec_eef5f904dd83d5cf, 0x00004902 },
		{ 0xe4b2dbb502282fa7, &exec_e4b2dbb502282fa7, 0x000011c7 },
		{ 0x515a0c46865b55f7, &exec_515a0c46865b55f7, 0x00000b5e },
		{ 0x1fb5475bbeb88c71, &exec_1fb5475bbeb88c71, 0x00000a28 },
		{ 0xe17663203c185192, &exec_e17663203c185192, 0x00000a33 },
		{ 0x9295f058e5b8722c, &exec_9295f058e5b8722c, 0x00000dce },
		{ 0xb21713dc9d06df1f, &exec_b21713dc9d06df1f, 0x00000a44 },
		{ 0x9e0d79cc6a524d2f, &exec_9e0d79cc6a524d2f, 0x00000a48 },
		{ 0xfe49ee4a7e966476, &exec_fe49ee4a7e966476, 0x00003524 },
		{ 0xc73f7fe3f008badb, &exec_c73f7fe3f008badb, 0x00000a4b },
		{ 0xbde531833d983a25, &exec_bde531833d983a25, 0x00000a4f },
		{ 0x8cc78f3e80d732fd, &exec_8cc78f3e80d732fd, 0x00003e25 },
		{ 0xaa67b49a465870d1, &exec_aa67b49a465870d1, 0x00000c6f },
		{ 0x7e7cbd60343b2999, &exec_7e7cbd60343b2999, 0x00003ca5 },
		{ 0x5aea385605edc652, &exec_5aea385605edc652, 0x00000db3 },
		{ 0x203828c36df054cc, &exec_203828c36df054cc, 0x00003f6b },
		{ 0x4fdabce56faefd4e, &exec_4fdabce56faefd4e, 0x00000d3d },
		{ 0x0420ce75b7f9daa9, &exec_0420ce75b7f9daa9, 0x0000198f },
		{ 0xe5c3b1177dae3673, &exec_e5c3b1177dae3673, 0x00000dec },
		{ 0x72c5f87dc1f38f1a, &exec_72c5f87dc1f38f1a, 0x00000a52 },
		{ 0x1875ee2352de7c15, &exec_1875ee2352de7c15, 0x00001f45 },
		{ 0x62f6eea345fee514, &exec_62f6eea345fee514, 0x00003b01 },
		{ 0x876c287e80dbbb5a, &exec_876c287e80dbbb5a, 0x00000a5b },
		{ 0xece2af65f02af1e2, &exec_ece2af65f02af1e2, 0x000019da },
		{ 0x0163529e5ec667d0, &exec_0163529e5ec667d0, 0x00000a5f },
		{ 0xea37475b33975aef, &exec_ea37475b33975aef, 0x00004093 },
		{ 0x46204b96eb8a470a, &exec_46204b96eb8a470a, 0x00001d8c },
		{ 0xef492405199e6e0f, &exec_ef492405199e6e0f, 0x00000c96 },
		{ 0x4af329a462642f80, &exec_4af329a462642f80, 0x00000a66 },
		{ 0x5c1735b3fafc5f96, &exec_5c1735b3fafc5f96, 0x00000d50 },
		{ 0xb62be08c0e127c65, &exec_b62be08c0e127c65, 0x000032ef },
		{ 0x9b7696ea972cdce1, &exec_9b7696ea972cdce1, 0x00000a6d },
		{ 0x0de341b05e64757f, &exec_0de341b05e64757f, 0x0000172f },
		{ 0x91313a7ffbb9f828, &exec_91313a7ffbb9f828, 0x00003d72 },
		{ 0x8018648b575de573, &exec_8018648b575de573, 0x00000a75 },
		{ 0x1e30753bcbebe9b4, &exec_1e30753bcbebe9b4, 0x000019ab },
		{ 0x10b9f8aee1f69f74, &exec_10b9f8aee1f69f74, 0x00000a79 },
		{ 0x66843e365c90de1d, &exec_66843e365c90de1d, 0x00000a7c },
		{ 0x9191322af8157b40, &exec_9191322af8157b40, 0x00000e89 },
		{ 0xb89288aca6e8ae43, &exec_b89288aca6e8ae43, 0x00000a86 },
		{ 0x8a431dba536b2970, &exec_8a431dba536b2970, 0x00002b3b },
		{ 0xe616b676ccb1c385, &exec_e616b676ccb1c385, 0x000010b8 },
		{ 0x450fe64205f6c1e7, &exec_450fe64205f6c1e7, 0x000041f6 },
		{ 0xce9de12da3b2ab4e, &exec_ce9de12da3b2ab4e, 0x00000d20 },
		{ 0xc97d831e99e0d1e4, &exec_c97d831e99e0d1e4, 0x000033f6 },
		{ 0x11d91df2d548a926, &exec_11d91df2d548a926, 0x000018e2 },
		{ 0x9f90cac0c73f991f, &exec_9f90cac0c73f991f, 0x00000a89 },
		{ 0x33e3e18c676a4dd9, &exec_33e3e18c676a4dd9, 0x0000340b },
		{ 0x21cedf1c7bbe6a75, &exec_21cedf1c7bbe6a75, 0x00000cb6 },
		{ 0xf0e2cf4d8684541c, &exec_f0e2cf4d8684541c, 0x00000e7b },
		{ 0x780c914cf3bd7c87, &exec_780c914cf3bd7c87, 0x00003399 },
		{ 0xa46e39a33330042f, &exec_a46e39a33330042f, 0x00000a93 },
		{ 0x25ae42a135482d81, &exec_25ae42a135482d81, 0x000025ba },
		{ 0x51b9064b787bba65, &exec_51b9064b787bba65, 0x00003991 },
		{ 0x50ad54ee8bffa651, &exec_50ad54ee8bffa651, 0x00000a96 },
		{ 0x07bee1f0c397c2ce, &exec_07bee1f0c397c2ce, 0x000011ec },
		{ 0x6e5aec7e0fc2ae8d, &exec_6e5aec7e0fc2ae8d, 0x00000a9f },
		{ 0xa120316ce570a678, &exec_a120316ce570a678, 0x00001dc7 },
		{ 0x6ffe8dc05022c815, &exec_6ffe8dc05022c815, 0x000017b6 },
		{ 0x9e86e0c51f5140b2, &exec_9e86e0c51f5140b2, 0x00004247 },
		{ 0xd79a14bcef706788, &exec_d79a14bcef706788, 0x00000000 },
		{ 0x5d8aa8c14631079d, &exec_5d8aa8c14631079d, 0x00000aa3 },
		{ 0x37df550ee95b22ab, &exec_37df550ee95b22ab, 0x00001ceb },
		{ 0xd7afaecaabe85e97, &exec_d7afaecaabe85e97, 0x000017c6 },
		{ 0x5d644e3de49db548, &exec_5d644e3de49db548, 0x00000aa7 },
		{ 0xc982f34107823c2c, &exec_c982f34107823c2c, 0x00001df7 },
		{ 0x24a0f4383e315a57, &exec_24a0f4383e315a57, 0x00000bc5 },
		{ 0x7a6a23f2d809343b, &exec_7a6a23f2d809343b, 0x000010ce },
		{ 0x7aed61f84e200bde, &exec_7aed61f84e200bde, 0x00000aac },
		{ 0xd11bc4b8429208be, &exec_d11bc4b8429208be, 0x00000ab1 },
		{ 0x978f5c2b272ffe7c, &exec_978f5c2b272ffe7c, 0x00000ab5 },
		{ 0xcbedeec52b85e44c, &exec_cbedeec52b85e44c, 0x00000000 },
		{ 0x4f0d132a1682d711, &exec_4f0d132a1682d711, 0x00002434 },
		{ 0x9d3db6527b1e5fb0, &exec_9d3db6527b1e5fb0, 0x00002cfa },
		{ 0xa5b706e560793b1f, &exec_a5b706e560793b1f, 0x00000ac6 },
		{ 0x8a2e528f5f952dc6, &exec_8a2e528f5f952dc6, 0x00001578 },
		{ 0x48dee7805382329a, &exec_48dee7805382329a, 0x00001e01 },
		{ 0x0504023546b15a40, &exec_0504023546b15a40, 0x00000acf },
		{ 0x4f0523a61c71ed49, &exec_4f0523a61c71ed49, 0x000018c6 },
		{ 0x55e78c4a751b4c5a, &exec_55e78c4a751b4c5a, 0x00000ad4 },
		{ 0x1bf536a43e2a86c4, &exec_1bf536a43e2a86c4, 0x0000433d },
		{ 0x222b0ca11221b31a, &exec_222b0ca11221b31a, 0x00000ad8 },
		{ 0x80ec534a8e2f34e3, &exec_80ec534a8e2f34e3, 0x00000adf },
		{ 0xbb0705d760f1e0fb, &exec_bb0705d760f1e0fb, 0x000028b9 },
		{ 0x9c93a1dbad645098, &exec_9c93a1dbad645098, 0x000022ea },
		{ 0xf208f899a0c5f1a6, &exec_f208f899a0c5f1a6, 0x00004577 },
		{ 0x38254f41c36181a5, &exec_38254f41c36181a5, 0x00001425 },
		{ 0x6a254f83ebe7359c, &exec_6a254f83ebe7359c, 0x00000ae3 },
		{ 0x764673d833e55eda, &exec_764673d833e55eda, 0x00002001 },
		{ 0xd4bbe1f505cc778c, &exec_d4bbe1f505cc778c, 0x00002d40 },
		{ 0x1e99bb14ecac1b69, &exec_1e99bb14ecac1b69, 0x00000eb5 },
		{ 0xbb9be0e0254908ce, &exec_bb9be0e0254908ce, 0x00000af3 },
		{ 0x9c62cd0f76d3ca7c, &exec_9c62cd0f76d3ca7c, 0x00000b04 },
		{ 0x4d4039edf1453d27, &exec_4d4039edf1453d27, 0x000041c4 },
		{ 0xae977993bbed8098, &exec_ae977993bbed8098, 0x00000b09 },
		{ 0xf0031786c1cdf83a, &exec_f0031786c1cdf83a, 0x00000000 },
		{ 0x3d9ad65356b81e95, &exec_3d9ad65356b81e95, 0x000012ac },
		{ 0xf2038b8ba916a5cc, &exec_f2038b8ba916a5cc, 0x00001b2e },
		{ 0xf46ca2b0f051c729, &exec_f46ca2b0f051c729, 0x00003633 },
		{ 0x3728305412bc10cb, &exec_3728305412bc10cb, 0x00000b0d },
		{ 0x0daf5c14268cb894, &exec_0daf5c14268cb894, 0x00000b11 },
		{ 0xb1224fff528927db, &exec_b1224fff528927db, 0x00001043 },
		{ 0x3c27849a83ad2a49, &exec_3c27849a83ad2a49, 0x00000d31 },
		{ 0x1630f4ec42c62e9c, &exec_1630f4ec42c62e9c, 0x00000ef3 },
		{ 0x21ad0e91de965603, &exec_21ad0e91de965603, 0x00000b1b },
		{ 0x38e2e24098ca6f47, &exec_38e2e24098ca6f47, 0x00000f48 },
		{ 0x635dfd8b7f2cbf11, &exec_635dfd8b7f2cbf11, 0x00002b6c },
		{ 0x49fad1f5a9321930, &exec_49fad1f5a9321930, 0x00001159 },
		{ 0x654d7fce2c7147a8, &exec_654d7fce2c7147a8, 0x00002aad },
		{ 0x43aac5bb555302ac, &exec_43aac5bb555302ac, 0x000016b9 },
		{ 0x7a33b6bcab907feb, &exec_7a33b6bcab907feb, 0x00000b1e },
		{ 0x38dcab5c37d41e03, &exec_38dcab5c37d41e03, 0x00000b26 },
		{ 0x9f109317563b6683, &exec_9f109317563b6683, 0x00000b2a },
		{ 0x9a96355f096e16a1, &exec_9a96355f096e16a1, 0x00000f4d },
		{ 0xcd0152bd67817803, &exec_cd0152bd67817803, 0x00000b2e },
		{ 0xfa1ef9dbb08406d3, &exec_fa1ef9dbb08406d3, 0x000020ea },
		{ 0x2c33d03615673cec, &exec_2c33d03615673cec, 0x0000240c },
		{ 0xc3f7194adf487ec6, &exec_c3f7194adf487ec6, 0x00000de7 },
		{ 0xc819fe034c08fe98, &exec_c819fe034c08fe98, 0x00000b97 },
		{ 0x93aa66c6d6f2dc0d, &exec_93aa66c6d6f2dc0d, 0x00000b36 },
		{ 0xefb6ed2ed64b04c8, &exec_efb6ed2ed64b04c8, 0x00002c05 },
		{ 0x5bd9be3b3b504a89, &exec_5bd9be3b3b504a89, 0x00000b3f },
		{ 0x3960952232f372e8, &exec_3960952232f372e8, 0x0000152d },
		{ 0x7e49e6af6ab6003b, &exec_7e49e6af6ab6003b, 0x00000b42 },
		{ 0xc88753c6afc8725a, &exec_c88753c6afc8725a, 0x00001266 },
		{ 0x1a66128541e7afdb, &exec_1a66128541e7afdb, 0x00001bb3 },
		{ 0x5d6c6171ead74fde, &exec_5d6c6171ead74fde, 0x00004415 },
		{ 0x6865780a16dbc809, &exec_6865780a16dbc809, 0x00000b45 },
		{ 0x061b8fe2e52f51f7, &exec_061b8fe2e52f51f7, 0x00002a60 },
		{ 0x3582e002e54d9f16, &exec_3582e002e54d9f16, 0x00000b49 },
		{ 0xfd8fbcbca6c0b515, &exec_fd8fbcbca6c0b515, 0x00002b54 },
		{ 0xfd9398eb514bfe85, &exec_fd9398eb514bfe85, 0x000028f9 },
		{ 0xed31cd9437b67c8e, &exec_ed31cd9437b67c8e, 0x00000b4d },
		{ 0xb6674e96c2d2bd39, &exec_b6674e96c2d2bd39, 0x00000b4f },
		{ 0xde7639b5c3ab3a09, &exec_de7639b5c3ab3a09, 0x00000b51 },
		{ 0x48c78d2605b06f46, &exec_48c78d2605b06f46, 0x0000287d },
		{ 0xce03ca22c182c6c8, &exec_ce03ca22c182c6c8, 0x00000b55 },
		{ 0x54d7705671f00805, &exec_54d7705671f00805, 0x00000c53 },
		{ 0xe5c8fc8f8e80d889, &exec_e5c8fc8f8e80d889, 0x00000b59 },
		{ 0xb8be0d3721b42164, &exec_b8be0d3721b42164, 0x00000b61 },
		{ 0x39385621be257b0e, &exec_39385621be257b0e, 0x00002f16 },
		{ 0x29bf35bdd89d539a, &exec_29bf35bdd89d539a, 0x00000b68 },
		{ 0xbae5c134685feeb7, &exec_bae5c134685feeb7, 0x00000b6f },
		{ 0x75b2053787987196, &exec_75b2053787987196, 0x00001356 },
		{ 0x1df2e107224efc78, &exec_1df2e107224efc78, 0x00000b76 },
		{ 0x75a00864e7609a1a, &exec_75a00864e7609a1a, 0x000041aa },
		{ 0xa11963eaee4ab9d0, &exec_a11963eaee4ab9d0, 0x00003c46 },
		{ 0x70304f5a9c755430, &exec_70304f5a9c755430, 0x00000b81 },
		{ 0xffb1b3f02b552677, &exec_ffb1b3f02b552677, 0x00003c9e },
		{ 0x6d406dbe0d7c3fe9, &exec_6d406dbe0d7c3fe9, 0x00001672 },
		{ 0xd858d3a4bf86a3ee, &exec_d858d3a4bf86a3ee, 0x00000b8a },
		{ 0xbafe5ad8ce5d2f15, &exec_bafe5ad8ce5d2f15, 0x00000b95 },
		{ 0x89b1aa2cb635bdea, &exec_89b1aa2cb635bdea, 0x00000b99 },
		{ 0x19618b983e2159c9, &exec_19618b983e2159c9, 0x000023bd },
		{ 0x0d50616bea6be444, &exec_0d50616bea6be444, 0x0000452d },
		{ 0x886497b145d64776, &exec_886497b145d64776, 0x00004703 },
		{ 0xf3ed1d8a6088458c, &exec_f3ed1d8a6088458c, 0x0000247d },
		{ 0x3f4c955295717338, &exec_3f4c955295717338, 0x00004916 },
		{ 0xc29481cba0aa78cb, &exec_c29481cba0aa78cb, 0x00000ba3 },
		{ 0x10661940e4be4a74, &exec_10661940e4be4a74, 0x000027de },
		{ 0xad321305d0413956, &exec_ad321305d0413956, 0x00000baa },
		{ 0x42271fe3ff40612e, &exec_42271fe3ff40612e, 0x00001401 },
		{ 0x21bb622b7a6cbcae, &exec_21bb622b7a6cbcae, 0x000011f2 },
		{ 0x4b4323d9ca595e06, &exec_4b4323d9ca595e06, 0x00000bb2 },
		{ 0x4607a6b8454f857d, &exec_4607a6b8454f857d, 0x00002731 },
		{ 0xbe199fe74c235389, &exec_be199fe74c235389, 0x00000bbe },
		{ 0xd0cd8cdf229bedca, &exec_d0cd8cdf229bedca, 0x00000bc0 },
		{ 0xe555b908eea5c63e, &exec_e555b908eea5c63e, 0x00000dc5 },
		{ 0x9c95ef52c8a5580d, &exec_9c95ef52c8a5580d, 0x00002ba7 },
		{ 0xfc488589fb756721, &exec_fc488589fb756721, 0x00003a25 },
		{ 0xe46c4580d7852b8a, &exec_e46c4580d7852b8a, 0x000038c7 },
		{ 0x9876308451c65148, &exec_9876308451c65148, 0x000021c2 },
		{ 0x095d81bee7659fd7, &exec_095d81bee7659fd7, 0x00004219 },
		{ 0xf833778f42eb1637, &exec_f833778f42eb1637, 0x0000166e },
		{ 0xc259dd2346485a3e, &exec_c259dd2346485a3e, 0x00000bca },
		{ 0xd9260d0e3c22c19b, &exec_d9260d0e3c22c19b, 0x00000bce },
		{ 0x3e9cf2513371f1d6, &exec_3e9cf2513371f1d6, 0x00000bd2 },
		{ 0x67e14563c3743519, &exec_67e14563c3743519, 0x00002039 },
		{ 0x94681a5f92286858, &exec_94681a5f92286858, 0x00000be0 },
		{ 0x6d0b626a76917e7b, &exec_6d0b626a76917e7b, 0x000029d6 },
		{ 0x251793c1f1082c99, &exec_251793c1f1082c99, 0x00000be4 },
		{ 0xa9222dfd6335f887, &exec_a9222dfd6335f887, 0x00000fcb },
		{ 0xa983e8a9c4144ee7, &exec_a983e8a9c4144ee7, 0x000014f5 },
		{ 0xe3dbb089316a72c7, &exec_e3dbb089316a72c7, 0x00000be8 },
		{ 0x82b24c9ce3143f95, &exec_82b24c9ce3143f95, 0x00001162 },
		{ 0x0e7332b3f58c5ea1, &exec_0e7332b3f58c5ea1, 0x00000bed },
		{ 0x3e05f89fafd7cdfc, &exec_3e05f89fafd7cdfc, 0x00000bf0 },
		{ 0xe8efea9ab47396d6, &exec_e8efea9ab47396d6, 0x00000cf1 },
		{ 0xcffee445ba312730, &exec_cffee445ba312730, 0x00000bf4 },
		{ 0x1ac5a4a457fab08b, &exec_1ac5a4a457fab08b, 0x00001c68 },
		{ 0x1861bb8f23f6c2a3, &exec_1861bb8f23f6c2a3, 0x000018b0 },
		{ 0x04e54196d2a681bf, &exec_04e54196d2a681bf, 0x00000bf7 },
		{ 0x2724b8882fbea139, &exec_2724b8882fbea139, 0x000013c6 },
		{ 0x0f0f4e418b573bd4, &exec_0f0f4e418b573bd4, 0x00003dad },
		{ 0xd9ca5dd81605fee5, &exec_d9ca5dd81605fee5, 0x00000bf9 },
		{ 0xe8c63db9aa13ffb2, &exec_e8c63db9aa13ffb2, 0x0000153e },
		{ 0x0a8a259338c8e679, &exec_0a8a259338c8e679, 0x00000dd7 },
		{ 0x1f456c547b6474ce, &exec_1f456c547b6474ce, 0x00000c07 },
		{ 0xa439579bde72bdc7, &exec_a439579bde72bdc7, 0x00001e55 },
		{ 0x7a667342d28e8b25, &exec_7a667342d28e8b25, 0x00001676 },
		{ 0x41b0eafc60b46c4d, &exec_41b0eafc60b46c4d, 0x00000fd4 },
		{ 0x87a4c8ce0415e10c, &exec_87a4c8ce0415e10c, 0x00000c14 },
		{ 0xbddd2efe07103224, &exec_bddd2efe07103224, 0x00003b40 },
		{ 0x58c3fd895ecd600f, &exec_58c3fd895ecd600f, 0x0000189f },
		{ 0x2bb808b20308dddc, &exec_2bb808b20308dddc, 0x00000cf4 },
		{ 0xc4617779b126cbb8, &exec_c4617779b126cbb8, 0x00000c18 },
		{ 0x13e7a9843114d6dd, &exec_13e7a9843114d6dd, 0x00000f9b },
		{ 0x5dc61baf3d144adb, &exec_5dc61baf3d144adb, 0x00001e75 },
		{ 0xe932265bd4443401, &exec_e932265bd4443401, 0x00000c1d },
		{ 0xffa69e0cd41859b2, &exec_ffa69e0cd41859b2, 0x000047de },
		{ 0x669f6e365ca7f765, &exec_669f6e365ca7f765, 0x00001105 },
		{ 0xd51847165035379e, &exec_d51847165035379e, 0x00000c2b },
		{ 0x4b230d7bb09eb64d, &exec_4b230d7bb09eb64d, 0x00000c33 },
		{ 0xd5e6ebc9a5421c80, &exec_d5e6ebc9a5421c80, 0x00000c35 },
		{ 0x798c5f56221a677d, &exec_798c5f56221a677d, 0x00001b93 },
		{ 0xf84d801d39fcc6f5, &exec_f84d801d39fcc6f5, 0x00001a6a },
		{ 0x4cf1d9c75af8d363, &exec_4cf1d9c75af8d363, 0x00000c3c },
		{ 0x2fade4ed40e1678c, &exec_2fade4ed40e1678c, 0x00002549 },
		{ 0x22c23415a153167d, &exec_22c23415a153167d, 0x00000c44 },
		{ 0x1cbc4017963950f8, &exec_1cbc4017963950f8, 0x00002832 },
		{ 0xc560bad482da9a6f, &exec_c560bad482da9a6f, 0x00000c48 },
		{ 0xdb954f0e7db94c34, &exec_db954f0e7db94c34, 0x00000c50 },
		{ 0xdde72f05571d0bb3, &exec_dde72f05571d0bb3, 0x00001292 },
		{ 0xaa384d11d75ef506, &exec_aa384d11d75ef506, 0x000011c9 },
		{ 0x59e07d3fe65a1451, &exec_59e07d3fe65a1451, 0x00000c57 },
		{ 0xee3c9a8f4d19e054, &exec_ee3c9a8f4d19e054, 0x00000c59 },
		{ 0xab99a0124acc9238, &exec_ab99a0124acc9238, 0x00000c5c },
		{ 0x4d1eefb66e30261a, &exec_4d1eefb66e30261a, 0x00000c5e },
		{ 0x2f3c2ea15534c421, &exec_2f3c2ea15534c421, 0x00002326 },
		{ 0xd8eb9862db0faf02, &exec_d8eb9862db0faf02, 0x0000211b },
		{ 0xf8430d38f189b9df, &exec_f8430d38f189b9df, 0x00000c62 },
		{ 0x567203d60802c7db, &exec_567203d60802c7db, 0x0000179d },
		{ 0x18900cf7f5fd61d4, &exec_18900cf7f5fd61d4, 0x000011db },
		{ 0x980a05cda1b7769b, &exec_980a05cda1b7769b, 0x00000c7d },
		{ 0xba5495a945bb7cbd, &exec_ba5495a945bb7cbd, 0x00002877 },
		{ 0x5bf7cab719cd3771, &exec_5bf7cab719cd3771, 0x00003362 },
		{ 0xd488466009cc8cc4, &exec_d488466009cc8cc4, 0x00001064 },
		{ 0xa0af8e0bf0d613fb, &exec_a0af8e0bf0d613fb, 0x00000c80 },
		{ 0x10fdf3aa55d3b05d, &exec_10fdf3aa55d3b05d, 0x00000c85 },
		{ 0x61846a9449205b6e, &exec_61846a9449205b6e, 0x00000c8a },
		{ 0xb940b524057ff819, &exec_b940b524057ff819, 0x000047f9 },
		{ 0x3a1c7f9459128a19, &exec_3a1c7f9459128a19, 0x00000c8f },
		{ 0x079c64efb01f590c, &exec_079c64efb01f590c, 0x00001eff },
		{ 0x9cb0952383c14a42, &exec_9cb0952383c14a42, 0x00000c92 },
		{ 0xfb9fab2f96a2c648, &exec_fb9fab2f96a2c648, 0x00000c99 },
		{ 0x27c6b5c0620603f4, &exec_27c6b5c0620603f4, 0x00001b53 },
		{ 0x18869cec8a1400ec, &exec_18869cec8a1400ec, 0x00000fce },
		{ 0x5cc972d4be6d1e8a, &exec_5cc972d4be6d1e8a, 0x00000ca0 },
		{ 0x02b36e45d666a2f7, &exec_02b36e45d666a2f7, 0x0000434a },
		{ 0x8f2b5b5c730420a1, &exec_8f2b5b5c730420a1, 0x00002461 },
		{ 0xc30b1759099cf314, &exec_c30b1759099cf314, 0x00000cb0 },
		{ 0x88ef11d2a5ee7e90, &exec_88ef11d2a5ee7e90, 0x00003de1 },
		{ 0x23dcf886ba2f872f, &exec_23dcf886ba2f872f, 0x00000cc4 },
		{ 0x6738f7823a4e8803, &exec_6738f7823a4e8803, 0x00000cc8 },
		{ 0xd1145a2104e1d854, &exec_d1145a2104e1d854, 0x00000000 },
		{ 0x371e8e932c140731, &exec_371e8e932c140731, 0x00000ccc },
		{ 0x1fe18fdba16b2fdc, &exec_1fe18fdba16b2fdc, 0x00003e35 },
		{ 0x2d5a84e831f1bec2, &exec_2d5a84e831f1bec2, 0x00000cd1 },
		{ 0xb05d24432e129da6, &exec_b05d24432e129da6, 0x00002b86 },
		{ 0x6a6a278fc7fee415, &exec_6a6a278fc7fee415, 0x00000cd7 },
		{ 0x41e39d6933bf97f5, &exec_41e39d6933bf97f5, 0x00000e47 },
		{ 0xea088977f4f989a5, &exec_ea088977f4f989a5, 0x00000ce4 },
		{ 0x47c0208096b73560, &exec_47c0208096b73560, 0x000032c3 },
		{ 0xf452051791241ded, &exec_f452051791241ded, 0x00000cf9 },
		{ 0x91b08e3b1117f69a, &exec_91b08e3b1117f69a, 0x00000cfc },
		{ 0x1ec28314eccec155, &exec_1ec28314eccec155, 0x00000cff },
		{ 0x64d2a53dc900ef22, &exec_64d2a53dc900ef22, 0x00000d02 },
		{ 0x5cb996db005bdca2, &exec_5cb996db005bdca2, 0x0000253d },
		{ 0x1a85705654638c59, &exec_1a85705654638c59, 0x00000d06 },
		{ 0xcdcb54eaa0a71fe0, &exec_cdcb54eaa0a71fe0, 0x00000d10 },
		{ 0xf24a345acdbb1c72, &exec_f24a345acdbb1c72, 0x00000d1a },
		{ 0xc43da47a9486486a, &exec_c43da47a9486486a, 0x00001328 },
		{ 0x3b8704722871bba7, &exec_3b8704722871bba7, 0x00000d25 },
		{ 0x2c8ff05175bc6a40, &exec_2c8ff05175bc6a40, 0x00000d28 },
		{ 0x027bf4e3c1be5fe6, &exec_027bf4e3c1be5fe6, 0x0000254e },
		{ 0xa5acabfbf6cd950a, &exec_a5acabfbf6cd950a, 0x00000d2c },
		{ 0x32d88dee7848fd42, &exec_32d88dee7848fd42, 0x00000d35 },
		{ 0x58470c7046774381, &exec_58470c7046774381, 0x00000ed9 },
		{ 0xa3d2c5c005e0b607, &exec_a3d2c5c005e0b607, 0x00000d41 },
		{ 0x4740af6ee9fdf341, &exec_4740af6ee9fdf341, 0x00001091 },
		{ 0xd07f2ec5eee73bcf, &exec_d07f2ec5eee73bcf, 0x00002c65 },
		{ 0x8e934648a97befed, &exec_8e934648a97befed, 0x00001948 },
		{ 0xabc9651f898bd0cf, &exec_abc9651f898bd0cf, 0x00002ab7 },
		{ 0x9549eefe64fc443e, &exec_9549eefe64fc443e, 0x00000d44 },
		{ 0x578f5123fb86a16d, &exec_578f5123fb86a16d, 0x000027a0 },
		{ 0xcee5dc77d1a83abe, &exec_cee5dc77d1a83abe, 0x00000d48 },
		{ 0x5061f7f28dc45816, &exec_5061f7f28dc45816, 0x00001a4f },
		{ 0x2a39ca6fe850e585, &exec_2a39ca6fe850e585, 0x00003e85 },
		{ 0xe05a7328bda3f594, &exec_e05a7328bda3f594, 0x00002a93 },
		{ 0x5586d8746ea253f8, &exec_5586d8746ea253f8, 0x00000d54 },
		{ 0xb6860249e69ece33, &exec_b6860249e69ece33, 0x00000d5b },
		{ 0xd48642f38933211b, &exec_d48642f38933211b, 0x00001a02 },
		{ 0x239a8c8538ded978, &exec_239a8c8538ded978, 0x00000d57 },
		{ 0x349cf5d5430d603c, &exec_349cf5d5430d603c, 0x00001314 },
		{ 0x8ad5d32f31ef360b, &exec_8ad5d32f31ef360b, 0x00000d65 },
		{ 0xdec09529d80628b3, &exec_dec09529d80628b3, 0x000033fc },
		{ 0x2a0b52173a809f72, &exec_2a0b52173a809f72, 0x00002396 },
		{ 0xd17010ffa64c853c, &exec_d17010ffa64c853c, 0x00003473 },
		{ 0x2f5888526b260877, &exec_2f5888526b260877, 0x00000d6f },
		{ 0x3d530525300dc184, &exec_3d530525300dc184, 0x00000000 },
		{ 0xc8a1c201285ae015, &exec_c8a1c201285ae015, 0x00000d78 },
		{ 0xe625806a88d8ab10, &exec_e625806a88d8ab10, 0x00000d82 },
		{ 0xc6a14b81be6c0758, &exec_c6a14b81be6c0758, 0x00000d87 },
		{ 0x1abe3934c346ea56, &exec_1abe3934c346ea56, 0x00004193 },
		{ 0x7104b3d33c73b26c, &exec_7104b3d33c73b26c, 0x0000216a },
		{ 0x558089350af428ff, &exec_558089350af428ff, 0x00000d8e },
		{ 0x08667eab5888083c, &exec_08667eab5888083c, 0x00000d99 },
		{ 0xde935cc4c203aef8, &exec_de935cc4c203aef8, 0x00000d9b },
		{ 0xbabececcfd584bcc, &exec_babececcfd584bcc, 0x00000d9e },
		{ 0x7caf3de937bedd75, &exec_7caf3de937bedd75, 0x00001041 },
		{ 0xfd7dceb679f83763, &exec_fd7dceb679f83763, 0x00000dae },
		{ 0x44e098925466399b, &exec_44e098925466399b, 0x000047cb },
		{ 0x33c97e4cbd944b45, &exec_33c97e4cbd944b45, 0x00001d06 },
		{ 0xbea4c134e038a79d, &exec_bea4c134e038a79d, 0x00000dbf },
		{ 0xb3547eb682133b16, &exec_b3547eb682133b16, 0x000021f6 },
		{ 0x03a7da84a03852dc, &exec_03a7da84a03852dc, 0x00000e36 },
		{ 0x97b21a57a0730e8b, &exec_97b21a57a0730e8b, 0x00000dca },
		{ 0x2ea76f54ec44647d, &exec_2ea76f54ec44647d, 0x00001848 },
		{ 0xa1c02bf830fe150e, &exec_a1c02bf830fe150e, 0x00000dda },
		{ 0xd0135c39549d2202, &exec_d0135c39549d2202, 0x00002e1b },
		{ 0xd5aa90f5be1c5401, &exec_d5aa90f5be1c5401, 0x00000edd },
		{ 0x0abeeb6838dc1cfa, &exec_0abeeb6838dc1cfa, 0x00000dde },
		{ 0x2086632d4aa5477c, &exec_2086632d4aa5477c, 0x00000de4 },
		{ 0x5e2d189c9e5381ad, &exec_5e2d189c9e5381ad, 0x000019f4 },
		{ 0xf8d9f52e2f42e219, &exec_f8d9f52e2f42e219, 0x000035af },
		{ 0xb72933b81b151f7f, &exec_b72933b81b151f7f, 0x0000104b },
		{ 0x2288c4fe6dc33cbe, &exec_2288c4fe6dc33cbe, 0x00000e05 },
		{ 0x9dc01024b2ff4210, &exec_9dc01024b2ff4210, 0x00001cad },
		{ 0x6a336e86cbe332ff, &exec_6a336e86cbe332ff, 0x00003ec7 },
		{ 0xb2572541e9000d97, &exec_b2572541e9000d97, 0x00000e0a },
		{ 0xdc5897cbe78c334d, &exec_dc5897cbe78c334d, 0x000015d7 },
		{ 0xeb0979a5e113210a, &exec_eb0979a5e113210a, 0x00003299 },
		{ 0xf6b267962e7fbaf7, &exec_f6b267962e7fbaf7, 0x000016c6 },
		{ 0x4290f142c48abc40, &exec_4290f142c48abc40, 0x00000e19 },
		{ 0xed93d3e0141a64b0, &exec_ed93d3e0141a64b0, 0x00000e1c },
		{ 0xf9d1d842b469f188, &exec_f9d1d842b469f188, 0x00000e1f },
		{ 0xedaf03e014317df8, &exec_edaf03e014317df8, 0x00000e2d },
		{ 0x68e9ddc26b9ecfea, &exec_68e9ddc26b9ecfea, 0x00003a0f },
		{ 0x4d92a2ac10fb465b, &exec_4d92a2ac10fb465b, 0x000038b7 },
		{ 0xfcbc56336f353ffd, &exec_fcbc56336f353ffd, 0x00000e40 },
		{ 0x2f135a6b8b4974ed, &exec_2f135a6b8b4974ed, 0x00004069 },
		{ 0x8bc77e5b87f5f233, &exec_8bc77e5b87f5f233, 0x000010a1 },
		{ 0xf00371b3d9b36e85, &exec_f00371b3d9b36e85, 0x0000300c },
		{ 0xf53199900f0d2ae8, &exec_f53199900f0d2ae8, 0x00000e4b },
		{ 0x4e175edbb9e27c61, &exec_4e175edbb9e27c61, 0x00000ea2 },
		{ 0x701884f671ac265f, &exec_701884f671ac265f, 0x00000e52 },
		{ 0x8768b5c76aae673f, &exec_8768b5c76aae673f, 0x0000364c },
		{ 0x97250716f3059dc9, &exec_97250716f3059dc9, 0x00000e56 },
		{ 0x9329230640bbe8ce, &exec_9329230640bbe8ce, 0x00000e5b },
		{ 0x1ac42fa1167bf4ba, &exec_1ac42fa1167bf4ba, 0x000028ea },
		{ 0x43c58b6db7ff2deb, &exec_43c58b6db7ff2deb, 0x000017f0 },
		{ 0xddabada7912cdf6e, &exec_ddabada7912cdf6e, 0x00000e6f },
		{ 0x97e82108de3b4487, &exec_97e82108de3b4487, 0x00002111 },
		{ 0x2e1cd7536c5ce194, &exec_2e1cd7536c5ce194, 0x0000143d },
		{ 0x65f4c7214e6335bc, &exec_65f4c7214e6335bc, 0x00000e81 },
		{ 0xfe107cf827b63935, &exec_fe107cf827b63935, 0x00001a44 },
		{ 0x16cb92076ba07d80, &exec_16cb92076ba07d80, 0x000016f9 },
		{ 0x8195bb2470133d35, &exec_8195bb2470133d35, 0x000018bf },
		{ 0x47534daef89f2515, &exec_47534daef89f2515, 0x000021b7 },
		{ 0xda2d75d3033e921b, &exec_da2d75d3033e921b, 0x00000e8e },
		{ 0x4dd32dfd2a94b25d, &exec_4dd32dfd2a94b25d, 0x00000e93 },
		{ 0xbc0076d6ab170256, &exec_bc0076d6ab170256, 0x0000184e },
		{ 0x009857eb102d4130, &exec_009857eb102d4130, 0x000010c0 },
		{ 0x0d02bc0c96650764, &exec_0d02bc0c96650764, 0x00000e9d },
		{ 0x5afb26d666e66c8d, &exec_5afb26d666e66c8d, 0x000045ed },
		{ 0x0298284a10954c99, &exec_0298284a10954c99, 0x00003157 },
		{ 0xfdeea50eaab74165, &exec_fdeea50eaab74165, 0x00001d13 },
		{ 0x09b3c90e56c7d786, &exec_09b3c90e56c7d786, 0x00000eb8 },
		{ 0x676027f2da5495a9, &exec_676027f2da5495a9, 0x00004404 },
		{ 0xbbb8e843eec8c2c2, &exec_bbb8e843eec8c2c2, 0x00000fa0 },
		{ 0x8491d02c5ce88c8d, &exec_8491d02c5ce88c8d, 0x00000ec3 },
		{ 0x4781b1465f3d08b1, &exec_4781b1465f3d08b1, 0x00000ec7 },
		{ 0xc3fa61e3ca418828, &exec_c3fa61e3ca418828, 0x00000ecb },
		{ 0xa13e3ddf809ade78, &exec_a13e3ddf809ade78, 0x0000404c },
		{ 0x4b98d69a7852bce6, &exec_4b98d69a7852bce6, 0x00000ece },
		{ 0xd40026b6b850aa49, &exec_d40026b6b850aa49, 0x00000ed5 },
		{ 0x27e91e6a4cd62342, &exec_27e91e6a4cd62342, 0x00000ee2 },
		{ 0x00def2346dcc079b, &exec_00def2346dcc079b, 0x0000100e },
		{ 0xbff2d1cc7a57622e, &exec_bff2d1cc7a57622e, 0x00000eeb },
		{ 0x5bee411891e30814, &exec_5bee411891e30814, 0x00004374 },
		{ 0xac2511f987d42896, &exec_ac2511f987d42896, 0x00000eef },
		{ 0x6a799de11d6759b2, &exec_6a799de11d6759b2, 0x000038fd },
		{ 0xd9fc30ad7a94c8b8, &exec_d9fc30ad7a94c8b8, 0x000027a7 },
		{ 0xaf9b685b148f4b92, &exec_af9b685b148f4b92, 0x000045e7 },
		{ 0x8c23f88a533e38e0, &exec_8c23f88a533e38e0, 0x00002870 },
		{ 0xff82049178722af5, &exec_ff82049178722af5, 0x00001efc },
		{ 0x66659d0c19b997e4, &exec_66659d0c19b997e4, 0x00000efc },
		{ 0xfa244779a4fb2e3d, &exec_fa244779a4fb2e3d, 0x0000217b },
		{ 0x706b08498e88e9a3, &exec_706b08498e88e9a3, 0x00002d50 },
		{ 0x84ea6a4a040b03c8, &exec_84ea6a4a040b03c8, 0x00000f08 },
		{ 0x850a42c30c8976df, &exec_850a42c30c8976df, 0x00000f1a },
		{ 0xb9a3fbdb534555d0, &exec_b9a3fbdb534555d0, 0x00000f1d },
		{ 0x038ebb467c847b5c, &exec_038ebb467c847b5c, 0x00001031 },
		{ 0x04544f99456c53aa, &exec_04544f99456c53aa, 0x00000f21 },
		{ 0x1877b07289e9af16, &exec_1877b07289e9af16, 0x0000427b },
		{ 0x1c01ed9d7efb8eb5, &exec_1c01ed9d7efb8eb5, 0x00000f3d },
		{ 0x242ac41ee618045c, &exec_242ac41ee618045c, 0x00003d8f },
		{ 0xefc56b90827f247e, &exec_efc56b90827f247e, 0x00001e21 },
		{ 0x7ce5fe8519ca84e5, &exec_7ce5fe8519ca84e5, 0x00000f42 },
		{ 0x67aab013fcbe9ee9, &exec_67aab013fcbe9ee9, 0x00000f44 },
		{ 0xaedb0010791b9363, &exec_aedb0010791b9363, 0x0000149b },
		{ 0xe711987897fa641c, &exec_e711987897fa641c, 0x000047c7 },
		{ 0x52c63d0115f7bec7, &exec_52c63d0115f7bec7, 0x00003f48 },
		{ 0xd7cb6641246b8b84, &exec_d7cb6641246b8b84, 0x00001389 },
		{ 0x69693916f6be380f, &exec_69693916f6be380f, 0x00000ff2 },
		{ 0xdb211ca8be4b8bd8, &exec_db211ca8be4b8bd8, 0x00000f66 },
		{ 0xd0a649352bf214b1, &exec_d0a649352bf214b1, 0x00000f6e },
		{ 0xab7c03d463c2a2fb, &exec_ab7c03d463c2a2fb, 0x00003166 },
		{ 0x5f6392635151e3ef, &exec_5f6392635151e3ef, 0x00000f86 },
		{ 0x408bf8b6e4b3f1ea, &exec_408bf8b6e4b3f1ea, 0x00001be0 },
		{ 0x31d16ade63bcef5b, &exec_31d16ade63bcef5b, 0x00000f89 },
		{ 0x6f01c57c61f3cdf3, &exec_6f01c57c61f3cdf3, 0x00000f8c },
		{ 0xbcbe7868a629be1c, &exec_bcbe7868a629be1c, 0x0000150b },
		{ 0xae163904194faaf2, &exec_ae163904194faaf2, 0x00000f8f },
		{ 0x033b3a39f31f85ef, &exec_033b3a39f31f85ef, 0x00003b49 },
		{ 0x1e6a8dd3f29f206c, &exec_1e6a8dd3f29f206c, 0x00003090 },
		{ 0xcc51b61ebb4a9265, &exec_cc51b61ebb4a9265, 0x00001ad9 },
		{ 0x23ffa8e0ffabfd79, &exec_23ffa8e0ffabfd79, 0x00000fa5 },
		{ 0x5ee3d403e1ea5b0c, &exec_5ee3d403e1ea5b0c, 0x000017e1 },
		{ 0xc45d1b911812af9b, &exec_c45d1b911812af9b, 0x00000fbf },
		{ 0x2f027213b4bd32f1, &exec_2f027213b4bd32f1, 0x000017cb },
		{ 0xd3e79ae6dbc35349, &exec_d3e79ae6dbc35349, 0x000024d6 },
		{ 0xcd4a476b0cd455c0, &exec_cd4a476b0cd455c0, 0x00001ef0 },
		{ 0x735788ba802890bd, &exec_735788ba802890bd, 0x000018ab },
		{ 0x9de9f5cc2a8884f0, &exec_9de9f5cc2a8884f0, 0x00002103 },
		{ 0xf38faaa56ad0dbf6, &exec_f38faaa56ad0dbf6, 0x00003d07 },
		{ 0xeb0c8a33a5a60d2e, &exec_eb0c8a33a5a60d2e, 0x00000fe1 },
		{ 0x31e86c9f54a3660d, &exec_31e86c9f54a3660d, 0x000026aa },
		{ 0xb425a52c5bd32597, &exec_b425a52c5bd32597, 0x00000fee },
		{ 0x68ead9fb17844077, &exec_68ead9fb17844077, 0x00002211 },
		{ 0x218afa60f0fa95fe, &exec_218afa60f0fa95fe, 0x000016f2 },
		{ 0x78c514edf92ecf39, &exec_78c514edf92ecf39, 0x000042ea },
		{ 0x6fe31166b809e0ee, &exec_6fe31166b809e0ee, 0x00001665 },
		{ 0x23c8272a8bc810af, &exec_23c8272a8bc810af, 0x000042bf },
		{ 0xc5444ecb36968ef8, &exec_c5444ecb36968ef8, 0x00002c80 },
		{ 0x6f6687bead8c10c8, &exec_6f6687bead8c10c8, 0x000031ef },
		{ 0x9a9ff9e4a5668150, &exec_9a9ff9e4a5668150, 0x00003dc1 },
		{ 0xe9deaa773259ccb3, &exec_e9deaa773259ccb3, 0x00000fff },
		{ 0xcb79b442000e4ac6, &exec_cb79b442000e4ac6, 0x00001252 },
		{ 0x2b600d5197f40047, &exec_2b600d5197f40047, 0x00001016 },
		{ 0xfbf01873d8a4797c, &exec_fbf01873d8a4797c, 0x00001026 },
		{ 0x6939ccc68e995c2b, &exec_6939ccc68e995c2b, 0x00003343 },
		{ 0x3e8519c28c7762af, &exec_3e8519c28c7762af, 0x00001029 },
		{ 0xdf8bdf0c864fead7, &exec_df8bdf0c864fead7, 0x00001b22 },
		{ 0xa5175c821e4aceb9, &exec_a5175c821e4aceb9, 0x00003f5e },
		{ 0xd716401cfa080286, &exec_d716401cfa080286, 0x000022ae },
		{ 0xe5c168b1e529ea34, &exec_e5c168b1e529ea34, 0x0000119d },
		{ 0xd14f887dc81f8470, &exec_d14f887dc81f8470, 0x00001f58 },
		{ 0x3b447f88aa1f311b, &exec_3b447f88aa1f311b, 0x000013e1 },
		{ 0xc51dad0366846b50, &exec_c51dad0366846b50, 0x0000353a },
		{ 0x2f0003453df58fbf, &exec_2f0003453df58fbf, 0x0000104f },
		{ 0x83c51096bfde7be5, &exec_83c51096bfde7be5, 0x0000195b },
		{ 0x8613792f7b896a1c, &exec_8613792f7b896a1c, 0x000027b7 },
		{ 0xa0f15f365010829f, &exec_a0f15f365010829f, 0x00001052 },
		{ 0x06d62b658fc31f94, &exec_06d62b658fc31f94, 0x00002362 },
		{ 0xb54e70395a276d3d, &exec_b54e70395a276d3d, 0x00001059 },
		{ 0x56066c3960465ce8, &exec_56066c3960465ce8, 0x00003034 },
		{ 0x1d63f9f00e4c4414, &exec_1d63f9f00e4c4414, 0x0000324f },
		{ 0x6fb7d73ea7bca435, &exec_6fb7d73ea7bca435, 0x00001e1d },
		{ 0x2e5140c050fa3d13, &exec_2e5140c050fa3d13, 0x0000105f },
		{ 0xbbfd6440e462b39c, &exec_bbfd6440e462b39c, 0x0000334e },
		{ 0x9cbceb80eafe3f94, &exec_9cbceb80eafe3f94, 0x00003550 },
		{ 0x2215af0ba0430383, &exec_2215af0ba0430383, 0x00001071 },
		{ 0x109399713690f0f3, &exec_109399713690f0f3, 0x00001074 },
		{ 0x5e887e8bc0a5fa04, &exec_5e887e8bc0a5fa04, 0x0000107a },
		{ 0xfa9954df6d58015e, &exec_fa9954df6d58015e, 0x000037ee },
		{ 0xd234ab66ef6ad48c, &exec_d234ab66ef6ad48c, 0x00001083 },
		{ 0xdaebd385e25398fd, &exec_daebd385e25398fd, 0x00001087 },
		{ 0xcfe2bf1e38183ed8, &exec_cfe2bf1e38183ed8, 0x0000108b },
		{ 0xd9755b120083ebcc, &exec_d9755b120083ebcc, 0x00002dc3 },
		{ 0x6efe5679ef4b00fe, &exec_6efe5679ef4b00fe, 0x00002500 },
		{ 0x358448e86f60e996, &exec_358448e86f60e996, 0x00003432 },
		{ 0xb8e0d8bbf670aee3, &exec_b8e0d8bbf670aee3, 0x00001099 },
		{ 0xe0e632f9c05bce1b, &exec_e0e632f9c05bce1b, 0x00003f0f },
		{ 0xa29c6d8efe67147b, &exec_a29c6d8efe67147b, 0x00003b11 },
		{ 0x59e9bf0bdf52c6b0, &exec_59e9bf0bdf52c6b0, 0x000010a6 },
		{ 0x45891d344fe96d0c, &exec_45891d344fe96d0c, 0x0000221c },
		{ 0x246e41bd33c03d98, &exec_246e41bd33c03d98, 0x000010aa },
		{ 0xf03545473e47783c, &exec_f03545473e47783c, 0x00001a70 },
		{ 0xd47d5d43eb11aa6b, &exec_d47d5d43eb11aa6b, 0x00002ea9 },
		{ 0x097019de5b7ae187, &exec_097019de5b7ae187, 0x000010c7 },
		{ 0x5388c955335598d0, &exec_5388c955335598d0, 0x000010cb },
		{ 0xdf711f19b42b4fb4, &exec_df711f19b42b4fb4, 0x000033a8 },
		{ 0x0d19d9bd51524b8e, &exec_0d19d9bd51524b8e, 0x000010d3 },
		{ 0xe7bea9177d10d897, &exec_e7bea9177d10d897, 0x0000367a },
		{ 0x0b55ca572a94f5fc, &exec_0b55ca572a94f5fc, 0x00002918 },
		{ 0x45b2228533cf2557, &exec_45b2228533cf2557, 0x000010de },
		{ 0xb5b1cbb600a079e2, &exec_b5b1cbb600a079e2, 0x000010e2 },
		{ 0xf7c25eb13d22ad37, &exec_f7c25eb13d22ad37, 0x00004827 },
		{ 0x6376ad7d5a70ba0c, &exec_6376ad7d5a70ba0c, 0x000024a1 },
		{ 0xa0ef797b4e0015fb, &exec_a0ef797b4e0015fb, 0x000010e5 },
		{ 0xab1a9f44f6101930, &exec_ab1a9f44f6101930, 0x00001fd7 },
		{ 0x791d8fcd3cf14b8d, &exec_791d8fcd3cf14b8d, 0x00002f1a },
		{ 0x7e95b0d64157b82b, &exec_7e95b0d64157b82b, 0x000010f1 },
		{ 0xe5a9c95cbabd693e, &exec_e5a9c95cbabd693e, 0x000037b9 },
		{ 0xe2488c05ff6442bf, &exec_e2488c05ff6442bf, 0x000010f4 },
		{ 0x5d74e4fb5ad7536c, &exec_5d74e4fb5ad7536c, 0x000011be },
		{ 0xcb389146f55efbf1, &exec_cb389146f55efbf1, 0x000010f7 },
		{ 0xc5dcd58b89c88168, &exec_c5dcd58b89c88168, 0x000010fb },
		{ 0x03552d3a27e21322, &exec_03552d3a27e21322, 0x0000213e },
		{ 0x340d6f4aa80a10ab, &exec_340d6f4aa80a10ab, 0x00001115 },
		{ 0xbcb8149a81bbb0ab, &exec_bcb8149a81bbb0ab, 0x00002d22 },
		{ 0xa631ba6ae27a33c5, &exec_a631ba6ae27a33c5, 0x00004233 },
		{ 0x18f92109e1625274, &exec_18f92109e1625274, 0x00004893 },
		{ 0x4e71a1518aa4cda0, &exec_4e71a1518aa4cda0, 0x0000111e },
		{ 0xe690fe3c7e2fbb4f, &exec_e690fe3c7e2fbb4f, 0x00002f99 },
		{ 0xe558ba068d21e9fd, &exec_e558ba068d21e9fd, 0x0000214f },
		{ 0xa5cabd1b48574507, &exec_a5cabd1b48574507, 0x0000112a },
		{ 0x4e0f7d766228e0a5, &exec_4e0f7d766228e0a5, 0x00001133 },
		{ 0x44f87c14f52277b5, &exec_44f87c14f52277b5, 0x00001137 },
		{ 0x9490bd98a0b08c3e, &exec_9490bd98a0b08c3e, 0x000017be },
		{ 0x7c45cb9db26e5c26, &exec_7c45cb9db26e5c26, 0x0000215d },
		{ 0x790322bd515b36b2, &exec_790322bd515b36b2, 0x00002777 },
		{ 0x651e9f79eadf446b, &exec_651e9f79eadf446b, 0x0000113c },
		{ 0x5edfd5fb150d851e, &exec_5edfd5fb150d851e, 0x00001142 },
		{ 0x096015c3e6570746, &exec_096015c3e6570746, 0x00001b4a },
		{ 0x62fd687a9c3248a0, &exec_62fd687a9c3248a0, 0x00003d0b },
		{ 0x80172b1d339e0cd7, &exec_80172b1d339e0cd7, 0x00001148 },
		{ 0x411e42c1e70c6d57, &exec_411e42c1e70c6d57, 0x00001b5f },
		{ 0x1cdfbdaa7be3e25f, &exec_1cdfbdaa7be3e25f, 0x00001153 },
		{ 0xde12a01e96632dfc, &exec_de12a01e96632dfc, 0x00003f1b },
		{ 0xb8724f454a041cd9, &exec_b8724f454a041cd9, 0x0000115f },
		{ 0xf175e97e36e18372, &exec_f175e97e36e18372, 0x0000116b },
		{ 0x3957bd028eb0daaa, &exec_3957bd028eb0daaa, 0x00002391 },
		{ 0xaa654036fe7b1bd0, &exec_aa654036fe7b1bd0, 0x00004888 },
		{ 0x584e197c55d92ed0, &exec_584e197c55d92ed0, 0x0000116e },
		{ 0xf87c2841dbd280a0, &exec_f87c2841dbd280a0, 0x00001172 },
		{ 0xe0d63dc048dce422, &exec_e0d63dc048dce422, 0x00001175 },
		{ 0xa512d2fe7dd4e090, &exec_a512d2fe7dd4e090, 0x00001179 },
		{ 0x6ee05e3f29c1955d, &exec_6ee05e3f29c1955d, 0x0000117c },
		{ 0x703a0ca45b6e13e9, &exec_703a0ca45b6e13e9, 0x00001189 },
		{ 0xbb005d0c99f0b067, &exec_bb005d0c99f0b067, 0x0000118f },
		{ 0x94f9210c4a5726ea, &exec_94f9210c4a5726ea, 0x0000168f },
		{ 0x0200f323f0dd0093, &exec_0200f323f0dd0093, 0x00001d18 },
		{ 0x744c2e16d67529dc, &exec_744c2e16d67529dc, 0x00001193 },
		{ 0x2463bb52720f0d9f, &exec_2463bb52720f0d9f, 0x00001199 },
		{ 0x619ad853b78ec87e, &exec_619ad853b78ec87e, 0x000021fe },
		{ 0x4f9b29b80fa188f2, &exec_4f9b29b80fa188f2, 0x000011ac },
		{ 0xbb5adb4e744136b7, &exec_bb5adb4e744136b7, 0x00002c1c },
		{ 0x6cab44169090ab54, &exec_6cab44169090ab54, 0x0000218d },
		{ 0xf294f95b8860279a, &exec_f294f95b8860279a, 0x00001301 },
		{ 0xc1a71c874eb2b4d2, &exec_c1a71c874eb2b4d2, 0x000031c9 },
		{ 0xce333ee99aa6e00d, &exec_ce333ee99aa6e00d, 0x00001b6d },
		{ 0x1fdbda2497cde99a, &exec_1fdbda2497cde99a, 0x0000147a },
		{ 0x0387c4282689182c, &exec_0387c4282689182c, 0x000011ce },
		{ 0xb7386b06d04b17bd, &exec_b7386b06d04b17bd, 0x000011d3 },
		{ 0xe84696ceb55727f6, &exec_e84696ceb55727f6, 0x000011d9 },
		{ 0x4194532c0df09555, &exec_4194532c0df09555, 0x000011e6 },
		{ 0x1309823ae2cb65f3, &exec_1309823ae2cb65f3, 0x00001842 },
		{ 0x22ff80ec2a1f0a38, &exec_22ff80ec2a1f0a38, 0x000011fe },
		{ 0x903bccd72089fb26, &exec_903bccd72089fb26, 0x00001204 },
		{ 0x15b4ea032181087e, &exec_15b4ea032181087e, 0x00001211 },
		{ 0x7f9d625f8f7c106c, &exec_7f9d625f8f7c106c, 0x00004132 },
		{ 0xe234cfad5aa370bb, &exec_e234cfad5aa370bb, 0x0000121f },
		{ 0x49429b2dfbaa3c8d, &exec_49429b2dfbaa3c8d, 0x000031e0 },
		{ 0xdbda15db4c0b9eb9, &exec_dbda15db4c0b9eb9, 0x000041b2 },
		{ 0x7c506e9c31f40d01, &exec_7c506e9c31f40d01, 0x00001224 },
		{ 0x71e9a934566030b8, &exec_71e9a934566030b8, 0x000048a9 },
		{ 0x4d2f786e2dc0ad59, &exec_4d2f786e2dc0ad59, 0x00001951 },
		{ 0xd134eb418720119d, &exec_d134eb418720119d, 0x0000122a },
		{ 0xadd8e0937ee1e760, &exec_add8e0937ee1e760, 0x00001768 },
		{ 0x97f9b63cec1cd3a5, &exec_97f9b63cec1cd3a5, 0x000036e8 },
		{ 0xb7858e538a000819, &exec_b7858e538a000819, 0x0000122f },
		{ 0x2ae5ee8ded5b93fa, &exec_2ae5ee8ded5b93fa, 0x0000298f },
		{ 0xd112171fbe1a4239, &exec_d112171fbe1a4239, 0x0000228f },
		{ 0x6c24e297125d3daa, &exec_6c24e297125d3daa, 0x00001235 },
		{ 0xa6c12800562b403e, &exec_a6c12800562b403e, 0x00001c28 },
		{ 0xf4126e9e0ad82a79, &exec_f4126e9e0ad82a79, 0x00002cbc },
		{ 0x5cebdbe35d83ae24, &exec_5cebdbe35d83ae24, 0x0000123f },
		{ 0xf041934ff4857aa5, &exec_f041934ff4857aa5, 0x00001244 },
		{ 0xaa35d596a53e1cd4, &exec_aa35d596a53e1cd4, 0x00001248 },
		{ 0xe09b0e712375b220, &exec_e09b0e712375b220, 0x0000124a },
		{ 0x380841e36c46c6d3, &exec_380841e36c46c6d3, 0x00001a0a },
		{ 0x829b28bba8b0c7b4, &exec_829b28bba8b0c7b4, 0x00002cf6 },
		{ 0xf81a78929007675b, &exec_f81a78929007675b, 0x00002686 },
		{ 0xbd16f2a6f761639d, &exec_bd16f2a6f761639d, 0x0000124e },
		{ 0x37ad84a01e948895, &exec_37ad84a01e948895, 0x00001257 },
		{ 0x10052daf1d427167, &exec_10052daf1d427167, 0x00003ea1 },
		{ 0xadf0ddd1087831c1, &exec_adf0ddd1087831c1, 0x0000125f },
		{ 0x92d7d9e710d4d4f0, &exec_92d7d9e710d4d4f0, 0x000040a0 },
		{ 0x92fac9e52a97e06b, &exec_92fac9e52a97e06b, 0x00003031 },
		{ 0x07540cc23a1ceda6, &exec_07540cc23a1ceda6, 0x00001ecc },
		{ 0x2e0f086a3b57367f, &exec_2e0f086a3b57367f, 0x00001263 },
		{ 0x695603a619e446e7, &exec_695603a619e446e7, 0x00000000 },
		{ 0x14063f01ba920796, &exec_14063f01ba920796, 0x0000167f },
		{ 0x3260342fd0223b42, &exec_3260342fd0223b42, 0x0000126c },
		{ 0xd9185576f80a0aa5, &exec_d9185576f80a0aa5, 0x00001272 },
		{ 0x929ddd86b3cd8bd7, &exec_929ddd86b3cd8bd7, 0x00001277 },
		{ 0xcc178024ee885248, &exec_cc178024ee885248, 0x0000174f },
		{ 0xf75e91f0aa8979ba, &exec_f75e91f0aa8979ba, 0x0000127f },
		{ 0x6bb64ac47210941e, &exec_6bb64ac47210941e, 0x00001283 },
		{ 0x248eaa9095e325f1, &exec_248eaa9095e325f1, 0x00003d54 },
		{ 0x13773d4faed69db0, &exec_13773d4faed69db0, 0x0000341d },
		{ 0xef3f128dc838df7d, &exec_ef3f128dc838df7d, 0x0000128b },
		{ 0xea84ca223ba4c51c, &exec_ea84ca223ba4c51c, 0x000047fd },
		{ 0xd9ffa3c5d6465e02, &exec_d9ffa3c5d6465e02, 0x00001290 },
		{ 0xea7cc7427031f68d, &exec_ea7cc7427031f68d, 0x00004930 },
		{ 0x0d764245b95176bd, &exec_0d764245b95176bd, 0x00001296 },
		{ 0x0a4907a39b1f7bb6, &exec_0a4907a39b1f7bb6, 0x000020c4 },
		{ 0x2246cbfc7f307b49, &exec_2246cbfc7f307b49, 0x00001ba1 },
		{ 0x4555c21a797dd229, &exec_4555c21a797dd229, 0x000038aa },
		{ 0x447b298c400c97d5, &exec_447b298c400c97d5, 0x000013cb },
		{ 0x66192d52b76f5f84, &exec_66192d52b76f5f84, 0x000012af },
		{ 0x5999cdb178b901f0, &exec_5999cdb178b901f0, 0x000028b5 },
		{ 0x4447def0e9ff0f7e, &exec_4447def0e9ff0f7e, 0x000023a7 },
		{ 0x542ed3d92a388c72, &exec_542ed3d92a388c72, 0x00001531 },
		{ 0x886257996ccc0714, &exec_886257996ccc0714, 0x000012b3 },
		{ 0x6f673237e3205a76, &exec_6f673237e3205a76, 0x00002e12 },
		{ 0x0f7e1d4d4580d040, &exec_0f7e1d4d4580d040, 0x000012ba },
		{ 0xa3d1fa87d1dd43c9, &exec_a3d1fa87d1dd43c9, 0x00000000 },
		{ 0x2d7273c00f6569dd, &exec_2d7273c00f6569dd, 0x000012bd },
		{ 0x5d4c9f90c24499ca, &exec_5d4c9f90c24499ca, 0x00002c6c },
		{ 0x206304eb8a8beb0f, &exec_206304eb8a8beb0f, 0x000012c6 },
		{ 0xd00e7f9ae3116195, &exec_d00e7f9ae3116195, 0x000014a2 },
		{ 0xfb20e2d3e393c318, &exec_fb20e2d3e393c318, 0x000012c9 },
		{ 0xb896f44d0c609b39, &exec_b896f44d0c609b39, 0x000012cd },
		{ 0xd490ba55995fbbb7, &exec_d490ba55995fbbb7, 0x000012d1 },
		{ 0x9c68ee6bf7c121f2, &exec_9c68ee6bf7c121f2, 0x0000180b },
		{ 0x70d91609d574cfd4, &exec_70d91609d574cfd4, 0x000012da },
		{ 0x10d112952dbbff83, &exec_10d112952dbbff83, 0x000012dc },
		{ 0x4097e5a4f98bd0be, &exec_4097e5a4f98bd0be, 0x000012de },
		{ 0x37328ced48c17cc1, &exec_37328ced48c17cc1, 0x00000000 },
		{ 0x2750391a2326f3e1, &exec_2750391a2326f3e1, 0x000012e2 },
		{ 0xfee2c003febb7055, &exec_fee2c003febb7055, 0x000012e8 },
		{ 0x3cf338f1eda81c18, &exec_3cf338f1eda81c18, 0x000012ed },
		{ 0xfaeb7db9ca694ab7, &exec_faeb7db9ca694ab7, 0x000012ef },
		{ 0x3e6dfaff9ca9a45a, &exec_3e6dfaff9ca9a45a, 0x00004106 },
		{ 0xf31a8c1c9f441e05, &exec_f31a8c1c9f441e05, 0x000036fb },
		{ 0xb4d501e913c4fb36, &exec_b4d501e913c4fb36, 0x000012f8 },
		{ 0x79f31de8350e8b54, &exec_79f31de8350e8b54, 0x000012fc },
		{ 0x942153f65f6fee89, &exec_942153f65f6fee89, 0x00001310 },
		{ 0x878314ab45f18def, &exec_878314ab45f18def, 0x00001d97 },
		{ 0xd8fef7e68c702d99, &exec_d8fef7e68c702d99, 0x00002414 },
		{ 0x10ad35155273996a, &exec_10ad35155273996a, 0x00001306 },
		{ 0xde8322a4fbbf333a, &exec_de8322a4fbbf333a, 0x00003b7c },
		{ 0xcf389bbff1369187, &exec_cf389bbff1369187, 0x000022bb },
		{ 0x85dea724b0ad52f9, &exec_85dea724b0ad52f9, 0x0000181c },
		{ 0x3308283005dce313, &exec_3308283005dce313, 0x0000130b },
		{ 0xd6c0ab331bf2f5ac, &exec_d6c0ab331bf2f5ac, 0x0000226c },
		{ 0x7c0a049134e5cce9, &exec_7c0a049134e5cce9, 0x00001319 },
		{ 0x08cbfb9eecb6f776, &exec_08cbfb9eecb6f776, 0x00001337 },
		{ 0x096f53fd41328f31, &exec_096f53fd41328f31, 0x000020a4 },
		{ 0xc4b8e4127856a26f, &exec_c4b8e4127856a26f, 0x0000131c },
		{ 0x3897ea7977e52953, &exec_3897ea7977e52953, 0x00001984 },
		{ 0xf2e448fd908eb546, &exec_f2e448fd908eb546, 0x0000131e },
		{ 0xfff44e96580287ed, &exec_fff44e96580287ed, 0x00003080 },
		{ 0x3b2aaca0eb78366f, &exec_3b2aaca0eb78366f, 0x00001321 },
		{ 0xcee94277d1ab1de7, &exec_cee94277d1ab1de7, 0x0000132c },
		{ 0xb119d978078ad909, &exec_b119d978078ad909, 0x00001331 },
		{ 0xa0a44b51418d195a, &exec_a0a44b51418d195a, 0x00002d42 },
		{ 0x089e94d49e6eb506, &exec_089e94d49e6eb506, 0x00001333 },
		{ 0x6e5e53ac0762510d, &exec_6e5e53ac0762510d, 0x00001339 },
		{ 0xb10f99b24fa5f2e6, &exec_b10f99b24fa5f2e6, 0x00000000 },
		{ 0x809e943c361c3abb, &exec_809e943c361c3abb, 0x000045e4 },
		{ 0x0d0079ab399c4da5, &exec_0d0079ab399c4da5, 0x0000304e },
		{ 0x7368f101042a9f4f, &exec_7368f101042a9f4f, 0x00001343 },
		{ 0x40129f08d528deb8, &exec_40129f08d528deb8, 0x000037f2 },
		{ 0x142119d349180e0e, &exec_142119d349180e0e, 0x0000134a },
		{ 0xa0507da7cbb5dd52, &exec_a0507da7cbb5dd52, 0x000034ff },
		{ 0x0cba4fa951d0425f, &exec_0cba4fa951d0425f, 0x00001393 },
		{ 0xecfe99dbac3e06bd, &exec_ecfe99dbac3e06bd, 0x000014cd },
		{ 0x968818aa9bcd3f7b, &exec_968818aa9bcd3f7b, 0x0000134c },
		{ 0x8e4a67a8712acfb7, &exec_8e4a67a8712acfb7, 0x00001353 },
		{ 0xb5fe5f48b3568afc, &exec_b5fe5f48b3568afc, 0x00001358 },
		{ 0xc970b76339877fe3, &exec_c970b76339877fe3, 0x0000135b },
		{ 0xb9bf050045eea26b, &exec_b9bf050045eea26b, 0x0000135e },
		{ 0x53c48908a1401e8b, &exec_53c48908a1401e8b, 0x00001360 },
		{ 0xe9c57d790e08939b, &exec_e9c57d790e08939b, 0x000019d7 },
		{ 0x5c727c25ce492bb9, &exec_5c727c25ce492bb9, 0x00001362 },
		{ 0x791fe0bfdd4290fd, &exec_791fe0bfdd4290fd, 0x00001366 },
		{ 0xe7f85724e5b35de8, &exec_e7f85724e5b35de8, 0x0000136a },
		{ 0x8226238f648d5e91, &exec_8226238f648d5e91, 0x00001372 },
		{ 0xedc29281562f8a87, &exec_edc29281562f8a87, 0x00001375 },
		{ 0xecad48707811324e, &exec_ecad48707811324e, 0x00002388 },
		{ 0xcacaef5d23907972, &exec_cacaef5d23907972, 0x000037cb },
		{ 0x25653ccec73a988b, &exec_25653ccec73a988b, 0x000018b8 },
		{ 0x1809fd7d06466ccd, &exec_1809fd7d06466ccd, 0x0000137c },
		{ 0xee6e763c9b9f8f83, &exec_ee6e763c9b9f8f83, 0x00001384 },
		{ 0xa9747dfca665c2b2, &exec_a9747dfca665c2b2, 0x0000138b },
		{ 0xcf0da46b39d57410, &exec_cf0da46b39d57410, 0x000027bd },
		{ 0x4ae3a9f9395c281c, &exec_4ae3a9f9395c281c, 0x0000189a },
		{ 0x7387cd96f5a51a5b, &exec_7387cd96f5a51a5b, 0x0000138e },
		{ 0xb0eaa4463366aa7a, &exec_b0eaa4463366aa7a, 0x00003de3 },
		{ 0xdeb7d6ed80d7dd43, &exec_deb7d6ed80d7dd43, 0x00001399 },
		{ 0x54811adf171fd99e, &exec_54811adf171fd99e, 0x0000139d },
		{ 0xbef19d14411dd382, &exec_bef19d14411dd382, 0x0000424b },
		{ 0xae04dd230a22e7a6, &exec_ae04dd230a22e7a6, 0x00001b39 },
		{ 0x0f940933fe34c575, &exec_0f940933fe34c575, 0x00001fdb },
		{ 0xbca5036ed5bd2e77, &exec_bca5036ed5bd2e77, 0x000022d4 },
		{ 0xb2dc9140fc7207ec, &exec_b2dc9140fc7207ec, 0x000013a0 },
		{ 0x512c2a01c5901b59, &exec_512c2a01c5901b59, 0x000013a4 },
		{ 0xeef901829b91a946, &exec_eef901829b91a946, 0x00001c50 },
		{ 0x782c74a315e0cc2c, &exec_782c74a315e0cc2c, 0x000013aa },
		{ 0x3c0ed285b19ee9e8, &exec_3c0ed285b19ee9e8, 0x00000000 },
		{ 0x98c6543ff28e9fef, &exec_98c6543ff28e9fef, 0x000013ad },
		{ 0x452912fd32bdb2f7, &exec_452912fd32bdb2f7, 0x000024ed },
		{ 0xc70c01ba8c4ddcdd, &exec_c70c01ba8c4ddcdd, 0x0000342e },
		{ 0x0f541aad4abeb73c, &exec_0f541aad4abeb73c, 0x000013b1 },
		{ 0x0728db765e31b9b2, &exec_0728db765e31b9b2, 0x00001ded },
		{ 0x6d9e041ddac04239, &exec_6d9e041ddac04239, 0x0000416f },
		{ 0xa420cd59835aa16b, &exec_a420cd59835aa16b, 0x000013b7 },
		{ 0x7ad2df2f2cf9e0ad, &exec_7ad2df2f2cf9e0ad, 0x000013ba },
		{ 0x3ab1a55500ae01cc, &exec_3ab1a55500ae01cc, 0x000013be },
		{ 0x440610fd7e4e7c16, &exec_440610fd7e4e7c16, 0x00003019 },
		{ 0x8043ee9cde36f350, &exec_8043ee9cde36f350, 0x000013c0 },
		{ 0x965486ebcc05852e, &exec_965486ebcc05852e, 0x00002177 },
		{ 0x20f2a5cfa77b3c46, &exec_20f2a5cfa77b3c46, 0x000013d4 },
		{ 0xa1b69642ab4e34d0, &exec_a1b69642ab4e34d0, 0x000013e5 },
		{ 0x8ca54bb5d490703c, &exec_8ca54bb5d490703c, 0x000013e7 },
		{ 0xef9bbd2ed633eb80, &exec_ef9bbd2ed633eb80, 0x000013eb },
		{ 0x7fd344515c853612, &exec_7fd344515c853612, 0x000013ef },
		{ 0xe89b4c5a26e7142e, &exec_e89b4c5a26e7142e, 0x000013f6 },
		{ 0xaae3ed6e0b0c8fb4, &exec_aae3ed6e0b0c8fb4, 0x000013fa },
		{ 0x891447fd50814a09, &exec_891447fd50814a09, 0x000013fe },
		{ 0x089b529c97a33a28, &exec_089b529c97a33a28, 0x00001404 },
		{ 0x37cad823d58d74ae, &exec_37cad823d58d74ae, 0x00001408 },
		{ 0x252e8f22af425476, &exec_252e8f22af425476, 0x0000205c },
		{ 0x2fc6213aac4b0e14, &exec_2fc6213aac4b0e14, 0x00002970 },
		{ 0x11c3ff3e56294c21, &exec_11c3ff3e56294c21, 0x000043e3 },
		{ 0xa1a42475795b45be, &exec_a1a42475795b45be, 0x00001c7b },
		{ 0x33840f609f9f921a, &exec_33840f609f9f921a, 0x00001415 },
		{ 0xa830306d6a31e17d, &exec_a830306d6a31e17d, 0x00001419 },
		{ 0x7bb4dd570360981b, &exec_7bb4dd570360981b, 0x00001d3d },
		{ 0x262f6e18860b477b, &exec_262f6e18860b477b, 0x0000141b },
		{ 0xfb8ffa859c67b60f, &exec_fb8ffa859c67b60f, 0x0000141e },
		{ 0x29a33c99bcfeca46, &exec_29a33c99bcfeca46, 0x0000188d },
		{ 0xc5e3d21ac2becd9b, &exec_c5e3d21ac2becd9b, 0x00002d07 },
		{ 0x8d8a6263794e17a0, &exec_8d8a6263794e17a0, 0x000034a5 },
		{ 0xac50ff7ea0818185, &exec_ac50ff7ea0818185, 0x0000142b },
		{ 0x96099489d0fe9c98, &exec_96099489d0fe9c98, 0x00001a4a },
		{ 0xdc4b52c08cb13b62, &exec_dc4b52c08cb13b62, 0x00001ac9 },
		{ 0xf2eb70b87b32e778, &exec_f2eb70b87b32e778, 0x00001e8a },
		{ 0xd8bf7dc18091831e, &exec_d8bf7dc18091831e, 0x00001430 },
		{ 0x2341baced3324b9f, &exec_2341baced3324b9f, 0x00001b08 },
		{ 0x9d93a7026251fb80, &exec_9d93a7026251fb80, 0x00002083 },
		{ 0x30debb0912805494, &exec_30debb0912805494, 0x000042ba },
		{ 0x6c0056c6d6424a2a, &exec_6c0056c6d6424a2a, 0x000022b7 },
		{ 0x9232f017583ebc26, &exec_9232f017583ebc26, 0x00001444 },
		{ 0x04a6d24439f7b473, &exec_04a6d24439f7b473, 0x0000144b },
		{ 0x9430e534b47f44be, &exec_9430e534b47f44be, 0x000038d7 },
		{ 0x017b7325321a25c9, &exec_017b7325321a25c9, 0x000038ef },
		{ 0x4ce47e7e13be506d, &exec_4ce47e7e13be506d, 0x0000144e },
		{ 0xe18a20ab9328d4a1, &exec_e18a20ab9328d4a1, 0x00001453 },
		{ 0xf5b0044bdd38815d, &exec_f5b0044bdd38815d, 0x00002a95 },
		{ 0xd0238850e9036183, &exec_d0238850e9036183, 0x00001457 },
		{ 0x2ce6772e339d95a7, &exec_2ce6772e339d95a7, 0x0000145c },
		{ 0x46de435dc3102c6e, &exec_46de435dc3102c6e, 0x00001469 },
		{ 0x0289df90e771aedf, &exec_0289df90e771aedf, 0x000034f5 },
		{ 0x43fcbee11a55d5a9, &exec_43fcbee11a55d5a9, 0x0000146d },
		{ 0x5e3058e95f5eb86d, &exec_5e3058e95f5eb86d, 0x00001475 },
		{ 0x360f9bce39077285, &exec_360f9bce39077285, 0x000048e4 },
		{ 0xf3d2ea76261fece2, &exec_f3d2ea76261fece2, 0x00002dfa },
		{ 0x03be5656e081dace, &exec_03be5656e081dace, 0x0000147e },
		{ 0xf2d058709a0ea330, &exec_f2d058709a0ea330, 0x00001483 },
		{ 0x9d09712c065bbc82, &exec_9d09712c065bbc82, 0x000014aa },
		{ 0x724b21c25dbad880, &exec_724b21c25dbad880, 0x0000148b },
		{ 0x2299b4275899c409, &exec_2299b4275899c409, 0x00001617 },
		{ 0x6092eeaf8e9b5998, &exec_6092eeaf8e9b5998, 0x00001495 },
		{ 0x0638f8eccfce7763, &exec_0638f8eccfce7763, 0x00001737 },
		{ 0x7a963905061cf5b0, &exec_7a963905061cf5b0, 0x00002be2 },
		{ 0x8f09662a5d7814a3, &exec_8f09662a5d7814a3, 0x000014b7 },
		{ 0xfc64427baa9d0075, &exec_fc64427baa9d0075, 0x000014bb },
		{ 0x7cdf10d190583ea2, &exec_7cdf10d190583ea2, 0x00000000 },
		{ 0xe1f15577f2a0322f, &exec_e1f15577f2a0322f, 0x00004024 },
		{ 0xba432b54a48cb7a4, &exec_ba432b54a48cb7a4, 0x0000178f },
		{ 0xce9f93f0980c8089, &exec_ce9f93f0980c8089, 0x000014bd },
		{ 0x4dd2a05740652952, &exec_4dd2a05740652952, 0x00001dc3 },
		{ 0x6969160d0a9fa601, &exec_6969160d0a9fa601, 0x000014d1 },
		{ 0x28ed0dedd60f2fdd, &exec_28ed0dedd60f2fdd, 0x000014d3 },
		{ 0x65c1ae4c8aa38041, &exec_65c1ae4c8aa38041, 0x00000000 },
		{ 0x24214fea708db742, &exec_24214fea708db742, 0x000014dd },
		{ 0x1591e19c5a2659f6, &exec_1591e19c5a2659f6, 0x000043d7 },
		{ 0x7dedfe7e8b29cc70, &exec_7dedfe7e8b29cc70, 0x000014e6 },
		{ 0x0f0c49abd8b577ae, &exec_0f0c49abd8b577ae, 0x000014ea },
		{ 0xa99e3516d3d38a3d, &exec_a99e3516d3d38a3d, 0x00004372 },
		{ 0xe5ec4cb96f6b748d, &exec_e5ec4cb96f6b748d, 0x000014ee },
		{ 0xf94cd1ebfcba1915, &exec_f94cd1ebfcba1915, 0x0000256f },
		{ 0x20f2e76ec1b97797, &exec_20f2e76ec1b97797, 0x000014f2 },
		{ 0xf6fd798303a7be00, &exec_f6fd798303a7be00, 0x00002c16 },
		{ 0x696fe20d0aa56c53, &exec_696fe20d0aa56c53, 0x000014f9 },
		{ 0x5f701e2b89ae24d1, &exec_5f701e2b89ae24d1, 0x00003da2 },
		{ 0xc0f9dc4cd0c3582a, &exec_c0f9dc4cd0c3582a, 0x000014fb },
		{ 0xeec5601ca78e7322, &exec_eec5601ca78e7322, 0x00004925 },
		{ 0xee15a616058d3e18, &exec_ee15a616058d3e18, 0x00001500 },
		{ 0x41ed3406c3997b69, &exec_41ed3406c3997b69, 0x00004043 },
		{ 0xc2173187ce7118f7, &exec_c2173187ce7118f7, 0x0000151f },
		{ 0x129fc731427984f3, &exec_129fc731427984f3, 0x0000150f },
		{ 0xd9f4f4e40a0036c3, &exec_d9f4f4e40a0036c3, 0x00001512 },
		{ 0xcb328091194ec187, &exec_cb328091194ec187, 0x00001516 },
		{ 0xc72eb30eb2354134, &exec_c72eb30eb2354134, 0x0000151b },
		{ 0x38275a1a7dcdb3e5, &exec_38275a1a7dcdb3e5, 0x00001550 },
		{ 0x549ebfcd5465f767, &exec_549ebfcd5465f767, 0x000031c1 },
		{ 0x7afd9d3b5c9714ae, &exec_7afd9d3b5c9714ae, 0x00002675 },
		{ 0x7f3a8726e12f50f0, &exec_7f3a8726e12f50f0, 0x00003ff9 },
		{ 0x7298e4818e5133c2, &exec_7298e4818e5133c2, 0x00001549 },
		{ 0x7f1225ca051d127d, &exec_7f1225ca051d127d, 0x00001f9c },
		{ 0x6a94a79a7f7b4c77, &exec_6a94a79a7f7b4c77, 0x00003b8e },
		{ 0xf6bd33dc3b4264e4, &exec_f6bd33dc3b4264e4, 0x00001556 },
		{ 0x8c8a1bb5d47956f4, &exec_8c8a1bb5d47956f4, 0x0000155a },
		{ 0x2e187f4eec1d927b, &exec_2e187f4eec1d927b, 0x00001e7e },
		{ 0xaa999fb5b403d588, &exec_aa999fb5b403d588, 0x0000155e },
		{ 0xad79925403a4e343, &exec_ad79925403a4e343, 0x00002471 },
		{ 0x840e58924bfd9c2b, &exec_840e58924bfd9c2b, 0x00001562 },
		{ 0xbcac19856dc3c7bf, &exec_bcac19856dc3c7bf, 0x000048b2 },
		{ 0xb7c066861bdadbad, &exec_b7c066861bdadbad, 0x00001574 },
		{ 0x46456487957b9ad7, &exec_46456487957b9ad7, 0x00000000 },
		{ 0x13f98cf41187c243, &exec_13f98cf41187c243, 0x00003563 },
		{ 0x7181aca4d1a832f9, &exec_7181aca4d1a832f9, 0x00001588 },
		{ 0x37249ca54d1d5d22, &exec_37249ca54d1d5d22, 0x000017d0 },
		{ 0x9d652f0f47a5df15, &exec_9d652f0f47a5df15, 0x00002513 },
		{ 0x405cfe62865342cd, &exec_405cfe62865342cd, 0x00001592 },
		{ 0x30d260e7b0d02275, &exec_30d260e7b0d02275, 0x00001596 },
		{ 0x8aa3b16647217794, &exec_8aa3b16647217794, 0x00001599 },
		{ 0x65bed7a27a967a3a, &exec_65bed7a27a967a3a, 0x000032f8 },
		{ 0x7cdc1f1455855dc7, &exec_7cdc1f1455855dc7, 0x000015b8 },
		{ 0xe61fd3bb7b609216, &exec_e61fd3bb7b609216, 0x000015bc },
		{ 0x71fdd4ce3072e4f3, &exec_71fdd4ce3072e4f3, 0x00001da6 },
		{ 0x59b5c2c52969bd97, &exec_59b5c2c52969bd97, 0x000015c0 },
		{ 0xf26234087bd722c4, &exec_f26234087bd722c4, 0x00002a31 },
		{ 0x8e5b80795b64a89a, &exec_8e5b80795b64a89a, 0x0000356e },
		{ 0x5bf7c384374f25d7, &exec_5bf7c384374f25d7, 0x000015cd },
		{ 0x67a01b15fde465ab, &exec_67a01b15fde465ab, 0x00001c7e },
		{ 0xb1400b6300a31704, &exec_b1400b6300a31704, 0x000015d3 },
		{ 0xd4dd470e9ff6cd21, &exec_d4dd470e9ff6cd21, 0x000015dc },
		{ 0x13fa516eff50e795, &exec_13fa516eff50e795, 0x000015df },
		{ 0xac7700ff7f2e6ee0, &exec_ac7700ff7f2e6ee0, 0x000015e8 },
		{ 0x9438a7c8c52fb755, &exec_9438a7c8c52fb755, 0x000015ec },
		{ 0xed5cf6186ee9b6d4, &exec_ed5cf6186ee9b6d4, 0x000015f0 },
		{ 0xbf9a79b142c96991, &exec_bf9a79b142c96991, 0x00001ed8 },
		{ 0x990979e29e352128, &exec_990979e29e352128, 0x00000000 },
		{ 0xa962c139d454aa47, &exec_a962c139d454aa47, 0x000015f9 },
		{ 0x305691f950d854d0, &exec_305691f950d854d0, 0x000015fe },
		{ 0x99e983d591e8f62d, &exec_99e983d591e8f62d, 0x000018f8 },
		{ 0xf44ff84c5543a30a, &exec_f44ff84c5543a30a, 0x00002358 },
		{ 0x78f5dbbeb56343ce, &exec_78f5dbbeb56343ce, 0x00001605 },
		{ 0xf725d259e729981e, &exec_f725d259e729981e, 0x00001635 },
		{ 0xed4695ec2faef16e, &exec_ed4695ec2faef16e, 0x00001609 },
		{ 0x1c2ea3713cc5dba1, &exec_1c2ea3713cc5dba1, 0x0000160b },
		{ 0x1a54164ef012e7be, &exec_1a54164ef012e7be, 0x0000160e },
		{ 0x0e41c125c5b9fa96, &exec_0e41c125c5b9fa96, 0x00001ab7 },
		{ 0x8bf03993d11b2948, &exec_8bf03993d11b2948, 0x00002bbf },
		{ 0xaf53206be0bb0fba, &exec_af53206be0bb0fba, 0x00001611 },
		{ 0xcb01ea7341b7081b, &exec_cb01ea7341b7081b, 0x0000293c },
		{ 0xea8aaaee3eadc821, &exec_ea8aaaee3eadc821, 0x00001613 },
		{ 0xfc516c5953891c35, &exec_fc516c5953891c35, 0x00002159 },
		{ 0x74c9199b7784b7f4, &exec_74c9199b7784b7f4, 0x0000161a },
		{ 0xb568f610661d3445, &exec_b568f610661d3445, 0x0000345b },
		{ 0xd484e92dc91ea9c7, &exec_d484e92dc91ea9c7, 0x00002873 },
		{ 0xad28ad238a9c30b7, &exec_ad28ad238a9c30b7, 0x00001623 },
		{ 0xa052dfcd53f9a2ec, &exec_a052dfcd53f9a2ec, 0x00001628 },
		{ 0x1fd07af497ea3a7c, &exec_1fd07af497ea3a7c, 0x0000162c },
		{ 0xc79ab901de2a3216, &exec_c79ab901de2a3216, 0x00001632 },
		{ 0x285fc8a57bbfe617, &exec_285fc8a57bbfe617, 0x00002977 },
		{ 0x38210c9156f4f41e, &exec_38210c9156f4f41e, 0x00001642 },
		{ 0xd463584009a40158, &exec_d463584009a40158, 0x00001648 },
		{ 0x64815ee7893ae692, &exec_64815ee7893ae692, 0x0000441b },
		{ 0x9f121704a44632b7, &exec_9f121704a44632b7, 0x0000164d },
		{ 0x36be4c433a64b15e, &exec_36be4c433a64b15e, 0x00001650 },
		{ 0xf0b29ee87680fd51, &exec_f0b29ee87680fd51, 0x00001653 },
		{ 0x5c505ad09a46290a, &exec_5c505ad09a46290a, 0x000018c2 },
		{ 0x3d9ac63f5097a7a9, &exec_3d9ac63f5097a7a9, 0x0000165a },
		{ 0x8f79258c8290c853, &exec_8f79258c8290c853, 0x00001660 },
		{ 0x63a76fbec885e6d2, &exec_63a76fbec885e6d2, 0x00001662 },
		{ 0x1f84f505f81c1b64, &exec_1f84f505f81c1b64, 0x00002257 },
		{ 0x64b1e48d9ff19546, &exec_64b1e48d9ff19546, 0x00000000 },
		{ 0x6a733b1acf6753d8, &exec_6a733b1acf6753d8, 0x0000167a },
		{ 0x7a301f9b0476bc59, &exec_7a301f9b0476bc59, 0x0000167c },
		{ 0xe4be528ac1f4a44c, &exec_e4be528ac1f4a44c, 0x000026ee },
		{ 0x9a04094631ef4151, &exec_9a04094631ef4151, 0x00001683 },
		{ 0x950315f4800742bb, &exec_950315f4800742bb, 0x000030b4 },
		{ 0x131ca8abd65fb529, &exec_131ca8abd65fb529, 0x00003d95 },
		{ 0x8a7199ab6c3684a7, &exec_8a7199ab6c3684a7, 0x00001688 },
		{ 0x2889dd4bbce021b0, &exec_2889dd4bbce021b0, 0x00001693 },
		{ 0x93d129ce14781b54, &exec_93d129ce14781b54, 0x00001699 },
		{ 0xb93c023f369c1c17, &exec_b93c023f369c1c17, 0x0000169c },
		{ 0x13a7fc99cab528e9, &exec_13a7fc99cab528e9, 0x00003726 },
		{ 0xb8e4836688c31419, &exec_b8e4836688c31419, 0x0000169f },
		{ 0xc572eed81133e31a, &exec_c572eed81133e31a, 0x000016a7 },
		{ 0x41c171cb86d60d76, &exec_41c171cb86d60d76, 0x000016aa },
		{ 0x3a712a13c11a6572, &exec_3a712a13c11a6572, 0x000016af },
		{ 0x956084de5f421d90, &exec_956084de5f421d90, 0x000016b4 },
		{ 0xa0dee98a2a032d48, &exec_a0dee98a2a032d48, 0x000016be },
		{ 0x1c959c8fca5c2648, &exec_1c959c8fca5c2648, 0x000016ca },
		{ 0x8001d56efab1919c, &exec_8001d56efab1919c, 0x000016ce },
		{ 0xbd21c3e49ac421fd, &exec_bd21c3e49ac421fd, 0x000016d6 },
		{ 0xadba167ec87d6550, &exec_adba167ec87d6550, 0x000016df },
		{ 0xa7dfdd856df77526, &exec_a7dfdd856df77526, 0x000016e1 },
		{ 0xeb2dd1fb8e8a7eb6, &exec_eb2dd1fb8e8a7eb6, 0x000016e4 },
		{ 0xa431366786e00265, &exec_a431366786e00265, 0x000016e8 },
		{ 0xf6fe2801641e9e37, &exec_f6fe2801641e9e37, 0x000048dd },
		{ 0x7f7a40fa4198957b, &exec_7f7a40fa4198957b, 0x000016eb },
		{ 0x6102b3d22b5bff78, &exec_6102b3d22b5bff78, 0x0000491f },
		{ 0xfe5f7e7028574a83, &exec_fe5f7e7028574a83, 0x000016ee },
		{ 0xf8b7e97b74a7df28, &exec_f8b7e97b74a7df28, 0x0000244f },
		{ 0xad82d2755dd2f95b, &exec_ad82d2755dd2f95b, 0x000016f6 },
		{ 0x50e9076ddf32a7b9, &exec_50e9076ddf32a7b9, 0x00001704 },
		{ 0x2f697f821fed3401, &exec_2f697f821fed3401, 0x0000170c },
		{ 0x8c25a838b65a3bdc, &exec_8c25a838b65a3bdc, 0x00001710 },
		{ 0xe98eb2146ea7cd9f, &exec_e98eb2146ea7cd9f, 0x00001ce3 },
		{ 0x9369accdcc0e2c14, &exec_9369accdcc0e2c14, 0x00003fbc },
		{ 0x24223fe9a9e975b4, &exec_24223fe9a9e975b4, 0x00000000 },
		{ 0x52647d3a1b7644da, &exec_52647d3a1b7644da, 0x00001715 },
		{ 0x6d729d91da272e3a, &exec_6d729d91da272e3a, 0x0000200b },
		{ 0x32e36c9e41599a74, &exec_32e36c9e41599a74, 0x0000171e },
		{ 0xb7b542e031afa50b, &exec_b7b542e031afa50b, 0x00001722 },
		{ 0x4492db712042837d, &exec_4492db712042837d, 0x00001726 },
		{ 0x77ee9e29cc01870a, &exec_77ee9e29cc01870a, 0x00001729 },
		{ 0xf86e94681ce35e35, &exec_f86e94681ce35e35, 0x000032a1 },
		{ 0xfdc230e7cc4cc39a, &exec_fdc230e7cc4cc39a, 0x00001b8e },
		{ 0x8d6156b04768e762, &exec_8d6156b04768e762, 0x00002094 },
		{ 0xb721c60cf4b1818e, &exec_b721c60cf4b1818e, 0x0000173d },
		{ 0x39a36b4ffcfa957f, &exec_39a36b4ffcfa957f, 0x00001742 },
		{ 0xaed4cccd90e5f51a, &exec_aed4cccd90e5f51a, 0x00001754 },
		{ 0xb808eafee0f52dc4, &exec_b808eafee0f52dc4, 0x00001759 },
		{ 0x57fc47bc1644e921, &exec_57fc47bc1644e921, 0x000039e4 },
		{ 0xf8dbd2565e0ccec7, &exec_f8dbd2565e0ccec7, 0x0000232f },
		{ 0xb2dd7a35008f3545, &exec_b2dd7a35008f3545, 0x0000175c },
		{ 0x5055b1e221243276, &exec_5055b1e221243276, 0x00001762 },
		{ 0x853201cd8faafe17, &exec_853201cd8faafe17, 0x00001774 },
		{ 0x76fcf47dd1cd05b6, &exec_76fcf47dd1cd05b6, 0x00003978 },
		{ 0x2855e9f90e1746bd, &exec_2855e9f90e1746bd, 0x00001779 },
		{ 0x3ccea2a0a1fa18da, &exec_3ccea2a0a1fa18da, 0x0000177d },
		{ 0x7fe682b93d58cade, &exec_7fe682b93d58cade, 0x00001d55 },
		{ 0xd042773cb13ce530, &exec_d042773cb13ce530, 0x00001781 },
		{ 0xfca1344bdcc99a13, &exec_fca1344bdcc99a13, 0x00001787 },
		{ 0xcdcb777711af8a88, &exec_cdcb777711af8a88, 0x00002c5b },
		{ 0x02ddfe7be9b1344c, &exec_02ddfe7be9b1344c, 0x0000178b },
		{ 0x353d20b7ba884ef8, &exec_353d20b7ba884ef8, 0x00001969 },
		{ 0xf6ad875ceb8fdd9e, &exec_f6ad875ceb8fdd9e, 0x00001797 },
		{ 0xfd4559f0972c2ef7, &exec_fd4559f0972c2ef7, 0x00001839 },
		{ 0x5ee7bbefb378b00b, &exec_5ee7bbefb378b00b, 0x00003163 },
		{ 0xa4ed6065a692ea37, &exec_a4ed6065a692ea37, 0x000017a0 },
		{ 0x7e22461ed9aa18f9, &exec_7e22461ed9aa18f9, 0x000017a3 },
		{ 0x8d9fa9cd1a54994f, &exec_8d9fa9cd1a54994f, 0x000017e6 },
		{ 0x9f961976797a8a25, &exec_9f961976797a8a25, 0x00001bee },
		{ 0x007546e8b94b9d0f, &exec_007546e8b94b9d0f, 0x000020ce },
		{ 0xc60998463d5f1618, &exec_c60998463d5f1618, 0x000017a5 },
		{ 0xf9caa79059bd7692, &exec_f9caa79059bd7692, 0x00001bd0 },
		{ 0x8353b7af7f59bd89, &exec_8353b7af7f59bd89, 0x000024a9 },
		{ 0x4fc42468f19a242a, &exec_4fc42468f19a242a, 0x000017ad },
		{ 0x729aa7c85c566ee8, &exec_729aa7c85c566ee8, 0x000017b3 },
		{ 0x85dae9f863d4c736, &exec_85dae9f863d4c736, 0x000017ba },
		{ 0x0465690615527e10, &exec_0465690615527e10, 0x00001cfe },
		{ 0x33b7561d42060282, &exec_33b7561d42060282, 0x00002553 },
		{ 0x435c6c8d92b166d8, &exec_435c6c8d92b166d8, 0x000017c4 },
		{ 0xd58328b978ea6a0b, &exec_d58328b978ea6a0b, 0x00004681 },
		{ 0xd6a1c30a92e732b5, &exec_d6a1c30a92e732b5, 0x000017d8 },
		{ 0x292207cc9362e6de, &exec_292207cc9362e6de, 0x000025a4 },
		{ 0xde4da2de98b760db, &exec_de4da2de98b760db, 0x000017dc },
		{ 0x6001d9b7b7b337d1, &exec_6001d9b7b7b337d1, 0x000017e9 },
		{ 0x5d936bf76bba5c76, &exec_5d936bf76bba5c76, 0x00001d75 },
		{ 0x1ef1238bb901061d, &exec_1ef1238bb901061d, 0x000017f3 },
		{ 0xf08f6433e1439e73, &exec_f08f6433e1439e73, 0x000017fd },
		{ 0x375483074c2282a8, &exec_375483074c2282a8, 0x00001801 },
		{ 0xd865b82095bd81ae, &exec_d865b82095bd81ae, 0x00001806 },
		{ 0x74ca0b13af4fed62, &exec_74ca0b13af4fed62, 0x0000180f },
		{ 0x13468aa9abdb7902, &exec_13468aa9abdb7902, 0x00001813 },
		{ 0xea1acced8ba48ee8, &exec_ea1acced8ba48ee8, 0x00002368 },
		{ 0x55bc3bd90dbd7341, &exec_55bc3bd90dbd7341, 0x00001823 },
		{ 0xc96709ecba05d23e, &exec_c96709ecba05d23e, 0x0000182c },
		{ 0x49ce335f0dca59bf, &exec_49ce335f0dca59bf, 0x00002daa },
		{ 0xf99b3e77605e19a6, &exec_f99b3e77605e19a6, 0x00001835 },
		{ 0x7b3ac69b91b95ee5, &exec_7b3ac69b91b95ee5, 0x00003dc8 },
		{ 0x94ca4610772034b4, &exec_94ca4610772034b4, 0x00001f21 },
		{ 0x239d694151c9c300, &exec_239d694151c9c300, 0x00001851 },
		{ 0x7d73aa3bc964551b, &exec_7d73aa3bc964551b, 0x00001856 },
		{ 0x48ecc79c1f1d96c1, &exec_48ecc79c1f1d96c1, 0x0000185d },
		{ 0x95d48ae62fe106cf, &exec_95d48ae62fe106cf, 0x00001865 },
		{ 0xe3d044f86cc0f15e, &exec_e3d044f86cc0f15e, 0x00001868 },
		{ 0x0437a91518f89c10, &exec_0437a91518f89c10, 0x0000186c },
		{ 0x65ae0501044681a1, &exec_65ae0501044681a1, 0x00001871 },
		{ 0x30e7c1358d199331, &exec_30e7c1358d199331, 0x0000195e },
		{ 0xcf83fdb852af7162, &exec_cf83fdb852af7162, 0x00001876 },
		{ 0x1f4a683a1659a134, &exec_1f4a683a1659a134, 0x00002271 },
		{ 0x6279715f96bb8090, &exec_6279715f96bb8090, 0x00001878 },
		{ 0x5437cdc35a836c62, &exec_5437cdc35a836c62, 0x0000187d },
		{ 0xe11a5fa69cc3b08f, &exec_e11a5fa69cc3b08f, 0x000036d4 },
		{ 0xad7cdaf9e9148872, &exec_ad7cdaf9e9148872, 0x00003142 },
		{ 0x0a1bc7573cd6cc4e, &exec_0a1bc7573cd6cc4e, 0x00001881 },
		{ 0x2fd37b5b34b1aaf7, &exec_2fd37b5b34b1aaf7, 0x00000000 },
		{ 0xd3d1b7476b9b54d8, &exec_d3d1b7476b9b54d8, 0x00001884 },
		{ 0x933a287913da8757, &exec_933a287913da8757, 0x000023c3 },
		{ 0x3fcd693e6b815ca9, &exec_3fcd693e6b815ca9, 0x00003229 },
		{ 0xcb0575da8ea0a0f3, &exec_cb0575da8ea0a0f3, 0x00001888 },
		{ 0xe12edf56d8f7396c, &exec_e12edf56d8f7396c, 0x00001893 },
		{ 0xd6dfdfb6ad002aac, &exec_d6dfdfb6ad002aac, 0x00001896 },
		{ 0x7079a0b5fcd88e94, &exec_7079a0b5fcd88e94, 0x00002794 },
		{ 0x6935762181d9998e, &exec_6935762181d9998e, 0x000018a8 },
		{ 0x59c0dc2ed17e11f8, &exec_59c0dc2ed17e11f8, 0x000041e9 },
		{ 0x94901dbd64e885c5, &exec_94901dbd64e885c5, 0x000019ca },
		{ 0xd71cf242993095cf, &exec_d71cf242993095cf, 0x0000451c },
		{ 0x8fc998ce1e0568bf, &exec_8fc998ce1e0568bf, 0x00004513 },
		{ 0x1250154108dcf247, &exec_1250154108dcf247, 0x00001f26 },
		{ 0x612e7be5c58fd9c9, &exec_612e7be5c58fd9c9, 0x000018b5 },
		{ 0x0edf1a580250f3eb, &exec_0edf1a580250f3eb, 0x00004872 },
		{ 0x8a67316e41c73921, &exec_8a67316e41c73921, 0x00001918 },
		{ 0xecdb5dc92f9e636d, &exec_ecdb5dc92f9e636d, 0x0000450c },
		{ 0x5898c9f92f249c5a, &exec_5898c9f92f249c5a, 0x00001bad },
		{ 0x0cc312d267037b95, &exec_0cc312d267037b95, 0x000018ca },
		{ 0x8dace9b4ff153257, &exec_8dace9b4ff153257, 0x00001b28 },
		{ 0xc309612861abf2b4, &exec_c309612861abf2b4, 0x000018cd },
		{ 0xa258f3953c1e7834, &exec_a258f3953c1e7834, 0x000018d0 },
		{ 0x778af3542687b198, &exec_778af3542687b198, 0x000018d6 },
		{ 0x5307ee6f9ba05699, &exec_5307ee6f9ba05699, 0x000018df },
		{ 0x007653bd52fa5e1b, &exec_007653bd52fa5e1b, 0x00001f7d },
		{ 0x4b804cf2422826d0, &exec_4b804cf2422826d0, 0x000018eb },
		{ 0x39cf86fc39602d8d, &exec_39cf86fc39602d8d, 0x00004350 },
		{ 0x7fd2f582e77bec38, &exec_7fd2f582e77bec38, 0x000018fd },
		{ 0x1314f13dae16d9d5, &exec_1314f13dae16d9d5, 0x00002f5a },
		{ 0xb78ae67d6f73a61d, &exec_b78ae67d6f73a61d, 0x00003213 },
		{ 0xe8fea579fa0bde82, &exec_e8fea579fa0bde82, 0x00001902 },
		{ 0xf579fc73a308c49d, &exec_f579fc73a308c49d, 0x0000190c },
		{ 0xa2a264e49395b643, &exec_a2a264e49395b643, 0x00001c84 },
		{ 0x2fa8e0b171d3afb4, &exec_2fa8e0b171d3afb4, 0x0000470a },
		{ 0x531286cd78e04627, &exec_531286cd78e04627, 0x00004048 },
		{ 0xdcf9f55809b9870b, &exec_dcf9f55809b9870b, 0x00003ce7 },
		{ 0xbb051c5bc26a71d4, &exec_bb051c5bc26a71d4, 0x0000415e },
		{ 0x6bbd6b7143516be5, &exec_6bbd6b7143516be5, 0x0000191d },
		{ 0xf888a1f622e3e901, &exec_f888a1f622e3e901, 0x00001924 },
		{ 0x4eacc162c6eec3a8, &exec_4eacc162c6eec3a8, 0x0000192a },
		{ 0x233b31b14dd76dd2, &exec_233b31b14dd76dd2, 0x0000192e },
		{ 0x2d1aeb303c47abc0, &exec_2d1aeb303c47abc0, 0x00001934 },
		{ 0xc05382dbcf50e8cb, &exec_c05382dbcf50e8cb, 0x00001937 },
		{ 0x8ef847d5e1f23d4f, &exec_8ef847d5e1f23d4f, 0x0000193d },
		{ 0xeffa84d3edb7e343, &exec_effa84d3edb7e343, 0x00002b44 },
		{ 0xb0c3ee7ad25410bb, &exec_b0c3ee7ad25410bb, 0x0000193f },
		{ 0x681a72c26bb50d71, &exec_681a72c26bb50d71, 0x00003e69 },
		{ 0x0d36959f38b0dd3e, &exec_0d36959f38b0dd3e, 0x00001944 },
		{ 0xea7f344ee7082f2b, &exec_ea7f344ee7082f2b, 0x0000233e },
		{ 0x1edcf2b6d1e36f28, &exec_1edcf2b6d1e36f28, 0x00002b77 },
		{ 0xc5e0a37c51c71136, &exec_c5e0a37c51c71136, 0x0000280f },
		{ 0x604e77f987a33bec, &exec_604e77f987a33bec, 0x0000194d },
		{ 0xcc3bced0fce2188a, &exec_cc3bced0fce2188a, 0x00001956 },
		{ 0x5b6cc4bff0a17e0b, &exec_5b6cc4bff0a17e0b, 0x00004661 },
		{ 0xc169d0a110f21acd, &exec_c169d0a110f21acd, 0x00004364 },
		{ 0x5abaee2d6ba2d939, &exec_5abaee2d6ba2d939, 0x0000250d },
		{ 0xa21e8de4ee00f269, &exec_a21e8de4ee00f269, 0x00001962 },
		{ 0xef1f2e2ab26b5fc0, &exec_ef1f2e2ab26b5fc0, 0x00001976 },
		{ 0xf57d11afe30bb07a, &exec_f57d11afe30bb07a, 0x00001e67 },
		{ 0xcc07773d6c9e2c72, &exec_cc07773d6c9e2c72, 0x0000197a },
		{ 0x940591e8a51205eb, &exec_940591e8a51205eb, 0x00001982 },
		{ 0x4fb472865afd5aaf, &exec_4fb472865afd5aaf, 0x00002f9c },
		{ 0x0552e94fd7e1f2b6, &exec_0552e94fd7e1f2b6, 0x00001988 },
		{ 0xb24d427a66bf8806, &exec_b24d427a66bf8806, 0x00001993 },
		{ 0x61c8bac9c46c1860, &exec_61c8bac9c46c1860, 0x00001999 },
		{ 0x56ee757b6e1103ba, &exec_56ee757b6e1103ba, 0x00001a1d },
		{ 0x53e920228f9188c7, &exec_53e920228f9188c7, 0x00002ee0 },
		{ 0xe810714eea779759, &exec_e810714eea779759, 0x000019b1 },
		{ 0xdce1fe93613109db, &exec_dce1fe93613109db, 0x000019bc },
		{ 0xcb9bf06ea545a3c8, &exec_cb9bf06ea545a3c8, 0x000019c0 },
		{ 0xe0510c3fa776480d, &exec_e0510c3fa776480d, 0x000019c5 },
		{ 0x4fd7d0042c9c2c56, &exec_4fd7d0042c9c2c56, 0x00003885 },
		{ 0x7ce0e6eb923722dc, &exec_7ce0e6eb923722dc, 0x00001db6 },
		{ 0x0dccdf5395bfabe2, &exec_0dccdf5395bfabe2, 0x000019d0 },
		{ 0x77ce6dfefe5ddd52, &exec_77ce6dfefe5ddd52, 0x000036cf },
		{ 0xee5bd24db92bc94d, &exec_ee5bd24db92bc94d, 0x000019dc },
		{ 0x8a3bb591094fa919, &exec_8a3bb591094fa919, 0x000019e7 },
		{ 0xab5828e12381849d, &exec_ab5828e12381849d, 0x0000230f },
		{ 0x6067f7b0577f70ad, &exec_6067f7b0577f70ad, 0x000019f1 },
		{ 0x9b302ccc80319314, &exec_9b302ccc80319314, 0x000019f9 },
		{ 0x4672acca0c323d94, &exec_4672acca0c323d94, 0x000019fb },
		{ 0x0f088793efe51752, &exec_0f088793efe51752, 0x000019fe },
		{ 0x910acc3552314ee2, &exec_910acc3552314ee2, 0x00001a07 },
		{ 0xdbaa429710ef6248, &exec_dbaa429710ef6248, 0x00003dca },
		{ 0x6b64152a401c2f66, &exec_6b64152a401c2f66, 0x00001fcd },
		{ 0x5980cb90b3a9f50f, &exec_5980cb90b3a9f50f, 0x00001a0e },
		{ 0xbf9e6461a36d83e3, &exec_bf9e6461a36d83e3, 0x00001a13 },
		{ 0xf83a67f9e23a21f9, &exec_f83a67f9e23a21f9, 0x00001ed1 },
		{ 0xf6befb5c2fa9888d, &exec_f6befb5c2fa9888d, 0x0000429a },
		{ 0x8aead1fa2a1780b7, &exec_8aead1fa2a1780b7, 0x00002a73 },
		{ 0x74f9e6c8e743c816, &exec_74f9e6c8e743c816, 0x000045bb },
		{ 0x78527c5fefefb1ab, &exec_78527c5fefefb1ab, 0x00001a17 },
		{ 0xe991195798134def, &exec_e991195798134def, 0x00001a2a },
		{ 0xff898e38896f408a, &exec_ff898e38896f408a, 0x00001a37 },
		{ 0xce7148c4108f6dd6, &exec_ce7148c4108f6dd6, 0x00002545 },
		{ 0x2538f3b9a27de9e8, &exec_2538f3b9a27de9e8, 0x00001a3c },
		{ 0xf94708b0fc0c3a93, &exec_f94708b0fc0c3a93, 0x00001a40 },
		{ 0xda239ac97f50e597, &exec_da239ac97f50e597, 0x00003e6c },
		{ 0x907164de09de55f2, &exec_907164de09de55f2, 0x000023c9 },
		{ 0x6957676c13b2db6d, &exec_6957676c13b2db6d, 0x000028f3 },
		{ 0x0e7128861bbb8c71, &exec_0e7128861bbb8c71, 0x00001a52 },
		{ 0x258d30f8a41fb1d0, &exec_258d30f8a41fb1d0, 0x00001a5a },
		{ 0xe5d0bdd8c7d74c30, &exec_e5d0bdd8c7d74c30, 0x00001a5e },
		{ 0xe6925d0120774bbc, &exec_e6925d0120774bbc, 0x000023c0 },
		{ 0x9a01dc6adfe8007f, &exec_9a01dc6adfe8007f, 0x00001a65 },
		{ 0x12bb979d1a838874, &exec_12bb979d1a838874, 0x00002942 },
		{ 0xcdc5037add10d43b, &exec_cdc5037add10d43b, 0x00002679 },
		{ 0xd9a7233bb40eef99, &exec_d9a7233bb40eef99, 0x000034d3 },
		{ 0x6c9720498434b2dc, &exec_6c9720498434b2dc, 0x00001c5f },
		{ 0x4efa7d5c3a9df68b, &exec_4efa7d5c3a9df68b, 0x00001f86 },
		{ 0xf78c0b4d6ee73099, &exec_f78c0b4d6ee73099, 0x00001a7e },
		{ 0x3e9f489b1275e448, &exec_3e9f489b1275e448, 0x00001a86 },
		{ 0xac8e1e4200140458, &exec_ac8e1e4200140458, 0x00001a8d },
		{ 0x04b91274dc3ba0a7, &exec_04b91274dc3ba0a7, 0x00002346 },
		{ 0xaa533f2e46e81558, &exec_aa533f2e46e81558, 0x00001a91 },
		{ 0x21254d2b404eb6e1, &exec_21254d2b404eb6e1, 0x000034c3 },
		{ 0xe7cf2a964014a370, &exec_e7cf2a964014a370, 0x00001a9b },
		{ 0x29f984c42352dcc3, &exec_29f984c42352dcc3, 0x00001aa2 },
		{ 0x99257b8a98c86dfa, &exec_99257b8a98c86dfa, 0x00001aa6 },
		{ 0x7034c10a7ae3287a, &exec_7034c10a7ae3287a, 0x00001aa9 },
		{ 0x8896b4d9e2ede1fc, &exec_8896b4d9e2ede1fc, 0x00004910 },
		{ 0xeb6d0736786781a8, &exec_eb6d0736786781a8, 0x00001aad },
		{ 0x220d631fa1fc6177, &exec_220d631fa1fc6177, 0x00001ab2 },
		{ 0x920bb3831dddd9b4, &exec_920bb3831dddd9b4, 0x00001abc },
		{ 0xd0e88995f65a8ee0, &exec_d0e88995f65a8ee0, 0x00001b99 },
		{ 0x74978ff62d9b9936, &exec_74978ff62d9b9936, 0x00001acc },
		{ 0x307f1f50bcdd9d87, &exec_307f1f50bcdd9d87, 0x00001ad3 },
		{ 0x5ff60f5bc262597c, &exec_5ff60f5bc262597c, 0x00001ae1 },
		{ 0x251cc0f3191bac6c, &exec_251cc0f3191bac6c, 0x00001aef },
		{ 0x453dc81c6f998b4f, &exec_453dc81c6f998b4f, 0x00001ae7 },
		{ 0x3d21a3b41190050d, &exec_3d21a3b41190050d, 0x00001b00 },
		{ 0x7e1c20ff5e01c5f8, &exec_7e1c20ff5e01c5f8, 0x00001b7f },
		{ 0xf3bea93a6f962c23, &exec_f3bea93a6f962c23, 0x00001b0b },
		{ 0x7cf0cc93cfa75b24, &exec_7cf0cc93cfa75b24, 0x00004053 },
		{ 0xdfb2096990e64845, &exec_dfb2096990e64845, 0x0000216c },
		{ 0x09dbdf9c974ed997, &exec_09dbdf9c974ed997, 0x00001b13 },
		{ 0x93eb859005517e60, &exec_93eb859005517e60, 0x00001b16 },
		{ 0x83317c6fa4518893, &exec_83317c6fa4518893, 0x00001b19 },
		{ 0x74f63ceab06968a7, &exec_74f63ceab06968a7, 0x0000394f },
		{ 0xbe8e116fa6298bb0, &exec_be8e116fa6298bb0, 0x00001b1c },
		{ 0xdc1f22e3e904ec81, &exec_dc1f22e3e904ec81, 0x00000000 },
		{ 0x1101f3b9697de998, &exec_1101f3b9697de998, 0x00001b35 },
		{ 0x4bc54645db56d06a, &exec_4bc54645db56d06a, 0x00001b3d },
		{ 0x261296808d40f0d8, &exec_261296808d40f0d8, 0x00001f8c },
		{ 0xc19e5d8007974fec, &exec_c19e5d8007974fec, 0x00001b40 },
		{ 0x3dea2d1be1d83511, &exec_3dea2d1be1d83511, 0x00002244 },
		{ 0x7b9158c554b1a984, &exec_7b9158c554b1a984, 0x00001b43 },
		{ 0xe8a7e05646450ab4, &exec_e8a7e05646450ab4, 0x00002b22 },
		{ 0x0840cbf7d8e8ab1d, &exec_0840cbf7d8e8ab1d, 0x00001b46 },
		{ 0xbab0fc31de08ae99, &exec_bab0fc31de08ae99, 0x00001b58 },
		{ 0x065bc2fc15c061f4, &exec_065bc2fc15c061f4, 0x00001b5b },
		{ 0xd14bffbfee4925e0, &exec_d14bffbfee4925e0, 0x00001b63 },
		{ 0xbeee051f294e218a, &exec_beee051f294e218a, 0x00003b53 },
		{ 0xcd95cbac94031ed9, &exec_cd95cbac94031ed9, 0x00001b67 },
		{ 0xd4bc69f1e9db1ae3, &exec_d4bc69f1e9db1ae3, 0x00001b76 },
		{ 0xee8c137a79739ef2, &exec_ee8c137a79739ef2, 0x00001b8a },
		{ 0xdcb68585beabacdf, &exec_dcb68585beabacdf, 0x000024b8 },
		{ 0x43c20d5e1ccbd0ab, &exec_43c20d5e1ccbd0ab, 0x00001b9e },
		{ 0xa1ae8cb524b84078, &exec_a1ae8cb524b84078, 0x00003cc6 },
		{ 0x96a368e72fe766a1, &exec_96a368e72fe766a1, 0x00002b7d },
		{ 0xd6aa1772a8d4c8b5, &exec_d6aa1772a8d4c8b5, 0x00001bb0 },
		{ 0x15019e8eb20bccd6, &exec_15019e8eb20bccd6, 0x00004018 },
		{ 0x4fbd0e652625def6, &exec_4fbd0e652625def6, 0x00001bb9 },
		{ 0x78d283fa5ba372b1, &exec_78d283fa5ba372b1, 0x00001bc2 },
		{ 0x570634a851627fff, &exec_570634a851627fff, 0x00001d1e },
		{ 0xe492942a4369a917, &exec_e492942a4369a917, 0x00001bcb },
		{ 0x8a151c14402534a7, &exec_8a151c14402534a7, 0x00001bda },
		{ 0x529a75b1d3376023, &exec_529a75b1d3376023, 0x00001be4 },
		{ 0x143107c605c60650, &exec_143107c605c60650, 0x00001be9 },
		{ 0xbfd54aa1525d7694, &exec_bfd54aa1525d7694, 0x00003ddb },
		{ 0x0f4daf13c2f2b9ab, &exec_0f4daf13c2f2b9ab, 0x00001bf1 },
		{ 0xd51479eedde85370, &exec_d51479eedde85370, 0x00001bf5 },
		{ 0xd3b2418dc7bf530c, &exec_d3b2418dc7bf530c, 0x000024f2 },
		{ 0xa4d567a2c00e27bf, &exec_a4d567a2c00e27bf, 0x00001bf9 },
		{ 0x9b3b5f9f14392d35, &exec_9b3b5f9f14392d35, 0x00001bfe },
		{ 0x2f4e4f821fd61ab9, &exec_2f4e4f821fd61ab9, 0x00001c0a },
		{ 0x86088e4cc16d3aaf, &exec_86088e4cc16d3aaf, 0x00001c0e },
		{ 0x88b8e7bbb235374c, &exec_88b8e7bbb235374c, 0x00002eb6 },
		{ 0x631ae664f091664c, &exec_631ae664f091664c, 0x00001c13 },
		{ 0xd3993e301b672808, &exec_d3993e301b672808, 0x00003b44 },
		{ 0x3aa5667969501d44, &exec_3aa5667969501d44, 0x0000384e },
		{ 0x7d1fee98ee96e12c, &exec_7d1fee98ee96e12c, 0x00003ea5 },
		{ 0xb043dd588019b92f, &exec_b043dd588019b92f, 0x00002dcb },
		{ 0xa016d8aee559be49, &exec_a016d8aee559be49, 0x00001c21 },
		{ 0x6da1a57f4cdce570, &exec_6da1a57f4cdce570, 0x000021ee },
		{ 0xa98a957a73f3d9b4, &exec_a98a957a73f3d9b4, 0x000043f4 },
		{ 0xd5376d3f2ece96b0, &exec_d5376d3f2ece96b0, 0x00001c2c },
		{ 0xf8ac07068a6eb902, &exec_f8ac07068a6eb902, 0x00001c30 },
		{ 0xd160824d86d8a4ec, &exec_d160824d86d8a4ec, 0x00001c33 },
		{ 0x471a4f804b933beb, &exec_471a4f804b933beb, 0x00001ef8 },
		{ 0x56a7e582cd02fceb, &exec_56a7e582cd02fceb, 0x000044d2 },
		{ 0x7628690a59375d22, &exec_7628690a59375d22, 0x00001c36 },
		{ 0x6de3a279fe9b53eb, &exec_6de3a279fe9b53eb, 0x00002d26 },
		{ 0xed10ac6348cd64e9, &exec_ed10ac6348cd64e9, 0x00001c3a },
		{ 0x4fe75d7739b80ff9, &exec_4fe75d7739b80ff9, 0x00001c55 },
		{ 0xa84e7dcf8a0b8e14, &exec_a84e7dcf8a0b8e14, 0x0000220d },
		{ 0x3904f7d3ba6356fb, &exec_3904f7d3ba6356fb, 0x00004690 },
		{ 0x11c57506ce9a9447, &exec_11c57506ce9a9447, 0x00001c62 },
		{ 0x0af3b2eb1a059a30, &exec_0af3b2eb1a059a30, 0x00001c66 },
		{ 0xf31589bcff3d8216, &exec_f31589bcff3d8216, 0x00000000 },
		{ 0x2c5cbbd5479756ef, &exec_2c5cbbd5479756ef, 0x00003b9a },
		{ 0x51a7e2c802640007, &exec_51a7e2c802640007, 0x00001c6b },
		{ 0x4a1b49d66919d932, &exec_4a1b49d66919d932, 0x00000000 },
		{ 0xe3c0b9b612aba4f2, &exec_e3c0b9b612aba4f2, 0x00001c6e },
		{ 0xb7606e669bc859b8, &exec_b7606e669bc859b8, 0x00001c73 },
		{ 0x3f447aa981d34d51, &exec_3f447aa981d34d51, 0x00001c81 },
		{ 0x8fa0650f2e94cb8e, &exec_8fa0650f2e94cb8e, 0x0000243f },
		{ 0x45c8803424931195, &exec_45c8803424931195, 0x00001c8d },
		{ 0xb1fff72c28cf6e52, &exec_b1fff72c28cf6e52, 0x00001c9e },
		{ 0x021f153dbdf1fcf0, &exec_021f153dbdf1fcf0, 0x000033ce },
		{ 0xe7c549d9f948cc50, &exec_e7c549d9f948cc50, 0x00001cb2 },
		{ 0x4af6e165ee2c06dc, &exec_4af6e165ee2c06dc, 0x00000000 },
		{ 0xeea7437a798ab83a, &exec_eea7437a798ab83a, 0x00001d9e },
		{ 0x5e33bee95f619b96, &exec_5e33bee95f619b96, 0x00001cc1 },
		{ 0x144b9faa3aefd8d8, &exec_144b9faa3aefd8d8, 0x00001cc4 },
		{ 0xd92573c029a6d2ec, &exec_d92573c029a6d2ec, 0x00001ccd },
		{ 0x098b1e0d182d0c91, &exec_098b1e0d182d0c91, 0x00001cdb },
		{ 0x24d5b69f5c8eeb25, &exec_24d5b69f5c8eeb25, 0x0000456a },
		{ 0x4feb8d54aca7ef8f, &exec_4feb8d54aca7ef8f, 0x00001ce8 },
		{ 0x6cb9ab4e8f3a1848, &exec_6cb9ab4e8f3a1848, 0x0000435a },
		{ 0xcc2548abd96d0d81, &exec_cc2548abd96d0d81, 0x000028db },
		{ 0x26628ac24516704b, &exec_26628ac24516704b, 0x00001cf3 },
		{ 0x7a9bd2d3c9fa63e0, &exec_7a9bd2d3c9fa63e0, 0x0000457f },
		{ 0x1ddd4985f4fceb41, &exec_1ddd4985f4fceb41, 0x00001cf6 },
		{ 0xafbe53ac2e23fd13, &exec_afbe53ac2e23fd13, 0x0000255b },
		{ 0x16c041484b932dc7, &exec_16c041484b932dc7, 0x00002807 },
		{ 0x4c20751a3d3e24d3, &exec_4c20751a3d3e24d3, 0x00001d0f },
		{ 0xade88cb7e80958d6, &exec_ade88cb7e80958d6, 0x000038b4 },
		{ 0x94bcef182dbf44e7, &exec_94bcef182dbf44e7, 0x00001d25 },
		{ 0xd68f0b94c2e971b9, &exec_d68f0b94c2e971b9, 0x00001d65 },
		{ 0xc8b1905492021593, &exec_c8b1905492021593, 0x00001d27 },
		{ 0x40dccd33105b3f90, &exec_40dccd33105b3f90, 0x00001d2e },
		{ 0xc303c9082d6d7096, &exec_c303c9082d6d7096, 0x00001d34 },
		{ 0x2b559a2093aa4713, &exec_2b559a2093aa4713, 0x00001d39 },
		{ 0x1cd5ccd3ab977ec5, &exec_1cd5ccd3ab977ec5, 0x00001e0e },
		{ 0xc823c78007493411, &exec_c823c78007493411, 0x00003a14 },
		{ 0xce8300b5b6c3cc6c, &exec_ce8300b5b6c3cc6c, 0x00001d41 },
		{ 0x44a636f9c9dc46bc, &exec_44a636f9c9dc46bc, 0x00003d1d },
		{ 0x9a6307b9d6c8376e, &exec_9a6307b9d6c8376e, 0x00001d4f },
		{ 0xa44ce838168c41b1, &exec_a44ce838168c41b1, 0x00002ef8 },
		{ 0xe0cd03eddcf76c4d, &exec_e0cd03eddcf76c4d, 0x0000223e },
		{ 0x138cd09cd5563a45, &exec_138cd09cd5563a45, 0x00002939 },
		{ 0x8f2a42106451be4a, &exec_8f2a42106451be4a, 0x00001d6f },
		{ 0x44148f3f236d2777, &exec_44148f3f236d2777, 0x00001d73 },
		{ 0x36d3c25aeda7c90d, &exec_36d3c25aeda7c90d, 0x000021c7 },
		{ 0x646b8d8a9a700841, &exec_646b8d8a9a700841, 0x00001d7e },
		{ 0xbe0d270d814d555d, &exec_be0d270d814d555d, 0x000030d3 },
		{ 0x4b63a9376e5ebc2d, &exec_4b63a9376e5ebc2d, 0x00001d91 },
		{ 0x4854c665b06788c5, &exec_4854c665b06788c5, 0x00001d94 },
		{ 0x4df62f8038aa3837, &exec_4df62f8038aa3837, 0x000024f8 },
		{ 0x6132e3be50cf5792, &exec_6132e3be50cf5792, 0x00001da2 },
		{ 0xa14dc7c05d022690, &exec_a14dc7c05d022690, 0x00001dab },
		{ 0x987192ba583fe6f5, &exec_987192ba583fe6f5, 0x00001dbf },
		{ 0x7529a2ed1c3173d4, &exec_7529a2ed1c3173d4, 0x00001dcb },
		{ 0x3ac9644539117e5a, &exec_3ac9644539117e5a, 0x00001dcf },
		{ 0xb2e8d77e471b5c4f, &exec_b2e8d77e471b5c4f, 0x00001dd1 },
		{ 0xcf90baa154ed13da, &exec_cf90baa154ed13da, 0x00001dd5 },
		{ 0x46a0243a73909f56, &exec_46a0243a73909f56, 0x00001dd9 },
		{ 0x5c0e2efd3e4d4ccf, &exec_5c0e2efd3e4d4ccf, 0x0000270f },
		{ 0xeadc4bef3efc7a8d, &exec_eadc4bef3efc7a8d, 0x00001de6 },
		{ 0x0c38263f0877c8d1, &exec_0c38263f0877c8d1, 0x00001de9 },
		{ 0x651d341aec7fa895, &exec_651d341aec7fa895, 0x00001e4f },
		{ 0x7b7179a07610b675, &exec_7b7179a07610b675, 0x00001df2 },
		{ 0x509d7f154a0994b2, &exec_509d7f154a0994b2, 0x00001dfb },
		{ 0x2ec61db888c96995, &exec_2ec61db888c96995, 0x00001dfe },
		{ 0x8822e8cda7ca899c, &exec_8822e8cda7ca899c, 0x00001e05 },
		{ 0xdf325f3cb4027709, &exec_df325f3cb4027709, 0x00001e07 },
		{ 0x97f623e355120e49, &exec_97f623e355120e49, 0x00001e0b },
		{ 0xf4292d59f68d3e12, &exec_f4292d59f68d3e12, 0x00002a4d },
		{ 0x2ee00e54a7dcdf80, &exec_2ee00e54a7dcdf80, 0x000028d7 },
		{ 0xc77b44128e139fb4, &exec_c77b44128e139fb4, 0x00002237 },
		{ 0x306a9965d437c91c, &exec_306a9965d437c91c, 0x000047a5 },
		{ 0x60e3b14b2a363092, &exec_60e3b14b2a363092, 0x00002063 },
		{ 0xbecf4480b2251c20, &exec_becf4480b2251c20, 0x00001e15 },
		{ 0x34c2fbf0baea521d, &exec_34c2fbf0baea521d, 0x00004499 },
		{ 0x812a68f56b40ece6, &exec_812a68f56b40ece6, 0x00001e25 },
		{ 0xc81ee870d4e5af3e, &exec_c81ee870d4e5af3e, 0x00001e29 },
		{ 0x1bd6400ab323a12b, &exec_1bd6400ab323a12b, 0x00001e2c },
		{ 0x84b49998b535a743, &exec_84b49998b535a743, 0x00001e31 },
		{ 0x1d88cde942abd3cf, &exec_1d88cde942abd3cf, 0x00001e36 },
		{ 0xa3506bb5a7d0e18e, &exec_a3506bb5a7d0e18e, 0x00004292 },
		{ 0xc6ef4af11fe44c13, &exec_c6ef4af11fe44c13, 0x000027ea },
		{ 0x29903ec4ffa1273c, &exec_29903ec4ffa1273c, 0x00001e3e },
		{ 0x94d0b392d8f97ade, &exec_94d0b392d8f97ade, 0x00003f7a },
		{ 0xb0389d8637a60d7b, &exec_b0389d8637a60d7b, 0x00001e46 },
		{ 0x726ab14415b45118, &exec_726ab14415b45118, 0x00001e4d },
		{ 0x71760e9c36eb1bdf, &exec_71760e9c36eb1bdf, 0x00003763 },
		{ 0xa5873f8a59c7ae32, &exec_a5873f8a59c7ae32, 0x00002622 },
		{ 0x36ec06fc24ebe933, &exec_36ec06fc24ebe933, 0x00000000 },
		{ 0xccede7c38e44904e, &exec_ccede7c38e44904e, 0x0000224c },
		{ 0xc521f2b781e8a680, &exec_c521f2b781e8a680, 0x0000354a },
		{ 0x3de62c9eb8dc150c, &exec_3de62c9eb8dc150c, 0x00001e6b },
		{ 0x178e45511bc16ad7, &exec_178e45511bc16ad7, 0x00001e6f },
		{ 0x9b70ce2e9931e5b3, &exec_9b70ce2e9931e5b3, 0x00004608 },
		{ 0x10e116a73da17f10, &exec_10e116a73da17f10, 0x00001e82 },
		{ 0x6dbbcab87cdb2f70, &exec_6dbbcab87cdb2f70, 0x00001e84 },
		{ 0x58a02aef1ab91732, &exec_58a02aef1ab91732, 0x00001e8d },
		{ 0xb916d622660185f5, &exec_b916d622660185f5, 0x00001e8f },
		{ 0x7fb96bc63b924cb2, &exec_7fb96bc63b924cb2, 0x00000000 },
		{ 0x22b486471e288a46, &exec_22b486471e288a46, 0x00002639 },
		{ 0x3b7de46e8b1f5368, &exec_3b7de46e8b1f5368, 0x000024e7 },
		{ 0x882e2e2b045eecbc, &exec_882e2e2b045eecbc, 0x00001e9d },
		{ 0x296976045f3cf7bd, &exec_296976045f3cf7bd, 0x00001ead },
		{ 0x4bc1a6fb415660d3, &exec_4bc1a6fb415660d3, 0x0000451a },
		{ 0x910ca71e41a9ff65, &exec_910ca71e41a9ff65, 0x00001ec1 },
		{ 0xf86a2a899d31c2ab, &exec_f86a2a899d31c2ab, 0x000024ae },
		{ 0xf484ced1bf87b4e7, &exec_f484ced1bf87b4e7, 0x00001ed5 },
		{ 0x441430934e1097c1, &exec_441430934e1097c1, 0x000045cb },
		{ 0x90c6be7792647a48, &exec_90c6be7792647a48, 0x000032b7 },
		{ 0x7a35e71df673058b, &exec_7a35e71df673058b, 0x00001ede },
		{ 0x4f7e23620ba68a31, &exec_4f7e23620ba68a31, 0x00003109 },
		{ 0xa6b9eeefa0eea53c, &exec_a6b9eeefa0eea53c, 0x00001ee3 },
		{ 0x17597fe87da2eded, &exec_17597fe87da2eded, 0x00001ee8 },
		{ 0x6dd8a3ac890d9d5c, &exec_6dd8a3ac890d9d5c, 0x00001eed },
		{ 0x1f64c65cc635fe71, &exec_1f64c65cc635fe71, 0x00002475 },
		{ 0x8821bec7e342b62e, &exec_8821bec7e342b62e, 0x000023d9 },
		{ 0x4733a50d629f380e, &exec_4733a50d629f380e, 0x00001f02 },
		{ 0x0f4f39a12b563d4b, &exec_0f4f39a12b563d4b, 0x00002525 },
		{ 0x0f8019ec89537556, &exec_0f8019ec89537556, 0x00002d9b },
		{ 0xe5e69a30766f7c8f, &exec_e5e69a30766f7c8f, 0x00001f07 },
		{ 0x6360e4b2807e0cc2, &exec_6360e4b2807e0cc2, 0x00001f09 },
		{ 0x2152e18cb58b8370, &exec_2152e18cb58b8370, 0x00002ceb },
		{ 0x90ae7a03f6e91144, &exec_90ae7a03f6e91144, 0x00002852 },
		{ 0x80bce843b94c0fd6, &exec_80bce843b94c0fd6, 0x000036a9 },
		{ 0x8b4db518acc07fe1, &exec_8b4db518acc07fe1, 0x00003236 },
		{ 0x966ccb8e8aa6217e, &exec_966ccb8e8aa6217e, 0x0000426e },
		{ 0x46aa24583b341573, &exec_46aa24583b341573, 0x00003244 },
		{ 0x842766d3c2344fd0, &exec_842766d3c2344fd0, 0x00001f1d },
		{ 0x916095f67a6b8cf5, &exec_916095f67a6b8cf5, 0x00004167 },
		{ 0x55d1d56581a94ea1, &exec_55d1d56581a94ea1, 0x00002d19 },
		{ 0xc79d5d9186011c22, &exec_c79d5d9186011c22, 0x00001f2b },
		{ 0x00571ad5549f6e00, &exec_00571ad5549f6e00, 0x00001f36 },
		{ 0xbd1f36e8565ec1fd, &exec_bd1f36e8565ec1fd, 0x00001f3b },
		{ 0x7febb6f70d866fb8, &exec_7febb6f70d866fb8, 0x00001f40 },
		{ 0xe6979d0b26a72004, &exec_e6979d0b26a72004, 0x00001f4e },
		{ 0xc091bf8baebea72d, &exec_c091bf8baebea72d, 0x00001f51 },
		{ 0xec9b3dc87c7fedcd, &exec_ec9b3dc87c7fedcd, 0x00001f54 },
		{ 0xc287f9be7c2e1d0a, &exec_c287f9be7c2e1d0a, 0x00001f60 },
		{ 0x720b0bab4dbee42e, &exec_720b0bab4dbee42e, 0x00001f62 },
		{ 0xce57ff124ee8f8e9, &exec_ce57ff124ee8f8e9, 0x00004469 },
		{ 0x814a594840fd9f8b, &exec_814a594840fd9f8b, 0x00001f67 },
		{ 0xe70c5364e9cf477f, &exec_e70c5364e9cf477f, 0x00001f6c },
		{ 0xda4ac73cb2f78b8e, &exec_da4ac73cb2f78b8e, 0x00001f80 },
		{ 0x72dd420df9ca8f13, &exec_72dd420df9ca8f13, 0x0000459a },
		{ 0xaeec37be096b76e7, &exec_aeec37be096b76e7, 0x00001f98 },
		{ 0xed14e2e7ad8b0978, &exec_ed14e2e7ad8b0978, 0x000034f2 },
		{ 0x353fa3cc6bc73286, &exec_353fa3cc6bc73286, 0x00001fa8 },
		{ 0x1af789c656055e5c, &exec_1af789c656055e5c, 0x00001faf },
		{ 0x0ba8baba9edf2904, &exec_0ba8baba9edf2904, 0x00001fb6 },
		{ 0x2cc5258f0faeb1fa, &exec_2cc5258f0faeb1fa, 0x00002407 },
		{ 0x1489cbd588a8a95b, &exec_1489cbd588a8a95b, 0x00004396 },
		{ 0x5b8fe5accd70e299, &exec_5b8fe5accd70e299, 0x00003366 },
		{ 0x20f09e8050e44649, &exec_20f09e8050e44649, 0x00001fbf },
		{ 0x02e384ccaf9be163, &exec_02e384ccaf9be163, 0x00001fc3 },
		{ 0x9f7117b6c9128563, &exec_9f7117b6c9128563, 0x0000251d },
		{ 0x73d654ed8567f61d, &exec_73d654ed8567f61d, 0x00001fc7 },
		{ 0x6420463ce869b015, &exec_6420463ce869b015, 0x00002520 },
		{ 0x520a40d99c334768, &exec_520a40d99c334768, 0x00001fe0 },
		{ 0xecc71cb9dc2f5bab, &exec_ecc71cb9dc2f5bab, 0x000020b4 },
		{ 0xf86e78912140efbc, &exec_f86e78912140efbc, 0x00001fee },
		{ 0x7346176d692db5fe, &exec_7346176d692db5fe, 0x000041f4 },
		{ 0x6e895af7eeebebb6, &exec_6e895af7eeebebb6, 0x00001ff5 },
		{ 0xd15a0fc953443b61, &exec_d15a0fc953443b61, 0x00003b5a },
		{ 0xea6fc9065a2e1440, &exec_ea6fc9065a2e1440, 0x00001ff9 },
		{ 0xea056e7532606655, &exec_ea056e7532606655, 0x00002004 },
		{ 0xbae0125821c2a7fc, &exec_bae0125821c2a7fc, 0x00002007 },
		{ 0x76d4817d7a7280c1, &exec_76d4817d7a7280c1, 0x00002012 },
		{ 0xd2bc48bf7a3878f6, &exec_d2bc48bf7a3878f6, 0x00002016 },
		{ 0x8c21915c6bbbb184, &exec_8c21915c6bbbb184, 0x0000201b },
		{ 0xa42eef9e51985822, &exec_a42eef9e51985822, 0x000047ee },
		{ 0xb37011668cbfb330, &exec_b37011668cbfb330, 0x00002020 },
		{ 0x609e006c838c395e, &exec_609e006c838c395e, 0x0000486a },
		{ 0xb184b6ca341c8a64, &exec_b184b6ca341c8a64, 0x0000234c },
		{ 0x7d28a8ff0d80f4ee, &exec_7d28a8ff0d80f4ee, 0x00004287 },
		{ 0x6968e0f280a363d6, &exec_6968e0f280a363d6, 0x0000202d },
		{ 0x0482edd420d5fa5e, &exec_0482edd420d5fa5e, 0x00003bec },
		{ 0x1a1794e42b3d9bee, &exec_1a1794e42b3d9bee, 0x00002037 },
		{ 0x2bae7ef51511962e, &exec_2bae7ef51511962e, 0x000042de },
		{ 0x3000b42297ac6a36, &exec_3000b42297ac6a36, 0x0000203d },
		{ 0x83db38eee558b0d6, &exec_83db38eee558b0d6, 0x00002046 },
		{ 0x0050b602144184c0, &exec_0050b602144184c0, 0x00002049 },
		{ 0xcc269a5e75fa875f, &exec_cc269a5e75fa875f, 0x00002050 },
		{ 0x4401b49be68560da, &exec_4401b49be68560da, 0x00002054 },
		{ 0xc4c8d66fc7087512, &exec_c4c8d66fc7087512, 0x0000206f },
		{ 0xde4674934503d91a, &exec_de4674934503d91a, 0x00002072 },
		{ 0xac3ae5925cd36037, &exec_ac3ae5925cd36037, 0x0000230a },
		{ 0x6afae399448a0b52, &exec_6afae399448a0b52, 0x000028cb },
		{ 0x987e26c38da85693, &exec_987e26c38da85693, 0x00002260 },
		{ 0x8afc06b72bb29d97, &exec_8afc06b72bb29d97, 0x00002086 },
		{ 0xc9ef8cd9f2bf91f1, &exec_c9ef8cd9f2bf91f1, 0x0000208b },
		{ 0xeb26455fb167c628, &exec_eb26455fb167c628, 0x0000209a },
		{ 0x22df00ba117b2ce9, &exec_22df00ba117b2ce9, 0x000020a1 },
		{ 0x98abf2f7633d284b, &exec_98abf2f7633d284b, 0x00003493 },
		{ 0x81faaa6d7bbce374, &exec_81faaa6d7bbce374, 0x000020ac },
		{ 0x25f7445a38cc538c, &exec_25f7445a38cc538c, 0x000047b5 },
		{ 0xb21c8bfbf70ac826, &exec_b21c8bfbf70ac826, 0x000020b9 },
		{ 0x7471d03b4f8e5456, &exec_7471d03b4f8e5456, 0x000020c0 },
		{ 0x7f4705ad3b4088d9, &exec_7f4705ad3b4088d9, 0x000020d4 },
		{ 0x265a77393e2c4f2b, &exec_265a77393e2c4f2b, 0x000020d8 },
		{ 0x5c182834f3a84e70, &exec_5c182834f3a84e70, 0x00002d3d },
		{ 0x519b5f579c69047c, &exec_519b5f579c69047c, 0x00002495 },
		{ 0xe95c83045241af13, &exec_e95c83045241af13, 0x000020e2 },
		{ 0x3b4bf306d3186c5a, &exec_3b4bf306d3186c5a, 0x000020f1 },
		{ 0xfdb42ca3130bf62d, &exec_fdb42ca3130bf62d, 0x00002e88 },
		{ 0x8d48de5f3feb566f, &exec_8d48de5f3feb566f, 0x00002107 },
		{ 0xa4ba6067b143d36b, &exec_a4ba6067b143d36b, 0x0000210c },
		{ 0xc8150c86681ee6e5, &exec_c8150c86681ee6e5, 0x0000211f },
		{ 0xeecfc78f7b123b26, &exec_eecfc78f7b123b26, 0x00002124 },
		{ 0x1e21b6c1a43c126d, &exec_1e21b6c1a43c126d, 0x0000212d },
		{ 0x487b46fa4b395565, &exec_487b46fa4b395565, 0x00002133 },
		{ 0x28e8363521b861c4, &exec_28e8363521b861c4, 0x00003b81 },
		{ 0xb332b1bde38c1986, &exec_b332b1bde38c1986, 0x00002142 },
		{ 0xd7e34083a8ab5889, &exec_d7e34083a8ab5889, 0x00002162 },
		{ 0x4b1c54f34ab92bdf, &exec_4b1c54f34ab92bdf, 0x00002170 },
		{ 0xcb18f33f919c1504, &exec_cb18f33f919c1504, 0x000046e0 },
		{ 0x0b53a2256ade613d, &exec_0b53a2256ade613d, 0x00002173 },
		{ 0x76411b03f53b5291, &exec_76411b03f53b5291, 0x00003933 },
		{ 0x75b4e92280820ac7, &exec_75b4e92280820ac7, 0x00002182 },
		{ 0x734e4b0f22d65974, &exec_734e4b0f22d65974, 0x0000330b },
		{ 0x4310f9bdaeb04043, &exec_4310f9bdaeb04043, 0x00002783 },
		{ 0x1204971fc3d9ef83, &exec_1204971fc3d9ef83, 0x00002189 },
		{ 0x2fc6a821744cce2f, &exec_2fc6a821744cce2f, 0x000044f2 },
		{ 0x874837dd93074a25, &exec_874837dd93074a25, 0x00002191 },
		{ 0xed05a1c0b895df2f, &exec_ed05a1c0b895df2f, 0x00002197 },
		{ 0xdb78a51ee6f50841, &exec_db78a51ee6f50841, 0x0000219a },
		{ 0xf469ab73e13777e7, &exec_f469ab73e13777e7, 0x0000219d },
		{ 0xdce3b7747ccae0dc, &exec_dce3b7747ccae0dc, 0x000021a4 },
		{ 0xed4db8c2ee16de83, &exec_ed4db8c2ee16de83, 0x000021b1 },
		{ 0xbe486e77f96fe7a0, &exec_be486e77f96fe7a0, 0x000021be },
		{ 0x611e0c52c229dbea, &exec_611e0c52c229dbea, 0x000021cb },
		{ 0x9ffed60b5c625852, &exec_9ffed60b5c625852, 0x000022b1 },
		{ 0x573ccc13bc84a9c0, &exec_573ccc13bc84a9c0, 0x000021cf },
		{ 0xd2611e5d4970288f, &exec_d2611e5d4970288f, 0x000037df },
		{ 0x657ade972dfdd81b, &exec_657ade972dfdd81b, 0x000021e2 },
		{ 0x3f676917b609d2a0, &exec_3f676917b609d2a0, 0x000021e9 },
		{ 0xa36ce9c865c9e976, &exec_a36ce9c865c9e976, 0x000021ec },
		{ 0x11cafb83298551bf, &exec_11cafb83298551bf, 0x000021f0 },
		{ 0xf190787414025c55, &exec_f190787414025c55, 0x00002e57 },
		{ 0xc4aeafec159d4dce, &exec_c4aeafec159d4dce, 0x000021f3 },
		{ 0xbb2e31169aa62516, &exec_bb2e31169aa62516, 0x000021f8 },
		{ 0x8d1d83ef1b60dd91, &exec_8d1d83ef1b60dd91, 0x000021fc },
		{ 0xca3713e6fec87b3c, &exec_ca3713e6fec87b3c, 0x00003068 },
		{ 0x111ca8c74587a0f9, &exec_111ca8c74587a0f9, 0x000024e2 },
		{ 0x7ab2f8661f177687, &exec_7ab2f8661f177687, 0x00002204 },
		{ 0x5c0e4cfeca1778de, &exec_5c0e4cfeca1778de, 0x00002215 },
		{ 0x9793d00f193269cc, &exec_9793d00f193269cc, 0x00002218 },
		{ 0x3e305ec9b4734997, &exec_3e305ec9b4734997, 0x000040e9 },
		{ 0x101328812f342b69, &exec_101328812f342b69, 0x0000421f },
		{ 0xad6d7dd53a624f00, &exec_ad6d7dd53a624f00, 0x00002220 },
		{ 0x709a49f7f1c3d97f, &exec_709a49f7f1c3d97f, 0x00002229 },
		{ 0xea185853c81738d1, &exec_ea185853c81738d1, 0x0000222c },
		{ 0xb2a44b875c94fb9a, &exec_b2a44b875c94fb9a, 0x00002250 },
		{ 0xf9f5c5748dbb53ad, &exec_f9f5c5748dbb53ad, 0x00002252 },
		{ 0xe1b211b842d03cf1, &exec_e1b211b842d03cf1, 0x00002262 },
		{ 0x0e3184ecb95f9cf2, &exec_0e3184ecb95f9cf2, 0x00002265 },
		{ 0xb3c536bea89d2b9f, &exec_b3c536bea89d2b9f, 0x00002ffb },
		{ 0x4748cda55f8e1b6e, &exec_4748cda55f8e1b6e, 0x00002268 },
		{ 0x3538c3385d474711, &exec_3538c3385d474711, 0x000040e0 },
		{ 0xc1c94227ca4a0b5b, &exec_c1c94227ca4a0b5b, 0x0000227d },
		{ 0x9c84097c2a750061, &exec_9c84097c2a750061, 0x00002285 },
		{ 0x5724f41e309a903f, &exec_5724f41e309a903f, 0x00003510 },
		{ 0xa733f936b41fd267, &exec_a733f936b41fd267, 0x00002297 },
		{ 0xd8d0524affa769af, &exec_d8d0524affa769af, 0x000043e6 },
		{ 0x7da80471d4ad406d, &exec_7da80471d4ad406d, 0x00002335 },
		{ 0xf0f912daf5e7c6ad, &exec_f0f912daf5e7c6ad, 0x0000229a },
		{ 0x2dca532e6be3e93a, &exec_2dca532e6be3e93a, 0x000022a5 },
		{ 0xdae3d4a1b9de2e7e, &exec_dae3d4a1b9de2e7e, 0x00002e2a },
		{ 0xcaa2c956feec0bc1, &exec_caa2c956feec0bc1, 0x0000247a },
		{ 0xc864c32132074064, &exec_c864c32132074064, 0x0000371c },
		{ 0xc111806a5ebeae23, &exec_c111806a5ebeae23, 0x00002b1b },
		{ 0x9cd2c8b768dab0a3, &exec_9cd2c8b768dab0a3, 0x000022c6 },
		{ 0xa11b318d0a925c6f, &exec_a11b318d0a925c6f, 0x00002914 },
		{ 0x6fe97c855ff2989b, &exec_6fe97c855ff2989b, 0x000022cb },
		{ 0xd6e291c2b361c2a4, &exec_d6e291c2b361c2a4, 0x000022d9 },
		{ 0x0ac26166e50a7634, &exec_0ac26166e50a7634, 0x00000000 },
		{ 0x555a2601bf297638, &exec_555a2601bf297638, 0x000022e0 },
		{ 0xcd39d6b62c084b3e, &exec_cd39d6b62c084b3e, 0x000022e2 },
		{ 0xf24cf1d7c7591cfa, &exec_f24cf1d7c7591cfa, 0x000022f6 },
		{ 0xe068efd7765c4315, &exec_e068efd7765c4315, 0x000022fa },
		{ 0xc0acef8baed5c075, &exec_c0acef8baed5c075, 0x00003638 },
		{ 0x062dc5c668fd3ec1, &exec_062dc5c668fd3ec1, 0x00002306 },
		{ 0x95aa2508823b8839, &exec_95aa2508823b8839, 0x000046cb },
		{ 0x5a2b6228e9d1d964, &exec_5a2b6228e9d1d964, 0x00002339 },
		{ 0x25e79ec6164d6833, &exec_25e79ec6164d6833, 0x0000265e },
		{ 0x38c57049f8ffebba, &exec_38c57049f8ffebba, 0x00002342 },
		{ 0x3c3c3107c4377369, &exec_3c3c3107c4377369, 0x0000408f },
		{ 0xb5d4345c1cca37c4, &exec_b5d4345c1cca37c4, 0x0000234f },
		{ 0x2385a5124950f956, &exec_2385a5124950f956, 0x00002354 },
		{ 0xba85950b6c8d00ba, &exec_ba85950b6c8d00ba, 0x0000236b },
		{ 0xd509d60fa8bbf21b, &exec_d509d60fa8bbf21b, 0x000044ea },
		{ 0x33119a3cb85012f0, &exec_33119a3cb85012f0, 0x0000391c },
		{ 0xbe725ea48626b7ca, &exec_be725ea48626b7ca, 0x00002382 },
		{ 0xbb122df045f42913, &exec_bb122df045f42913, 0x00002386 },
		{ 0xb7e3284f0775511b, &exec_b7e3284f0775511b, 0x0000238d },
		{ 0xef4c113d14c4b94a, &exec_ef4c113d14c4b94a, 0x000023a2 },
		{ 0xe42e19641432fdb5, &exec_e42e19641432fdb5, 0x00002c26 },
		{ 0xa5c62e8d834a329c, &exec_a5c62e8d834a329c, 0x000026ff },
		{ 0xca2a750cdec8f171, &exec_ca2a750cdec8f171, 0x000027d4 },
		{ 0x57d703c19855301c, &exec_57d703c19855301c, 0x000023aa },
		{ 0x47139e4578fcf535, &exec_47139e4578fcf535, 0x000023b1 },
		{ 0x2b9581d824808ba5, &exec_2b9581d824808ba5, 0x000023b6 },
		{ 0xb0a94d75b883df57, &exec_b0a94d75b883df57, 0x00003696 },
		{ 0x9b9a3e5eed6d8b27, &exec_9b9a3e5eed6d8b27, 0x0000309c },
		{ 0xd97e45175f5f1625, &exec_d97e45175f5f1625, 0x0000459e },
		{ 0x8bbf3c06fdd20658, &exec_8bbf3c06fdd20658, 0x000026af },
		{ 0xe74f0d9a4df98ddd, &exec_e74f0d9a4df98ddd, 0x000023d4 },
		{ 0x97ec08610bd72ce6, &exec_97ec08610bd72ce6, 0x000029b2 },
		{ 0xe932a2541e36f06a, &exec_e932a2541e36f06a, 0x000023e3 },
		{ 0x07f84a4c4495e5ac, &exec_07f84a4c4495e5ac, 0x000023ea },
		{ 0x50862e3c82701533, &exec_50862e3c82701533, 0x000023ed },
		{ 0x1ab3b1e838f0e51c, &exec_1ab3b1e838f0e51c, 0x000023f1 },
		{ 0xb683761b0b23d92c, &exec_b683761b0b23d92c, 0x000023f5 },
		{ 0x688cd2a7a58c74fe, &exec_688cd2a7a58c74fe, 0x000048ae },
		{ 0x024d0cf3e0937a08, &exec_024d0cf3e0937a08, 0x000023fa },
		{ 0xda1b97163fa0b587, &exec_da1b97163fa0b587, 0x000023ff },
		{ 0x30f657d3d14e407f, &exec_30f657d3d14e407f, 0x000043f8 },
		{ 0x8d8ba55d98ec79b7, &exec_8d8ba55d98ec79b7, 0x00002595 },
		{ 0xc510acb7fe27ee73, &exec_c510acb7fe27ee73, 0x00002401 },
		{ 0x9e4f07274b7e3ec3, &exec_9e4f07274b7e3ec3, 0x00002468 },
		{ 0xc795501bb929468b, &exec_c795501bb929468b, 0x000042d3 },
		{ 0xd69888a23f10b2c3, &exec_d69888a23f10b2c3, 0x00003376 },
		{ 0x877d8d75b9b3d0a5, &exec_877d8d75b9b3d0a5, 0x00002420 },
		{ 0xbf756b91652ddb7f, &exec_bf756b91652ddb7f, 0x00003e22 },
		{ 0xd9a5fbbc9b8c78f6, &exec_d9a5fbbc9b8c78f6, 0x00002425 },
		{ 0x4a0287517cd1bc8e, &exec_4a0287517cd1bc8e, 0x0000242e },
		{ 0x0448418464db2df3, &exec_0448418464db2df3, 0x00002438 },
		{ 0xf714275a230001c1, &exec_f714275a230001c1, 0x00003ea3 },
		{ 0x6f6c0ae0d9fc353b, &exec_6f6c0ae0d9fc353b, 0x00002444 },
		{ 0x8b8a46b9e2e63423, &exec_8b8a46b9e2e63423, 0x0000357a },
		{ 0x0abdb56c64cf7230, &exec_0abdb56c64cf7230, 0x0000244c },
		{ 0x678cf102775eb078, &exec_678cf102775eb078, 0x00002d91 },
		{ 0x9cb289d00794d04f, &exec_9cb289d00794d04f, 0x00002453 },
		{ 0x338415f9c13e64ed, &exec_338415f9c13e64ed, 0x00002458 },
		{ 0x734d515ae19b655d, &exec_734d515ae19b655d, 0x000034b2 },
		{ 0x3bcd5123cc88e33b, &exec_3bcd5123cc88e33b, 0x00003e3e },
		{ 0x93fc99b91a4ac398, &exec_93fc99b91a4ac398, 0x00004015 },
		{ 0x8e56cf85c852c1c8, &exec_8e56cf85c852c1c8, 0x00002485 },
		{ 0x9759e927c07e127d, &exec_9759e927c07e127d, 0x000044f6 },
		{ 0x870ac7795b23d731, &exec_870ac7795b23d731, 0x0000248b },
		{ 0xb64f4baf2aaaf2ba, &exec_b64f4baf2aaaf2ba, 0x00002490 },
		{ 0xbc8edae1dce9a220, &exec_bc8edae1dce9a220, 0x000045c0 },
		{ 0x71b56a1deb07ff10, &exec_71b56a1deb07ff10, 0x00002493 },
		{ 0x036be738149a83b7, &exec_036be738149a83b7, 0x0000249e },
		{ 0xc72d4af9d28f03a3, &exec_c72d4af9d28f03a3, 0x000024b3 },
		{ 0xb0e4d07702c2e31a, &exec_b0e4d07702c2e31a, 0x00004198 },
		{ 0x4770b00b36a63f80, &exec_4770b00b36a63f80, 0x000024bc },
		{ 0x5a13c8c32e7e921a, &exec_5a13c8c32e7e921a, 0x000031e4 },
		{ 0xfb3c4d6b60070e12, &exec_fb3c4d6b60070e12, 0x000024c6 },
		{ 0x495671882d7b1b02, &exec_495671882d7b1b02, 0x000024da },
		{ 0xc4951248a09df10f, &exec_c4951248a09df10f, 0x0000343a },
		{ 0xbf2b9b4b2ce075f9, &exec_bf2b9b4b2ce075f9, 0x000024df },
		{ 0x411a1b1d260514d8, &exec_411a1b1d260514d8, 0x00002505 },
		{ 0x57160ae73aaf8546, &exec_57160ae73aaf8546, 0x00002517 },
		{ 0x9da27100cb04efcf, &exec_9da27100cb04efcf, 0x0000252a },
		{ 0x50f0ca500253e86b, &exec_50f0ca500253e86b, 0x00002534 },
		{ 0xe0c18210f6d1cf91, &exec_e0c18210f6d1cf91, 0x0000253a },
		{ 0xef32ef9f86300601, &exec_ef32ef9f86300601, 0x00003706 },
		{ 0xcfbcda42473c5e3d, &exec_cfbcda42473c5e3d, 0x00004006 },
		{ 0xea2bacf3c4079a4f, &exec_ea2bacf3c4079a4f, 0x00002556 },
		{ 0x02d9986e5e1b2a62, &exec_02d9986e5e1b2a62, 0x0000255e },
		{ 0xd056d049ff985613, &exec_d056d049ff985613, 0x0000256c },
		{ 0x08df5d3548aa7f50, &exec_08df5d3548aa7f50, 0x00002577 },
		{ 0x9504a68e0ec3be00, &exec_9504a68e0ec3be00, 0x0000257a },
		{ 0x1d3a83c51e514c02, &exec_1d3a83c51e514c02, 0x00002581 },
		{ 0xc25a9333f8181ecb, &exec_c25a9333f8181ecb, 0x000034e5 },
		{ 0x8ed920aca45c0993, &exec_8ed920aca45c0993, 0x00002584 },
		{ 0xd4f4759f5de8b1f3, &exec_d4f4759f5de8b1f3, 0x00002588 },
		{ 0xd7d86279d6bea629, &exec_d7d86279d6bea629, 0x00003c3f },
		{ 0x274cc282d7331ecc, &exec_274cc282d7331ecc, 0x0000259a },
		{ 0x3fff4d623ab0a23c, &exec_3fff4d623ab0a23c, 0x000042cb },
		{ 0xd1c76be49c7d23c2, &exec_d1c76be49c7d23c2, 0x000025a0 },
		{ 0x7aa13757e9dcd08d, &exec_7aa13757e9dcd08d, 0x000025a9 },
		{ 0x31f3e0a2a10e61aa, &exec_31f3e0a2a10e61aa, 0x00003a88 },
		{ 0xfd17eeb13f74016b, &exec_fd17eeb13f74016b, 0x00000000 },
		{ 0x64a6c91f49022053, &exec_64a6c91f49022053, 0x000025b3 },
		{ 0xfc43adfb2ac0b36a, &exec_fc43adfb2ac0b36a, 0x00002a23 },
		{ 0xef78b38896fa375f, &exec_ef78b38896fa375f, 0x000025b6 },
		{ 0x92e80fea01cc1e2d, &exec_92e80fea01cc1e2d, 0x000025c0 },
		{ 0xd6ad10ae0aa2e93e, &exec_d6ad10ae0aa2e93e, 0x000025cb },
		{ 0xf3f53ebdac868ee3, &exec_f3f53ebdac868ee3, 0x000025d1 },
		{ 0x5f4089d09228b5d4, &exec_5f4089d09228b5d4, 0x000025d6 },
		{ 0x32520c8284c724ce, &exec_32520c8284c724ce, 0x000025e4 },
		{ 0xdc3af56b0e279803, &exec_dc3af56b0e279803, 0x000025ea },
		{ 0xd92711ff2813f695, &exec_d92711ff2813f695, 0x0000395d },
		{ 0xaa44c888968972db, &exec_aa44c888968972db, 0x000025f6 },
		{ 0x6176638b5f5359df, &exec_6176638b5f5359df, 0x00002600 },
		{ 0xcc97c956b76325ab, &exec_cc97c956b76325ab, 0x000026cb },
		{ 0x6756e59da0bd252b, &exec_6756e59da0bd252b, 0x00002603 },
		{ 0x520878222053773d, &exec_520878222053773d, 0x00002606 },
		{ 0x834fdf928466a42f, &exec_834fdf928466a42f, 0x00002608 },
		{ 0xa50d50fc399627a0, &exec_a50d50fc399627a0, 0x0000260b },
		{ 0x9b79ea32bd8a4422, &exec_9b79ea32bd8a4422, 0x0000261a },
		{ 0xc8dd95febbdac91c, &exec_c8dd95febbdac91c, 0x00002a2c },
		{ 0x2a5bc53b98140e44, &exec_2a5bc53b98140e44, 0x0000262a },
		{ 0x0f739e93abc36e2e, &exec_0f739e93abc36e2e, 0x00002630 },
		{ 0xb2592b047827ff5d, &exec_b2592b047827ff5d, 0x00002636 },
		{ 0x1a31aec668d9ef28, &exec_1a31aec668d9ef28, 0x00002645 },
		{ 0x393585e0559a9de5, &exec_393585e0559a9de5, 0x0000264b },
		{ 0xda5d26f6457c95b4, &exec_da5d26f6457c95b4, 0x00002762 },
		{ 0xbedef5f9a686913a, &exec_bedef5f9a686913a, 0x00002652 },
		{ 0xf03d8773d5594e5a, &exec_f03d8773d5594e5a, 0x00002656 },
		{ 0xf5018f7309eda684, &exec_f5018f7309eda684, 0x00002659 },
		{ 0x6352b551bef19676, &exec_6352b551bef19676, 0x00002925 },
		{ 0xa61f7c4b50900b7d, &exec_a61f7c4b50900b7d, 0x0000339d },
		{ 0xa2cf71a87aa660fc, &exec_a2cf71a87aa660fc, 0x00002663 },
		{ 0x7d7b7ed21c282fe3, &exec_7d7b7ed21c282fe3, 0x00002668 },
		{ 0xd8f798ebcfd2bf7d, &exec_d8f798ebcfd2bf7d, 0x00003d27 },
		{ 0x17421d0a09d5f69c, &exec_17421d0a09d5f69c, 0x0000266c },
		{ 0x3ddaad2fa8fa7945, &exec_3ddaad2fa8fa7945, 0x00004531 },
		{ 0x36a31c433a4d9816, &exec_36a31c433a4d9816, 0x00002680 },
		{ 0xe965195c9bc538e0, &exec_e965195c9bc538e0, 0x00002683 },
		{ 0x0e21117f4a4580f6, &exec_0e21117f4a4580f6, 0x0000268b },
		{ 0xee164dbd8e01f62a, &exec_ee164dbd8e01f62a, 0x00002691 },
		{ 0xc8d32bc47c2ffe38, &exec_c8d32bc47c2ffe38, 0x00002696 },
		{ 0xb8ac1748c1626205, &exec_b8ac1748c1626205, 0x0000269a },
		{ 0x529a653542794a0d, &exec_529a653542794a0d, 0x000026a0 },
		{ 0x4c2612ebdefba4f6, &exec_4c2612ebdefba4f6, 0x000026b4 },
		{ 0x20888b0bd82cab97, &exec_20888b0bd82cab97, 0x000026b8 },
		{ 0x8c297a89d31e0cee, &exec_8c297a89d31e0cee, 0x000026bd },
		{ 0xd9c3d1d9aa43cbf8, &exec_d9c3d1d9aa43cbf8, 0x000026c0 },
		{ 0xea50fe2d105e3674, &exec_ea50fe2d105e3674, 0x00003e9b },
		{ 0x60ed7cedd7d89d17, &exec_60ed7cedd7d89d17, 0x000026c5 },
		{ 0x52167e07a047545a, &exec_52167e07a047545a, 0x000026c9 },
		{ 0x12b7f6b5f22f0b2c, &exec_12b7f6b5f22f0b2c, 0x000026d0 },
		{ 0x4c0c8daac5d4a55e, &exec_4c0c8daac5d4a55e, 0x000026d5 },
		{ 0xca983bbd8ae13867, &exec_ca983bbd8ae13867, 0x000026db },
		{ 0x67d1f1268677187c, &exec_67d1f1268677187c, 0x000026e4 },
		{ 0x3485af9c827a513a, &exec_3485af9c827a513a, 0x000032e6 },
		{ 0xd3ca1522b661b253, &exec_d3ca1522b661b253, 0x000026ea },
		{ 0x7ffd348b5746cc2b, &exec_7ffd348b5746cc2b, 0x000026f3 },
		{ 0xf344953fde11e960, &exec_f344953fde11e960, 0x000026f7 },
		{ 0x163242a657fb16f9, &exec_163242a657fb16f9, 0x00002b5b },
		{ 0x354ffa66c4cf156e, &exec_354ffa66c4cf156e, 0x00002703 },
		{ 0x1a6f88f3591ff0be, &exec_1a6f88f3591ff0be, 0x00002705 },
		{ 0xfcddfe4b45d63870, &exec_fcddfe4b45d63870, 0x00003c58 },
		{ 0x0a8c6dd445c3716f, &exec_0a8c6dd445c3716f, 0x00002708 },
		{ 0x4bf0b2ceb1daf849, &exec_4bf0b2ceb1daf849, 0x0000270c },
		{ 0x0f07e258027399d7, &exec_0f07e258027399d7, 0x00002712 },
		{ 0x5537b459c013dc36, &exec_5537b459c013dc36, 0x0000271c },
		{ 0x24fdd6c88fb0430b, &exec_24fdd6c88fb0430b, 0x00000000 },
		{ 0x2b904f166565be61, &exec_2b904f166565be61, 0x00002720 },
		{ 0x8c4591a5245f101a, &exec_8c4591a5245f101a, 0x000029fe },
		{ 0x3491dad1e7ff0b94, &exec_3491dad1e7ff0b94, 0x00002725 },
		{ 0x5cef0ffd541bb614, &exec_5cef0ffd541bb614, 0x0000272c },
		{ 0x95753a0d0f088537, &exec_95753a0d0f088537, 0x00002afe },
		{ 0x16f6f8da4f54d7e2, &exec_16f6f8da4f54d7e2, 0x0000274d },
		{ 0xf8ec01add30aa2cf, &exec_f8ec01add30aa2cf, 0x00002752 },
		{ 0xfeae2c4fbae42096, &exec_feae2c4fbae42096, 0x000033c5 },
		{ 0x421556d3de700f18, &exec_421556d3de700f18, 0x00002757 },
		{ 0xdcdd8c841abefc2b, &exec_dcdd8c841abefc2b, 0x0000275e },
		{ 0xac3c6f01157c5661, &exec_ac3c6f01157c5661, 0x00002766 },
		{ 0xca35a9ff47f3a943, &exec_ca35a9ff47f3a943, 0x0000276a },
		{ 0xda07148107486407, &exec_da07148107486407, 0x0000277b },
		{ 0x557c7f7369a1d306, &exec_557c7f7369a1d306, 0x00004933 },
		{ 0x81cd693cd802e21e, &exec_81cd693cd802e21e, 0x00003f3c },
		{ 0x831cd39b1514d2f5, &exec_831cd39b1514d2f5, 0x00002789 },
		{ 0x8006f6355c87829b, &exec_8006f6355c87829b, 0x0000278e },
		{ 0xa34d5e610a9661c8, &exec_a34d5e610a9661c8, 0x0000314a },
		{ 0x54f00da23413b3e6, &exec_54f00da23413b3e6, 0x000027a3 },
		{ 0x1b2d361b2f7fbbf0, &exec_1b2d361b2f7fbbf0, 0x00003f71 },
		{ 0xb52af2373677dbf3, &exec_b52af2373677dbf3, 0x000027a9 },
		{ 0x6754b0cb90b4d31b, &exec_6754b0cb90b4d31b, 0x000027ae },
		{ 0x40cd92447d927fd3, &exec_40cd92447d927fd3, 0x000027b2 },
		{ 0x39b5693761ed5e9a, &exec_39b5693761ed5e9a, 0x000027ba },
		{ 0xc808615f93f3160b, &exec_c808615f93f3160b, 0x000027c3 },
		{ 0x253265a882d9d843, &exec_253265a882d9d843, 0x000027c7 },
		{ 0xd511d4813785109e, &exec_d511d4813785109e, 0x000027ca },
		{ 0x729b6de1e6e1dce9, &exec_729b6de1e6e1dce9, 0x000027cf },
		{ 0x2a8a9bd903088bb4, &exec_2a8a9bd903088bb4, 0x000048d4 },
		{ 0x2d0a13ab7db24fb7, &exec_2d0a13ab7db24fb7, 0x000027da },
		{ 0x017e829e5edd8118, &exec_017e829e5edd8118, 0x000027e2 },
		{ 0x681465c5e2e9e86e, &exec_681465c5e2e9e86e, 0x0000369d },
		{ 0xa01883d8d4ecfb66, &exec_a01883d8d4ecfb66, 0x000027e5 },
		{ 0x1baccaf393e3a193, &exec_1baccaf393e3a193, 0x000027ed },
		{ 0x7633cbf2181864b0, &exec_7633cbf2181864b0, 0x000027f1 },
		{ 0x0268785951545eed, &exec_0268785951545eed, 0x00000000 },
		{ 0x625825f119c7f82b, &exec_625825f119c7f82b, 0x000027f4 },
		{ 0x6c5e062a9d4fc30d, &exec_6c5e062a9d4fc30d, 0x0000432d },
		{ 0x84384c5873f69c21, &exec_84384c5873f69c21, 0x000041c6 },
		{ 0xdcfa96fec2621c23, &exec_dcfa96fec2621c23, 0x00002814 },
		{ 0xbdefda0670959035, &exec_bdefda0670959035, 0x00002818 },
		{ 0x51f17bd1363b9909, &exec_51f17bd1363b9909, 0x0000281e },
		{ 0x20b01fa410ecac74, &exec_20b01fa410ecac74, 0x00002827 },
		{ 0x6bfd8862966b0c21, &exec_6bfd8862966b0c21, 0x00002a85 },
		{ 0x296b1af953f5cb84, &exec_296b1af953f5cb84, 0x00002829 },
		{ 0x8c91017095ccc7d4, &exec_8c91017095ccc7d4, 0x0000282c },
		{ 0xbbea4f073a5103fc, &exec_bbea4f073a5103fc, 0x000038e6 },
		{ 0xbd5b61bece8840ad, &exec_bd5b61bece8840ad, 0x0000283a },
		{ 0xda351758b75ba58c, &exec_da351758b75ba58c, 0x0000283e },
		{ 0xaaa40a0471abafad, &exec_aaa40a0471abafad, 0x00003b95 },
		{ 0x2978012c5d967cab, &exec_2978012c5d967cab, 0x00002843 },
		{ 0x159e5f300630a257, &exec_159e5f300630a257, 0x00002849 },
		{ 0xd71843a6fe7d775d, &exec_d71843a6fe7d775d, 0x00003d58 },
		{ 0xc8ab51b712f7e212, &exec_c8ab51b712f7e212, 0x00002855 },
		{ 0xd8dc3f4004d6fff0, &exec_d8dc3f4004d6fff0, 0x00002859 },
		{ 0x46decc36e8c01ec7, &exec_46decc36e8c01ec7, 0x00004226 },
		{ 0x3816fd83c7337109, &exec_3816fd83c7337109, 0x0000389c },
		{ 0x80296a28714825fb, &exec_80296a28714825fb, 0x0000285c },
		{ 0x44b5277b3cd525c4, &exec_44b5277b3cd525c4, 0x00002861 },
		{ 0xd4d18c2c5bed1ae1, &exec_d4d18c2c5bed1ae1, 0x00004082 },
		{ 0xcdfcb7a6f2fdf6ac, &exec_cdfcb7a6f2fdf6ac, 0x0000286d },
		{ 0x94d681595657d6a4, &exec_94d681595657d6a4, 0x00002875 },
		{ 0x3189f79dfc64e8d8, &exec_3189f79dfc64e8d8, 0x00002883 },
		{ 0x7432c6474df08d03, &exec_7432c6474df08d03, 0x0000288b },
		{ 0x9491af15301997e2, &exec_9491af15301997e2, 0x0000288f },
		{ 0xaf11e812c365474e, &exec_af11e812c365474e, 0x00002895 },
		{ 0x069cb2dd016fa34a, &exec_069cb2dd016fa34a, 0x0000289a },
		{ 0xa5745f88e4660afa, &exec_a5745f88e4660afa, 0x0000289f },
		{ 0x6ccb86ae15e7a02c, &exec_6ccb86ae15e7a02c, 0x000028a9 },
		{ 0xd882f0b1321f6ff2, &exec_d882f0b1321f6ff2, 0x00002b2c },
		{ 0x7474d80942929a40, &exec_7474d80942929a40, 0x00002f65 },
		{ 0x784829430d73a422, &exec_784829430d73a422, 0x00003e4a },
		{ 0x68eb1aff35cb3cd4, &exec_68eb1aff35cb3cd4, 0x000028af },
		{ 0xa934c3b009eaa418, &exec_a934c3b009eaa418, 0x000028bf },
		{ 0x570df300ceb8aa62, &exec_570df300ceb8aa62, 0x000028c4 },
		{ 0x19e019396a67a409, &exec_19e019396a67a409, 0x00003c00 },
		{ 0xfa342a4c4086c2bc, &exec_fa342a4c4086c2bc, 0x000028c8 },
		{ 0x24a73524ff275b38, &exec_24a73524ff275b38, 0x00003abc },
		{ 0x5ccf4e1146cbc7ba, &exec_5ccf4e1146cbc7ba, 0x000028d0 },
		{ 0x717512656b64a811, &exec_717512656b64a811, 0x0000345f },
		{ 0x79c54dc79beb14de, &exec_79c54dc79beb14de, 0x000028e0 },
		{ 0xd2196bf34f8dc4f7, &exec_d2196bf34f8dc4f7, 0x000028e5 },
		{ 0x323f9f26b667d34b, &exec_323f9f26b667d34b, 0x000028e8 },
		{ 0x5b2c3bb12ac13e4a, &exec_5b2c3bb12ac13e4a, 0x000028ff },
		{ 0x91441cf3f4f5f8e4, &exec_91441cf3f4f5f8e4, 0x00002903 },
		{ 0x54f82ad493b105ee, &exec_54f82ad493b105ee, 0x0000290d },
		{ 0x0653dbaf1bff7679, &exec_0653dbaf1bff7679, 0x00002912 },
		{ 0x2b227e082e922086, &exec_2b227e082e922086, 0x0000291d },
		{ 0x911c910220364966, &exec_911c910220364966, 0x00002921 },
		{ 0xce02c85b0e568465, &exec_ce02c85b0e568465, 0x00002929 },
		{ 0xefe4767fb1d414b5, &exec_efe4767fb1d414b5, 0x0000292e },
		{ 0x4419bae8f82bf6ff, &exec_4419bae8f82bf6ff, 0x00002936 },
		{ 0x0a192da127d005c6, &exec_0a192da127d005c6, 0x00004458 },
		{ 0x74c8b31d6641b45a, &exec_74c8b31d6641b45a, 0x00002948 },
		{ 0xd4f221a1ebdb2c1e, &exec_d4f221a1ebdb2c1e, 0x00003301 },
		{ 0xd77393c2090e90e3, &exec_d77393c2090e90e3, 0x0000294d },
		{ 0xb8de334e904dbc35, &exec_b8de334e904dbc35, 0x00002952 },
		{ 0xb0311a78fd6e0b49, &exec_b0311a78fd6e0b49, 0x00002958 },
		{ 0x3f467e9d4d64eb33, &exec_3f467e9d4d64eb33, 0x00002960 },
		{ 0xcf93afa9aceb9fee, &exec_cf93afa9aceb9fee, 0x00002965 },
		{ 0x1cf5e3f8378d6583, &exec_1cf5e3f8378d6583, 0x00002969 },
		{ 0x4889c04a94378ea4, &exec_4889c04a94378ea4, 0x0000296d },
		{ 0xfb6ac1f8a89cbc3c, &exec_fb6ac1f8a89cbc3c, 0x00002974 },
		{ 0xe9e778a6279bf910, &exec_e9e778a6279bf910, 0x0000297a },
		{ 0xe03c3fbf09db9e60, &exec_e03c3fbf09db9e60, 0x0000297d },
		{ 0x8f7dee5ab495706d, &exec_8f7dee5ab495706d, 0x00002988 },
		{ 0xc2022fe9010dd14e, &exec_c2022fe9010dd14e, 0x00002eec },
		{ 0x1da5f6291239e47e, &exec_1da5f6291239e47e, 0x0000298b },
		{ 0xea1133440312cb19, &exec_ea1133440312cb19, 0x00002991 },
		{ 0xaddb9eda02b24baf, &exec_addb9eda02b24baf, 0x00003d86 },
		{ 0xbbbbd7fdcde273e6, &exec_bbbbd7fdcde273e6, 0x00002998 },
		{ 0x2e2600e14657f9ee, &exec_2e2600e14657f9ee, 0x00002f00 },
		{ 0x43183fea7a19bd36, &exec_43183fea7a19bd36, 0x000029aa },
		{ 0xae19099133c1a30a, &exec_ae19099133c1a30a, 0x000029ae },
		{ 0x4862c3640246fd0b, &exec_4862c3640246fd0b, 0x000029b6 },
		{ 0x5c352ad09a2f0fc2, &exec_5c352ad09a2f0fc2, 0x000029bd },
		{ 0xef22387e84ae5c42, &exec_ef22387e84ae5c42, 0x00003af4 },
		{ 0x3c00e50b343de9e9, &exec_3c00e50b343de9e9, 0x000029c1 },
		{ 0xee11483cd798dd73, &exec_ee11483cd798dd73, 0x000029c5 },
		{ 0xba182623750cddc5, &exec_ba182623750cddc5, 0x000029ca },
		{ 0x3f7537202bcb054d, &exec_3f7537202bcb054d, 0x000029cf },
		{ 0x119c9c7061f0e801, &exec_119c9c7061f0e801, 0x000029da },
		{ 0xec52dd67db1ba0de, &exec_ec52dd67db1ba0de, 0x000029e0 },
		{ 0x8c287f1fe126fc51, &exec_8c287f1fe126fc51, 0x000029e5 },
		{ 0xb9d632f13f7b8eca, &exec_b9d632f13f7b8eca, 0x000029eb },
		{ 0xfb179e11a5fab3a4, &exec_fb179e11a5fab3a4, 0x000029f1 },
		{ 0xf7b7faf2ee005ba4, &exec_f7b7faf2ee005ba4, 0x000044e1 },
		{ 0x7fc1d009f39853e7, &exec_7fc1d009f39853e7, 0x00002a04 },
		{ 0x259d53469ddd81e7, &exec_259d53469ddd81e7, 0x00002e72 },
		{ 0x49c71fb7125cc8e0, &exec_49c71fb7125cc8e0, 0x00002a10 },
		{ 0xfc2de0bb216cd78a, &exec_fc2de0bb216cd78a, 0x00002a17 },
		{ 0x1466d9ab7cb9b517, &exec_1466d9ab7cb9b517, 0x00002a1b },
		{ 0xe9b9de2b41410bd1, &exec_e9b9de2b41410bd1, 0x00002a1e },
		{ 0x2dc180184afd22dd, &exec_2dc180184afd22dd, 0x00002a28 },
		{ 0x3c159e85b1a4b03a, &exec_3c159e85b1a4b03a, 0x00000000 },
		{ 0x20644540233395c3, &exec_20644540233395c3, 0x00002a35 },
		{ 0x3dd8d37aefc5ab57, &exec_3dd8d37aefc5ab57, 0x0000453c },
		{ 0x3a45d6eecbe97079, &exec_3a45d6eecbe97079, 0x000035f9 },
		{ 0x15b52d6d7a6828da, &exec_15b52d6d7a6828da, 0x00002a3b },
		{ 0x3fbc81d004c6f3b8, &exec_3fbc81d004c6f3b8, 0x00002a42 },
		{ 0x2f0bf5879f044f0c, &exec_2f0bf5879f044f0c, 0x00003443 },
		{ 0x888795c42826e2fe, &exec_888795c42826e2fe, 0x00002a46 },
		{ 0x45cde9a2738a03c5, &exec_45cde9a2738a03c5, 0x00002a53 },
		{ 0x9a2511cafe2381ad, &exec_9a2511cafe2381ad, 0x00002a5a },
		{ 0xb69cc7a1cb1398ac, &exec_b69cc7a1cb1398ac, 0x00002a6f },
		{ 0xbda5e3fc8d14b0e3, &exec_bda5e3fc8d14b0e3, 0x00002a79 },
		{ 0xb5d25b6de308cabc, &exec_b5d25b6de308cabc, 0x000048b7 },
		{ 0xce94168e6def175d, &exec_ce94168e6def175d, 0x00002cd8 },
		{ 0x49ed8ce112f7f679, &exec_49ed8ce112f7f679, 0x00002a7c },
		{ 0xc278a36b3b58d0c3, &exec_c278a36b3b58d0c3, 0x000044ab },
		{ 0x49669d5ac53aaaf9, &exec_49669d5ac53aaaf9, 0x00002a80 },
		{ 0x338c8223ef0d9c0e, &exec_338c8223ef0d9c0e, 0x00002a89 },
		{ 0xc022994d5c35c467, &exec_c022994d5c35c467, 0x00002a8e },
		{ 0x3288ff15e4693010, &exec_3288ff15e4693010, 0x00002a99 },
		{ 0x9c892b5a06f497d2, &exec_9c892b5a06f497d2, 0x00002aa0 },
		{ 0x6c4a2c10d83744b4, &exec_6c4a2c10d83744b4, 0x00002eca },
		{ 0xe8482c53e4f2c602, &exec_e8482c53e4f2c602, 0x00002aa5 },
		{ 0x8419525b43c93e32, &exec_8419525b43c93e32, 0x000040c8 },
		{ 0x79e4e9f35ff3b71c, &exec_79e4e9f35ff3b71c, 0x00002aab },
		{ 0x246527bb97122678, &exec_246527bb97122678, 0x00002abc },
		{ 0x3c8d1d74aa682573, &exec_3c8d1d74aa682573, 0x00002ac6 },
		{ 0x7fe4a2835b79535c, &exec_7fe4a2835b79535c, 0x00002ad0 },
		{ 0xe373588434891125, &exec_e373588434891125, 0x00003a19 },
		{ 0x8a051083b073bb8b, &exec_8a051083b073bb8b, 0x000039df },
		{ 0xd24869f320ddf5b2, &exec_d24869f320ddf5b2, 0x00002adb },
		{ 0x35e34def998a561d, &exec_35e34def998a561d, 0x00002ae1 },
		{ 0xd43b66e679a50b1a, &exec_d43b66e679a50b1a, 0x00002ae6 },
		{ 0xa2bd7d1011e82a6d, &exec_a2bd7d1011e82a6d, 0x00002ae9 },
		{ 0x4af0c170b3ca0fa9, &exec_4af0c170b3ca0fa9, 0x00002aec },
		{ 0x90406ec1d934b577, &exec_90406ec1d934b577, 0x00002af0 },
		{ 0xcfa412964bbc0314, &exec_cfa412964bbc0314, 0x00002af2 },
		{ 0x648c7e77ac3beb97, &exec_648c7e77ac3beb97, 0x00002af4 },
		{ 0x1978e20171668d92, &exec_1978e20171668d92, 0x00002af8 },
		{ 0x6d15b83059cdede3, &exec_6d15b83059cdede3, 0x0000319c },
		{ 0x6fe35dc0500baecd, &exec_6fe35dc0500baecd, 0x00002b02 },
		{ 0x9758d59f88924585, &exec_9758d59f88924585, 0x000048ef },
		{ 0x7a1d5b90a282c4ff, &exec_7a1d5b90a282c4ff, 0x00002b06 },
		{ 0x7218a53a005ee49d, &exec_7218a53a005ee49d, 0x00002b0a },
		{ 0xc66f70cc14043632, &exec_c66f70cc14043632, 0x000042d8 },
		{ 0x3c7b38ce4ea94044, &exec_3c7b38ce4ea94044, 0x00002b10 },
		{ 0xdc99b8294f661f55, &exec_dc99b8294f661f55, 0x00002b18 },
		{ 0xefa2504d51e0fc05, &exec_efa2504d51e0fc05, 0x00003815 },
		{ 0x8a382d6b13cbe08f, &exec_8a382d6b13cbe08f, 0x00002b27 },
		{ 0x6b384c03e128cb53, &exec_6b384c03e128cb53, 0x00002b32 },
		{ 0x66631bfa4a73bb5b, &exec_66631bfa4a73bb5b, 0x0000435e },
		{ 0xbf89036b285c6b1e, &exec_bf89036b285c6b1e, 0x00002b38 },
		{ 0x1404febaec82f785, &exec_1404febaec82f785, 0x00002b41 },
		{ 0x4814d7c52ce1ee1c, &exec_4814d7c52ce1ee1c, 0x00002b4a },
		{ 0x75962b33c9ae85ce, &exec_75962b33c9ae85ce, 0x00002b50 },
		{ 0xb308316e93323d20, &exec_b308316e93323d20, 0x00002b59 },
		{ 0x950fba109a99e8ab, &exec_950fba109a99e8ab, 0x00003839 },
		{ 0xc6d6b00455e3d219, &exec_c6d6b00455e3d219, 0x00002b67 },
		{ 0x49158225628ce75f, &exec_49158225628ce75f, 0x00002b70 },
		{ 0x048ba24439e09b2b, &exec_048ba24439e09b2b, 0x00002b7a },
		{ 0xe2bfdce08cd31132, &exec_e2bfdce08cd31132, 0x00002b81 },
		{ 0xe8d0825fc44f5b3c, &exec_e8d0825fc44f5b3c, 0x00002f7a },
		{ 0xfe613fe17a37df46, &exec_fe613fe17a37df46, 0x00000000 },
		{ 0x93ce08a2c503d749, &exec_93ce08a2c503d749, 0x00002b8c },
		{ 0x189dbc689997eb8c, &exec_189dbc689997eb8c, 0x00002b90 },
		{ 0xc89e5e84a7af1064, &exec_c89e5e84a7af1064, 0x00002b94 },
		{ 0x1f3a4caac9e5c11a, &exec_1f3a4caac9e5c11a, 0x00003ba2 },
		{ 0x1c79465ad19a849a, &exec_1c79465ad19a849a, 0x00002b97 },
		{ 0x88f79802d5447dcb, &exec_88f79802d5447dcb, 0x00002b9e },
		{ 0xc80cd48ba2b57c8d, &exec_c80cd48ba2b57c8d, 0x00002ba3 },
		{ 0x403991b05ff02088, &exec_403991b05ff02088, 0x00002bb0 },
		{ 0x0c6a05cd5ad9d80c, &exec_0c6a05cd5ad9d80c, 0x00002bbb },
		{ 0x7a41e6af923bae56, &exec_7a41e6af923bae56, 0x00002bc6 },
		{ 0xd701a4790a733616, &exec_d701a4790a733616, 0x00002bcb },
		{ 0x0dbc225741aba330, &exec_0dbc225741aba330, 0x000033b0 },
		{ 0xc053c3762f3f6102, &exec_c053c3762f3f6102, 0x00002bd0 },
		{ 0x435b4b7e202dcd35, &exec_435b4b7e202dcd35, 0x00002bd5 },
		{ 0xd6ae77ecd8a102b1, &exec_d6ae77ecd8a102b1, 0x00003470 },
		{ 0xd1077ddaab11c298, &exec_d1077ddaab11c298, 0x00002df8 },
		{ 0xe6b2cd0b26be394c, &exec_e6b2cd0b26be394c, 0x00002be5 },
		{ 0x1bf0b4eca6b46247, &exec_1bf0b4eca6b46247, 0x00002be8 },
		{ 0xf728eeda8a4e3303, &exec_f728eeda8a4e3303, 0x00002bee },
		{ 0x09bea14688ff10ec, &exec_09bea14688ff10ec, 0x00002bf7 },
		{ 0xc1abc363d7318bc8, &exec_c1abc363d7318bc8, 0x00002bfb },
		{ 0xfc363c59537202ed, &exec_fc363c59537202ed, 0x00002c01 },
		{ 0xffba9b55d3874e79, &exec_ffba9b55d3874e79, 0x00002c09 },
		{ 0x74181f530835f81d, &exec_74181f530835f81d, 0x00002c0d },
		{ 0x63e231b9805b1f01, &exec_63e231b9805b1f01, 0x00002c21 },
		{ 0x7b6d1a69e6fa7613, &exec_7b6d1a69e6fa7613, 0x00002c33 },
		{ 0x71d6ee7231d66355, &exec_71d6ee7231d66355, 0x00003895 },
		{ 0x11ffc078f84a0d25, &exec_11ffc078f84a0d25, 0x00002c42 },
		{ 0x635040218febbf72, &exec_635040218febbf72, 0x00002c50 },
		{ 0x63121ea34615fe5c, &exec_63121ea34615fe5c, 0x00002c5f },
		{ 0x31ec877fee082b6d, &exec_31ec877fee082b6d, 0x00002c62 },
		{ 0xe1ae819c0b4a6561, &exec_e1ae819c0b4a6561, 0x00002c75 },
		{ 0xbb19c82f57476c49, &exec_bb19c82f57476c49, 0x00002c7a },
		{ 0x202a77a3b110c48c, &exec_202a77a3b110c48c, 0x00002c83 },
		{ 0x7370cd87c9c54efa, &exec_7370cd87c9c54efa, 0x00002c8a },
		{ 0xb21a3f324e9fc9e6, &exec_b21a3f324e9fc9e6, 0x00002c91 },
		{ 0xce74da45c38d92de, &exec_ce74da45c38d92de, 0x000037d8 },
		{ 0xd550184aa0dce31f, &exec_d550184aa0dce31f, 0x00002c9a },
		{ 0x4a37d6179f2470c9, &exec_4a37d6179f2470c9, 0x00002ca1 },
		{ 0x3fa8f948ac116f5d, &exec_3fa8f948ac116f5d, 0x00002ca6 },
		{ 0x549433a3629a11e1, &exec_549433a3629a11e1, 0x000032b0 },
		{ 0xf1c1e6121d50d4f1, &exec_f1c1e6121d50d4f1, 0x00002cb3 },
		{ 0x4a181226b45a2a1f, &exec_4a181226b45a2a1f, 0x0000376a },
		{ 0xd50401d59b95f0fd, &exec_d50401d59b95f0fd, 0x00002f10 },
		{ 0x02b6bdb1549adb1d, &exec_02b6bdb1549adb1d, 0x00002cb8 },
		{ 0x0e94bbb12b74398b, &exec_0e94bbb12b74398b, 0x00004721 },
		{ 0x5a7cc08964b0cc7e, &exec_5a7cc08964b0cc7e, 0x00002cc0 },
		{ 0x22e025439e9b13de, &exec_22e025439e9b13de, 0x00002cc7 },
		{ 0x56cc8bbf40cd100f, &exec_56cc8bbf40cd100f, 0x00002cce },
		{ 0x093f500c50900274, &exec_093f500c50900274, 0x00002cd4 },
		{ 0xe1e2ba7e62b34a38, &exec_e1e2ba7e62b34a38, 0x00002cdd },
		{ 0xa95960ad1207aef4, &exec_a95960ad1207aef4, 0x00003833 },
		{ 0x6ddee13411beae64, &exec_6ddee13411beae64, 0x00002dbc },
		{ 0xd462c71160b91e50, &exec_d462c71160b91e50, 0x00002ce7 },
		{ 0x29b4840418269205, &exec_29b4840418269205, 0x00002e10 },
		{ 0xe8cc994ff6d74795, &exec_e8cc994ff6d74795, 0x00002cee },
		{ 0xaa3768c80bcf212f, &exec_aa3768c80bcf212f, 0x00002cfe },
		{ 0x238b6d061a2ea0f8, &exec_238b6d061a2ea0f8, 0x00002d03 },
		{ 0x49b60dcf243f76c4, &exec_49b60dcf243f76c4, 0x00002d0d },
		{ 0x8b84b321247684f3, &exec_8b84b321247684f3, 0x00002d13 },
		{ 0xad9603c492c129d2, &exec_ad9603c492c129d2, 0x000048c7 },
		{ 0x152661159618fa83, &exec_152661159618fa83, 0x0000429e },
		{ 0x55f2cb81234beb76, &exec_55f2cb81234beb76, 0x00002d81 },
		{ 0x672d06df48dbac5c, &exec_672d06df48dbac5c, 0x00004158 },
		{ 0x9c7c0453592d10c1, &exec_9c7c0453592d10c1, 0x00002fea },
		{ 0xadb801324eeac49b, &exec_adb801324eeac49b, 0x00002d3a },
		{ 0x35f109e6d2e0b3a6, &exec_35f109e6d2e0b3a6, 0x00002d47 },
		{ 0x4b43dc8285c16ebc, &exec_4b43dc8285c16ebc, 0x00002d4b },
		{ 0x225af267375ce5b9, &exec_225af267375ce5b9, 0x000041e4 },
		{ 0x8e40efebe4eaf609, &exec_8e40efebe4eaf609, 0x00003219 },
		{ 0x63a874ae85135a52, &exec_63a874ae85135a52, 0x00002d57 },
		{ 0x5693194fa323e945, &exec_5693194fa323e945, 0x00002d5b },
		{ 0xa586c6f499bb2e03, &exec_a586c6f499bb2e03, 0x00002d5f },
		{ 0xee613fac7c3988b7, &exec_ee613fac7c3988b7, 0x00002d64 },
		{ 0xf9e72c3541e7939b, &exec_f9e72c3541e7939b, 0x00002d69 },
		{ 0xf5ad7a8ea4921369, &exec_f5ad7a8ea4921369, 0x00002d88 },
		{ 0x12ae6e61ba15b2dc, &exec_12ae6e61ba15b2dc, 0x00002d8b },
		{ 0x06e523f291a95cdf, &exec_06e523f291a95cdf, 0x00002d96 },
		{ 0x6da577567cb80bbb, &exec_6da577567cb80bbb, 0x00003003 },
		{ 0xeedd4a364b5f9c3b, &exec_eedd4a364b5f9c3b, 0x00004064 },
		{ 0xd055b94bd6ad15f9, &exec_d055b94bd6ad15f9, 0x00002da2 },
		{ 0x099396b0a4fc2da8, &exec_099396b0a4fc2da8, 0x00002da8 },
		{ 0x6da35a965baf2e49, &exec_6da35a965baf2e49, 0x00002dad },
		{ 0x3b0bdc5dadb555c1, &exec_3b0bdc5dadb555c1, 0x00002db4 },
		{ 0xf6ac83b758e666eb, &exec_f6ac83b758e666eb, 0x00002dbf },
		{ 0xcc797f2749179beb, &exec_cc797f2749179beb, 0x0000379b },
		{ 0x71da28554f9d5390, &exec_71da28554f9d5390, 0x00002dd6 },
		{ 0x5a5d2f1b17ef654e, &exec_5a5d2f1b17ef654e, 0x00002ddc },
		{ 0x544a3a1b11eb9def, &exec_544a3a1b11eb9def, 0x00002de1 },
		{ 0x2a2bef97366a3e04, &exec_2a2bef97366a3e04, 0x00004077 },
		{ 0xe57cc25a0c135749, &exec_e57cc25a0c135749, 0x00002de9 },
		{ 0xabdfecd41f8dcc49, &exec_abdfecd41f8dcc49, 0x0000331b },
		{ 0xf330debc74cbae08, &exec_f330debc74cbae08, 0x00002df0 },
		{ 0x7a386d679846cdad, &exec_7a386d679846cdad, 0x0000493d },
		{ 0x3ad274ce3b2db6e9, &exec_3ad274ce3b2db6e9, 0x00002f69 },
		{ 0x23100dd79d49f51d, &exec_23100dd79d49f51d, 0x00002dfd },
		{ 0xc1929a749fcd3376, &exec_c1929a749fcd3376, 0x00002e03 },
		{ 0xaa7e6fb5b3ecbc40, &exec_aa7e6fb5b3ecbc40, 0x00002e09 },
		{ 0x6c79cfaa2d980876, &exec_6c79cfaa2d980876, 0x00002e0d },
		{ 0x8b1c8ab48cdac5cb, &exec_8b1c8ab48cdac5cb, 0x00002e1f },
		{ 0xee524f903e9019a1, &exec_ee524f903e9019a1, 0x000030a9 },
		{ 0xe1bd681ae29ecfb0, &exec_e1bd681ae29ecfb0, 0x00002e25 },
		{ 0x0f48279fc0407e96, &exec_0f48279fc0407e96, 0x000031d2 },
		{ 0x8d10194295b613af, &exec_8d10194295b613af, 0x00002e31 },
		{ 0x66c436c357c01fe8, &exec_66c436c357c01fe8, 0x00002e36 },
		{ 0x52395e42e14dee9f, &exec_52395e42e14dee9f, 0x00003f0a },
		{ 0x7ac654e746906e58, &exec_7ac654e746906e58, 0x0000451e },
		{ 0x84462f7b149e060f, &exec_84462f7b149e060f, 0x00002e3b },
		{ 0x8cebd1ae8faa95f5, &exec_8cebd1ae8faa95f5, 0x00002e41 },
		{ 0x56a5b13fb79a67ee, &exec_56a5b13fb79a67ee, 0x00003c53 },
		{ 0x9c3dc6530594bfc9, &exec_9c3dc6530594bfc9, 0x00002e61 },
		{ 0x17259cf743172d38, &exec_17259cf743172d38, 0x00002e66 },
		{ 0xf79958b35c8c212b, &exec_f79958b35c8c212b, 0x00002e6b },
		{ 0x85ac2c254ec101a2, &exec_85ac2c254ec101a2, 0x00002e81 },
		{ 0x96efa33e2e338bdb, &exec_96efa33e2e338bdb, 0x00002e93 },
		{ 0xc7691b8c29ad6dc4, &exec_c7691b8c29ad6dc4, 0x00002f8a },
		{ 0x52fb0e25a2885e1e, &exec_52fb0e25a2885e1e, 0x00002e9c },
		{ 0xddd96c76e64a908d, &exec_ddd96c76e64a908d, 0x000037e2 },
		{ 0xda3c168bc67c51b6, &exec_da3c168bc67c51b6, 0x00002ea0 },
		{ 0xb253cd889fedc19b, &exec_b253cd889fedc19b, 0x00002ea4 },
		{ 0x065901da64167fc3, &exec_065901da64167fc3, 0x00003fc0 },
		{ 0xe5d2698e61f54311, &exec_e5d2698e61f54311, 0x00002eae },
		{ 0xdfe097ba44e43acb, &exec_dfe097ba44e43acb, 0x0000454d },
		{ 0x0eea11127d178331, &exec_0eea11127d178331, 0x00002eb9 },
		{ 0x1ae6329b540a5b0b, &exec_1ae6329b540a5b0b, 0x000038bc },
		{ 0x077a499a310a3fb3, &exec_077a499a310a3fb3, 0x00003846 },
		{ 0xeaaf229ff282c5ad, &exec_eaaf229ff282c5ad, 0x000048cf },
		{ 0xcfe9331f7b597eda, &exec_cfe9331f7b597eda, 0x00002ebe },
		{ 0x42e4ce6c1c6eb6eb, &exec_42e4ce6c1c6eb6eb, 0x00003121 },
		{ 0x8e0369da0068a295, &exec_8e0369da0068a295, 0x00002ec5 },
		{ 0x57d3f37a2563d70d, &exec_57d3f37a2563d70d, 0x00002ecf },
		{ 0x23fa900dfec1c2fc, &exec_23fa900dfec1c2fc, 0x00002ed4 },
		{ 0x7ff6b34979d8ed56, &exec_7ff6b34979d8ed56, 0x00002eda },
		{ 0xad605a2de479eab3, &exec_ad605a2de479eab3, 0x00002ee6 },
		{ 0x631532d00e7393c0, &exec_631532d00e7393c0, 0x00002eef },
		{ 0xfa5d12784126f879, &exec_fa5d12784126f879, 0x00002ef3 },
		{ 0xe4517b063b58db55, &exec_e4517b063b58db55, 0x00002efc },
		{ 0x30e3142543e8a913, &exec_30e3142543e8a913, 0x00002f0b },
		{ 0xad215c72b6fcbd50, &exec_ad215c72b6fcbd50, 0x00002f1f },
		{ 0x9cfd776a5217fb44, &exec_9cfd776a5217fb44, 0x00002f25 },
		{ 0xefb39386a2e16c5f, &exec_efb39386a2e16c5f, 0x00002f2a },
		{ 0x682f418873ed44db, &exec_682f418873ed44db, 0x00002f2e },
		{ 0xec3b823606da50fa, &exec_ec3b823606da50fa, 0x00002f37 },
		{ 0x65ba2892e6d07127, &exec_65ba2892e6d07127, 0x00002f3b },
		{ 0x0f6b933a0a02b7a2, &exec_0f6b933a0a02b7a2, 0x00004431 },
		{ 0xbcd7bde11b5c2dbd, &exec_bcd7bde11b5c2dbd, 0x00004111 },
		{ 0xf0ae467491365dc4, &exec_f0ae467491365dc4, 0x00002f3e },
		{ 0x6eb9cb55a79099cc, &exec_6eb9cb55a79099cc, 0x00002f42 },
		{ 0x863504d96b33da85, &exec_863504d96b33da85, 0x0000483d },
		{ 0xaf24acbbe120cf03, &exec_af24acbbe120cf03, 0x00002f46 },
		{ 0xa0c1f5a825dea99e, &exec_a0c1f5a825dea99e, 0x00002f4b },
		{ 0x2a7896a8e460e2d0, &exec_2a7896a8e460e2d0, 0x000036a4 },
		{ 0x6fef55528c1fd4a0, &exec_6fef55528c1fd4a0, 0x00002f54 },
		{ 0x89aeec5ecfa02632, &exec_89aeec5ecfa02632, 0x00002f5e },
		{ 0x3baf9239876a37d6, &exec_3baf9239876a37d6, 0x00003a69 },
		{ 0xd5110878fae5cc00, &exec_d5110878fae5cc00, 0x00002f80 },
		{ 0x18b169ec3c2e556d, &exec_18b169ec3c2e556d, 0x00002f90 },
		{ 0xaea01a3c4ae577ab, &exec_aea01a3c4ae577ab, 0x00002f93 },
		{ 0xcee6a90d7cc0dc66, &exec_cee6a90d7cc0dc66, 0x000034ea },
		{ 0xace8a547f5fa2030, &exec_ace8a547f5fa2030, 0x00002fa3 },
		{ 0x3a6d4a5b38e0d498, &exec_3a6d4a5b38e0d498, 0x00002fa7 },
		{ 0x1c561dcc6a194b60, &exec_1c561dcc6a194b60, 0x00002fac },
		{ 0x3d689aabc9a291b8, &exec_3d689aabc9a291b8, 0x000031a0 },
		{ 0xef18a08061d5f95c, &exec_ef18a08061d5f95c, 0x00002fb0 },
		{ 0x25e44b8f7b7722d3, &exec_25e44b8f7b7722d3, 0x00002fb5 },
		{ 0x474a7066fbb63bd7, &exec_474a7066fbb63bd7, 0x00002fb8 },
		{ 0x9ef29946f2743ae0, &exec_9ef29946f2743ae0, 0x00002fbb },
		{ 0x720570aa6af3caf9, &exec_720570aa6af3caf9, 0x00002fbe },
		{ 0x871d9c41aa728e2d, &exec_871d9c41aa728e2d, 0x00002fd1 },
		{ 0x53d497d3dc8f8910, &exec_53d497d3dc8f8910, 0x00002fd5 },
		{ 0xb2b0d4c864f577d7, &exec_b2b0d4c864f577d7, 0x00003aeb },
		{ 0x09ba17bc32cd7dad, &exec_09ba17bc32cd7dad, 0x00002fe3 },
		{ 0x4699c86f94f1c181, &exec_4699c86f94f1c181, 0x00002fe6 },
		{ 0x7ae552980a3c3200, &exec_7ae552980a3c3200, 0x00002fef },
		{ 0x7007901f10bf11e0, &exec_7007901f10bf11e0, 0x00002ff4 },
		{ 0xc40e7ec754d10f3f, &exec_c40e7ec754d10f3f, 0x000034ab },
		{ 0x3ad8842f11ee8d5f, &exec_3ad8842f11ee8d5f, 0x0000301c },
		{ 0x3bc2c2c4412ddaa9, &exec_3bc2c2c4412ddaa9, 0x00004751 },
		{ 0x8d7c264b5803a022, &exec_8d7c264b5803a022, 0x00003028 },
		{ 0xf999d80b8b6eb384, &exec_f999d80b8b6eb384, 0x0000302b },
		{ 0xf053ff6c4afbef28, &exec_f053ff6c4afbef28, 0x00003cc1 },
		{ 0x8c7f81af5ad5dd7b, &exec_8c7f81af5ad5dd7b, 0x00003bf7 },
		{ 0x0c6dda2e6c814831, &exec_0c6dda2e6c814831, 0x0000303b },
		{ 0x5989ed2d5700c66d, &exec_5989ed2d5700c66d, 0x0000303f },
		{ 0x9da6fbd09e6f39e2, &exec_9da6fbd09e6f39e2, 0x00003c81 },
		{ 0xa54aaa7b041d0aba, &exec_a54aaa7b041d0aba, 0x00003042 },
		{ 0x8fe8f50dae719952, &exec_8fe8f50dae719952, 0x00003047 },
		{ 0x6c1930cf07d4ad03, &exec_6c1930cf07d4ad03, 0x00003053 },
		{ 0xd510ab098eea7070, &exec_d510ab098eea7070, 0x0000306b },
		{ 0x044df1b3abd52d4b, &exec_044df1b3abd52d4b, 0x0000343d },
		{ 0x43b48c64e750802e, &exec_43b48c64e750802e, 0x000043d0 },
		{ 0x7326254f1ebeb96a, &exec_7326254f1ebeb96a, 0x00003076 },
		{ 0x15af32ae4e27f0fb, &exec_15af32ae4e27f0fb, 0x0000307c },
		{ 0x388f624d3da63c4d, &exec_388f624d3da63c4d, 0x00003e2d },
		{ 0x6ebb76d226bd2151, &exec_6ebb76d226bd2151, 0x00003084 },
		{ 0xe4a10d379e9f2bf6, &exec_e4a10d379e9f2bf6, 0x00003087 },
		{ 0x981dfdfaedfdc981, &exec_981dfdfaedfdc981, 0x000030a4 },
		{ 0xddcf6e41e34dbd31, &exec_ddcf6e41e34dbd31, 0x000041da },
		{ 0x9adf8893f487ad6d, &exec_9adf8893f487ad6d, 0x000030b9 },
		{ 0x9556efb12f3101e1, &exec_9556efb12f3101e1, 0x000030bd },
		{ 0x5eaba193675fbcf1, &exec_5eaba193675fbcf1, 0x000030c2 },
		{ 0x4f62f3620b8f70e9, &exec_4f62f3620b8f70e9, 0x000030c9 },
		{ 0x87f7e1c8845c8ac9, &exec_87f7e1c8845c8ac9, 0x000030cb },
		{ 0xce782552479975be, &exec_ce782552479975be, 0x000030d0 },
		{ 0xfd5a47dafcf801bd, &exec_fd5a47dafcf801bd, 0x000030d7 },
		{ 0x9c31574c71a3592b, &exec_9c31574c71a3592b, 0x000030dc },
		{ 0x072ce6e6f5ee07eb, &exec_072ce6e6f5ee07eb, 0x000030df },
		{ 0xd60668db82713d7c, &exec_d60668db82713d7c, 0x000030e2 },
		{ 0x55f8ebf26d1af1c3, &exec_55f8ebf26d1af1c3, 0x000030e5 },
		{ 0x532ac0e07773253b, &exec_532ac0e07773253b, 0x000030e8 },
		{ 0x366c45d46f3494f2, &exec_366c45d46f3494f2, 0x000030ec },
		{ 0x0fe9f8a8c2292f4d, &exec_0fe9f8a8c2292f4d, 0x000043ea },
		{ 0x4f9e87740cdf4761, &exec_4f9e87740cdf4761, 0x00003105 },
		{ 0x178e2cd3dec9df6c, &exec_178e2cd3dec9df6c, 0x0000310b },
		{ 0x94812dd56c8a3436, &exec_94812dd56c8a3436, 0x00003111 },
		{ 0x61034683f2126c7e, &exec_61034683f2126c7e, 0x00003684 },
		{ 0xac0110401424b163, &exec_ac0110401424b163, 0x0000311a },
		{ 0x90966c771c3330ca, &exec_90966c771c3330ca, 0x00003964 },
		{ 0xb2bdf3b6a2c3be93, &exec_b2bdf3b6a2c3be93, 0x000033f3 },
		{ 0xaf4af53450718f30, &exec_af4af53450718f30, 0x00003128 },
		{ 0x142829b252f60930, &exec_142829b252f60930, 0x0000312f },
		{ 0xe2de2994331214b5, &exec_e2de2994331214b5, 0x0000313b },
		{ 0x538cde7dced01e77, &exec_538cde7dced01e77, 0x00003145 },
		{ 0x61675874b1d26ecd, &exec_61675874b1d26ecd, 0x000035b2 },
		{ 0x047e23be1f395ee3, &exec_047e23be1f395ee3, 0x00003151 },
		{ 0xc00aeb7f50b7fc0c, &exec_c00aeb7f50b7fc0c, 0x00003f86 },
		{ 0xb859f13b2804da30, &exec_b859f13b2804da30, 0x00003254 },
		{ 0xacf2f9d75d506eb2, &exec_acf2f9d75d506eb2, 0x0000315c },
		{ 0xb0571477107fcb51, &exec_b0571477107fcb51, 0x00003d8a },
		{ 0xcc6c4be319d92d3f, &exec_cc6c4be319d92d3f, 0x00003169 },
		{ 0x6d42d55c27b79e2b, &exec_6d42d55c27b79e2b, 0x00003913 },
		{ 0x74153cf108f142bb, &exec_74153cf108f142bb, 0x0000316f },
		{ 0xdacccdfe2be4b9e7, &exec_dacccdfe2be4b9e7, 0x0000346d },
		{ 0x18fd2953e4159c8a, &exec_18fd2953e4159c8a, 0x00003174 },
		{ 0xe8f86c6ff72914eb, &exec_e8f86c6ff72914eb, 0x0000317e },
		{ 0x30d35d81e4593553, &exec_30d35d81e4593553, 0x00003181 },
		{ 0x85b2321ce2f925b0, &exec_85b2321ce2f925b0, 0x00003187 },
		{ 0x33e479355e5fa3b5, &exec_33e479355e5fa3b5, 0x0000318c },
		{ 0x8ae1a4c30cc8118b, &exec_8ae1a4c30cc8118b, 0x00003190 },
		{ 0x38ab5bcee2b72edb, &exec_38ab5bcee2b72edb, 0x00003197 },
		{ 0xb401ee3999a91ea9, &exec_b401ee3999a91ea9, 0x00003ecb },
		{ 0x4a53713b4ff07787, &exec_4a53713b4ff07787, 0x000031a6 },
		{ 0x204721e56975fcc8, &exec_204721e56975fcc8, 0x000031af },
		{ 0x2c813c8148c0c2fd, &exec_2c813c8148c0c2fd, 0x000031b5 },
		{ 0x3ca94e0aaf29118b, &exec_3ca94e0aaf29118b, 0x000035ef },
		{ 0xd46b09ab2069c834, &exec_d46b09ab2069c834, 0x000031b9 },
		{ 0x8c2ae4e60355fcf1, &exec_8c2ae4e60355fcf1, 0x000031cd },
		{ 0x600bf106a3e38e20, &exec_600bf106a3e38e20, 0x000031d6 },
		{ 0x20537dbc56c4eeb8, &exec_20537dbc56c4eeb8, 0x000031eb },
		{ 0x0d5906d59965a2e9, &exec_0d5906d59965a2e9, 0x000031f2 },
		{ 0x6444f6a2ce62311c, &exec_6444f6a2ce62311c, 0x000031f9 },
		{ 0x59bead6d0dddcbfe, &exec_59bead6d0dddcbfe, 0x00004639 },
		{ 0xb56817dffdf1f86d, &exec_b56817dffdf1f86d, 0x000031fd },
		{ 0xb703a2dedb42fba2, &exec_b703a2dedb42fba2, 0x00003201 },
		{ 0xd0d94524fd7ea5b0, &exec_d0d94524fd7ea5b0, 0x00003208 },
		{ 0x27ac19469284c6db, &exec_27ac19469284c6db, 0x0000321e },
		{ 0x4d3c77402e8ec8ea, &exec_4d3c77402e8ec8ea, 0x0000322d },
		{ 0x01f4610e8c077280, &exec_01f4610e8c077280, 0x0000323f },
		{ 0xb982daa0dbe84447, &exec_b982daa0dbe84447, 0x0000405a },
		{ 0x13ecc9a0fa30a3a4, &exec_13ecc9a0fa30a3a4, 0x0000403f },
		{ 0x4ad482369d3763f2, &exec_4ad482369d3763f2, 0x0000324a },
		{ 0xe041b1c29d707758, &exec_e041b1c29d707758, 0x000040fe },
		{ 0x3d8f4414027d3c6f, &exec_3d8f4414027d3c6f, 0x0000325c },
		{ 0x56ccb48f7ff28e00, &exec_56ccb48f7ff28e00, 0x00003d29 },
		{ 0x245311bd33a92450, &exec_245311bd33a92450, 0x0000333b },
		{ 0xee8162b442bc84a2, &exec_ee8162b442bc84a2, 0x00003265 },
		{ 0x32466371e616479d, &exec_32466371e616479d, 0x00003269 },
		{ 0x1e5373f78be2679d, &exec_1e5373f78be2679d, 0x0000326d },
		{ 0x90b7efd9ab7f46a9, &exec_90b7efd9ab7f46a9, 0x000033d7 },
		{ 0x16981edf3e87a48d, &exec_16981edf3e87a48d, 0x00003273 },
		{ 0xd6f24e501428a09d, &exec_d6f24e501428a09d, 0x0000327a },
		{ 0x851c021008975841, &exec_851c021008975841, 0x00004850 },
		{ 0xde686bb802a7cf24, &exec_de686bb802a7cf24, 0x0000327f },
		{ 0xa86266cee6b7e517, &exec_a86266cee6b7e517, 0x00003287 },
		{ 0x854790afa94af8d1, &exec_854790afa94af8d1, 0x00003292 },
		{ 0xd943f9550b21f110, &exec_d943f9550b21f110, 0x00003295 },
		{ 0x5afafaf329f5073c, &exec_5afafaf329f5073c, 0x00003c43 },
		{ 0x1bed04f15838451c, &exec_1bed04f15838451c, 0x000032a8 },
		{ 0x8e08d962dd939020, &exec_8e08d962dd939020, 0x000032bd },
		{ 0x5f13a9326b494cd0, &exec_5f13a9326b494cd0, 0x000032d0 },
		{ 0x7e3122a2e1ad396c, &exec_7e3122a2e1ad396c, 0x000032d3 },
		{ 0x5241ee8b588d3c4a, &exec_5241ee8b588d3c4a, 0x000032d9 },
		{ 0xd7533287bdfd339b, &exec_d7533287bdfd339b, 0x000032dd },
		{ 0xb24782d62ccdf340, &exec_b24782d62ccdf340, 0x00003bce },
		{ 0xbcccc655c0297a7d, &exec_bcccc655c0297a7d, 0x000032e1 },
		{ 0x61eb38490c6e4ba0, &exec_61eb38490c6e4ba0, 0x000032ec },
		{ 0x2610dd19bf66ee3b, &exec_2610dd19bf66ee3b, 0x000032fc },
		{ 0x15398dad23c69472, &exec_15398dad23c69472, 0x00003305 },
		{ 0x7f0856a4f0742f7b, &exec_7f0856a4f0742f7b, 0x00003310 },
		{ 0x4af099b4827cbb37, &exec_4af099b4827cbb37, 0x00003312 },
		{ 0xd158784eb67f5864, &exec_d158784eb67f5864, 0x00003315 },
		{ 0xc2739435c51272c9, &exec_c2739435c51272c9, 0x00003321 },
		{ 0x408e1e90e1d3fed7, &exec_408e1e90e1d3fed7, 0x00003327 },
		{ 0x04f790b4a83edd21, &exec_04f790b4a83edd21, 0x00004020 },
		{ 0xc06d100331436049, &exec_c06d100331436049, 0x0000332c },
		{ 0x7fe7ce28aed473a7, &exec_7fe7ce28aed473a7, 0x00003338 },
		{ 0x33f0eae18457b55d, &exec_33f0eae18457b55d, 0x00003346 },
		{ 0xe15d0f94a1b98237, &exec_e15d0f94a1b98237, 0x00003349 },
		{ 0xe9964e021f50358f, &exec_e9964e021f50358f, 0x00004636 },
		{ 0x335f19e2d5a8a750, &exec_335f19e2d5a8a750, 0x00003352 },
		{ 0xc5c01340eb2fceae, &exec_c5c01340eb2fceae, 0x0000335a },
		{ 0x3bf666ac9d1fbeca, &exec_3bf666ac9d1fbeca, 0x00003372 },
		{ 0x6561d4211b21af60, &exec_6561d4211b21af60, 0x00003aa0 },
		{ 0x4225d3be06991447, &exec_4225d3be06991447, 0x0000337f },
		{ 0x9fdd4131c43ea40a, &exec_9fdd4131c43ea40a, 0x00003383 },
		{ 0xb10cfcb2f500ed3a, &exec_b10cfcb2f500ed3a, 0x00003388 },
		{ 0x3809dd04b1f0a06a, &exec_3809dd04b1f0a06a, 0x0000338c },
		{ 0x4396882d3b41a770, &exec_4396882d3b41a770, 0x00003393 },
		{ 0xfbca6bccb8292b95, &exec_fbca6bccb8292b95, 0x00003396 },
		{ 0x70610a635dc93579, &exec_70610a635dc93579, 0x00003f24 },
		{ 0x7c39c88ad8eb6a80, &exec_7c39c88ad8eb6a80, 0x000033ac },
		{ 0x63cb475cdea4112e, &exec_63cb475cdea4112e, 0x00003875 },
		{ 0x08671df893f46a08, &exec_08671df893f46a08, 0x000033b8 },
		{ 0xfb4605a210095c92, &exec_fb4605a210095c92, 0x000033c0 },
		{ 0xfeaabe7ee492fc6a, &exec_feaabe7ee492fc6a, 0x000045e1 },
		{ 0x5e43500d8c2caaf2, &exec_5e43500d8c2caaf2, 0x00000000 },
		{ 0x10d166600f78cdf5, &exec_10d166600f78cdf5, 0x00003ebc },
		{ 0x1d211cffde33660a, &exec_1d211cffde33660a, 0x000033d2 },
		{ 0xf47d94364fd7c03d, &exec_f47d94364fd7c03d, 0x000033df },
		{ 0xeda02a953a65cdcd, &exec_eda02a953a65cdcd, 0x000033e6 },
		{ 0xc509a42133a0cca7, &exec_c509a42133a0cca7, 0x000033ee },
		{ 0xe6f14eedd283960a, &exec_e6f14eedd283960a, 0x000047d2 },
		{ 0xbc7c7a16f45d2e56, &exec_bc7c7a16f45d2e56, 0x000033f8 },
		{ 0xeb000aebaa8253d5, &exec_eb000aebaa8253d5, 0x0000340f },
		{ 0xd913d2b63f20199b, &exec_d913d2b63f20199b, 0x00003414 },
		{ 0x5634fe1f06d0d0fa, &exec_5634fe1f06d0d0fa, 0x00003419 },
		{ 0x0539a1db8c319696, &exec_0539a1db8c319696, 0x00003424 },
		{ 0xbeff035e6118e051, &exec_beff035e6118e051, 0x0000342b },
		{ 0xbcbb3fae494a6bd7, &exec_bcbb3fae494a6bd7, 0x00003436 },
		{ 0xde1a49b42039e859, &exec_de1a49b42039e859, 0x00003446 },
		{ 0xe1ece9ac6cca6d4d, &exec_e1ece9ac6cca6d4d, 0x00003449 },
		{ 0x611858e4641c01a3, &exec_611858e4641c01a3, 0x00003d18 },
		{ 0xca164364d2c14a27, &exec_ca164364d2c14a27, 0x00003450 },
		{ 0xbd9a3376562bc095, &exec_bd9a3376562bc095, 0x0000422e },
		{ 0x4e9f1b0dc7f947d7, &exec_4e9f1b0dc7f947d7, 0x0000416c },
		{ 0xeec9549c3b6a6ec2, &exec_eec9549c3b6a6ec2, 0x00003eee },
		{ 0x6047ce5537b1cc4c, &exec_6047ce5537b1cc4c, 0x00003465 },
		{ 0xc66f13cf3c53b9dd, &exec_c66f13cf3c53b9dd, 0x0000484b },
		{ 0x36a7d003e8086bf2, &exec_36a7d003e8086bf2, 0x0000347d },
		{ 0xf8d3288bc50a492b, &exec_f8d3288bc50a492b, 0x00003480 },
		{ 0xbfb6ab72d34e7a74, &exec_bfb6ab72d34e7a74, 0x00000000 },
		{ 0x07c9c814104b4b01, &exec_07c9c814104b4b01, 0x000046bf },
		{ 0x9332f12eafcc89af, &exec_9332f12eafcc89af, 0x00003486 },
		{ 0x8a0c728700b41b74, &exec_8a0c728700b41b74, 0x0000423b },
		{ 0x378391bdd243201b, &exec_378391bdd243201b, 0x0000348c },
		{ 0x70bc88dbf4f63e69, &exec_70bc88dbf4f63e69, 0x00003491 },
		{ 0xbb7b178c86f0fe0e, &exec_bb7b178c86f0fe0e, 0x00003496 },
		{ 0xcb454cb3db2427fb, &exec_cb454cb3db2427fb, 0x00004568 },
		{ 0x08bdac25636ff378, &exec_08bdac25636ff378, 0x0000349e },
		{ 0xdffded4dac2c4695, &exec_dffded4dac2c4695, 0x0000360e },
		{ 0xa4edddef519d316d, &exec_a4edddef519d316d, 0x000045a3 },
		{ 0xf623de3f9566ec96, &exec_f623de3f9566ec96, 0x000034ba },
		{ 0x56b89b1963c59f82, &exec_56b89b1963c59f82, 0x00003def },
		{ 0xe9995fc8c0b56641, &exec_e9995fc8c0b56641, 0x000034bf },
		{ 0x72b19c3184e16f0d, &exec_72b19c3184e16f0d, 0x000034c9 },
		{ 0x2b473b70aa5213e2, &exec_2b473b70aa5213e2, 0x000034cf },
		{ 0x1b4d1448ca268615, &exec_1b4d1448ca268615, 0x000035f6 },
		{ 0x3432da7494c30a02, &exec_3432da7494c30a02, 0x00000000 },
		{ 0x3c7411be2805c7a8, &exec_3c7411be2805c7a8, 0x000034d7 },
		{ 0xf22ff3642263b6a4, &exec_f22ff3642263b6a4, 0x000034de },
		{ 0x6fba47a29cb2c2ac, &exec_6fba47a29cb2c2ac, 0x000034ee },
		{ 0xd29f0fd20ca4dbd3, &exec_d29f0fd20ca4dbd3, 0x00004669 },
		{ 0x74f16674cedb6403, &exec_74f16674cedb6403, 0x00003504 },
		{ 0x07cfa40d745f27dc, &exec_07cfa40d745f27dc, 0x00003509 },
		{ 0x8db4f74fe4858292, &exec_8db4f74fe4858292, 0x00004154 },
		{ 0x4c87db709b3452cf, &exec_4c87db709b3452cf, 0x0000351e },
		{ 0xe1521bcbc5081d05, &exec_e1521bcbc5081d05, 0x000048cb },
		{ 0x89bee6268f88a9dc, &exec_89bee6268f88a9dc, 0x0000352a },
		{ 0x23cc0ada0b626558, &exec_23cc0ada0b626558, 0x0000352f },
		{ 0x19aa45642ba9da92, &exec_19aa45642ba9da92, 0x00003532 },
		{ 0x46ee7cef329a9ec7, &exec_46ee7cef329a9ec7, 0x00003535 },
		{ 0xa4df2063da799736, &exec_a4df2063da799736, 0x0000367f },
		{ 0xf11b84c71801a515, &exec_f11b84c71801a515, 0x00003537 },
		{ 0xbf99d296d533eab7, &exec_bf99d296d533eab7, 0x00003a0d },
		{ 0x418da6b5a2ed0372, &exec_418da6b5a2ed0372, 0x0000353f },
		{ 0xb39cbb0b71e7caf5, &exec_b39cbb0b71e7caf5, 0x00003544 },
		{ 0xd62e31bf09409d73, &exec_d62e31bf09409d73, 0x00004814 },
		{ 0xf42369545b3912b0, &exec_f42369545b3912b0, 0x00003553 },
		{ 0x979090ec5aa998be, &exec_979090ec5aa998be, 0x00003568 },
		{ 0xcda630105dbbc7a5, &exec_cda630105dbbc7a5, 0x00003573 },
		{ 0x18da22430353f306, &exec_18da22430353f306, 0x00003d4c },
		{ 0x987c30216da5dbf3, &exec_987c30216da5dbf3, 0x00003580 },
		{ 0xd3fbd2a020ba28ab, &exec_d3fbd2a020ba28ab, 0x000042a6 },
		{ 0xc160fe4d56929700, &exec_c160fe4d56929700, 0x0000358a },
		{ 0xa21aa09cfc288e54, &exec_a21aa09cfc288e54, 0x0000446f },
		{ 0xd08b19352bdafb69, &exec_d08b19352bdafb69, 0x0000358f },
		{ 0xcfc5cea199d60a88, &exec_cfc5cea199d60a88, 0x00003593 },
		{ 0x62f7b4158e38c1da, &exec_62f7b4158e38c1da, 0x000036c6 },
		{ 0x36a8d1f5429f46db, &exec_36a8d1f5429f46db, 0x00003599 },
		{ 0x9026bbf918db0155, &exec_9026bbf918db0155, 0x000048bc },
		{ 0xadbb8b32501c7420, &exec_adbb8b32501c7420, 0x000035aa },
		{ 0x77d7ddadbca4f0c9, &exec_77d7ddadbca4f0c9, 0x00003fb2 },
		{ 0x383571891ec307c4, &exec_383571891ec307c4, 0x000035c0 },
		{ 0x5269ddb105e4e4d8, &exec_5269ddb105e4e4d8, 0x000035c7 },
		{ 0x4b858c61e8e7d8a2, &exec_4b858c61e8e7d8a2, 0x000035cb },
		{ 0xc9ce558d8dde9d50, &exec_c9ce558d8dde9d50, 0x000035d9 },
		{ 0xddf730209fd0c75c, &exec_ddf730209fd0c75c, 0x000035e8 },
		{ 0xcc695a53747bf4f6, &exec_cc695a53747bf4f6, 0x00003601 },
		{ 0x2c38be7c89b6e120, &exec_2c38be7c89b6e120, 0x00003611 },
		{ 0x8f661d821d80ccf5, &exec_8f661d821d80ccf5, 0x00003616 },
		{ 0xefe7e786c1b6def2, &exec_efe7e786c1b6def2, 0x00000000 },
		{ 0xa869adcf8a22a75c, &exec_a869adcf8a22a75c, 0x00003619 },
		{ 0x68cfa9fb176d272f, &exec_68cfa9fb176d272f, 0x0000361d },
		{ 0xb7eb9d292af4eb2f, &exec_b7eb9d292af4eb2f, 0x00003621 },
		{ 0xb974a3b49f7c1e30, &exec_b974a3b49f7c1e30, 0x0000468b },
		{ 0x2ce704f0aca5a92e, &exec_2ce704f0aca5a92e, 0x00003b62 },
		{ 0x7652070129954f14, &exec_7652070129954f14, 0x00003626 },
		{ 0xcd1ea6b62bf131f6, &exec_cd1ea6b62bf131f6, 0x0000363b },
		{ 0x08b77baff59ae3ab, &exec_08b77baff59ae3ab, 0x0000363e },
		{ 0xfcfbcdfec7e11030, &exec_fcfbcdfec7e11030, 0x00003648 },
		{ 0x376bfbb2729f0d03, &exec_376bfbb2729f0d03, 0x0000364f },
		{ 0x95c3b9c3155ffd62, &exec_95c3b9c3155ffd62, 0x00003659 },
		{ 0xd7bc3563c74c7c2a, &exec_d7bc3563c74c7c2a, 0x00003661 },
		{ 0xacfb037e783581ce, &exec_acfb037e783581ce, 0x00003b24 },
		{ 0xdef733bd605a7e71, &exec_def733bd605a7e71, 0x00003669 },
		{ 0xc6b24aaad1332cad, &exec_c6b24aaad1332cad, 0x0000366f },
		{ 0xec3263e853406a16, &exec_ec3263e853406a16, 0x00003676 },
		{ 0x8ba614eeafe2520a, &exec_8ba614eeafe2520a, 0x00003687 },
		{ 0x981e98192d0389dd, &exec_981e98192d0389dd, 0x0000368b },
		{ 0x2a2f6a7ddcb9616e, &exec_2a2f6a7ddcb9616e, 0x000036c9 },
		{ 0xf5897c999f779a25, &exec_f5897c999f779a25, 0x000036da },
		{ 0xc6e8ae42925a7caa, &exec_c6e8ae42925a7caa, 0x000036de },
		{ 0xc0b0da5ab177ddba, &exec_c0b0da5ab177ddba, 0x000036e1 },
		{ 0xbd6d868bfda2bf7d, &exec_bd6d868bfda2bf7d, 0x000036ec },
		{ 0x3fb7deb984fcee19, &exec_3fb7deb984fcee19, 0x000036f1 },
		{ 0xbdf5add5a1395795, &exec_bdf5add5a1395795, 0x00003702 },
		{ 0x03a8d1c241588d2a, &exec_03a8d1c241588d2a, 0x0000370d },
		{ 0xb0c683d093e3af59, &exec_b0c683d093e3af59, 0x00003718 },
		{ 0xc638a962997fb763, &exec_c638a962997fb763, 0x00003b3b },
		{ 0xb5e163316403665b, &exec_b5e163316403665b, 0x0000372e },
		{ 0xe75ec7759d94ea02, &exec_e75ec7759d94ea02, 0x00003734 },
		{ 0x9110270710c7145e, &exec_9110270710c7145e, 0x0000373a },
		{ 0xe93274954263a00b, &exec_e93274954263a00b, 0x0000373d },
		{ 0xf6d11a9f90347e99, &exec_f6d11a9f90347e99, 0x00004594 },
		{ 0xfedfadb1fe1700ef, &exec_fedfadb1fe1700ef, 0x00003741 },
		{ 0xd6b7c694752026f6, &exec_d6b7c694752026f6, 0x0000374a },
		{ 0xba1d6b37e5d28a94, &exec_ba1d6b37e5d28a94, 0x00003751 },
		{ 0x649dd3e6cf38febd, &exec_649dd3e6cf38febd, 0x00003758 },
		{ 0xf5aa148ea48f3040, &exec_f5aa148ea48f3040, 0x00003775 },
		{ 0x23eec66f1899ab32, &exec_23eec66f1899ab32, 0x00003778 },
		{ 0xc2aae064d5f7f341, &exec_c2aae064d5f7f341, 0x00003783 },
		{ 0xc0943b13cb61cfee, &exec_c0943b13cb61cfee, 0x0000378a },
		{ 0xafb6953468d74e9d, &exec_afb6953468d74e9d, 0x00003791 },
		{ 0x530a58db4caa3c6b, &exec_530a58db4caa3c6b, 0x00003798 },
		{ 0x67c813ed2d09ee20, &exec_67c813ed2d09ee20, 0x000037a8 },
		{ 0x4b49ab9dca2c1dac, &exec_4b49ab9dca2c1dac, 0x000037ae },
		{ 0xc0ef517413b3b8e0, &exec_c0ef517413b3b8e0, 0x000037b3 },
		{ 0x4f904db451c60cf7, &exec_4f904db451c60cf7, 0x000037c2 },
		{ 0xaa3b5b33d5651c11, &exec_aa3b5b33d5651c11, 0x000037e8 },
		{ 0x3ab27c81db1470ec, &exec_3ab27c81db1470ec, 0x000037f8 },
		{ 0x91cb364c109b5676, &exec_91cb364c109b5676, 0x000037fd },
		{ 0x7acb00b7d7a895da, &exec_7acb00b7d7a895da, 0x00003803 },
		{ 0xb3b2c73476fdab2e, &exec_b3b2c73476fdab2e, 0x00003808 },
		{ 0x5aecc5a8d7bae082, &exec_5aecc5a8d7bae082, 0x0000380b },
		{ 0x2ee54ebb31b3ec74, &exec_2ee54ebb31b3ec74, 0x00003812 },
		{ 0x2fec4801e36fc9de, &exec_2fec4801e36fc9de, 0x00003819 },
		{ 0x109e087882d2e819, &exec_109e087882d2e819, 0x0000382b },
		{ 0x838d40da2b301418, &exec_838d40da2b301418, 0x00003e0b },
		{ 0x19abda637c6357b3, &exec_19abda637c6357b3, 0x000044a1 },
		{ 0x35d35fc4dd331ba4, &exec_35d35fc4dd331ba4, 0x0000385c },
		{ 0x7d8eda3bc97b6e63, &exec_7d8eda3bc97b6e63, 0x00003868 },
		{ 0x233b60aab8f29bbb, &exec_233b60aab8f29bbb, 0x0000386d },
		{ 0x21cddcf373f907eb, &exec_21cddcf373f907eb, 0x0000387a },
		{ 0xef1864bf3b25adbe, &exec_ef1864bf3b25adbe, 0x000046eb },
		{ 0xcc4d5dda67320cb6, &exec_cc4d5dda67320cb6, 0x0000388b },
		{ 0xf0ae133ad819bb32, &exec_f0ae133ad819bb32, 0x00004339 },
		{ 0x9a744e2374c74972, &exec_9a744e2374c74972, 0x0000388f },
		{ 0xeddd253b747d9f14, &exec_eddd253b747d9f14, 0x00003be9 },
		{ 0x43c1d4f2ec11cf96, &exec_43c1d4f2ec11cf96, 0x000038a0 },
		{ 0x28697d92e0699c5f, &exec_28697d92e0699c5f, 0x000038a4 },
		{ 0x736c706112a7d5c5, &exec_736c706112a7d5c5, 0x000038af },
		{ 0xea3c7e36e6ccf1d3, &exec_ea3c7e36e6ccf1d3, 0x000038c2 },
		{ 0x8c05a859b33b2925, &exec_8c05a859b33b2925, 0x000038ce },
		{ 0x7ddee0ab411bc0d0, &exec_7ddee0ab411bc0d0, 0x000038d2 },
		{ 0x55ea84e1c75e770a, &exec_55ea84e1c75e770a, 0x000038dd },
		{ 0x8cda949cff7dc33f, &exec_8cda949cff7dc33f, 0x000038f5 },
		{ 0x3ae408e549ba7e3d, &exec_3ae408e549ba7e3d, 0x000038fa },
		{ 0xf2a5a671578f6cad, &exec_f2a5a671578f6cad, 0x00004586 },
		{ 0x3cce84628d712fe0, &exec_3cce84628d712fe0, 0x000043cc },
		{ 0x27bf780e707dce51, &exec_27bf780e707dce51, 0x00003904 },
		{ 0x6b7bf3bd25f7d383, &exec_6b7bf3bd25f7d383, 0x0000390a },
		{ 0x54eeef503b286afd, &exec_54eeef503b286afd, 0x00003921 },
		{ 0x10e4dfb7ef758a26, &exec_10e4dfb7ef758a26, 0x00003bc6 },
		{ 0xab08733bf293b412, &exec_ab08733bf293b412, 0x00003928 },
		{ 0xdf107ab16fa2372e, &exec_df107ab16fa2372e, 0x0000392e },
		{ 0x83317d1ae80cd34b, &exec_83317d1ae80cd34b, 0x0000393b },
		{ 0x648cdc70e4766465, &exec_648cdc70e4766465, 0x0000393e },
		{ 0x738ec66df1690cb1, &exec_738ec66df1690cb1, 0x00003941 },
		{ 0x5fd2994a6be40802, &exec_5fd2994a6be40802, 0x00003945 },
		{ 0x8a09132320430252, &exec_8a09132320430252, 0x00003957 },
		{ 0xc5db953a033ca602, &exec_c5db953a033ca602, 0x00003962 },
		{ 0x23f7345228878b0a, &exec_23f7345228878b0a, 0x00003970 },
		{ 0x9ed205e303590de2, &exec_9ed205e303590de2, 0x00003989 },
		{ 0x01a071fc3d33846a, &exec_01a071fc3d33846a, 0x0000398e },
		{ 0x86f35a6d4fc115ee, &exec_86f35a6d4fc115ee, 0x0000399f },
		{ 0x719df8d5cee1e472, &exec_719df8d5cee1e472, 0x000039a7 },
		{ 0x156c214d469cc764, &exec_156c214d469cc764, 0x000039be },
		{ 0x98976d0ae371bc4b, &exec_98976d0ae371bc4b, 0x000039c3 },
		{ 0xbc435c0888655f84, &exec_bc435c0888655f84, 0x000039cb },
		{ 0x580392ccb6f7eb57, &exec_580392ccb6f7eb57, 0x000039d0 },
		{ 0x7b4f0e23eb2c436b, &exec_7b4f0e23eb2c436b, 0x000039d5 },
		{ 0xb83bd4534f2d651c, &exec_b83bd4534f2d651c, 0x000039ee },
		{ 0x574ae310cb6a400b, &exec_574ae310cb6a400b, 0x000039f9 },
		{ 0xe47e85fa10bfe2ef, &exec_e47e85fa10bfe2ef, 0x000039fc },
		{ 0xa33a9646c77adffc, &exec_a33a9646c77adffc, 0x00003a01 },
		{ 0x6b969f1a30c81a6e, &exec_6b969f1a30c81a6e, 0x00003a1e },
		{ 0x14e6c2437b7deb38, &exec_14e6c2437b7deb38, 0x00003a21 },
		{ 0xf5d21da7557369ae, &exec_f5d21da7557369ae, 0x00003a2c },
		{ 0xce6c28af49621bb5, &exec_ce6c28af49621bb5, 0x00003a42 },
		{ 0xc3cf3cf0bf32ccd6, &exec_c3cf3cf0bf32ccd6, 0x00003b2d },
		{ 0xf4f01956544810ca, &exec_f4f01956544810ca, 0x00003b29 },
		{ 0xfbd003cbded5340d, &exec_fbd003cbded5340d, 0x00003a4d },
		{ 0x61de26c8a1018c54, &exec_61de26c8a1018c54, 0x00003a5b },
		{ 0xdf7b2c11e142bd47, &exec_df7b2c11e142bd47, 0x00003a62 },
		{ 0x2b39b32ed6abcc11, &exec_2b39b32ed6abcc11, 0x0000458f },
		{ 0x72d4f99219079195, &exec_72d4f99219079195, 0x00003a6f },
		{ 0xf782a1782169bc41, &exec_f782a1782169bc41, 0x00003a75 },
		{ 0x529926b58262533d, &exec_529926b58262533d, 0x000047d5 },
		{ 0xf0636a90cb5a06cc, &exec_f0636a90cb5a06cc, 0x00003a7b },
		{ 0x0b16ef91b0a5001e, &exec_0b16ef91b0a5001e, 0x00003a80 },
		{ 0xabfbd1a063aed251, &exec_abfbd1a063aed251, 0x00003a8e },
		{ 0xcdeb5081ff5ca921, &exec_cdeb5081ff5ca921, 0x00003a96 },
		{ 0xcb5f8759c8b3f556, &exec_cb5f8759c8b3f556, 0x00003aa8 },
		{ 0xaaca5e45aab259e6, &exec_aaca5e45aab259e6, 0x00003ab0 },
		{ 0x389812ffc48495e0, &exec_389812ffc48495e0, 0x00003ab8 },
		{ 0xcf6a3571351d5f8f, &exec_cf6a3571351d5f8f, 0x00003dcd },
		{ 0x8f7abd07a89d7a14, &exec_8f7abd07a89d7a14, 0x00003ac6 },
		{ 0x3f0e5a151d9e9434, &exec_3f0e5a151d9e9434, 0x00003ac9 },
		{ 0xc4bbd5aff2313a6a, &exec_c4bbd5aff2313a6a, 0x00003ad1 },
		{ 0xa55edca1a621bca3, &exec_a55edca1a621bca3, 0x00003ad4 },
		{ 0x784bb938abd333b0, &exec_784bb938abd333b0, 0x00003ade },
		{ 0x25725439d5d727fe, &exec_25725439d5d727fe, 0x00003ae4 },
		{ 0xa31989771b1d4b73, &exec_a31989771b1d4b73, 0x00003afc },
		{ 0x031aae66cee748ee, &exec_031aae66cee748ee, 0x00003b1e },
		{ 0x28e28b085323e72e, &exec_28e28b085323e72e, 0x00003e5f },
		{ 0x5dafad914d002c67, &exec_5dafad914d002c67, 0x00003b30 },
		{ 0x17d6e499d2f07bc0, &exec_17d6e499d2f07bc0, 0x00003b36 },
		{ 0xafd8eeb6dbfc7c79, &exec_afd8eeb6dbfc7c79, 0x00003b5e },
		{ 0x0b670afd5af7e71a, &exec_0b670afd5af7e71a, 0x00003b67 },
		{ 0x23d0829b5018cd0c, &exec_23d0829b5018cd0c, 0x00003b6c },
		{ 0xeff8af10f59790dd, &exec_eff8af10f59790dd, 0x00003b84 },
		{ 0xd9c4045f9f742b9c, &exec_d9c4045f9f742b9c, 0x00003b88 },
		{ 0x77efe9b467e3e8e3, &exec_77efe9b467e3e8e3, 0x00003b9e },
		{ 0x2671cb13bf8d2b67, &exec_2671cb13bf8d2b67, 0x0000467c },
		{ 0x108bc097fb1d88e6, &exec_108bc097fb1d88e6, 0x00003baf },
		{ 0xaa1424a6d251b033, &exec_aa1424a6d251b033, 0x00003bd7 },
		{ 0x52fd67477a4622f3, &exec_52fd67477a4622f3, 0x00003bdd },
		{ 0x7a74107d135fcced, &exec_7a74107d135fcced, 0x00003be4 },
		{ 0xece3211a1d665773, &exec_ece3211a1d665773, 0x00003bf1 },
		{ 0xe445c37b20272f9c, &exec_e445c37b20272f9c, 0x00003bfc },
		{ 0xbe9b4f8ee89e2f62, &exec_be9b4f8ee89e2f62, 0x00003c06 },
		{ 0xe487288fab1f79ab, &exec_e487288fab1f79ab, 0x00003c0d },
		{ 0x8c38dbf361b40098, &exec_8c38dbf361b40098, 0x00003c14 },
		{ 0x7036d0992d130340, &exec_7036d0992d130340, 0x00003c22 },
		{ 0xe66613b10d12bab3, &exec_e66613b10d12bab3, 0x00003c26 },
		{ 0x97e69f4ce0977609, &exec_97e69f4ce0977609, 0x00003c33 },
		{ 0xdea6f232f7d0c4f9, &exec_dea6f232f7d0c4f9, 0x00003c3a },
		{ 0xfa6373f68054516c, &exec_fa6373f68054516c, 0x00003c4d },
		{ 0xa2cc00c59c0076d0, &exec_a2cc00c59c0076d0, 0x00003c5d },
		{ 0x41856b2aa5c9a69a, &exec_41856b2aa5c9a69a, 0x00003c63 },
		{ 0xe9c360d1f32a6d74, &exec_e9c360d1f32a6d74, 0x00003c69 },
		{ 0x258919738d23e7ec, &exec_258919738d23e7ec, 0x00003c72 },
		{ 0x2e9f62dacc9ac4c1, &exec_2e9f62dacc9ac4c1, 0x00003c7c },
		{ 0x3b907014647a4283, &exec_3b907014647a4283, 0x00003c86 },
		{ 0xce0d68a862341dff, &exec_ce0d68a862341dff, 0x00003c8a },
		{ 0x9568a49760bf570f, &exec_9568a49760bf570f, 0x00003c95 },
		{ 0xd42b52acccba2d64, &exec_d42b52acccba2d64, 0x00003c99 },
		{ 0xc6c26abe01a65c2c, &exec_c6c26abe01a65c2c, 0x00003cab },
		{ 0x771d455c9fa2e251, &exec_771d455c9fa2e251, 0x00003caf },
		{ 0x5269fc645183b38c, &exec_5269fc645183b38c, 0x00003fb6 },
		{ 0x5c44696175920cb1, &exec_5c44696175920cb1, 0x00003cb3 },
		{ 0x7d56727c406a5c24, &exec_7d56727c406a5c24, 0x00003cba },
		{ 0x5c5e9e9607840060, &exec_5c5e9e9607840060, 0x00003ccb },
		{ 0x094533ff737368c8, &exec_094533ff737368c8, 0x00003ce3 },
		{ 0x11f8b49b05c29522, &exec_11f8b49b05c29522, 0x00003ced },
		{ 0x73faeec1d5031a33, &exec_73faeec1d5031a33, 0x00003cf3 },
		{ 0x45d323704fd79235, &exec_45d323704fd79235, 0x00003cf7 },
		{ 0xdbac943bf0f52cc8, &exec_dbac943bf0f52cc8, 0x00003cfd },
		{ 0x2b10f1dcca366184, &exec_2b10f1dcca366184, 0x00003d11 },
		{ 0x0d9069cdbcddd46f, &exec_0d9069cdbcddd46f, 0x00003d22 },
		{ 0x83dbeb0e4b44dc76, &exec_83dbeb0e4b44dc76, 0x00003d38 },
		{ 0xdcb362b4801a6ba4, &exec_dcb362b4801a6ba4, 0x00003d3f },
		{ 0x179f42293c8b365d, &exec_179f42293c8b365d, 0x00004745 },
		{ 0x72ad32ad34bbe4eb, &exec_72ad32ad34bbe4eb, 0x00003d45 },
		{ 0x2404ee15a6c628c3, &exec_2404ee15a6c628c3, 0x00003d5f },
		{ 0xb8167c966b7de6f3, &exec_b8167c966b7de6f3, 0x00003d64 },
		{ 0x908d024c0b79f285, &exec_908d024c0b79f285, 0x000048ff },
		{ 0x4d3c9b094adc35bb, &exec_4d3c9b094adc35bb, 0x00003d68 },
		{ 0x2d50c12088a5ebc2, &exec_2d50c12088a5ebc2, 0x00003d7c },
		{ 0xa4fb739ee010a03c, &exec_a4fb739ee010a03c, 0x00003d9c },
		{ 0x1a00be979f0d3f7e, &exec_1a00be979f0d3f7e, 0x00003da7 },
		{ 0xaa842f6c6d8549a8, &exec_aa842f6c6d8549a8, 0x00003db8 },
		{ 0x3b4b471a66d2878d, &exec_3b4b471a66d2878d, 0x00003dc4 },
		{ 0x3b268f662e89ffd9, &exec_3b268f662e89ffd9, 0x00003dcf },
		{ 0x50a9408a9e9365e2, &exec_50a9408a9e9365e2, 0x00003dd3 },
		{ 0x0e065c3241911507, &exec_0e065c3241911507, 0x00003dde },
		{ 0x79915c4a8a35747c, &exec_79915c4a8a35747c, 0x00003dea },
		{ 0xfdd8894d3e5a3574, &exec_fdd8894d3e5a3574, 0x00003df5 },
		{ 0xefb3b475a514ceef, &exec_efb3b475a514ceef, 0x00003e00 },
		{ 0x486e3106fc3a01a5, &exec_486e3106fc3a01a5, 0x00003e06 },
		{ 0xe7eb492dee8fe650, &exec_e7eb492dee8fe650, 0x00003e15 },
		{ 0x19bbaa41369aa89f, &exec_19bbaa41369aa89f, 0x00003e18 },
		{ 0x220f984641b092e6, &exec_220f984641b092e6, 0x00003e31 },
		{ 0xbba06676198d607e, &exec_bba06676198d607e, 0x00003e3a },
		{ 0x3e1bfc0888f6db74, &exec_3e1bfc0888f6db74, 0x00003e42 },
		{ 0xe33d3535800e6215, &exec_e33d3535800e6215, 0x00003e4e },
		{ 0x337b64653582bd30, &exec_337b64653582bd30, 0x00003e58 },
		{ 0x6afd3394ec742c62, &exec_6afd3394ec742c62, 0x00003e64 },
		{ 0xd60bf820e96982a4, &exec_d60bf820e96982a4, 0x00003e72 },
		{ 0x277cef308738999a, &exec_277cef308738999a, 0x00004758 },
		{ 0x3232d03f7474d0ba, &exec_3232d03f7474d0ba, 0x00004381 },
		{ 0xf056394277f5cdd9, &exec_f056394277f5cdd9, 0x00003e8f },
		{ 0x1593f0d9d384d8f7, &exec_1593f0d9d384d8f7, 0x00003e96 },
		{ 0x91c19f5fd359dab2, &exec_91c19f5fd359dab2, 0x00003eaa },
		{ 0x6242ed2b08e9c364, &exec_6242ed2b08e9c364, 0x00003eaf },
		{ 0x853dc22b5815f129, &exec_853dc22b5815f129, 0x00003eb3 },
		{ 0xb506366a6b6bc44e, &exec_b506366a6b6bc44e, 0x00003eb6 },
		{ 0x2032ec09689204c6, &exec_2032ec09689204c6, 0x00003f60 },
		{ 0x1227fce277494782, &exec_1227fce277494782, 0x00003ec0 },
		{ 0x694340af325678ea, &exec_694340af325678ea, 0x000041ff },
		{ 0x997548ff43ef2f4f, &exec_997548ff43ef2f4f, 0x00003ed0 },
		{ 0xa651ae88016df0c8, &exec_a651ae88016df0c8, 0x00003eda },
		{ 0xf9c5bee3cd628e3d, &exec_f9c5bee3cd628e3d, 0x00003ee0 },
		{ 0x2c9b2c7d0838c766, &exec_2c9b2c7d0838c766, 0x00003f05 },
		{ 0x0437675321970092, &exec_0437675321970092, 0x00003f20 },
		{ 0x2e5986e3513335e0, &exec_2e5986e3513335e0, 0x00003f2d },
		{ 0xeb0554001e885002, &exec_eb0554001e885002, 0x00003f37 },
		{ 0x82959ee303981fa8, &exec_82959ee303981fa8, 0x0000461e },
		{ 0x71190b5471e63201, &exec_71190b5471e63201, 0x00003f43 },
		{ 0x89472cfa2036a6d7, &exec_89472cfa2036a6d7, 0x00003f4d },
		{ 0xb79a5d9b84bf2352, &exec_b79a5d9b84bf2352, 0x00003f51 },
		{ 0x093aa5e5f06114fa, &exec_093aa5e5f06114fa, 0x00003f55 },
		{ 0x2e33af4eec34abc3, &exec_2e33af4eec34abc3, 0x00003f5a },
		{ 0x5bee64c326afd045, &exec_5bee64c326afd045, 0x00003f66 },
		{ 0xa884ca8e3f3cbdc0, &exec_a884ca8e3f3cbdc0, 0x00003f75 },
		{ 0xf14b6e6143b73cb4, &exec_f14b6e6143b73cb4, 0x00003f7e },
		{ 0xa64085937b8d210b, &exec_a64085937b8d210b, 0x00003f82 },
		{ 0xc3fadf16ceee9e44, &exec_c3fadf16ceee9e44, 0x00003f8c },
		{ 0x7b3b944613fedb2d, &exec_7b3b944613fedb2d, 0x00003f96 },
		{ 0x023c485452fae128, &exec_023c485452fae128, 0x00003f99 },
		{ 0x4f2053a61c890691, &exec_4f2053a61c890691, 0x00003f9c },
		{ 0x30204d450aa9bb58, &exec_30204d450aa9bb58, 0x00003fa0 },
		{ 0xf54474b34ed2cdf2, &exec_f54474b34ed2cdf2, 0x00003fb9 },
		{ 0xdd2039d8e5f219a0, &exec_dd2039d8e5f219a0, 0x00003fc4 },
		{ 0x0482e5384bcdec22, &exec_0482e5384bcdec22, 0x00003fca },
		{ 0xb8e5fe55f43076d4, &exec_b8e5fe55f43076d4, 0x00003fcf },
		{ 0x4881143f0a362cc5, &exec_4881143f0a362cc5, 0x00003fd4 },
		{ 0xc7a0c0fa675b7500, &exec_c7a0c0fa675b7500, 0x00003fda },
		{ 0x03c3c7abb2de6aa9, &exec_03c3c7abb2de6aa9, 0x00003fdf },
		{ 0x71d8dbd6c4f56608, &exec_71d8dbd6c4f56608, 0x00003fe3 },
		{ 0xbb5e0a2e9721038a, &exec_bb5e0a2e9721038a, 0x00000000 },
		{ 0xf61259c532252cab, &exec_f61259c532252cab, 0x00004278 },
		{ 0x4a35e84bd56bd0da, &exec_4a35e84bd56bd0da, 0x00003fed },
		{ 0x1393fee4f7cb1137, &exec_1393fee4f7cb1137, 0x00003ff3 },
		{ 0x6d7a0c7a72d27f76, &exec_6d7a0c7a72d27f76, 0x00004011 },
		{ 0xfcf082f88fac3d68, &exec_fcf082f88fac3d68, 0x0000402a },
		{ 0x14ee5a55dbdec9a4, &exec_14ee5a55dbdec9a4, 0x0000402e },
		{ 0x3c0900540037d51d, &exec_3c0900540037d51d, 0x00004032 },
		{ 0xd92aee8fab82af31, &exec_d92aee8fab82af31, 0x0000442c },
		{ 0x7a728a300043c9ca, &exec_7a728a300043c9ca, 0x0000403b },
		{ 0x6b42ec084579b15f, &exec_6b42ec084579b15f, 0x00004056 },
		{ 0x6a2eba8247757114, &exec_6a2eba8247757114, 0x00004070 },
		{ 0xd1020d4f4a2f0eb3, &exec_d1020d4f4a2f0eb3, 0x0000407d },
		{ 0x814d842253d31c48, &exec_814d842253d31c48, 0x00004085 },
		{ 0x2b88ab185d608f14, &exec_2b88ab185d608f14, 0x0000408a },
		{ 0xe662dc3d1fe502ec, &exec_e662dc3d1fe502ec, 0x00004098 },
		{ 0xa8fe47f9ffe23471, &exec_a8fe47f9ffe23471, 0x0000409c },
		{ 0xcc74aef15fd00239, &exec_cc74aef15fd00239, 0x000040a5 },
		{ 0x95937b0a10b57677, &exec_95937b0a10b57677, 0x000040a9 },
		{ 0x8f3ae83f139881b7, &exec_8f3ae83f139881b7, 0x000040b2 },
		{ 0xeb07697af6d7476f, &exec_eb07697af6d7476f, 0x000040b7 },
		{ 0x0ac3fa6356cf0bf7, &exec_0ac3fa6356cf0bf7, 0x000040be },
		{ 0xe99d4396eae4d97c, &exec_e99d4396eae4d97c, 0x000040c4 },
		{ 0xc6f892b7e462eb81, &exec_c6f892b7e462eb81, 0x000040cf },
		{ 0x815a8b089beeeee2, &exec_815a8b089beeeee2, 0x000046d0 },
		{ 0xdf57f103af8a9c40, &exec_df57f103af8a9c40, 0x000040d9 },
		{ 0xe110986393e859e6, &exec_e110986393e859e6, 0x000040e5 },
		{ 0x4fdfa30704fcc81b, &exec_4fdfa30704fcc81b, 0x000040ed },
		{ 0x74ef313871636b75, &exec_74ef313871636b75, 0x000040f1 },
		{ 0x6e78fb17f5cc2e61, &exec_6e78fb17f5cc2e61, 0x00004104 },
		{ 0x819e2b0345723a70, &exec_819e2b0345723a70, 0x00004114 },
		{ 0x8d6d6e8e7c2604a6, &exec_8d6d6e8e7c2604a6, 0x00004120 },
		{ 0xb8f2c8b158026ad0, &exec_b8f2c8b158026ad0, 0x0000412b },
		{ 0x9c4e690f76c27786, &exec_9c4e690f76c27786, 0x00004130 },
		{ 0x8a9f8124302c65ee, &exec_8a9f8124302c65ee, 0x00004136 },
		{ 0xb731830584f071a5, &exec_b731830584f071a5, 0x0000413b },
		{ 0xb49205ab629e12d6, &exec_b49205ab629e12d6, 0x00004141 },
		{ 0xdbc75560511c01d9, &exec_dbc75560511c01d9, 0x00004149 },
		{ 0x37f29c5d92e517df, &exec_37f29c5d92e517df, 0x0000414e },
		{ 0x0787914336bd7925, &exec_0787914336bd7925, 0x000042b7 },
		{ 0x611a3bb51a187084, &exec_611a3bb51a187084, 0x00004162 },
		{ 0x6c5bb8b7eedfddf3, &exec_6c5bb8b7eedfddf3, 0x00004175 },
		{ 0x1be6cb3ac5fc3851, &exec_1be6cb3ac5fc3851, 0x000043d3 },
		{ 0xc18864cfe617be5b, &exec_c18864cfe617be5b, 0x00004183 },
		{ 0x5cefc1a4de79ca1a, &exec_5cefc1a4de79ca1a, 0x00004187 },
		{ 0x962fe6d3ef50a7d1, &exec_962fe6d3ef50a7d1, 0x0000418d },
		{ 0x514742d6cab4e517, &exec_514742d6cab4e517, 0x000042f2 },
		{ 0xe50375e29a7a88f7, &exec_e50375e29a7a88f7, 0x0000419e },
		{ 0x4d8f0223764b0fe1, &exec_4d8f0223764b0fe1, 0x000041a2 },
		{ 0x0652c044080214db, &exec_0652c044080214db, 0x000041a6 },
		{ 0x0563ba5933050154, &exec_0563ba5933050154, 0x000041ad },
		{ 0x5efd0ba7d993877d, &exec_5efd0ba7d993877d, 0x000041b8 },
		{ 0x62420e873c1fec40, &exec_62420e873c1fec40, 0x000041c0 },
		{ 0x1c26b6da650b593b, &exec_1c26b6da650b593b, 0x000045d8 },
		{ 0xce78a6f4e89158af, &exec_ce78a6f4e89158af, 0x000041cb },
		{ 0x9817f7f97196774d, &exec_9817f7f97196774d, 0x000041d0 },
		{ 0x67a93bdb1ffff27f, &exec_67a93bdb1ffff27f, 0x000041d8 },
		{ 0x9107231c2116e761, &exec_9107231c2116e761, 0x00004204 },
		{ 0x2c0f3ed308503c04, &exec_2c0f3ed308503c04, 0x00004210 },
		{ 0x990d05b0e04a09fa, &exec_990d05b0e04a09fa, 0x00004237 },
		{ 0xc978bfe8b2ac8244, &exec_c978bfe8b2ac8244, 0x00004251 },
		{ 0xd7e1fb8f32c9023c, &exec_d7e1fb8f32c9023c, 0x00004257 },
		{ 0x1be39f7351111e3c, &exec_1be39f7351111e3c, 0x0000425c },
		{ 0x810d1e0898162ea6, &exec_810d1e0898162ea6, 0x00004261 },
		{ 0x789768e93c01b943, &exec_789768e93c01b943, 0x00004266 },
		{ 0x687cdd987802e63a, &exec_687cdd987802e63a, 0x00004273 },
		{ 0x0b3dd4f61c21f11f, &exec_0b3dd4f61c21f11f, 0x00004289 },
		{ 0x8f9ed010acaa710f, &exec_8f9ed010acaa710f, 0x0000428d },
		{ 0xfca0db475fe3ea50, &exec_fca0db475fe3ea50, 0x00004290 },
		{ 0x3b0786a5d4d45d00, &exec_3b0786a5d4d45d00, 0x000042a0 },
		{ 0x74d430330666cc23, &exec_74d430330666cc23, 0x000042ac },
		{ 0xd7f82f43f4a507f9, &exec_d7f82f43f4a507f9, 0x000042af },
		{ 0xccc677e783348169, &exec_ccc677e783348169, 0x000042b4 },
		{ 0x78c24cc19c556685, &exec_78c24cc19c556685, 0x000042cf },
		{ 0xf96fd6ffc654a35d, &exec_f96fd6ffc654a35d, 0x000042d6 },
		{ 0x2801c29234e8b061, &exec_2801c29234e8b061, 0x000042e0 },
		{ 0xf72a6fae7b1c02fd, &exec_f72a6fae7b1c02fd, 0x000042e3 },
		{ 0xcbc3767d8a179e26, &exec_cbc3767d8a179e26, 0x000042ee },
		{ 0xa798e038e634fa89, &exec_a798e038e634fa89, 0x000042f9 },
		{ 0xa7abdf255551e9f9, &exec_a7abdf255551e9f9, 0x000042fc },
		{ 0xb3d4817a1e82ad69, &exec_b3d4817a1e82ad69, 0x00004300 },
		{ 0x71bc204cc9f87ef8, &exec_71bc204cc9f87ef8, 0x00004304 },
		{ 0x05135c9d75137861, &exec_05135c9d75137861, 0x00004308 },
		{ 0x176597d90bdd8c58, &exec_176597d90bdd8c58, 0x0000430c },
		{ 0xfb252c22669c8dd7, &exec_fb252c22669c8dd7, 0x00004310 },
		{ 0x835b3fea18ac7a05, &exec_835b3fea18ac7a05, 0x00004314 },
		{ 0x29b8ff36daaa8ec2, &exec_29b8ff36daaa8ec2, 0x00004318 },
		{ 0xf2201ac00e423296, &exec_f2201ac00e423296, 0x0000431f },
		{ 0xbb352f0b0881da55, &exec_bb352f0b0881da55, 0x00004327 },
		{ 0xe38e46ab4da20c90, &exec_e38e46ab4da20c90, 0x00004334 },
		{ 0xfa76bcf6d0a0ca84, &exec_fa76bcf6d0a0ca84, 0x00004342 },
		{ 0xed5cdeb82dc14c0e, &exec_ed5cdeb82dc14c0e, 0x00004347 },
		{ 0x54718e1e7ec14324, &exec_54718e1e7ec14324, 0x00004368 },
		{ 0x617f0e1d12c0d1a9, &exec_617f0e1d12c0d1a9, 0x0000436d },
		{ 0xcaba81d849c19e3f, &exec_caba81d849c19e3f, 0x00004379 },
		{ 0xb5bb2c6befc2743a, &exec_b5bb2c6befc2743a, 0x0000437c },
		{ 0xad081f1f67a9700d, &exec_ad081f1f67a9700d, 0x00004386 },
		{ 0xc35a2a32c0615576, &exec_c35a2a32c0615576, 0x0000438b },
		{ 0xc458de4f7f5ad9a5, &exec_c458de4f7f5ad9a5, 0x00004398 },
		{ 0x7a90c4fa01a72779, &exec_7a90c4fa01a72779, 0x00004481 },
		{ 0x0d99909f5cda80fd, &exec_0d99909f5cda80fd, 0x000043a7 },
		{ 0x12ae8217333cf4fd, &exec_12ae8217333cf4fd, 0x000043af },
		{ 0x215d8c3b75cd172e, &exec_215d8c3b75cd172e, 0x000043be },
		{ 0x5a0a97f93a461b94, &exec_5a0a97f93a461b94, 0x000043c5 },
		{ 0x5a4ef65a8d5454b5, &exec_5a4ef65a8d5454b5, 0x000043d9 },
		{ 0x90f4f4ec5e9431a0, &exec_90f4f4ec5e9431a0, 0x000043de },
		{ 0x77af7ec2f18a5c7f, &exec_77af7ec2f18a5c7f, 0x000043ed },
		{ 0xda634e986213bdb2, &exec_da634e986213bdb2, 0x000043fd },
		{ 0xd7e696412482a4cc, &exec_d7e696412482a4cc, 0x00004505 },
		{ 0x1ee72740f8b3ab7b, &exec_1ee72740f8b3ab7b, 0x00004401 },
		{ 0x10b55f2728608c56, &exec_10b55f2728608c56, 0x0000440a },
		{ 0x3766f50f1d088535, &exec_3766f50f1d088535, 0x0000440e },
		{ 0x7ebed6b7fe5c462b, &exec_7ebed6b7fe5c462b, 0x00004421 },
		{ 0xf1b727ddf639a632, &exec_f1b727ddf639a632, 0x00004434 },
		{ 0xdbd9f6f8e09072d5, &exec_dbd9f6f8e09072d5, 0x00004437 },
		{ 0xfe74c8b2fbaf5844, &exec_fe74c8b2fbaf5844, 0x00004442 },
		{ 0xb76a0065c3294b70, &exec_b76a0065c3294b70, 0x00004446 },
		{ 0x8c22a1d2a0db1cdc, &exec_8c22a1d2a0db1cdc, 0x0000444d },
		{ 0x54f50c21ef942797, &exec_54f50c21ef942797, 0x00004453 },
		{ 0xd47f25a321ccee12, &exec_d47f25a321ccee12, 0x00004465 },
		{ 0x6742d5dc3eb9cf00, &exec_6742d5dc3eb9cf00, 0x00004471 },
		{ 0x5a6697fbb1fbc0dc, &exec_5a6697fbb1fbc0dc, 0x00004485 },
		{ 0x23ade04efc7a49cb, &exec_23ade04efc7a49cb, 0x00004489 },
		{ 0xcc9f24690a3be5ed, &exec_cc9f24690a3be5ed, 0x000044b5 },
		{ 0xdc946fc2015a3e11, &exec_dc946fc2015a3e11, 0x000044c1 },
		{ 0x2adab9d797cfcda5, &exec_2adab9d797cfcda5, 0x000044cd },
		{ 0x1d1fcf6bf36a30b3, &exec_1d1fcf6bf36a30b3, 0x000044de },
		{ 0x06ea3baa0ab92712, &exec_06ea3baa0ab92712, 0x000044e4 },
		{ 0x080a9baeff004597, &exec_080a9baeff004597, 0x000044ee },
		{ 0x64396c1034e4e086, &exec_64396c1034e4e086, 0x000044f8 },
		{ 0xa39c0c523d7117c0, &exec_a39c0c523d7117c0, 0x000044fd },
		{ 0x1ab3b456e8db8895, &exec_1ab3b456e8db8895, 0x000044ff },
		{ 0xa7e90fca5962b22e, &exec_a7e90fca5962b22e, 0x00004503 },
		{ 0x878f3b30ee819393, &exec_878f3b30ee819393, 0x00004507 },
		{ 0x20abad276f29ab12, &exec_20abad276f29ab12, 0x0000460f },
		{ 0x80396db5fb2e7137, &exec_80396db5fb2e7137, 0x00000000 },
		{ 0x6d4f870502b6e0c1, &exec_6d4f870502b6e0c1, 0x00004510 },
		{ 0x65cebbc6aab722dc, &exec_65cebbc6aab722dc, 0x00004517 },
		{ 0xc795fb59140b5f52, &exec_c795fb59140b5f52, 0x00000000 },
		{ 0x306fb42febfeeabd, &exec_306fb42febfeeabd, 0x00004524 },
		{ 0xce7f1d07399a2daa, &exec_ce7f1d07399a2daa, 0x00004528 },
		{ 0xd26182be8511e85b, &exec_d26182be8511e85b, 0x00004535 },
		{ 0xb411d7c4cc7f2dc4, &exec_b411d7c4cc7f2dc4, 0x00004545 },
		{ 0x74ae33f059f7e027, &exec_74ae33f059f7e027, 0x00004549 },
		{ 0x721101b43f69d5d9, &exec_721101b43f69d5d9, 0x00004553 },
		{ 0x1cfdcbecf28a563d, &exec_1cfdcbecf28a563d, 0x0000455f },
		{ 0x85703fe5a002d7fa, &exec_85703fe5a002d7fa, 0x00004566 },
		{ 0x92dca7f0a988952a, &exec_92dca7f0a988952a, 0x0000456e },
		{ 0x666bdc2be9f94972, &exec_666bdc2be9f94972, 0x00004570 },
		{ 0x1b793c5a7a584b65, &exec_1b793c5a7a584b65, 0x00004572 },
		{ 0x31be01e5f24b8333, &exec_31be01e5f24b8333, 0x000045a8 },
		{ 0x06af44bd7ca2288b, &exec_06af44bd7ca2288b, 0x000045ae },
		{ 0x4ead83648f76fb98, &exec_4ead83648f76fb98, 0x000045b5 },
		{ 0xac9a9107db28980b, &exec_ac9a9107db28980b, 0x000045c3 },
		{ 0x08b72e48d1a13855, &exec_08b72e48d1a13855, 0x000045dd },
		{ 0x7e92d25926f82498, &exec_7e92d25926f82498, 0x000045f2 },
		{ 0x3920b1ed04df3d52, &exec_3920b1ed04df3d52, 0x000045f5 },
		{ 0x3cb38890513094b1, &exec_3cb38890513094b1, 0x000045fb },
		{ 0x9bcec21071ea663d, &exec_9bcec21071ea663d, 0x00004603 },
		{ 0x6e8671ae89e2565a, &exec_6e8671ae89e2565a, 0x00004616 },
		{ 0x5fb1dd1f06b715e9, &exec_5fb1dd1f06b715e9, 0x0000461c },
		{ 0xb34c510f6033006e, &exec_b34c510f6033006e, 0x00004625 },
		{ 0xac0fc414362b0ab4, &exec_ac0fc414362b0ab4, 0x0000462c },
		{ 0x02c15a244e3cbc82, &exec_02c15a244e3cbc82, 0x00004633 },
		{ 0x5db6c9ab096733b5, &exec_5db6c9ab096733b5, 0x0000463e },
		{ 0x503f5e22e33919be, &exec_503f5e22e33919be, 0x00004644 },
		{ 0xf64bc45c666747c6, &exec_f64bc45c666747c6, 0x00004650 },
		{ 0x471b00899fac1cee, &exec_471b00899fac1cee, 0x00004656 },
		{ 0xe50cc06097a502ff, &exec_e50cc06097a502ff, 0x00004672 },
		{ 0xd82318effee3df19, &exec_d82318effee3df19, 0x00004675 },
		{ 0xa4b26783132c9aab, &exec_a4b26783132c9aab, 0x00004687 },
		{ 0xe6a1965c0e9a760e, &exec_e6a1965c0e9a760e, 0x00004696 },
		{ 0x2dc57393882b1a5d, &exec_2dc57393882b1a5d, 0x000046a5 },
		{ 0xaa8d04dd3302c77d, &exec_aa8d04dd3302c77d, 0x000046ac },
		{ 0x9ec2d1ba2d328b15, &exec_9ec2d1ba2d328b15, 0x000046b3 },
		{ 0x522b09f6c59e7a3c, &exec_522b09f6c59e7a3c, 0x000046d4 },
		{ 0xf28f90f111ed016e, &exec_f28f90f111ed016e, 0x000046da },
		{ 0xf2f45e72ea1b51c3, &exec_f2f45e72ea1b51c3, 0x00004713 },
		{ 0x0ddedd166d93e575, &exec_0ddedd166d93e575, 0x0000471b },
		{ 0x0741f8d7609e9b0b, &exec_0741f8d7609e9b0b, 0x00004730 },
		{ 0x7dbdc9827df1ce51, &exec_7dbdc9827df1ce51, 0x0000473c },
		{ 0xa444807a321046ba, &exec_a444807a321046ba, 0x0000475f },
		{ 0xdbdd2956417c008c, &exec_dbdd2956417c008c, 0x00004766 },
		{ 0x29d745953ae6db3a, &exec_29d745953ae6db3a, 0x00004779 },
		{ 0x4dfe1924018a1239, &exec_4dfe1924018a1239, 0x00004781 },
		{ 0x8fa77db22634cd5f, &exec_8fa77db22634cd5f, 0x00004787 },
		{ 0xc9df5e9728bbb2b7, &exec_c9df5e9728bbb2b7, 0x0000478e },
		{ 0x01fe7ae71d15329d, &exec_01fe7ae71d15329d, 0x00004798 },
		{ 0x5c8a743d54a0f525, &exec_5c8a743d54a0f525, 0x0000479d },
		{ 0x4a398a28bcfb19e6, &exec_4a398a28bcfb19e6, 0x000047a7 },
		{ 0xa2de81697e699295, &exec_a2de81697e699295, 0x000047bb },
		{ 0x65eea664bd1bca28, &exec_65eea664bd1bca28, 0x000047bf },
		{ 0xa697c99f59d2d180, &exec_a697c99f59d2d180, 0x000047d0 },
		{ 0xe4278a78a2591e40, &exec_e4278a78a2591e40, 0x000047e4 },
		{ 0xd3da70dbbb6361c5, &exec_d3da70dbbb6361c5, 0x000047f0 },
		{ 0x3ed46378b34dcd59, &exec_3ed46378b34dcd59, 0x000047f4 },
		{ 0x4f9e8fb80fa46c1b, &exec_4f9e8fb80fa46c1b, 0x000047f7 },
		{ 0xebebc12f9c47a18e, &exec_ebebc12f9c47a18e, 0x00004808 },
		{ 0xb8662e267ff26ce3, &exec_b8662e267ff26ce3, 0x0000480b },
		{ 0x4830954f26b59049, &exec_4830954f26b59049, 0x0000480f },
		{ 0xdbcd42028ddd0548, &exec_dbcd42028ddd0548, 0x00004819 },
		{ 0x9324f86aaadc3ae0, &exec_9324f86aaadc3ae0, 0x0000481c },
		{ 0x34706f43bfcadd8d, &exec_34706f43bfcadd8d, 0x00004830 },
		{ 0xbe8ed53595a1fdf6, &exec_be8ed53595a1fdf6, 0x00004856 },
		{ 0x51db50e47ddec25d, &exec_51db50e47ddec25d, 0x00004862 },
		{ 0x7320b2338023ddbe, &exec_7320b2338023ddbe, 0x00004875 },
		{ 0xae8af81a991ef56a, &exec_ae8af81a991ef56a, 0x0000487b },
		{ 0xdfa2a06fe8d4510b, &exec_dfa2a06fe8d4510b, 0x0000487e },
		{ 0x83a65eb4aa8ce193, &exec_83a65eb4aa8ce193, 0x00004882 },
		{ 0xac1ce868b6bb9068, &exec_ac1ce868b6bb9068, 0x0000488b },
		{ 0x688e400a16fe6df5, &exec_688e400a16fe6df5, 0x0000488f },
		{ 0x8109f65dd3d0dab6, &exec_8109f65dd3d0dab6, 0x00004897 },
		{ 0x01ad2b33b8870a39, &exec_01ad2b33b8870a39, 0x0000489b },
		{ 0xcfb74624e175b715, &exec_cfb74624e175b715, 0x0000489f },
		{ 0xa965a2a4a2a94bcc, &exec_a965a2a4a2a94bcc, 0x000048a4 },
		{ 0xb75383c124be1123, &exec_b75383c124be1123, 0x000048e0 },
		{ 0xfe226e3ec0ec5e4f, &exec_fe226e3ec0ec5e4f, 0x000048e9 },
		{ 0x934234cf1833fe8d, &exec_934234cf1833fe8d, 0x000048f8 },
		{ 0x58eb1d408b47c700, &exec_58eb1d408b47c700, 0x00004907 },
		{ 0x647586cc9b205805, &exec_647586cc9b205805, 0x0000490c },
		{ 0xbda49e15c235e657, &exec_bda49e15c235e657, 0x0000491b },
		{ 0x38bea648e4044aa2, &exec_38bea648e4044aa2, 0x00004923 },
		{ 0xa240a7fef01f48b7, &exec_a240a7fef01f48b7, 0x00004928 },
		{ 0xc2d5dc46c0b69b0e, &exec_c2d5dc46c0b69b0e, 0x0000492c },
		{ 0x342a082969ffadfc, &exec_342a082969ffadfc, 0x00004943 }
	};
	dict.loadFunctions(functionList, 0x10bf);
}
