def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 34
    ndkVersion "26.0.10792818"
    defaultConfig {
        if (buildAsApplication) {
            namespace "org.eukaryot.sonic3air"
        }
        minSdkVersion 23
        targetSdkVersion 29     // Can't go higher, as requestLegacyExternalStorage in the manifest won't work otherwise
        versionCode 1
        versionName "24.02.02.0"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_APP_PLATFORM=android-23", "-DANDROID_STL=c++_static"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                //abiFilters 'armeabi-v7a'
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            debuggable false     // Set to true to allow for "Attach debugger" even for signed APKs
            minifyEnabled false
        }
    }
    namespace 'org.eukaryot.sonic3air'
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
    lint {
        abortOnError false
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
            }
        }
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
