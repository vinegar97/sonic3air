#define NATIVIZED_CODE_AVAILABLE

// First occurrence: playMusic, line 34
static void exec_506ffe8a2af2dc33(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: playMusic, line 36
static void exec_5a473f4401af5816(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	*context.getParameter<uint32*>(4) = var1.get<uint32>();
}

// First occurrence: ChangeMusicTempo, line 73
static void exec_c0ff9637e7dd080c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<float>(context.getParameter<uint32>(8), context.getParameter<float>());
}

// First occurrence: ChangeMusicTempo, line 74
static void exec_ce716b14930ec7ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: ChangeMusicTempo, line 76
static void exec_9020d1435865255e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var0.get<uint8>(), (uint8)context.getParameter<int64>(8)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: ChangeMusicTempo, line 77
static void exec_1f39a7936501c711(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((float)context.readLocalVariable<float>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var3((float)(float)var2.get<uint8>());
	const AnyBaseValue var4((float)OpcodeExecUtils::safeDivide<float>((float)context.getParameter<float>(4), (float)var3.get<float>()));
	const AnyBaseValue var5((float)(var0.get<float>() + var4.get<float>()));
	context.writeLocalVariable<float>(context.getParameter<uint32>(16), var5.get<float>());
}

// First occurrence: ChangeMusicTempo, line 79
static void exec_561684daacce1cb0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<float>(1, context.readLocalVariable<float>(context.getParameter<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: popAll, line 36
static void exec_bc5ccfef1002e890(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>() = context.readValueStack<uint32>(-1);
	context.moveValueStack(-1);
}

// First occurrence: pow, line 144
static void exec_671947260b44a215(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: pow, line 146
static void exec_f976436f56d7e5ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)1);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
}

// First occurrence: pow, line 147
static void exec_ec01ca74ad30c5f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
}

// First occurrence: pow, line 147
static void exec_ec2d5d72b5fe607e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: pow, line 149
static void exec_5f5c3a91c7179d90(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * var1.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
}

// First occurrence: LookupSinCos, line 157
static void exec_67f200fcc46e86da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var0.get<uint8>());
}

// First occurrence: LookupSinCos, line 158
static void exec_9b0d11ce5c759031(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>() = context.readValueStack<uint16>(-1);
	context.moveValueStack(-1);
}

// First occurrence: lookupSin, line 164
static void exec_7dd7a0c59807c2e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: lookupCos, line 169
static void exec_8959ec5501601e5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: LookupAngleByVector, line 176
static void exec_0fc2d51b7ced4dcd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.moveValueStack(2);
}

// First occurrence: LookupAngleByVector, line 176
static void exec_7e0f7888f365a966(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(uint16)context.readValueStack<uint8>(-1));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: lookupAngleByVector, line 179
static void exec_b5ca5e3b50243f2d(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: lookupAngleByVector, line 181
static void exec_dd3ef9bc07b0a548(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: lookupAngleByVector, line 186
static void exec_4c6920278f9a10d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: lookupAngleByVector, line 189
static void exec_a3c2a4035c6f2ba1(const RuntimeOpcodeContext context)
{
}

// First occurrence: lookupAngleByVector, line 190
static void exec_4fb75938b3a429b6(const RuntimeOpcodeContext context)
{
}

// First occurrence: lookupAngleByVector, line 193
static void exec_1eb6ceb5ad923544(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var5.get<uint16>());
}

// First occurrence: lookupAngleByVector, line 194
static void exec_8ac13f7930b8c978(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: lookupAngleByVector, line 199
static void exec_90523b6ceb04f37e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)((uint8)context.getParameter<int64>() - var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var6.get<uint8>());
}

// First occurrence: lookupAngleByVector, line 202
static void exec_9140d6bd17eb403e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: lookupAngleByVector, line 204
static void exec_a83273c2bec86a91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: lookupAngleByVector, line 208
static void exec_f75dc1a0dc423213(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)-(signed)var0.get<uint8>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var1.get<uint8>());
}

// First occurrence: LookupHighPrecisionSinCos, line 218
static void exec_2118d40b05ba0840(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: LookupHighPrecisionSinCos, line 219
static void exec_43a9cea787c79283(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: LookupHighPrecisionSinCos, line 220
static void exec_0f5b767f9916c96f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint16*>(12) = var4.get<uint16>();
}

// First occurrence: checkBoxOverlap, line 225
static void exec_cc57b36ca16525f5(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), context.readValueStack<uint32>(-7));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), context.readValueStack<uint32>(-8));
	context.moveValueStack(-8);
}

// First occurrence: checkBoxOverlap, line 227
static void exec_65db06c32f247114(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
}

// First occurrence: checkBoxOverlap, line 230
static void exec_ae234b9812e76d7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() >= var3.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: checkBoxOverlap, line 230
static void exec_4f016986fa09a6cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() <= var2.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: tableLookupAddress, line 239
static void exec_d71a1c5c03b1978c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: tableLookupAddress, line 244
static void exec_b1ec3173f03a71ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: tableLookupAddress, line 246
static void exec_252cc508c4d350b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var7.get<uint32>());
}

// First occurrence: tableLookupAddress, line 247
static void exec_44cbc69464ba1d55(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: tableLookupAddress, line 248
static void exec_9425600b75d9a8a2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	context.writeValueStack<uint64>(1, (uint64)var1.get<uint32>());
	context.moveValueStack(2);
}

// First occurrence: tableLookupAddress, line 248
static void exec_b754a38bdd670416(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint32>());
	context.moveValueStack(2);
}

// First occurrence: tableLookupAddressLog, line 260
static void exec_b6cdf9723c79a12f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint32>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(2, (uint64)var1.get<int16>());
	context.moveValueStack(3);
}

// First occurrence: GetRandomNumber, line 273
static void exec_c78b23e87a01ceb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	*context.getParameter<uint32*>(8) = var0.get<uint32>();
}

// First occurrence: GetRandomNumber, line 274
static void exec_9e1bd6afb71475e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: GetRandomNumber, line 274
static void exec_67bd41b3fc23a26d(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>(8) = (uint32)context.getParameter<int64>();
}

// First occurrence: GetRandomNumber, line 277
static void exec_1eeb9e25a01778bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	*context.getParameter<uint32*>(8) = var0.get<uint32>();
}

// First occurrence: GetRandomNumber, line 278
static void exec_91c5af94b287ab2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: GetRandomNumber, line 279
static void exec_a0f983393694469c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: GetRandomNumber, line 282
static void exec_3a358d797f385f1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	*context.getParameter<uint16*>(8) = var0.get<uint16>();
}

// First occurrence: GetRandomNumber, line 283
static void exec_73ec74eb4941680b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
}

// First occurrence: GetRandomNumber, line 284
static void exec_4035c4cd527294f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: GetRandomNumber, line 287
static void exec_e5542bf49ff2e123(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint32>());
}

// First occurrence: unpackColor, line 310
static void exec_c019979569d108e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: unpackColor, line 313
static void exec_f4b1c83b80063a83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(2);
}

// First occurrence: unpackColor, line 314
static void exec_b2f13ecd8e246e1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(0, (var4.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(28));
	context.moveValueStack(2);
}

// First occurrence: unpackColor, line 316
static void exec_ded2a5844029da59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(20) & 0x1f)));
	context.writeValueStack<uint32>(0, (var4.get<uint32>() + var7.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: unpackColor, line 322
static void exec_d158cd9e1ea71f59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var7.get<uint32>());
}

// First occurrence: unpackColor, line 323
static void exec_8351d7d37e203a7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var7.get<uint32>());
}

// First occurrence: packColor, line 331
static void exec_931af4a7bc31209b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(20)));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: packColor, line 332
static void exec_fa8a5c8d2da8e2a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var6.get<uint32>(), (uint32)context.getParameter<int64>(28)));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var9.get<uint16>());
}

// First occurrence: packColor, line 334
static void exec_ead790a9e7bc0814(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() << (uint16)(context.getParameter<int64>(20) & 0x0f)));
	context.writeValueStack<uint16>(0, (var6.get<uint16>() + var9.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: packColorExt, line 343
static void exec_0234691bbff78d1b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() << (uint16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var8((uint16)(var4.get<uint16>() + var7.get<uint16>()));
	context.writeValueStack<uint16>(0, (var8.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	context.moveValueStack(1);
}

// First occurrence: blendColorsPacked, line 347
static void exec_f8991c6696808d30(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.moveValueStack(-3);
}

// First occurrence: blendColors, line 359
static void exec_f199a4c615da85a8(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.moveValueStack(-3);
}

// First occurrence: blendColors_BGR32, line 366
static void exec_2a3f55c56cd62752(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>(12) - var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(var2.get<uint32>() * var6.get<uint32>()));
	const AnyBaseValue var8((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() & (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var11((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	const AnyBaseValue var12((uint32)(uint32)var11.get<uint16>());
	const AnyBaseValue var13((uint32)(var10.get<uint32>() * var12.get<uint32>()));
	const AnyBaseValue var14((uint32)(var7.get<uint32>() + var13.get<uint32>()));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var18((uint32)(var16.get<uint32>() >> (uint32)(context.getParameter<int64>(48) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(56), var18.get<uint32>());
}

// First occurrence: blendColors_BGR32, line 367
static void exec_fa6ad48e1da2a132(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)((uint32)context.getParameter<int64>(20) - var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(var4.get<uint32>() * var8.get<uint32>()));
	const AnyBaseValue var10((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() >> (uint32)(context.getParameter<int64>(36) & 0x1f)));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() & (uint32)(context.getParameter<int64>(44))));
	const AnyBaseValue var15((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(52)));
	const AnyBaseValue var16((uint32)(uint32)var15.get<uint16>());
	const AnyBaseValue var17((uint32)(var14.get<uint32>() * var16.get<uint32>()));
	const AnyBaseValue var18((uint32)(var9.get<uint32>() + var17.get<uint32>()));
	const AnyBaseValue var20((uint32)(var18.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var22((uint32)(var20.get<uint32>() >> (uint32)(context.getParameter<int64>(64) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(72), var22.get<uint32>());
}

// First occurrence: blendColors_RGBA32, line 378
static void exec_19386e356fe22f1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() << (uint32)(context.getParameter<int64>(28) & 0x1f)));
	const AnyBaseValue var10((uint32)(var6.get<uint32>() + var9.get<uint32>()));
	const AnyBaseValue var11((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint32>(0, (var10.get<uint32>() + var11.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: convertColors32, line 384
static void exec_95ada9d4d39f865d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(12) & 0x1f)));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var10((uint32)(var4.get<uint32>() + var9.get<uint32>()));
	const AnyBaseValue var11((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(40)));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() & (uint32)(context.getParameter<int64>(44))));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() >> (uint32)(context.getParameter<int64>(52) & 0x1f)));
	const AnyBaseValue var16((uint32)(var10.get<uint32>() + var15.get<uint32>()));
	const AnyBaseValue var17((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(60)));
	const AnyBaseValue var19((uint32)(var17.get<uint32>() & (uint32)(context.getParameter<int64>(64))));
	const AnyBaseValue var21((uint32)(var19.get<uint32>() >> (uint32)(context.getParameter<int64>(72) & 0x1f)));
	context.writeValueStack<uint32>(0, (var16.get<uint32>() + var21.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: applyGlobalComponentTint_BGR32, line 390
static void exec_dd3965e49282ca01(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(12));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() * var4.get<uint32>()));
	const AnyBaseValue var7((int32)OpcodeExecUtils::safeDivide<int32>((int32)var5.get<int32>(), (int32)context.getParameter<int64>(20)));
	const AnyBaseValue var8((uint16)*context.getParameter<uint16*>(28));
	const AnyBaseValue var9((int32)(uint32)var8.get<int16>());
	context.writeValueStack<uint32>(0, (var7.get<uint32>() + var9.get<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(36));
	context.moveValueStack(3);
}

// First occurrence: applyGlobalComponentTint_BGR32, line 391
static void exec_dbd00ae4ac73bf80(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(20));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() * var6.get<uint32>()));
	const AnyBaseValue var9((int32)OpcodeExecUtils::safeDivide<int32>((int32)var7.get<int32>(), (int32)context.getParameter<int64>(28)));
	const AnyBaseValue var10((uint16)*context.getParameter<uint16*>(36));
	const AnyBaseValue var11((int32)(uint32)var10.get<int16>());
	context.writeValueStack<uint32>(0, (var9.get<uint32>() + var11.get<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(44));
	context.moveValueStack(3);
}

// First occurrence: VDPHelper.getDirectWriteCode, line 405
static void exec_4fbc54942f7b3cab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() | var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var6.get<uint32>());
}

// First occurrence: VDPHelper.getDirectWriteCode, line 406
static void exec_01ce0b39efb0aac9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (uint32)(context.getParameter<int64>(12) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var5.get<uint32>());
}

// First occurrence: VDPHelper.getDirectWriteCode, line 407
static void exec_bb9442e34ff306cd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(0, (var2.get<uint32>() + var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 417
static void exec_d5d561113f7b93cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 418
static void exec_ae8f205957e92eb3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: VDPHelper.getVRAMAddressFromWriteCode, line 419
static void exec_f8cc44e89897b10a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var8((uint32)(var2.get<uint32>() + var7.get<uint32>()));
	context.writeValueStack<int16>(0, (uint16)var8.get<int32>());
	context.moveValueStack(1);
}

// First occurrence: VDP.Config.enableHInt, line 427
static void exec_b7bb133ad4195fa2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, !var0.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: VDP.Config.enableHInt, line 430
static void exec_e3032fdf1db3ca29(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 660
static void exec_5861822a769f5c98(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 662
static void exec_1dce2fec30b6d79f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var0.get<uint16>());
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 662
static void exec_fc532059db3bd4c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 664
static void exec_251bfe87894c6302(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 665
static void exec_1807275d0ba659d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: VDP.Util.clearPatternRectInVRAM, line 665
static void exec_bf16c3c81bd7f037(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
}

// First occurrence: checkForMultiReturn, line 727
static void exec_148c0fe54cabeddd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: checkForMultiReturn, line 729
static void exec_764d26f3f8aa1c07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: signalMultiReturn, line 740
static void exec_4531c22acbc7b3b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: debugDrawOutlineRect, line 749
static void exec_5e2ab80daa01ba09(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), context.readValueStack<uint32>(-5));
	context.moveValueStack(-5);
}

// First occurrence: debugDrawOutlineRect, line 752
static void exec_7e58cc98530f9a48(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 753
static void exec_6dbf79553f63cac8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((int64)1);
	context.writeValueStack<uint32>(0, (var2.get<uint32>() - var3.get<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 754
static void exec_08f6599325278376(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: debugDrawOutlineRect, line 755
static void exec_8012f2943267a4e6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((int64)1);
	context.writeValueStack<uint32>(1, (var2.get<uint32>() - var3.get<uint32>()));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: Input.setControllerRumbleByAddress, line 765
static void exec_bb53a77ac6e75508(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<float>(context.getParameter<uint32>(4), context.readValueStack<float>(-2));
	context.writeLocalVariable<float>(context.getParameter<uint32>(8), context.readValueStack<float>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: Input.setControllerRumbleByAddress, line 768
static void exec_98ed931ef5ec7570(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Input.setControllerRumbleByAddress, line 769
static void exec_a957390d283fa89c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<float>(1, context.readLocalVariable<float>(context.getParameter<uint32>(4)));
	context.writeValueStack<float>(2, context.readLocalVariable<float>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.drawBackground, line 20
static void exec_3156da18aee014a5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.drawBackground, line 21
static void exec_4eaa226070c76f9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int16>(-1, OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.MainMenu, line 47
static void exec_5f35d590c33baea5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.MainMenu, line 52
static void exec_793a7b915be5167d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
}

// First occurrence: CompetitionMode.MainMenu, line 53
static void exec_77482cd5703bdc05(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 55
static void exec_ee3c9a8f4d19e054(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 57
static void exec_e27c4058cff67ea9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
}

// First occurrence: CompetitionMode.MainMenu, line 60
static void exec_241786c029ed3b85(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.MainMenu, line 61
static void exec_16cdcbee3e0b7625(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.MainMenu, line 90
static void exec_6ed8978b8148dc28(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	*context.getParameter<uint16*>(32) = var5.get<uint16>();
}

// First occurrence: CompetitionMode.MainMenu, line 91
static void exec_2c0a3e314f5b0b5e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 93
static void exec_a19edb822f696dd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var5.get<uint32>());
}

// First occurrence: CompetitionMode.MainMenu, line 94
static void exec_19b5d82e290a60f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 95
static void exec_8358e23a69e1c25e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.MainMenu, line 96
static void exec_91020ce27b431c3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.MainMenu, line 97
static void exec_e7eca91fd43503df(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: CompetitionMode.MainMenu, line 98
static void exec_faeb460cf7a43ab1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: CompetitionMode.MainMenu, line 100
static void exec_6992951b661dac16(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: CompetitionMode.MainMenu, line 101
static void exec_b9bb71a7fd260efc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: CompetitionMode.MainMenu, line 121
static void exec_8676953e613a69bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
}

// First occurrence: CompetitionMode.MainMenu, line 126
static void exec_801e47772551d36a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.MainMenu, line 128
static void exec_4e2b3048407f88b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 138
static void exec_dd1dff521db29df2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var0.get<uint32>());
}

// First occurrence: CompetitionMode.MainMenu, line 140
static void exec_d2cf287e40a694f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	*context.getParameter<uint32*>(4) = var0.get<uint32>();
}

// First occurrence: CompetitionMode.MainMenu, line 150
static void exec_dee6af623f3fd902(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: CompetitionMode.MainMenu, line 151
static void exec_4c27a3b5d595a6b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)(uint64)var0.get<int16>());
	context.writeValueStack<uint64>(0, (var1.get<uint64>() + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 155
static void exec_1f65fad518dcce09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	*context.getParameter<uint8*>(8) = var0.get<uint8>();
}

// First occurrence: CompetitionMode.MainMenu, line 156
static void exec_d62d46f180f13e3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() & var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 159
static void exec_c13a97ea154bdf24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 161
static void exec_44d4eafc4cea295b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.MainMenu, line 156
static void exec_862f6b7e29eab87b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 167
static void exec_cd61017e3ef591f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.MainMenu, line 168
static void exec_4bd4ef9a0ab3d86f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.MainMenu, line 168
static void exec_606a7eda314e03ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	*context.getParameter<uint32*>() = var0.get<uint32>();
}

// First occurrence: CompetitionMode.MainMenu, line 171
static void exec_1f18f3961afdd5ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint8>());
}

// First occurrence: fn00aa36, line 215
static void exec_5936601c36b83241(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)0);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
}

// First occurrence: fn00aa36, line 216
static void exec_d50114ad286e9ac5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint8>());
}

// First occurrence: fn00aa36, line 217
static void exec_decab6b699a2608d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00aa36, line 217
static void exec_04f4551fe7d3f35c(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00aa54, line 226
static void exec_59bd4fa284757dc1(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: fn00aa74, line 239
static void exec_79c16b17a9a261fd(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: fn00aadc, line 293
static void exec_40a6fb1c90f20654(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn00aadc, line 294
static void exec_a87ff1951b37a20e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() >= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00aadc, line 296
static void exec_176ce0f273581f7b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00aadc, line 297
static void exec_eeb2c6781f86fa52(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00aadc, line 298
static void exec_f920834ded8f7aa4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() | var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00ab00, line 307
static void exec_3481186ba05745c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 309
static void exec_d6d905bfe3785b1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn00ab00, line 310
static void exec_f9a041875a62adaa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 312
static void exec_316ea63562e7bbe5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ab00, line 316
static void exec_b366d9d441c481eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)(uint64)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint64)(context.readValueStack<uint64>(-2) + var0.get<uint64>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int64>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 361
static void exec_58ff9fea909ef547(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: CompetitionMode.StageSelect, line 364
static void exec_189286caf3ee54b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.StageSelect, line 375
static void exec_8fd6593a14d658ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: CompetitionMode.StageSelect, line 376
static void exec_5e7af72164bc19cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 412
static void exec_9ba78e69d6c38195(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 414
static void exec_e60ac06d2883886c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 416
static void exec_b7293ca8f3164912(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 424
static void exec_1209ebf9bfe5fdb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.StageSelect, line 426
static void exec_70f44609d58be91c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() >= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 444
static void exec_fae4da03a4ae1257(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.StageSelect, line 446
static void exec_5f00b9f77a7a2920(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 447
static void exec_6428be3eefca1ea5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: CompetitionMode.StageSelect, line 456
static void exec_cf5a06bdb5ede605(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: CompetitionMode.StageSelect, line 474
static void exec_dab38e3f1001cd32(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 480
static void exec_4ce8a4deb786a7c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	*context.getParameter<uint16*>(8) = var0.get<uint16>();
}

// First occurrence: CompetitionMode.StageSelect, line 483
static void exec_f098358d458fde71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: CompetitionMode.StageSelect, line 488
static void exec_9c6cff0f76dc73f7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, swapBytes16(*context.getParameter<uint16*>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 490
static void exec_1d11c8e02b47b05b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.StageSelect, line 490
static void exec_18b17337bb66e010(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) == var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 494
static void exec_6742b1a8a234665a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 499
static void exec_8ade3bb6233763dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) != var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: CompetitionMode.StageSelect, line 501
static void exec_c10bac08e96216a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 509
static void exec_ed135a5cdd3022e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 511
static void exec_58692adcecd79bce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: CompetitionMode.StageSelect, line 513
static void exec_f393de5fbf4e99d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 514
static void exec_c12bcb48f0c6e053(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: CompetitionMode.StageSelect, line 519
static void exec_9c69990f76d990ce(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, *context.getParameter<uint8*>());
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 521
static void exec_bea066b413b24d63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 538
static void exec_90f1249aa2b7258e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.StageSelect, line 539
static void exec_a95413967e2a9695(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: CompetitionMode.StageSelect, line 542
static void exec_ee99d89424aba6bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 544
static void exec_bb144de5577fd1a8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 547
static void exec_0fb9362e2abf0f98(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint8>());
}

// First occurrence: CompetitionMode.StageSelect, line 548
static void exec_1ab69216a55c0bdb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 550
static void exec_9acafc254ade70f5(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: CompetitionMode.StageSelect, line 557
static void exec_3db0c95fdfdac128(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.StageSelect, line 560
static void exec_982d945a4bbee8f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint8>());
}

// First occurrence: CompetitionMode.StageSelect, line 576
static void exec_45ec987afbbe392c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint8>());
}

// First occurrence: fn00af24, line 589
static void exec_99b877ce6702cb9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00af24, line 591
static void exec_c99d8b4244e1c881(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>(16) - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn00af58, line 606
static void exec_7db221834c8e34b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn00af58, line 609
static void exec_149867eff589e893(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn00af58, line 610
static void exec_3a616619c56fb604(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn00afb2, line 622
static void exec_110031c272669cde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() - var1.get<uint8>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: fn00afb2, line 622
static void exec_8228829a1e2e2cc0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int8>(-1));
	*context.getParameter<uint32*>() = var0.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn00afc8, line 631
static void exec_477cd77d3cd1e726(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: fn00afc8, line 633
static void exec_612dc8ca0674dd0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00afc8, line 633
static void exec_0ffed87218c8276a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00afc8, line 638
static void exec_3b7f4b3a00df8076(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: fn00afc8, line 640
static void exec_15abd2c6cb5408a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: fn00b006, line 653
static void exec_520d44c700be0c6b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var9.get<uint32>();
}

// First occurrence: fn00b006, line 655
static void exec_4ae79c8a5d9da9f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() < var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b006, line 657
static void exec_28c030b66571a20e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00b036, line 671
static void exec_42cb515fff2e2023(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: fn00b066, line 704
static void exec_e27100dae45fd2e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: fn00b066, line 707
static void exec_c710c739013c7967(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	*context.getParameter<uint8*>(8) = var0.get<uint8>();
}

// First occurrence: fn00b066, line 717
static void exec_6af9360c2609eb05(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>(8) = (uint8)context.getParameter<int64>();
}

// First occurrence: fn00b0a6, line 738
static void exec_c532b91651a6b588(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn00b0c2, line 746
static void exec_05f93a7b54cd00b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00b0d4, line 759
static void exec_af355457625b5514(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00b0d4, line 760
static void exec_624b101754c5aecf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn00b0d4, line 761
static void exec_e9bd5c60d2f5095a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn00b2cc, line 853
static void exec_cb40f092ff8c2960(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint8>());
}

// First occurrence: fn00b4f6, line 916
static void exec_cb5f9e27207d6138(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00b508, line 938
static void exec_fbc9d696c816cb51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int8>() < var2.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 961
static void exec_8f01e1a57342fa31(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 963
static void exec_8a79363f82eb58c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
}

// First occurrence: fn00b538, line 965
static void exec_1b1c8d907c1c68ed(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	context.writeValueStack<uint8>(1, (uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: fn00b538, line 965
static void exec_5f1c791bb6a7fa8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)(context.readValueStack<uint64>(-2) | context.readValueStack<uint64>(-1)));
	context.writeValueStack<int8>(-2, (uint8)var0.get<int64>());
	context.moveValueStack(-1);
}

// First occurrence: fn00b538, line 965
static void exec_87d9707b767940ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)(context.readValueStack<uint8>(-2) | context.readValueStack<uint8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: fn00b538, line 969
static void exec_db89eb7f17e3df52(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 970
static void exec_5514e85937c77377(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn00b538, line 976
static void exec_36a66b7c0673769c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 978
static void exec_5407801db100fdcc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 990
static void exec_f6c1643298a66f39(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn00b538, line 993
static void exec_7b079a687ee566d2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn00b538, line 994
static void exec_548df8d2ea0a27f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 999
static void exec_af08e2512e525639(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 1006
static void exec_da03aba11d1ede59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00b538, line 1008
static void exec_3c931edbb87bd362(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() == var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1010
static void exec_521fc735625caec5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 1011
static void exec_4d6ac61464297c65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	*context.getParameter<uint8*>(8) = var3.get<uint8>();
}

// First occurrence: fn00b538, line 1014
static void exec_6360ac5921caa0fd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 1016
static void exec_a17b048d75d2b0fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1019
static void exec_badf443a9c836d68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00b538, line 1024
static void exec_86539a84a155b926(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - var2.get<uint8>()));
	*context.getParameter<uint8*>(8) = var3.get<uint8>();
}

// First occurrence: fn00b538, line 1025
static void exec_e74741698d3a1e4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() < var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1029
static void exec_ae8b89abd79ee196(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1029
static void exec_38f4261d787ab72d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: fn00b538, line 1039
static void exec_68d4dfc8b7cdd136(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn00b538, line 1041
static void exec_c2455e4f68f42225(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() >= var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1044
static void exec_dad2abde9210f124(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1052
static void exec_75a535be64e46dd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00b538, line 1053
static void exec_8eb958dfa23472d2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b538, line 1060
static void exec_6ca980ed3fdac098(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00b538, line 1065
static void exec_850d8f09d2baa7f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)1);
	*context.getParameter<uint32*>() = var0.get<uint32>();
}

// First occurrence: fn00b538, line 1068
static void exec_9ca1e2763dc89338(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn00b656, line 1114
static void exec_11d95eb6d29567f5(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>(8) = (uint32)context.getParameter<int64>();
}

// First occurrence: fn00b656, line 1115
static void exec_1e19c05e2929dfd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn00b656, line 1124
static void exec_794d6549ca0461c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	*context.getParameter<uint8*>(32) = var8.get<uint8>();
}

// First occurrence: fn00b656, line 1126
static void exec_628075b18cc2bd01(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00b656, line 1127
static void exec_777e434b052bfc70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn00b656, line 1130
static void exec_496c812fb7ca828d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn00c02a, line 1142
static void exec_402a14a371fc48a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00c02a, line 1142
static void exec_0e892b428f793776(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00c02a, line 1144
static void exec_a2c0658eee16a719(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var2.get<uint16>());
}

// First occurrence: fn00c04c, line 1157
static void exec_35e517287cd7591b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	const AnyBaseValue var6((int64)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(36), var7.get<uint8>());
}

// First occurrence: fn00c088, line 1180
static void exec_098006ab061d00aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	*context.getParameter<uint32*>(32) = var5.get<uint32>();
}

// First occurrence: fn00c088, line 1181
static void exec_b26372d76d83317a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
}

// First occurrence: fn00c088, line 1184
static void exec_b9eb28581ee45e72(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int16>(1, (uint16)var0.get<int32>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var2((int64)1);
	context.writeValueStack<uint16>(2, (var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint16>(3, (var3.get<uint16>() + var4.get<uint16>()));
	context.moveValueStack(4);
}

// First occurrence: fn00c0b8, line 1212
static void exec_61e6913320744a22(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() | (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00c0b8, line 1213
static void exec_a4251d000cd2e6c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00c0ea, line 1221
static void exec_bd950a61edc464b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c0ea, line 1228
static void exec_bd79da61edad4b70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() <= var7.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c104, line 1240
static void exec_1362679fe99c8eb6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
}

// First occurrence: fn00b74e, line 1342
static void exec_42660ee6b0638700(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1366
static void exec_3c23669465553c7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1379
static void exec_278baf4fff3247d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1381
static void exec_e560eb9bf4d9ba06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn00b74e, line 1388
static void exec_c3ea48a88694b0f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn00b74e, line 1391
static void exec_239013d4f24440a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1392
static void exec_b68ff546053d72e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn00b74e, line 1394
static void exec_1ce84a1111c564c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b74e, line 1396
static void exec_0fc5dae69413ceec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b9a6, line 1435
static void exec_b01c066810953147(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00b9ca, line 1456
static void exec_32e691051eb1fc98(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b9ca, line 1456
static void exec_ffbe445b2917edec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00b9ca, line 1470
static void exec_581712c487a6ddb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1497
static void exec_8e061278a40ea03f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() <= var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1499
static void exec_e983b150475711b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1520
static void exec_3d0eade094ae7818(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1522
static void exec_09e661369f14696c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn00ba04, line 1549
static void exec_e19ee5cede408d7f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn00ba04, line 1562
static void exec_63777813e8b0e95d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() | (uint16)(context.getParameter<int64>(40))));
	*context.getParameter<uint16*>(48) = var9.get<uint16>();
}

// First occurrence: fn00ba04, line 1563
static void exec_d5d11ca1be15c2db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), var8.get<uint8>());
}

// First occurrence: fn00baf0, line 1580
static void exec_9b8d2f6aa4eaa934(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var0.get<uint16>());
}

// First occurrence: fn00baf0, line 1581
static void exec_ea4631a6486e0e2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)0);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00baf0, line 1581
static void exec_efb8a12f5dfdbd5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00baf0, line 1585
static void exec_d158fd46ec199444(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var5.get<uint16>());
}

// First occurrence: fn00bb04, line 1593
static void exec_76c13d4f227e9085(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint32>());
}

// First occurrence: fn00bb04, line 1598
static void exec_8ca63b707a0a3202(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00bb04, line 1599
static void exec_9f1ed49bb79301b2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (var1.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00bb04, line 1601
static void exec_2a579f8f45e45854(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00bb04, line 1602
static void exec_3c736488ed10d0c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00bb04, line 1604
static void exec_510c485f7b5950f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn00bc08, line 1654
static void exec_68e4b099168c8ff6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn00bc08, line 1661
static void exec_7f91dd3912a64381(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var7.get<uint32>()));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn00bc08, line 1662
static void exec_8ae240e432ce9a74(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn00beb2, line 1795
static void exec_8be500aa7f385bbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn00bef8, line 1819
static void exec_54de55466e5622e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn00bef8, line 1820
static void exec_20b8522a3f6f6563(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00bf3e, line 1835
static void exec_b3e399b24563ca68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 32
static void exec_36259ebb017c8750(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>() + var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 34
static void exec_060460b1d7729287(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 56
static void exec_aed22abada8ccc65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05b318, line 59
static void exec_2735d15672b45622(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8.get<uint32>(), var2.get<uint32>());
	const AnyBaseValue var9((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var10((int64)1);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() + var10.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var11.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn05b36c, line 81
static void exec_1226fdb3ace481f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn05b36c, line 82
static void exec_806433cff844863a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn05b36c, line 83
static void exec_00c037be87f00c5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 88
static void exec_7e23bc43ff951cdb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 90
static void exec_d2759436e2ba1018(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn05b36c, line 92
static void exec_ab7ba7cd4c266d8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn05b36c, line 102
static void exec_68808ba3d14a7b8c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: fn05b36c, line 131
static void exec_a18eeca6e1f90de1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn05b36c, line 132
static void exec_27a337e25311163b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn05b36c, line 136
static void exec_7c4b3b37fde0b7c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() + var2.get<uint16>()));
	*context.getParameter<uint16*>(12) = var3.get<uint16>();
}

// First occurrence: fn05b36c, line 137
static void exec_1829ee42eb32f093(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b36c, line 139
static void exec_4e53c028a83440a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	*context.getParameter<uint32*>(56) = var10.get<uint32>();
	const AnyBaseValue var12((uint32)(var10.get<uint32>() - (uint32)(context.getParameter<int64>(64))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn05b36c, line 137
static void exec_5e01ac1f3e13f0e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn05c2e0, line 201
static void exec_55f496a0648d79be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c2e0, line 232
static void exec_718243e8d316f285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: fn05c2e0, line 233
static void exec_113b89a5bfb42704(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: fn05c4e6, line 302
static void exec_1a92082581a357e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c4e6, line 307
static void exec_d0180d99603d4a84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn05c55c, line 351
static void exec_3ffcfbef2f8ba5e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn05c55c, line 352
static void exec_deaf35f6664b12ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c588, line 374
static void exec_e9493ad665f4c304(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)var3.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn05c5ac, line 387
static void exec_aa7eca22555fa170(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn05c5d0, line 401
static void exec_3daca95379879b6d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn05c5d0, line 406
static void exec_93c48e8fbaec0863(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn05c5d0, line 407
static void exec_25c8461a92c59946(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05c5d0, line 410
static void exec_1f3ab7d51b2f4365(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn05c5d0, line 411
static void exec_e35d6b9613088afa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn05c5d0, line 417
static void exec_9730ddaad5f5f68c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn05c5d0, line 419
static void exec_ef6c836c4b0cacc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() != var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c5d0, line 419
static void exec_80d5dac38729924d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() | var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn05c62c, line 433
static void exec_240266c24d6a2e3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn05c62c, line 434
static void exec_5d81c04b5c85acb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c642, line 448
static void exec_1c97a03b944ee211(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<uint16>(-2) >= var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn05c6f4, line 529
static void exec_5c680410073294ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<uint16>(-2) < var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn05c6f4, line 536
static void exec_54701422b00581ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
}

// First occurrence: fn05c7e2, line 620
static void exec_839535cad479b22d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05c82c, line 658
static void exec_8c8f9ea8dbcf6109(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn05c932, line 771
static void exec_642359ab7a2a0a33(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: fn05c932, line 774
static void exec_57b5ef0c2d9d5531(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn05c972, line 817
static void exec_1e208ec808e114a5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn05ca1a, line 868
static void exec_5c10bb9d67ca2f5c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn05ca5c, line 885
static void exec_1924523d8a19c788(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn05ca5c, line 886
static void exec_5b174b4ad4613ff7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn05caae, line 897
static void exec_2190e8f602116dff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05caae, line 898
static void exec_56f5dc5536c3911e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05caae, line 900
static void exec_22b33148df1d26ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn05caae, line 902
static void exec_21b65887a97975bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var5.get<uint32>();
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn05cb1c, line 929
static void exec_f826e6768ea3536d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: fn05cb1c, line 937
static void exec_11c1c0429521ee5c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05cb4a, line 951
static void exec_d0e1f39a0eb55ce1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn05cb6a, line 962
static void exec_aa35d596a53e1cd4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: fn05cb6a, line 965
static void exec_fb42bc79ec55fc86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn05cb6a, line 966
static void exec_1c490b3e6768d773(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint32>());
}

// First occurrence: fn00c006, line 35
static void exec_1e0792c262116b35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn00c006, line 36
static void exec_3d6a03bf9e0d0616(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (var3.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn00c890, line 82
static void exec_8a7aa6fec91e17f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00c890, line 83
static void exec_32c68ff07a32b88b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn00c890, line 88
static void exec_21d6801640050a7a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int8>() >= var2.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c890, line 104
static void exec_87d84bb3cec0435d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<int16>(0, (uint16)var0.get<int32>());
	context.moveValueStack(1);
}

// First occurrence: fn00c890, line 109
static void exec_f4c8ad52d60c7e56(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var7.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c890, line 124
static void exec_b7d0d0c2ca4b17d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn00c890, line 127
static void exec_72532fa111745eb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn00c890, line 139
static void exec_a01b0adfd10c62d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn00c97a, line 169
static void exec_16c203fc64bad39e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: fn00c97a, line 177
static void exec_d00c9677c2caea9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00c97a, line 187
static void exec_567a316620ba3f7a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: fn00ca14, line 235
static void exec_25e3761a92dcb28e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() >= (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ca14, line 244
static void exec_79e67c53acf1ece6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00ca14, line 245
static void exec_8bb0722efbc8c83e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn00ca14, line 246
static void exec_e2229c4fcc0d0fff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn00ca14, line 249
static void exec_52902d728bb8eaf4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: DataSelect.setup, line 265
static void exec_1cc4c3e65f179d05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: DataSelect.setup, line 276
static void exec_5958b901a5505572(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: DataSelect.setup, line 344
static void exec_7d5f86df31cd7ba1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var1.get<uint32>());
}

// First occurrence: DataSelect.setup, line 348
static void exec_63fe99e05605d2d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: DataSelect.setup, line 372
static void exec_28d92de62eef51e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: DataSelect.setup, line 373
static void exec_c1fccde645a02907(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: DataSelect.setup, line 381
static void exec_5c0ae6feca1495b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.getParameter<uint32>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: DataSelect.setup, line 381
static void exec_9f0f177245b0936f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var0.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: DataSelect.setup, line 382
static void exec_425573b1cd3eb000(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var0.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: DataSelect.setup, line 391
static void exec_af677f6ac8af319b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var4.get<uint32>());
}

// First occurrence: DataSelect.setup, line 392
static void exec_66912bfca979c9a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (uint8)(context.getParameter<int64>(12) & 0x07)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: DataSelect.setup, line 393
static void exec_e09e2799c66ee060(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.setup, line 395
static void exec_2556231798e1a8e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.setup, line 395
static void exec_617acf70bea2fc40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() >= (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.setup, line 397
static void exec_615aaa904bb77af8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), var2.get<uint32>());
}

// First occurrence: DataSelect.update, line 433
static void exec_62760e44f130ed24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
}

// First occurrence: DataSelect.update, line 438
static void exec_dce3b7747ccae0dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.update, line 442
static void exec_f0031786c1cdf83a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) >= var0.get<uint32>()));
}

// First occurrence: DataSelect.update, line 450
static void exec_4ea3bff2e43eff89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DataSelect.update, line 450
static void exec_e68433990b823ac4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + var0.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: DataSelect.update, line 453
static void exec_56525009e17f7a1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: DataSelect.update, line 454
static void exec_d9368f181a016842(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (uint16)(context.getParameter<int64>(12) & 0x0f)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var8.get<uint16>());
}

// First occurrence: DataSelect.update, line 456
static void exec_52e7d84d2e10ecf2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * var1.get<uint16>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>(8) - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var2.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var8.get<uint16>(), (uint16)context.getParameter<int64>(28)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var10.get<uint16>());
}

// First occurrence: DataSelect.update, line 459
static void exec_aa48ff00eb7cf96f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() << (uint16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var8((uint16)(var4.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var10((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint8>());
	const AnyBaseValue var12((uint32)(var9.get<uint32>() + var11.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var8.get<uint16>());
	const AnyBaseValue var13((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var15((uint8)(var13.get<uint8>() + (uint8)(context.getParameter<int64>(44))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(52), var15.get<uint8>());
}

// First occurrence: fn00c866, line 527
static void exec_5e3c0827687eb981(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: fn00c866, line 529
static void exec_04507d671ae77827(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c866, line 531
static void exec_ee53363f14691c63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: fn00c866, line 536
static void exec_cd217de43a612f3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var5.get<uint16>());
}

// First occurrence: fn000c3e, line 563
static void exec_47e11be5d42554af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint32>());
	context.moveValueStack(1);
}

// First occurrence: fn00d1b6, line 584
static void exec_356df67423bfcf62(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn00d1b6, line 586
static void exec_0dfe19fd1e560fd4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
}

// First occurrence: fn00d1b6, line 592
static void exec_b0e419359b1fdcb4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) > var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1b6, line 592
static void exec_a3cf420b1d79d383(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) <= var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1b6, line 607
static void exec_add81c90e9ec254a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
}

// First occurrence: fn00d1fa, line 641
static void exec_0f2d5c9e36f49764(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 672
static void exec_50f4d920df5321e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 687
static void exec_2a7eecd991f03a11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn00d1fa, line 688
static void exec_5249f2e8a5c057c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d1fa, line 690
static void exec_4bba71220f53836a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<int16>(-2) > var1.get<int16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 692
static void exec_da62b2da7652c9e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: fn00d1fa, line 693
static void exec_1d1894e02b4d76ad(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int16>(1, (uint16)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn00d1fa, line 693
static void exec_c2432c4d3afc7fd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<int16>(-3) > var0.get<int16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn00d1fa, line 695
static void exec_8099b87a2f25199a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: fn00d1fa, line 699
static void exec_352973c638b65826(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn00d1fa, line 705
static void exec_647517770967c080(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<int16>(-2) < var1.get<int16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 708
static void exec_53ae20f597c76438(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)-(signed)context.readValueStack<uint16>(-1));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<int16>(-2) < var0.get<int16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn00d1fa, line 727
static void exec_9736dfad101a410b(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: DataSelect.sharedNewGameStartup, line 764
static void exec_3aca7d037d96e707(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)context.readValueStack<uint32>(-1), (uint32)context.getParameter<int64>()));
	const AnyBaseValue var2((uint32)(context.readValueStack<uint32>(-2) + var1.get<uint32>()));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var3.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: fn00d30c, line 777
static void exec_f454a389d3b77828(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00d30c, line 783
static void exec_160ec12feed78df9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint16>());
}

// First occurrence: fn00d30c, line 798
static void exec_0ea734191cd96cd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn00d30c, line 807
static void exec_7a382944c208d972(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00d39e, line 828
static void exec_1248b3cb284a5ef0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn00d39e, line 829
static void exec_03261d9493c57f0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn00d39e, line 831
static void exec_cea8499b5db1b887(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00d39e, line 834
static void exec_35bb62f14a8f5e6e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00d39e, line 842
static void exec_055c39f57eaae46e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() < (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d42c, line 865
static void exec_202204b44eaa70bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn00d42c, line 866
static void exec_3b9e605a33f48fea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d42c, line 881
static void exec_b94616dd4290c662(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint16>());
}

// First occurrence: fn00d42c, line 884
static void exec_fa5dea7d56f0c6d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn00d42c, line 885
static void exec_47fb10ece6e9d0d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00d42c, line 886
static void exec_e3db335102e03ade(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn00d42c, line 894
static void exec_c5f29d3253d92555(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn00d42c, line 912
static void exec_81ffd59788b56c05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int8)(uint8)var5.get<int16>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn00d458, line 946
static void exec_96501731d68fc3c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 949
static void exec_9eb733b98f6b996f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 951
static void exec_81013e0dbe15a600(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn00d458, line 949
static void exec_b942e6f68ece661c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 964
static void exec_0113ea504c35dbf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 999
static void exec_8c90e123ae99a7e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1013
static void exec_8f32cf4342f2799a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1026
static void exec_ce45c4b414de665b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1054
static void exec_087613b03e5a813e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1064
static void exec_a8a72974f6a75e48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var6.get<uint16>());
}

// First occurrence: fn00d458, line 1065
static void exec_c440adfffaffe3e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), var5.get<uint8>());
}

// First occurrence: fn00d458, line 1067
static void exec_322b9af77ba61164(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn00d458, line 1073
static void exec_7b9a381e6cc95535(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var3.get<uint8>());
}

// First occurrence: fn00d458, line 1085
static void exec_64c5f5ef04f64815(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1088
static void exec_68f53825fb54bb08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() > var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1092
static void exec_4b34ab76bc87e5d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint8>());
}

// First occurrence: fn00d458, line 1102
static void exec_0433b91405021360(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var4.get<uint32>());
}

// First occurrence: fn00d458, line 1104
static void exec_7a83863fad19d9e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() == var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d458, line 1107
static void exec_53e9d53442ab1638(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(4), var1.get<uint32>());
}

// First occurrence: fn00d458, line 1108
static void exec_87dd9f81bc742b6e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), var6.get<uint32>());
}

// First occurrence: fn00d69e, line 1126
static void exec_707b3eb14c5a8e65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00d69e, line 1133
static void exec_bbba5db7f2ec0c8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00d6d0, line 1166
static void exec_96d11d203aa27034(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d6d0, line 1171
static void exec_78d0cd97a627dd04(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d6d0, line 1171
static void exec_7ade06e89f862e47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() - var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d70c, line 1193
static void exec_c5a432d990287d35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn00d70c, line 1208
static void exec_d1bf12253acdbdf3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn00d70c, line 1217
static void exec_d1ffe68d77c2af44(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn00d70c, line 1218
static void exec_df8fc857338c6091(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn00d782, line 1238
static void exec_c354ac19bb6cb5f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint64)(uint64)var3.get<uint8>());
	context.writeValueStack<uint64>(0, (var4.get<uint64>() + (uint64)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00d7c0, line 1312
static void exec_4d721ec09a99b567(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d854, line 1388
static void exec_827906f4c11c4167(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn00d884, line 1401
static void exec_c58b0b438c65ebe3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn00d884, line 1401
static void exec_fbb326e95af4c77e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn00d8c4, line 1459
static void exec_8394d5e9ec15d48b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn00d8c4, line 1464
static void exec_d6ff742743574d93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>(8) * var5.get<uint32>()));
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var6.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: fn00d912, line 1481
static void exec_82a48e7af638dba6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() < var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d912, line 1489
static void exec_142169f53887c43e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: fn00d912, line 1490
static void exec_0bddb781a8f322c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d94a, line 1508
static void exec_e7df5ec30b730503(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn00d96a, line 1525
static void exec_ed6f16cf202bd12d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
}

// First occurrence: fn00d96a, line 1527
static void exec_65d2e47778405939(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: fn00d96a, line 1529
static void exec_178f7d77552be336(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1529
static void exec_9edd77171e161c2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1531
static void exec_a3adb1164d9c82d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1533
static void exec_6851266919f3f6b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var7.get<uint32>();
}

// First occurrence: fn00d96a, line 1538
static void exec_e9f22ef2a0d9e841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1539
static void exec_bc9eb76b47def27a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00d96a, line 1557
static void exec_d6b933347b17faaa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: fn00d9f4, line 1573
static void exec_eb1741e6ea82d3cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
}

// First occurrence: fn00da4e, line 1638
static void exec_8b51b64404c11505(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: DataSelect.drawCustomPlanes, line 1650
static void exec_5a1f624f814256f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int16>(-1, OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: DataSelect.drawCustomPlanes, line 1653
static void exec_fbe99c462fa4ca2a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var0.get<uint16>());
}

// First occurrence: DataSelect.drawCustomPlanes, line 1657
static void exec_3c1ea38e04cf4867(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: DataSelect.drawCustomPlanes, line 1657
static void exec_1878a72ffa36af19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) + var0.get<uint16>()));
}

// First occurrence: DataSelect.drawCustomPlanes, line 1662
static void exec_004b8523e9f2888a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, ((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	context.moveValueStack(3);
}

// First occurrence: LevelSelect.init, line 93
static void exec_b616c7f98b3bd544(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: LevelSelect.init, line 94
static void exec_e50c364e1eb30bca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: LevelSelect.init, line 100
static void exec_95c4349e91816f3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
	const AnyBaseValue var11((uint32)(var9.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var6.get<uint16>());
}

// First occurrence: LevelSelect.init, line 104
static void exec_e2aeddb6452b2619(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: LevelSelect.init, line 118
static void exec_830de6639e58890b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: LevelSelect.init, line 167
static void exec_d692d67eb4320b1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	context.writeValueStack<uint16>(1, (var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.init, line 172
static void exec_abc7d583567aee77(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, 0);
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.init, line 176
static void exec_071ccedf28bc6ec4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.init, line 177
static void exec_96d8132e5f7e7980(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.innerUpdate, line 232
static void exec_ec03d2fef667cdca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.innerUpdate, line 237
static void exec_9d1353a009e72e1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.innerUpdate, line 244
static void exec_a113d6746e21e7d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: LevelSelect.innerUpdate, line 248
static void exec_defebdaff8c1162b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: LevelSelect.innerUpdate, line 256
static void exec_7c3cbd01e2bd9d2a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelSelect.startGame, line 354
static void exec_d540f5b13efb35b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(4), var0.get<uint16>());
}

// First occurrence: fn007d6c, line 450
static void exec_c82ff10fd52ba12b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn007f62, line 461
static void exec_a2224e2be7b62247(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn007f62, line 462
static void exec_064a3e9231b8993d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)1);
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint8>());
	const AnyBaseValue var10((uint32)(var4.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(24) = var10.get<uint32>();
}

// First occurrence: fn007f62, line 471
static void exec_43b846da5b7d9f9c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn007f62, line 480
static void exec_ac60a4f35a999153(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var9((uint32)(var3.get<uint32>() + var8.get<uint32>()));
	*context.getParameter<uint32*>(24) = var9.get<uint32>();
}

// First occurrence: fn007f62, line 481
static void exec_96fa2fd05387fd84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn007f62, line 483
static void exec_0ecf5f23ee1cd538(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)1);
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + var8.get<uint32>()));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint8>());
	const AnyBaseValue var12((uint32)(var6.get<uint32>() + var11.get<uint32>()));
	*context.getParameter<uint32*>(32) = var12.get<uint32>();
}

// First occurrence: fn007f62, line 491
static void exec_aa282aca878d3750(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn007f62, line 495
static void exec_fbcb36adb980d3b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(16));
	context.moveValueStack(2);
}

// First occurrence: fn007f62, line 496
static void exec_25bdd1a905823f84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(16));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.writeHexDigit, line 508
static void exec_61bf1370a7593d42(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: LevelSelect.writeHexDigit, line 510
static void exec_8af4e757ed96c7c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint8>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(1, (var1.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: LevelSelect.writeHexDigit, line 510
static void exec_258746ffec5aab50(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int64>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn007e64, line 523
static void exec_004f8c7217cb46c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn007e64, line 538
static void exec_84224d4b0fa4be79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 549
static void exec_0185d1d08749cef9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 554
static void exec_65c2234f8347b31d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn007e64, line 558
static void exec_d379f33af6c47114(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn007e64, line 563
static void exec_a86aebf63f5f2724(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int8>(0, (uint8)var0.get<int16>());
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 574
static void exec_4af457d46f9b68b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var5.get<uint16>());
}

// First occurrence: fn007e64, line 588
static void exec_55450db708714c48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn007e64, line 588
static void exec_835f847c4e4dc37a(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1), context.readValueStack<uint16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: Menu.FadeInAfterInit, line 14
static void exec_c84e6dd84f28a7d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var0.get<uint8>());
}

// First occurrence: Menu.FadeInAfterInit, line 32
static void exec_d083788e7b8fac1b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(48))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var8.get<uint16>(), (uint16)context.getParameter<int64>(56)));
	context.writeValueStack<int8>(5, (uint8)var10.get<int16>());
	context.moveValueStack(6);
}

// First occurrence: Menu.FadeInAfterInit, line 48
static void exec_227fb6096e5a9ea2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	*context.getParameter<uint16*>(4) = var0.get<uint16>();
}

// First occurrence: fn000780, line 40
static void exec_7f5c99144191d75c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() == var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn0043d4, line 59
static void exec_f4a9e8972d6dccb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0043d4, line 61
static void exec_5737ee8d6ce5d42c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn00440c, line 85
static void exec_173e5c9aed425d43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn00440c, line 92
static void exec_8885ac2c5fb668bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00440c, line 94
static void exec_2f44975932f72e17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: fn00440c, line 95
static void exec_77d2b62c88e13a66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn00440c, line 99
static void exec_ee7c8ca9e4a82560(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(12));
	context.moveValueStack(3);
}

// First occurrence: fn00440c, line 109
static void exec_6f94a5d76573f919(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00440c, line 125
static void exec_1eebf46e66501785(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: TitleScreen, line 146
static void exec_06d8b1b656c7e01c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int32>(-1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: TitleScreen, line 154
static void exec_f3548d4e78066474(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: TitleScreen, line 220
static void exec_68f286523057fff8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(2, (var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	context.moveValueStack(3);
}

// First occurrence: TitleScreen, line 258
static void exec_070da2c87090d01f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(6);
}

// First occurrence: TitleScreen, line 274
static void exec_4cf0f28907479d3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() == var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 286
static void exec_9a440c9efd212575(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)0);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
}

// First occurrence: TitleScreen, line 290
static void exec_9ca847dc82dadb1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)1);
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
}

// First occurrence: TitleScreen, line 315
static void exec_4b65da007a7167f3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: TitleScreen, line 324
static void exec_318d5321dfc6f140(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: TitleScreen, line 337
static void exec_dcc887747cb3c794(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 347
static void exec_ec21ca6da0fa9f73(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 406
static void exec_0c69564434003351(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)0);
	*context.getParameter<uint16*>() = var0.get<uint16>();
}

// First occurrence: TitleScreen, line 425
static void exec_63bd72df57c90051(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen, line 456
static void exec_dcaa58163aef2ef2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<float>(1, context.getParameter<float>());
	context.moveValueStack(2);
}

// First occurrence: TitleScreen, line 485
static void exec_99dbe9b6b68d56ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: TitleScreen, line 486
static void exec_a0fca3b4ba8bde88(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn0007ba, line 563
static void exec_f6575081bb51c51d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn0007ba, line 564
static void exec_29f0259e42051361(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)((uint16)context.getParameter<int64>(8) - var2.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>(20) - var5.get<uint16>()));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() * var6.get<uint16>()));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var7.get<uint16>(), (uint16)context.getParameter<int64>(32)));
	const AnyBaseValue var10((uint16)((uint16)context.getParameter<int64>() - var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: fn0007ba, line 569
static void exec_6c99d356025ba8a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn0007ba, line 570
static void exec_5730489c4d969466(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: fn0007ba, line 571
static void exec_f88a92cb53989dc8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0007ba, line 571
static void exec_47ab8daf3e2335b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() | (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: fn0007ba, line 573
static void exec_8ef2350d2608d167(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: fn0007ba, line 576
static void exec_027b6fe030940036(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn0007ba, line 579
static void exec_515b9a040aaa571c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	*context.getParameter<uint16*>(4) = var0.get<uint16>();
}

// First occurrence: fn004352, line 612
static void exec_90af34758cd74942(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn004352, line 645
static void exec_23c4c5a7cac900cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() ^ (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00486c, line 689
static void exec_33c3399562dbb140(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var3.get<uint32>() + var10.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var11.get<uint32>());
}

// First occurrence: fn00486c, line 708
static void exec_d7ce8b16a0368872(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00486c, line 711
static void exec_b7c2fd77a230b978(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)1);
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (var4.get<int16>() & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn00486c, line 715
static void exec_e296e28a28b73414(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0048dc, line 740
static void exec_c72ec87909f459bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn0048dc, line 743
static void exec_ba8b58884f9dd58b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), var7.get<uint32>());
}

// First occurrence: fn0048dc, line 751
static void exec_f2de4add2e98b6ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn0048dc, line 752
static void exec_0caf5a7740718872(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn0048dc, line 754
static void exec_5a6b17e7f23717e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn0048dc, line 755
static void exec_f7ae0f6e3f0d55cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn0048dc, line 756
static void exec_f378007a50b23983(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: fn0048dc, line 758
static void exec_aad4fd1212b84794(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 760
static void exec_0ea45b428f9050be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 762
static void exec_61cd8ffd4b6e93e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(4))));
	context.writeValueStack<int16>(0, OpcodeExecUtils::safeDivide<int16>((int16)var2.get<int16>(), (int16)context.getParameter<int64>(12)));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 762
static void exec_6ce1e73d33519ac5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(12))));
	context.writeValueStack<int16>(0, OpcodeExecUtils::safeDivide<int16>((int16)var4.get<int16>(), (int16)context.getParameter<int64>(20)));
	context.moveValueStack(1);
}

// First occurrence: fn0048dc, line 762
static void exec_8f993c5d807fc590(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn0048dc, line 763
static void exec_4a747dc7a20b0169(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, 0);
	context.writeValueStack<uint8>(7, context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(8);
}

// First occurrence: fn0048dc, line 767
static void exec_1b309b6e669ce695(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var3((uint16)((uint16)context.getParameter<int64>(16) - var2.get<uint16>()));
	context.writeValueStack<int16>(1, (var3.get<int16>() * (int16)(context.getParameter<int64>(28))));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: fn0048dc, line 767
static void exec_b39348b96af87922(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<int64>(-1, 0);
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.moveValueStack(2);
}

// First occurrence: fn0048dc, line 771
static void exec_42803ac843395573(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn0048dc, line 775
static void exec_98f16f5a37f10554(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn004a88, line 812
static void exec_7433de35cdacb8cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn004a88, line 814
static void exec_dc4332ea69bc2f6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() - var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn004a88, line 816
static void exec_91c5343ab853cf1c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(-1, (context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
}

// First occurrence: fn004a88, line 818
static void exec_e25e6b9cb69768df(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn004a88, line 824
static void exec_ca1d06ff009a5e8d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() != var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn00499c, line 898
static void exec_1adb19614e0ae1b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn004a1e, line 912
static void exec_f57947f12b61de0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn004b16, line 953
static void exec_0b93a2a46e6bcf0f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn004be4, line 1015
static void exec_bec55e7c3437a583(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: TitleScreen_SK, line 68
static void exec_7097ff1442133518(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: TitleScreen_SK, line 86
static void exec_1556c389373d9e46(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(40)));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>(32) - var4.get<uint16>()));
	context.writeValueStack<uint16>(5, (var5.get<uint16>() * (uint16)(context.getParameter<int64>(48))));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(56));
	context.moveValueStack(7);
}

// First occurrence: TitleScreen_SK, line 140
static void exec_a5b286147bdeab24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: TitleScreen_SK, line 167
static void exec_2b5e2d41b1af2210(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint32>());
}

// First occurrence: TitleScreen_SK, line 243
static void exec_3b7b06f43c5b01ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var5.get<uint16>());
}

// First occurrence: fn00565a, line 376
static void exec_ce585da656f83269(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() != (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn00565a, line 381
static void exec_c7cb92f88b80895e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0057a2, line 512
static void exec_1230c0e2a476ff44(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn0057a2, line 527
static void exec_e4a54de4e22f62b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn005802, line 547
static void exec_2f08e2d504891ffb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn005802, line 548
static void exec_11e897d6c27744ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn005802, line 559
static void exec_94a03ad90c9c1f05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00587c, line 603
static void exec_b53ddc35c5ac3625(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(1, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<uint16>(2, (var8.get<uint16>() - (uint16)(context.getParameter<int64>(48))));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(56));
	context.moveValueStack(6);
}

// First occurrence: fn00587c, line 604
static void exec_b3e8758c2aa74e57(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>(8) - var2.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn0058f0, line 638
static void exec_d0bbb17b8ca79c24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn0058f0, line 640
static void exec_6c23e2800adb3762(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn0058f0, line 673
static void exec_3bb79e74e524a2e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn005a50, line 745
static void exec_3214492c8382442d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn005a50, line 750
static void exec_03321777993be3b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var1.get<uint8>());
}

// First occurrence: fn005a50, line 751
static void exec_7851414e73ca423d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	*context.getParameter<uint32*>(8) = var4.get<uint32>();
}

// First occurrence: fn005a50, line 752
static void exec_a4e328e743dd4418(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint8*>(16) = var6.get<uint8>();
}

// First occurrence: fn005a50, line 758
static void exec_2357ccd0f3fb7bd1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn005a50, line 759
static void exec_f38eb274357817b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint8*>(8) = var3.get<uint8>();
}

// First occurrence: fn005a50, line 770
static void exec_77a4c2e13698810d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint8*>(24) = var6.get<uint8>();
}

// First occurrence: fn005a50, line 771
static void exec_980fd57d4f2774ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn005a50, line 772
static void exec_7c5e7e0c79dc765b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn005a50, line 777
static void exec_c5131f2d2bd7be74(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn005a50, line 778
static void exec_6d52c1c97c655a3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn005ae4, line 798
static void exec_c713fbe528efb3e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn005ae4, line 802
static void exec_7bca8ab0d3e7a10e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn005ae4, line 803
static void exec_1d0b942d99e9f757(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (var1.get<uint8>() & 0x07)));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() << (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint8)(var2.get<uint8>() + var5.get<uint8>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn005b42, line 815
static void exec_d4f9050f669f124a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn005b42, line 821
static void exec_b950e2ee456d36eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn005b42, line 822
static void exec_b0785c35cbdb1f9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn005b42, line 826
static void exec_ac9037e8d992e6c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	*context.getParameter<uint8*>() = var0.get<uint8>();
}

// First occurrence: fn005b42, line 834
static void exec_f0a135397129a366(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn005b42, line 850
static void exec_443adef9cb093011(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn005b42, line 853
static void exec_5e7c1137cdcbb42d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn005b42, line 855
static void exec_a82c14e36cfb753a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn005b42, line 857
static void exec_6cdd513f34f55f39(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn005b42, line 859
static void exec_799efa607c492440(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn005b42, line 865
static void exec_44a5005276b67f6e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn005b42, line 868
static void exec_c51262240ffc8400(const RuntimeOpcodeContext context)
{
}

// First occurrence: fn005c42, line 916
static void exec_258750df360e07f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn005ce2, line 982
static void exec_bfe3bf4dbade65f3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn005ce8, line 992
static void exec_1b24c3d0d8f8c8c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn005ce8, line 996
static void exec_9fb2a27fa9b0a2a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn005d62, line 1077
static void exec_ecf15d12b0f42bbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn005d62, line 1078
static void exec_1d5c40dfafa64eaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
}

// First occurrence: fn005d62, line 1079
static void exec_f1a94765729a0035(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var4.get<uint16>());
}

// First occurrence: fn005d94, line 1103
static void exec_0625d2ed4006d264(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn005d94, line 1109
static void exec_f02ba9dc66f0695a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn005d94, line 1116
static void exec_095828b2d7cb93d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn005d94, line 1157
static void exec_f646b96e53e95b0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: fn005d94, line 1161
static void exec_f5fdf8fac3b91f60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var1.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn005d94, line 1169
static void exec_52b79cbb3c2b02cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var1.get<uint16>() - var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn005d94, line 1174
static void exec_358b451090b1fbcd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(28))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(36), var5.get<uint8>());
}

// First occurrence: fn005d94, line 1179
static void exec_631638fe374d3cc3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: fn005d94, line 1190
static void exec_7eb43441abbbc7a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-2) - var0.get<uint32>()));
	*context.getParameter<uint32*>() = var1.get<uint32>();
	context.moveValueStack(-2);
}

// First occurrence: fn005d94, line 1193
static void exec_3f171d65c17c2a1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn005d94, line 1201
static void exec_90011a410e0fe061(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint32>());
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), var8.get<uint8>());
}

// First occurrence: UpdateCamera, line 33
static void exec_38e7cbe35bcf14ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, !var0.get<uint16>());
	context.moveValueStack(1);
}

// First occurrence: UpdateCamera, line 37
static void exec_2338d5fdaee0e541(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, !var0.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdateCamera, line 88
static void exec_813e811e76b47570(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint32*>(8) = (uint32)context.getParameter<int64>();
}

// First occurrence: UpdateCameraPositionX, line 107
static void exec_6af4c784193c4cd8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 120
static void exec_d7ed8c55f3b8d03c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_4f9b29b80fa188f2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) >= (uint16)(context.getParameter<int64>())));
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_4f3b3b403046903a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 122
static void exec_66bbc0608c24100e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 124
static void exec_043b3b3a4e44220b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 1);
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 126
static void exec_a6cfa28634c08f5c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 136
static void exec_e5239886e70099e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() > var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 138
static void exec_e45810d981d7f308(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 139
static void exec_968250e37009b02d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: UpdateCameraPositionX, line 140
static void exec_aecd46ce5dffd698(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((int8)(uint8)var6.get<int16>());
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: UpdateCameraPositionX, line 141
static void exec_5d5e606a8fbdfb0f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 145
static void exec_ffb6d4e77c815fd5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) != var0.get<uint32>()));
}

// First occurrence: UpdateCameraPositionX, line 147
static void exec_57601fb4dabee1c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 153
static void exec_b10567b24f9d496b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) == var0.get<uint32>()));
}

// First occurrence: UpdateCameraPositionX, line 159
static void exec_43cc056b93681a34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 163
static void exec_39401a65a4f04657(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() & var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 169
static void exec_9889856e07676fb4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 171
static void exec_c66880e61bc309b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_e83e13fb520a8597(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() <= (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 176
static void exec_6eabbda879ce83ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 178
static void exec_00f8ba504c1ec2ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() >= (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 178
static void exec_4dfd20a5fee134f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 182
static void exec_bb0cecd48c9e6f2b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 182
static void exec_1e87d85d6db9ff6b(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>() = context.readValueStack<uint16>(-1);
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 189
static void exec_237504230930febd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: UpdateCameraPositionX, line 193
static void exec_3f3f11fdb008b473(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 194
static void exec_f0f0cc0fa0b37f57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 195
static void exec_1f0f7dfaf1d5ad02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() < var1.get<int16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() > var4.get<int16>()));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 197
static void exec_232ca559b6f0ac24(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(4);
}

// First occurrence: UpdateCameraPositionX, line 200
static void exec_64911a4cc3522e03(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 207
static void exec_6414c216a49314d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 208
static void exec_74f59a3eafe5003c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 213
static void exec_8f79258c8290c853(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) > (uint16)(context.getParameter<int64>())));
}

// First occurrence: UpdateCameraPositionX, line 215
static void exec_d30d2a0ed02b013b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(2);
}

// First occurrence: UpdateCameraPositionX, line 215
static void exec_88dee4fe77b63531(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX, line 216
static void exec_f198f4801343acae(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: UpdateCameraPositionX, line 218
static void exec_ff0c31fd724da0be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX, line 222
static void exec_074c9289993145dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 223
static void exec_efa231024c1a943a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) > var0.get<uint16>()));
}

// First occurrence: UpdateCameraPositionX, line 226
static void exec_19d44a943c8f2863(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(-2, (var0.get<uint16>() - var1.get<uint16>()));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>(4));
}

// First occurrence: UpdateCameraPositionX, line 230
static void exec_cc8e12bf3fa5a971(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, -(signed)var0.get<uint16>());
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 233
static void exec_bbe51ad4cc721ab1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: UpdateCameraPositionX, line 234
static void exec_57563d58b4490234(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: UpdateCameraPositionX, line 256
static void exec_9d033ce11e9483a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdateCameraPositionX, line 257
static void exec_1a33f77b2ff53220(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint16>());
}

// First occurrence: UpdateCameraPositionY, line 264
static void exec_0e3219dd14e7b512(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var3.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: UpdateCameraPositionY, line 267
static void exec_a9cc00c745366f29(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: UpdateCameraPositionY, line 273
static void exec_397a23210e6815f3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: UpdateCameraPositionY, line 273
static void exec_a984aebe231aebdb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionY, line 281
static void exec_186f037e144f8d9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 283
static void exec_658ffc8d8fed4a15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 290
static void exec_324b9929216ed435(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 296
static void exec_bcf7ba7de7a60b5c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)((uint16)context.getParameter<int64>(8) - var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateCameraPositionY, line 322
static void exec_5243d1f16c667303(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: UpdateCameraPositionY, line 363
static void exec_c51d180b670e8ad0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionY, line 364
static void exec_8f529cad6f50e18e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 366
static void exec_f2f949aaf6189d6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 367
static void exec_8b189ab1465f29e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 364
static void exec_f14c77e827d9f02b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 372
static void exec_4acca5509301c64d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 379
static void exec_97c15ae7323d0b8c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() + var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: UpdateCameraPositionY, line 384
static void exec_a18fda52e9439c91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 386
static void exec_95b5b356dd738b38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 398
static void exec_eda92d51d9201ae3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionY, line 400
static void exec_0c6c187bd202778e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionY, line 404
static void exec_c878d712703e6723(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateCameraPositionY, line 415
static void exec_d2d24675637faefd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(var0.get<uint32>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 416
static void exec_4f455602dc78dba1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
}

// First occurrence: UpdateCameraPositionY, line 418
static void exec_bd90baaeb4e4021d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: UpdateCameraPositionX_CompMode, line 446
static void exec_d3ce51a949f66f0d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint16>());
}

// First occurrence: UpdateCameraPositionX_CompMode, line 450
static void exec_86a312757ddff7d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: UpdateCameraPositionX_CompMode, line 458
static void exec_313221fce8746535(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() & var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 458
static void exec_d14089ce35ad0d69(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(context.readValueStack<uint16>(-2) - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: UpdateCameraPositionX_CompMode, line 483
static void exec_7af8896b75564f98(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: UpdateCameraPositionX_CompMode, line 484
static void exec_0d70da692da2bf50(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: Enigma.Decompress, line 31
static void exec_bf62c3b7864fb68a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: Enigma.Decompress, line 32
static void exec_816e7f20017678be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint16>());
	const AnyBaseValue var9((uint32)(var6.get<uint32>() + var8.get<uint32>()));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: Enigma.Decompress, line 34
static void exec_9915463697bf91d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() << (uint8)(context.getParameter<int64>(8) & 0x07)));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: Enigma.Decompress, line 35
static void exec_9f598fa7d454c275(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(uint16)var10.get<uint8>());
	const AnyBaseValue var12((uint16)(var6.get<uint16>() + var11.get<uint16>()));
	*context.getParameter<uint16*>(40) = var12.get<uint16>();
}

// First occurrence: Enigma.Decompress, line 42
static void exec_c51f9eebf68a2e6f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: Enigma.Decompress, line 43
static void exec_5ec6b9170071f296(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: Enigma.Decompress, line 54
static void exec_8eae8a0fc5844310(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn00195a, line 149
static void exec_db63ab0b1e7374c5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn001972, line 170
static void exec_3a65a85222bb66c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn001972, line 172
static void exec_99d44f69531e32d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn001972, line 212
static void exec_b0f361ed74afa857(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn001972, line 214
static void exec_6eba6c44310db238(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() & var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn001972, line 224
static void exec_d1a7d90ce98504f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() << (var2.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn001972, line 226
static void exec_2e37fc03f01f83fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (var1.get<uint8>() & 0x07)));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var6((uint8)((uint8)context.getParameter<int64>(24) - var5.get<uint8>()));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() >> (var6.get<uint8>() & 0x07)));
	const AnyBaseValue var8((uint8)(var2.get<uint8>() | var7.get<uint8>()));
	*context.getParameter<uint8*>(40) = var8.get<uint8>();
}

// First occurrence: fn001a22, line 255
static void exec_e4aeaadfbbd69a07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: getMainCharacter, line 31
static void exec_dc7092163abe1939(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	context.moveValueStack(2);
}

// First occurrence: isMainCharacter, line 61
static void exec_9e5d4ce5d97a8adc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) == var0.get<uint8>()));
}

// First occurrence: isPlayerCharacter, line 69
static void exec_947656d653723419(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: VInt, line 26
static void exec_655d9a2000b5eb13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.getParameter<int64>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: VInt, line 46
static void exec_dfec43115b954953(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: VInt, line 94
static void exec_9c62cd0f76d3ca7c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, swapBytes32(*context.getParameter<uint32*>()));
	context.moveValueStack(1);
}

// First occurrence: VInt, line 120
static void exec_207dbce31884acbe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint32>());
}

// First occurrence: VInt.InnerUpdate, line 152
static void exec_97a7bfc63050c031(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(1, (uint16)var2.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: VInt.getBlendFactorForScreenFlash, line 181
static void exec_3c0ed285b19ee9e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) <= var0.get<uint32>()));
}

// First occurrence: VInt.getBlendFactorForScreenFlash, line 183
static void exec_26a3668f0ae16d42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: VInt.Update.MainGame, line 214
static void exec_acfb90bb5dc01ee0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 216
static void exec_879b6cc3c5691720(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 228
static void exec_6e851d3afb6a1656(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint32)(var2.get<uint32>() + var6.get<uint32>()));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.moveValueStack(4);
}

// First occurrence: VInt.Update.MainGame, line 250
static void exec_ae94bba24d58f261(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 269
static void exec_8519b7103b0747e2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
}

// First occurrence: VInt.Update.MainGame, line 279
static void exec_cc0fc590c2a64c9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() ^ (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: VInt.Update.MainGame, line 286
static void exec_3131371cd5b3e1e1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: VInt.Update.MainGame, line 290
static void exec_bde4f437efeb6361(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint32>());
}

// First occurrence: VInt.Update.LevelLoading, line 359
static void exec_b116ecac9fafabae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: VInt.Update.LevelLoading, line 379
static void exec_0ca8928bd3daa23e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint32>(0, OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 532
static void exec_a5597e9c4ae7b4c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: fn000c50, line 542
static void exec_a6206dbf6d4ae224(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() != var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: fn000c50, line 543
static void exec_68a727a07a36b693(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 543
static void exec_d73f2559f766b6a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: fn000c50, line 548
static void exec_784fdf3c82c789eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int64)0);
	const AnyBaseValue var6((uint8)(uint8)(var4.get<uint16>() != var5.get<uint16>()));
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() & (uint8)(context.getParameter<int64>(20))));
	const AnyBaseValue var10((int64)0);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() != var10.get<uint8>()));
	const AnyBaseValue var12((uint8)(var6.get<uint8>() == var11.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var12.get<uint8>());
}

// First occurrence: fn000c50, line 551
static void exec_b28e0b41d30e37ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)!var0.get<uint8>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var1.get<uint8>());
}

// First occurrence: fn000c50, line 554
static void exec_53226f82f5e490b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var0.get<uint32>());
}

// First occurrence: fn000c50, line 555
static void exec_bacb6feb1ed513aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint32>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: fn000c50, line 559
static void exec_b1e804d13819c77c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	const AnyBaseValue var3((uint8)(uint8)(var1.get<uint32>() == var2.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var3.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn000c50, line 562
static void exec_8f933f0256b98239(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 562
static void exec_971397ad82557c15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::safeDivide<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 563
static void exec_6d34865081666f78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + var5.get<uint16>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	context.writeValueStack<uint16>(4, (uint16)var6.get<uint8>());
	context.moveValueStack(5);
}

// First occurrence: fn000c50, line 568
static void exec_ec1b792e50b81318(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (uint16)var0.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: fn000c50, line 571
static void exec_563f9b020b7491bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::safeDivide<uint16>((uint16)var4.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	context.moveValueStack(1);
}

// First occurrence: fn000c50, line 572
static void exec_6dd03b442c64833e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)((uint16)context.getParameter<int64>(8) - var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(0, (var6.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var8((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(36) & 0x1f)));
	const AnyBaseValue var11((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(44)));
	context.writeValueStack<uint32>(1, (var10.get<uint32>() + var11.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: HInt_000d10, line 610
static void exec_9b84134d80862525(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 611
static void exec_0f07e258027399d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 612
static void exec_996a4768c66665a5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 613
static void exec_6075386c83699372(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 614
static void exec_ed31cd9437b67c8e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, swapBytes16(*context.getParameter<uint16*>()));
	context.moveValueStack(3);
}

// First occurrence: HInt_000d10, line 617
static void exec_30e8ae9d66f44045(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: HInt_000d10, line 618
static void exec_dee5f889c442af80(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: HInt_000d10, line 619
static void exec_58af4ed647d1b724(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: HInt_000d10, line 622
static void exec_515a0c46865b55f7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(3);
}

// First occurrence: HInt_000dd8, line 703
static void exec_fff79369dcc04841(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: HInt_000dd8, line 709
static void exec_dc28c5f6ba6da8c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
}

// First occurrence: HInt_000dd8, line 710
static void exec_8ee8030d260027ec(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 711
static void exec_ce8e61fcba999559(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + var1.get<uint8>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 712
static void exec_ae6544e3b3ae1be0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: HInt_000dd8, line 731
static void exec_ee3ddb8aa2d532ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(4);
}

// First occurrence: HInt_001024, line 830
static void exec_8b2ee628f44d8911(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: HInt_001024, line 831
static void exec_aaf02d1212cf60dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: HInt_050056, line 883
static void exec_fafae092957b08c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint16>(0, (uint16)var0.get<uint8>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: HInt_050056, line 884
static void exec_f7134306c2e44e3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint16>(0, (uint16)var0.get<uint8>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: HInt_050056, line 885
static void exec_d13149d6a5945ee3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: HInt_050056, line 885
static void exec_fe31f2e0e2ea6400(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - var1.get<uint16>()));
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: HInt_050056, line 886
static void exec_67b18d64642f6c41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - var1.get<uint16>()));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: Kosinski.AddToDMAQueue, line 177
static void exec_1b3e530e9afc7e87(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() == var2.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDMAQueue, line 186
static void exec_2859f63918a84e0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() != var2.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDMAQueue, line 191
static void exec_63eeafdc7117198a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 206
static void exec_b4c683d7e087edb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var3.get<uint16>());
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 207
static void exec_21367f2cd1781305(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: Kosinski.addMultipleToDMAQueue, line 210
static void exec_db4e5d4ba75ca9c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: Kosinski.PrepareNextModules, line 221
static void exec_5aa27e417f55b5c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.PrepareNextModules, line 225
static void exec_d923fd2dd3bd61e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), var3.get<uint8>());
}

// First occurrence: Kosinski.PrepareNextModules, line 226
static void exec_cb72b8f5adadf51b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Kosinski.PrepareNextModules, line 232
static void exec_8af29a545a790068(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), var2.get<uint16>());
}

// First occurrence: Kosinski.ProcessModules, line 255
static void exec_14f2acdbdabb6b50(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: Kosinski.ProcessModules, line 272
static void exec_6198a4469023d015(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: Kosinski.ProcessModules, line 273
static void exec_ae19f7ad9095e412(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var5((uint16)(var1.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var5.get<uint16>());
}

// First occurrence: Kosinski.ProcessModules, line 274
static void exec_04e4ef6aa20a7f19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: Kosinski.ProcessModules, line 275
static void exec_dcde6f235b3b3bac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint32>());
}

// First occurrence: Kosinski.ProcessModules, line 278
static void exec_8e7e04b23ae3a843(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: Kosinski.ProcessModules, line 295
static void exec_13a1010bdd9d6e76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 320
static void exec_debc6daa534198fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var5.get<uint32>());
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 321
static void exec_665429fc1c4e64e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: Kosinski.AddToDecompressionQueue, line 322
static void exec_24c93cddd8d53e93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: Kosinski.ProcessDecompressionQueue, line 344
static void exec_fe77d8a7912e061c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: Kosinski.ProcessDecompressionQueue, line 350
static void exec_83778ca18dbaf54d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: fn00163c, line 120
static void exec_24178007fe2da07b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00163c, line 147
static void exec_9abef02c08fe3afb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + var1.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fn00163c, line 148
static void exec_de551ea1112346be(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(2, *context.getParameter<uint8*>(12));
	context.moveValueStack(3);
}

// First occurrence: fn00163c, line 150
static void exec_f79ace3c9d924772(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00163c, line 166
static void exec_bbac37619f9aab59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() ^ var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn00163c, line 180
static void exec_fd8a7c70c8cf877a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn00163c, line 181
static void exec_3b788e86345881a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	*context.getParameter<uint16*>() = var0.get<uint16>();
}

// First occurrence: fn001604_gatherData, line 196
static void exec_5c98e4b2b8e52123(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn001604_gatherData, line 208
static void exec_614a6acff688e826(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn001604_gatherData, line 209
static void exec_9a3d3dec4c490c2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(12) & 0x0f)));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fn001604_gatherData, line 210
static void exec_7a73b05d25cc177e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn001604_gatherData, line 221
static void exec_f1388b816606a0dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: fn001604_gatherData, line 222
static void exec_9dbdb69fe95f0e07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var0.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(20) = var7.get<uint16>();
}

// First occurrence: fn001604_gatherData, line 231
static void exec_049c51fdfb36cbc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var7.get<uint16>());
}

// First occurrence: fn0016a8, line 254
static void exec_be6cb9b85de6552e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() | var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0016a8, line 256
static void exec_9e9d959515b39266(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn0016a8, line 257
static void exec_cf21a61a64c6042e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn0016a8, line 259
static void exec_b15f5978b43e64f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn0016a8, line 261
static void exec_20271c365aca32ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() < var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn0016a8, line 263
static void exec_bb4ab9ee2fb71675(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	context.writeValueStack<uint64>(2, (uint64)var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn0016a8, line 267
static void exec_5be54f297861b5f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (var4.get<uint32>() & 0x1f)));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn0016a8, line 269
static void exec_59caea94c963ffbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	context.writeValueStack<uint32>(1, (var3.get<uint32>() << (var4.get<uint32>() & 0x1f)));
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(24));
	context.moveValueStack(3);
}

// First occurrence: LoadRequiredSpritePatterns, line 283
static void exec_fff2b9ff4f148607(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint16>(0, (var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LoadRequiredSpritePatterns, line 284
static void exec_cb94bbdcb6d02ec1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: LoadRequiredSpritePatterns, line 289
static void exec_4f6871391468e829(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)1);
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(uint16)var8.get<uint8>());
	const AnyBaseValue var10((uint16)(var4.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(24) = var10.get<uint16>();
}

// First occurrence: Nemesis.LoadMultipleToVRAM, line 315
static void exec_17a984ab35414b14(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var3.get<uint16>());
}

// First occurrence: Nemesis.LoadMultipleToVRAM, line 319
static void exec_01247a0006f8f856(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var1.get<uint32>());
}

// First occurrence: DynamicObjectsLoading, line 24
static void exec_061af65625008e9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var3.get<uint32>());
}

// First occurrence: DynamicObjectsLoading.Init, line 53
static void exec_d4ded43a527b0b8e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 54
static void exec_8f994c348b7b9912(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(), context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: DynamicObjectsLoading.Init, line 56
static void exec_cc5a73eca5d01402(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: DynamicObjectsLoading.Init, line 102
static void exec_f5bbb576adea9b33(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)(var2.get<uint8>() + var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var6.get<uint8>());
}

// First occurrence: DynamicObjectsLoading.Init, line 103
static void exec_5ac7ae9dc6c957ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(12) = var4.get<uint32>();
}

// First occurrence: DynamicObjectsLoading.Init, line 137
static void exec_19662c298d65680b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: DynamicObjectsLoading.Init, line 137
static void exec_9a6f6aca8d111e71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) & (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: DynamicObjectsLoading.Init, line 139
static void exec_437ed3bd59f504b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() < var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 162
static void exec_0125a38cba262be9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.Init, line 173
static void exec_d156b8b60ea021eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: DynamicObjectsLoading.Init, line 182
static void exec_b7407dbc3e904ccf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.Init, line 192
static void exec_03dcddef2267d03d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 209
static void exec_bc06824c28141d7b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 210
static void exec_fcb85a7da261b0e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 216
static void exec_f61657f80bfab88b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 237
static void exec_4fcef93b6a1e0c52(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 238
static void exec_6be6fa313a61de83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 240
static void exec_7917015bb81f00fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 245
static void exec_0bbcc697af2961bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 250
static void exec_55897768f6a7f030(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() > var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 276
static void exec_6a0c11199cfd87e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 277
static void exec_75b222119b026d8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 279
static void exec_b9461e48bb941fcd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 291
static void exec_e22065cc343cf450(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() < var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 306
static void exec_f944e3c1330bb680(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(4)));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 329
static void exec_c95e80832d6fd3c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 330
static void exec_e23570e913b2fb51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 347
static void exec_024dd418128bf885(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 375
static void exec_5f82db06bd51f9a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 386
static void exec_b22cef76eca49325(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 389
static void exec_f916a9a138ce7a0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: DynamicObjectsLoading.UpdateDefault, line 392
static void exec_d1145a2104e1d854(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 410
static void exec_8af2bd8b603a1bc7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 411
static void exec_c69cf1c37a700489(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((int8)(uint8)var7.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 415
static void exec_b95a13d0aa3b19f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(20));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8.get<uint32>(), var7.get<uint32>());
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 416
static void exec_114c9a26355ae265(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: ObjectSpawning.SpawnFixedObject, line 418
static void exec_4431a9867c884dc5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn01ba40, line 432
static void exec_2dd89d06f6c555ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == var1.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: conditionalSpawnDynamicObject, line 451
static void exec_55db77d6b23dfb85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: conditionalSpawnDynamicObject, line 453
static void exec_10f5110debe59ff0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(uint8)(var5.get<uint16>() == var6.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var7.get<uint8>());
}

// First occurrence: conditionalSpawnDynamicObject, line 461
static void exec_11655491988d8158(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: conditionalSpawnDynamicObject, line 475
static void exec_3697a11fd43da0c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var7.get<uint32>());
}

// First occurrence: conditionalSpawnDynamicObject, line 478
static void exec_2ff42f7252777ee1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: conditionalSpawnDynamicObject, line 480
static void exec_6772be94f703f838(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: spawnChildObjects, line 508
static void exec_1ec28314eccec155(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: spawnChildObjects, line 519
static void exec_b1395e72691d8993(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var3.get<uint8>());
}

// First occurrence: spawnChildObjects, line 521
static void exec_f1a4127f06a70068(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: spawnChildObjects, line 522
static void exec_8b717be29cbf5bea(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: spawnChildObjects, line 523
static void exec_958d971898dbc872(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: spawnChildObjects, line 524
static void exec_947ba9896814bace(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<int8>() < var1.get<int8>()));
	context.moveValueStack(2);
}

// First occurrence: spawnProjectileChildObjects, line 556
static void exec_8d8d06a30e370581(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var3.get<uint32>());
}

// First occurrence: spawnProjectileChildObjects, line 573
static void exec_6a1fe464bdabacda(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(2);
}

// First occurrence: spawnIdenticalChildObjects, line 596
static void exec_fb62a0c960e8c32c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: spawnIdenticalChildObjects, line 597
static void exec_c63f2dd47fb27ee4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var3.get<uint8>());
}

// First occurrence: spawnIdenticalChildObjects, line 602
static void exec_c5c0ead5c5ff583c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: SpawnChildObjects, line 822
static void exec_5fd69f40db1a9554(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: spawnChildObject, line 830
static void exec_268290cd033506d7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: spawnChildObject, line 843
static void exec_a4161d647cb45095(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: SpawnProjectileChildObjects, line 876
static void exec_fb6b61571726cd88(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(6, context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint32>(7, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint32>(8, context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	context.moveValueStack(9);
}

// First occurrence: spawnProjectileChildObject, line 884
static void exec_ecfc1f49dfbc5db3(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), context.readValueStack<uint8>(-6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), context.readValueStack<uint8>(-7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), context.readValueStack<uint8>(-8));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), context.readValueStack<uint32>(-9));
	context.moveValueStack(-9);
}

// First occurrence: spawnProjectileChildObject, line 896
static void exec_fdf263b38e0aa5e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: SpawnIdenticalChildObjects, line 925
static void exec_0e0a6cfa9f3fbe76(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: spawnChildObjects, line 928
static void exec_87a8098cc6f7f0a8(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: spawnProjectileChildObjectInDir, line 1034
static void exec_68c533518832baf8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint8>(1, (var6.get<uint8>() & var7.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: spawnProjectileChildObjectInDir, line 1037
static void exec_0e3d00ea56e4a1bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), context.readValueStack<uint16>(-2));
	context.moveValueStack(-2);
}

// First occurrence: spawnChildObjectHierarchy, line 1131
static void exec_09d15fc1afca8e63(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.moveValueStack(-2);
}

// First occurrence: RequestLoadingPatterns, line 91
static void exec_6c9cc181c1102786(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: AddPatternLoadingCue, line 115
static void exec_548fca831cdcf3dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var5.get<uint16>());
}

// First occurrence: AddPatternLoadingCue, line 117
static void exec_853c8d31f1868ad7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(8));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(2, (uint32)var0.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: FillPatternLoadingCues, line 206
static void exec_8832226f7cea5ef9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var1.get<uint16>());
}

// First occurrence: FillPatternLoadingCues, line 209
static void exec_18c25631fc57648e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: FillPatternLoadingCues, line 210
static void exec_d1248e43964bf597(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(2, (uint32)var2.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: fn0017d8, line 236
static void exec_c47ae0b770e8267b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: fn00180c, line 282
static void exec_6f10929b0baee1bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint32>());
}

// First occurrence: updateSpritePattern, line 49
static void exec_fd1052b4eddf8258(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	*context.getParameter<uint32*>(4) = var1.get<uint32>();
}

// First occurrence: UpdateSpritePattern, line 65
static void exec_0a3b7979ee6bdb46(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: UpdateSpritePattern, line 66
static void exec_a3e8205c8f2566bb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int16>(1, (uint16)var0.get<int32>());
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: updateMultipleSpritePatterns, line 100
static void exec_c2987a9b35c032b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: updateMultipleSpritePatterns, line 107
static void exec_7bf9886b5e63e3f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(20) & 0x1f)));
	const AnyBaseValue var8((uint32)(var0.get<uint32>() + var7.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var8.get<uint32>());
}

// First occurrence: updateMultipleSpritePatterns, line 108
static void exec_f1eda2ffb2c0a4a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: updateMultipleSpritePatterns, line 110
static void exec_26657029a5c2230f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: updateMultipleSpritePatterns, line 111
static void exec_81268f02ed473c4e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var6((int64)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: RenderSprites, line 210
static void exec_3d530525300dc184(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: RenderSprites, line 223
static void exec_a2dec7b0e33c3bb5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites, line 261
static void exec_49c8bf2f2f7e9675(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint8>());
}

// First occurrence: RenderSprites, line 273
static void exec_cf8d6e038fa28cbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 289
static void exec_5c4c3bf472d5114c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: renderNextObject, line 291
static void exec_e65a2f6420704a71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: renderNextObject, line 307
static void exec_0a47a2031e87e4f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<int16>() < var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 329
static void exec_4d6419c8d9c02338(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)swapBytes16(*context.getParameter<uint16*>(28)));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() & var9.get<uint16>()));
	*context.getParameter<uint16*>(36) = var10.get<uint16>();
}

// First occurrence: renderNextObject, line 330
static void exec_98896934d6debd29(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeValueStack<uint16>(0, (var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 330
static void exec_ea3686ef9d687f48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: renderNextObject, line 331
static void exec_8ed488dfa24b8c1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: renderNextObject, line 334
static void exec_008738ca803f91ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	const AnyBaseValue var8((uint16)(var2.get<uint16>() - var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: renderNextObject, line 340
static void exec_58b83fa302a48e1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint32>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(24));
	context.writeValueStack<uint16>(2, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 344
static void exec_fcae715f3385685a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 355
static void exec_b5c9d69ea9acb30a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeValueStack<int16>(1, (var4.get<int16>() * (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: renderNextObject, line 356
static void exec_696cddb2101c3532(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
}

// First occurrence: renderNextObject, line 371
static void exec_22652f96a51e4f59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: renderNextObject, line 387
static void exec_88eaae37b33890e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: renderNextObject, line 388
static void exec_1028e368c77aadbd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(20)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & var5.get<uint16>()));
	*context.getParameter<uint16*>(28) = var6.get<uint16>();
}

// First occurrence: renderNextObject, line 391
static void exec_30fb4cd80ca37e71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: renderNextObject, line 403
static void exec_f5aa3217fb62019a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint32>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint16>(1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(20));
	context.writeValueStack<uint16>(2, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(28))));
	context.moveValueStack(3);
}

// First occurrence: renderNextObject, line 434
static void exec_946d8b3885511c89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint16)((uint16)context.getParameter<int64>(8) - var6.get<uint16>()));
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: writeToSpriteTable, line 494
static void exec_fa0f6cbfe871f153(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: writeToSpriteTable, line 495
static void exec_eec4dc6f97d8d4bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: writeToSpriteTable, line 498
static void exec_aea6b9abd7b5fade(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTable, line 500
static void exec_1ee014198f5c9055(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)var0.get<int16>());
	context.moveValueStack(3);
}

// First occurrence: writeToSpriteTable, line 508
static void exec_f116080be0b8a840(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
}

// First occurrence: writeToSpriteTable, line 509
static void exec_854cc803bb545af4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var0.get<uint8>(), (uint8)context.getParameter<int64>(4)));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var6.get<uint8>());
}

// First occurrence: writeToSpriteTable, line 510
static void exec_f2610ae1f4f9de5d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var0.get<uint8>(), (uint8)context.getParameter<int64>(4)));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var6.get<uint8>());
}

// First occurrence: writeToSpriteTable, line 513
static void exec_c3a890655cfaeb90(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint16)(var4.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint16)(var0.get<uint16>() - var7.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var8.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 515
static void exec_5d9b3b7387d96eb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 519
static void exec_63338c6e24130847(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 521
static void exec_7320b68e31482516(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 524
static void exec_905e8da1d3e0c956(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 525
static void exec_b38aaa158caedaa5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 531
static void exec_af93f76ce119e937(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: writeToSpriteTable, line 539
static void exec_11d389ac83182de5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)0);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: writeToSpriteTable, line 542
static void exec_d0b774057d85f20a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() & var1.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: writeToSpriteTableCompound, line 594
static void exec_2853b1978a74715c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTableCompound, line 611
static void exec_554900fea679c5fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: writeToSpriteTableCompound, line 612
static void exec_7baafd8aa5231a29(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.moveValueStack(6);
}

// First occurrence: writeToSpriteTableCompound, line 625
static void exec_283881978a5d5814(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: writeToSpriteTableCompound, line 625
static void exec_976b22e0a069eea6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<int16>(-3) < var0.get<int16>()));
	context.moveValueStack(-2);
}

// First occurrence: RenderSprites_CompetitionMode, line 668
static void exec_86f2933a62f032cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint8>());
}

// First occurrence: RenderSprites_CompetitionMode, line 685
static void exec_b43f846266ff9205(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites_CompetitionMode, line 699
static void exec_a822a64ea6bfbc58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: RenderSprites_CompetitionMode, line 702
static void exec_79c239b300e8329a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: renderNextCompModeObject, line 719
static void exec_560e37a63912a817(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: renderNextCompModeObject, line 721
static void exec_4a89deb58d2464fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
}

// First occurrence: renderNextCompModeObject, line 749
static void exec_c18b4d59a1eab56d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() & var10.get<uint16>()));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 750
static void exec_b677e5a4d0ef3938(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 751
static void exec_52af57df636b3ccc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(context.readValueStack<uint16>(-1) + var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: renderNextCompModeObject, line 755
static void exec_234baac1f5cfe9b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(20));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(28) = var6.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 756
static void exec_86e568f7b4a6ec2c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var11((uint16)(var5.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint16)swapBytes16(*context.getParameter<uint16*>(40)));
	const AnyBaseValue var13((uint16)(var11.get<uint16>() & var12.get<uint16>()));
	*context.getParameter<uint16*>(48) = var13.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 758
static void exec_e3e65d1536e7fc4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(28) = var8.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 762
static void exec_276d17ace26b3ba8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 772
static void exec_0509e8eac4902e97(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: renderNextCompModeObject, line 773
static void exec_bb55d20bdf3ca0aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 791
static void exec_b9cb575bfa267d40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(var1.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 792
static void exec_f993e2c950b61dc4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint16)swapBytes16(*context.getParameter<uint16*>(40)));
	const AnyBaseValue var12((uint16)(var10.get<uint16>() & var11.get<uint16>()));
	*context.getParameter<uint16*>(48) = var12.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 839
static void exec_9e6db79b4873159d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: renderNextCompModeObject, line 841
static void exec_ea90edcbeca8ea43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: InitSaveSlots, line 37
static void exec_b86605fc7802da40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)0);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: InitSaveSlots, line 38
static void exec_b7df16762a458ec0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: InitSaveSlots, line 40
static void exec_e87493eaf8dd8cb3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), (uint32)context.getParameter<int64>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + (uint8)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), var9.get<uint8>());
}

// First occurrence: InitSaveSlots, line 44
static void exec_e37b6c44535da849(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: InitSaveSlots, line 53
static void exec_cfff21efd99f1c93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), (uint8)context.getParameter<int64>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: InitSaveSlots, line 59
static void exec_1e99bb14ecac1b69(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn00c320, line 255
static void exec_1480de5b9a5a8f5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn00c320, line 272
static void exec_4f7323ba1e494973(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn00c320, line 274
static void exec_f082e7382817ec68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint16>());
	context.moveValueStack(1);
}

// First occurrence: fn00c362, line 286
static void exec_1c06ab226438cff9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00c362, line 290
static void exec_abe25c8d6d1210e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn00c376, line 306
static void exec_a5502a6901fcdfee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn00c376, line 324
static void exec_27fefce0896103a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: SaveGameSlot, line 393
static void exec_840d8b3ee8f55e48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() != var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 393
static void exec_333b5d19138c5fd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint32>() != var6.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 393
static void exec_b69b2ad2a0eea227(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() != var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 393
static void exec_33feaf581893b2a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() != (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(1);
}

// First occurrence: SaveGameSlot, line 396
static void exec_571d3c1187d5306c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: SaveGameOnLevelFinished, line 432
static void exec_428e434773ca8662(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var4.get<uint8>());
}

// First occurrence: SaveGameOnLevelFinished, line 433
static void exec_a3ce1174eb2065c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: SaveGameOnLevelFinished, line 439
static void exec_bd99898380702ff0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: SaveGameOnLevelFinished, line 446
static void exec_9a039ad255fbc578(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: SaveGameOnLevelFinished, line 455
static void exec_23967b1bcac8db77(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >= (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: SaveGameOnLevelFinished, line 468
static void exec_cb7e3780ade50f0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: SaveGameOnLevelFinished, line 481
static void exec_40dc66abdae84a8c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: makeNormalPackedColor, line 18
static void exec_7a00dd06cf1d63bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (var3.get<uint16>() & 0x0f)));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var10((uint16)(var4.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var13((uint16)(var11.get<uint16>() & (uint16)(context.getParameter<int64>(36))));
	const AnyBaseValue var15((uint16)(var13.get<uint16>() >> (uint16)(context.getParameter<int64>(44) & 0x0f)));
	context.writeValueStack<uint16>(0, (var10.get<uint16>() + var15.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: makeExtendedPackedColor, line 25
static void exec_9631f834fe961e92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: makeExtendedPackedColor, line 28
static void exec_3a6a062a640cb6bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (var4.get<uint16>() & 0x0f)));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() << (uint16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var12((uint16)(var6.get<uint16>() + var11.get<uint16>()));
	const AnyBaseValue var13((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	const AnyBaseValue var15((uint16)(var13.get<uint16>() & (uint16)(context.getParameter<int64>(44))));
	const AnyBaseValue var17((uint16)(var15.get<uint16>() << (uint16)(context.getParameter<int64>(52) & 0x0f)));
	context.writeValueStack<uint16>(0, (var12.get<uint16>() + var17.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: SetPaletteToBlack, line 72
static void exec_bcd2d575267df01a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(1, (uint32)var7.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: FadeInPalette, line 105
static void exec_d1cc7851d36c2f03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint8>());
	const AnyBaseValue var2((uint64)(context.readValueStack<uint64>(-2) + var1.get<uint64>()));
	const AnyBaseValue var3((int32)(uint32)var2.get<int64>());
	*context.getParameter<uint32*>() = var3.get<uint32>();
	context.moveValueStack(-2);
}

// First occurrence: FadeInPalette, line 107
static void exec_f863ed981deda4b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: FadeInPalette, line 127
static void exec_acb86195d0f223e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: FadeInColor, line 142
static void exec_0967f78458e1ddf8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeInColor, line 149
static void exec_087817827e4cd5c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() < var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeInColor, line 151
static void exec_41a804952d545fba(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - var5.get<uint16>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(28));
	context.moveValueStack(3);
}

// First occurrence: FadeInColor, line 168
static void exec_cb8af31df2fa9a53(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() <= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeOutScreenBlocking, line 200
static void exec_e72139c16c78bbbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	*context.getParameter<uint8*>() = var0.get<uint8>();
}

// First occurrence: FadeOutPalette, line 240
static void exec_b1cc7ed67bb93e1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeOutPalette, line 240
static void exec_e2a608b4258a55d5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: FadeOutColor, line 264
static void exec_84ea4f929ae6e805(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeOutColor, line 268
static void exec_b35649a743cf71d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: SetPaletteToWhite, line 291
static void exec_be53327154c0fd8c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(1, (uint32)var7.get<uint8>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: SetPaletteToWhite, line 298
static void exec_13bc191dfed5d1d1(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint16*>(8) = (uint16)context.getParameter<int64>();
}

// First occurrence: FadeColorTowardsTarget, line 362
static void exec_ef87112d840a661d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() > var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeColorToWhite, line 453
static void exec_f2c896300f08953b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() != (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: GameModeControlLoop, line 37
static void exec_86cb5e6fe7bca372(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() > (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: GameModeControlLoop, line 39
static void exec_b00a63515f8ea635(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: GameModeControlLoop, line 68
static void exec_494ca72a54367e13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: GameModeControlLoop, line 69
static void exec_3ba412d43f60030a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: UpdateGameObjects, line 95
static void exec_44c6a9c9f137f85d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() >= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateGameObjects, line 95
static void exec_119e5d1ffb9de9b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: updateGameObjectLoop, line 134
static void exec_cf865ba6bf3279f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & var1.get<uint32>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() == var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: updateGameObjectLoopRenderOnly, line 148
static void exec_e1370461e8a510c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() >= var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: allocDynamicObjectAfterA1, line 180
static void exec_8e9f5734085b4b15(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	context.writeValueStack<int8>(1, (uint8)var2.get<int32>());
	context.moveValueStack(2);
}

// First occurrence: allocDynamicObjectAfterA0, line 204
static void exec_1f6a715f506ab11a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)((uint32)context.getParameter<int64>() - var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var4.get<uint32>());
}

// First occurrence: allocDynamicObjectAfterA0, line 205
static void exec_bb5609e04f5402f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	*context.getParameter<uint16*>(12) = var4.get<uint16>();
}

// First occurrence: allocDynamicObjectAfterA0, line 206
static void exec_32e787302c069799(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<int8>(1, (uint8)var0.get<int16>());
	context.moveValueStack(2);
}

// First occurrence: allocDynamicObject, line 213
static void exec_a9c5dcbc5df8cb5c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	*context.getParameter<uint16*>(4) = var1.get<uint16>();
}

// First occurrence: CallPlaneUpdateRoutine, line 249
static void exec_dcc98d5e1ed86bdc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint16>());
	context.writeValueStack<uint64>(0, (var1.get<uint64>() + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 322
static void exec_e49bf349e806d322(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() != var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn04e838, line 329
static void exec_c471959ba33c1b4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() < var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 331
static void exec_6c8fa1560252ff28(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<uint32>(0, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 334
static void exec_cb5c310298bdd61a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn04e838, line 343
static void exec_e4367b8070b19bd1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04e85a, line 384
static void exec_564a5432d745767c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04e85a, line 385
static void exec_3b296ee3958d9549(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04e85a, line 395
static void exec_1e8fab82c34a73db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04e8a4, line 419
static void exec_bf0d329ed0433f6c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, -(signed)context.readValueStack<uint16>(-1));
	context.writeValueStack<int64>(0, 0);
	context.moveValueStack(1);
}

// First occurrence: CopyRectToVRAM, line 470
static void exec_36053c57b9481e35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int64)1);
	context.writeValueStack<uint16>(1, (var2.get<uint16>() + var3.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: copyRectToVRAM, line 474
static void exec_a733e4b1393f6bb4(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: copyRectToVRAM, line 477
static void exec_dee3ee77309dc69e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: copyRectToVRAM, line 486
static void exec_9db8a9a75498b757(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(12) = var3.get<uint32>();
}

// First occurrence: copyRectToVRAM, line 487
static void exec_3942f1f7426ef8aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: fn001506, line 497
static void exec_26d0e9e685426331(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn01aaa2, line 587
static void exec_47db519a2898afe0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: fn01aaa2, line 589
static void exec_c5c904dc71e203a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn01aabc, line 597
static void exec_6ed112c4189cf8a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: fn01aabc, line 598
static void exec_0334446f5645b51f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint32>());
}

// First occurrence: UpdateRollingDemo, line 620
static void exec_bb5045303ef41f1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: UpdateRollingDemo, line 621
static void exec_f3fec306f3949f05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() | var4.get<uint8>()));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: UpdateRollingDemo, line 624
static void exec_5ec596ff8f0e5e70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint8)(var0.get<uint8>() | var2.get<uint8>()));
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: UpdateRollingDemo, line 651
static void exec_f26bd3d101f83292(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() | (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: UpdateRollingDemo, line 656
static void exec_aac8357ff9cc5a4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: UpdateRollingDemo, line 657
static void exec_64420ebe0ffdf317(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: BlueSphereGame.applyTailsPalette, line 41
static void exec_fc82d3cd51630e41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: BlueSphere.setGeneratedStage, line 115
static void exec_b64fa32b87d38f48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), var3.get<uint8>());
}

// First occurrence: BlueSphere.setGeneratedStage, line 116
static void exec_5dcb11c936aa0006(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(12)));
	const AnyBaseValue var7((int8)(uint8)var6.get<int32>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(20), var7.get<uint8>());
}

// First occurrence: BlueSphere.setGeneratedStage, line 117
static void exec_81db304934ede38d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(20)));
	const AnyBaseValue var7((int8)(uint8)var6.get<int32>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(28), var7.get<uint8>());
}

// First occurrence: fn04cd18, line 322
static void exec_db8eceb791b910b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn04cd18, line 333
static void exec_ae575241bc295236(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: fn04cd18, line 336
static void exec_45dc696c618cfaf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn04cd18, line 344
static void exec_86596fa068d89e1b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn04cd18, line 351
static void exec_586ed1f35493f2b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == var6.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn04cd18, line 355
static void exec_57eb4010321cfe49(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04cd18, line 358
static void exec_e5727033b7f5eeb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04cd18, line 361
static void exec_5db6241baa519218(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn04cd18, line 362
static void exec_3024c610f00f6029(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (var1.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn04cd18, line 366
static void exec_3e1a5bc7de03c830(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn04cd18, line 369
static void exec_377a8ec23898c6e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var6.get<uint8>();
}

// First occurrence: fn04cd18, line 376
static void exec_92651b3d64452c09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (uint8)(context.getParameter<int64>(8) & 0x07)));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn04ceb6, line 419
static void exec_1c0cde6487469561(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() > (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04cef8, line 456
static void exec_81671a93e07ac79b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn04cf82, line 487
static void exec_633cf90c39809881(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d03e, line 562
static void exec_9ef5294941a98d39(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn04d03e, line 567
static void exec_beee9e2855f02f5f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn04d09e, line 594
static void exec_ca4acdd14260e907(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == var1.get<uint8>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() != var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d09e, line 596
static void exec_b987bbcfcf0b9711(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn04d09e, line 606
static void exec_f007702979f6f2d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (var1.get<uint8>() & 0x07)));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn04d09e, line 607
static void exec_6d282f3fe21b1c51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn04d0f6, line 636
static void exec_cab59a83de614bd7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn04d1aa, line 738
static void exec_b58e7cbbc8879aaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d240, line 798
static void exec_761674e755eefa1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d240, line 800
static void exec_5f4e307b9f5edd57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fn04d240, line 808
static void exec_8002a79b143439f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fn04d268, line 833
static void exec_9981097a7990bfb7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint32>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint64)(uint64)var2.get<uint32>());
	const AnyBaseValue var4((uint64)(var1.get<uint64>() + var3.get<uint64>()));
	const AnyBaseValue var6((uint64)(var4.get<uint64>() >> (uint64)(context.getParameter<int64>(16) & 0x3f)));
	const AnyBaseValue var7((int16)(uint16)var6.get<int64>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: fn04d30e, line 883
static void exec_7fcbb3f047d7a349(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint16>(0, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04d362, line 900
static void exec_bacae2f5faf8972b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn04d362, line 903
static void exec_ba8a74ef3f3068f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn04d362, line 905
static void exec_d96775255a122458(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn04d362, line 916
static void exec_344d06b7d51594e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn04d362, line 923
static void exec_8848c5fb0689f08f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() ^ (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn04d3ce, line 950
static void exec_d5802a8ea5ab838e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn04d3ce, line 957
static void exec_735a743338abfc0f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn04d488, line 1012
static void exec_0e45868b3654e169(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04d488, line 1030
static void exec_c1fcd58997e59ac6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d64e, line 1204
static void exec_3ac0fd7cb43cd6fd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn04d6b8, line 1228
static void exec_3adc22453348fa09(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>(8) - var2.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn04d6b8, line 1237
static void exec_4f76de350fbcb62b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn04d6b8, line 1241
static void exec_464f677b462f23fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1244
static void exec_959a8356dd5c71f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1255
static void exec_c795b7d2612c1568(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d6b8, line 1321
static void exec_b045b1790a97a5d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04d986, line 1404
static void exec_73d2836707bb3eec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint8>());
}

// First occurrence: fn04da7e, line 1475
static void exec_63329fd6d1e4d578(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(2, (var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	context.moveValueStack(3);
}

// First occurrence: fn04da7e, line 1596
static void exec_e17caec5cf848404(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: BlueSphereGame.advanceStages, line 1610
static void exec_56360fd5a4efa7a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var4.get<uint32>());
}

// First occurrence: BlueSphereGame.advanceStages, line 1617
static void exec_57d4f77e13461144(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04dea2, line 1640
static void exec_d295c8240face4bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn04df52, line 1723
static void exec_c30618a2347f00d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() ^ (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn04e05c, line 1842
static void exec_c12fe25c7c63d04e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn04e074, line 1856
static void exec_477bbe6f79a2bc40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((int32)(var1.get<int32>() * var3.get<int32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn04e074, line 1858
static void exec_9ba49879ce7ebdc5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	context.writeValueStack<uint32>(0, (var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn04e074, line 1858
static void exec_c370b192df9ea8d2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-2) + var0.get<uint32>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn04e074, line 1859
static void exec_3a0eadd965c82e8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn04e0a4, line 1899
static void exec_cfbdc581f2870867(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn04e116, line 1912
static void exec_3aaadaa7f767482f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
}

// First occurrence: fn04e116, line 1920
static void exec_14bf6ff79775397b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04e160, line 1938
static void exec_4d15b1e1b4e26327(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn04e160, line 1952
static void exec_c1a088bfaeef18f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint32>());
}

// First occurrence: fn02cdea, line 2305
static void exec_ed8dfd51d909019b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02cdea, line 2309
static void exec_971cde0e51f8acce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)-(signed)var4.get<uint16>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn02ce76, line 2343
static void exec_78dc7fa5505072b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)(var0.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn02ce76, line 2346
static void exec_09dfb293dc5180f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn02cea2, line 2361
static void exec_8e45e927a56a2bfc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn07cff0, line 2379
static void exec_20d7f80771dd86e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn07cff0, line 2382
static void exec_40d9406c0a3d6954(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), context.readValueStack<uint32>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn00eff0, line 18
static void exec_68ba47602a51c04d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: getTileAtWorldPosition, line 27
static void exec_f52f2a9871b1d611(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.moveValueStack(-3);
}

// First occurrence: getTileAtWorldPosition, line 31
static void exec_14b468e738533417(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: getTileAtWorldPosition, line 32
static void exec_8446fff4a0c443e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var4.get<uint16>());
}

// First occurrence: getTileAtWorldPosition, line 35
static void exec_c2f17092a234d18b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: getTileAtWorldPosition, line 39
static void exec_67bceeabb6722417(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var2.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: getTileAtWorldPosition, line 40
static void exec_bbcd50dd5d668153(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var1.get<uint8>());
}

// First occurrence: getTileAtWorldPosition, line 43
static void exec_5d30c86eb108d28e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var9.get<uint32>());
}

// First occurrence: getTileAtWorldPosition, line 44
static void exec_7c75a03b03109565(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
}

// First occurrence: getTileAtWorldPosition, line 45
static void exec_e98dc49c1f3ae493(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var7.get<uint32>());
}

// First occurrence: checkStaticCollisionVertical, line 57
static void exec_7a0f114eb6c9d719(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: checkStaticCollisionVertical, line 62
static void exec_5e803c30dcddf798(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	*context.getParameter<uint32*>(4) = var1.get<uint32>();
}

// First occurrence: CheckStaticCollisionVertical, line 97
static void exec_fea2f537098868c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint8>());
}

// First occurrence: CheckStaticCollisionVertical, line 105
static void exec_ce60f4b414f57fa3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: GetDistanceToStaticCollisionY2, line 118
static void exec_7b68c1dabf40cee3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: GetDistanceToStaticCollisionY2, line 123
static void exec_121961706e97da67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: GetDistanceToStaticCollisionY2, line 121
static void exec_a34d4da6aa3e24e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<int16>() < var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: GetDistanceToStaticCollisionY2, line 130
static void exec_8907e7335c820cb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: GetDistanceToStaticCollisionY2, line 137
static void exec_93b26e2003482ac6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: GetDistanceToStaticCollisionY1, line 161
static void exec_315753dacce3b8b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: getTileAndAngle, line 343
static void exec_fad4c61300a44bca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 370
static void exec_6e0fd2f9bea466d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 370
static void exec_34a70b7c85b48b28(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint16>(0, (var3.get<uint16>() & var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: getTileAndAngle, line 373
static void exec_416865c78a1d4b21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var6.get<uint8>());
}

// First occurrence: getTileAndAngle, line 385
static void exec_cb832a71d2e2e4b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: getCollisionIndentX, line 400
static void exec_79758f0444fba677(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var8.get<uint8>());
}

// First occurrence: getCollisionIndentX, line 405
static void exec_747887cec3a03d81(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: getCollisionIndentX, line 408
static void exec_8906a169e1fe3019(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)(var5.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var10.get<uint16>());
}

// First occurrence: getCollisionIndentX, line 411
static void exec_70c6ff7526eeb6ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: getCollisionIndentX, line 414
static void exec_a13f92f5f84370ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var1.get<uint16>());
}

// First occurrence: fn00f61c, line 524
static void exec_85f62c0a227961c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var3.get<uint32>() + var10.get<uint32>()));
	*context.getParameter<uint32*>(40) = var11.get<uint32>();
}

// First occurrence: fn00f61c, line 533
static void exec_216e716d97c988ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn00f61c, line 538
static void exec_4701c703b3aa8e46(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>() = context.readValueStack<uint8>(-1);
	context.moveValueStack(-1);
}

// First occurrence: fn00f61c, line 554
static void exec_9bb47cb6ff7e0744(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) <= (uint16)(context.getParameter<int64>())));
}

// First occurrence: fn00f72e, line 628
static void exec_755feedb36abb0a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: CheckHitboxCollisionDownwards, line 657
static void exec_f0c86b447311bd4e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint16>());
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: CheckHitboxCollisionDownwards, line 659
static void exec_f13960b841ed58cd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: CheckHitboxCollisionDownwards, line 661
static void exec_a9989ab9743a63bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint16>());
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: CheckHitboxCollisionDownwards, line 665
static void exec_e346ea04e0e24bd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: CheckHitboxCollisionDownwards, line 678
static void exec_63a673325b344c85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	*context.getParameter<uint8*>() = var0.get<uint8>();
}

// First occurrence: fn00f828, line 726
static void exec_41b34db92eb1a8e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn00f846, line 737
static void exec_521024414236c16e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: Character.checkFloorEdgeCollision, line 765
static void exec_ca5d07dfe0fd27d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + var8.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.checkFloorEdgeCollisionAtY, line 785
static void exec_17b8e7abe1c3c3e0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: fn00f8ea, line 798
static void exec_17c31abe877c6bf4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn00f8ea, line 806
static void exec_8bc59b2df957a482(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	*context.getParameter<uint8*>() = var0.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: checkGroundCollisionAtX, line 826
static void exec_b66b78cd61ca21dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var9.get<uint16>());
}

// First occurrence: checkGroundCollisionAtX, line 831
static void exec_6a6889d6b6a4140f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: fn00f994, line 843
static void exec_935adcc6890a89e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: CheckHitboxCollisionRight, line 855
static void exec_f70ea39f12a70f57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn00faa4, line 914
static void exec_2296b58ff6fdd127(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: Character.CheckRightWallCollision.shared, line 924
static void exec_4f97c3b80f9ea5c9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) >= (uint32)(context.getParameter<int64>())));
}

// First occurrence: CheckHitboxCollisionUpwards, line 953
static void exec_51a1be449e122db1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() ^ (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: CheckHitboxCollisionUpwards, line 955
static void exec_45f6e0bab5ecae4d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: CheckHitboxCollisionUpwards, line 958
static void exec_c3874dbdc7c35987(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn00fb5a, line 984
static void exec_09410beb15d9359c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn00fb5a, line 985
static void exec_450c48fc4fa972a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() ^ (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn00fb5a, line 989
static void exec_878f057a394afb48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn00fbce, line 1002
static void exec_a082c70e5155051f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() ^ (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn00fbee, line 1015
static void exec_bb288429276de22a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() ^ (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: Character.checkCeilingEdgeCollision, line 1041
static void exec_428cd103f9703527(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	context.writeValueStack<uint16>(0, (var9.get<uint16>() ^ (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(1);
}

// First occurrence: Character.checkCeilingEdgeCollisionAtY, line 1061
static void exec_c2fb67a96dc46e60(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(28));
	context.moveValueStack(5);
}

// First occurrence: fn00fdc8, line 1144
static void exec_f26a4498b8450184(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn00fdec, line 1171
static void exec_c32442f42fe35230(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() ^ (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: CheckLeftWallCollision, line 1189
static void exec_16fda3edfbe83bb3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() ^ (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: CompetitionMode.Character.CheckCollisionsWithDynamicObjects, line 1199
static void exec_0f8841f03ba1e628(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn061d4c, line 35
static void exec_e5ab8e83e83c2ab7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn0620aa, line 115
static void exec_a96bf18df70083ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)-(signed)var3.get<uint16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn0623fe, line 147
static void exec_f041934ff4857aa5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: fn0623fe, line 151
static void exec_40e8fb4817fb0064(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn065c78, line 266
static void exec_2f63a1842fc03578(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn065cac, line 290
static void exec_e042e7a570891165(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn065cac, line 291
static void exec_845152b2402e20f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: DebugMode.BaseUpdate, line 18
static void exec_788cd649cef84925(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: DebugMode.BaseUpdate, line 23
static void exec_4cb9fce33571d03d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int16>(1, (uint16)var0.get<int32>());
	context.moveValueStack(2);
}

// First occurrence: DebugMode.Enter, line 31
static void exec_68200fadc7676cda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint32>());
}

// First occurrence: DebugMode.Enter, line 37
static void exec_bb29d6c435e07207(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: DebugMode.Enter, line 67
static void exec_7052d3463a85e4f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: DebugMode.GetObjectTable, line 95
static void exec_e638bb638f184e00(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: DebugMode.OnSelectionChanged, line 105
static void exec_87c05e42c90e6ce6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: DebugMode.EvaluateInput, line 116
static void exec_2b1a547e58c7c303(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: DebugMode.EvaluateInput, line 147
static void exec_8b72ad48aa519aeb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
}

// First occurrence: DebugMode.EvaluateInput, line 152
static void exec_a397955dcaa812e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: DebugMode.EvaluateInput, line 153
static void exec_d9439e910b9eda2a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: DebugMode.EvaluateInput, line 158
static void exec_b3bf163f4707e4f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: DebugMode.EvaluateInput, line 159
static void exec_428aab181737487b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: DebugMode.EvaluateInput, line 178
static void exec_0b49e5ccdce6a294(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)0);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
}

// First occurrence: DebugMode.EvaluateInput, line 179
static void exec_129ca8a6a7bc4114(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), (uint8)context.getParameter<int64>());
}

// First occurrence: DebugMode.EvaluateInput, line 181
static void exec_04ecc54e57e090b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)1);
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
}

// First occurrence: DebugMode.EvaluateInput, line 187
static void exec_d7347a0db3e8f02f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((int8)OpcodeExecUtils::safeModulo<int8>((int8)var4.get<int8>(), (int8)var5.get<int8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(20), var6.get<uint8>());
}

// First occurrence: DebugMode.EvaluateInput, line 201
static void exec_1bb8439fc736320b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: DebugMode.EvaluateInput, line 204
static void exec_b6d84d008bc79dfa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: DebugMode.EvaluateInput, line 205
static void exec_605c013ff86bac9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint32>());
}

// First occurrence: DebugMode.EvaluateInput, line 207
static void exec_9ddace8923576e07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() == (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: DebugMode.EvaluateInput, line 230
static void exec_638bc654e117d152(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: DebugMode.EvaluateInput, line 231
static void exec_bcdcf9800d6ab5f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: DebugMode.ResetSonic, line 245
static void exec_43dfbcacac07037a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: updateDebugModeRegular, line 259
static void exec_7e828a4cb58f5e40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: updateDebugModeInput, line 333
static void exec_c733e45c6561e8e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() ^ var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: debugModeRescue, line 367
static void exec_0a2deebba60dad3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: GameMode.MainGame, line 73
static void exec_07f57ae0817d73f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: GameMode.MainGame, line 137
static void exec_d7f9809ce646f580(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: GameMode.MainGame, line 164
static void exec_912e7efe163b2af6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: GameMode.MainGame, line 168
static void exec_f0d5143e1631a145(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(uint8)(var4.get<uint32>() >= (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
}

// First occurrence: GameMode.MainGame, line 169
static void exec_9d983c77051f9b26(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateGamePause, line 271
static void exec_577b4fb4dad5fb0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: initializeMainGame, line 592
static void exec_7ff870bb573a0ec1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
}

// First occurrence: initializeMainGame, line 600
static void exec_73573b1760ab70e9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: initializeMainGame, line 617
static void exec_1b9df4384d940ef3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var8((uint32)(var5.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: initializeMainGame, line 624
static void exec_bad0c88fa8af2bf4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(4), var1.get<uint16>());
}

// First occurrence: initializeMainGame, line 668
static void exec_31a308e7dea4a285(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: initializeMainGame, line 707
static void exec_336683150ec972f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)1);
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
}

// First occurrence: initializeMainGame, line 735
static void exec_e120f764cf6e10d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: MainGame.getLevelDataPointer, line 821
static void exec_0b1f9a353a18c3f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: MainGame.getLevelDataPointer, line 823
static void exec_3e3e0079196fbf70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: Level.loadNonfadingPaletteData, line 860
static void exec_582bf6f3ee955a6a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<int8>(0, (uint8)var0.get<int16>());
	context.moveValueStack(1);
}

// First occurrence: copyPaletteDataFromTable, line 990
static void exec_f30dd3f9cb99369c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: copyPaletteDataFromTable, line 992
static void exec_a6ec0d29d190e3dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: copyPaletteDataFromTable, line 993
static void exec_152f79c10abc8ac2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: copyPaletteDataFromTable, line 995
static void exec_5423efd6cf455af1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
}

// First occurrence: copyPaletteDataFromTable, line 996
static void exec_51bfea437da80d05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(2, (uint32)var0.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1008
static void exec_5eb62c6f0f2ed700(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(2, (uint64)var3.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1038
static void exec_1c40fb9c95bb2cad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: copyPaletteDataFromTable, line 1044
static void exec_84c4b58b741c33c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + var1.get<uint32>()));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1045
static void exec_00721488c361bbd6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1046
static void exec_09dc03cd7ce904c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1052
static void exec_889c71b26d1d7795(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + var1.get<uint32>()));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1053
static void exec_b8da69b0cd16df54(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(3);
}

// First occurrence: copyPaletteDataFromTable, line 1054
static void exec_0db3bff475ea4895(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: Level.InitializeWater, line 1073
static void exec_cae45fcd028612ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Level.InitializeWater, line 1083
static void exec_62ede7d395517db8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: Level.InitializeWater, line 1094
static void exec_68b4ec121a29e45a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)!context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: Level.InitializeWater, line 1126
static void exec_5417698e4ee0d539(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var8.get<uint16>());
}

// First occurrence: Level.InitializeWater, line 1127
static void exec_140cfc9cd6ba9072(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: fn0076a6, line 1216
static void exec_94701988ccfcb631(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)(var5.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: fn0076a6, line 1220
static void exec_516484ce1c7e0c53(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(1, (uint8)(var0.get<uint32>() >= (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn0076a6, line 1220
static void exec_84ddf60f223ca3ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) + context.readValueStack<uint32>(-1)));
	*context.getParameter<uint32*>() = var0.get<uint32>();
	context.moveValueStack(-2);
}

// First occurrence: Level.SetupLevelSize, line 1252
static void exec_5885a6259b390e3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1291
static void exec_c3c2bf6f1ad7abfb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint32)(var4.get<uint32>() + var8.get<uint32>()));
	const AnyBaseValue var10((uint32)(var0.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: SetupCharacterAtStartPosition, line 1292
static void exec_a3788246f2ba8301(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: SetupCharacterAtStartPosition, line 1315
static void exec_f73c4d8ea2cf2234(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) == (uint32)(context.getParameter<int64>())));
}

// First occurrence: SetupCharacterAtStartPosition, line 1329
static void exec_c911b15bfb5129a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1400
static void exec_f743198ea2d4e886(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) == (uint8)(context.getParameter<int64>())));
}

// First occurrence: SetupCharacterAtStartPosition, line 1433
static void exec_2f4dbd3587b4a8ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: SetupCharacterAtStartPosition, line 1453
static void exec_a4e366bce3eb88ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<int64>(-1, 0);
}

// First occurrence: SetupCharacterAtStartPosition, line 1469
static void exec_023ae4a9ad84b841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, swapBytes16(*context.getParameter<uint16*>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn007812, line 1558
static void exec_be8b93315f1b67a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn007812, line 1563
static void exec_aa8059541d5d6442(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn007812, line 1564
static void exec_ec804b4b90088cca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn01c2b0, line 1594
static void exec_82663011d2ed8c03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn01c2b0, line 1613
static void exec_25caeddaa1062d15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn01c362, line 1645
static void exec_631ade8b5093e0c7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: fn04ff00, line 1654
static void exec_08e379b6ff0f9bd1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
}

// First occurrence: fn04ff00, line 1655
static void exec_e24d0acf48a4956e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: fn028c80, line 1732
static void exec_21e19e0fcf675bb5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(16));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdateOscillatingNumbers, line 1767
static void exec_490ca44e62cf2f7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() > var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1772
static void exec_2424a096d521f3ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & var1.get<uint32>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() == var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1774
static void exec_8bad0784963d0253(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: UpdateOscillatingNumbers, line 1776
static void exec_e861a4d5df6619b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateOscillatingNumbers, line 1778
static void exec_639fcdcd1c84b4e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1780
static void exec_5393ee77d6d8957f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() | var1.get<uint32>()));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: UpdateOscillatingNumbers, line 1789
static void exec_56842aa29ed8e55e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateOscillatingNumbers, line 1791
static void exec_6e54e4f6318abc2a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)~var1.get<uint32>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() & var2.get<uint32>()));
	*context.getParameter<uint32*>(12) = var3.get<uint32>();
}

// First occurrence: UpdateOscillatingNumbers, line 1795
static void exec_2887faa710355351(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (var4.get<uint32>() & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var5.get<uint32>());
}

// First occurrence: fn0067ee, line 1865
static void exec_d4ad7043d1e04fa0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: RestoreShield, line 2009
static void exec_232b6430b76806e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) != var0.get<uint32>()));
}

// First occurrence: RestoreShield, line 2013
static void exec_18e62fd8a7092bb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: RestoreShield, line 2021
static void exec_48227a3eaa4884bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: InitializeGameCharacters, line 2144
static void exec_8179a633b6c4d9b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn006bd8, line 2156
static void exec_44108cec8a0332c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04b6aa, line 2184
static void exec_0d7633a959e13e57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
}

// First occurrence: fn04b6aa, line 2201
static void exec_9ef5e75da25515b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn01cacc, line 2225
static void exec_7da51033c08c4663(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn01cade, line 2234
static void exec_7fa90bdafc40314b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn01cade, line 2235
static void exec_131937dc55189bb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01cade, line 2238
static void exec_ae1cc17d6676275a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01cb20, line 2267
static void exec_5cdd18e319a09f1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0075d2, line 2291
static void exec_0c9d8b2ed72b3e4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn0075d2, line 2293
static void exec_41e322a6fa6d90bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint8>());
}

// First occurrence: UpdateSpecialScrolling, line 2320
static void exec_e5ef8b08c584ebb4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: addScore, line 2338
static void exec_15e23da7773fd4b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + var1.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: addScore, line 2341
static void exec_a2ec66524b881093(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: addScore, line 2348
static void exec_5b774e38f9d3a950(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: AddRings, line 2375
static void exec_a080304e2167dc94(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: UpdateGlobalRingAnimation, line 24
static void exec_004d6589356dac68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(8)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint8>());
}

// First occurrence: UpdateGlobalRingAnimation, line 31
static void exec_a7d2e8f057ea2cb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var4.get<uint16>());
}

// First occurrence: UpdateGlobalRingAnimation, line 32
static void exec_99a9ae02df89e560(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), var5.get<uint8>());
}

// First occurrence: UpdateListOfRingsAround_Default, line 118
static void exec_4ae4367b0431e836(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateListOfRingsAround_Default, line 120
static void exec_498e463e563b62a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: UpdateListOfRingsAround_Default, line 126
static void exec_6cce40a8fc1e16c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - var1.get<uint16>()));
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: UpdateListOfRingsAround_Default, line 140
static void exec_38ddc0028a7b822f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
}

// First occurrence: UpdateListOfRingsAround_Default, line 142
static void exec_fda65b0dee8b7a38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + var0.get<uint16>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(context.readValueStack<uint16>(-2) + var3.get<uint16>()));
	*context.getParameter<uint16*>(8) = var4.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: UpdateStaticRingsAnimation, line 163
static void exec_01552016c7305a3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() != var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateStaticRingsAnimation, line 165
static void exec_f1cfc2559bf14d73(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	*context.getParameter<uint32*>(12) = var4.get<uint32>();
}

// First occurrence: UpdateStaticRingsAnimation, line 171
static void exec_186a87a9a0b8fd55(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateStaticRingsAnimation, line 174
static void exec_89c36d758b910c50(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdateListOfRingsAround_VerticalLayout, line 194
static void exec_cdf87c5179cd0e08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: fn00eb1a, line 279
static void exec_89fdf5895b91f059(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(12) = var4.get<uint32>();
}

// First occurrence: fn00eb1a, line 290
static void exec_6ac201f1221a355e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	context.writeValueStack<uint16>(0, (var5.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 305
static void exec_4ef2b0c71fcafaa2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var4.get<uint32>());
}

// First occurrence: RenderStaticRings, line 306
static void exec_3c5dc123e57fc519(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 319
static void exec_0eabca046e54d11a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)swapBytes16(*context.getParameter<uint16*>(28)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() & var8.get<uint16>()));
	*context.getParameter<uint16*>(36) = var9.get<uint16>();
}

// First occurrence: RenderStaticRings, line 320
static void exec_b4e7fe5f1a3f9195(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: RenderStaticRings, line 323
static void exec_c3d95bea2e44b2b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	*context.getParameter<uint16*>(20) = var5.get<uint16>();
}

// First occurrence: RenderStaticRings, line 325
static void exec_60e365b46c5a6850(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var3.get<uint8>());
}

// First occurrence: RenderStaticRings, line 331
static void exec_d8456f863b8e476d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var5.get<uint32>());
}

// First occurrence: RenderStaticRings, line 333
static void exec_463f685e4088e533(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(12));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: RenderStaticRings, line 334
static void exec_427edbd278567eb3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)0);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var5.get<uint16>());
}

// First occurrence: RenderStaticRings, line 336
static void exec_f9da5c42602ea13e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var3.get<uint16>());
}

// First occurrence: RenderStaticRings, line 342
static void exec_c03815fef0f71edd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() - var5.get<uint8>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var6.get<uint8>(), (uint8)context.getParameter<int64>(32)));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var8.get<uint8>(), (uint8)context.getParameter<int64>(40)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), var10.get<uint8>());
}

// First occurrence: RenderStaticRings, line 343
static void exec_c287fdb71328439e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: RenderStaticRings, line 343
static void exec_8709aad425cf7ffe(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), context.readValueStack<uint64>(-1));
	context.moveValueStack(-1);
}

// First occurrence: RenderStaticRings, line 344
static void exec_2cad6665501c5c90(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: RenderStaticRings, line 346
static void exec_e5cf76b74736ff64(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(6);
}

// First occurrence: RenderStaticRings, line 350
static void exec_d56a40ec58d9f5d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: RenderStaticRings, line 364
static void exec_9c94257c26926e63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: Character.Initialization.shared, line 188
static void exec_496e4440efb783f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: Character.UpdateNormalState.Sonic, line 265
static void exec_a81d647fc82d7315(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(1, (uint16)var5.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 270
static void exec_ae90b6259bdafbde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)!var0.get<uint16>());
	context.writeValueStack<uint32>(0, (uint32)var1.get<uint16>());
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 290
static void exec_e9d52a0a01650d2b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 299
static void exec_2f01b44ddd8e67b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)!var0.get<uint8>());
	context.writeValueStack<uint32>(0, (uint32)var1.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateNormalState.Sonic, line 299
static void exec_26173adafc179a0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(uint8)(context.readValueStack<uint16>(-1) >= (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint32>(-1, (uint32)var1.get<uint8>());
}

// First occurrence: Character.UpdateNormalState.Sonic, line 301
static void exec_ee73fc9b374e5a3f(const RuntimeOpcodeContext context)
{
	*context.getParameter<uint8*>(8) = (uint8)context.getParameter<int64>();
}

// First occurrence: Character.UpdateNormalState.Sonic, line 314
static void exec_60d61afe7b8607b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: Character.UpdateNormalState.Sonic, line 336
static void exec_1c19c76a9b8d28dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() ^ (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: Character.sharedUpdateOnGround, line 603
static void exec_bdbc269649c847ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: Character.sharedUpdateOnGround, line 606
static void exec_5f89a339a6d28d30(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)var0.get<int32>(), (int32)var2.get<int32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
}

// First occurrence: Character.sharedUpdateOnGround, line 608
static void exec_63850ed6406e7c47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: Character.sharedUpdateOnGround, line 609
static void exec_95a59915dc6c6e05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(2, *context.getParameter<uint8*>(16));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: Character.sharedUpdateOnGround, line 609
static void exec_cf9a98a057a8aa5d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, -(signed)var0.get<uint32>());
	context.moveValueStack(1);
}

// First occurrence: Character.sharedUpdateOnGround, line 609
static void exec_c6d2673aed6d40fc(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-2), context.readValueStack<uint32>(-1));
	context.moveValueStack(-2);
}

// First occurrence: Character.sharedUpdateOnGround, line 613
static void exec_a81e81b24a013125(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	const AnyBaseValue var6((int32)(var0.get<int32>() * var5.get<int32>()));
	const AnyBaseValue var8((int32)(var6.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: Character.sharedUpdateOnGround, line 615
static void exec_8ee055d1e45f91d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: Character.sharedUpdateOnGround, line 615
static void exec_3160ffe5d8fa7225(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: partialUpdateCharacterOnGround, line 650
static void exec_da07f982412b4ee1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: Character.UpdateSonicRollingInAir, line 674
static void exec_26ac9b2190c29547(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: Character.UpdateTailsUprightInAir, line 741
static void exec_4f9e8fb80fa46c1b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) >= (uint8)(context.getParameter<int64>())));
}

// First occurrence: UpdateTailsFlight_innerA, line 775
static void exec_7b5f4570a3820395(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(-1, (var0.get<uint8>() & var1.get<uint8>()));
}

// First occurrence: UpdateTailsFlight_innerA, line 775
static void exec_6a3342b34fd7f0ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerA, line 796
static void exec_ddb4e38e019c483e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerA, line 822
static void exec_7733120b840f4058(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: UpdateTailsFlight_innerA, line 825
static void exec_9bf7a33f2ef24038(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() <= var6.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerB, line 879
static void exec_88aacc035ec6ee2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateTailsFlight_innerB, line 883
static void exec_a377cba96cd89cfe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<float>(1, 0.000000f);
	context.writeValueStack<float>(2, context.getParameter<float>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: Tails.UpdateCarrySonic, line 907
static void exec_781fc6d2102af0de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Tails.UpdateCarrySonic, line 909
static void exec_dd6ee74aef2eeb6d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Tails.UpdateCarrySonic, line 914
static void exec_c3e35ac6f6779a51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: Tails.UpdateCarrySonic, line 925
static void exec_7761d9862f25417b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() != var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: Tails.UpdateCarrySonic, line 931
static void exec_2101822d562c6cd0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int64)0);
	const AnyBaseValue var6((uint8)(uint8)(var4.get<uint16>() != var5.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
}

// First occurrence: Tails.UpdateCarrySonic, line 941
static void exec_521a98ed04b2dc91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint16>());
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(16));
	context.moveValueStack(2);
}

// First occurrence: Tails.UpdateCarrySonic, line 941
static void exec_67cb7e2381b34f04(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int64>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: Tails.UpdateCarrySonic, line 945
static void exec_c31aacbda64631a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: Tails.UpdateCarrySonic, line 946
static void exec_8611028106bea520(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() | var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: Tails.UpdateCarrySonic, line 992
static void exec_a21fc516d6ff23fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint8>());
}

// First occurrence: Tails.CheckCatchSonic, line 1035
static void exec_4cc7f5f4ac574735(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: Tails.CheckCatchSonic, line 1050
static void exec_79b7f3d9e5b83ce1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: Tails.CheckCatchSonic, line 1051
static void exec_b5c54891c3094cab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint64>(0, (uint64)var10.get<uint16>());
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(40));
	context.moveValueStack(2);
}

// First occurrence: Tails.CheckCatchSonic, line 1058
static void exec_09a49c607d843db8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn01459e, line 1090
static void exec_78ebc7095f92e3e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: UpdateKnucklesGlide, line 1187
static void exec_f90093fbcce7b642(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) + (uint8)(context.getParameter<int64>())));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var1.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdateKnucklesGlide, line 1192
static void exec_24ea77b7babcebe4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)(context.readValueStack<uint8>(-2) - context.readValueStack<uint8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: UpdateKnucklesGlide, line 1199
static void exec_da793c154402d290(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: UpdateKnucklesGlide, line 1204
static void exec_03f040e80c2f5668(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: UpdateKnucklesGlide, line 1205
static void exec_ae50e50e2b4e9178(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	const AnyBaseValue var6((int32)(var0.get<int32>() * var5.get<int32>()));
	const AnyBaseValue var8((int32)(var6.get<int32>() >> (int32)(context.getParameter<int64>(20) & 0x1f)));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: UpdateKnucklesGlide, line 1206
static void exec_a6bd6157e2a6ba3b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(2, (uint8)(var6.get<int16>() >= (int16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1234
static void exec_eb91b3a083afaa88(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() > (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1255
static void exec_041eff2cd5d63928(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint16)1);
	const AnyBaseValue var11((uint16)(var9.get<uint16>() - var10.get<uint16>()));
	*context.getParameter<uint16*>(32) = var11.get<uint16>();
}

// First occurrence: UpdateKnucklesGlideCollision, line 1272
static void exec_694045c161b5b77f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() ^ (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: UpdateKnucklesGlideCollision, line 1297
static void exec_b1c8932ade47295c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint16)1);
	const AnyBaseValue var11((uint16)(var9.get<uint16>() + var10.get<uint16>()));
	*context.getParameter<uint16*>(32) = var11.get<uint16>();
}

// First occurrence: UpdateKnucklesGlideCollision, line 1337
static void exec_aaca8e8337ae3b7e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<float>(1, context.getParameter<float>(8));
	context.writeValueStack<float>(2, context.getParameter<float>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1344
static void exec_282e1308af534bfe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<float>(1, context.getParameter<float>(8));
	context.writeValueStack<float>(2, 0.000000f);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1364
static void exec_77359a2f5a7091d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: UpdateKnucklesGlideCollision, line 1365
static void exec_e265a221a63e9333(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1397
static void exec_6d66acb53c9cede7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: UpdateKnucklesGlideCollision, line 1407
static void exec_f6c48926d6120a74(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(2, *context.getParameter<uint8*>(16));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1407
static void exec_a582a91a39dfe89d(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-2), context.readValueStack<uint16>(-1));
	context.moveValueStack(-2);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1419
static void exec_38a7ba54d479715b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: UpdateKnucklesGlideCollision, line 1446
static void exec_5cb14d4fef8aad66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(2, (var6.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1454
static void exec_85032749f9de6aba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var9.get<uint16>());
}

// First occurrence: UpdateKnucklesGlideCollision, line 1480
static void exec_f6602a4426b1f61c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() < var4.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: UpdateKnucklesGlideCollision, line 1485
static void exec_69815c3e44ef5a1b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: UpdateKnucklesGlideCollision, line 1493
static void exec_6fafd5d7658b1261(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateKnucklesGlideCollision, line 1529
static void exec_a3ca840cf2c92ad2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() != var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn016d10_unified, line 1629
static void exec_ac4934c3463a9459(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint8>(2, (var6.get<uint8>() & var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn016d10_unified, line 1630
static void exec_f33eaf5247710792(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn016d10_unified, line 1633
static void exec_52ba0ec70b8cf349(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(28) = var8.get<uint16>();
}

// First occurrence: fn016d10_unified, line 1659
static void exec_0afe9e833c43ab34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn016d10_unified, line 1674
static void exec_b95f639077470455(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<int8>(0, ((int8)context.getParameter<int64>() * var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn016da8, line 1769
static void exec_a12427a39d800374(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() > var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn016e10, line 1798
static void exec_6e7f16590122bc99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int64>(-1));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn016e10, line 1819
static void exec_8fe41cd34544a28b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)0);
	*context.getParameter<uint16*>() = var0.get<uint16>();
}

// First occurrence: fn016e10, line 1830
static void exec_1d82d1edfaf0b093(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() + var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn016e60, line 1859
static void exec_7203c1f7971bfcd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() ^ var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn016efe, line 1887
static void exec_f3d50d4315fb6ff3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int32)(uint32)var3.get<int8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn016fa8, line 1911
static void exec_8364c2e1706050d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn016fa8, line 1912
static void exec_ca34ffa1607dd43c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: fn01793e, line 1929
static void exec_c4e3d5bb59adaff1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var4.get<uint8>());
}

// First occurrence: Character.CheckStartJump, line 2079
static void exec_af86d1236ba7230b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)-(signed)var0.get<uint8>());
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
}

// First occurrence: Character.CheckStartJump, line 2083
static void exec_a717ae90220f74fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: Character.CheckStartJump, line 2095
static void exec_f39199346c2f445a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() != (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, (uint16)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.CheckStartJump, line 2122
static void exec_a3c3c68eb38471fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: Character.CheckStartJump, line 2123
static void exec_45f028a5e26852e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var5.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: Character.CheckStartJump, line 2126
static void exec_bbc230e94703ecb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint16>());
}

// First occurrence: Character.CheckStartJump, line 2156
static void exec_bebb9224f1728dd4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: Character.CheckStartJump, line 2157
static void exec_db4633d1f5980845(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int8>(-1));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-2) + var0.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var1.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: Character.CheckStartJump, line 2163
static void exec_1bab9a6d0d2acd4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: UpdateMovementSimple, line 2183
static void exec_63db2f43c0eae86d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: centerCameraYOffset, line 2214
static void exec_5b7724d6f262bdce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() != (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: centerCameraYOffset, line 2216
static void exec_785ef84d48ce4230(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(2, (uint8)(var2.get<uint16>() < (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, var0.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: getRotationQuarter, line 2223
static void exec_8a6f44fa5595ac58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: getRotationQuarter, line 2224
static void exec_928023eca10bfda2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() < var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: getRotationQuarter, line 2226
static void exec_fcca7bc59c3e4339(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var0.get<uint8>());
}

// First occurrence: getRotationQuarter, line 2227
static void exec_83e44487144cfdf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: setSpeedCapProperties, line 2262
static void exec_5a6831a453b7d33a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(2);
}

// First occurrence: setSpeedCapProperties, line 2262
static void exec_99d1dd0b7ef16fde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: setSpeedCapProperties, line 2263
static void exec_fc75f214cbe11d17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: setSpeedCapProperties, line 2263
static void exec_6717bff7dae81c9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: setSpeedCapProperties, line 2272
static void exec_8a4a5cfbd94e57d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: Character.UpdateRotationOnGround, line 2345
static void exec_2290fa306bb7663f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)((uint8)context.getParameter<int64>() - var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: Character.updateRotationOnGround0x00, line 2392
static void exec_87ea0e29f004df85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<int16>(0, (uint16)var0.get<int32>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int16>(1, (uint16)var1.get<int32>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2408
static void exec_5a26e479b9a14a30(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int16>(0, (var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2408
static void exec_e6b0c95a4a33ebc9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int16>(-1));
	*context.getParameter<uint8*>() = var0.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2409
static void exec_b31f94a857e7de7a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: Character.updateRotationOnGround0x00, line 2411
static void exec_ffa3145b2900d4a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.updateRotationOnGround0x40, line 2492
static void exec_5e651ac6223716cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint16>());
	const AnyBaseValue var12((uint32)(var10.get<uint32>() ^ (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var12.get<uint32>();
}

// First occurrence: Character.updateRotationOnGround0x40, line 2494
static void exec_332c8e277c058a05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<int16>(0, (uint16)var0.get<int32>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int16>(1, (uint16)var1.get<int32>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: Character.UpdateControlInAir, line 2585
static void exec_677564dea381aa6a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: Character.UpdateControlInAir, line 2591
static void exec_7e39af121a149423(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlInAir, line 2601
static void exec_3bd1f42e4dda3bac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlInAir, line 2615
static void exec_909672816a755b4f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(4) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Character.UpdateGroundContact, line 2635
static void exec_76fab6a0573b9ac0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2642
static void exec_0fe3a87218b10e22(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() < (int8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2642
static void exec_e9d6fef2a0c2cef9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() >= (int8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateGroundContact, line 2644
static void exec_75ae9f3787958e6d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) < (uint16)(context.getParameter<int64>())));
}

// First occurrence: Character.UpdateGroundContact, line 2650
static void exec_78ebfd97a63ef64c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateUprightSlopeEffect, line 2672
static void exec_693a2a55dea9099d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var2((int32)(var0.get<int32>() * (int32)(context.getParameter<int64>())));
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var5.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: Character.UpdateUprightSlopeEffect, line 2675
static void exec_42eabd4040b3ec2b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: Character.UpdateRollingSlopeEffect, line 2688
static void exec_7f4c9645318f5323(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() >= var4.get<int16>()));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(uint8)(var6.get<int16>() >= var7.get<int16>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.updateJumpMoves, line 2797
static void exec_6a733b1acf6753d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.moveValueStack(2);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2832
static void exec_7924e96fcd1d29c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2872
static void exec_1dace5cad87bc1be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: onCharacterPressedJumpInMidAir, line 2876
static void exec_0a57eb309f21a85b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(uint8)(context.readValueStack<uint16>(-1) < (uint16)(context.getParameter<int64>())));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var1.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: SonicPressedJumpInMidAir, line 2904
static void exec_b1e20da9c7abd132(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: SonicPressedJumpInMidAir, line 2918
static void exec_93c965e5289d941b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() != var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: SonicPressedJumpInMidAir, line 2961
static void exec_7715e6a05752b408(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() > var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: SonicPressedJumpInMidAir, line 2961
static void exec_29dcc87dfa466a30(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: SonicPressedJumpInMidAir, line 3048
static void exec_666448cee6ed82ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, (uint16)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: TailsStartFlight, line 3097
static void exec_2aa11276f6b4ff17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: Character.performSuperTransformation, line 3173
static void exec_16149abcb5df6d97(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.cancelSuperTransformation, line 3318
static void exec_614bb170eea6026f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateRotationInAir, line 3345
static void exec_663b780bbce7177b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: Character.UpdateRotationInAir, line 3347
static void exec_4323de0c116c5832(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() - (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: Character.UpdateRotationInAir, line 3361
static void exec_c82af52f970153a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() < var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: Character.UpdateRotationInAir, line 3365
static void exec_c199d3a4f0b10466(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint8>());
}

// First occurrence: Character.UpdateRotationInAir, line 3366
static void exec_44ed642efb39f490(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() > var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: SonicUpdateRingCollection, line 3456
static void exec_fd5cf2b3499cb549(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: SonicUpdateRingCollection, line 3458
static void exec_0cecd13a62cd3e78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: SonicUpdateRingCollection, line 3464
static void exec_0d4c140dab9a56ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int64>() >= (int64)(context.getParameter<int64>())));
	context.moveValueStack(1);
}

// First occurrence: SonicUpdateRingCollection, line 3464
static void exec_0aca647eb403b805(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(1, (uint32)var1.get<uint16>());
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(2, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(3, (uint32)var3.get<uint16>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: SonicUpdateRingCollection, line 3478
static void exec_e65ece433c32d7b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)0);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var3.get<uint16>());
}

// First occurrence: SonicUpdateRingCollection, line 3492
static void exec_7e4b00e3850e8d27(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	const AnyBaseValue var4((int16)OpcodeExecUtils::safeDivide<int16>((int16)var2.get<int16>(), (int16)context.getParameter<int64>(12)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: SonicUpdateRingCollection, line 3494
static void exec_38ff38a0af82a1a8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: SonicUpdateRingCollection, line 3492
static void exec_d09a0bef627da8f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: SonicUpdateRingCollection, line 3498
static void exec_dda0977ef2f2aea3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: SonicUpdateRingCollection, line 3504
static void exec_b9282e0dd57e7605(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(1, (uint32)var1.get<uint16>());
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int32>(2, (uint32)var2.get<int16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int32>(3, (uint32)var3.get<int16>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: SonicUpdateRingCollection, line 3508
static void exec_c2f51b24363325f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(1, (uint32)var1.get<uint16>());
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(4, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(5, (uint32)var3.get<uint16>());
	context.writeValueStack<uint16>(6, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(7, context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.moveValueStack(8);
}

// First occurrence: SonicUpdateRingCollection, line 3524
static void exec_d8daa95c6a07ce4e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() != var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: CollectRing, line 3571
static void exec_6066391349ca8e09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: checkForExtraLifeByRings, line 3648
static void exec_050b5110c915660d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var3.get<uint16>());
}

// First occurrence: checkForExtraLifeByRings, line 3649
static void exec_6ea6392f25e59f06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: checkForExtraLifeByRings, line 3650
static void exec_4f3716bb06a6a92d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: gainExtraLife, line 3687
static void exec_d731a252f63aaa21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + var1.get<uint8>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: Character.WriteToPositionBackup, line 3714
static void exec_c9ab6e65e854cb79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	*context.getParameter<uint32*>(12) = var3.get<uint32>();
}

// First occurrence: Character.WriteToPositionBackup, line 3715
static void exec_c2bf74ba58045eb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: Character.WriteToPositionBackup, line 3720
static void exec_f299f6c58ed22d1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: ClearPositionBackup, line 3749
static void exec_fc8e84a3369e8160(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var3.get<uint16>());
}

// First occurrence: ClearPositionBackup, line 3751
static void exec_ab379646434fe49a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint32>());
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: ClearPositionBackup, line 3761
static void exec_7de97b715215e09f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var3.get<uint16>());
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: Character.checkForWaterSurface, line 3789
static void exec_d36039a9b33f6971(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() <= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.checkForWaterSurface, line 3798
static void exec_3469a8130662d7a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var7.get<uint8>());
}

// First occurrence: Character.checkForWaterSurface, line 3799
static void exec_ba8e417412a0a65c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() > var4.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: Character.checkForWaterSurface, line 3808
static void exec_1a34b9f9ecf08b8e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: Character.checkForWaterSurface, line 3861
static void exec_644c1c079c971a92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: UpdateMusicOnWaterTransition, line 3884
static void exec_f8ad56cb015b7a0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() <= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateSpindash, line 3980
static void exec_1ab2820362e3797d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateSpindash, line 4006
static void exec_70f38d6656dc8480(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() >> (uint16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: Character.UpdateSpindash, line 4015
static void exec_8b55711493d7dd03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: releaseSpindash, line 4059
static void exec_611228b58b3a0c47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: releaseSpindash, line 4060
static void exec_20b8217dadd52840(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: releaseSpindash, line 4064
static void exec_cc6a51e280fc92c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: releaseSpindash, line 4065
static void exec_9291bacd3c56da09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: releaseSpindash, line 4078
static void exec_d9ba46123ac948d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var0.get<uint16>());
}

// First occurrence: releaseDropDash, line 4102
static void exec_75ab39378792ab44(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) < (uint8)(context.getParameter<int64>())));
}

// First occurrence: releaseDropDash, line 4108
static void exec_0ddc9b4e0d597dd6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: releaseDropDash, line 4111
static void exec_a260f19f72369113(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)((uint8)context.getParameter<int64>() - var4.get<uint8>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: releaseDropDash, line 4138
static void exec_bf1a381d5b998d60(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), (uint16)context.getParameter<int64>());
}

// First occurrence: releaseDropDash, line 4147
static void exec_11d780706e72178b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(20) & 0x0f)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var6.get<uint16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.moveValueStack(2);
}

// First occurrence: releaseDropDash, line 4151
static void exec_f11a618846cdefe0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)1);
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (var5.get<int16>() & 0x0f)));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: releaseDropDash, line 4163
static void exec_75a71b09e0c6e2c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(20) & 0x0f)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(1, -(signed)var7.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: Character.updateSuperPeelout, line 4218
static void exec_1531e2b2c155f8f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: Character.updateSuperPeelout, line 4221
static void exec_6f17ad98f8ebe471(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::safeDivide<uint16>((uint16)var5.get<uint16>(), (uint16)context.getParameter<int64>(24)));
	context.moveValueStack(1);
}

// First occurrence: Character.updateSuperPeelout, line 4221
static void exec_416ed94adf86c2ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: releaseSuperPeelout, line 4259
static void exec_6490434f11e7dbbe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: releaseSuperPeelout, line 4259
static void exec_43ded8edfea808a8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) * (int16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: updateCharacterControlOnGround, line 4314
static void exec_a728115091db1f25(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (var2.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
}

// First occurrence: updateCharacterControlOnGround, line 4315
static void exec_9d582f6585c9bff1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (var4.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: updateCharacterControlOnGround, line 4331
static void exec_c633b86dc2c9d1ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: updateCharacterControlOnGround, line 4360
static void exec_115a9f78140bf4ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - var4.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: updateCharacterControlOnGround, line 4362
static void exec_372cbe8a4475a70f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + var4.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: updateCharacterControlOnGround, line 4373
static void exec_9c183a46176d8430(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(uint16)var8.get<uint8>());
	const AnyBaseValue var10((uint16)(var4.get<uint16>() - var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var10.get<uint16>());
}

// First occurrence: Character.updateUprightOnGroundInner, line 4597
static void exec_93d199ef8e8b47f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: Character.updateUprightOnGroundInner, line 4623
static void exec_c9ba5a95c58ac1fd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: checkForBalancing, line 4671
static void exec_2710be1d1cfc46d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	*context.getParameter<uint16*>(48) = var14.get<uint16>();
}

// First occurrence: checkForBalancing, line 4672
static void exec_818047571adf7859(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: checkForBalancing, line 4683
static void exec_e9d8f1456f0b2941(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: checkForBalancing, line 4756
static void exec_6c031fc0dc920b70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: checkForBalancing, line 4757
static void exec_f79d77d8dd3945ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int8>() < var1.get<int8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: checkForBalancing, line 4766
static void exec_a380004ab7f1da97(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4785
static void exec_8f75bf8c828de52a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) > (uint8)(context.getParameter<int64>())));
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4794
static void exec_270c08d293dbb20f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: Character.UpdateControlOnGroundShared, line 4809
static void exec_77d899438b6b2019(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var4.get<uint8>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4921
static void exec_519ebc75faedface(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var3.get<uint32>() + var10.get<uint32>()));
	const AnyBaseValue var13((int32)(var11.get<int32>() >> (int32)(context.getParameter<int64>(40) & 0x1f)));
	const AnyBaseValue var14((int16)(uint16)var13.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var14.get<uint16>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4925
static void exec_0e225a049d4d4e61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4926
static void exec_0bfd756ecae0c1c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4930
static void exec_98b9da050a1a7e42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint32>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4928
static void exec_ad75e3982876018b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() <= (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4928
static void exec_841a356d326e4287(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() < var1.get<int16>()));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4928
static void exec_bdd773f816d56e4c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(uint8)(var0.get<int16>() >= var3.get<int16>()));
	context.writeValueStack<uint32>(0, (uint32)var4.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4928
static void exec_e3621a04e0f96521(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4957
static void exec_6e53555d770287d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() <= var4.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: Character.CheckAgainstMoveBorders, line 4962
static void exec_a43cc1da35b96526(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() > var4.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 4987
static void exec_75af5824f9bb6b4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 5013
static void exec_80db3075a44c2b3a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 5014
static void exec_c6e67a9008014052(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects, line 5016
static void exec_a314e619f1262640(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5036
static void exec_71f17afe9c530c78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5040
static void exec_a9bf26482031a5e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5101
static void exec_a1e152abcc562b70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	*context.getParameter<uint32*>(28) = var7.get<uint32>();
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5102
static void exec_829a91c933d7e3c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5103
static void exec_cf5ab3fbc259646e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var4.get<uint16>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5107
static void exec_34c7d1745a2c0116(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Character.CheckCollisionsWithDynamicObjects_partial, line 5124
static void exec_da12d107479fe23f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint32>(1, (uint32)var1.get<uint16>());
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(3, *context.getParameter<uint16*>(24));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint32>(4, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint32>(5, (uint32)var3.get<uint16>());
	context.writeValueStack<uint16>(6, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.writeValueStack<uint16>(7, context.readLocalVariable<uint16>(context.getParameter<uint32>(44)));
	context.moveValueStack(8);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5158
static void exec_065ef4d73d233f3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5186
static void exec_b7e780c66f9044aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var8.get<uint16>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5188
static void exec_5452398580afb298(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) - (uint8)(context.getParameter<int64>())));
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5189
static void exec_6a8ec482e6915d68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >= (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5235
static void exec_37c642d2b8db2289(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint8)(var2.get<uint8>() << (var6.get<uint8>() & 0x07)));
	const AnyBaseValue var8((uint8)~var7.get<uint8>());
	const AnyBaseValue var9((uint8)(var1.get<uint8>() & var8.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var9.get<uint8>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5245
static void exec_d68610b6e806d45e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5282
static void exec_b7e065a6f3faea20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() < var1.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5285
static void exec_8e1182810c7221a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var11((uint8)(var9.get<uint8>() & (uint8)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var11.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5298
static void exec_749fd2141a7432b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) == var0.get<uint32>()));
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5316
static void exec_117c86dbc8afb773(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(uint16)var11.get<uint8>());
	const AnyBaseValue var13((uint16)(var7.get<uint16>() + var12.get<uint16>()));
	const AnyBaseValue var14((uint8)(uint8)(var3.get<uint16>() > var13.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), var14.get<uint8>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5318
static void exec_c95a41efdd65570c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(uint16)var11.get<uint8>());
	const AnyBaseValue var13((uint16)(var7.get<uint16>() - var12.get<uint16>()));
	const AnyBaseValue var14((uint8)(uint8)(var3.get<uint16>() < var13.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), var14.get<uint8>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5334
static void exec_eb7d25d86f02bdeb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var17((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var16.get<uint32>()));
	const AnyBaseValue var18((uint16)(uint16)var17.get<uint8>());
	const AnyBaseValue var19((uint16)(var13.get<uint16>() - var18.get<uint16>()));
	const AnyBaseValue var20((uint16)(var9.get<uint16>() - var19.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(64), var20.get<uint16>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5336
static void exec_ce91325c17e55c13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var17((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var16.get<uint32>()));
	const AnyBaseValue var18((uint16)(uint16)var17.get<uint8>());
	const AnyBaseValue var19((uint16)(var13.get<uint16>() + var18.get<uint16>()));
	const AnyBaseValue var20((uint16)(var9.get<uint16>() - var19.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(64), var20.get<uint16>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5342
static void exec_bd878d3da20317f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)OpcodeExecUtils::safeDivide<int16>((int16)var0.get<int16>(), (int16)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5379
static void exec_963d7c8665f85df6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Character.OnCollisionWithDynamicObject, line 5402
static void exec_e90ce40c4c17830b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(var0.get<uint8>() != var6.get<uint8>()));
	const AnyBaseValue var8((int64)0);
	context.writeValueStack<uint8>(0, (var7.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.OnThreatCollision, line 5446
static void exec_aed95c9773cac598(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() & var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: Character.OnThreatCollision, line 5471
static void exec_9773fce275c4d299(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() < var7.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.GettingHurt, line 5538
static void exec_caa161d9a198e730(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint8>(-1));
	*context.getParameter<uint32*>() = var0.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: getSoundIdByObstacleAddress, line 5611
static void exec_f1b5c94863185e25(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0103ba, line 5627
static void exec_3417cb4ba36d04d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn0103ba, line 5628
static void exec_02e335479b1c57e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0103ba, line 5630
static void exec_ea3dc5d6a4ad6504(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: UpdateShieldDeflecting, line 5654
static void exec_b8bd0ba95ef7738d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint32>(1, (uint32)var1.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint32>(2, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(24));
	context.writeValueStack<uint32>(3, (uint32)var3.get<uint16>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: UpdateShieldDeflecting, line 5671
static void exec_90a1a0d06ac97b45(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: deflectProjectile, line 5771
static void exec_80e0e589638283cd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint32)-(signed)var0.get<uint32>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>())));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: GetGroundAngle, line 5802
static void exec_0cebe5567cd5a3d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: GetGroundAngle, line 5804
static void exec_76b34292c22da408(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() - var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: Character.clearEnemiesOnScreen, line 5890
static void exec_bc36fca22e337470(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01052e, line 5942
static void exec_d0836bd24b95231c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint8)~var4.get<uint8>());
	const AnyBaseValue var6((uint8)(var1.get<uint8>() & var5.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn01059c, line 5974
static void exec_b0fe9bb24f978319(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) == var0.get<uint8>()));
}

// First occurrence: Character.CheckCollision, line 6006
static void exec_97b0c3c3541d89b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: Character.CheckCollision, line 6017
static void exec_4e5ef489a94d0027(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: Character.CheckCollision, line 6037
static void exec_4d80d31f35d446f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((int8)(uint8)var7.get<int16>());
	*context.getParameter<uint8*>(32) = var8.get<uint8>();
}

// First occurrence: Character.CheckCollision, line 6039
static void exec_19373ab023cddbfa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() < var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.CheckCollision, line 6045
static void exec_c531f706e23bed1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.LandingOnGroundStandUp, line 6252
static void exec_71453d301823a43c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() - var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: Character.LandingOnGroundStandUp, line 6254
static void exec_45ace57a29384a84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
}

// First occurrence: Character.LandingOnGroundStandUp, line 6255
static void exec_ce9b612cc767e92e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() >= (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Character.LandingOnGroundResetState, line 6284
static void exec_9b3af770ace07d58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, !var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: SonicLandingBubbleBounce, line 6315
static void exec_9c9133cb759372a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var0.get<uint16>());
}

// First occurrence: SonicLandingBubbleBounce, line 6319
static void exec_026ae436492d2327(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() - var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: SonicLandingBubbleBounce, line 6320
static void exec_82d3e958b18d43df(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: SonicLandingBubbleBounce, line 6327
static void exec_c8eb58764b86585f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	const AnyBaseValue var7((uint16)(context.readValueStack<uint16>(-2) + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var7.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: Character.CheckFloorCollision, line 6359
static void exec_7812c500b0189591(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: Character.updateBonusEffects, line 6432
static void exec_20ea7bf94e08bfbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Character.updateBonusEffects, line 6464
static void exec_d0421b8c5e8bcf85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var1.get<uint16>());
}

// First occurrence: Character.HurtCheckForStateChange, line 6629
static void exec_b0ff49359b36f5fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<int16>(-3) > var0.get<int16>()));
	context.moveValueStack(-2);
}

// First occurrence: UpdateSonicSpritePatterns, line 23
static void exec_51263396752a89af(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(1, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: UpdateTailsSpritePatterns, line 29
static void exec_f7a36aa68fdf6bba(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(1, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: updateCharacterSpritePatterns, line 65
static void exec_22a35f56589a0072(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 68
static void exec_9938a14ae91e44a6(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 70
static void exec_ccc67a2748363eb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: updateCharacterSpritePatternsInternal, line 72
static void exec_267db5a22cdf0c73(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
}

// First occurrence: updateCharacterSpritePatternsInner, line 77
static void exec_3d8ca5962e0edba2(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: updateCharacterSpritePatternsInner, line 79
static void exec_8d3d11f466d8c953(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	context.writeValueStack<uint16>(1, (var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: updateCharacterSpritePatternsInner, line 95
static void exec_4a6870eddbe39a71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fn018122, line 103
static void exec_eda303f0aa2f0556(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, *context.getParameter<uint8*>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(3, *context.getParameter<uint16*>(24));
	context.moveValueStack(4);
}

// First occurrence: UpdateSonicAnimation, line 123
static void exec_80b9302638d275b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var7.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateSonicAnimation, line 136
static void exec_8b873cc026c6eaf7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(1, (uint16)var5.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimationStanding, line 161
static void exec_173b929065a9f1e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() | var6.get<uint8>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: updateSonicAnimationRolling, line 195
static void exec_28c1dcd8d6b3b5e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimationRolling, line 195
static void exec_05b452b5c5dc7b2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) >> (int16)(context.getParameter<int64>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: updateSonicAnimation_shared, line 209
static void exec_2616fe342f324edc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var9.get<uint8>());
}

// First occurrence: updateSonicAnimation_shared, line 211
static void exec_b04bb59496da2b12(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)var3.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: updateSonicAnimation_shared, line 217
static void exec_7d2e8b30f8e67515(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	*context.getParameter<uint8*>(24) = var9.get<uint8>();
}

// First occurrence: updateSonicAnimation_shared, line 227
static void exec_8c602cbbb35484a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: updateSonicAnimation_shared, line 232
static void exec_2883ebf9a8dad9d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: updateSonicAnimation_shared, line 233
static void exec_b1d99f204b824ae8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: updateSonicAnimation_shared, line 234
static void exec_dda7c142fb339ba2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: updateSonicAnimationRunning, line 256
static void exec_68da0825fb3da1c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() > var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: updateSonicAnimationRunning, line 256
static void exec_06848dbbafb29ccb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() - var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: updateSonicAnimationRunning, line 258
static void exec_abf48dec9a573dde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)-(signed)var0.get<uint8>());
	const AnyBaseValue var2((int8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - var2.get<uint8>()));
	*context.getParameter<uint8*>(8) = var3.get<uint8>();
}

// First occurrence: updateSonicAnimationRunning, line 274
static void exec_d3e36fa8fc32ed1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (uint8)(context.getParameter<int64>(8) & 0x07)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: updateSonicAnimationRunning, line 287
static void exec_95c1e81746a77d14(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: updateSonicAnimationRunning, line 361
static void exec_9d7d7c62baf24d89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: updateSonicAnimationRunning, line 365
static void exec_8718c1086ef32501(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) >> (int16)(context.getParameter<int64>() & 0x0f)));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: updateCharacterAnimationRunning_shared, line 373
static void exec_47a9d177560169fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: updateCharacterAnimationRunning_shared, line 412
static void exec_3e77bfc386d0a366(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: updateSonicAnimationPushing, line 425
static void exec_93ff66d8e2b23275(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) >> (int16)(context.getParameter<int64>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: updateSonicAnimationPushing, line 438
static void exec_75bacf022edfa743(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: UpdateTailsAnimation_inner, line 492
static void exec_4634410fbab99fda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: UpdateTailsAnimation_inner, line 515
static void exec_fd13896e199d3bf2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: UpdateKnucklesAnimation, line 532
static void exec_e7d3bbc70a04287e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(1, (uint16)var5.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn012872, line 555
static void exec_7645cc727e5acb0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: fn012872, line 566
static void exec_22f57e3680c02dfe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: CompetitionMode.Character.UpdateAnimation.Sonic_Knuckles, line 661
static void exec_d597cf39c0eadc8e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint8)1);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() & var10.get<uint8>()));
	const AnyBaseValue var12((uint8)(var5.get<uint8>() | var11.get<uint8>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint8>());
}

// First occurrence: CompetitionMode.Character.UpdateAnimation.Sonic_Knuckles, line 675
static void exec_ce8c9b149325e137(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.Character.UpdateAnimation.Sonic_Knuckles, line 734
static void exec_b0f43c99d950fd58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint8*>(16) = var6.get<uint8>();
}

// First occurrence: CompetitionMode.Character.UpdateAnimation.Sonic_Knuckles, line 775
static void exec_9574ad4f1652f579(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: CompetitionMode.Character.UpdateAnimation.Sonic_Knuckles, line 814
static void exec_0be5a23a09aad16d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: CompetitionMode.Character.UpdateSpritePatterns.Sonic_Knuckles, line 843
static void exec_ba3761ae4edfd14d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(3, (uint16)var3.get<uint8>());
	context.moveValueStack(4);
}

// First occurrence: CompetitionMode.UpdateTailsAnimation_inner, line 962
static void exec_6dbd697338b7dc51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: CompetitionMode.updateTailsAnimation_shared, line 1068
static void exec_83b5d693cc0c3a4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint8*>(24) = var6.get<uint8>();
}

// First occurrence: CompetitionMode.updateTailsAnimation_shared, line 1076
static void exec_0248e7157eae4fba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn01607c, line 1107
static void exec_c78e3b7b4fe7c1e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn01607c, line 1108
static void exec_066896ea8a782f35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
}

// First occurrence: fn01607c, line 1110
static void exec_b19381570d74d04b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: getModdedPaletteLine, line 51
static void exec_cdda821090761b71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>() + var3.get<uint16>()));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: getModdedPaletteLine, line 52
static void exec_3ef3f66e30879284(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: getModdedPaletteLine, line 66
static void exec_e4b78a60d69d0f74(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() * (uint8)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() + var3.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: getModdedPaletteLine, line 66
static void exec_f44112206c6a1ba3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: loadCharacterPalette, line 75
static void exec_8a370ac05418bf29(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: loadCharacterPalette, line 135
static void exec_0bf5117c7348c192(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(12));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: loadCharacterPalette, line 142
static void exec_c61d30215e9d5ceb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: loadCharacterPalette, line 145
static void exec_1eac24c2e6be7717(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var6.get<uint32>());
}

// First occurrence: loadCharacterPalette, line 146
static void exec_84158be3eed761d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var8.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: loadCharacterPalette, line 153
static void exec_40bc507a493c74d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(28))));
	const AnyBaseValue var9((uint16)((uint16)context.getParameter<int64>(16) - var8.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var9.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 225
static void exec_dc745011679cfc5f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 232
static void exec_15d71394b56a2378(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 232
static void exec_a87e23139e09f1b2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) - var0.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var1.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 233
static void exec_11c5f9a98a30cff5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var5.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 241
static void exec_422c6e16f8ebb3e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeValueStack<uint32>(1, (var2.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 252
static void exec_7ee2e0f8085aa131(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(1, (var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 259
static void exec_8974662907df8984(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 261
static void exec_70f56a4fde641019(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)0);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var5((uint32)0);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.applyGeneral, line 262
static void exec_73304963978fff19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 290
static void exec_3e57595029873135(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) + var0.get<uint8>()));
	context.writeValueStack<uint64>(-1, (uint64)var1.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 290
static void exec_a512351ccae3542e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int64>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 299
static void exec_87652146278b3946(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm, line 300
static void exec_32a7a143b38be3c6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 353
static void exec_0e0397f07ce33a0d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 442
static void exec_22d58d4df75db7ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint8>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>())));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 443
static void exec_0e63cce4c9ff2525(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.originalVersion, line 464
static void exec_b5661499d7f0803b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(0, ((uint32)context.getParameter<int64>() + var1.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 509
static void exec_2d2bb82e3cfbc9ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var3.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 510
static void exec_d71bbcf07de5ed53(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var3.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var7.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 511
static void exec_31db6891b7a37096(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 513
static void exec_73dc565d998ccdf4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 514
static void exec_d41ed655438b0a45(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 1);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 520
static void exec_6f1eee623f3e87dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(4), var2.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 536
static void exec_3c1ad2561d57cd91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var3.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var7.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 557
static void exec_3577bc918e1c6882(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 559
static void exec_d5103bd25331500e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, *context.getParameter<uint8*>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(1, (var0.get<uint8>() - var1.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 561
static void exec_ff922b4a9eb1e8e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 562
static void exec_03ddb890ad564206(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((int16)OpcodeExecUtils::safeDivide<int16>((int16)var3.get<int16>(), (int16)var5.get<int16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 586
static void exec_e12189056b9feab4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - var2.get<uint8>()));
	const AnyBaseValue var5((int8)(var3.get<int8>() * (int8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int8)OpcodeExecUtils::safeDivide<int8>((int8)var5.get<int8>(), (int8)context.getParameter<int64>(24)));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var0.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var11((int16)(var9.get<int16>() * (int16)(context.getParameter<int64>(32))));
	context.writeValueStack<int16>(0, OpcodeExecUtils::safeDivide<int16>((int16)var11.get<int16>(), (int16)context.getParameter<int64>(40)));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(48));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 588
static void exec_93e5ded9a5cdf258(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 592
static void exec_a891ee4e3e4c10e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var1.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 593
static void exec_49d3decc6714b969(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 1);
	context.moveValueStack(4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.smoothedVersion, line 634
static void exec_c175181f1d6e8b88(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.UpdateSuperSonic.Smoothed, line 702
static void exec_ba0afea422ded9ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>())));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.UpdateSuperSonic.Smoothed, line 713
static void exec_c3f1ae1de886391a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.UpdateSuperSonic.Smoothed, line 714
static void exec_9c95dd84cf23a293(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 730
static void exec_a45d41fec75ca8be(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.moveValueStack(-4);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 732
static void exec_a7125d122fe3bb0d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint8>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>())));
	context.writeValueStack<uint64>(-1, (uint64)var2.get<uint32>());
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 732
static void exec_03c13652091b1336(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int64>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 735
static void exec_540531a8512b58f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendSonicKnux, line 735
static void exec_35445b65591db5d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + (uint8)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var8.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendTails, line 742
static void exec_b317952ab0f31856(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)0);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((uint32)0);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendTails, line 743
static void exec_b552743e6a1f0756(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.blendFlicky, line 760
static void exec_4a4fbd1a38474499(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var6.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 772
static void exec_ceeb0b48d6e0298e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint64>(0, (uint64)var2.get<uint16>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 773
static void exec_5953ad97cff509a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (uint64)var3.get<int16>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 777
static void exec_b1969f9020e02c42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint16>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 780
static void exec_8f5ffea53672a765(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 780
static void exec_0cc3832aae17b7e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 785
static void exec_d6ea3b74c600f267(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint8>());
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(4));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 787
static void exec_1b1d288586c0f88f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint32>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 792
static void exec_d5ceccf4acd31f03(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 798
static void exec_a21df5bc333f67a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var6.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 799
static void exec_554a61bed32c29ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(context.readValueStack<uint32>(-1) + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), context.readValueStack<uint16>(-2));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((int64)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var7.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 804
static void exec_202074e3bf781902(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint16>() == var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 807
static void exec_cb8c42b5ddaff56b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var8((uint32)(var5.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var4.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 812
static void exec_79f4123099c27a47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.moddingVersion, line 824
static void exec_aeed669ae1f7f676(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(4), var1.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 986
static void exec_e048047760077cfa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)0ull);
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), var0.get<uint64>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 988
static void exec_73a70b044167fa46(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 988
static void exec_93403525d59ba983(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint64>(0, (uint64)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 988
static void exec_c4c3dd390759d898(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() <= var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 992
static void exec_4cb1c981ed4b8d79(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 992
static void exec_8bed724c0ac60b03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	context.writeValueStack<uint64>(0, (uint64)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose, line 994
static void exec_25d344f78da7d1f9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1025
static void exec_49240dc8361c4038(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(uint16)var10.get<uint8>());
	const AnyBaseValue var12((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var6.get<uint16>(), (uint16)var11.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var12.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1026
static void exec_3d270d21aa6a8761(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var9((uint32)(var3.get<uint32>() + var8.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var9.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1027
static void exec_40fcd5a0343bec07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var6.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1028
static void exec_39ca18c53f577ebf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var6.get<uint16>(), (uint16)var8.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var9.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1032
static void exec_eed1cab3201f1778(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1036
static void exec_82bfbe7af64ff4ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() < var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1038
static void exec_4c54e8e7eadd6266(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1039
static void exec_6694b34fbe48dbf9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint8>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1045
static void exec_f3aabb2f363d8b31(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var6.get<uint16>(), (uint16)context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var8.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1046
static void exec_a695d250ad7be456(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1066
static void exec_efa441b91e49b83b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var5.get<uint16>(), (uint16)context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.smoothedVersion, line 1068
static void exec_48d155cdc2c269c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() - var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.moddingVersion, line 1094
static void exec_41f88871dd800fc9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint64>(-1, (uint64)var2.get<uint16>());
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(1);
}

// First occurrence: UpdatePaletteEffects.SuperForm.endpose.moddingVersion, line 1107
static void exec_98455b9f4af5eebc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: CompetitionMode.Character.BaseUpdate, line 20
static void exec_a7a17687c870c525(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.Character.BaseUpdate, line 48
static void exec_cef6d456d865e388(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)var3.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: CompetitionMode.Character.Initialization.Sonic_Knuckles, line 79
static void exec_6baec4f17c431d1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var5.get<uint16>());
}

// First occurrence: CompetitionMode.Character.UpdateNormalState.Sonic_Knuckles, line 145
static void exec_14138a1de7898468(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: CompetitionMode.Character.UpdateNormalState.Sonic_Knuckles, line 182
static void exec_8455326b66472234(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: CompetitionMode.Character.UpdateSpindash.Sonic_Knuckles, line 350
static void exec_954c89bc796b11c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: CompetitionMode.Character.UpdateSpindash.Sonic_Knuckles, line 353
static void exec_acab57db62087d9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() & (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint16)((uint16)context.getParameter<int64>() - var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(48));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn0133ae, line 596
static void exec_f7028c0f7fb8a139(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>())));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(-1, (var4.get<uint8>() == var5.get<uint8>()));
}

// First occurrence: Character.TailsAI.Update, line 83
static void exec_09dbdf9c974ed997(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	context.moveValueStack(2);
}

// First occurrence: updateTailsAssist, line 108
static void exec_1656548f610c2b4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: updateTailsAssist, line 112
static void exec_e9afa66c5b85d3f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: updateTailsAssist, line 131
static void exec_2a526fd50e5167ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() - var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: updateTailsAssist, line 132
static void exec_3e6c4819a6bce28d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: updateTailsAssist, line 133
static void exec_1bc6ca6d0d41e693(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 133
static void exec_cfad776e1d656841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= (int16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 152
static void exec_abd790380ebe4d10(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int16>(1, (var3.get<int16>() >> (int16)(context.getParameter<int64>(24) & 0x0f)));
	context.moveValueStack(2);
}

// First occurrence: updateTailsAssist, line 152
static void exec_e6e62453efc96197(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeValueStack<int64>(-1, 0);
}

// First occurrence: updateTailsAssist, line 155
static void exec_9e6345e7959cd613(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: updateTailsAssist, line 161
static void exec_c2912d352303b81a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: updateTailsAssist, line 167
static void exec_374510e86ec579a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), var2.get<uint8>());
}

// First occurrence: updateTailsAssist, line 208
static void exec_7c5969e76cf2f139(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn013b26, line 352
static void exec_acd432ccb0c8f0ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() != var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn013b26, line 366
static void exec_1267a58f319e7ce5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint16>());
	context.writeValueStack<uint8>(1, *context.getParameter<uint8*>(4));
	context.moveValueStack(2);
}

// First occurrence: fn013bf8, line 438
static void exec_2d20b38b6dfa1d06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn013bf8, line 439
static void exec_762a1ab4b48f47fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn013bf8, line 440
static void exec_bb57e33045d151f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var6.get<uint16>());
}

// First occurrence: fn013bf8, line 442
static void exec_ed21ebc42ab71b9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn013bf8, line 445
static void exec_1bfcfd9cfcce78af(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) >> (uint16)(context.getParameter<int64>() & 0x0f)));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(1);
}

// First occurrence: fn013bf8, line 446
static void exec_803ae4a49db87e9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)1);
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + var0.get<uint16>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn013bf8, line 478
static void exec_80a735b62f7c979b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((int16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: fn013bf8, line 482
static void exec_5cdb4aac8b00dbfe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int16>() > var4.get<int16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn013bf8, line 485
static void exec_619731bbe67cfa81(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var8.get<uint8>();
}

// First occurrence: fn013bf8, line 510
static void exec_e920cc3ec7f06231(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() & (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint16)(var5.get<uint16>() | var11.get<uint16>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn013d4a, line 550
static void exec_edb15e3049b5d81b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn013d4a, line 551
static void exec_2351cac5d2b76cb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: fn013d4a, line 553
static void exec_44557eec6730011e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
}

// First occurrence: fn013d4a, line 556
static void exec_ccfab636151912a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: fn013d4a, line 559
static void exec_dae544d0d42abd32(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() < (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn013d4a, line 564
static void exec_2d41fc9aab5c47be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: fn013d4a, line 584
static void exec_a9ed212d3a88b6ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var7((uint8)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() & var7.get<uint8>()));
	const AnyBaseValue var9((uint8)(var5.get<uint8>() | var8.get<uint8>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn013d4a, line 592
static void exec_a0d7ff917a52ee82(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn013d4a, line 595
static void exec_3e1fb4faa2cce859(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn013d4a, line 641
static void exec_debf217540bc8223(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int64)1);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() & var10.get<uint8>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var11.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn013efc, line 675
static void exec_aa1e0e91c0deb6fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn013f40, line 715
static void exec_08e6895ef7722247(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn013ffa, line 795
static void exec_76f4c88ec4e0f119(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var12((uint16)(var10.get<uint16>() & (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)(var5.get<uint16>() | var12.get<uint16>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16.get<uint32>(), var13.get<uint16>());
}

// First occurrence: fn01408a, line 817
static void exec_7598a6d250a024c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, !var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn014106, line 860
static void exec_0bed0099c2001c8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0162d8, line 18
static void exec_a83271a81e51952f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn0162d8, line 27
static void exec_6d333b51bc432144(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn016340, line 72
static void exec_b0803337701e5b87(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn016340, line 92
static void exec_ca2bb175013c51b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var9.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01640a, line 135
static void exec_c77a87d26114fc20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01640a, line 137
static void exec_30f02f5bd0e75851(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn0142e2, line 302
static void exec_afd06fb89c4e40b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) >> (uint16)(context.getParameter<int64>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn0142e2, line 303
static void exec_ba28ca9e19c8719d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: TailsTails.Update, line 50
static void exec_bcfe96017a0b45de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: TailsTails.Update, line 53
static void exec_88f8b6fbad61970f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: TailsTails.UpdateSpritePatterns, line 71
static void exec_08d03310cec1ed3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(5);
}

// First occurrence: CompetitionMode.TailsTails.Update, line 123
static void exec_b8963396a661c9ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn0181e8, line 74
static void exec_d34509a9b3285029(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0181e8, line 77
static void exec_61246b1ff21299af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(2);
}

// First occurrence: fn0181e8, line 89
static void exec_f90162fd93e70fab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn0182d2, line 127
static void exec_dd5d35cd668164d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn01841e, line 141
static void exec_9eff5021cb31a7e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(40), var10.get<uint32>());
}

// First occurrence: fn018466, line 165
static void exec_60c8118e60479fbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: fn018466, line 165
static void exec_119be59bc9aa1fd7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) * (int16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	context.writeValueStack<int8>(-1, (uint8)var3.get<int16>());
}

// First occurrence: fn018466, line 209
static void exec_c173b9f1c3c0d3a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & var0.get<uint32>()));
	const AnyBaseValue var2((int8)(uint8)var1.get<int32>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn018466, line 296
static void exec_311a82608a6deac0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)(context.readValueStack<uint32>(-2) + var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn018466, line 321
static void exec_ce706caa55953407(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int32>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn018466, line 336
static void exec_c65b3d927f9596f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: HUD.drawSprite, line 16
static void exec_fb3f2f7be20a6d9f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(12), context.readValueStack<uint64>(-4));
	context.moveValueStack(-4);
}

// First occurrence: HUD.drawSprite, line 18
static void exec_a7f1920642361c1b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: HUD.drawDigit, line 21
static void exec_31d8dbc5dce7116a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: HUD.drawDigit, line 23
static void exec_0bbe38328ead8e3c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: HUD.drawNumber, line 26
static void exec_fb1de40a6449fb9b(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(16), context.readValueStack<uint64>(-5));
	context.moveValueStack(-5);
}

// First occurrence: HUD.drawNumber, line 30
static void exec_221a790319376b86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(4)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var3.get<uint8>());
}

// First occurrence: HUD.drawNumber, line 31
static void exec_6e3e6cafe27ad577(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: HUD.drawNumber, line 33
static void exec_a9218e67f3df59a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: HUD.drawNumber, line 34
static void exec_165117a46d9185f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() == var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 89
static void exec_b218974fe4d3046e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
}

// First occurrence: RenderHUD, line 101
static void exec_3ca07a0c83255dd6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	context.writeValueStack<uint16>(-1, !var0.get<uint16>());
}

// First occurrence: RenderHUD, line 106
static void exec_887689a9a799a1d0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 108
static void exec_b9c77c5f78069e62(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	context.writeValueStack<uint32>(1, (var0.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: RenderHUD, line 113
static void exec_584dd224bfa6dcd0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 113
static void exec_2cb8ae55542a7873(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int32>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: RenderHUD, line 119
static void exec_fe4f710d29a4495e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var1.get<uint16>());
}

// First occurrence: RenderHUD, line 122
static void exec_01c865d4aa25d858(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint32>() < (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 125
static void exec_455d310f5832ac41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: RenderHUD, line 127
static void exec_7e60e60c1076d200(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: RenderHUD, line 130
static void exec_550e9d0cbd99b80b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var4.get<uint16>(), (uint16)context.getParameter<int64>(20)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var6.get<uint16>());
}

// First occurrence: RenderHUD, line 132
static void exec_cf92476e1d4e4ef9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 135
static void exec_d518dce80de3b1fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(2, (var5.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 137
static void exec_45f6edd1c9253a41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(2, (var5.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 138
static void exec_b1eebaf952621eca(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 162
static void exec_53875730df98f0b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: RenderHUD, line 166
static void exec_3d3cf4c4c02c511f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(0, (uint64)var0.get<int16>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)!var1.get<uint8>());
	context.writeValueStack<uint32>(1, (uint32)var2.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: RenderHUD, line 167
static void exec_2cfcb32e28fda70e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var1.get<uint32>());
}

// First occurrence: RenderHUD, line 169
static void exec_6c9100b522c241ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(4)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int32>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 179
static void exec_c94f0b2cdb880b9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)!context.readValueStack<uint8>(-1));
	context.writeValueStack<uint32>(-1, (uint32)var0.get<uint8>());
}

// First occurrence: RenderHUD, line 182
static void exec_1f1a6b7ba164966c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - var0.get<uint16>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
}

// First occurrence: RenderHUD, line 188
static void exec_9bce870128ac7e60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeValueStack<int8>(0, (uint8)var5.get<int16>());
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(1, (var6.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint16>(2, (var8.get<uint16>() + (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 190
static void exec_792907c0f0e28076(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	context.writeValueStack<int8>(0, (uint8)var3.get<int16>());
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, (var4.get<uint16>() + (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(2, (var6.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(4);
}

// First occurrence: RenderHUD, line 220
static void exec_5d5351bcec3ff48d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: UpdateTimeAndHud, line 263
static void exec_19f5936017d34271(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() != var1.get<uint8>()));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn00debe, line 444
static void exec_20091f3b97c66e80(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var5.get<uint32>());
}

// First occurrence: DebugModePositionDisplay, line 463
static void exec_527555eb7a22a88d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn00df1c, line 473
static void exec_39adaa8b558bad9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() > var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: refreshHudDisplayShared, line 515
static void exec_52e62030545b300f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	context.writeValueStack<uint32>(1, (uint32)var2.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: refreshHudDisplayShared, line 519
static void exec_540b5e74a5fbb2b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)var1.get<uint32>()));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var3.get<uint8>());
}

// First occurrence: refreshHudDisplayShared, line 520
static void exec_580c9304c69bd205(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)var1.get<uint32>()));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: refreshHudDisplayShared, line 534
static void exec_975dd6dcd37eeef8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int16>(0, (uint16)var0.get<int32>());
	context.moveValueStack(1);
}

// First occurrence: UpdateHudLivesDisplay, line 554
static void exec_781dadc6e49bb098(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateHudLivesDisplay, line 556
static void exec_98e7086f2075a000(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var3.get<uint16>());
}

// First occurrence: UpdateHudLivesDisplay, line 572
static void exec_d28be035019f32d5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var0.get<uint8>(), (uint8)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: fn02dae6, line 73
static void exec_dc65485b522eeeea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: fn02dae6, line 116
static void exec_761a759bf5385841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn02dbca, line 146
static void exec_75089a9ad7ab5fc5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn02dbca, line 156
static void exec_aaf671b3a1033d8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelResults.UpdateBonusCounting, line 237
static void exec_0a0ab157f6e7d107(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(1, 0.000000f);
	context.writeValueStack<float>(2, context.getParameter<float>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: fn02ddc6, line 435
static void exec_b72afcde1deab629(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() < (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn02ddc6, line 452
static void exec_40fd17843a3141f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn02ddc6, line 460
static void exec_05e930b1d75b793f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02ddc6, line 462
static void exec_ae3d7a7679ed7186(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(1, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	context.writeValueStack<uint16>(2, (var5.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(4);
}

// First occurrence: fn02ddc6, line 474
static void exec_cd4442c5f89fa17a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(4);
}

// First occurrence: fn02de04, line 489
static void exec_f885006a042e5bd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn02de04, line 490
static void exec_a80a39c1e395b673(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var6.get<int16>() >= var7.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02de04, line 503
static void exec_47e08384b0e7952d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02de04, line 506
static void exec_39ff7fa21a80d0bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)0);
	context.writeValueStack<uint8>(2, (var6.get<uint8>() != var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn02de04, line 513
static void exec_0a59572dc1d86040(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(5);
}

// First occurrence: fn02de50, line 527
static void exec_9506b7540844eb62(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn02de50, line 534
static void exec_846154b90dabf909(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: fn02de50, line 535
static void exec_7339e39af3e0a887(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>() - var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: fn02de50, line 537
static void exec_1fb9180d4932a861(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var11((uint16)(var8.get<uint16>() + var10.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var11.get<uint16>());
}

// First occurrence: fn02de50, line 541
static void exec_526d15be1bd06749(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint16)(var0.get<uint16>() + var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var10.get<uint16>());
}

// First occurrence: fn02de50, line 546
static void exec_6d831e49b1474260(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)((uint32)context.getParameter<int64>(4) - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var1.get<uint8>());
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var8.get<uint8>());
}

// First occurrence: fn02d5c6, line 27
static void exec_adb5decd53077286(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() == var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var7.get<uint8>());
}

// First occurrence: fn02d5c6, line 28
static void exec_6d04d32350038f51(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn02d638, line 71
static void exec_25e4f6f9d1e122e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: TitleCard.Init, line 75
static void exec_37c00d851684b4d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn02f77c, line 252
static void exec_86f61a498b35ccda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(12));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: StartLoadingPatternsForZone, line 320
static void exec_6c55e2cee78de3b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(1, (uint16)var2.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: TitleCard.TextElement.Init, line 380
static void exec_476d5d2bbafb9ba4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: TitleCard.TextElement.Update, line 412
static void exec_3b0bc00f58500f1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: fn05e6c0, line 28
static void exec_63a242df57b1e709(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05e890, line 198
static void exec_c9630ec594e1bf25(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: fn05ec4e, line 391
static void exec_66d7415c296884a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var9.get<uint32>();
}

// First occurrence: fn05ec4e, line 392
static void exec_fbd833a6dd2feb0f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn05ecb4, line 416
static void exec_83f4887e24257229(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var11((uint8)(var9.get<uint8>() & (uint8)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint8)(var5.get<uint8>() | var11.get<uint8>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint8>());
}

// First occurrence: fn05ecb4, line 433
static void exec_1474ce7d77e5d6de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn05ef68, line 486
static void exec_837d441b0d3846e7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fn05ef68, line 496
static void exec_c9ea62ac379ba8a1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == var1.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn05ef68, line 522
static void exec_b3be9e22e9793983(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn05f74e, line 746
static void exec_e541d3625775334d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	context.writeValueStack<uint32>(0, (var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	*context.getParameter<uint32*>(48) = var6.get<uint32>();
	context.writeValueStack<uint32>(1, (var6.get<uint32>() - (uint32)(context.getParameter<int64>(56))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(64));
	context.moveValueStack(3);
}

// First occurrence: fn05f85a, line 815
static void exec_db0074d0d441d67a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05fba0, line 903
static void exec_ffbda0e77c872627(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) != var0.get<uint8>()));
}

// First occurrence: fn05ff1c, line 1007
static void exec_687a8d63fe1f481b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn05ff6e, line 1043
static void exec_33c555eae4c87b6b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int8>(1, (uint8)var2.get<int16>());
	context.moveValueStack(2);
}

// First occurrence: fn05ffa6, line 1071
static void exec_565b25da6051e1d2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(8));
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<int8>(2, (uint8)var2.get<int16>());
	context.moveValueStack(3);
}

// First occurrence: fn086458, line 1106
static void exec_c32a584b187c8339(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn086458, line 1111
static void exec_01f78df5ad677896(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn086458, line 1112
static void exec_9d5325891646a189(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn08555e, line 1146
static void exec_e777eb75402d06b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() <= var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeOutColorUniform, line 1182
static void exec_dd44c5bd7a909a7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() & var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: FadeOutColorUniform, line 1190
static void exec_556e1836b91437f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(12) & 0x1f)));
	context.writeValueStack<uint32>(0, (var1.get<uint32>() & var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn05928c, line 54
static void exec_246a47953c99e520(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint32>());
}

// First occurrence: fn05928c, line 55
static void exec_79809547a96c4908(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn05b1a2, line 82
static void exec_ca644f70932a82e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)-(signed)context.readValueStack<uint16>(-1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn05b204, line 122
static void exec_a4a7c780038b1cfb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: fn05b204, line 123
static void exec_aa078441161bc682(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)swapBytes32(*context.getParameter<uint32*>(16)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn05b204, line 126
static void exec_158ceeacfbf2def4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() != var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b204, line 129
static void exec_d2188b222a7f9eee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fn05b204, line 134
static void exec_a4277e24f53dbc20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.moveValueStack(1);
}

// First occurrence: fn05b204, line 169
static void exec_0101515e0a1c0fe7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b2d6, line 231
static void exec_ce5e1be36248366b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn05b514, line 269
static void exec_a3e5e23ed9423a5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05b514, line 278
static void exec_04b7fa34704d7b4f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(24), var7.get<uint32>());
}

// First occurrence: fn05b514, line 301
static void exec_4737dce3c4c3d2ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), var0.get<uint32>());
}

// First occurrence: fn05b514, line 305
static void exec_fad713df42be2ad9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: fn05b514, line 305
static void exec_5a0deaac9bf3302c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) - context.readValueStack<uint32>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: fn05b514, line 309
static void exec_196b74fd56092377(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: fn05b514, line 313
static void exec_10886e629a335145(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(4));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<int8>() > var1.get<int8>()));
	context.moveValueStack(2);
}

// First occurrence: fn05b514, line 317
static void exec_1bda4e1d3b083fd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - var6.get<uint32>()));
	const AnyBaseValue var8((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)var7.get<uint32>()));
	const AnyBaseValue var9((uint32)1);
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + var9.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(28), var10.get<uint32>());
}

// First occurrence: fn05b514, line 320
static void exec_bd6fb0d542a54782(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((int32)(var5.get<int32>() * (int32)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint32)swapBytes32(*context.getParameter<uint32*>(28)));
	const AnyBaseValue var9((int32)OpcodeExecUtils::safeDivide<int32>((int32)var7.get<int32>(), (int32)var8.get<int32>()));
	const AnyBaseValue var10((uint32)(var2.get<uint32>() - var9.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(36), var10.get<uint32>());
}

// First occurrence: fn05b514, line 322
static void exec_b3a52d350e786923(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var4.get<uint16>());
}

// First occurrence: fn05b514, line 323
static void exec_8cdb97a5a322b546(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn05f986, line 884
static void exec_b18422ca106eefdc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() & var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05f986, line 899
static void exec_57a93417c34a63bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn05f986, line 904
static void exec_7ac5e9a3885970d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn05f986, line 913
static void exec_e4ad402d7c2da399(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn05f986, line 918
static void exec_a120e08ea780acea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn05f986, line 921
static void exec_9d2df21f5e4c50e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn05fa8c, line 955
static void exec_a542b8b962e5ed8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((int32)(uint32)var9.get<int16>());
	const AnyBaseValue var12((uint32)(var10.get<uint32>() << (uint32)(context.getParameter<int64>(40) & 0x1f)));
	const AnyBaseValue var13((uint32)(var3.get<uint32>() + var12.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var13.get<uint32>());
}

// First occurrence: fn05fa8c, line 962
static void exec_d971777d3ca49c2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn05fea8, line 990
static void exec_0d43a788eb9aa284(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(3, (uint16)var3.get<uint8>());
	context.moveValueStack(4);
}

// First occurrence: fn05fefe, line 999
static void exec_b89e1c2e9d599bf1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn05fefe, line 1000
static void exec_88c867da69e28406(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn05fefe, line 1001
static void exec_b1545b831d6020a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn05ffd4, line 1011
static void exec_2c07718e9e07aec6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn05ffd4, line 1012
static void exec_6453d09c001e4d08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn060038, line 1037
static void exec_47ff88f258c22cb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn05d9ee, line 176
static void exec_c134406df2f67328(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn05da74, line 225
static void exec_56ac2799c42abcf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn05ded4, line 405
static void exec_52e71aa36218b360(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn05df12, line 444
static void exec_f45e3b25cee0ab40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05dfb2, line 525
static void exec_3e9e1c6f8cf0efa4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05dfd8, line 539
static void exec_e822e3fb51f36c4f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05dbf6, line 570
static void exec_6043fabe4b463bf2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var2.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn05dc2c, line 593
static void exec_fd651928f923bf68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn05dc2c, line 608
static void exec_13533f6ba79d3097(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(var0.get<int8>() >= var1.get<int8>()));
}

// First occurrence: fn05dca6, line 638
static void exec_bfa6f12841a96248(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) <= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn05dca6, line 648
static void exec_29c3c46fd7a85af5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint16)(context.readValueStack<uint16>(-2) - var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn05dd34, line 672
static void exec_978652e0a08107ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn05dfee, line 794
static void exec_588649f81ca53015(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn05e3c0, line 1121
static void exec_1e8ebd80549a10af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint8>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: fn05e474, line 1211
static void exec_67c4c3ec411a0b34(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: fn05e504, line 1284
static void exec_f0d31cee686910e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn05e612, line 1373
static void exec_5cfc6894cd631041(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn05edac, line 1485
static void exec_939ec2680d12e046(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn05eec4, line 1573
static void exec_5d30deecaa9c3ee8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05fcfc, line 1945
static void exec_3f5f194feded8d87(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint32>());
}

// First occurrence: fn05fd16, line 1973
static void exec_f7f0768c4c6fccb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn05fe1e, line 2029
static void exec_e8df0e44b398f677(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn05fe48, line 2041
static void exec_0dd543b58ba88013(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn05fe48, line 2045
static void exec_f3313e227fbff725(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: LevelTilesAnimation, line 60
static void exec_4aa85ba763834200(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var7.get<uint32>();
}

// First occurrence: fn02788c, line 131
static void exec_f994433ca528d317(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() < var1.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn02788c, line 141
static void exec_ffe857540987a13a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(20) = var6.get<uint32>();
}

// First occurrence: fn02788c, line 145
static void exec_d5f7e3d574d809d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: fn02797e, line 178
static void exec_db24aecfc935dca4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: LevelTilesAnim.HCZ2, line 204
static void exec_8db89c3807929949(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: LevelTilesAnim.HCZ2, line 205
static void exec_d4aff603ad8b46fd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: LevelTilesAnim.HCZ2, line 207
static void exec_2dfa717e91d7af9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn027b34, line 290
static void exec_6da1f122619d1fb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: LevelTilesAnim.CNZ, line 377
static void exec_b8b9600eb1b306e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: LevelTilesAnim.ICZ, line 423
static void exec_b84a8089028506b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: LevelTilesAnim.ICZ, line 454
static void exec_6bc725b2ad2b258b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: LevelTilesAnim.ICZ, line 465
static void exec_e9054dc43e82a610(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: LevelTilesAnim.ICZ, line 467
static void exec_97309e42ad7299f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: LevelTilesAnim.ICZ, line 468
static void exec_d6b9947cfced47cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: LevelTilesAnim.ICZ, line 485
static void exec_c3ad2f3402463ea3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: LevelTilesAnim.LBZ1, line 504
static void exec_f7e70ac524beea67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (var1.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: LevelTilesAnim.LBZ1, line 509
static void exec_0a163e6ff0d0c576(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: LevelTilesAnim.LBZ1, line 567
static void exec_b7c03a7ada4d4c96(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() == var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: LevelTilesAnim.LBZ1, line 569
static void exec_596fa46618666e4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn027f66, line 656
static void exec_69adf6ef3dcae899(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var9.get<uint32>();
}

// First occurrence: LevelTilesAnim.MHZ, line 732
static void exec_91bfdf29f11436ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn028124, line 768
static void exec_c160818336e2159e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn028124, line 772
static void exec_f0055ea6c6c5a5bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn028124, line 794
static void exec_d35d8e49e13336ac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: LevelTilesAnim.SOZ1, line 812
static void exec_b17fabe288fcc77c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: LevelTilesAnim.SOZ1, line 835
static void exec_6b40e440b314e263(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: LevelTilesAnim.LRZ_shared, line 909
static void exec_c9ae2fc3c1774374(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: LevelTilesAnim.LRZ_shared, line 910
static void exec_37714e19d5ffbbff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var5.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var8((uint32)(var4.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn028364, line 958
static void exec_ab44cf1676a47a24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn0286ee, line 1106
static void exec_efb022d64941570f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn0286ee, line 1111
static void exec_9e2178b84638e510(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn0286ee, line 1122
static void exec_632003017436e2e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: UpdateCameraBoundsInLevel, line 62
static void exec_747363528f7962c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: UpdateCameraBoundsInLevel, line 68
static void exec_30e979c6d5a1c3e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraBoundsInLevel, line 77
static void exec_d894cf9d68d806a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateCameraBoundsInLevel, line 79
static void exec_f3bf7fe4ea795b53(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: UpdateLevelDisplay, line 197
static void exec_34c432b12e5e4a4c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: LoadTileContentInDirX, line 326
static void exec_d84d7b39678dc218(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: LoadTileContentInDirX, line 335
static void exec_72bd27f74bb96105(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int8>() >= var2.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: LoadTileContentInDirX, line 344
static void exec_3620da45cd860d7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(context.readValueStack<uint16>(-2) + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: LoadTileContentSingleRow, line 368
static void exec_3cd29d50066e5d6b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: LoadTileContentSingleRow, line 369
static void exec_283104e720c761af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: LoadTileContentSingleRow, line 371
static void exec_6f167dba3b7c9fba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: LoadTileContentSingleRow, line 377
static void exec_ef9d712f5de6a412(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: LoadTileContentSingleRow, line 379
static void exec_203422dc9f2321dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() << (uint16)(context.getParameter<int64>(4) & 0x0f)));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: LoadTileContentSingleRow, line 384
static void exec_0a367d04d20748f1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - var1.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fillPlanePatternsX, line 401
static void exec_dfedb981d3e480f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var2.get<uint32>() + var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var7.get<uint32>() > (uint32)(context.getParameter<int64>(28))));
	context.moveValueStack(1);
}

// First occurrence: fillPlanePatternsX, line 401
static void exec_71bc0007954dca1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(24)));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fillPlanePatternsX, line 405
static void exec_6af6c2ea2aff476e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(36));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fillPlanePatternsX, line 406
static void exec_d7a97c837ec9f52f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() | (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fillPlanePatternsX, line 413
static void exec_004c1f85ee4bca09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fillPlanePatternsX, line 414
static void exec_cffb0bdb2913dd61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var7.get<uint32>());
}

// First occurrence: fillPlanePatternsX, line 416
static void exec_6397fd867575d595(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint16>());
	const AnyBaseValue var10((uint32)(var4.get<uint32>() + var9.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var10.get<uint32>());
}

// First occurrence: fillPlanePatternsX, line 417
static void exec_b318d7a7955805b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(12) & 0x1f)));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint16>());
	const AnyBaseValue var12((uint32)(var6.get<uint32>() + var11.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var12.get<uint32>());
}

// First occurrence: fillPlanePatternsX, line 422
static void exec_30561e5ff12761e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() ^ (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var8.get<uint32>());
}

// First occurrence: fillPlanePatternsX, line 429
static void exec_a7afd602d86731bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() ^ (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint32>());
}

// First occurrence: fillPlanePatternsX, line 444
static void exec_3a21343d4d54800e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateChunkLinePointerX, line 460
static void exec_c5a418b856d01ca7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(4) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: UpdateChunkLinePointerX, line 467
static void exec_d748fc2f6fe3a5ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var5.get<uint32>());
}

// First occurrence: UpdateChunkLinePointerX, line 468
static void exec_c3d340934feea0bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint16>());
	const AnyBaseValue var9((uint32)(var2.get<uint32>() | var8.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var9.get<uint32>());
}

// First occurrence: UpdateChunkLinePointerX, line 469
static void exec_37febc0cafb9fdc3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), var2.get<uint16>());
}

// First occurrence: UpdateChunkLinePointerX, line 470
static void exec_e6eb036d08a09cb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint32)(var5.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: LoadTileContentInDirY, line 479
static void exec_e15ad0cb2800237c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & var2.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: LoadTileContentInDirY, line 497
static void exec_f2a49a6614c44ca1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: LoadTileContentSingleLine, line 572
static void exec_9547f89ea8192252(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(4) & 0x0f)));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: LoadTileContentSingleLine, line 576
static void exec_e317cd06a78dd5ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(12) & 0x0f)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() - var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var6.get<uint16>());
}

// First occurrence: LoadTileContentSingleLine, line 580
static void exec_517e64e3a5c3666e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: fillPlanePatternsY, line 607
static void exec_15b680f3cbf3088c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var8.get<uint16>());
}

// First occurrence: fillPlanePatternsY, line 609
static void exec_7e6a9be3524642f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fillPlanePatternsY, line 613
static void exec_5c443ff63168fd76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fillPlanePatternsY, line 614
static void exec_80d9d6b5b5864f85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(4) = var2.get<uint16>();
}

// First occurrence: FillPlanePatternsY_partial, line 622
static void exec_a93d6017eca79a70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
}

// First occurrence: FillPlanePatternsY_partial, line 628
static void exec_1baf61096f5b4cff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), var1.get<uint32>());
}

// First occurrence: FillPlanePatternsY_partial, line 633
static void exec_6b5bb766b2508b2c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() ^ (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var8.get<uint32>());
}

// First occurrence: UpdateChunkLinePointerY, line 670
static void exec_6fc035bb2d41e22f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: UpdateChunkLinePointerY, line 671
static void exec_7afd285ade6a7cee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: UpdateChunkLinePointerY, line 672
static void exec_57f3bfc30007b86c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var7.get<uint32>());
}

// First occurrence: fn04ec54, line 685
static void exec_80c6c889985a5d02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var2.get<uint32>() + var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var7.get<uint32>());
}

// First occurrence: fn04ec54, line 686
static void exec_f45ccd5144024ab1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(20));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint16>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() & (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var11((uint32)(var6.get<uint32>() + var10.get<uint32>()));
	*context.getParameter<uint32*>(36) = var11.get<uint32>();
}

// First occurrence: fn04ecaa, line 695
static void exec_ca4d6a2ae3531b94(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn04ecaa, line 704
static void exec_2fe2f70fb87fa43b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn04f0ce, line 781
static void exec_8ce66f345b51dba2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - var0.get<uint16>()));
	*context.getParameter<uint16*>() = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn04f0de, line 795
static void exec_6ec6dfbe65820865(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn04f0de, line 802
static void exec_12a5a8123fce39be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(uint8)(var2.get<uint16>() != var3.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: fn04f0de, line 817
static void exec_61898a3c1f07aa13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04f0de, line 835
static void exec_b6c3a9b65b81dec2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn04f0de, line 838
static void exec_c8274d2d2956f20d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var5.get<uint16>();
}

// First occurrence: Level.GetCameraPosition, line 884
static void exec_7f44fe765c57496f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn04ed62, line 909
static void exec_d97b9be6876ff6c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn04ee20, line 1038
static void exec_ccbd727d82ed538f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn04ee20, line 1085
static void exec_b5085999299ba7d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(32) & 0x0f)));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn04ee20, line 1101
static void exec_17deea19a068952c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn04ee8e, line 1121
static void exec_64ea4ae443bee658(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<int16>() >= var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04ef64, line 1160
static void exec_daeddbde92280a6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1179
static void exec_9d9a6ad89a41b650(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), context.readValueStack<uint32>(-5));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), context.readValueStack<uint32>(-6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), context.readValueStack<uint16>(-7));
	context.moveValueStack(-7);
}

// First occurrence: fillPlane_Default, line 1183
static void exec_b08aeb66a6150647(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var1.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: fillPlane_Default, line 1186
static void exec_c6131bf33e0494b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() >= var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1186
static void exec_eb875d381e28148c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() < var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1194
static void exec_99cebea1986b9aaa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < var2.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_Default, line 1196
static void exec_7139e0cb5b13bb83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() - var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var5.get<uint32>());
}

// First occurrence: fillPlane_Default, line 1197
static void exec_7179071a71fcc051(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), var1.get<uint32>());
}

// First occurrence: fillPlane_Default, line 1206
static void exec_e1f3b49ce9d480a2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.moveValueStack(5);
}

// First occurrence: fillPlane_DefaultUncropped, line 1209
static void exec_7f7a762e5d8f1268(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: fillPlane_DefaultUncropped, line 1212
static void exec_ea33f45b4baf66ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(1, (var6.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1216
static void exec_123a06f22dec9fa7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() <= var1.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fillPlane_DefaultUncropped, line 1223
static void exec_2e152e1b0311516f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var1.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() * (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var11((uint32)(var5.get<uint32>() + var10.get<uint32>()));
	const AnyBaseValue var12((int16)(uint16)var11.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var12.get<uint16>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1224
static void exec_c33ec0decc427a6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var1.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var9((uint16)1);
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + var9.get<uint32>()));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() * (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var13((uint32)(var5.get<uint32>() + var12.get<uint32>()));
	const AnyBaseValue var14((int16)(uint16)var13.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var14.get<uint16>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1228
static void exec_aa2e46fa6f12ce9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(4)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var4.get<uint32>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1230
static void exec_b6471208d7ac4796(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var9((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + var9.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var10.get<uint32>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1234
static void exec_08804e01cdc6e7f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1237
static void exec_56b4012be3eb045e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var10((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var13((uint32)(var9.get<uint32>() + var12.get<uint32>()));
	const AnyBaseValue var14((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(40)));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() * (uint32)(context.getParameter<int64>(44))));
	const AnyBaseValue var17((uint32)(var13.get<uint32>() + var16.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(52), var17.get<uint32>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1241
static void exec_c099785b8aedc4c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var7.get<uint32>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1243
static void exec_1077b6c417741741(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(uint8)(var2.get<uint16>() != var3.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1247
static void exec_e9708f65ad082b4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (var3.get<uint16>() & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var4.get<uint16>());
}

// First occurrence: fillPlane_DefaultUncropped, line 1250
static void exec_4798f257f139c1c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, (var7.get<uint16>() ^ var8.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1251
static void exec_bea4d5ff8145fb01(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint16>(1, (var9.get<uint16>() ^ var10.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1252
static void exec_0b2b9792150eb7f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint16>(1, (var9.get<uint16>() ^ var10.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fillPlane_DefaultUncropped, line 1253
static void exec_4e8565894b3cc730(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint16>(1, (var9.get<uint16>() ^ var10.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fillPlaneA_Default, line 1260
static void exec_cf3cd5f00cfefb3d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(5, swapBytes16(*context.getParameter<uint16*>(24)));
	context.writeValueStack<uint16>(6, swapBytes16(*context.getParameter<uint16*>(32)));
	context.moveValueStack(7);
}

// First occurrence: UpdatePaletteEffects, line 18
static void exec_01a101d08760e841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 113
static void exec_246b4720a6696b47(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>(8) + var1.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var2.get<uint16>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: LevelPaletteUpdate.AIZ1, line 130
static void exec_995eea736813ab81(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: LevelPaletteUpdate.AIZ2, line 157
static void exec_165d108912359770(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: LevelPaletteUpdate.AIZ2, line 158
static void exec_68fb88293010fc55(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var6.get<uint16>());
}

// First occurrence: LevelPaletteUpdate.HCZ1, line 193
static void exec_4d619d8b0f5223c1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + var2.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: LevelPaletteUpdate.CNZ, line 226
static void exec_fcec9241f7a237d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() != var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: LevelPaletteUpdate.CNZ, line 256
static void exec_c325c015861678c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint32>());
}

// First occurrence: LevelPaletteUpdate.FBZ, line 352
static void exec_0f3bba5ef1eeccce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: LevelPaletteUpdate.FBZ, line 355
static void exec_75739ed844a305d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)((uint8)context.getParameter<int64>() - var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var6.get<uint8>());
}

// First occurrence: LevelPaletteUpdate.FBZ, line 357
static void exec_5ce376fc9ea53ff1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var4.get<uint8>());
}

// First occurrence: LevelPaletteUpdate.FBZ, line 360
static void exec_08f186d1b67488ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() | var3.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(12), var4.get<uint8>());
}

// First occurrence: LevelPaletteUpdate.SOZ2, line 424
static void exec_30cd6552880a6a92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn04f03e, line 39
static void exec_69ff880d975234ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 82
static void exec_5c4c48b7922be4c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 85
static void exec_4faf98905a4912e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 92
static void exec_2c476c71176675cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(12) = var5.get<uint32>();
}

// First occurrence: updateVerticalScrollOffsetsDuringCollapse, line 93
static void exec_4708f1de3d26af78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>() = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn04f386, line 153
static void exec_70aae0a64fb365dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: UpdateScreenShake, line 209
static void exec_6d9f5fca551fd79c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: UpdateScreenShake, line 219
static void exec_a38f37a461ce46b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)OpcodeExecUtils::safeDivide<int16>((int16)var0.get<int16>(), (int16)context.getParameter<int64>(8)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 239
static void exec_98366b41233b81a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 246
static void exec_60afc1d284112fd0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var9((int16)(var7.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((int16)OpcodeExecUtils::safeDivide<int16>((int16)var9.get<int16>(), (int16)context.getParameter<int64>(32)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var11.get<uint16>());
}

// First occurrence: Level.UpdateHyperKnucklesScreenShake, line 260
static void exec_b6972f2369e7e8e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var5.get<uint16>());
}

// First occurrence: InitBoss, line 296
static void exec_0d80f59a5b969211(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var5.get<uint16>());
}

// First occurrence: InitBoss, line 300
static void exec_44bf05ea867cb349(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: InitBoss, line 303
static void exec_69318f2df7514f6f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: InitBoss, line 303
static void exec_82229582f193bf15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: TriggerNextZone, line 393
static void exec_5ea134326b27aaa7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint8>());
}

// First occurrence: UpdateWater, line 35
static void exec_90ca64758cee628a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn00717c, line 107
static void exec_e3e4512e6f309c76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn00717c, line 109
static void exec_4ac2a71651d7c5dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn00717c, line 119
static void exec_8dfa60d6e46c56c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0071e4, line 154
static void exec_23c89df8a99b3bd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0071e4, line 157
static void exec_5ec4a5c6ada18db6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: fn00730c, line 300
static void exec_39f3b4f2d8583e2a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn00730c, line 301
static void exec_a5afa475e1f9fdaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: fn00730c, line 306
static void exec_0ef5bfa1b2a740d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: fn00730c, line 358
static void exec_9f94400d015f5333(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() - (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var3.get<uint16>() + var10.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn00730c, line 364
static void exec_6af8b50d856356f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn006f90, line 422
static void exec_614087756e29413e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (var1.get<uint8>() & 0x07)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn006f90, line 431
static void exec_dd465b3bb678c5a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn006f90, line 439
static void exec_f780e4b7c083e9e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn006f90, line 450
static void exec_87d569b1936b2a85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: UpdateWaterSurfaceLevel, line 544
static void exec_5931ef6cb1050c86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel, line 546
static void exec_4c1d1842335f0355(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel, line 548
static void exec_aa0c575bf8def321(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() - var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var4.get<uint16>());
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 700
static void exec_2609a2c2bb6afdda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 700
static void exec_58b36d9b3e5ac54e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(-2, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: UpdateWaterSurfaceLevel.LBZ2, line 706
static void exec_c02833101a8df348(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn06852c, line 65
static void exec_2ddbf358cc5c3107(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06852c, line 69
static void exec_d9c63f81bdb2c534(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0502c6, line 18
static void exec_a7a4440600ba86d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn0502c6, line 27
static void exec_9e43729d005126de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: fn0502c6, line 31
static void exec_e38bae626727dfc5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn0502c6, line 32
static void exec_74fee3e95a41ad21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn050318, line 58
static void exec_8774d14ea29be2d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn050318, line 66
static void exec_487ded7a3070fa59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn050390, line 119
static void exec_5c0e4cfeca1778de(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.getParameter<uint32>());
	context.writeValueStack<uint32>(1, swapBytes32(*context.getParameter<uint32*>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn050390, line 119
static void exec_06b464d59c555a2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(context.readValueStack<uint32>(-2) - var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-3), var7.get<uint32>());
	context.moveValueStack(-3);
}

// First occurrence: fn050390, line 141
static void exec_7b9e607e3942e0ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (var3.get<int16>() & 0x0f)));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var5.get<uint16>());
}

// First occurrence: fn050390, line 146
static void exec_65804f3607d03e4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var7.get<uint16>());
}

// First occurrence: fn050390, line 149
static void exec_6d098b6063e50e1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn0504b4, line 239
static void exec_eab7ba39e6973176(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint16>());
	context.writeValueStack<uint64>(0, (var1.get<uint64>() + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0504f8, line 297
static void exec_52191e2377367059(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint32>());
}

// First occurrence: fn05057a, line 343
static void exec_1e653aeca1faa939(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn050586, line 351
static void exec_03ba4425c3d457e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn050586, line 352
static void exec_0b3e92428682f179(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn0505dc, line 382
static void exec_5ad42679c09f9967(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0505e4, line 399
static void exec_2e82bd2fb648c067(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn050614, line 414
static void exec_8190ce8688c68158(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn050632, line 428
static void exec_cc4dc231ecd54385(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() < var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn050632, line 435
static void exec_73dc4f8bb20ec210(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<int16>(-3) >= var2.get<int16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn050632, line 443
static void exec_06b3e93a4a1ed2ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint32>());
}

// First occurrence: fn050664, line 460
static void exec_b6275de5e6a5b2a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn05068a, line 476
static void exec_3dc1af8b3718f697(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn05068a, line 480
static void exec_99a113a8c9c0e971(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn050700, line 540
static void exec_afdf3adb60d0f1f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() <= (int32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0674ac, line 67
static void exec_39e6adf068744b30(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0674ac, line 75
static void exec_6c91fc46e3799d32(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn067900, line 480
static void exec_a40003662462c222(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn067900, line 492
static void exec_c014386ff85dfdc8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	const AnyBaseValue var5((uint16)(context.readValueStack<uint16>(-2) - var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var5.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn06795c, line 522
static void exec_28b4a519e11ef876(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn067a08, line 586
static void exec_3cc27b9a94626a05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var6.get<uint16>());
}

// First occurrence: fn067a20, line 606
static void exec_a187a959b7f13851(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn067a20, line 611
static void exec_f1e26092e1dfbb79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: InitLevelTiles.AIZ1, line 26
static void exec_bf6cafc518bcd6c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), (uint16)context.getParameter<int64>());
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var8.get<uint32>());
}

// First occurrence: UpdateLevelTiles.AIZ1, line 59
static void exec_ead159a3e923bdc9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (var3.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var4.get<uint16>();
}

// First occurrence: UpdateLevelTiles.AIZ1, line 61
static void exec_e6efad6ad5dc30b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateLevelTiles.AIZ1, line 65
static void exec_f185d5f2631a7647(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04f912_internal, line 108
static void exec_f4f9ebc30f81ab63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	*context.getParameter<uint32*>(28) = var9.get<uint32>();
}

// First occurrence: fn04f912_internal, line 109
static void exec_1f4b5cdace2745d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var7.get<uint32>();
}

// First occurrence: fn04fa0c, line 128
static void exec_104528c1ac0f9612(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn04fa0c, line 129
static void exec_4092319e6f200e03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: InitLevelScrolling.AIZ1, line 186
static void exec_db4f62a2355608c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn04fb68, line 269
static void exec_59b3055d4d34aa9c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn04fc46, line 367
static void exec_72638eae8072a536(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)swapBytes32(*context.getParameter<uint32*>(16)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var7((int32)(var5.get<int32>() >> (int32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn04fc46, line 368
static void exec_f9187e459e1b1a74(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn04fd62, line 516
static void exec_daceb95ba84885c5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: UpdateLevelTiles.AIZ2, line 632
static void exec_7b59a3e22fd9f69c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)(uint64)var0.get<int16>());
	context.writeValueStack<uint64>(0, (var1.get<uint64>() + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04ff3a, line 684
static void exec_e66117833568e125(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn04ff74, line 704
static void exec_302c249aef0373cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>()));
	const AnyBaseValue var3((uint32)(context.readValueStack<uint32>(-2) - var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var5.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: fn04ff74, line 705
static void exec_af8c2a3b37124a44(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn05011e, line 914
static void exec_5b5541f35c4748d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn01c46e, line 1107
static void exec_1ab30676a7dd5664(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: AIZ1a.checkPreBossArea, line 1320
static void exec_2ba28d9c9d3dd61d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: AIZ1a.checkPreBossArea, line 1340
static void exec_7f68b3f2a6434d0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)(uint64)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint64)(context.readValueStack<uint64>(-2) + var0.get<uint64>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int64>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn01c86a, line 1584
static void exec_e4d026c7e5c54592(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn239afe, line 1633
static void exec_0397c50d6c1d0545(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn239afe, line 1634
static void exec_fc682e4e2c973e52(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn239b0a, line 1642
static void exec_e5c9a2debe10e5fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint16>());
	const AnyBaseValue var13((uint32)(var11.get<uint32>() & (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var14((uint32)(var9.get<uint32>() + var13.get<uint32>()));
	*context.getParameter<uint32*>(48) = var14.get<uint32>();
}

// First occurrence: fn239e74, line 1651
static void exec_0e6f382eb1306372(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn239e9c, line 1707
static void exec_20a3b4a805c3ed68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn239e9c, line 1712
static void exec_f2352f71016fabb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn239f18, line 1799
static void exec_a8845b44daf7a265(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn239f18, line 1823
static void exec_7f8716b90fafd28d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	*context.getParameter<uint32*>(48) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var5.get<uint16>() - var11.get<uint16>()));
	*context.getParameter<uint16*>(64) = var12.get<uint16>();
}

// First occurrence: fn239f18, line 1830
static void exec_407eb7e21563ba2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)-(signed)var5.get<uint16>());
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn239f18, line 1835
static void exec_d64d256f2f35ce2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn23ab96, line 1869
static void exec_5a63e476c4693879(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn23ab96, line 1880
static void exec_eb9fdf862fa5a800(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn23ab96, line 1881
static void exec_1258a726b814be21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn23ab96, line 1882
static void exec_73760ae4c1e9f08f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: fn23ab96, line 1883
static void exec_b7724b41a913fcfc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: fn23ab96, line 1888
static void exec_2506b1b450667581(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() ^ (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: fn23afd2, line 1940
static void exec_130275f9b3e1475a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(16));
	context.moveValueStack(3);
}

// First occurrence: fn23afd2, line 1948
static void exec_a577d6ac8c4571e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn23afd2, line 1963
static void exec_1f89824b56b010f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), context.readValueStack<uint16>(-1));
	context.moveValueStack(-1);
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1985
static void exec_594e5b947254b3cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1990
static void exec_11ab7a68d7eaa6a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1992
static void exec_b3eca63d8cb13db4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 1993
static void exec_71f776bce851b313(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2002
static void exec_af1f9c4b0050f7a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2005
static void exec_1fc9f0e80fa6f846(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (var1.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: UpdateBackgroundScrolling.AIZ1, line 2012
static void exec_ce68d88b1c44b2e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2048
static void exec_9721df5077fcb539(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2058
static void exec_6322e2dff40ac6ac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateForegroundScrolling.AIZ1, line 2059
static void exec_532bfb5b304b473e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn23b152, line 2071
static void exec_f778e3e57cb7680c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: fn23b152, line 2071
static void exec_c0d1d48d13b74ed1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	*context.getParameter<uint32*>() = var0.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn23b17a, line 2086
static void exec_4dda0b6ca5d86428(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn23b17a, line 2092
static void exec_fc47b4a15996514b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn23b17a, line 2097
static void exec_42484f7e46e14515(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn23b626, line 2108
static void exec_160ed8f2446a1a7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((int16)1);
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (var3.get<int16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn23b626, line 2109
static void exec_04dbef004482eb3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn23b626, line 2114
static void exec_d7ee09ed17de5493(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (var4.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn23b626, line 2115
static void exec_10fd07f1a48e9116(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn23b626, line 2126
static void exec_43968ddb4934a729(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn23b626, line 2130
static void exec_3610a69c81eadd27(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var3.get<uint16>());
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var9((int64)1);
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var10.get<uint16>());
}

// First occurrence: fn23b680, line 2144
static void exec_941e04bf21e40b09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn23b680, line 2147
static void exec_14eaed03d219c161(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn23b680, line 2153
static void exec_5d156d15394459af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn23b680, line 2185
static void exec_657ade972dfdd81b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn23b680, line 2199
static void exec_c86265456557c2c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn02fda4, line 30
static void exec_fc37fc131bc81371(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn02fe34, line 65
static void exec_907164de09de55f2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 1);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(6);
}

// First occurrence: fn02fe5e, line 104
static void exec_ed79934cbccf6dd5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint64>(-1, (uint64)var4.get<uint16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int64)1);
	context.writeValueStack<uint8>(0, (var8.get<uint8>() == var9.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02fe5e, line 111
static void exec_ad2b412ce37ca663(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn02fe5e, line 122
static void exec_b156c35c31624dc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn02fe5e, line 124
static void exec_4f0c542343ac22b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(3);
}

// First occurrence: fn02fe5e, line 126
static void exec_196de57a5f623600(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (var0.get<uint16>() - var1.get<uint16>()));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, 1);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: InitLevelScrolling.HCZ1, line 37
static void exec_6d5ac72d3efa97ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateBackground.HCZ1, line 245
static void exec_404bd7fa5f9c5ea3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: UpdateBackground.HCZ1, line 247
static void exec_e23a9eaf81d3100a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ1, line 267
static void exec_91150785412f568f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>(8) - var3.get<uint16>()));
	const AnyBaseValue var5((int16)OpcodeExecUtils::safeDivide<int16>((int16)context.getParameter<int64>(), (int16)var4.get<int16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ1, line 268
static void exec_95f02644d544fb47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(20)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	context.writeValueStack<int8>(2, (uint8)var5.get<int16>());
	context.writeValueStack<uint32>(0, var0.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: UpdateBackground.HCZ1, line 268
static void exec_6728757906159f77(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)var0.get<int32>(), (int32)var2.get<int32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	const AnyBaseValue var5((uint16)(context.readValueStack<uint16>(-2) + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var5.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: UpdateBackground.HCZ1, line 271
static void exec_153d4232c19457f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: UpdateBackground.HCZ1, line 297
static void exec_0504468377c3c432(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.HCZ1, line 305
static void exec_921e75e300a76f14(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var9.get<uint32>();
	const AnyBaseValue var11((uint32)(var9.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var6.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ1, line 311
static void exec_862a1fde08c96529(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.HCZ1, line 320
static void exec_5acf3ca1f047c623(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var9.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ1, line 332
static void exec_fef33ddc53f3e7db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ1, line 333
static void exec_d93c95488a8ff04c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: UpdateBackground.HCZ1, line 389
static void exec_28b0f1f05628cc99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn01c8b8, line 432
static void exec_868daa2420e8f2bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn01c8b8, line 435
static void exec_d276465d32b64a98(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn050ff0, line 702
static void exec_88a0dc2c5fcd8207(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn050ff0, line 723
static void exec_c50fb8214a9f0eeb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn050ff0, line 732
static void exec_7d4a72705f418c6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: UpdateBackground.HCZ2, line 749
static void exec_eabc4ab1234c36ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int32)1);
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (var1.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: UpdateBackground.HCZ2, line 757
static void exec_73f6bbd09102e8ac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: UpdateBackground.HCZ2, line 772
static void exec_99e686bb7520ed79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var8.get<uint16>());
}

// First occurrence: fn05127c, line 171
static void exec_5558a2300e6c4172(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint16>() == var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateBackground.MGZ1, line 208
static void exec_a9cfc6903d548e5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackground.MGZ1, line 213
static void exec_5f9f24b72497d3a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: UpdateBackground.MGZ1, line 214
static void exec_ffe9e910ca78321d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackground.MGZ1, line 215
static void exec_abac98fd86ed1d77(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn01c930, line 243
static void exec_f6fff0c42c1e1551(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn01c96e, line 257
static void exec_571c8f5b7de96e9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) & (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn05134c, line 417
static void exec_de987e1ec2803a82(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn05134c, line 496
static void exec_7b86b9d026c78aa5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05134c, line 501
static void exec_99bceb67975a5dd4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint32>());
}

// First occurrence: fn05134c, line 524
static void exec_8b5b817fb3f9742b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05134c, line 528
static void exec_7810df2e34ea75d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn051560, line 672
static void exec_dfef88008b622fda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-3) + var0.get<uint16>()));
	*context.getParameter<uint16*>() = var1.get<uint16>();
	context.moveValueStack(-3);
}

// First occurrence: fn051560, line 673
static void exec_6d3f972d3ee37ea4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0515a4, line 703
static void exec_a56c82f3733df7f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0515a4, line 703
static void exec_fe9aad1ce0c07f78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05160e, line 738
static void exec_5984a79dae39372d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0516d2, line 868
static void exec_cb7427fc03a19057(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, (uint16)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn051762, line 933
static void exec_974d37f5eede68d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn051762, line 938
static void exec_0b91dbdb2094c227(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn051762, line 939
static void exec_5b87f1e7a5306f6b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn0517ea, line 990
static void exec_cfbffcd799caea23(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn05180a, line 1011
static void exec_5b171ee5145a80dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn051926, line 1170
static void exec_6d1f81a6b36f5451(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn051926, line 1173
static void exec_326d7877fe615050(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(2, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.moveValueStack(3);
}

// First occurrence: fn0519b2, line 1231
static void exec_11f464f1d88a28f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn051a04, line 1297
static void exec_3077085434742c6a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn051a04, line 1299
static void exec_1d7655cc6e72c9ac(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(4);
}

// First occurrence: fn051a04, line 1300
static void exec_56ffa6670211f5ac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - var0.get<uint16>()));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: fn051b1c, line 1491
static void exec_d2c8d2bce559f0aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn23d1fc, line 1561
static void exec_79ca483cc2fe0f63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn23d1fc, line 1562
static void exec_abffa46d33deedc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn23d220, line 1582
static void exec_6f3a35881b7a65b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn23d24c, line 1631
static void exec_5b941eda673e8aeb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn23d24c, line 1641
static void exec_94384b81b88ddd34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn06d104, line 19
static void exec_6e3760bdc3027a17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var5.get<uint32>());
}

// First occurrence: fn06d104, line 26
static void exec_347baf8b2fda97ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var7.get<uint32>());
}

// First occurrence: fn06d104, line 29
static void exec_82ad9edc86a976eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	context.writeValueStack<int16>(2, (var11.get<int16>() * (int16)(context.getParameter<int64>(32))));
	context.moveValueStack(3);
}

// First occurrence: fn06d104, line 47
static void exec_8a79e03e3efee25e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn06d3e2, line 911
static void exec_4c792f23e56965fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (var5.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn0622e4, line 67
static void exec_a996b20967107758(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var2.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn06237c, line 131
static void exec_adf49152e15145a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint32>());
}

// First occurrence: fn062480, line 195
static void exec_6ada4a533e41d1c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: UpdateLevelTiles.CNZ1, line 56
static void exec_cde6f866f8d5c955(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: UpdateLevelTiles.CNZ1, line 62
static void exec_c027a83b7895c663(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: UpdateLevelTiles.CNZ1, line 63
static void exec_d23ee195742a3fd1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: UpdateLevelTiles.CNZ1, line 76
static void exec_efda31114d6e4aaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateLevelTiles.CNZ1, line 78
static void exec_be66e135eaa80f71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdateLevelTiles.CNZ1, line 79
static void exec_6ed0609dc8a0be26(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint32>());
}

// First occurrence: UpdateLevelTiles.CNZ1, line 102
static void exec_1df228daf049c692(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint16>());
	const AnyBaseValue var10((uint32)(var7.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: UpdateLevelTiles.CNZ1, line 104
static void exec_01758c4430b2a22d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() != var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn051d82, line 329
static void exec_d6229947a07aea0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: UpdateBackground.CNZ1, line 470
static void exec_78c4df115c2924e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint16>());
}

// First occurrence: UpdateBackground.CNZ1, line 472
static void exec_c69f964f8a93fb9e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() - var3.get<uint32>()));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn051fb0, line 501
static void exec_b83c86d4d1a6a768(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn05215a, line 630
static void exec_1ae1ae6be286bc8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn051ff0, line 853
static void exec_6e21b4e971a10683(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() - var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn052066, line 911
static void exec_bc4a2605dde69d1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() > (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn03969e, line 245
static void exec_1beb7c17394291f5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(3, (uint16)var3.get<uint8>());
	context.moveValueStack(4);
}

// First occurrence: fn0539ac, line 183
static void exec_843d7d4b0fbbd7c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn0539ac, line 187
static void exec_21932fcfb1b39a11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)swapBytes32(*context.getParameter<uint32*>(16)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn0539ac, line 188
static void exec_13889cd85b9654c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn23de96, line 388
static void exec_82d1f2b41c2476de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)0);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: fn23de96, line 400
static void exec_1a3cc7b476c7ac72(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)0);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: InitLevelScrolling.ICZ2, line 821
static void exec_7e1abfa03a4afeff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), var3.get<uint16>());
}

// First occurrence: fn053d78, line 866
static void exec_924f3a26845e890a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1033
static void exec_4f365bd3ca064f5d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1043
static void exec_223464a19f580195(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1046
static void exec_6fc8592aabc1fa9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var1.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1047
static void exec_543b76c2b1c6763b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)((uint32)context.getParameter<int64>() - var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1048
static void exec_30104b8f99b96d15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var4.get<uint16>(), (uint16)var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1051
static void exec_87dd255a82fbd7f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.getParameter<int64>(8), (uint16)var3.get<uint16>()));
	const AnyBaseValue var5((uint16)(var1.get<uint16>() * var4.get<uint16>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1054
static void exec_3ed37003692af5ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>(4) - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1068
static void exec_b16827877b8a9bd8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>(16) - var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Outdoors, line 1088
static void exec_cf0edd221965082b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackgroundScrolling.ICZ2.Indoors, line 1104
static void exec_39083720d57cac6f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn08cbf2, line 94
static void exec_493141b02f507fbd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) > var0.get<uint8>()));
}

// First occurrence: fn08cc5a, line 139
static void exec_4e89900caf843ad1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-2, (uint8)(var2.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(-1);
}

// First occurrence: fn08d12c, line 369
static void exec_59e0397fed46ca06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn062778, line 515
static void exec_3b199341809a0ee5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var5.get<uint16>(), (uint16)context.getParameter<int64>(24)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fn062778, line 522
static void exec_78d3936ccee9c957(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((int16)(var7.get<int16>() >> (int16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn062778, line 524
static void exec_55c92cd19a9409a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(20)));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>() + var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn062778, line 524
static void exec_5c5b3a9d2e0ae336(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn08cdf2, line 791
static void exec_015ec2930a0e11e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn08ceae, line 806
static void exec_ab37050bceda52d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn08d53e, line 327
static void exec_35cd9955b9b943dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn062964, line 423
static void exec_ab5a9d63b3ec4478(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0629a8, line 445
static void exec_1f5e5ca8a304ce7b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0629ce, line 470
static void exec_4c0259d79c8a972c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: fn0629ce, line 471
static void exec_3de98df80f3f0f25(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn062a28, line 509
static void exec_7e3480c5e5920e44(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: fn05480c, line 548
static void exec_2a3d11cf1ee63edf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - var7.get<uint16>()));
	*context.getParameter<uint16*>(40) = var8.get<uint16>();
}

// First occurrence: fn05480c, line 559
static void exec_e54b26b8f8811b5f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn05480c, line 681
static void exec_bf588669877909f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	*context.getParameter<uint32*>(48) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn05480c, line 702
static void exec_60d4f4f3919d4ec4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn05480c, line 708
static void exec_8e3f655a7a4b73a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(var1.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn0549c6, line 722
static void exec_15f6b663fac3f56d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn0549c6, line 746
static void exec_58af3f26aa1e7045(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0549c6, line 763
static void exec_4760e73e0b5638f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn0549c6, line 764
static void exec_5c6e7664d6d4646e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn0549c6, line 783
static void exec_dfc2a7d39f0735af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn072c0a, line 109
static void exec_5283f39ad5be51b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn072c0a, line 127
static void exec_0a4ff064e08eb916(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint8)(var1.get<uint8>() | var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var5.get<uint8>());
}

// First occurrence: fn072cda, line 190
static void exec_0bed52a69206ffb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn072d92, line 272
static void exec_de6e6de26da5e9ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn072e54, line 389
static void exec_b95350a996725348(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn072ef8, line 422
static void exec_f566d4162c3408c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn039b46, line 126
static void exec_9533d755290f6305(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: InitLevelTiles.LBZ1, line 38
static void exec_53ada0656dbbd6b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & var6.get<uint16>()));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn0540d0, line 72
static void exec_474e16bd899f6e99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn0540d0, line 83
static void exec_2d603596bc575cbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn054146, line 111
static void exec_193d0575299571b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var6.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: InitLevelScrolling.LBZ1, line 127
static void exec_7e84cb5f79d0e650(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: UpdateLevelTiles.LBZ1, line 171
static void exec_626728d8c20f250a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint8>());
}

// First occurrence: UpdateLevelTiles.LBZ1, line 224
static void exec_97f706b4143710a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint16>());
	const AnyBaseValue var2((uint64)1ull);
	const AnyBaseValue var3((uint64)(var1.get<uint64>() >> (var2.get<uint64>() & 0x3f)));
	context.writeValueStack<uint64>(0, (var3.get<uint64>() + (uint64)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn053ff8, line 324
static void exec_43f0981aedac7b76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn053ff8, line 331
static void exec_135610c3b05879cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn053ff8, line 332
static void exec_00bae4df9caeaaf2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: fn053ff8, line 370
static void exec_439869a2fdd196bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 520
static void exec_9501a010250118b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 525
static void exec_4de4504c0b8d34c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: LoadTileContentInDirY.LBZ1, line 528
static void exec_6caa8d9cb2801012(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(12) = var3.get<uint32>();
}

// First occurrence: fn04ef46, line 604
static void exec_1cf5150d116861ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn23e458, line 636
static void exec_3bb6c42e4dc32264(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn23e4d0, line 736
static void exec_4f297e8c8f7d75b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	*context.getParameter<uint32*>(48) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn23e756, line 970
static void exec_d6c7173106f3cda9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() + var3.get<uint32>()));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn0543a2, line 1029
static void exec_4fe649c6e18e823d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var6.get<uint8>());
}

// First occurrence: fn05455e, line 1215
static void exec_7921c9c01f5b5c82(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn05455e, line 1231
static void exec_a5abc98d7ee330a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn0545c4, line 1359
static void exec_b8ac1748c1626205(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(5);
}

// First occurrence: UpdateBackground.LBZ2, line 1401
static void exec_74d48bd4e225c031(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.LBZ2, line 1412
static void exec_fa8e407e7dcd0965(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: UpdateBackground.LBZ2, line 1469
static void exec_a8b898fdc0d41247(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
}

// First occurrence: UpdateBackground.LBZ2, line 1515
static void exec_f5d2748f19eea332(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var3.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: UpdateBackground.LBZ2, line 1615
static void exec_c8cb8d36adc733ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(2);
}

// First occurrence: UpdateBackground.LBZ2, line 1624
static void exec_2b45345191cf7729(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint16*>(24) = var3.get<uint16>();
}

// First occurrence: fn054a94, line 1636
static void exec_1bf1ae64872f7c19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > (int32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn063620, line 258
static void exec_51be21d8fda3de3a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<int16>() <= (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: fn063620, line 270
static void exec_c8ecabccab88a525(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06364e, line 325
static void exec_99e6e69b3393eea3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var1.get<uint32>());
	context.moveValueStack(1);
}

// First occurrence: fn063694, line 418
static void exec_203769fad2ee4e3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn063694, line 419
static void exec_f114c981ca0a2e90(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn063790, line 483
static void exec_f9136c3fef80eb65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0637ec, line 509
static void exec_fede9b61a61d20bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)-(signed)var5.get<uint16>());
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn063916, line 606
static void exec_13d332bedc8b49ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn06395c, line 631
static void exec_20b73884d6038101(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn06395c, line 632
static void exec_e2c4b2f86c1c7479(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var3.get<uint16>() + var10.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn065e02, line 721
static void exec_2401048e6307632e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)-(signed)var2.get<uint16>());
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn065e02, line 731
static void exec_a174aa52e92c8349(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelTiles.MHZ1, line 90
static void exec_ac5d0c9103ba424e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) >= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: InitLevelTiles.MHZ2, line 339
static void exec_7933db3f52a96f3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var1.get<uint32>());
}

// First occurrence: fn054dbe, line 421
static void exec_82064be8f7a0b832(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn054dbe, line 453
static void exec_ea57665d8ef65592(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<int64>(-1, 0);
}

// First occurrence: fn055008, line 518
static void exec_a8287302697c37ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn055008, line 520
static void exec_a28347a9efb269cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint8>());
	const AnyBaseValue var3((uint64)(var1.get<uint64>() * (uint64)(context.getParameter<int64>(4))));
	context.writeValueStack<uint64>(0, (var3.get<uint64>() + (uint64)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn055050, line 563
static void exec_9d75f767439512e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn055250, line 844
static void exec_42ee279089addd98(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1152
static void exec_5f0eb5082689242b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() != var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1168
static void exec_8c6c3070be2f9c4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var0.get<uint16>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: fn05550c, line 1184
static void exec_44fd5e179d4025a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn05550c, line 1185
static void exec_79c196750fbb69b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)-(signed)context.readValueStack<uint16>(-1));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<int16>(-2) >= var0.get<int16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn05550c, line 1189
static void exec_6774f18b46dc8861(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(12) & 0x1f)));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: fn05550c, line 1192
static void exec_d2fdf285eb596e22(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var9((int32)OpcodeExecUtils::safeDivide<int32>((int32)var7.get<int32>(), (int32)context.getParameter<int64>(24)));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn05550c, line 1195
static void exec_14210c182f08f5fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>() - var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn05550c, line 1198
static void exec_0fa9e0871d9d87ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var9((uint32)(var4.get<uint32>() + var8.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn05550c, line 1215
static void exec_fbbc30fe7d846bad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var8.get<uint16>());
}

// First occurrence: fn05550c, line 1217
static void exec_79cd31bdbd21465b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)((uint32)context.getParameter<int64>(12) * var4.get<uint32>()));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var5.get<uint32>(), (uint32)context.getParameter<int64>(24)));
	const AnyBaseValue var8((uint32)((uint32)context.getParameter<int64>(4) - var7.get<uint32>()));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((int16)(uint16)var10.get<int32>());
	const AnyBaseValue var12((uint16)(var0.get<uint16>() - var11.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var12.get<uint16>());
}

// First occurrence: fn05550c, line 1219
static void exec_71e355a4925337b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (var1.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(3);
}

// First occurrence: fn05550c, line 1241
static void exec_4ecf0dac751919bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05550c, line 1243
static void exec_41c17c19ceee2644(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn05550c, line 1247
static void exec_9e056f34489852a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn05550c, line 1248
static void exec_5e562cba95a896cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>(8) * var3.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(20)));
	const AnyBaseValue var7((uint32)((uint32)context.getParameter<int64>() - var6.get<uint32>()));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var10((int16)(uint16)var9.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var10.get<uint16>());
}

// First occurrence: fn05550c, line 1265
static void exec_1845d30fa18dec9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn05560c, line 1299
static void exec_f9a7cca7c4a43a8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: fn05560c, line 1318
static void exec_fbec7341ae5a5b57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint16)(context.readValueStack<uint16>(-2) - var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn05560c, line 1345
static void exec_4fb713b0432228ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: fn05560c, line 1346
static void exec_4089a635b30bc192(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(20), var4.get<uint16>());
}

// First occurrence: fn05560c, line 1351
static void exec_165ab58ce2994acc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint8>());
}

// First occurrence: fn062e92, line 414
static void exec_e9c9f607ce398a9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn054e9c, line 32
static void exec_77f0bbd5c5948e2c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn054e9c, line 34
static void exec_02cbadebce55668d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn054f8c, line 107
static void exec_bb47f4135710913b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn054fec, line 144
static void exec_0b3d87f776b1f095(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn05583e, line 184
static void exec_beb0409e1b412bbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() == (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn05583e, line 200
static void exec_af08bb4b1121c03b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn0631a4, line 112
static void exec_16805b95c7b1d37f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() | var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn0631a4, line 118
static void exec_5b9c05502d78b834(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() | (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn063324, line 265
static void exec_d50ac10164ce2f24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)context.readValueStack<uint16>(-2), (uint16)context.readValueStack<uint16>(-1)));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn063324, line 279
static void exec_4e7d471171d7070f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn063372, line 289
static void exec_b25cacd3a826ef3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn065eb4, line 405
static void exec_a3b53c71d8fbe6c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)OpcodeExecUtils::safeDivide<int16>((int16)context.readValueStack<int16>(-2), (int16)context.readValueStack<int16>(-1)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0532f0, line 48
static void exec_f321390713fdce9c(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: fn0532f0, line 57
static void exec_cc62f123b70bf43a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(20));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((int32)(var2.get<int32>() * var4.get<int32>()));
	const AnyBaseValue var7((int32)OpcodeExecUtils::safeDivide<int32>((int32)var5.get<int32>(), (int32)context.getParameter<int64>(28)));
	const AnyBaseValue var8((uint32)(var1.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var8.get<uint32>());
}

// First occurrence: fn0532f0, line 60
static void exec_6c0210b23cc21285(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint32>());
}

// First occurrence: fn05333a, line 102
static void exec_956a3de476f34d9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(-2, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn053400, line 229
static void exec_fc877c27b857b6c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0534c6, line 281
static void exec_63654275b95ef6ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn052810, line 605
static void exec_61bc337b2bcc50bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn052a2a, line 912
static void exec_0e14e7647bd69c19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn052a2a, line 934
static void exec_c9486856649af22a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn052b30, line 1080
static void exec_8f376cad6f39c846(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn052cd8, line 1395
static void exec_c8bf4c0eb844540c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn052e7a, line 1535
static void exec_e15274d1c077a0ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn052e7a, line 1540
static void exec_8c94f4cf4c784b6f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(2);
}

// First occurrence: fn052f32, line 1680
static void exec_6892c98f8471789b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	context.writeValueStack<uint32>(0, (var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(32));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(3);
}

// First occurrence: fn0530f0, line 1929
static void exec_d7f8daf36828b0e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() <= (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0530f0, line 1931
static void exec_2f84ee5e2f1cc4d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0530f0, line 1932
static void exec_884943c14d6e4945(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var8.get<uint32>());
}

// First occurrence: fn0530f0, line 1952
static void exec_2eb56f000346dd27(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn05318c, line 1962
static void exec_7310157c0de520a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn05318c, line 1967
static void exec_9d2e83a009fe4767(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn05318c, line 1975
static void exec_fb6a682cb0d008f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn05318c, line 1977
static void exec_3322bdfc5f3fea93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn05318c, line 2006
static void exec_ed0a5dff8ee3541b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn05318c, line 2009
static void exec_8d82a15100a9d0f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	const AnyBaseValue var12((uint16)(var10.get<uint16>() & (uint16)(context.getParameter<int64>(48))));
	*context.getParameter<uint16*>(56) = var12.get<uint16>();
}

// First occurrence: fn04eff6, line 2116
static void exec_2e07bd3205d771ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int32>(-1));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	*context.getParameter<uint32*>() = var1.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn055b70, line 196
static void exec_8c91017095ccc7d4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(5, 1);
	context.moveValueStack(6);
}

// First occurrence: fn055b70, line 210
static void exec_5c28af5b29399c74(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: fn055c84, line 368
static void exec_bac6c8272bdb2e9d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn055d56, line 391
static void exec_c40228c3585339b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn055d56, line 393
static void exec_2440b55d85f9f274(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn055d94, line 419
static void exec_e89620d344a54e85(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.getParameter<uint32>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint16>(2, (var0.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(4);
}

// First occurrence: fn055ebe, line 541
static void exec_f6c0e8b934fb166b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int32>(-1));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>())));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn055efc, line 562
static void exec_806f362632011cd6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var1.get<uint16>());
}

// First occurrence: fn055df2, line 594
static void exec_c82f10fe014f2cf0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn05622c, line 819
static void exec_c05bc6e5c4be751d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
	const AnyBaseValue var9((uint32)1);
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - var9.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn0563a6, line 1097
static void exec_c8b0c35709fda81c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint32>());
}

// First occurrence: fn0566d2, line 1484
static void exec_2b62ccd0d2880dc8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
}

// First occurrence: fn0566e8, line 1493
static void exec_50c392eb61372465(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn056706, line 1500
static void exec_de2e518c085e59fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>(16) - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var6.get<uint16>());
}

// First occurrence: fn0567b0, line 1618
static void exec_80843eb3d45e7964(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn05680a, line 1668
static void exec_cfd53baf6fbe656a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn05680a, line 1669
static void exec_9bd355bdfe6b02fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint32>());
}

// First occurrence: fn05680a, line 1670
static void exec_34a9b16395a6dff1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int32>() < var2.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn05687c, line 1743
static void exec_5ac3f2e30da0abbe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int32>() >= var2.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn056904, line 1797
static void exec_e5086886e6e9809b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() > var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn056904, line 1799
static void exec_ec32ab4d5c8d45ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn056904, line 1804
static void exec_74f01b2bed18abdc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() <= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn056936, line 1836
static void exec_c4a3e5a28aa0cd5e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var5.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint16)*context.getParameter<uint16*>(40));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(48) = var10.get<uint16>();
}

// First occurrence: fn056964, line 1850
static void exec_cf1eff4272e1affd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn0569ba, line 1890
static void exec_722ca8c6975dab0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)-(signed)var2.get<uint16>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint16>());
}

// First occurrence: fn056a34, line 1952
static void exec_492e7a905f055202(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn056a34, line 1953
static void exec_a2ead6f660ecf2de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn056a34, line 1961
static void exec_db656ae3e1dbf284(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: SOZ.drawDarkSandPit, line 1995
static void exec_f73cbe51f64f06ac(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(28))));
	const AnyBaseValue var7((uint16)swapBytes16(*context.getParameter<uint16*>(36)));
	context.writeValueStack<uint16>(2, (var6.get<uint16>() - var7.get<uint16>()));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(44));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(52));
	context.moveValueStack(6);
}

// First occurrence: fn0560a2, line 207
static void exec_a9dd6e2b53f2664b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn0560a2, line 211
static void exec_21a84f6f445ba6c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var7.get<uint16>() + var11.get<uint16>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn08f0ca, line 48
static void exec_f30f6130abc88389(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn08f0ca, line 57
static void exec_191c0ab023b6c2b2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn08f26e, line 252
static void exec_974369ca333329c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn08f2e0, line 289
static void exec_e1f491defd5535fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint8)(uint8)(context.readValueStack<uint16>(-3) > var2.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
	context.moveValueStack(-3);
}

// First occurrence: fn08f2e0, line 293
static void exec_9ff557c0af667024(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() < (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn08f322, line 318
static void exec_47015c1fdfe5962e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn08f3f6, line 383
static void exec_e00fc2c1b1ec08a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(-1, (var0.get<uint8>() != var1.get<uint8>()));
}

// First occurrence: fn08f514, line 489
static void exec_597ee80a29e69de8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var5.get<uint16>());
}

// First occurrence: fn08f538, line 510
static void exec_03210632005ee558(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.LRZ1, line 318
static void exec_ba9ce42f800f198f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.LRZ1, line 321
static void exec_c02cf0f9a32e9958(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn056ec2, line 544
static void exec_1e457f69b0db654d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)-(signed)var0.get<uint32>());
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
}

// First occurrence: fn056ec2, line 560
static void exec_39c8da8b55a2c6e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn056ec2, line 576
static void exec_ec0d126fc3bd9f84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: RenderLevelSprites.LRZ, line 608
static void exec_fadab63ed8944349(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: RenderLevelSprites.LRZ, line 618
static void exec_e20af70b614ba2cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: RenderLevelSprites.LRZ, line 622
static void exec_86275a280f1c4a95(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var3.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: RenderLevelSprites.LRZ, line 623
static void exec_ab3b0793b49d5d3a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: RenderLevelSprites.LRZ, line 627
static void exec_5625408c688815e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: UpdateBackground.LRZ2, line 834
static void exec_a75d4bc79dc6754f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((int32)(uint32)var3.get<int16>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var6.get<uint16>());
}

// First occurrence: UpdateBackground.LRZ2, line 884
static void exec_718067aaf810ae3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn059b1c, line 984
static void exec_08190612935e0c79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (var3.get<uint16>() & 0x0f)));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var5.get<uint8>());
}

// First occurrence: fn059ba4, line 1052
static void exec_e9537cc639a3484e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn059ba4, line 1053
static void exec_f32cfc7068a18114(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn059c8c, line 1203
static void exec_4f6e065106b35065(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(1, ((uint16)context.getParameter<int64>(12) + var3.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fn059c8c, line 1225
static void exec_1db92394fc48c90f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn059d24, line 1260
static void exec_02a1506dde0ca77f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn059d24, line 1281
static void exec_3a231c44ebb6ea7b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint32>());
}

// First occurrence: fn059d24, line 1291
static void exec_1624a7e174867978(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)var0.get<uint8>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	context.writeValueStack<uint16>(2, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.moveValueStack(3);
}

// First occurrence: fn059d24, line 1293
static void exec_c46c772b65fb0305(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn059d82, line 1313
static void exec_941ae8d0a2eb08cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int16)OpcodeExecUtils::safeDivide<int16>((int16)var4.get<int16>(), (int16)context.getParameter<int64>(24)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var6.get<uint16>());
}

// First occurrence: fn059d82, line 1317
static void exec_50e234278b19cea4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn059dbc, line 1342
static void exec_4d9ebf602345a1be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn059dde, line 1362
static void exec_a058ab5bf2bebdbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn059dde, line 1373
static void exec_802977b8e6a281e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn059f82, line 1614
static void exec_6330f7f7e230fbdc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn059fdc, line 81
static void exec_f78ad7af47452a77(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn059fdc, line 86
static void exec_68a4347abee38ff4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 95
static void exec_dd604858b0bb052b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: fn059fdc, line 96
static void exec_b1705fe884f07414(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int16)(uint16)var0.get<int32>());
	*context.getParameter<uint16*>(4) = var1.get<uint16>();
}

// First occurrence: fn059fdc, line 111
static void exec_375176012698be70(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() - var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: fn059fdc, line 125
static void exec_6f2f05704cbc3c48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>())));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 159
static void exec_55b991cab49350e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn059fdc, line 178
static void exec_1ffd452f73af8e1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (var1.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn07910a, line 206
static void exec_c30cf3b30fabf22a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var5.get<uint16>());
}

// First occurrence: fn0791fe, line 281
static void exec_5551c131e39a8c45(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() > var9.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0791fe, line 303
static void exec_3e20ad048102c255(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var4.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn079516, line 497
static void exec_b68f5416fa82cf9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (var5.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn079516, line 502
static void exec_5f56a625386f4de9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var3.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn042a18, line 27
static void exec_234af4c199a8536c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() & var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn042a68, line 45
static void exec_eb3ea5b044ab1fcb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn042a68, line 58
static void exec_4540ee81b76b38e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn065ed4, line 296
static void exec_48c171febccd719e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: fn065ed4, line 298
static void exec_521af08830c25ce2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)(var5.get<uint8>() | var8.get<uint8>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn065f2e, line 338
static void exec_6dcde3b78a3ec991(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn065f2e, line 353
static void exec_2a79166d577f9e76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: fn065f2e, line 354
static void exec_a100d4c7fa88d7aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn065f84, line 376
static void exec_5ad1884b5bcdb345(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() | var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn065f84, line 393
static void exec_f4f177fcc32e3a50(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn08622c, line 425
static void exec_c2078df577b6ec83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)var2.get<uint32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn064422, line 90
static void exec_7f50f990b6eabaa3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn064422, line 91
static void exec_a13f57a39d971cbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn064846, line 493
static void exec_2c3a92c22b2a977d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn064d5c, line 1061
static void exec_8e92125a0d1469ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var6.get<uint32>());
}

// First occurrence: fn06628c, line 1331
static void exec_6f68cb4360e7236b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)-(signed)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn0662a6, line 1340
static void exec_d5f0d4a4713d947b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (uint8)(context.getParameter<int64>(8) & 0x07)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn0662c0, line 1349
static void exec_1a1b74d9f6c6aab0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn0662c0, line 1351
static void exec_3b71152352e1665d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn0662c0, line 1354
static void exec_0cf9edca969a44db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn0662c0, line 1359
static void exec_f15140edd6c2344b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn06510c, line 1526
static void exec_eb2e8f1d86d3bf0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn06516e, line 1564
static void exec_3ec5579c6f385140(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn06518a, line 1576
static void exec_d19f5928524d6120(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn0651ac, line 1590
static void exec_3fc086c06390e692(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn0651ac, line 1591
static void exec_6ce2ccea510a0941(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() & (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((int16)(uint16)var10.get<int32>());
	const AnyBaseValue var12((uint16)(var3.get<uint16>() + var11.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn0652a2, line 1669
static void exec_fbcbd0320db0fa93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0652a2, line 1670
static void exec_d6de37e10cc11163(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
	const AnyBaseValue var6((uint32)1);
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var2.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn065382, line 1767
static void exec_f0d8eeade214ae91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn065382, line 1770
static void exec_046f40302b6ca0ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn06549a, line 1860
static void exec_b06ae2d6fcd2f4c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() > var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn06549a, line 1861
static void exec_cd8e596a45501738(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn065564, line 1946
static void exec_23249830b7624094(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) != var0.get<uint8>()));
}

// First occurrence: InitLevelTiles.EC, line 20
static void exec_bb5137120e14c27c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint8>());
}

// First occurrence: InitLevelScrolling.EC, line 51
static void exec_241bf9c386fa38ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint16>());
}

// First occurrence: InitLevelScrolling.EC, line 52
static void exec_05bf0d6c40172942(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn090964, line 134
static void exec_2abff95e66800712(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn090a94, line 195
static void exec_ad3c48fb6268b3b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(12) = var4.get<uint8>();
}

// First occurrence: fn090a94, line 200
static void exec_b7f610a25eaa10dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var9.get<uint32>();
	const AnyBaseValue var11((uint32)(var9.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn090b32, line 250
static void exec_d5cd4840412f2400(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn090b32, line 254
static void exec_360fad5701cd3f56(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn090b84, line 287
static void exec_ea95b7b469f7c08d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint8>());
	*context.getParameter<uint32*>(24) = var9.get<uint32>();
}

// First occurrence: fn090e4e, line 583
static void exec_6b83add780ac58ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	*context.getParameter<uint8*>(32) = var8.get<uint8>();
}

// First occurrence: fn090e4e, line 592
static void exec_840200a206d3e025(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint8)(var4.get<uint8>() << (var8.get<uint8>() & 0x07)));
	const AnyBaseValue var10((uint8)(var3.get<uint8>() | var9.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint8>());
}

// First occurrence: fn090e9a, line 638
static void exec_0dd39a3120e63f78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var14((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13.get<uint32>()));
	const AnyBaseValue var15((uint32)(uint32)var14.get<uint8>());
	const AnyBaseValue var16((uint32)(var10.get<uint32>() + var15.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var16.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn090f0a, line 694
static void exec_515482af5ef4e1c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() << (var5.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() | var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint8>());
}

// First occurrence: UpdateBackground.HPZ, line 292
static void exec_225530801c0799ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateBackground.HPZ, line 297
static void exec_800653a62767e0fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn0572ba, line 134
static void exec_5bce43e62f1fb567(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn0572ba, line 150
static void exec_0a877fe4a6b7eed3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) & (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn057344, line 192
static void exec_5c59b91fcf60a10b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)0);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn057344, line 194
static void exec_5bd2c99981a3558b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn057344, line 205
static void exec_47e669f3f94da1f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn057344, line 237
static void exec_ada3fa5214b228c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn0574dc, line 297
static void exec_6209e9c62576d169(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn05750c, line 323
static void exec_a63a4cb274e13e0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() >= var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05750c, line 332
static void exec_e3af8e0ea6730af1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn05750c, line 351
static void exec_d6179457a2185fc2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn05750c, line 353
static void exec_75e725823fe3339a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn05758a, line 391
static void exec_0d91094ea2fee614(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0575ea, line 517
static void exec_e86439ccb2fc11f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) != var0.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn0578f0, line 658
static void exec_870690a9437f77be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, -(signed)var0.get<uint16>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn0578f0, line 658
static void exec_092aef5035b5e898(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: fn0578f0, line 661
static void exec_4ba33981d70ca347(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int32>());
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var1.get<uint16>());
	const AnyBaseValue var8((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var9((int64)1);
	const AnyBaseValue var10((uint8)(var8.get<uint8>() + var9.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var10.get<uint8>());
}

// First occurrence: fn0579f0, line 810
static void exec_f5c9d9162c902da5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn057a60, line 840
static void exec_8cc8591467b9e34a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn057a60, line 846
static void exec_da41a3c0e712fa91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn057a60, line 847
static void exec_6878d40b36ef9651(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn057a60, line 894
static void exec_ed79c18028924f78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
}

// First occurrence: fn058b20, line 152
static void exec_0e12b8fb047c59c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn058fbc, line 379
static void exec_03e02776d4a4763f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn058fbc, line 404
static void exec_bba0186ae02d729d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn04f15a, line 514
static void exec_275275a866177824(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn0590e4, line 642
static void exec_c3be09edf1100c47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn059194, line 707
static void exec_f525d119b3b41046(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int32>() < var4.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn07ca3a, line 806
static void exec_59103b1f73c3cc47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var2.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn07caaa, line 841
static void exec_a03113d19c0795a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<uint16>(-2) < var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn07cb28, line 902
static void exec_df94b7a60e8ee344(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<uint16>(-2) >= var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn07cd82, line 1128
static void exec_17e7cf20bfedae78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int8>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn07cd82, line 1132
static void exec_f02a965ff2cbee08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn07cd82, line 1150
static void exec_17a6a625b1271eef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn07cd82, line 1150
static void exec_e9bdc1456ef40ff9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn07ce1e, line 1185
static void exec_bd18b838eb5fc35d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() - var4.get<uint8>()));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: fn07d11c, line 1236
static void exec_8252fb7c23329b2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn07d11c, line 1244
static void exec_29a78f86674f2e84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn057bf6, line 36
static void exec_e6a4dd6ab541c498(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn057bf6, line 37
static void exec_da8d7294db9e9cca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() - var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint32>());
}

// First occurrence: fn057f3e, line 122
static void exec_772c751f3b553222(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint16>() == var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn057f3e, line 129
static void exec_71bba03d008f31f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - var5.get<uint32>()));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn05806e, line 265
static void exec_66b690b56cec46bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(8) = var6.get<uint32>();
}

// First occurrence: fn05806e, line 269
static void exec_825b1f12edfabc48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn05806e, line 298
static void exec_3b8c3082358887b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn05806e, line 301
static void exec_bc543117dbb35b5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	*context.getParameter<uint32*>(8) = var4.get<uint32>();
}

// First occurrence: fn05806e, line 314
static void exec_1b5e467dd6ac0de4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn05831e, line 517
static void exec_b6b9f67b9f76b762(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0583d2, line 616
static void exec_085319c42f926ced(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn057d64, line 118
static void exec_cf0b8f9a3bba4479(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int32>() >= var4.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn057da2, line 135
static void exec_ac638f4bf9bd4b92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() | var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn06594a, line 471
static void exec_aa396ec96af7e5dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fn06594a, line 472
static void exec_6a917aa7ccd4286c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06594a, line 476
static void exec_4952453b5ab21583(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(1, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: fn06594a, line 476
static void exec_67e178318de260ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<int16>(-3) > var2.get<int16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn065b24, line 682
static void exec_c02a0424bdcecb15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<uint16>(1, (var8.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(56));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(72));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(80))));
	const AnyBaseValue var14((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var13.get<uint32>()));
	context.writeValueStack<uint16>(4, ((uint16)context.getParameter<int64>(64) - var14.get<uint16>()));
	context.writeValueStack<int64>(5, 1);
	context.moveValueStack(6);
}

// First occurrence: fn065b70, line 727
static void exec_c601bb6355556601(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn065fde, line 770
static void exec_7ed910c9a857b2ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() != (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn049602, line 26
static void exec_a1a9a5653cd9da41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)swapBytes16(*context.getParameter<uint16*>(32)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - var8.get<uint16>()));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn04964a, line 89
static void exec_b4ccce5f1a28784d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn049850, line 265
static void exec_eb6720d61f2e1232(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)~var4.get<uint8>());
	const AnyBaseValue var6((uint8)(var3.get<uint8>() & var5.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn0498d2, line 305
static void exec_a0ae4eb03cd4b75c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() | (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn0498d2, line 324
static void exec_76577ec62cff1072(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn0498d2, line 326
static void exec_17e750097e6bc1e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint8>());
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint8>(1, (var4.get<uint8>() & var5.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn0498d2, line 326
static void exec_0fbab8fe356d06dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int64>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn0498d2, line 330
static void exec_06023a278066c5aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (var1.get<uint8>() & 0x07)));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn049a0e, line 413
static void exec_8670b3369675d038(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn049a0e, line 423
static void exec_0503fa28cd931abf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn049a0e, line 424
static void exec_4907573d94f3de4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var4.get<uint8>() >= (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn049a0e, line 424
static void exec_b2c396f41bdaa045(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint8>());
}

// First occurrence: UpdateLevelScrolling.DEZ1, line 58
static void exec_ce02557b02cc5773(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: UpdateLevelScrolling.DEZ2, line 262
static void exec_f0e44c594886c738(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int32>(-1));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: InitLevelTiles.DEZBossAct, line 27
static void exec_9caf17b0bc0418a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)(var2.get<uint32>() * var7.get<uint32>()));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: InitLevelTiles.DEZBossAct, line 28
static void exec_69fa3778de68888c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint16>());
	const AnyBaseValue var10((uint32)(var4.get<uint32>() * var9.get<uint32>()));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: InitLevelTiles.DEZBossAct, line 29
static void exec_d7dba1761b787145(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: InitLevelTiles.DEZBossAct, line 31
static void exec_5a25f2d689e397fd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>(8) - var1.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var2.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: fn05a5b0, line 292
static void exec_bac25e31dd6c28f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>())));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn05a5b0, line 295
static void exec_d8cec82c22c158d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn05a76c, line 557
static void exec_78ae65a10b0dcc04(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn05a76c, line 560
static void exec_b8acab149829279c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: fn05a79e, line 571
static void exec_91b85598b10bf919(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var7.get<uint32>());
}

// First occurrence: fn05a872, line 677
static void exec_db0d6a30d923d75d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var8((int8)(uint8)var7.get<int16>());
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn0810a0, line 895
static void exec_c6c704efbce0f6b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0829d2, line 481
static void exec_3104a9c6d5b8dd2c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0829d2, line 497
static void exec_f16aa5f263035cff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn082772, line 623
static void exec_8906a0f988ce250b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn082772, line 701
static void exec_bcfef16aa0eec906(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)OpcodeExecUtils::safeDivide<int16>((int16)var2.get<int16>(), (int16)context.getParameter<int64>(16)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn082920, line 777
static void exec_77cb0661eac88af0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn082920, line 796
static void exec_5c3e56925ae83392(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn082920, line 800
static void exec_bc655605ddfdb667(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > (int32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn01bbbe, line 844
static void exec_6a1ab80d97694e37(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01bbbe, line 856
static void exec_5cc1e8e3198985d2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn05b012, line 731
static void exec_f76136d74c4d4b75(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint16>());
}

// First occurrence: fn05b0a8, line 831
static void exec_f4f6790337b22a0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
}

// First occurrence: fn05b0a8, line 833
static void exec_fbd7ac5e23f397f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn058d44, line 878
static void exec_b28d04f8bbb6880e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint32>());
}

// First occurrence: fn058d44, line 880
static void exec_aae0e3585b7578f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn058d3e, line 982
static void exec_7698c0d67a090c37(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn058d3e, line 1012
static void exec_76741c909eeada9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() >> (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var10((uint32)(var2.get<uint32>() + var9.get<uint32>()));
	const AnyBaseValue var11((int16)(uint16)var10.get<int32>());
	const AnyBaseValue var12((uint16)(var0.get<uint16>() + var11.get<uint16>()));
	*context.getParameter<uint16*>(40) = var12.get<uint16>();
}

// First occurrence: fn058d3e, line 1080
static void exec_89914264008981e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn058d3e, line 1095
static void exec_59ea8b6ab4d3632d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint32>());
}

// First occurrence: fn058d3e, line 1110
static void exec_ce3de9ea05d7341e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn058d3e, line 1112
static void exec_6452c465bd543015(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)-(signed)var3.get<uint16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn05975c, line 52
static void exec_a2f897b5b7172abd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var2.get<uint16>());
}

// First occurrence: fn05975c, line 55
static void exec_0c250d8746e6aa6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: LevelTilesAnim.BonusGS, line 102
static void exec_61a13b1efc1a9047(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: LevelTilesAnim.BonusGS, line 109
static void exec_980874d94fffdc7a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() & var6.get<uint32>()));
	*context.getParameter<uint32*>(40) = var7.get<uint32>();
}

// First occurrence: LevelTilesAnim.BonusGS, line 111
static void exec_fc659e96d6c9058e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() | var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn0285ee, line 139
static void exec_28bb982cfd251442(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn02863e, line 184
static void exec_42298036b477f1b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: LevelPaletteUpdate.BonusGS, line 273
static void exec_66b6ddcf73501661(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	context.writeValueStack<uint32>(0, (var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(32));
	context.writeValueStack<uint32>(1, (var4.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(48));
	context.moveValueStack(3);
}

// First occurrence: LevelPaletteUpdate.BonusSM, line 326
static void exec_aed18706fe509901(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	context.writeValueStack<uint32>(1, (var0.get<uint32>() + var2.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(3);
}

// First occurrence: LevelTilesAnim.BonusGM, line 54
static void exec_90250a590b2696ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var5.get<uint32>());
}

// First occurrence: UpdateLevelTiles.BonusGM, line 78
static void exec_96da45b12efd4431(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn23efb6, line 92
static void exec_9da0d02922c5794f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn23f012, line 139
static void exec_a21cec943949c160(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
}

// First occurrence: fn239d58, line 265
static void exec_427932cb983536fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn239e52, line 368
static void exec_01a097f09a4caf99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var0.get<uint32>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: fn239864, line 527
static void exec_818917f8b7478f7a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn239864, line 530
static void exec_0d983edc2ba03d86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn239864, line 537
static void exec_19f8bbb24b6491a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(40));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn239864, line 541
static void exec_763768ff7263e2c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn239864, line 553
static void exec_3a2ca607ec8cf891(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(40) = var8.get<uint16>();
}

// First occurrence: fn239864, line 568
static void exec_a9e6fc0ffaec280a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn239900, line 596
static void exec_911d51c89af4c6fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn239900, line 608
static void exec_b5aa89de7c6ed2ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() ^ (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint32>());
}

// First occurrence: fn23998e, line 651
static void exec_2a52a0243cc834c5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn239a22, line 700
static void exec_f0f3845cd0fa17e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(40));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn239a22, line 715
static void exec_be49773031d0fd26(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(40) = var8.get<uint16>();
}

// First occurrence: fn239a22, line 729
static void exec_08224c0071c92dcb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn239aa8, line 751
static void exec_86474ea5b479cc82(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn239aa8, line 752
static void exec_d62a70f167ab9655(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn239b20, line 806
static void exec_0847dea405e21e00(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() & var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn0597aa, line 85
static void exec_54efb192fb7e35a8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 159
static void exec_1ddbadd886ed29ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 160
static void exec_a2c397b0e325226d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() < (int32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 189
static void exec_f45f0f770e3a0bc7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint64)(uint64)var1.get<uint32>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint64)(uint64)var3.get<uint32>());
	const AnyBaseValue var5((uint64)(var2.get<uint64>() + var4.get<uint64>()));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint64>() >= (uint64)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 198
static void exec_1e34291bd4b0ca9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 227
static void exec_339549ccedac0672(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint16>());
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 240
static void exec_3e15afc470184ef8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * var1.get<uint16>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: UpdateLevelScrolling.BonusSM, line 269
static void exec_a9537b6cd6473039(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: BonusSM.RenderRotatingMaze, line 326
static void exec_2108e9abb7a940ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(var0.get<int32>() * (int32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 328
static void exec_3ce038aeb2afc823(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)OpcodeExecUtils::safeModulo<int16>((int16)var0.get<int16>(), (int16)context.getParameter<int64>(4)));
	const AnyBaseValue var3((uint16)-(signed)var2.get<uint16>());
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((int16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var8((int16)(var6.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	*context.getParameter<uint16*>(24) = var9.get<uint16>();
}

// First occurrence: BonusSM.RenderRotatingMaze, line 333
static void exec_8070368040e95aec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var4.get<int32>() * var6.get<int32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() - var7.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var8.get<uint32>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 334
static void exec_42be6f6c0f1d4df7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var4.get<int32>() * var6.get<int32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var8.get<uint32>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 338
static void exec_cdb79a6b9a95fdd1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(12));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 339
static void exec_d1dd17f42923c4a8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 340
static void exec_7fb8cba3a3914dff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 351
static void exec_e8b5515e4c7afa1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)OpcodeExecUtils::safeDivide<int32>((int32)var2.get<int32>(), (int32)context.getParameter<int64>(12)));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)((uint32)context.getParameter<int64>(20) - var7.get<uint32>()));
	const AnyBaseValue var10((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var8.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var11((uint32)(var4.get<uint32>() + var10.get<uint32>()));
	const AnyBaseValue var12((uint32)(var0.get<uint32>() + var11.get<uint32>()));
	*context.getParameter<uint32*>(40) = var12.get<uint32>();
}

// First occurrence: BonusSM.RenderRotatingMaze, line 352
static void exec_ea5c5691c210e70c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)OpcodeExecUtils::safeDivide<int32>((int32)var2.get<int32>(), (int32)context.getParameter<int64>(12)));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)((uint32)context.getParameter<int64>(20) - var7.get<uint32>()));
	const AnyBaseValue var10((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var8.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var11((uint32)(var4.get<uint32>() + var10.get<uint32>()));
	const AnyBaseValue var13((int32)(var11.get<int32>() * (int32)(context.getParameter<int64>(40))));
	const AnyBaseValue var14((uint32)(var0.get<uint32>() + var13.get<uint32>()));
	*context.getParameter<uint32*>(48) = var14.get<uint32>();
}

// First occurrence: BonusSM.RenderRotatingMaze, line 363
static void exec_8bf87baaadb4e13e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var1.get<uint8>());
}

// First occurrence: BonusSM.RenderRotatingMaze, line 368
static void exec_a009178782e721f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 370
static void exec_f19a9948630144dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() >= (int32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 370
static void exec_bc0992f8f9a2d118(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<int32>(-2) < var2.get<int32>()));
	context.moveValueStack(-1);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 373
static void exec_349f45f775825d06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint16>(1, (var4.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 377
static void exec_7384f981f33a9330(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(12) = var3.get<uint16>();
}

// First occurrence: BonusSM.RenderRotatingMaze, line 386
static void exec_2b2809b692c3bdb2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int16>(1, (uint16)var0.get<int32>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (uint16)var1.get<int32>());
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(6);
}

// First occurrence: BonusSM.RenderRotatingMaze, line 397
static void exec_2931e2f16f7daa2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>(8) - var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var7((int64)1);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + var7.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: fn04b490, line 409
static void exec_62f219648f6d5fe5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn04b490, line 419
static void exec_892d9426673aa639(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var2.get<uint16>());
}

// First occurrence: fn04b490, line 422
static void exec_f0b44520a6cfcb4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: fn04b4c4, line 452
static void exec_f38c53a4151f4fed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn04b4c4, line 496
static void exec_e7813a8d06c0fcf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint8>());
}

// First occurrence: fn04b65a, line 628
static void exec_93c2fccd1af2da54(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn04b65a, line 631
static void exec_d320fe77e78dce3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn04bf9a, line 664
static void exec_5ade2a94917c3c19(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>() - var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: fn04bf9a, line 666
static void exec_5763f3ea030aa3ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var4.get<int32>() * var6.get<int32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var10((int32)(var8.get<int32>() >> (int32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: fn04bf9a, line 667
static void exec_87dad880b28c8ab8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var4.get<int32>() * var6.get<int32>()));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var10((int32)(var8.get<int32>() >> (int32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: fn04c014, line 700
static void exec_60893f993d750e75(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: fn04c026, line 720
static void exec_07e71eca9b73a9ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn04c0aa, line 822
static void exec_0d06d278ba17b61a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (var5.get<int16>() & 0x0f)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn04c374, line 913
static void exec_9826be9d170cd7ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn04c374, line 914
static void exec_4edf193d93dfaaa8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - var8.get<uint32>()));
	const AnyBaseValue var11((int32)(var9.get<int32>() >> (int32)(context.getParameter<int64>(40) & 0x1f)));
	const AnyBaseValue var12((uint32)(var3.get<uint32>() - var11.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var12.get<uint32>());
}

// First occurrence: fn04c416, line 996
static void exec_3e12a94063b7ede1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (uint8)(context.getParameter<int64>(8) & 0x07)));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() << (uint8)(context.getParameter<int64>(24) & 0x07)));
	const AnyBaseValue var6((uint8)(var2.get<uint8>() + var5.get<uint8>()));
	*context.getParameter<uint8*>(32) = var6.get<uint8>();
}

// First occurrence: fn04c416, line 1006
static void exec_60d392cb91036526(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn04c416, line 1007
static void exec_e48ad5c6c0fd370f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn04c480, line 1028
static void exec_8094a9a53ac3b421(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() - (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn04c480, line 1029
static void exec_4e304c2592684d3f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (uint8)(context.getParameter<int64>(8) & 0x07)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() - (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn04c480, line 1043
static void exec_3d93244da49675b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04c480, line 1045
static void exec_70949013e5465d89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint8)(var0.get<uint8>() - var2.get<uint8>()));
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn04c480, line 1073
static void exec_6cd007f1c2b1bd46(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (var1.get<uint8>() != (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c480, line 1083
static void exec_beb1a610898a116a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04c480, line 1099
static void exec_5aba173adc8b8f5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: fn04c480, line 1101
static void exec_9d1358252b39abd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
}

// First occurrence: fn04c480, line 1104
static void exec_746abeeb1940d0b2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (uint8)(context.getParameter<int64>(4) & 0x07)));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() | var3.get<uint8>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn04c540, line 1118
static void exec_1daf9ab769d68d04(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var6((uint32)1);
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn04c576, line 1142
static void exec_464368294af11255(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn04c5c4, line 1182
static void exec_4bf01f9a0acaf1b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c5e0, line 1198
static void exec_68f4a07d04a7cb2b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (var1.get<uint32>() & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var6((uint32)((uint32)context.getParameter<int64>(24) - var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(var3.get<uint32>() >> (var6.get<uint32>() & 0x1f)));
	const AnyBaseValue var8((uint32)(var2.get<uint32>() | var7.get<uint32>()));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
}

// First occurrence: fn04c5e0, line 1201
static void exec_7060b8924eef1bca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() | var6.get<uint16>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn04c602, line 1210
static void exec_da8ca2f89bb81a0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() >= var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04c602, line 1215
static void exec_a651e8f0a1a13376(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() < (int8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c602, line 1221
static void exec_fa5f5f757bf71651(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn04c63e, line 1236
static void exec_c42cfa742ad4041e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn04c63e, line 1244
static void exec_eb7683a083989140(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() > (int8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn04c63e, line 1244
static void exec_3e77312918a73c7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04c6a8, line 1266
static void exec_9b0703242913ecd5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04c71a, line 1349
static void exec_cd5a8b71f373eec5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var1.get<uint16>() - var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn04c77c, line 1382
static void exec_c52b466db0b1596a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn04c77c, line 1386
static void exec_17cb1b36d2f98ade(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (var3.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn04c7a2, line 1399
static void exec_2bb2deaacf9713ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn04c7a2, line 1402
static void exec_8a0a4fb377d8eeb4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn04c7e0, line 1452
static void exec_1234139a37dc92fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn04c88e, line 1540
static void exec_a8ae905e594dc57d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn01aa02, line 1574
static void exec_96e5d7f8b36c7e84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn01aa02, line 1597
static void exec_4b71d5d2a44e22b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn01aa56, line 1626
static void exec_3ed8f07caca450f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var9((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var10((int32)(uint32)var9.get<int16>());
	const AnyBaseValue var11((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var12((int32)(var10.get<int32>() * var11.get<int32>()));
	const AnyBaseValue var13((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var14((int32)(uint32)var13.get<int16>());
	const AnyBaseValue var15((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	const AnyBaseValue var16((int32)(var14.get<int32>() * var15.get<int32>()));
	const AnyBaseValue var17((uint32)(var12.get<uint32>() - var16.get<uint32>()));
	const AnyBaseValue var19((int32)(var17.get<int32>() >> (int32)(context.getParameter<int64>(40) & 0x1f)));
	const AnyBaseValue var20((uint32)(var8.get<uint32>() + var19.get<uint32>()));
	const AnyBaseValue var21((int16)(uint16)var20.get<int32>());
	const AnyBaseValue var22((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var24((uint32)(var22.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var24.get<uint32>(), var21.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn01aa56, line 1627
static void exec_83271581efec9a34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var9((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var10((int32)(uint32)var9.get<int16>());
	const AnyBaseValue var11((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var12((int32)(var10.get<int32>() * var11.get<int32>()));
	const AnyBaseValue var13((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var14((int32)(uint32)var13.get<int16>());
	const AnyBaseValue var15((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	const AnyBaseValue var16((int32)(var14.get<int32>() * var15.get<int32>()));
	const AnyBaseValue var17((uint32)(var12.get<uint32>() + var16.get<uint32>()));
	const AnyBaseValue var19((int32)(var17.get<int32>() >> (int32)(context.getParameter<int64>(40) & 0x1f)));
	const AnyBaseValue var20((uint32)(var8.get<uint32>() + var19.get<uint32>()));
	const AnyBaseValue var21((int16)(uint16)var20.get<int32>());
	const AnyBaseValue var22((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var24((uint32)(var22.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var24.get<uint32>(), var21.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn04ba4e, line 126
static void exec_f7badd25d9e59cd7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var5((uint16)(var1.get<uint16>() + var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var5.get<uint16>());
}

// First occurrence: fn04babc, line 185
static void exec_6872d29f85785632(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn04babc, line 188
static void exec_6a32cf53ae364e99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var1.get<int32>() * var6.get<int32>()));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn04bbb2, line 254
static void exec_e98a440113ce774c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)-(signed)var4.get<uint8>());
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn04bcb0, line 348
static void exec_76fda930c081df23(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var3.get<uint32>() + var10.get<uint32>()));
	*context.getParameter<uint32*>(40) = var11.get<uint32>();
}

// First occurrence: fn04bd5a, line 418
static void exec_67e4a1c1321693f9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var5.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var8((uint32)(var0.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
}

// First occurrence: fn04bd5a, line 419
static void exec_2feb3a7e1fa8ec38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var5.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var10((uint32)(var0.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(48) = var10.get<uint32>();
}

// First occurrence: fn04bdca, line 462
static void exec_b59b47e70a30e8da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var7.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var10((uint32)(var0.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: fn04bdca, line 463
static void exec_abe41fff4836b82b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var7.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() * (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint32)(var0.get<uint32>() + var11.get<uint32>()));
	*context.getParameter<uint32*>(48) = var12.get<uint32>();
}

// First occurrence: fn04be3a, line 523
static void exec_3eb94c6f8d0808ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn04be3a, line 542
static void exec_7ae24283dc770179(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn04be3a, line 561
static void exec_e81478bb7904859e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: SpecialStage, line 84
static void exec_b6ddd345a52c86f6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: BlueSpheres.getNextOpenStageIndex, line 304
static void exec_7fe8b5fb6d5851a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint8>(0, (var4.get<uint8>() != var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0085b0, line 342
static void exec_37c983632b125b1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn0085b0, line 358
static void exec_c20ca2aea2e535a7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn0085b0, line 375
static void exec_da67de9befed013d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var8((uint32)(var5.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint8>());
	const AnyBaseValue var12((uint32)(var10.get<uint32>() * (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint32)(var8.get<uint32>() + var12.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(48), var13.get<uint32>());
}

// First occurrence: fn0085b0, line 379
static void exec_f634521d1dcced84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > (uint8)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn0085b0, line 387
static void exec_6d61b12de06de748(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var7.get<uint16>());
}

// First occurrence: fn0085b0, line 390
static void exec_a1c70d2b92ae7911(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)(var0.get<uint8>() + var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var6.get<uint8>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var9.get<uint8>());
}

// First occurrence: fn0085b0, line 416
static void exec_eb568043b894123a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	const AnyBaseValue var8((uint16)(var1.get<uint16>() + var7.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var8.get<uint16>());
}

// First occurrence: fn0085b0, line 419
static void exec_a2fb147752d6b8d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: fn0085b0, line 432
static void exec_173abd87f982e245(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var8((uint32)(var5.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn0085b0, line 433
static void exec_2e540b23dc5d93c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: fn0085b0, line 436
static void exec_a8af14968e469b69(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn0085b0, line 440
static void exec_c5b09751b4ba3f2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var7.get<uint32>()));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn0085b0, line 451
static void exec_f6dd917a55bac3e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint32>(0, (var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	context.writeValueStack<uint32>(1, (var2.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: fn0087da, line 479
static void exec_4f4e79a5b18626fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
}

// First occurrence: fn0087da, line 483
static void exec_4bb78f0def07340a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn008c5e, line 557
static void exec_d4f4277cdfc1ae69(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn008d5c, line 578
static void exec_51e94b8b77368ffd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn008d5c, line 579
static void exec_ce31ba5bbd08370e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn008e94, line 679
static void exec_6972af1ccd7daa1b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn00903e, line 796
static void exec_1f3fb2d13409f4a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() - var5.get<uint16>()));
	const AnyBaseValue var7((int8)(uint8)var6.get<int16>());
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn00903e, line 807
static void exec_62bfec8a747cae3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn00903e, line 833
static void exec_6aaf9fe6f59663b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn00903e, line 860
static void exec_7aa614ed99bf5e03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint32>());
}

// First occurrence: fn0091a2, line 901
static void exec_a63939d9c19e6306(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	context.writeValueStack<uint32>(1, *context.getParameter<uint32*>(8));
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(16));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(3, (uint16)var3.get<uint8>());
	context.moveValueStack(4);
}

// First occurrence: fn00927a, line 1003
static void exec_985db3ac71183c52(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn009402, line 1064
static void exec_1bb378252a4b4acc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn009488, line 1114
static void exec_34062969579a4984(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var7.get<uint32>());
}

// First occurrence: fn009488, line 1115
static void exec_a62e7482753eb7fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int16)(uint16)var0.get<int32>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
}

// First occurrence: fn00953e, line 1189
static void exec_92896c87c13212cb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)var0.get<int32>(), (int32)var2.get<int32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn009580, line 1215
static void exec_23ddb7e90cc643f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn009580, line 1229
static void exec_a8f53d0dfa6acc4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var3.get<uint8>());
}

// First occurrence: fn009580, line 1230
static void exec_fd25b6bff3248daf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (var2.get<uint8>() != var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn009580, line 1263
static void exec_4cfba1d9a8c6e306(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(16)));
	context.moveValueStack(2);
}

// First occurrence: fn009580, line 1269
static void exec_517e1bb92ba4d4ac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint16>(1, -(signed)var2.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: fn009580, line 1298
static void exec_e73445a036f113d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() | var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn009580, line 1322
static void exec_c443aec3d6a3a354(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn009580, line 1329
static void exec_a9b57646705c2b7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	const AnyBaseValue var6((uint16)(var1.get<uint16>() - var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<uint32>(), var6.get<uint16>());
}

// First occurrence: BlueSpheres.RenderSpheres, line 1482
static void exec_c6b9939b68c92144(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: BlueSpheres.RenderSpheres, line 1486
static void exec_ed5ced6c2d85256e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: BlueSpheres.RenderSpheres, line 1516
static void exec_2a6634d2ef0398b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var4.get<uint16>());
}

// First occurrence: BlueSpheres.RenderSingleSphereA, line 1620
static void exec_ae2beb6bca7ca0bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint16>());
}

// First occurrence: BlueSpheres.RenderSingleSphereA, line 1626
static void exec_b5691ec66e25bb89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, (var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<uint16>(1, (var8.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	context.writeValueStack<uint8>(2, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(64));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(72))));
	context.writeValueStack<uint16>(3, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var15.get<uint32>()));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(80));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1647
static void exec_b1c77c6ae3203d67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(20));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1652
static void exec_7f8cad795db7de1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(28) = var7.get<uint16>();
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1654
static void exec_a6a175a826c43e0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((int32)(var1.get<int32>() * var3.get<int32>()));
	const AnyBaseValue var6((int32)(var4.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: BlueSpheres.RenderSingleSphereB, line 1656
static void exec_d4be1c95006eb1a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	*context.getParameter<uint16*>() = var0.get<uint16>();
}

// First occurrence: fn009b62, line 1692
static void exec_02b7ee7e2c123287(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(1, context.getParameter<float>(8));
	context.writeValueStack<float>(2, context.getParameter<float>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: fn009b62, line 1695
static void exec_4e5dfb78c150f98c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.getParameter<uint32>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(2, (uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(3);
}

// First occurrence: fn009b62, line 1705
static void exec_4cdf9751f989bda6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn009b62, line 1709
static void exec_93e39a7c40d4c262(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn009b62, line 1712
static void exec_d124c7517251b219(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn009b62, line 1718
static void exec_5926d3a7bd3c564d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int32)(var3.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn009b62, line 1751
static void exec_79122b1c3fa4c289(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (var1.get<uint8>() < (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn009b62, line 1756
static void exec_804a834e187d69f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() | var5.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn009d5e, line 1796
static void exec_f11cf55c33025ca2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var3.get<uint16>());
}

// First occurrence: fn009dde, line 1850
static void exec_9dc87551853309da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn009e04, line 1872
static void exec_e2649031ccb67682(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn009ebc, line 1990
static void exec_73c00c899c742d68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(var0.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn009ebc, line 1992
static void exec_efd26114276b9076(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn009ebc, line 2023
static void exec_92d175430a54b138(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn009ebc, line 2025
static void exec_d546add72808c3c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2058
static void exec_501d786ab5c9c7e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn009f44, line 2080
static void exec_726edc8eafc67ff6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2133
static void exec_87736020242c6477(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn009f44, line 2134
static void exec_df486b5f59d335a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: fn009f44, line 2144
static void exec_128360a9fc2394a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2155
static void exec_f40befc63bd3d872(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() & (uint16)(context.getParameter<int64>(28))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var10.get<uint16>());
}

// First occurrence: fn009f44, line 2156
static void exec_c041f3da57af4fdf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2166
static void exec_09cbadc90b8f37e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() | (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn009f44, line 2179
static void exec_22ccbf758579f409(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn009f44, line 2222
static void exec_102eb07677532fc5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn009f44, line 2241
static void exec_42de6f54e00a3f5f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn009f44, line 2286
static void exec_0e761a2e9c46b331(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn00a24c, line 2393
static void exec_e03b392347fb3b09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: fn00a24c, line 2395
static void exec_59c6cd538e93a9e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	*context.getParameter<uint32*>(28) = var7.get<uint32>();
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn02df64, line 2590
static void exec_6038c1f2425090b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn02df64, line 2602
static void exec_3574e69f393d1ca6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn02df64, line 2623
static void exec_b20a03a8ced90beb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: BlueSpheres.replacePlaneRendering, line 2732
static void exec_b5eef9747220dd67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(4);
}

// First occurrence: BlueSpheres.replacePlaneRendering, line 2733
static void exec_9b3d2af4736a4416(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(0, 0);
	context.moveValueStack(1);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2743
static void exec_35210cb4f2073ff1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2748
static void exec_191daceeb8c785eb(const RuntimeOpcodeContext context)
{
}

// First occurrence: BlueSpheres.renderCustomGround, line 2764
static void exec_45ad91f81bfaaa13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(12)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var4.get<uint8>());
}

// First occurrence: BlueSpheres.renderCustomGround, line 2773
static void exec_ca33e623613fc7e1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, (uint8)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2773
static void exec_7eb4cce698e8b2c6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) & (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2777
static void exec_d68ca7384feb78ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) & context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2783
static void exec_a836a747b0f172a6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(6);
}

// First occurrence: BlueSpheres.renderCustomGround, line 2784
static void exec_259a2bcd28968326(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(6);
}

// First occurrence: BlueSpheres.renderCustomCharacterShadows, line 2798
static void exec_b5cdedfb19951734(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: Game.writeBlueSpheresData, line 2811
static void exec_7e5535f2cf3d4d0a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<uint16>(2, swapBytes16(*context.getParameter<uint16*>(12)));
	context.writeValueStack<uint16>(3, swapBytes16(*context.getParameter<uint16*>(20)));
	context.writeValueStack<uint8>(4, *context.getParameter<uint8*>(28));
	context.moveValueStack(5);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2824
static void exec_b63abbc5b1beedd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2865
static void exec_2b9f5909c2a8bfdf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)((uint16)context.getParameter<int64>(4) - var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var6.get<uint16>(), (uint16)context.getParameter<int64>(24)));
	const AnyBaseValue var9((uint16)1);
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint16)(var0.get<uint16>() - var10.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var11.get<uint16>());
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2868
static void exec_3619d2660c430dcb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2871
static void exec_bc6da0cd6a788227(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint64)(uint64)var1.get<uint16>());
	const AnyBaseValue var3((uint64)(context.readValueStack<uint64>(-2) + var2.get<uint64>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int64>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2873
static void exec_ea9138eda8366b1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)context.getParameter<int64>(), (int32)var2.get<int32>()));
	context.writeValueStack<uint32>(0, (var3.get<uint32>() - (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2873
static void exec_80d07c5626b2fd16(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int32)(context.readValueStack<int32>(-1) * (int32)(context.getParameter<int64>())));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var1.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2875
static void exec_35cc9ef5a3936759(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	*context.getParameter<uint16*>(12) = var3.get<uint16>();
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2877
static void exec_0c40da83c8e5c643(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: BlueSpheres.renderCustomSpheres, line 2890
static void exec_72e821adc47b8473(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	context.writeValueStack<uint16>(1, (var5.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)1);
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + var10.get<uint32>()));
	context.writeValueStack<uint8>(2, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var15((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14.get<uint32>()));
	const AnyBaseValue var16((uint16)*context.getParameter<uint16*>(56));
	context.writeValueStack<uint16>(3, (var15.get<uint16>() + var16.get<uint16>()));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(64)));
	const AnyBaseValue var18((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(76)));
	const AnyBaseValue var19((uint32)((uint32)context.getParameter<int64>(68) - var18.get<uint32>()));
	const AnyBaseValue var20((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(80)));
	const AnyBaseValue var21((uint32)(uint32)var20.get<uint8>());
	const AnyBaseValue var23((uint32)(var21.get<uint32>() << (uint32)(context.getParameter<int64>(84) & 0x1f)));
	context.writeValueStack<uint32>(5, (var19.get<uint32>() + var23.get<uint32>()));
	context.writeValueStack<uint32>(6, context.readLocalVariable<uint32>(context.getParameter<uint32>(92)));
	context.moveValueStack(7);
}

// First occurrence: fn02e616, line 337
static void exec_b7727ed4bf76cb63(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn02e616, line 345
static void exec_b5be8f47540827e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 504
static void exec_0263ec2da33c8518(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() | var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint8>());
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 511
static void exec_061a6fcb330eff66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() & (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var9((uint32)(var0.get<uint32>() | var8.get<uint32>()));
	*context.getParameter<uint32*>(28) = var9.get<uint32>();
}

// First occurrence: CheckSaveGameSlotAfterBlueSpheres, line 512
static void exec_ae083c0c346d800f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn02e9d8, line 532
static void exec_e867a7b67c0ff7ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02ea1e, line 570
static void exec_1b8fb1b9045206c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(1, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn02ea1e, line 570
static void exec_67d0e47bf8cebd6a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)(context.readValueStack<uint8>(-2) + context.readValueStack<uint8>(-1)));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.readValueStack<uint32>(-3), var0.get<uint8>());
	context.moveValueStack(-3);
}

// First occurrence: fn02eaa6, line 682
static void exec_c8f3b6b781e30ebd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int64)1);
	context.writeValueStack<uint8>(0, (var7.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02ebe8, line 863
static void exec_e656d5dda41f4000(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) + (uint8)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn02ecd0, line 1001
static void exec_8664d75dd55477ba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn02ed2a, line 1019
static void exec_d04553e4a7672c28(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() * var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn02ed2a, line 1043
static void exec_b8f1164fcd7b6bc8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn02ed2a, line 1046
static void exec_aa728a4d61846e4f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn02ed2a, line 1053
static void exec_ab22dd88687be759(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(uint8)(var6.get<int32>() < var7.get<int32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var8.get<uint8>());
}

// First occurrence: fn02ed2a, line 1067
static void exec_b00bd163885888a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint8)(uint8)(var6.get<uint32>() >= (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: fn085a1a, line 1097
static void exec_0a37dc41b21f29c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn085a1a, line 1105
static void exec_552fff21b77b4f3d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn085a1a, line 1106
static void exec_2c8c8ee7d0b4479f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn032b8c, line 42
static void exec_6c67cc139c0e5cb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn032b8c, line 43
static void exec_c2e718a2f70697ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn036be0, line 24
static void exec_d3a3509095a39444(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn036dfc, line 166
static void exec_e250e041cd60dd43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() > var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 171
static void exec_3d5113513bc33409(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 195
static void exec_a2a2381d913a7355(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn036dfc, line 238
static void exec_aea34c84359d07d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() > var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn036dfc, line 244
static void exec_91adee6657231f9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn036f76, line 288
static void exec_73084c96e47bc2f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	const AnyBaseValue var4((uint8)(var0.get<uint8>() + var3.get<uint8>()));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn037092, line 48
static void exec_c2c85a94a3cd07bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int8)OpcodeExecUtils::safeModulo<int8>((int8)context.readValueStack<int8>(-1), (int8)context.getParameter<int64>()));
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: fn0371be, line 137
static void exec_087d4ccd1a823438(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0371be, line 205
static void exec_6f56b24767b9c689(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0371be, line 221
static void exec_12fde52feee93fbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn0371be, line 224
static void exec_e1dd6b67c389453a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn0371be, line 225
static void exec_2da4c98c8018083b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn0371be, line 228
static void exec_e3bfd31b7c7d5d06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: fn0371be, line 232
static void exec_196b27a1e2e93557(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var6.get<uint32>(), (uint32)context.getParameter<int64>());
}

// First occurrence: fn0371be, line 236
static void exec_2afc40734f0b8c43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn037430, line 301
static void exec_21b5788271825f2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < var2.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn037430, line 301
static void exec_495e690b11ad09ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() < var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 447
static void exec_e235b041cd49c3fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int8>() > var2.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 449
static void exec_dd453e5d95e481f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() >= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn037d7c, line 476
static void exec_24c58be903964898(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
}

// First occurrence: fn037d7c, line 482
static void exec_eb01f14451eb1d68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint32>());
}

// First occurrence: fn037d7c, line 491
static void exec_c3dea3941bccf3d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn037d7c, line 492
static void exec_10347882cc46700d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var4.get<uint32>());
}

// First occurrence: fn0363d0, line 45
static void exec_4a6c830aea3c9170(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((int16)(var6.get<int16>() >> (int16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn0363d0, line 50
static void exec_24033ef6122aa5c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((int16)(var6.get<int16>() >> (int16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn03652a, line 183
static void exec_6a3d5249058642d5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var5.get<uint16>());
}

// First occurrence: fn03675e, line 396
static void exec_bb3f30a7e427bd2f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0367c2, line 454
static void exec_48ef5ab26aa01406(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var9((uint8)(uint8)(var7.get<uint32>() >= (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var9.get<uint8>());
}

// First occurrence: fn0367c2, line 459
static void exec_621df67752f71c18(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() < var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn03684c, line 489
static void exec_7dc4a68d7ae0b1fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03684c, line 501
static void exec_0fe04ee06cb3ba5f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (var4.get<uint16>() & 0x0f)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0368aa, line 536
static void exec_18a87604262ccffb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (uint8)(context.getParameter<int64>(24) & 0x07)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn0368aa, line 538
static void exec_a2251d6bfb7fb122(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() >= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn036926, line 608
static void exec_49b3f4c55142bc05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn036926, line 625
static void exec_5e6214a5e3e888fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn036926, line 627
static void exec_2a203d6524e642e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint8>(0, (var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: fn032c6a, line 18
static void exec_d02504efdd4b8841(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn032c92, line 51
static void exec_cc1dfc4b74c6dec8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn035b16, line 191
static void exec_68c422090673d051(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint8>(2, (var3.get<uint8>() == (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn035b16, line 205
static void exec_40bad60eb4ed220b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn022d54, line 252
static void exec_78ea6c58dc3aba4c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn023b38, line 285
static void exec_494bce7fd1e38c11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint8)(var3.get<uint8>() | var9.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint8>());
}

// First occurrence: fn023caa, line 374
static void exec_b7922ba2f673f94d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn023ed0, line 559
static void exec_d8ba1867b8b952a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn023ed0, line 567
static void exec_71d478e73b7ebf7f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() != var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn035d22, line 703
static void exec_6abf5f75da4e5bcf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn038150, line 832
static void exec_62ee02624f21c8cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn03818e, line 860
static void exec_fb74079fc3dd902a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)-(signed)var3.get<uint16>());
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn0362ce, line 1048
static void exec_57f802acabf4edf3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint8)(var1.get<uint8>() | var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn23a080, line 46
static void exec_61d0386aea0623b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var7.get<uint16>());
}

// First occurrence: InitLevelScrolling.CGZ, line 180
static void exec_8107fefe328a0df4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: InitLevelScrolling.CGZ, line 181
static void exec_d5808f51df71105b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)context.getParameter<int64>(), (uint32)var2.get<uint32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(16), var4.get<uint16>());
}

// First occurrence: fn23a764, line 262
static void exec_432094f76ce7d1ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	*context.getParameter<uint32*>(8) = var4.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn23a81e, line 353
static void exec_e05d2d831e7fce8f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (var3.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn23a81e, line 369
static void exec_eb10546079d69eb6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)0);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
}

// First occurrence: fn23a8b6, line 434
static void exec_678f9c5057ca5e1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (var3.get<int16>() & 0x0f)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn23a8c2, line 441
static void exec_1eb8d529abacd227(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (var3.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn23a912, line 478
static void exec_be59b7f54d393bde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn23a91c, line 486
static void exec_f0cb89d4a9987449(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: GenericObject.Update, line 49
static void exec_1605d58350a071e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0465d6, line 104
static void exec_0eac5f6eae758af8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int32>() > var4.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: DrawObject, line 29
static void exec_964db5cf315c005f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint16>());
}

// First occurrence: DrawObject, line 30
static void exec_7268c7a1abc4bfb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint16>());
}

// First occurrence: shouldUnloadObjectAtPosition, line 86
static void exec_427b53f4e3b08ab3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(12)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint16>() > var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: AddAsDynamicObject, line 178
static void exec_700bfa85657b41f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint16>());
}

// First occurrence: MoveWithParent, line 249
static void exec_3080017530d1589b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn01dcb6_internal, line 401
static void exec_fa51d15d477ed3c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	*context.getParameter<uint8*>(4) = var0.get<uint8>();
}

// First occurrence: fn01dcb6_internal, line 402
static void exec_8f0eccd25523d153(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (var1.get<uint8>() & 0x07)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: fn01dcb6_internal, line 410
static void exec_aaacb73b09e7189a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn01dd24, line 485
static void exec_50bfd6b77ef7727a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() | var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn01de36, line 601
static void exec_2ab24454772b7720(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01de36, line 603
static void exec_162e4688fbbe8255(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn01de36, line 607
static void exec_7ed26cdb99b2be54(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn01de36, line 622
static void exec_04ac66d4ff42fe49(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01de36, line 626
static void exec_dea078aac4ab2e16(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn01de36, line 635
static void exec_f4796b25cef7c488(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() > (int16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn01de36, line 635
static void exec_cb5e2aa9bdc8d250(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01dece, line 662
static void exec_3392bf8175beceb4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn01dece, line 666
static void exec_c5590aaa54bb9e36(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint8)(var4.get<uint8>() - var6.get<uint8>()));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: fn01dece, line 667
static void exec_751e219bd75def0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn08598a, line 794
static void exec_5a178de0b3a0d696(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var0.get<uint32>() + var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn08598a, line 815
static void exec_8e1e433d327bcc26(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn0859ce, line 847
static void exec_650e0ec6f2605661(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int64)(uint64)var1.get<int16>());
	context.writeValueStack<uint64>(0, ((uint64)context.getParameter<int64>() - var2.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: fn0859e2, line 859
static void exec_21d3da0538f95604(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Object.LoadSpritePatterns, line 911
static void exec_151d2bf31ebc9bbc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: Object.LoadSpritePatterns, line 913
static void exec_81fcd5cf5c100c87(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeValueStack<uint16>(1, (var4.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Object.LoadSpritePatterns, line 920
static void exec_e37811c43f86a77b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint32)(var0.get<uint32>() + var7.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var8.get<uint32>());
}

// First occurrence: Object.LoadSpritePatterns, line 921
static void exec_69f74e906d13ad1d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: fn0850a2, line 951
static void exec_fcad3c75cc6a4ae3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: PlayMusicAfterLevelResults, line 1206
static void exec_142b58371bb6306a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: PlayMusicAfterLevelResults, line 1207
static void exec_37895b2bbff29451(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	*context.getParameter<uint8*>(12) = var4.get<uint8>();
}

// First occurrence: PlayMusicAfterLevelResults, line 1209
static void exec_d5c3bb704f34226b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var1.get<uint16>());
}

// First occurrence: Object.AnimationUpdate, line 1322
static void exec_260b4191541b6a60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	*context.getParameter<uint8*>(32) = var9.get<uint8>();
}

// First occurrence: Object.AlternativeAnimationUpdate, line 1374
static void exec_a74f054dda5bd4f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int32>(-1));
	*context.getParameter<uint16*>() = var0.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: Object.AlternativeAnimationUpdate, line 1392
static void exec_3ef980cfbed15972(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)(var0.get<uint8>() - var3.get<uint8>()));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: Object.AlternativeAnimationUpdate, line 1400
static void exec_09bf650cc4949d7d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn01df90, line 1453
static void exec_b8109004d9b38e93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn01e006, line 1494
static void exec_4cc58edd5f3f80b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn01e006, line 1503
static void exec_3367107975ccbb9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn01e006, line 1519
static void exec_18c5e88c4dd727c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var13((uint16)(uint16)var12.get<uint8>());
	const AnyBaseValue var14((uint16)(var8.get<uint16>() + var13.get<uint16>()));
	*context.getParameter<uint16*>(48) = var14.get<uint16>();
}

// First occurrence: fn01e006, line 1536
static void exec_a5c96eb22508d28b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() << (var5.get<uint32>() & 0x1f)));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() | var6.get<uint32>()));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn01e042, line 1608
static void exec_076c77562a3e9b58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() >= var4.get<int16>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(uint8)(var6.get<int16>() > var7.get<int16>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn01e042, line 1618
static void exec_3be11955c7a2516d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() << (var3.get<uint16>() & 0x0f)));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: updateSonicPositionOnMovingObjectInternal, line 1710
static void exec_1ae2db3b412c6499(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: updateSonicPositionOnMovingObjectInternal, line 1711
static void exec_3e71100431f2aa7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * var5.get<uint8>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn01e21e, line 1725
static void exec_3b7d904ef291d309(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn01e21e, line 1728
static void exec_ea5479c0c62ae052(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var14((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13.get<uint32>()));
	const AnyBaseValue var15((uint16)(uint16)var14.get<uint8>());
	const AnyBaseValue var16((uint16)(var10.get<uint16>() - var15.get<uint16>()));
	*context.getParameter<uint16*>(48) = var16.get<uint16>();
}

// First occurrence: fn01e240, line 1740
static void exec_f3d47e896ad06055(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint16)1);
	const AnyBaseValue var12((uint16)(var10.get<uint16>() >> (var11.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(40) = var12.get<uint16>();
}

// First occurrence: PlatformCheckClimbOnForCharacterA1, line 1806
static void exec_32205c132a3815d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)-(signed)var1.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var2.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: CheckCharacterClimbOnObjectInner, line 1971
static void exec_c1575a13794dbf3d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var5.get<uint16>() - var10.get<uint16>()));
	const AnyBaseValue var13((uint16)(var11.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	*context.getParameter<uint16*>(48) = var13.get<uint16>();
}

// First occurrence: CheckCharacterClimbOnObjectInner, line 1977
static void exec_3bddfa3a23eebdaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn01e45a, line 1990
static void exec_9731316e98088787(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var5.get<uint16>() - var10.get<uint16>()));
	const AnyBaseValue var13((uint16)(var11.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	*context.getParameter<uint16*>(48) = var13.get<uint16>();
}

// First occurrence: fn01e45a, line 1996
static void exec_752ef9e721be3e8b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn01e50e, line 2049
static void exec_272e689d706eed23(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn01e546, line 2070
static void exec_6a64508ea501cd53(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn0858f8, line 2116
static void exec_635a5367dece7648(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(48) = var10.get<uint16>();
}

// First occurrence: Object.AnimationProgress, line 2165
static void exec_ebd91982b96a89a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint8>());
	*context.getParameter<uint32*>(24) = var10.get<uint32>();
}

// First occurrence: fn084428, line 2193
static void exec_e9d786ccf19eabff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((int64)(uint64)var1.get<int8>());
	context.writeValueStack<uint64>(0, ((uint64)context.getParameter<int64>() - var2.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: fn084440, line 2224
static void exec_3e440eeedbe2fad4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int32)(uint32)var7.get<int8>());
	const AnyBaseValue var9((uint32)(var0.get<uint32>() + var8.get<uint32>()));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: Object.AnimationProgress.CheckFlipX, line 2269
static void exec_44ac4b1e873a69ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	*context.getParameter<uint32*>(16) = var7.get<uint32>();
}

// First occurrence: fn0844ce, line 2363
static void exec_80c7b4aaa9a1065c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)0);
	context.writeValueStack<uint8>(0, (var6.get<uint8>() != var7.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn01b666, line 2384
static void exec_1ef73d52c946e22d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn01e7e2, line 31
static void exec_1fa0344e4b3bd239(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn01e85c, line 56
static void exec_03bb807da5488588(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn01e8c6, line 105
static void exec_af770fcfa38df184(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn01e8c6, line 123
static void exec_81621ba281ec9ee1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + var6.get<uint8>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn0865de, line 122
static void exec_456ac86962bd5805(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: fn08662a, line 225
static void exec_10c824c03e8f8e0f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint16>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(1, (var1.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn08662a, line 226
static void exec_f7d5f60a7ab3efbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: fn08662a, line 229
static void exec_f80d1856882bf370(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int16>() <= var4.get<int16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn08662a, line 229
static void exec_7a685ec344d24b5e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) + context.readValueStack<uint32>(-1)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-3), var0.get<uint32>());
	context.moveValueStack(-3);
}

// First occurrence: fn086a7a, line 439
static void exec_fa5c7c0203079604(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn086a7a, line 478
static void exec_4308623da2a43317(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn0868b6, line 569
static void exec_680330190f99ed02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn068074, line 660
static void exec_61ee75765abf6337(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & var1.get<uint32>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint32>() == var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn08b616, line 724
static void exec_f49c164da4a2636d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(-1, (var2.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: Checkpoint.Init, line 50
static void exec_a17e1518d3a0bb10(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() >= var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02d10a, line 164
static void exec_94c8161a13af2d99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: Checkpoint.selectBonusStage, line 221
static void exec_3f3cfcc33be00bb4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var5((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var4.get<uint16>(), (uint16)var5.get<uint16>()));
	const AnyBaseValue var7((int8)(uint8)var6.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var7.get<uint8>());
}

// First occurrence: fn02d3c8, line 277
static void exec_5841881e28dfa944(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn02d3c8, line 281
static void exec_6d7e78a32e374b56(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var6.get<uint8>());
}

// First occurrence: fn02d47e, line 359
static void exec_b9a06a4f8dd8f75a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn02d47e, line 379
static void exec_8e31c04d83572b49(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn02d47e, line 423
static void exec_2f5bdd7fe929184f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)1);
	const AnyBaseValue var8((uint16)(var6.get<uint16>() >> (var7.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(24) = var8.get<uint16>();
}

// First occurrence: fn01bb7e, line 459
static void exec_e25f16c6f41b1459(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: GiantRing.Init, line 28
static void exec_00842d1d7961ddf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: GiantRing.Grant50Rings, line 168
static void exec_0d9120000a960687(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint8>());
	const AnyBaseValue var8((uint32)(var2.get<uint32>() << (var7.get<uint32>() & 0x1f)));
	const AnyBaseValue var9((uint32)(var1.get<uint32>() | var8.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var9.get<uint32>());
}

// First occurrence: isSonicAndKnucklesZone, line 308
static void exec_4c7bb3a86a5317fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
}

// First occurrence: fn0618fc, line 344
static void exec_4a7f92127efa2d9c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var5.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() + (uint16)(context.getParameter<int64>(40))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var11.get<uint16>());
}

// First occurrence: Monitor.getRandomMonitorType, line 52
static void exec_a1ae0495c74138c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() ^ var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() ^ var10.get<uint16>()));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var11.get<uint16>(), (uint16)context.getParameter<int64>(40)));
	const AnyBaseValue var14((int8)(uint8)var13.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), var14.get<uint8>());
}

// First occurrence: Monitor.getRandomizedType, line 148
static void exec_0f586ba56b6f9cb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var12((uint16)(var10.get<uint16>() >> (uint16)(context.getParameter<int64>(40) & 0x0f)));
	const AnyBaseValue var13((uint16)(var1.get<uint16>() ^ var12.get<uint16>()));
	const AnyBaseValue var15((uint16)(var13.get<uint16>() & (uint16)(context.getParameter<int64>(48))));
	const AnyBaseValue var16((int8)(uint8)var15.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(56), var16.get<uint8>());
}

// First occurrence: Monitor.getRandomizedType, line 162
static void exec_6d2ae09187536cbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, ((uint8)context.getParameter<int64>() + var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Monitor.getRandomizedType, line 176
static void exec_dfed20d43071f43a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: MonitorIntact.UpdateDefault, line 311
static void exec_cb24b69b8c6c4916(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: MonitorIntact.UpdateDefault, line 312
static void exec_a6f258ffad854009(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: ItemEffect.Init, line 616
static void exec_e7cfc59a5e3e7ac5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<int16>(1, (uint16)var2.get<int32>());
	context.moveValueStack(2);
}

// First occurrence: ItemEffect.ApplyRobotnik, line 710
static void exec_1d9dce772be13ed3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: ItemEffect.applyShield, line 793
static void exec_cfc682a749dccc89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() | var5.get<uint8>()));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() | var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint8>());
}

// First occurrence: ItemEffect.applyShield, line 799
static void exec_72b7ca5629f3c4e6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() == (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: ItemEffect.applyShield, line 805
static void exec_8bb0ac29518ea037(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint32>());
}

// First occurrence: ItemEffect.applyShield, line 806
static void exec_380b7cdeefdb7dbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: DynamicRing.Update, line 57
static void exec_092601b68cd29029(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: DynamicRing.UpdateAttraction, line 115
static void exec_fbd93cfb84e9f4d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: DynamicRing.UpdateAttraction, line 139
static void exec_30e2d59a1cb0314e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((int16)OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(12)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var3.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: SpillRings, line 247
static void exec_46c8001171655c91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
}

// First occurrence: SpillRings, line 248
static void exec_296b6162c80da5ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-1) << (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(4) = var2.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn01a75c, line 302
static void exec_3e1936079d6f9bea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int8)(uint8)var5.get<int32>());
	*context.getParameter<uint8*>(24) = var6.get<uint8>();
}

// First occurrence: fn01a75c, line 311
static void exec_b360067f6af983b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() - var9.get<uint16>()));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: LightningShield.Update, line 238
static void exec_ad32857904412af6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint32>(1, (uint32)var0.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: Invincibility.Update, line 483
static void exec_fe661f3319087ce0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(1, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint8>(2, (var6.get<uint8>() & var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: Invincibility.Trail.Update, line 514
static void exec_7859acb84cec0901(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	*context.getParameter<uint8*>(16) = var4.get<uint8>();
}

// First occurrence: Invincibility.Trail.Update, line 515
static void exec_8ad3cc04845d60ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn01898a, line 564
static void exec_bab9fd2bf797afbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var0.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(24) = var9.get<uint16>();
}

// First occurrence: fn083708, line 54
static void exec_0202b176b91c2c31(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var10.get<uint16>());
}

// First occurrence: fn083708, line 55
static void exec_c6feef42e915c7b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	*context.getParameter<uint32*>(20) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var7.get<uint16>());
}

// First occurrence: fn083708, line 90
static void exec_3a2be721502b8291(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	context.writeValueStack<uint8>(0, (var3.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn083708, line 90
static void exec_ae7f5f6b4e9ac049(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) * (uint8)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var3.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn083708, line 91
static void exec_b98347495ee5006d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.moveValueStack(2);
}

// First occurrence: fn083708, line 104
static void exec_f6f256fbda6e13b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(-1, (var2.get<uint8>() > (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: fn083708, line 104
static void exec_ba31b61fae199fd0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: fn083708, line 116
static void exec_be6648a5d6fd6442(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() > (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn083708, line 119
static void exec_f45a9852d6ead5d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fn083708, line 121
static void exec_a7407466dfd6c8aa(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(5, (var3.get<uint8>() - (uint8)(context.getParameter<int64>(48))));
	context.moveValueStack(6);
}

// First occurrence: fn083832, line 209
static void exec_131689bacda3d423(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() >= (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn0838c2, line 248
static void exec_edbf7f8dba4b4c05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn0839a2, line 329
static void exec_6d9993ba95175880(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn0839ea, line 342
static void exec_6a89b68b526e5484(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	context.writeValueStack<uint8>(2, (uint8)(var6.get<uint16>() >= var10.get<uint16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: Spikes.Init, line 54
static void exec_74475ab68f0eca06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn02438a, line 308
static void exec_499839915f194055(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() & var3.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn02438a, line 308
static void exec_993b8dc4fc18897b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() >= var4.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: SpringVertical.updateInternal, line 223
static void exec_8f77da82fbece342(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var6((int64)1);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() & var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: SpringHorizontal.Update, line 257
static void exec_e4fc92b6fc31ce3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() << (var3.get<uint16>() & 0x0f)));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() & var4.get<uint16>()));
	*context.getParameter<uint16*>(12) = var5.get<uint16>();
}

// First occurrence: SpringVertical.ApplyToCharacter, line 362
static void exec_887833cd785e84bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: SpringHorizontal.Update.CompetitionMode, line 475
static void exec_f90b9a0e619c0e57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	*context.getParameter<uint32*>(12) = var3.get<uint32>();
}

// First occurrence: SpringDiagonal.updateInternal, line 766
static void exec_9ec83f3865878889(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (var5.get<uint32>() & 0x1f)));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint32>(0, (var6.get<uint32>() & var7.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: AfterImages.Update, line 46
static void exec_66269fd6b4902e1d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, *context.getParameter<uint8*>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(1, (var0.get<uint8>() & var1.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: AfterImages.Update, line 46
static void exec_d1b2936a49f6b6bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)(context.readValueStack<uint8>(-2) - context.readValueStack<uint8>(-1)));
	*context.getParameter<uint8*>() = var0.get<uint8>();
	context.moveValueStack(-2);
}

// First occurrence: fn018cb6, line 218
static void exec_0ccc591b3d63c907(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() != (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn01e626, line 57
static void exec_377d861f7fcbd107(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() | (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn019348, line 29
static void exec_038e77b229081394(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn019348, line 30
static void exec_0ca6177b16bb678b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn0193ec, line 121
static void exec_8e62122f76c0286c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn0193ec, line 122
static void exec_0f8193d3636e5a66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var5.get<uint16>() | var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn01a292, line 143
static void exec_8190e0a710eac2a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn01a37a, line 234
static void exec_df878b2b91b636ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: fn01a37a, line 247
static void exec_8727aeb70b1b3106(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0191a4, line 46
static void exec_15da68d8d8dedfde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(24) & 0x0f)));
	context.writeValueStack<int64>(2, (uint64)var5.get<int16>());
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint8>(3, (var6.get<uint8>() & var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(4);
}

// First occurrence: fn0191a4, line 46
static void exec_d9a5dbdbb14a2888(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int64>(-1));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-2) + var0.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var1.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn02f9ca, line 92
static void exec_15205b79567b0f10(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn02fa50, line 199
static void exec_eaac3b0d45bdfb17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)(context.readValueStack<uint32>(-2) + var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn02fa50, line 208
static void exec_e1e0d224ef791325(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(var1.get<uint32>() == var2.get<uint32>()));
}

// First occurrence: fn02fa50, line 224
static void exec_2c37b28d89f6ba15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)(context.readValueStack<uint32>(-2) + var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn02fbb2, line 277
static void exec_0a8436fb3375891a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02fbb2, line 277
static void exec_427f2b6edc1a325c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn020630, line 32
static void exec_887734f5c348d146(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn020630, line 34
static void exec_b873c712ea04ae84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (uint8)(context.getParameter<int64>(24) & 0x07)));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn020630, line 47
static void exec_103b5cf76f744d9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn020752, line 81
static void exec_b3bc83a1e3cc8a07(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() << (uint8)(context.getParameter<int64>(24) & 0x07)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn020bba, line 462
static void exec_948792e85f205b34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)(var0.get<uint8>() - var5.get<uint8>()));
	*context.getParameter<uint8*>(24) = var6.get<uint8>();
}

// First occurrence: fn038688, line 54
static void exec_5e027ec7d166c5e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn038688, line 71
static void exec_0d9be5b716810aaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn0387b6, line 119
static void exec_b366280c70948ed5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn0387e0, line 167
static void exec_ddf80f0828bea5c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(1, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int8>() < var4.get<int8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn0389de, line 305
static void exec_5c69f3674bfc9ce9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn038aa2, line 360
static void exec_bd0046d294706210(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint16>());
	*context.getParameter<uint32*>(40) = var11.get<uint32>();
}

// First occurrence: fn038aa2, line 371
static void exec_723aff3cbaae38f6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint32)(var2.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn038aa2, line 394
static void exec_7959b5f4c1a01c60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn038cc2, line 416
static void exec_f83bf99cf56457a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn038cc2, line 421
static void exec_f155e55d708c8e20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(16) = var8.get<uint32>();
}

// First occurrence: fn038cc2, line 447
static void exec_58c691015cf20402(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn038b44, line 677
static void exec_2dd1f5e958dc9a84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var4((int32)(var2.get<int32>() * (int32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn038d74, line 800
static void exec_011d337bc78fad55(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	*context.getParameter<uint32*>(8) = var4.get<uint32>();
}

// First occurrence: fn0205de, line 163
static void exec_89e78f66e2f08790(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)(var0.get<uint8>() << (var3.get<uint8>() & 0x07)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var4.get<uint8>());
}

// First occurrence: fn024d9a, line 43
static void exec_e2cb3404a2db8059(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: MovingPlatform.Init, line 45
static void exec_0236b3b51c1590c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: MovingPlatform.Init, line 57
static void exec_6e9d25a884b83cda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: getMovingPlatformOffset, line 154
static void exec_89beb6b482f87d5d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: getMovingPlatformOffset2, line 162
static void exec_6e3f8eee2c039fdd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() >> (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: getMovingPlatformOffset2, line 164
static void exec_91badd3d658b4c16(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() >> (var2.get<uint8>() & 0x07)));
	context.writeValueStack<uint16>(0, (uint16)var3.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn01fc66, line 293
static void exec_affd544385776d24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: Rocks.BreakWall, line 482
static void exec_0f06636485d3502e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn02015c_internal, line 665
static void exec_7901786442d191de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn02015c_internal, line 667
static void exec_a18d049898909852(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() | (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0200cc, line 771
static void exec_f9d3f27bf48866fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (var1.get<uint32>() & 0x1f)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
}

// First occurrence: fn0200cc, line 772
static void exec_903fe542dcbf90fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn0200cc, line 790
static void exec_cd83a23bb213e52b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)((uint8)context.getParameter<int64>() - var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() | (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn0201c4, line 805
static void exec_3564320e5cc749e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn03301c, line 238
static void exec_0f2315d61b0ac9ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0862b4, line 32
static void exec_e99025776563ad72(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn0862b4, line 34
static void exec_50c15b57bdfa015d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn0862fe, line 46
static void exec_aa0d1d081a2a5566(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var11.get<uint16>());
}

// First occurrence: fn0862fe, line 47
static void exec_728845253fe17bea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var9.get<uint16>());
}

// First occurrence: fn0862fe, line 49
static void exec_ef593d35ba4f9362(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(3, (uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	context.writeValueStack<uint16>(4, ((uint16)context.getParameter<int64>(40) - var10.get<uint16>()));
	context.writeValueStack<int64>(5, 1);
	context.moveValueStack(6);
}

// First occurrence: fn086308, line 71
static void exec_d1f3df69e05ac810(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: fn0456f4, line 202
static void exec_44e1d9c9f14f11a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() >= (int8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn045bf4, line 411
static void exec_1286c9d2c94c4716(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn045bf4, line 412
static void exec_35d950660c07d467(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0459b4, line 838
static void exec_c49a32f96e4ea12b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn0459b4, line 841
static void exec_bb326a59cd1e0027(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn03fbc4, line 64
static void exec_0fb233fe5aab58e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var15((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14.get<uint32>()));
	const AnyBaseValue var16((uint16)(var11.get<uint16>() - var15.get<uint16>()));
	*context.getParameter<uint16*>(56) = var16.get<uint16>();
}

// First occurrence: fn03fbc4, line 87
static void exec_6a4d35d6fac4e65b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() - var10.get<uint16>()));
	const AnyBaseValue var12((uint32)(uint32)var11.get<uint16>());
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	*context.getParameter<uint32*>(48) = var14.get<uint32>();
}

// First occurrence: fn044a0c, line 23
static void exec_0d4ed9b914cbe9d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn021568, line 241
static void exec_e1c2a059dc7fb2b5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01ec18, line 23
static void exec_f236aa814468ec57(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (var6.get<uint8>() & 0x07)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn01f3f8, line 86
static void exec_0fee9fd3b241c4e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)1);
	const AnyBaseValue var10((uint16)(var8.get<uint16>() >> (var9.get<uint16>() & 0x0f)));
	const AnyBaseValue var11((int8)(uint8)var10.get<int16>());
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint8>());
}

// First occurrence: fn01f3f8, line 87
static void exec_8c1d38f26111b338(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)1);
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var11((int8)(uint8)var10.get<int16>());
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint8>());
}

// First occurrence: BlockerElement.DoDamage, line 189
static void exec_4f380f345554d488(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 330
static void exec_8b170a9df55f7300(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var9.get<uint16>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var17((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var16.get<uint32>()));
	const AnyBaseValue var18((uint16)(uint16)var17.get<uint8>());
	const AnyBaseValue var19((uint16)(var13.get<uint16>() - var18.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var19.get<uint16>());
	const AnyBaseValue var20((uint32)*context.getParameter<uint32*>(64));
	const AnyBaseValue var22((uint32)(var20.get<uint32>() + (uint32)(context.getParameter<int64>(72))));
	const AnyBaseValue var23((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var22.get<uint32>()));
	const AnyBaseValue var24((uint16)(uint16)var23.get<uint8>());
	const AnyBaseValue var26((int16)(var24.get<int16>() * (int16)(context.getParameter<int64>(80))));
	context.writeValueStack<int32>(2, (uint32)var26.get<int16>());
	context.writeValueStack<uint32>(3, *context.getParameter<uint32*>(88));
	context.writeValueStack<uint32>(4, (uint32)context.getParameter<int64>(96));
	context.moveValueStack(5);
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 330
static void exec_1b903e4ed760c68c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) + context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>())));
	context.writeValueStack<int32>(-2, (uint32)var4.get<int16>());
	context.writeValueStack<uint32>(-1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
}

// First occurrence: BlockerElement.checkForUnloadAndDebugRender, line 331
static void exec_1a075ef1ed57fabb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) + context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>())));
	context.writeValueStack<int32>(-2, (uint32)var4.get<int16>());
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var8((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var12((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var10.get<uint32>(), (uint32)context.getParameter<int64>(32)));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() << (uint32)(context.getParameter<int64>(40) & 0x1f)));
	context.writeValueStack<uint32>(-1, (var7.get<uint32>() + var14.get<uint32>()));
}

// First occurrence: fn02c8b8, line 85
static void exec_f87762e0d4ce1a37(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn02c8b8, line 87
static void exec_352df675c5dbbb1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn02c8b8, line 101
static void exec_ff1dd43adb3548c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & var0.get<uint32>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	*context.getParameter<uint16*>() = var2.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn02c8b8, line 120
static void exec_dc65363f7f83aacf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn02c9e0, line 181
static void exec_1af47f699696c29b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn02c9e0, line 182
static void exec_4c442a524b23e949(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() != var4.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn02cae4, line 274
static void exec_f1d371e1685ae2a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: PathSwapperInit, line 33
static void exec_93e323639b874031(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: PathSwapperBaseUpdateVertical, line 117
static void exec_7e96a2c8cfb6bbe5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint16>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var14.get<uint16>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(56));
	const AnyBaseValue var15((uint32)*context.getParameter<uint32*>(64));
	const AnyBaseValue var17((uint32)(var15.get<uint32>() + (uint32)(context.getParameter<int64>(72))));
	const AnyBaseValue var18((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var17.get<uint32>()));
	const AnyBaseValue var20((uint16)(var18.get<uint16>() * (uint16)(context.getParameter<int64>(80))));
	context.writeValueStack<uint32>(3, (uint32)var20.get<uint16>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(88));
	context.moveValueStack(5);
}

// First occurrence: PathSwapperUpdateVertical, line 158
static void exec_a364e9e3e8016225(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() == var2.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
}

// First occurrence: PathSwapperUpdateVertical, line 162
static void exec_b886eeab27c96816(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() > var4.get<uint16>()));
	const AnyBaseValue var6((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 165
static void exec_94b41a6eab661255(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - var2.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: PathSwapperUpdateVertical, line 169
static void exec_8790014ea2b2fc1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 169
static void exec_48991d7a308813a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperUpdateVertical, line 185
static void exec_114971ed5e11e877(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var6((uint8)((uint8)context.getParameter<int64>(16) >> (var5.get<uint8>() & 0x07)));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() & var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: PathSwapperBaseUpdateHorizontal, line 226
static void exec_35ca11ed74eb1c79(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var8.get<uint16>());
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var14((uint16)(var12.get<uint16>() - (uint16)(context.getParameter<int64>(48))));
	context.writeValueStack<uint32>(1, (uint32)var14.get<uint16>());
	const AnyBaseValue var15((uint32)*context.getParameter<uint32*>(56));
	const AnyBaseValue var17((uint32)(var15.get<uint32>() + (uint32)(context.getParameter<int64>(64))));
	const AnyBaseValue var18((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var17.get<uint32>()));
	const AnyBaseValue var20((uint16)(var18.get<uint16>() * (uint16)(context.getParameter<int64>(72))));
	context.writeValueStack<uint32>(2, (uint32)var20.get<uint16>());
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(80));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(88));
	context.moveValueStack(5);
}

// First occurrence: fn084a48, line 19
static void exec_1c7f06bb304eab7b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn084a76, line 39
static void exec_d8799f9d68c0ed59(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn084ad2, line 78
static void exec_e4eb56c7e5dc5eda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn02acdc, line 59
static void exec_81dcc5b05b1c9bd9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), (uint16)context.getParameter<int64>());
}

// First occurrence: fn02a94c, line 27
static void exec_387bdbc7d3dd5cd7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn02aa7e, line 114
static void exec_7fe3b18a2c95f76e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() >= var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02aa7e, line 120
static void exec_ddf90ed4dec637b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn02ac08, line 222
static void exec_4722e33c311d67dc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var8((uint16)(var2.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: AIZ_ForegroundDeco_shared, line 46
static void exec_a6944f5cffc34f5d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: AIZ_ForegroundDeco_shared, line 48
static void exec_d024cd484c66c623(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	const AnyBaseValue var8((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var9((uint16)(uint16)var8.get<uint8>());
	const AnyBaseValue var10((int16)(var7.get<int16>() >> (var9.get<int16>() & 0x0f)));
	const AnyBaseValue var11((int32)(uint32)var10.get<int16>());
	const AnyBaseValue var12((uint32)(var0.get<uint32>() + var11.get<uint32>()));
	const AnyBaseValue var13((int16)(uint16)var12.get<int32>());
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16.get<uint32>(), var13.get<uint16>());
}

// First occurrence: fn02c37a, line 97
static void exec_895ad12fc5b4445f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	const AnyBaseValue var9((int16)(var7.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((int32)(uint32)var9.get<int16>());
	const AnyBaseValue var11((uint32)(var0.get<uint32>() + var10.get<uint32>()));
	const AnyBaseValue var12((int16)(uint16)var11.get<int32>());
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn02c37a, line 98
static void exec_656f9a9a6853003a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var9((uint32)(var0.get<uint32>() + var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int32>());
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn01f7ce, line 149
static void exec_694cbf2df76868b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() >= var1.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01f914, line 223
static void exec_02b38053ec2f697a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
}

// First occurrence: fn01f914, line 225
static void exec_570dfac3cec02e73(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: fn01f914, line 226
static void exec_5d27c1dd393c2d83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() << (uint16)(context.getParameter<int64>(20) & 0x0f)));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn01f914, line 229
static void exec_70e5835a9e9524c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() >> (uint16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() - var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: fn01f914, line 233
static void exec_1169cd9d555b0c60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (var3.get<uint32>() & 0x1f)));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn02b8ee, line 168
static void exec_f0e416903edbed7f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn02248a, line 131
static void exec_0a7a91a4f3a8a040(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn02248a, line 132
static void exec_db2f0e0d7ff7f86e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var2((int32)(var0.get<int32>() * (int32)(context.getParameter<int64>())));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn02248a, line 144
static void exec_21ef0a0539106f4c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02248a, line 154
static void exec_2e678d2fb631a71f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() > var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02248a, line 163
static void exec_fe3a1db990bd6974(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn02248a, line 164
static void exec_632b7313cf6d09f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (uint8)(context.getParameter<int64>(24) & 0x07)));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: AIZWaterfallRock.Init, line 36
static void exec_c54863c78d41e8e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() & var9.get<uint16>()));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: AIZWaterfallRock.Init, line 39
static void exec_ba06c06388c5673b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((int8)(uint8)var2.get<int16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: AIZWaterfall.Init, line 32
static void exec_fdc4e4d99d2df862(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint16>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() << (var10.get<uint32>() & 0x1f)));
	const AnyBaseValue var12((int16)(uint16)var11.get<int32>());
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint16>());
}

// First occurrence: AIZWaterfall.Update, line 43
static void exec_1368fdabf6fc3856(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() & var9.get<uint16>()));
	const AnyBaseValue var11((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var10.get<uint16>() == var11.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: AIZZipLine.Init, line 25
static void exec_881fe4157427a8e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var10((uint16)(var8.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((uint16)(var10.get<uint16>() << (uint16)(context.getParameter<int64>(40) & 0x0f)));
	const AnyBaseValue var13((uint16)(var3.get<uint16>() + var12.get<uint16>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16.get<uint32>(), var13.get<uint16>());
}

// First occurrence: fn021e14, line 167
static void exec_52e90f67825cf919(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(uint16)context.readValueStack<uint8>(-1));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)(context.readValueStack<uint16>(-2) - var2.get<uint16>()));
	*context.getParameter<uint16*>(8) = var3.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn021f14, line 265
static void exec_9cfe44ce0ccda122(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) << (uint16)(context.getParameter<int64>() & 0x0f)));
	*context.getParameter<uint16*>(8) = var1.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: AIZZipLine.BaseUpdate, line 399
static void exec_76ab835d37e122f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
}

// First occurrence: fn022040, line 438
static void exec_bfa45dde2f8f81f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var4.get<uint8>());
}

// First occurrence: fn022040, line 439
static void exec_fa0b65fb97062035(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int16>(0, (uint16)context.getParameter<int64>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: fn022040, line 439
static void exec_64c8926f14275a8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>() & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn022040, line 440
static void exec_1c788c9de242eff7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn0220c2, line 479
static void exec_02a7cb38515072aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0220c2, line 481
static void exec_1ee064dcad67fe78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() << (uint16)(context.getParameter<int64>(32) & 0x0f)));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn0220c2, line 501
static void exec_d7c6f1efb61275e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) << (uint16)(context.getParameter<int64>() & 0x0f)));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn0221ec, line 544
static void exec_8c1485a83f81d27a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn02219e, line 571
static void exec_818c3f4611946c67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn022258, line 604
static void exec_5876d9f09b41e427(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(12) & 0x0f)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: fn022258, line 612
static void exec_7bf3160a2cb57567(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) * (int16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)OpcodeExecUtils::safeDivide<int16>((int16)var1.get<int16>(), (int16)context.getParameter<int64>(8)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn022258, line 614
static void exec_6bfd30e22e324cf6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	context.writeValueStack<uint8>(0, !var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn01f3ca, line 36
static void exec_5dfa89a698bd2ec0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn01ed26, line 18
static void exec_05ca182b58a39e25(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn01ed26, line 25
static void exec_087047638e780927(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn01ed26, line 29
static void exec_8cd7d99c7c5911c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn01edec, line 116
static void exec_62f7906f75b01d47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint8)~var4.get<uint8>());
	const AnyBaseValue var6((uint8)(var1.get<uint8>() & var5.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var6.get<uint8>());
}

// First occurrence: fn01edec, line 140
static void exec_415848575f35b540(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() >= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn01edec, line 162
static void exec_a586a1fd34f7c388(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)(var2.get<uint8>() << (var5.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)(var1.get<uint8>() | var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<uint32>(), var7.get<uint8>());
}

// First occurrence: fn01eeec, line 192
static void exec_94c77ff71ac48eb1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((uint32)1);
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - var7.get<uint32>()));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn01f188, line 395
static void exec_2d239a2d575db278(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn031164, line 20
static void exec_fe5f5f62128c7757(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() != var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn031164, line 32
static void exec_0b1ac65fe89ddbf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn0311c4, line 71
static void exec_2059c7adb1c5c312(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0311c4, line 79
static void exec_5a8d2fe2fe683b03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn031226, line 172
static void exec_2ed7ca059ee1efa9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: fn031226, line 173
static void exec_3c4d0ecd4b6ffb0c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint16>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: fn031226, line 175
static void exec_2e5ecc937eee47e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(20))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03145a, line 264
static void exec_0edfcd84ebe64d60(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint8>());
	const AnyBaseValue var12((uint32)(var6.get<uint32>() + var11.get<uint32>()));
	*context.getParameter<uint32*>(40) = var12.get<uint32>();
}

// First occurrence: fn031502, line 277
static void exec_2875b9b8aa08e5be(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: fn03159e, line 334
static void exec_879fb9ce7214ef42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn03159e, line 335
static void exec_fd835ef4287ed097(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() + var10.get<uint16>()));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn031626, line 384
static void exec_d52ce162582fe167(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03909c, line 36
static void exec_51ac9cf2299723ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	*context.getParameter<uint8*>(32) = var8.get<uint8>();
}

// First occurrence: fn0390c2, line 56
static void exec_425380c550cc9b7d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint16>(1, (uint16)var1.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn0390c2, line 65
static void exec_a4bc096e7653d63a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn03925c, line 196
static void exec_020246c17d0fda56(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn03931e, line 241
static void exec_f8be47747734b5c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn030580, line 39
static void exec_475c8b7d7bb4cae4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn030580, line 40
static void exec_3e3db7800b322ab2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() | (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn030580, line 50
static void exec_b69e634163fee080(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() << (uint16)(context.getParameter<int64>(32) & 0x0f)));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn03064e, line 139
static void exec_6aff399dfb238e21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03077e, line 188
static void exec_ed869c676f274070(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var11((uint16)(var8.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var15((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14.get<uint32>()));
	const AnyBaseValue var16((uint16)(var11.get<uint16>() - var15.get<uint16>()));
	const AnyBaseValue var17((uint32)(uint32)var16.get<uint16>());
	*context.getParameter<uint32*>(56) = var17.get<uint32>();
}

// First occurrence: fn03077e, line 201
static void exec_b9c6d1a35804f18e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn030834, line 245
static void exec_214ee06a0f70e614(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(uint8)(var3.get<uint16>() <= var6.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var7.get<uint8>());
}

// First occurrence: fn030834, line 248
static void exec_55d63957c38424a6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0308fa, line 330
static void exec_c89a1971022bc130(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn030a38, line 450
static void exec_02f974a1a9edc58d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var15((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14.get<uint32>()));
	const AnyBaseValue var16((uint16)(var11.get<uint16>() - var15.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(56), var16.get<uint16>());
}

// First occurrence: fn030a38, line 451
static void exec_448b9d2854ebaf95(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn030a38, line 453
static void exec_7e410533333e255b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	*context.getParameter<uint16*>(20) = var5.get<uint16>();
}

// First occurrence: fn030b58, line 51
static void exec_df59acb259c36646(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var7.get<uint16>());
}

// First occurrence: fn032656, line 26
static void exec_90a1901a2ab71d20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn032784, line 180
static void exec_8f28fdd332e4d3d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn032784, line 186
static void exec_6655c608befd90db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int32>() < var1.get<int32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn032784, line 188
static void exec_85e724624601a82e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) >> (uint32)(context.getParameter<int64>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn032784, line 193
static void exec_46733a5808e7b8e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(context.readValueStack<uint16>(-1) + var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn032784, line 195
static void exec_3104c68a4abcde35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn038534, line 146
static void exec_5cfd482db125651b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var9((uint8)1);
	const AnyBaseValue var10((uint8)(var8.get<uint8>() & var9.get<uint8>()));
	*context.getParameter<uint8*>(32) = var10.get<uint8>();
}

// First occurrence: fn03857e, line 162
static void exec_f80b1b1aea8c2154(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint16>());
	const AnyBaseValue var11((uint32)1);
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + var11.get<uint32>()));
	*context.getParameter<uint32*>(32) = var12.get<uint32>();
}

// First occurrence: fn03857e, line 183
static void exec_d6f78b81c07dea86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn025770, line 75
static void exec_22e799deb8ffd320(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint16)(var4.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((int64)0);
	const AnyBaseValue var11((uint8)(uint8)(var9.get<uint16>() != var10.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var11.get<uint8>());
}

// First occurrence: fn0382ba, line 35
static void exec_e8ec945f0652b243(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn03003c, line 118
static void exec_4e440023eccb62f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn030338, line 348
static void exec_813835ef7981cb54(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() - var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: fn030338, line 349
static void exec_27b31da55495c83f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + var2.get<uint16>()));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn030338, line 351
static void exec_45ba60dfe62e97fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn0340cc, line 47
static void exec_b8f2c791c9d04dbe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn0341fa, line 105
static void exec_9f627a849f095ac7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int8>() < var4.get<int8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn034728, line 61
static void exec_a6ac86039d7a33db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn03438e, line 54
static void exec_1b28ac4d2fcc5e5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn03438e, line 57
static void exec_daa826951c1f9f43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn034c54, line 103
static void exec_b52b5f9662eaad69(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((int32)(var1.get<int32>() * var6.get<int32>()));
	const AnyBaseValue var9((int32)(var7.get<int32>() >> (int32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var10((int16)(uint16)var9.get<int32>());
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn034c54, line 135
static void exec_bc5a2fda9abb1ce5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn034e6e, line 236
static void exec_0cf51785a6dad6b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn034f04, line 290
static void exec_978f2ce275dbebe1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn034f04, line 290
static void exec_6881795d98862aa0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint8>(-1));
	context.moveValueStack(-1);
}

// First occurrence: fn034f6a, line 337
static void exec_d4f06d9b6a17e65a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn034fbc, line 419
static void exec_eda2d51666f697ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn035202, line 538
static void exec_2a2f9dd2d93feafa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn035202, line 553
static void exec_dafea03c8b2f5ebe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var11((uint16)(var9.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn03555c, line 839
static void exec_cc20612ac2b0df71(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(20) = var5.get<uint32>();
}

// First occurrence: fn035666, line 933
static void exec_7129a8ace2421900(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn035706, line 992
static void exec_e93e3a30689d16b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn035868, line 1087
static void exec_4e445b78d88c86a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)(var2.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int32>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn025d9c, line 130
static void exec_b48de10ea6a010b9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var10((uint8)(var8.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint8>());
}

// First occurrence: fn025ea6, line 153
static void exec_1288d97463595d08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn033c74, line 18
static void exec_9d5b433bac717ce8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn033cac, line 82
static void exec_8ad361571146d8c0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn033cac, line 191
static void exec_1faa3137dcdb74e4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn033cac, line 198
static void exec_4327263981e53a0b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn032a78, line 18
static void exec_3caaf94b024d6790(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn034574, line 19
static void exec_98c394849853bfaf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn034574, line 30
static void exec_94ae025cb1fcf57c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var8.get<uint32>());
}

// First occurrence: fn034574, line 31
static void exec_6b1af33aaefacb47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() != var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn034574, line 36
static void exec_ab8c337adda5c643(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(var4.get<int16>() * var8.get<int16>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn034800, line 41
static void exec_c7d110b4245ad062(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(0, (uint64)var3.get<uint16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int64)1);
	context.writeValueStack<uint8>(1, (var7.get<uint8>() & var8.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn034900, line 136
static void exec_a46f78302fbffbba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn034b22, line 284
static void exec_73f486cf08a20b9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: fn034b22, line 285
static void exec_7eed4d35de7af29c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)var0.get<uint32>(), (uint32)context.getParameter<int64>(8)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var3.get<uint16>());
}

// First occurrence: fn034b22, line 291
static void exec_09c23f6df6c4e200(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var8.get<uint16>());
}

// First occurrence: fn034b22, line 304
static void exec_9cd69400083f44cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() * var5.get<uint16>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var7.get<uint16>());
}

// First occurrence: fn034b22, line 307
static void exec_03ff8431301796c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn034b22, line 308
static void exec_5d4ba5ed35f93e84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn034b22, line 313
static void exec_9be7c6c394f16a54(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var5.get<uint16>());
}

// First occurrence: fn034b22, line 315
static void exec_e3a87e8af58b8752(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var5.get<uint8>());
}

// First occurrence: fn034b22, line 317
static void exec_ecc08346ec3a0257(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn031704, line 37
static void exec_2219a5c7c4d164aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn031754, line 71
static void exec_75ea7745b5d7a4a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)(context.readValueStack<int16>(-1) >> (int16)(context.getParameter<int64>() & 0x0f)));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn03181e, line 126
static void exec_d2ba7ac00612f958(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: fn03181e, line 129
static void exec_b23521abe78dbb1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var6.get<uint16>());
}

// First occurrence: fn033392, line 59
static void exec_c304b8e82969ce93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	const AnyBaseValue var16((uint16)(var14.get<uint16>() + (uint16)(context.getParameter<int64>(48))));
	*context.getParameter<uint16*>(56) = var16.get<uint16>();
}

// First occurrence: fn033392, line 63
static void exec_83bf7488c7dc4417(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	const AnyBaseValue var15((uint16)*context.getParameter<uint16*>(48));
	const AnyBaseValue var16((uint16)(var14.get<uint16>() - var15.get<uint16>()));
	*context.getParameter<uint16*>(56) = var16.get<uint16>();
}

// First occurrence: fn033392, line 70
static void exec_3076267d7db05e41(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn033392, line 124
static void exec_90e21bff606f75b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var1.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn033392, line 158
static void exec_44a270333d56250c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)(var0.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn0335c4, line 213
static void exec_10e5cc84921c4c3a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	const AnyBaseValue var16((uint16)(var14.get<uint16>() + (uint16)(context.getParameter<int64>(48))));
	*context.getParameter<uint16*>(56) = var16.get<uint16>();
}

// First occurrence: fn0335c4, line 217
static void exec_a473eba83cb1a0b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var9.get<uint16>() - var13.get<uint16>()));
	const AnyBaseValue var15((uint16)*context.getParameter<uint16*>(48));
	const AnyBaseValue var16((uint16)(var14.get<uint16>() + var15.get<uint16>()));
	*context.getParameter<uint16*>(56) = var16.get<uint16>();
}

// First occurrence: fn0335c4, line 278
static void exec_f5b00e790ea4c54b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var1.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn0335c4, line 313
static void exec_c1002109b00c0db3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var2.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var9.get<uint16>();
}

// First occurrence: fn0335c4, line 322
static void exec_20d8cd75a284a06a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: CNZBarrel.Init, line 25
static void exec_6fa26701678d6b91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: CNZBarrel.Init, line 37
static void exec_9dac840ddc9bd893(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() - (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn032208, line 151
static void exec_bce9a32ccee5309f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() <= var4.get<int16>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn032208, line 151
static void exec_a48e57708948c18d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn032208, line 187
static void exec_c42941f0d4c2c9ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)-(signed)var3.get<uint16>());
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn032610, line 465
static void exec_f752a3095d9a336f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint8)(var3.get<uint8>() | var8.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn0329b8, line 47
static void exec_b1bed445bb79a2fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var13((uint16)(var8.get<uint16>() + var12.get<uint16>()));
	*context.getParameter<uint16*>(48) = var13.get<uint16>();
}

// First occurrence: fn03192c, line 107
static void exec_b34869b2b9baaada(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn03192c, line 109
static void exec_2473a5f16bed9bbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn0319f4, line 144
static void exec_be409b6daf896574(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	context.writeValueStack<uint8>(0, (var1.get<uint8>() == var2.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn031b18, line 253
static void exec_56deb18f13f61de9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(24));
	context.writeValueStack<uint16>(3, (uint16)var0.get<uint8>());
	context.moveValueStack(4);
}

// First occurrence: fn031e24, line 61
static void exec_9d7d1ed9c4425cba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn031e96, line 113
static void exec_60bfcbad3397c55e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var13((uint16)(var8.get<uint16>() + var12.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var13.get<uint16>());
}

// First occurrence: fn031e96, line 114
static void exec_fa5007e211310667(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var11((uint16)(var8.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var15((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var14.get<uint32>()));
	const AnyBaseValue var16((uint16)(var11.get<uint16>() + var15.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(56), var16.get<uint16>());
}

// First occurrence: fn031e96, line 115
static void exec_44706d2854d4964d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn031e96, line 130
static void exec_00f405a4dba2bcd0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn0330c8, line 22
static void exec_84a6810849087f7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var9((int64)0);
	context.writeValueStack<uint8>(0, (var8.get<uint8>() == var9.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03318e, line 90
static void exec_1670a68655e40b30(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03320e, line 156
static void exec_18317b3801726d9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn033272, line 175
static void exec_7b9101290a0b6948(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn031c0a, line 101
static void exec_98f8b38683dd7d0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)-(signed)var3.get<uint16>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn030e8c, line 94
static void exec_eef2894c23711dfc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn030e8c, line 97
static void exec_fb3b7876a069e991(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn030e8c, line 101
static void exec_b49df76b6f05f176(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn03385e, line 52
static void exec_6c8789a34855c1fc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var13((uint16)(var8.get<uint16>() + var12.get<uint16>()));
	const AnyBaseValue var15((uint16)(var13.get<uint16>() + (uint16)(context.getParameter<int64>(48))));
	*context.getParameter<uint16*>(56) = var15.get<uint16>();
}

// First occurrence: fn033ade, line 267
static void exec_ad3c76471e894ba1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0328e8, line 47
static void exec_1978d89b1f015bda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn0328e8, line 57
static void exec_c8c0a87ee1391638(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: fn0328e8, line 58
static void exec_ca0f4e38b1572bd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int16)(var0.get<int16>() * var1.get<int16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((int16)(var3.get<int16>() * var4.get<int16>()));
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() * var8.get<uint16>()));
	const AnyBaseValue var10((uint8)(uint8)(var6.get<int16>() < var9.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var10.get<uint8>());
}

// First occurrence: fn08a488, line 60
static void exec_9e7408b5b5b7198b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn08a59a, line 177
static void exec_051a3fbc56749250(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn08b432, line 122
static void exec_7f27e1b7f169a3e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((int8)(uint8)var1.get<int32>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn08ab86, line 46
static void exec_3335f7629b55494d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var10((uint16)(var8.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint16)(var3.get<uint16>() - var10.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn08abb0, line 62
static void exec_81f4f95cca80cbf9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn08abb0, line 73
static void exec_ff96c30711637dbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn08b4ec, line 55
static void exec_44bfd1e584fc711b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn08a280, line 42
static void exec_8d33bb1a981e5caa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn08a280, line 61
static void exec_617f6d2478724fc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & var4.get<uint16>()));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn08b7a0, line 130
static void exec_dcbe7a2bd57a5ab2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: fn08b660, line 27
static void exec_cc5f997231777d13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
}

// First occurrence: fn08b6ae, line 53
static void exec_52391f80798df877(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)context.readValueStack<uint32>(-2), (uint32)var0.get<uint32>()));
	const AnyBaseValue var2((int16)(uint16)var1.get<int32>());
	*context.getParameter<uint16*>() = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn08b0b0, line 109
static void exec_46c1a6f5c121308b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() & var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint32>() == var5.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn08adca, line 268
static void exec_31a257c830c8b664(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint8)(uint8)(var5.get<uint16>() < var9.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), var10.get<uint8>());
}

// First occurrence: fn08ae0c, line 320
static void exec_2eae0b1d94e10545(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint16)-(signed)var2.get<uint16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn08af3e, line 550
static void exec_6080651f94e9654d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)-(signed)var4.get<uint16>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn08b950, line 70
static void exec_61b7d5c4e36096cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() <= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn08ba1c, line 138
static void exec_ad06ebc01975dbe4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var6.get<uint32>());
}

// First occurrence: fn08ba1c, line 151
static void exec_084dd057c0b9107b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ var1.get<uint8>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn08ba7e, line 198
static void exec_4121251d9796f26f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn08b8fa, line 258
static void exec_1845f0b1a8d6e378(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(20));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn08b930, line 272
static void exec_793ac56dd9a4089a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var7.get<uint16>() - var11.get<uint16>()));
	const AnyBaseValue var13((uint16)1);
	const AnyBaseValue var14((uint16)(var12.get<uint16>() >> (var13.get<uint16>() & 0x0f)));
	const AnyBaseValue var15((uint16)(var3.get<uint16>() + var14.get<uint16>()));
	const AnyBaseValue var16((uint32)*context.getParameter<uint32*>(48));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16.get<uint32>(), var15.get<uint16>());
}

// First occurrence: fn0260d2, line 156
static void exec_b1aba8bbae68388e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0296d4, line 133
static void exec_762c0b507917a3d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() <= var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0297a2, line 218
static void exec_2ffb59680a471870(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var7.get<uint16>();
}

// First occurrence: fn0297a2, line 234
static void exec_571b6dc717ca4ea7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: CupElevator.Init, line 71
static void exec_d6a864f53673c0f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var8.get<uint16>());
}

// First occurrence: fn026b34, line 178
static void exec_6f7afc9bc24fecc7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint16)(var0.get<uint16>() - var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: fn026b46, line 221
static void exec_07b24b98e8370377(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn026eda, line 595
static void exec_4d5c7381bd615e33(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, *context.getParameter<uint32*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<int8>(1, (uint8)var0.get<int32>());
	context.moveValueStack(2);
}

// First occurrence: fn02c3e8, line 112
static void exec_9161cd371de4abda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn02c3e8, line 118
static void exec_1477a327cee54d76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var3.get<uint8>();
}

// First occurrence: fn0263dc, line 29
static void exec_02e6d1030c0fa33d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var0.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((int8)(uint8)var8.get<int32>());
	*context.getParameter<uint8*>(32) = var9.get<uint8>();
}

// First occurrence: fn029020, line 37
static void exec_8906578a0f6cd83e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn029086, line 49
static void exec_0703a9b30abd512b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() == var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int64)0);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() == var10.get<uint8>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var11.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn029338, line 25
static void exec_662c0128a78e8606(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var10((uint16)(var8.get<uint16>() & (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((int16)(var10.get<int16>() * (int16)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)(var3.get<uint16>() + var12.get<uint16>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var16.get<uint32>(), var13.get<uint16>());
}

// First occurrence: fn029338, line 26
static void exec_993ad518d42390ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (var5.get<uint16>() & 0x0f)));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn024e3c, line 25
static void exec_673cd7419526a5de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn024e3c, line 29
static void exec_96bd32642c62b19a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() & (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn024e3c, line 41
static void exec_d4e31f216c40fbcc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn02503e, line 163
static void exec_6303a31c502d8aed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(3);
}

// First occurrence: fn0275f2, line 199
static void exec_f17dd03da7100ff1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn0275f2, line 223
static void exec_766b7b9f1b0fec97(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn0275f2, line 226
static void exec_c87db0de13dc7a1a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var5.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(48) = var10.get<uint16>();
}

// First occurrence: fn0275f2, line 232
static void exec_2e4989e0e0112ce8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint16>());
	const AnyBaseValue var10((uint32)(var3.get<uint32>() + var9.get<uint32>()));
	*context.getParameter<uint32*>(32) = var10.get<uint32>();
}

// First occurrence: fn02682e, line 299
static void exec_05002db3dacd0df1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn026338, line 209
static void exec_2440d9daadbc8c65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - var5.get<uint32>()));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn026338, line 232
static void exec_2d451fe6e3a5ebc3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: fn029dec, line 131
static void exec_d3b365d8287098c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((int16)(uint16)var8.get<int8>());
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn029eb2, line 207
static void exec_c8058aee5bf4bceb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn029fcc, line 318
static void exec_63aad2fd27bfe34a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var7.get<uint16>(), (uint16)context.getParameter<int64>(32)));
	const AnyBaseValue var10((int16)1);
	const AnyBaseValue var11((uint16)(var9.get<uint16>() - var10.get<uint16>()));
	const AnyBaseValue var12((uint16)(var3.get<uint16>() * var11.get<uint16>()));
	const AnyBaseValue var14((int16)OpcodeExecUtils::safeDivide<int16>((int16)var12.get<int16>(), (int16)context.getParameter<int64>(40)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var14.get<uint16>());
}

// First occurrence: fn029fcc, line 319
static void exec_b9c897e2b2dfc518(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: fn02a106, line 433
static void exec_dcf0416c3a36bdec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn02a106, line 458
static void exec_8eeab934589661b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(uint16)var9.get<uint8>());
	const AnyBaseValue var11((uint16)(var5.get<uint16>() - var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn025d2c, line 67
static void exec_a0b575d562204258(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() << (var3.get<uint8>() & 0x07)));
	const AnyBaseValue var5((uint8)(var1.get<uint8>() ^ var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn03e8a2, line 53
static void exec_078dc31b13387888(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) + var0.get<uint8>()));
	*context.getParameter<uint8*>() = var1.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: fn03e9c6, line 148
static void exec_bc5a383b75e6b76f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn03e9c6, line 159
static void exec_1fcc2c4da5f0609e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn03e37e, line 95
static void exec_5b65348abed00bf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint16)1);
	const AnyBaseValue var10((uint16)(var8.get<uint16>() >> (var9.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn03e37e, line 108
static void exec_dfce59a177deed65(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn03e37e, line 134
static void exec_74bee9f58d67dff7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: fn03e37e, line 171
static void exec_b63bf949ac38489b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	const AnyBaseValue var9((uint16)(var7.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn03e472, line 185
static void exec_a614b02df21bcf4c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn03e472, line 208
static void exec_6bac180bac1e9545(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((int32)(uint32)var5.get<int16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn03e472, line 212
static void exec_5b147081d7e19ee0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn03ed6e, line 86
static void exec_ae01917d665f0e12(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var4.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03ed6e, line 109
static void exec_b0a8c5a9c455a95d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (var4.get<int16>() & 0x0f)));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn03ed6e, line 199
static void exec_28d6c82cfd3c2d8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<int16>() >= (int16)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn03efba, line 257
static void exec_560eff3c8373a8f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 81
static void exec_41da817c14e69d67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)(var0.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(48) = var9.get<uint16>();
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 85
static void exec_43e9204b1cab56d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var4.get<uint32>();
	const AnyBaseValue var6((uint32)(var4.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var1.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)(var0.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(48) = var9.get<uint16>();
}

// First occurrence: MHZLeavesEffect.UpdateForPlayer, line 115
static void exec_1ccacaf0ca9385bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: MHZSingleLeaf.Type1, line 160
static void exec_705526812aea0f6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn03f6a6, line 206
static void exec_4b1f1c916f097608(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() & var8.get<uint8>()));
	const AnyBaseValue var10((uint8)(var3.get<uint8>() | var9.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint8>());
}

// First occurrence: fn03ea56, line 35
static void exec_acec795b0bc69163(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
}

// First occurrence: fn03eb26, line 97
static void exec_b71385cc0c27c5c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() > var4.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn03ec66, line 254
static void exec_ba539cc0008204c1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((int32)(var1.get<int32>() * var3.get<int32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn03ec66, line 255
static void exec_bde771b88087e176(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((int32)(var1.get<int32>() * var3.get<int32>()));
	const AnyBaseValue var5((int32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() << (var5.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn0226b0, line 100
static void exec_78e8f3fe67a87507(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(uint16)context.readValueStack<uint8>(-1));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-1);
}

// First occurrence: fn02291a, line 351
static void exec_68e15fe74aba84b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(12) & 0x0f)));
	*context.getParameter<uint16*>(20) = var5.get<uint16>();
}

// First occurrence: fn02291a, line 364
static void exec_bd51fbab0a9f0111(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn022a5c, line 429
static void exec_edf392579f0ad9b3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(12) = var5.get<uint16>();
}

// First occurrence: fn022a5c, line 437
static void exec_bc6640cf94ee164c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: fn022a5c, line 438
static void exec_8dbe6e14bb6d1123(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((int16)(var2.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: fn022a5c, line 444
static void exec_4366c6abf6f51d61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int16)(var0.get<int16>() * (int16)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((int16)OpcodeExecUtils::safeDivide<int16>((int16)var2.get<int16>(), (int16)context.getParameter<int64>(12)));
	*context.getParameter<uint16*>(20) = var4.get<uint16>();
}

// First occurrence: fn022a5c, line 447
static void exec_1174f35536b61e8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn03f0d8, line 80
static void exec_35499cefa60779ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >= (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, (uint16)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn03f11c, line 122
static void exec_bb9d423712a745de(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn089dee, line 283
static void exec_d30b207fb1b97f45(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn03b488, line 166
static void exec_39451ad60956995e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn03cc8a, line 24
static void exec_e9006e8ee0e46c2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn03cc8a, line 30
static void exec_8afff1caaea8161d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
	const AnyBaseValue var10((uint32)(var8.get<uint32>() - (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn023a5e, line 195
static void exec_3c72c1c2e0b244e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int16)(uint16)var0.get<int8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn023a5e, line 196
static void exec_3f920874e697b778(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn03c25c, line 24
static void exec_d08a52ecb495f776(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn03d4c2, line 171
static void exec_b5b5c2bc948dff10(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn03d4c2, line 203
static void exec_0c456994efa67d87(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() != var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: fn03a7cc, line 16
static void exec_60aef64120475bef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn03a7cc, line 31
static void exec_e415d7dd01bd91fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn03a84c, line 55
static void exec_d768251dbde505bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == var4.get<uint8>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int64)0);
	const AnyBaseValue var11((uint8)(uint8)(var9.get<uint16>() == var10.get<uint16>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var11.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03aa7e, line 275
static void exec_1e76ed29fa3e382f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03aa7e, line 307
static void exec_6cc1d0dfce09c1ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn03aa7e, line 313
static void exec_c377437b52275cd3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn03ac48, line 402
static void exec_a98723fd5c459efe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn03ac86, line 461
static void exec_04fb6cd6618c7674(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var7.get<uint16>() - var11.get<uint16>()));
	const AnyBaseValue var13((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var15.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn03c462, line 23
static void exec_6e4d7fe592e4b13d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn03c534, line 75
static void exec_0cf33c0d48680fb9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() + var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn03c552, line 119
static void exec_d2652014ed08dc9a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn03c552, line 120
static void exec_c2ea1bda5a7a08e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint32>());
}

// First occurrence: fn03c34c, line 16
static void exec_b585bd30489fd8b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn03a63a, line 76
static void exec_4c5ba0116c946899(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn03a6a4, line 146
static void exec_1879e55cc9ac923d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn03a6d0, line 180
static void exec_fbce304484f79bd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn03bc92, line 82
static void exec_c39c614c6cd41383(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn03bc92, line 96
static void exec_4dce092beef3a7bd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (var5.get<int16>() & 0x0f)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn03d11e, line 69
static void exec_6af275d4f5ec572e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var8((int8)(uint8)var7.get<int16>());
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn03d1b2, line 102
static void exec_47854d7f98aa649f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(24), var5.get<uint16>());
}

// First occurrence: fn03d278, line 186
static void exec_414cbc18a39c1b3c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() == var4.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn039f7e, line 56
static void exec_c75b35023c35fac4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var7.get<uint8>());
}

// First occurrence: fn039f7e, line 81
static void exec_0c98a5e4b97473d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn03a23a, line 16
static void exec_1acec65f108ace29(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn03a270, line 88
static void exec_762122ab337ba880(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() == var6.get<uint8>()));
	const AnyBaseValue var8((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var9((int64)0);
	const AnyBaseValue var10((uint8)(uint8)(var8.get<uint16>() == var9.get<uint16>()));
	context.writeValueStack<uint8>(0, (var7.get<uint8>() != var10.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03a314, line 147
static void exec_5cf62cb93bc9187d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn03a314, line 161
static void exec_dc95caad32ed0bb3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var8.get<uint16>() + var10.get<uint16>()));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn03a314, line 194
static void exec_0d7aa55680d0750d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() << (var5.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)~var6.get<uint8>());
	const AnyBaseValue var8((uint8)(var3.get<uint8>() & var7.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn03a480, line 254
static void exec_dddfca2dba50390b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint16)(var0.get<uint16>() + var9.get<uint16>()));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn03a480, line 260
static void exec_479377e1da69ff5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (var3.get<uint32>() & 0x1f)));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn03bab2, line 24
static void exec_bb404e26d0e53085(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(uint16)var11.get<uint8>());
	const AnyBaseValue var14((uint16)(var12.get<uint16>() & (uint16)(context.getParameter<int64>(40))));
	const AnyBaseValue var16((uint16)(var14.get<uint16>() >> (uint16)(context.getParameter<int64>(48) & 0x0f)));
	const AnyBaseValue var17((uint16)(var7.get<uint16>() * var16.get<uint16>()));
	const AnyBaseValue var18((uint32)*context.getParameter<uint32*>(56));
	const AnyBaseValue var20((uint32)(var18.get<uint32>() + (uint32)(context.getParameter<int64>(64))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var20.get<uint32>(), var17.get<uint16>());
}

// First occurrence: fn03c1ee, line 249
static void exec_e9e223a848420b44(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var3.get<uint8>(), (uint8)context.getParameter<int64>(8)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn03c1ee, line 250
static void exec_bee492ff50dbe17d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn041be0, line 56
static void exec_4574756b1dab875c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint16>(2, (var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var8((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var9((uint8)-(signed)var8.get<uint8>());
	context.writeValueStack<int16>(3, (uint16)var9.get<int8>());
	const AnyBaseValue var10((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(44)));
	context.writeValueStack<int16>(4, (uint16)var10.get<int8>());
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(5);
}

// First occurrence: fn040e5c, line 21
static void exec_382c90cb0cc43c6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((int16)(var6.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn040ec4, line 45
static void exec_4891521be8c88d11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(var0.get<uint8>() | var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var5.get<uint8>());
}

// First occurrence: fn040ec4, line 47
static void exec_386b1c68bda6eae7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == var1.get<uint8>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(uint8)(var6.get<uint16>() == var7.get<uint16>()));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn040f52, line 120
static void exec_e259f4eb5036ead2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<int16>() <= var1.get<int16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: fn040f52, line 181
static void exec_45a0ba8347d48b6e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: fn041176, line 35
static void exec_65bde089074f3307(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() * (uint8)(context.getParameter<int64>(32))));
	context.writeValueStack<uint16>(1, (uint16)var7.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn041288, line 121
static void exec_eadc50a54dbce358(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn01d106, line 31
static void exec_fccc00fc0facf642(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn040546, line 22
static void exec_f57440cbc8a31517(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn040654, line 134
static void exec_946ab3d479e53bd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(uint8)(var3.get<uint16>() <= var7.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: fn040654, line 138
static void exec_14eb1d519f846740(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(uint8)(var3.get<uint16>() >= var7.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var8.get<uint8>());
}

// First occurrence: fn0406e4, line 201
static void exec_31f23d8737bdb784(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() & var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var4.get<uint32>() == var5.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn0406e4, line 222
static void exec_694e7923d2e6b151(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn0406e4, line 226
static void exec_05d509bf0c1a277e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(20))));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	*context.getParameter<uint16*>(28) = var8.get<uint16>();
}

// First occurrence: fn04187e, line 26
static void exec_97b095737b009c8e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)(uint16)context.readValueStack<int64>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn0419fa, line 172
static void exec_b328dd17987c387a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn0419fa, line 173
static void exec_c53fa9c58efb16f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() == var6.get<uint8>()));
	const AnyBaseValue var8((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (var7.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0419fa, line 178
static void exec_025c7e44cb8512dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & var5.get<uint8>()));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() != var7.get<uint8>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0419fa, line 187
static void exec_46b2877166553aa2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint16>(0, (var7.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(2);
}

// First occurrence: fn0419fa, line 193
static void exec_9ef9cb4908fa3791(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() == var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn041aa8, line 278
static void exec_2492b004c91b1be6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0400f0, line 38
static void exec_504aa26806bdacf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)*context.getParameter<uint16*>(32));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var10.get<uint16>());
}

// First occurrence: fn041cc2, line 30
static void exec_48bce13a0f4f6707(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn041e6a, line 167
static void exec_47d5dc391d0e7f5e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn03fd4e, line 107
static void exec_2f52fdfaa9630090(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	context.writeValueStack<uint64>(0, (uint64)var2.get<uint16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var6.get<int16>() < var7.get<int16>()));
	context.moveValueStack(2);
}

// First occurrence: fn03fd4e, line 107
static void exec_18e414525c5dc17e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	const AnyBaseValue var1((uint8)(uint8)(context.readValueStack<uint64>(-1) != var0.get<uint64>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var1.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn03fd4e, line 111
static void exec_16e7c1a71d4551a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)OpcodeExecUtils::safeDivide<int16>((int16)var5.get<int16>(), (int16)context.getParameter<int64>(24)));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn03fe70, line 219
static void exec_63dc5cf9cfaab5ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)1);
	context.writeValueStack<uint8>(2, (var6.get<uint8>() & var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn040c2a, line 136
static void exec_1abba9803aadd70e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() == (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn040c2a, line 139
static void exec_36265a6aff49531c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)!var0.get<uint8>());
	context.writeValueStack<uint32>(0, (uint32)var1.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn040878, line 110
static void exec_01469d354e0105ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint16>());
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn040a08, line 217
static void exec_a77b75453cf76227(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() + var3.get<uint32>()));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn040a08, line 220
static void exec_f520fe321d2aa845(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)var0.get<int32>(), (int32)var2.get<int32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn040a08, line 237
static void exec_ce7ef7afb58c116d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)((uint32)context.getParameter<int64>() - var1.get<uint32>()));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn040a08, line 265
static void exec_7fe1103cc2876847(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int16)(uint16)var2.get<int8>());
	const AnyBaseValue var4((uint16)(var0.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var4.get<uint16>());
}

// First occurrence: SOZZipLine.resetJumpsCounter, line 31
static void exec_e6016de6c3ed2e46(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn04aa94, line 131
static void exec_80c51bd86ac9ce08(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(2, (uint8)(var6.get<uint16>() < (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn04aac8, line 159
static void exec_b78779bf0de9918d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() != var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: fn04aac8, line 225
static void exec_911edeb98905d990(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn04ab6e, line 270
static void exec_4f875abd1e42e23d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() + var8.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn04ad7a, line 525
static void exec_adfccb5372e256ec(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn04ad7a, line 529
static void exec_250bb98e90d04e4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn04ad7a, line 564
static void exec_b4192b9f9ce98318(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn04ad7a, line 570
static void exec_5c69965f2f16e99a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() >> (uint8)(context.getParameter<int64>(24) & 0x07)));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn04ad7a, line 572
static void exec_a1ab1783e77dd881(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn04ae92, line 624
static void exec_bcd8cfa4fa591eac(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn04af80, line 709
static void exec_47ed4f6fe8655ce9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn04af80, line 715
static void exec_e891cea9cbd86d4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() >> (uint32)(context.getParameter<int64>(32) & 0x1f)));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: fn04af80, line 726
static void exec_c9d40b81e334356f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() << (uint16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn025924, line 123
static void exec_b813402adb86cb34(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn04a644, line 42
static void exec_0e6231ac13b77d58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint8>());
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn04a644, line 50
static void exec_58652dbf0218f745(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn04a644, line 51
static void exec_8cbb055c85063ac6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(var6.get<uint16>() + var10.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var14.get<uint32>(), var11.get<uint16>());
}

// First occurrence: fn04a818, line 187
static void exec_a65a89a17722d6a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeModulo<int32>((int32)var0.get<int32>(), (int32)var2.get<int32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn039c50, line 24
static void exec_58f2ce73e7cae390(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	*context.getParameter<uint16*>(40) = var10.get<uint16>();
}

// First occurrence: fn0426b0, line 155
static void exec_93a1286c4d56b64b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn079f14, line 328
static void exec_a7dc265448aa3063(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn079f14, line 329
static void exec_d3ea42f5d87c7a43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn079f30, line 341
static void exec_f87d04dd7d12a249(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)1);
	const AnyBaseValue var7((uint16)(var5.get<uint16>() >> (var6.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn079f30, line 342
static void exec_96c8e2c55634f41a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var7((uint32)((uint32)context.getParameter<int64>() - var6.get<uint32>()));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn07a07c, line 414
static void exec_24cecb5231d55fef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	const AnyBaseValue var8((uint16)(var0.get<uint16>() + var7.get<uint16>()));
	*context.getParameter<uint16*>(24) = var8.get<uint16>();
}

// First occurrence: fn043b96, line 49
static void exec_4ad5eb8d487a3eea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn0448a8, line 66
static void exec_c2455814e4e90b01(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)-(signed)var6.get<uint16>());
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn0423d0, line 160
static void exec_cbabb3cf30a396ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (var2.get<uint16>() & 0x0f)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn0423d0, line 173
static void exec_4d4574e41fafadbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn0423d0, line 180
static void exec_e58527357f86b6fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)(var0.get<uint8>() + var5.get<uint8>()));
	*context.getParameter<uint8*>(24) = var6.get<uint8>();
}

// First occurrence: fn0431e0, line 110
static void exec_bdaad521813125bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint8>());
	const AnyBaseValue var11((uint32)(var9.get<uint32>() & (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((uint32)(var4.get<uint32>() - var11.get<uint32>()));
	*context.getParameter<uint32*>(40) = var12.get<uint32>();
}

// First occurrence: fn043502, line 45
static void exec_127511f7f948a603(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn0442f2, line 60
static void exec_8639718eb6299aeb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (var1.get<uint8>() & 0x07)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn044434, line 191
static void exec_73f25c87a5e2428a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var6.get<uint8>();
}

// First occurrence: fn0906a0, line 34
static void exec_116233096be1324c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn090774, line 17
static void exec_c12ea0f85611e2c8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn09089e, line 123
static void exec_0ef545177d0d3877(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() | (uint8)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() == var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn09089e, line 130
static void exec_86d93c0493757f7e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	const AnyBaseValue var3((int64)0);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() != var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var4.get<uint8>());
}

// First occurrence: fn0450ec, line 49
static void exec_262c26f725009e68(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() + var2.get<uint16>()));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn045170, line 199
static void exec_d7e0dd54c6d0879b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int8>());
	*context.getParameter<uint16*>(8) = var4.get<uint16>();
}

// First occurrence: fn045170, line 210
static void exec_e46d0c30973676e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() & var2.get<uint8>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn045170, line 217
static void exec_0f560cf89f2341e1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() + var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn045170, line 227
static void exec_db3ed3a2013f906e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint16)(uint16)var2.get<uint8>());
	const AnyBaseValue var4((uint16)(var1.get<uint16>() - var3.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn045364, line 307
static void exec_ad2d1afc8e4c1365(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn045364, line 308
static void exec_e3378d0a0d2d202a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn046452, line 96
static void exec_9003a81f333a315d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(4) = var2.get<uint16>();
}

// First occurrence: fn046536, line 124
static void exec_d7678c64166d076e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() == var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn046536, line 148
static void exec_cbbb1a05331d1fbf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & var5.get<uint16>()));
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn046536, line 149
static void exec_1664491befa970b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn0453e6, line 150
static void exec_2ece8a4f24dede3e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn0461fe, line 135
static void exec_fc00a5045ed0dd72(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0462b6, line 194
static void exec_d8a6a57e8b7c95e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn0462b6, line 196
static void exec_875e20a525366f6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: fn048eae, line 15
static void exec_0ffb29bd73813283(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn048f12, line 67
static void exec_24e7994525023ae9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn048f12, line 74
static void exec_7471bbd86ae5a932(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	*context.getParameter<uint16*>(12) = var2.get<uint16>();
}

// First occurrence: fn048fa4, line 153
static void exec_1fde23dae36ddbca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((int16)OpcodeExecUtils::safeDivide<int16>((int16)var7.get<int16>(), (int16)context.getParameter<int64>(32)));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn049228, line 309
static void exec_9937cafa7b6cece8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((int64)0);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() != var2.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
}

// First occurrence: fn049228, line 313
static void exec_ca632b68ed6e20bf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() <= var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn049228, line 317
static void exec_6f5e68bd390f4004(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() > var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn049228, line 322
static void exec_7b29d550f4190c97(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)!var0.get<uint8>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var1.get<uint8>());
}

// First occurrence: fn0492d4, line 406
static void exec_9b68d0bf1774392b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int16>() < var4.get<int16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn047a96, line 135
static void exec_0f8c9670118fba2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() != var4.get<uint8>()));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(16));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn047dde, line 27
static void exec_f20bf2a46c518a61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn047dde, line 29
static void exec_e42e9d41f1e485e2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() * var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn047e8c, line 109
static void exec_46f1f8d7532e3070(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn048ad6, line 43
static void exec_4f6fec837cd11e42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn048c44, line 59
static void exec_2d71f7c657f88797(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() != var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn048d2c, line 113
static void exec_26875216b3da90c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn048d66, line 128
static void exec_2d3e2fa1ca4c2e72(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var8.get<uint16>(), (uint16)context.getParameter<int64>(32)));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn048d66, line 134
static void exec_19dcc4caea206138(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | (uint8)(context.getParameter<int64>(8))));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn048dca, line 154
static void exec_36e2527b5b224719(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: fn048dca, line 163
static void exec_fb8b249ccc400bc6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var5.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0494ea, line 65
static void exec_65d277fb6e4a00ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn04952a, line 85
static void exec_fbfbde548c56b5da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (int16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04952a, line 94
static void exec_203d82bd339e9cee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() ^ (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn04748e, line 157
static void exec_8dd10c6582059117(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + var0.get<uint32>()));
	*context.getParameter<uint32*>(8) = var1.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn04808e, line 22
static void exec_1102890aef49adda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn0480d4, line 58
static void exec_b461e1f5fa68abc7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var11((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var13((uint8)(var11.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var14((int64)0);
	const AnyBaseValue var15((uint8)(var13.get<uint8>() != var14.get<uint8>()));
	context.writeValueStack<uint8>(0, (var7.get<uint8>() == var15.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn04763e, line 16
static void exec_0229e44856361617(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)!var8.get<uint8>());
	context.writeValueStack<uint8>(0, (var2.get<uint8>() == var9.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0476fe, line 89
static void exec_4fbfbbdeaa550005(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn0477c2, line 172
static void exec_6fcc4fcea84a30f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
}

// First occurrence: fn046e4c, line 78
static void exec_0cc64c21464434c5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(40), var9.get<uint16>());
}

// First occurrence: fn046e4c, line 79
static void exec_d5f9b837585f933e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(12))));
	*context.getParameter<uint16*>(20) = var7.get<uint16>();
}

// First occurrence: fn046f18, line 122
static void exec_1b0b37e54d564692(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint32>());
}

// First occurrence: fn048534, line 285
static void exec_b47ff97923c9dae3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() < var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn048592, line 317
static void exec_ce141fce1e96e239(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int8>() > var4.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0485ae, line 364
static void exec_84536d13fdb51ee1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0485ae, line 368
static void exec_0a06324f7f000f94(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: fn0485ae, line 369
static void exec_8c6f2a7ac7753d46(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var1.get<uint8>() + var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn0485ae, line 370
static void exec_183d523dbf3fb645(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn0485ae, line 373
static void exec_d988f41897ab7ece(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(32), var7.get<uint8>());
}

// First occurrence: fn0485ae, line 374
static void exec_89a4ff3a205eb46f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint32>(0, (uint32)var3.get<uint16>());
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.moveValueStack(2);
}

// First occurrence: fn0485ae, line 374
static void exec_974724cc35772cbb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((int32)(var0.get<int32>() * var2.get<int32>()));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (int32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var6((uint32)(context.readValueStack<uint32>(-2) + var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var7.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn04867c, line 426
static void exec_ff2b115a2a20ad20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() << (uint16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn04872c, line 547
static void exec_b2f7afd705e793a2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: fn048762, line 585
static void exec_72aa7ae7d2a127d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(12));
	const AnyBaseValue var5((int32)(uint32)var4.get<int16>());
	const AnyBaseValue var6((int32)OpcodeExecUtils::safeDivide<int32>((int32)var3.get<int32>(), (int32)var5.get<int32>()));
	*context.getParameter<uint32*>(20) = var6.get<uint32>();
}

// First occurrence: fn048762, line 592
static void exec_707b0d4dc07d83ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) >> (uint16)(context.getParameter<int64>() & 0x0f)));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn0487f0, line 648
static void exec_b12fa8335c0b895b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint8)(var6.get<uint8>() + (uint8)(context.getParameter<int64>(32))));
	*context.getParameter<uint8*>(40) = var8.get<uint8>();
}

// First occurrence: fn0487f0, line 657
static void exec_1bf688813a177e32(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var6.get<uint8>();
}

// First occurrence: fn0821fc, line 116
static void exec_41a4a3fe8644f2a5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var6.get<uint32>();
	const AnyBaseValue var8((uint32)(var6.get<uint32>() - (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn081fee, line 39
static void exec_02a2f20bff79e581(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint16)(var3.get<uint16>() + var13.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var14.get<uint16>());
}

// First occurrence: fn08204c, line 61
static void exec_c188ec48ea0a8df2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() - var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn08218e, line 228
static void exec_008ee1ec38e0e791(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)-(signed)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
}

// First occurrence: fn0829a0, line 251
static void exec_affa6adb60e80b38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() <= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn082aa6, line 295
static void exec_4e08bf42e3b6939f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (uint8)(context.getParameter<int64>(24) & 0x07)));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: fn082abc, line 306
static void exec_266c1ab3ccad6f93(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn04a238, line 56
static void exec_a4620883070040b2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn061254, line 362
static void exec_071f7c930cc9dfe6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() | var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: fn049fe4, line 127
static void exec_5abb7ebd8d04b445(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() - var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn04a0c6, line 189
static void exec_8fa7349bb7cf276d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() >> (uint32)(context.getParameter<int64>(24) & 0x1f)));
	*context.getParameter<uint32*>(32) = var8.get<uint32>();
}

// First occurrence: fn04a53a, line 205
static void exec_d1d3f5321f5d5b2e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: fn060f3e, line 32
static void exec_763b0f93ee36b826(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(0, (uint32)var5.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn06126c, line 132
static void exec_f79e364f4d3c8bf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint16>() != var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06126c, line 154
static void exec_f0e26ff1ea5ab540(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var7.get<uint32>()));
	context.writeValueStack<uint16>(1, (var8.get<uint16>() - (uint16)(context.getParameter<int64>(40))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(56));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(64));
	context.writeValueStack<int64>(5, 1);
	context.moveValueStack(6);
}

// First occurrence: fn061362, line 70
static void exec_7bdd6c837ba6f2bb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)1);
	const AnyBaseValue var9((uint32)(var7.get<uint32>() >> (var8.get<uint32>() & 0x1f)));
	*context.getParameter<uint32*>(24) = var9.get<uint32>();
}

// First occurrence: fn0612a8, line 217
static void exec_f4d1c19fa9b12a13(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) & (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((int8)(uint8)var1.get<int32>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn0612a8, line 260
static void exec_5de3b56555482683(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: fn086dc6, line 78
static void exec_4b30f061f9f91885(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(7, 0);
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(9);
}

// First occurrence: fn0877d8, line 117
static void exec_be3d6e372258eafc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() * (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint32)((uint32)context.getParameter<int64>() - var9.get<uint32>()));
	*context.getParameter<uint32*>(40) = var10.get<uint32>();
}

// First occurrence: fn08724e, line 141
static void exec_45735eb25d18f27f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn087330, line 253
static void exec_3a8b7744cdc57205(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, *context.getParameter<uint8*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn08756a, line 469
static void exec_7691faeca38e0095(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	*context.getParameter<uint8*>(16) = var5.get<uint8>();
}

// First occurrence: fn0875b4, line 555
static void exec_b0ec386da3ad7005(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(7, 0);
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(32));
	context.moveValueStack(9);
}

// First occurrence: fn087638, line 570
static void exec_53a8bee77ba93f5e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn087638, line 572
static void exec_b522259e67dada38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn089064, line 109
static void exec_4e6a8d67746e3385(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(5, 0);
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(7, 0);
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(9);
}

// First occurrence: fn091de2, line 236
static void exec_f3775fdce55781ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var6((uint16)-(signed)var5.get<uint16>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn091a0c, line 41
static void exec_52fa536a1038442a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((int16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn091a0c, line 42
static void exec_5b26f83a64c3b971(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)1);
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn08957a, line 144
static void exec_63d77e8fce0195a5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(48));
	context.moveValueStack(8);
}

// First occurrence: fn0895a4, line 158
static void exec_d18df8684a866e85(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(56));
	context.moveValueStack(9);
}

// First occurrence: fn0899e8, line 213
static void exec_13b5e1c9640a79e3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	context.writeValueStack<uint16>(0, (var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn089a20, line 228
static void exec_9b647a8efc34cded(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(0, (var6.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: fn087a42, line 46
static void exec_dcc0f3b172817d5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn087fac, line 70
static void exec_e986d46c3cd71be9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<uint16>() == var4.get<uint16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn0881fe, line 292
static void exec_4d3c112f20a3bc58(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
}

// First occurrence: fn087dc0, line 262
static void exec_84ecad6494705f89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() ^ var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn08a67e, line 57
static void exec_e0d78c157d7752aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() ^ (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn08a72c, line 126
static void exec_430a2a6c256f585c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var7.get<uint32>());
}

// First occurrence: fn08a72c, line 127
static void exec_befa3c9e6ddab499(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: fn08a916, line 167
static void exec_cdcb89b9719c619e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var2((uint32)(context.readValueStack<uint32>(-1) & var1.get<uint32>()));
	const AnyBaseValue var3((int8)(uint8)var2.get<int32>());
	*context.getParameter<uint8*>(8) = var3.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: fn08a80c, line 342
static void exec_94974079204d78ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn08bd88, line 89
static void exec_1526356d7327170b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn08bc26, line 281
static void exec_16be1a1e2508913c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) & (uint8)(context.getParameter<int64>())));
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: fn08bee6, line 99
static void exec_6defdc34bc9db1ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (var4.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn08c746, line 24
static void exec_0b2898fc8ff63c99(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
}

// First occurrence: FlyBotAlert.CallFlyBot, line 273
static void exec_11d44c140ac80b35(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var8.get<uint16>();
}

// First occurrence: FlyBotAlert.CallFlyBot, line 274
static void exec_3fa501c394d99471(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: FlyBotAlert.CallFlyBot, line 278
static void exec_b491da8ef8e433a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)-(signed)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((int16)OpcodeExecUtils::safeDivide<int16>((int16)var0.get<int16>(), (int16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
}

// First occurrence: fn08c692, line 96
static void exec_02e01a9042321bda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() << (uint8)(context.getParameter<int64>(8) & 0x07)));
	*context.getParameter<uint8*>(16) = var2.get<uint8>();
}

// First occurrence: fn08c3ca, line 159
static void exec_c125ef023f1cb989(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() << (var5.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() & var6.get<uint8>()));
	const AnyBaseValue var8((int64)0);
	context.writeValueStack<uint8>(0, (var7.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn08c3ec, line 401
static void exec_974ca5ff67727b09(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() << (var6.get<uint32>() & 0x1f)));
	const AnyBaseValue var8((uint32)(var4.get<uint32>() & var7.get<uint32>()));
	const AnyBaseValue var9((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var8.get<uint32>() == var9.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: fn08c1d8, line 286
static void exec_c3f940fbe530cf82(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn08fb76, line 100
static void exec_658b6e1d39703925(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(48));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(56));
	context.moveValueStack(8);
}

// First occurrence: fn090436, line 324
static void exec_7d49b351ee36bd96(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() >> (var6.get<uint8>() & 0x07)));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	*context.getParameter<uint8*>(32) = var9.get<uint8>();
}

// First occurrence: Toxomister.PostInit, line 34
static void exec_19dac7a976cdc328(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: fn08fe8e, line 183
static void exec_65d7a32dcd1a14fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)((uint8)context.getParameter<int64>() - var4.get<uint8>()));
	*context.getParameter<uint8*>(24) = var5.get<uint8>();
}

// First occurrence: fn08ff8c, line 287
static void exec_4306971166237673(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var7.get<uint32>();
}

// First occurrence: fn08ffe0, line 304
static void exec_f947b31e5aed6d20(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((int16)(var7.get<int16>() >> (int16)(context.getParameter<int64>(32) & 0x0f)));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() - var9.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn08ffe0, line 307
static void exec_8607369b16629570(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn08ffe0, line 308
static void exec_431246ceb13e327b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn08852e, line 142
static void exec_5ca20fae05496ab4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(2, (var3.get<uint8>() & var4.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn088a32, line 226
static void exec_eac23548b0705589(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn088ec4, line 71
static void exec_4b3926066cea3dce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var3.get<uint16>() + var11.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var12.get<uint16>());
}

// First occurrence: fn088d02, line 202
static void exec_710ba751b187f605(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(48));
	context.moveValueStack(9);
}

// First occurrence: fn08e388, line 156
static void exec_eae2c05d870bbc95(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)((uint16)context.getParameter<int64>() - var5.get<uint16>()));
	*context.getParameter<uint16*>(32) = var6.get<uint16>();
}

// First occurrence: fn08e2ea, line 239
static void exec_c299170c2036c3d2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn08d8e6, line 313
static void exec_a802b6522c8fde06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() << (var4.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn08d7a8, line 418
static void exec_296740b9bcbd1719(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn08dbec, line 111
static void exec_ab44ef2201d76c75(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn08548e, line 255
static void exec_781c9aef64963896(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var9.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var6.get<int16>() < var10.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Enemy.addScore, line 389
static void exec_bfc5c6c178c67336(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
}

// First occurrence: Enemy.addScore, line 402
static void exec_650ba7a96faae9d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<uint32>(0, (uint32)var0.get<uint16>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(2);
}

// First occurrence: fn0857f4, line 466
static void exec_e165162a16c8c198(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() < (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: fn085838, line 523
static void exec_cb8d4c85feb29333(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int8>() >= var4.get<int8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: fn084258, line 709
static void exec_9bfe8b838973e7c4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var3.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: Object.AnimationProgress.CheckEnd, line 756
static void exec_3a016b73161bb84a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: Object.AnimationProgress.CheckEnd, line 762
static void exec_b643ab88ec1536f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)-(signed)var5.get<uint8>());
	*context.getParameter<uint8*>(16) = var6.get<uint8>();
}

// First occurrence: fn08455e, line 813
static void exec_2097124b32329491(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int32)(uint32)var6.get<int8>());
	const AnyBaseValue var8((uint32)(var0.get<uint32>() + var7.get<uint32>()));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn0845e4, line 953
static void exec_ce5a6c3ed442bf74(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int16)(uint16)var6.get<int8>());
	*context.getParameter<uint16*>(16) = var7.get<uint16>();
}

// First occurrence: Object.AnimationProgress.SpeedUp, line 1250
static void exec_4fef99271a52c290(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() >= var7.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Object.AnimationProgress.SlowDown, line 1336
static void exec_c79452d92fdf777a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0847e6, line 1364
static void exec_f389699a0d02b408(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)-(signed)var4.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var3.get<int16>() > var5.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0847e6, line 1374
static void exec_d5504339fad4b773(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<int16>() < var6.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: fn08486e, line 1432
static void exec_8d1d83dc6c517085(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<int8>() < var4.get<int8>()));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn084c00, line 1805
static void exec_1a7bac884d45815d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int16)(uint16)var9.get<int8>());
	const AnyBaseValue var11((uint16)(var5.get<uint16>() + var10.get<uint16>()));
	*context.getParameter<uint16*>(40) = var11.get<uint16>();
}

// First occurrence: fn084c42, line 1816
static void exec_915007d268569298(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)(uint32)context.readValueStack<int16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>() & 0x1f)));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn084c42, line 1818
static void exec_4754434a3bb76bd7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((int32)(var0.get<int32>() >> (var1.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn084c72, line 1834
static void exec_59e84cba0bc2dc0a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((int32)(var2.get<int32>() >> (var3.get<int32>() & 0x1f)));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn0863ec, line 2132
static void exec_ee5046badb2f3f3b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) - context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) > var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn0863ec, line 2154
static void exec_65904b7e72a0f1fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() >> (var5.get<uint16>() & 0x0f)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: fn0863ec, line 2155
static void exec_d06ca02270c0e6c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint16)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: fn0863ec, line 2156
static void exec_d0676daf0577625b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() << (uint16)(context.getParameter<int64>(4) & 0x0f)));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn084e6c, line 2199
static void exec_aef5e267e35b486c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	*context.getParameter<uint16*>(24) = var7.get<uint16>();
}

// First occurrence: fn08ead2, line 77
static void exec_e38c01df42c29d89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)((uint8)context.getParameter<int64>() - var6.get<uint8>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn08ebe2, line 184
static void exec_ae760c0cea990149(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((int16)(var4.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((int16)1);
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn08e7d4, line 198
static void exec_f79d5d9bb7c8772e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint16>());
}

// First occurrence: fn08e828, line 209
static void exec_0cd9e785a6c3bd6f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() <= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn08e9fa, line 418
static void exec_fe757120b5453a06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() * var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn08619a, line 461
static void exec_2c82a84b1ce041eb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint16>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var7.get<uint32>();
}

// First occurrence: fn085c7e, line 56
static void exec_ab201aa0fa4da701(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: CheckForBossStart, line 86
static void exec_908caaba2f0f0ab1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)(uint8)(var0.get<uint16>() <= var3.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var4.get<uint8>());
}

// First occurrence: CheckForBossStart, line 90
static void exec_c6feb4917f5d6a84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: CheckForBossStart, line 108
static void exec_ed62d44c520334a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() > var1.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: CheckForBossStart, line 126
static void exec_a049614560d6b13e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() != (uint8)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Boss.updateHitFlashing, line 281
static void exec_1bd91c6e892a9343(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Boss.updateHitFlashing, line 283
static void exec_9db039891ba70a17(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() * (uint8)(context.getParameter<int64>(20))));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	context.writeValueStack<uint32>(3, (var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(28));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	context.writeValueStack<uint8>(4, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	context.moveValueStack(5);
}

// First occurrence: Boss.updateHitFlashing, line 286
static void exec_233ae2afd655f48f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: Boss.updateHitFlashing, line 288
static void exec_d2e4586c1bab7a35(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(4, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.moveValueStack(5);
}

// First occurrence: Boss.updateHitFlashing, line 292
static void exec_5d313be2a59ec069(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Boss.updateHitFlashing, line 299
static void exec_74e988f827d9694e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)((uint8)context.getParameter<int64>() - var1.get<uint8>()));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() * (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: Boss.updateHitFlashing, line 299
static void exec_795df26bb5c1e263(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(uint16)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: Boss.updateHitFlashing, line 302
static void exec_9c9e04bf702ab97e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: Boss.updateHitFlashing, line 304
static void exec_b39360d8e1b8999b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(24), var9.get<uint32>());
}

// First occurrence: Boss.updateHitFlashing, line 305
static void exec_7b5132a0ddc25ed7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var0.get<uint32>(), context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var3.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: Boss.updateHitFlashing, line 317
static void exec_36ebed120e20fc81(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var6.get<uint16>());
	const AnyBaseValue var8((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	const AnyBaseValue var9((int64)1);
	const AnyBaseValue var10((uint8)(var8.get<uint8>() + var9.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var10.get<uint8>());
}

// First occurrence: fn083c06, line 389
static void exec_7808bcf94068a15b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var6((uint32)(var3.get<uint32>() + var5.get<uint32>()));
	*context.getParameter<uint32*>(24) = var6.get<uint32>();
}

// First occurrence: fn083c06, line 400
static void exec_597a4a08ffd9272b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(1, (uint16)var2.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: fn083d84, line 493
static void exec_5fe75f31ab8eba9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var4.get<uint32>());
}

// First occurrence: fn083e90, line 573
static void exec_2bbfa98e9928086b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
}

// First occurrence: fn083e90, line 574
static void exec_2db0fb5eecf8a73d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn083e90, line 579
static void exec_ae996075317ba57f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: FadeColorToWhiteUniform, line 794
static void exec_ff70ad5a8c52394c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(0, (uint8)(var2.get<uint16>() < (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: UpdatePlayer1SpritePatterns, line 929
static void exec_0742018827fc0f0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var8.get<uint32>()));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn067f1e, line 1061
static void exec_c038d78becc9b26f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var2.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: fn068dfa, line 526
static void exec_27d986f2676f9c7c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var0.get<uint16>() + var5.get<uint16>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn068ee4, line 611
static void exec_6c1e85e2cc27b04a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() * (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() + var4.get<uint32>()));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
}

// First occurrence: fn068ee4, line 613
static void exec_70cb571e5744677b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-2) * var0.get<uint32>()));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var1.get<uint32>(), (uint32)context.getParameter<int64>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn068ee4, line 615
static void exec_e54bc1cd737e5216(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn068928, line 973
static void exec_8dbe73af02285934(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var6((uint16)(var0.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn0689f8, line 1049
static void exec_f66846d54fa15201(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn0691a8, line 28
static void exec_aaf298fb3bfa57ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() >= (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: fn069a66, line 309
static void exec_22f35a3f392ba8c9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint16>());
	*context.getParameter<uint32*>(40) = var8.get<uint32>();
}

// First occurrence: fn069a66, line 311
static void exec_93da922e252127f0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() - var4.get<uint32>()));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn069588, line 414
static void exec_64aebccfff2d221c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06ddf2, line 470
static void exec_8a73db6bfc7b0c1f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn06e128, line 741
static void exec_c09deded1e841397(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var5.get<uint16>());
	const AnyBaseValue var7((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var8((int64)1);
	const AnyBaseValue var9((uint8)(var7.get<uint8>() + var8.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(44), var9.get<uint8>());
}

// First occurrence: fn06e8a2, line 487
static void exec_1835efc43ef8e81f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06e8a2, line 487
static void exec_b1e45e1c2fe9a173(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var8.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06e8b6, line 507
static void exec_b94e9d89e1e2686e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int16)1);
	const AnyBaseValue var2((int16)(var0.get<int16>() >> (var1.get<int16>() & 0x0f)));
	const AnyBaseValue var3((uint16)-(signed)var2.get<uint16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
}

// First occurrence: fn06e994, line 601
static void exec_255d71d6177b8d92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() << (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn06e9e2, line 639
static void exec_a98395ebebb33196(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn06ebac, line 784
static void exec_9d100a0bc33c70b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: fn081726, line 41
static void exec_59d26d496ae12ce3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn0818b4, line 193
static void exec_9672c0a430c4a5bd(const RuntimeOpcodeContext context)
{
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<int64>(8), (uint32)context.getParameter<int64>());
}

// First occurrence: fn081ede, line 425
static void exec_2ef3f2bebe8c0bc4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() >> (uint8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((uint16)(var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn081ede, line 427
static void exec_fda97997dd2fedca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn082cd6, line 621
static void exec_64debe8bbf3cb9df(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() + var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)1);
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + var10.get<uint32>()));
	*context.getParameter<uint32*>(40) = var11.get<uint32>();
	const AnyBaseValue var12((uint32)1);
	const AnyBaseValue var13((uint32)(var11.get<uint32>() - var12.get<uint32>()));
	const AnyBaseValue var14((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13.get<uint32>()));
	const AnyBaseValue var15((int16)(uint16)var14.get<int8>());
	const AnyBaseValue var16((uint16)(var8.get<uint16>() + var15.get<uint16>()));
	const AnyBaseValue var17((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var19((uint32)(var17.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var19.get<uint32>(), var16.get<uint16>());
}

// First occurrence: fn0830c0, line 787
static void exec_bb7bf704e407c702(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)-(signed)var3.get<uint8>());
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn0830c0, line 791
static void exec_bb3d551ae0c10124(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn0830c0, line 798
static void exec_af78be2e787e5a9b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn081a74, line 24
static void exec_58065398b1dc9adc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn081b26, line 91
static void exec_18907042d0969764(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn081b26, line 100
static void exec_6332a1c677f8ba47(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint32>(0, (var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn081b26, line 104
static void exec_26f7ae4e181333dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var5((uint32)(context.readValueStack<uint32>(-2) + var4.get<uint32>()));
	*context.getParameter<uint32*>(16) = var5.get<uint32>();
	context.moveValueStack(-2);
}

// First occurrence: fn082c6a, line 224
static void exec_45708d0d72409563(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
}

// First occurrence: fn082c6a, line 226
static void exec_75fb44e755d7e0d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() < var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: fn081e28, line 355
static void exec_b2a3de703034bab0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - var5.get<uint16>()));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn08249a, line 368
static void exec_bb41f1cf2df3aedd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint16)(var4.get<uint16>() + var8.get<uint16>()));
	*context.getParameter<uint16*>(32) = var9.get<uint16>();
}

// First occurrence: fn07ddb4, line 24
static void exec_6e2d692e7c9bd31b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn07e7b4, line 1175
static void exec_0d69974b3561b785(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: fn07ec84, line 1703
static void exec_0374c4ca67176444(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() > var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn07f2fe, line 286
static void exec_bcbc4314e8c9df01(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn07f56e, line 635
static void exec_1b737d8a659810cd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() == var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var7.get<uint8>());
}

// First occurrence: fn07fa7e, line 1247
static void exec_61927115ca8994d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn07facc, line 1280
static void exec_1e7dd633e98d01cf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() < var6.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn07fe2c, line 97
static void exec_be76d6e9a7bc807a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn080b66, line 587
static void exec_474005cc6de7bec5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((int64)0);
	context.writeValueStack<uint8>(-1, (var2.get<uint8>() == var3.get<uint8>()));
}

// First occurrence: fn080b90, line 608
static void exec_2e53a6be85ed7ab7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() & (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: fn080c60, line 699
static void exec_d63b7ee5fa676ad3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(32), var8.get<uint16>());
}

// First occurrence: fn080fa6, line 592
static void exec_e8a6a4d2320b6fc2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	*context.getParameter<uint32*>(12) = var2.get<uint32>();
}

// First occurrence: fn0801d8, line 77
static void exec_ff44e96f44b67879(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() > var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn0802c0, line 177
static void exec_e2c2209460b257d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) <= var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn080426, line 211
static void exec_c58c45aa48397439(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn080426, line 213
static void exec_b23d06bd0ea957fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(var3.get<uint8>() | var6.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint8>());
}

// First occurrence: fn080426, line 216
static void exec_f8793c8815010282(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var5.get<uint32>();
}

// First occurrence: fn080426, line 218
static void exec_613f5d3e7685bf39(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn080e2c, line 441
static void exec_af5907c37f3fe7a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn080e2c, line 480
static void exec_75fbbf27dbd762fa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn06f12a, line 340
static void exec_98fef17f8fae935f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() + var6.get<uint8>()));
	*context.getParameter<uint8*>(16) = var7.get<uint8>();
}

// First occurrence: fn06f2a8, line 525
static void exec_b368a2aeff272adf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)(uint8)(var0.get<uint16>() < var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int64)1);
	const AnyBaseValue var11((uint8)(var9.get<uint8>() & var10.get<uint8>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var11.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn06f7a6, line 1025
static void exec_9bbab1fd373fdf17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	*context.getParameter<uint32*>(16) = var2.get<uint32>();
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var7((uint16)*context.getParameter<uint16*>(40));
	const AnyBaseValue var8((int32)(uint32)var7.get<int16>());
	const AnyBaseValue var9((uint32)(var6.get<uint32>() + var8.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn06f7a6, line 1027
static void exec_f2499780c6db3ea2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn06f91c, line 1218
static void exec_b3dcfc544f344165(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)(var8.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	const AnyBaseValue var11((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var13((uint32)(var11.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var13.get<uint32>(), var10.get<uint16>());
}

// First occurrence: fn070854, line 245
static void exec_898aa48a88ae88fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn070870, line 274
static void exec_5569bd32a0104a12(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var1.get<uint32>(), var0.get<uint8>());
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var4.get<uint32>());
}

// First occurrence: fn0709a8, line 424
static void exec_16c7e434eb7164b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn070dac, line 831
static void exec_32ea200e12481a48(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(var3.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint16)1);
	const AnyBaseValue var10((int16)(var8.get<int16>() >> (var9.get<int16>() & 0x0f)));
	*context.getParameter<uint16*>(32) = var10.get<uint16>();
}

// First occurrence: fn084e1e, line 1103
static void exec_b27c9b42232d4266(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)-(signed)var4.get<uint8>());
	const AnyBaseValue var6((int32)(uint32)var5.get<int8>());
	*context.getParameter<uint32*>(16) = var6.get<uint32>();
}

// First occurrence: fn06feb2, line 210
static void exec_bb07af0b9714458a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var9.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06feb2, line 217
static void exec_a4183bf589484c38(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint16)(var7.get<uint16>() - (uint16)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() >= var9.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn070118, line 413
static void exec_79d6af768d6a49ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((int64)0);
	context.writeValueStack<uint8>(2, (var6.get<uint8>() == var7.get<uint8>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn0702ea, line 617
static void exec_e865007f9c4ec9ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var0.get<uint16>());
}

// First occurrence: fn06a710, line 920
static void exec_c0e3d834231eb22a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn06aad2, line 1289
static void exec_7b8b5e55e5c51ff0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	*context.getParameter<uint16*>(16) = var6.get<uint16>();
}

// First occurrence: fn06ab76, line 1336
static void exec_c00569fafcbe1f4b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>() - var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn06ab76, line 1341
static void exec_6ff6c483a6788d76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn06b50c, line 690
static void exec_1e5c0a42e473b772(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn06b916, line 1075
static void exec_b5a82c363bff0585(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((int16)(uint16)var7.get<int8>());
	*context.getParameter<uint16*>(24) = var8.get<uint16>();
}

// First occurrence: fn06ba06, line 1154
static void exec_a18174f2f5329036(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int64)0);
	context.writeValueStack<uint8>(0, (var4.get<uint8>() == var5.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn06bada, line 1216
static void exec_238cb8d96e22c71e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var4.get<uint32>(), (uint8)context.getParameter<int64>());
}

// First occurrence: fn06bb5c, line 1288
static void exec_1dae43bc15864ced(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06bb5c, line 1288
static void exec_e0913259e022c7f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint16)(var1.get<uint16>() + var5.get<uint16>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var6.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn06bb9a, line 1304
static void exec_75555b3f9f8033b0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(2, (uint8)(var3.get<int16>() >= var4.get<int16>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn06401c, line 380
static void exec_780ce6c693bcac02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)OpcodeExecUtils::safeModulo<uint32>((uint32)context.readValueStack<uint32>(-1), (uint32)context.getParameter<int64>()));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(var1.get<uint32>() == var2.get<uint32>()));
}

// First occurrence: fn064090, line 438
static void exec_29e35fa0b41cb6ef(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var7.get<uint8>());
}

// First occurrence: fn064090, line 439
static void exec_8e769109748976c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((int64)0);
	const AnyBaseValue var3((uint8)(uint8)(var1.get<uint16>() == var2.get<uint16>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var3.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn064258, line 622
static void exec_8ae6f2a1bff1d4aa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) < var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn0660e2, line 806
static void exec_a677559ba82e46f8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	const AnyBaseValue var8((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var9((int64)0);
	const AnyBaseValue var10((uint8)(uint8)(var8.get<int16>() < var9.get<int16>()));
	const AnyBaseValue var11((uint8)(var7.get<uint8>() != var10.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var11.get<uint8>());
}

// First occurrence: fn06615a, line 886
static void exec_d52802f72875e416(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() <= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Boss.ICZ1.UpdateState00, line 113
static void exec_761cdc659db3f279(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-3), var2.get<uint16>());
	context.moveValueStack(-3);
}

// First occurrence: Boss.ICZ1.UpdateState00, line 116
static void exec_6a642db8135d6918(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(8)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn0716b2, line 674
static void exec_c7ecc171472fbf85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (var5.get<uint32>() & 0x1f)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var12.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn071de2, line 271
static void exec_9fab36ba2f01ffa1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn072168, line 626
static void exec_73153650f05e89d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(24));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint8)(var3.get<uint8>() | var8.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var9.get<uint8>());
}

// First occurrence: fn0724c8, line 178
static void exec_5fb464c74505edc3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (var1.get<uint8>() > (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn073b3c, line 328
static void exec_5d1739f420fb78f1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() < (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn073ba0, line 378
static void exec_f6130ace7af1ea00(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint16)((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var4((int16)(var2.get<int16>() * (int16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var4.get<uint16>();
}

// First occurrence: fn073c2a, line 429
static void exec_c3a18ab7ead5c162(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint8>());
	const AnyBaseValue var5((uint32)1);
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (var5.get<uint32>() & 0x1f)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var8.get<uint32>();
}

// First occurrence: fn073f1c, line 770
static void exec_35375a6c23dcd0e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	*context.getParameter<uint8*>(8) = var2.get<uint8>();
	context.moveValueStack(-1);
}

// First occurrence: fn0729de, line 74
static void exec_8ea34876a0bdc6b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: fn0732f6, line 618
static void exec_a629ea2c31b39141(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint32>(-1, (var0.get<uint32>() & var1.get<uint32>()));
}

// First occurrence: fn0734e4, line 773
static void exec_fa3eaca22c329618(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(16))));
	*context.getParameter<uint8*>(24) = var4.get<uint8>();
}

// First occurrence: fn07361e, line 884
static void exec_8217d02d5ea80e29(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: fn0742a8, line 55
static void exec_a9f3ce79580c0207(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn0744fc, line 300
static void exec_f36b520fcc065e83(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>())));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	context.moveValueStack(-1);
}

// First occurrence: fn074c8c, line 1147
static void exec_4ee9e0d1d0512059(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)0);
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn078522, line 41
static void exec_4321c65cdf658485(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(20))));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(1, (var6.get<uint16>() + var7.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: fn078b46, line 717
static void exec_0bfbb298b8a26788(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() >> (var4.get<uint8>() & 0x07)));
	const AnyBaseValue var6((int64)1);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & var6.get<uint8>()));
	const AnyBaseValue var8((int64)0);
	context.writeValueStack<uint8>(0, (var7.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: fn078b46, line 722
static void exec_9a22dd546af45908(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	const AnyBaseValue var7((int16)(var5.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint16)((uint16)context.getParameter<int64>() - var7.get<uint16>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: fn079ac4, line 390
static void exec_2eb1a71dd13758e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() >> (var3.get<uint16>() & 0x0f)));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn079b22, line 417
static void exec_af9f1cdee65d0ef9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint8>());
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	*context.getParameter<uint32*>(16) = var4.get<uint32>();
}

// First occurrence: fn0886ea, line 171
static void exec_54b22f2e0cc6790a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint32>(2, (var3.get<uint32>() & var4.get<uint32>()));
	context.writeValueStack<uint32>(0, var2.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: fn088864, line 309
static void exec_aedecfa5c83e5a09(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: fn0889a8, line 430
static void exec_748d31f205d7c8e0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn06cff4, line 458
static void exec_91884971dc4f84d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((int32)(context.readValueStack<int32>(-2) * var0.get<int32>()));
	const AnyBaseValue var3((int32)OpcodeExecUtils::safeDivide<int32>((int32)var1.get<int32>(), (int32)context.getParameter<int64>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int32>());
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn06d060, line 510
static void exec_ace6b4ebc47b286b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)context.getParameter<int64>(), (uint32)var2.get<uint32>()));
	*context.getParameter<uint32*>(16) = var3.get<uint32>();
}

// First occurrence: fn06d060, line 518
static void exec_7a2769ac91eb5774(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() + var7.get<uint8>()));
	const AnyBaseValue var10((uint8)(var8.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	*context.getParameter<uint8*>(40) = var10.get<uint8>();
}

// First occurrence: fn06d6cc, line 543
static void exec_1d0d2bb301a5bb1e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)(uint16)var4.get<uint8>());
	*context.getParameter<uint16*>(16) = var5.get<uint16>();
}

// First occurrence: fn06d710, line 557
static void exec_d21308d135cd7174(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var3.get<uint32>();
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint16)(var0.get<uint16>() + var6.get<uint16>()));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(40));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn08614e, line 584
static void exec_0f5f02983dfb8ca9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(24)));
	context.writeValueStack<uint16>(2, (var3.get<uint16>() * (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(3);
}

// First occurrence: fn02468a, line 619
static void exec_ff657d23c97eff15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	*context.getParameter<uint16*>(24) = var6.get<uint16>();
}

// First occurrence: fn0246da, line 659
static void exec_a17a6e9aeec47813(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint32)(uint32)var7.get<uint8>());
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var3.get<uint32>() + var10.get<uint32>()));
	*context.getParameter<uint32*>(40) = var11.get<uint32>();
}

// First occurrence: fn0246da, line 664
static void exec_bdc5243bbf5fa5a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn0246da, line 730
static void exec_4422f72619eb5d02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	context.writeValueStack<uint32>(0, (var4.get<uint32>() & (uint32)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: fn02479c, line 757
static void exec_a60d26bd8763ea5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((uint32)(uint32)var2.get<uint16>());
	const AnyBaseValue var4((uint32)(var1.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() >> (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var7.get<uint16>());
}

// First occurrence: fn0248b8, line 941
static void exec_a6eca69c9ada5724(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)1);
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	*context.getParameter<uint32*>(8) = var2.get<uint32>();
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var5((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var4.get<uint32>()));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & var6.get<uint8>()));
	*context.getParameter<uint8*>(24) = var7.get<uint8>();
}

// First occurrence: fn06c8b4, line 255
static void exec_6d42ec6c9cf6dc90(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn06d1de, line 372
static void exec_05f02fdff8e6eaa5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() & (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn06d45e, line 428
static void exec_2239e9846e5c9991(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var6.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn06d45e, line 433
static void exec_2303ba0ed9acc7b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: fn06d45e, line 438
static void exec_84f2a9711c09062a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var4((uint32)0);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn06d45e, line 442
static void exec_de8837ad30af2199(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint32>());
}

// First occurrence: fn06d4dc, line 460
static void exec_60a10088b8c4415d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & var1.get<uint16>()));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
}

// First occurrence: fn06d51a, line 497
static void exec_9271f0d79ce62e5a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var6((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint8>());
}

// First occurrence: fn06d51a, line 505
static void exec_04b7879c3597665b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var2((int32)(uint32)var1.get<int16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() + var2.get<uint32>()));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint32>());
}

// First occurrence: fn0753de, line 240
static void exec_87400d7ca1c52601(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint8>(-2, (uint8)(context.readValueStack<uint16>(-2) > var1.get<uint16>()));
	context.moveValueStack(-1);
}

// First occurrence: fn0757a0, line 569
static void exec_fd36868741d222d6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0757d6, line 599
static void exec_e44dd42fc13011a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int32>());
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
}

// First occurrence: fn07585a, line 649
static void exec_24d5ef71063c3f76(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int32>());
	*context.getParameter<uint16*>(24) = var5.get<uint16>();
}

// First occurrence: fn0758be, line 684
static void exec_6d8c0c531a734f6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)1);
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (var4.get<int16>() & 0x0f)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn0758be, line 685
static void exec_68d6cd7098561ec5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)1);
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (var4.get<int16>() & 0x0f)));
	const AnyBaseValue var6((uint16)-(signed)var5.get<uint16>());
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var9.get<uint32>(), var6.get<uint16>());
}

// First occurrence: fn07594c, line 747
static void exec_9e7e925660037e02(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() << (uint32)(context.getParameter<int64>(8) & 0x1f)));
	const AnyBaseValue var4((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var2.get<uint32>(), (uint32)context.getParameter<int64>(16)));
	*context.getParameter<uint32*>(24) = var4.get<uint32>();
}

// First occurrence: fn075ad4, line 938
static void exec_cace12c04d547ecc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() != var1.get<uint8>()));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: fn075c06, line 971
static void exec_f1c9f0bcce0962bc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>() & 0x0f)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	*context.getParameter<uint16*>(16) = var4.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn076782, line 623
static void exec_1e1f136d122c0ce7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int8>() <= var1.get<int8>()));
	context.moveValueStack(1);
}

// First occurrence: fn0557c8, line 828
static void exec_66631e8aa3777493(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint16>() != (uint16)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: fn0557c8, line 840
static void exec_883862ccaa88df61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((int16)(var6.get<int16>() * (int16)(context.getParameter<int64>(28))));
	const AnyBaseValue var9((uint16)(var2.get<uint16>() + var8.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var9.get<uint16>());
}

// First occurrence: BossSOZ1.slideAsRock, line 125
static void exec_e012f11707d73283(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: BossSOZ1.slideAsRock, line 128
static void exec_49f6410b77d73c3d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) & (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(var1.get<uint16>() == var2.get<uint16>()));
}

// First occurrence: fn07706c, line 758
static void exec_0b2f0fc40f301b21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int16)(uint16)var3.get<int8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var4.get<uint16>());
}

// First occurrence: fn07706c, line 761
static void exec_5bbf80e10c63f576(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	*context.getParameter<uint16*>(20) = var5.get<uint16>();
}

// First occurrence: FadeInColorUniform, line 954
static void exec_32adc756fcec6b86(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() << (uint32)(context.getParameter<int64>(12) & 0x1f)));
	const AnyBaseValue var5((uint32)(var1.get<uint32>() & var4.get<uint32>()));
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() << (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var11((uint32)(var7.get<uint32>() & var10.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var5.get<uint32>() < var11.get<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: FadeInColorUniform, line 958
static void exec_b1bade9c61dece61(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)*context.getParameter<uint8*>(4));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(var0.get<uint16>() & var2.get<uint16>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var6((uint16)(uint16)var5.get<uint8>());
	const AnyBaseValue var7((uint16)(var4.get<uint16>() & var6.get<uint16>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var7.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn07764e, line 30
static void exec_c900049a145eec9e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: fn077b16, line 475
static void exec_a4c1d16563fa22e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int8)(var3.get<int8>() >> (int8)(context.getParameter<int64>(16) & 0x07)));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint8>());
}

// First occurrence: fn077fec, line 1033
static void exec_f284a200dd3b3373(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint16>(0, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint16)(uint16)var10.get<uint8>());
	context.writeValueStack<uint16>(1, (var6.get<uint16>() - var11.get<uint16>()));
	const AnyBaseValue var12((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var14((uint32)(var12.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var15((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var14.get<uint32>()));
	context.writeValueStack<uint16>(2, (uint16)var15.get<uint8>());
	const AnyBaseValue var16((uint32)*context.getParameter<uint32*>(64));
	const AnyBaseValue var18((uint32)(var16.get<uint32>() + (uint32)(context.getParameter<int64>(72))));
	const AnyBaseValue var19((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var18.get<uint32>()));
	const AnyBaseValue var21((uint8)(var19.get<uint8>() * (uint8)(context.getParameter<int64>(80))));
	context.writeValueStack<uint16>(3, (uint16)var21.get<uint8>());
	const AnyBaseValue var23((uint32)*context.getParameter<uint32*>(96));
	const AnyBaseValue var25((uint32)(var23.get<uint32>() + (uint32)(context.getParameter<int64>(104))));
	const AnyBaseValue var26((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var25.get<uint32>()));
	context.writeValueStack<uint16>(4, ((uint16)context.getParameter<int64>(88) - var26.get<uint16>()));
	context.moveValueStack(5);
}

// First occurrence: fn07808c, line 1112
static void exec_2e313576e68bcfda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint8)(var3.get<uint8>() - var7.get<uint8>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint8>());
}

// First occurrence: fn07819a, line 1246
static void exec_3903105326c44e69(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((int16)(var6.get<int16>() * (int16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var11.get<uint32>(), var8.get<uint16>());
}

// First occurrence: BossSSZ.Mecha.calculateInitialVelocityForMovement, line 15
static void exec_5ca6b17530352fe0(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<float>(context.getParameter<uint32>(), context.readValueStack<float>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: BossSSZ.Mecha.calculateInitialVelocityForMovement, line 23
static void exec_9cb023365050fa11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((float)(float)var0.get<uint32>());
	const AnyBaseValue var2((float)context.readLocalVariable<float>(context.getParameter<uint32>(4)));
	context.writeValueStack<float>(0, (var1.get<float>() * var2.get<float>()));
	context.moveValueStack(1);
}

// First occurrence: BossSSZ.Mecha.calculateInitialVelocityForMovement, line 27
static void exec_1cc3b645a369a7d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() << (uint32)(context.getParameter<int64>(4) & 0x1f)));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: BossSSZ.Mecha.calculateInitialVelocityForMovement, line 27
static void exec_2c73891e5711c3da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-2) * var0.get<uint32>()));
	context.writeValueStack<uint32>(-2, (var1.get<uint32>() * (uint32)(context.getParameter<int64>())));
	context.moveValueStack(-1);
}

// First occurrence: fn07b2dc, line 103
static void exec_0a019d5b3357fc72(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: BossMecha1.setBossArea, line 148
static void exec_83c72e8e2c3aec40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>())));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(8), var2.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: fn07b544, line 305
static void exec_0cdcaa11fa35d8d3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint16>(-1) > var0.get<uint16>()));
}

// First occurrence: fn07b544, line 308
static void exec_a073c88e8d09056c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() < var1.get<int16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<float>(2, context.getParameter<float>(8));
	context.moveValueStack(3);
}

// First occurrence: fn07b544, line 312
static void exec_a3349337d8ef17e7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int16)(var0.get<int16>() * var1.get<int16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint16>());
}

// First occurrence: fn07b57a, line 330
static void exec_a444b8f6ba90a970(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<uint8>(-3, (uint8)(context.readValueStack<uint16>(-3) > var2.get<uint16>()));
	context.moveValueStack(-2);
}

// First occurrence: fn07b5e8, line 366
static void exec_643edb4debaf4b03(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var3((int16)(var1.get<int16>() * (int16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn07d216, line 889
static void exec_f94ae7292b10c900(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: fn07d2d8, line 936
static void exec_2cc2c3452aeadb67(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() & (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)(var0.get<uint8>() | var6.get<uint8>()));
	*context.getParameter<uint8*>(32) = var7.get<uint8>();
}

// First occurrence: BossMidSSZ1.getMoveTime, line 34
static void exec_f42b0aa71858bcea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeValueStack<uint16>(1, OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: fn07a35e, line 180
static void exec_fd09071eb836a895(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)-(signed)context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var0.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn07a35e, line 181
static void exec_d46405661ea3f47d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int16)1);
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - var0.get<uint16>()));
	const AnyBaseValue var2((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var1.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn07a35e, line 185
static void exec_67fddf23562dfa91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)OpcodeExecUtils::safeDivide<int16>((int16)var3.get<int16>(), (int16)context.getParameter<int64>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var2.get<uint32>(), var5.get<uint16>());
}

// First occurrence: fn07a35e, line 186
static void exec_9c9f2ac2eb8a22c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() * (int16)(context.getParameter<int64>(16))));
	const AnyBaseValue var7((uint16)(var5.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: fn07a3a8, line 234
static void exec_47e9ee040633506a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((int16)1);
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var6.get<uint32>(), var3.get<uint16>());
	context.moveValueStack(-1);
}

// First occurrence: fn07a496, line 344
static void exec_717258cc37bde6b1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() <= (uint8)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: fn07a500, line 407
static void exec_269ce4121d8dd67f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((int16)OpcodeExecUtils::safeDivide<int16>((int16)context.readValueStack<int16>(-1), (int16)context.getParameter<int64>()));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn07a72c, line 119
static void exec_0ab23f6de97b0c31(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	*context.getParameter<uint32*>(8) = var3.get<uint32>();
	const AnyBaseValue var4((uint32)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() - var4.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var5.get<uint32>(), var0.get<uint8>());
}

// First occurrence: fn07a85a, line 177
static void exec_db84ebd67a523609(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(8));
	const AnyBaseValue var3((int16)(var1.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	const AnyBaseValue var4((uint16)(var0.get<uint16>() + var3.get<uint16>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint16>());
}

// First occurrence: fn07a8f4, line 246
static void exec_f151377b87d8f3ee(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | var1.get<uint16>()));
	*context.getParameter<uint16*>(16) = var2.get<uint16>();
}

// First occurrence: fn07acf2, line 674
static void exec_3bf3a285b187d0a0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<int32>(-1) <= var0.get<int32>()));
}

// First occurrence: fn07acf2, line 692
static void exec_7bca15d32b2f934f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(4, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.moveValueStack(5);
}

// First occurrence: fn07b02a, line 969
static void exec_679d954fa0d0e668(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)*context.getParameter<uint16*>(16));
	const AnyBaseValue var6((int16)(var4.get<int16>() >> (int16)(context.getParameter<int64>(24) & 0x0f)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() - var6.get<uint16>()));
	*context.getParameter<uint16*>(32) = var7.get<uint16>();
}

// First occurrence: fn07b0c2, line 1015
static void exec_f49d254f3859ffda(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn07b116, line 1044
static void exec_0769c52d86f1f538(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	context.writeValueStack<uint32>(-1, (context.readValueStack<uint32>(-1) + var0.get<uint32>()));
}

// First occurrence: fn07b12e, line 1052
static void exec_35f63664c2e4aa2d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)swapBytes32(*context.getParameter<uint32*>(8)));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var3((int32)(uint32)var2.get<int16>());
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(24) & 0x1f)));
	const AnyBaseValue var6((uint32)(var1.get<uint32>() + var5.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint32>(*context.mControlFlow, context.getParameter<uint32>(), var6.get<uint32>());
}

// First occurrence: fn07bfa0, line 689
static void exec_c2295d2ab8b48204(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)*context.getParameter<uint16*>());
	const AnyBaseValue var1((int32)(uint32)var0.get<int16>());
	const AnyBaseValue var3((int32)(var1.get<int32>() * (int32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	*context.getParameter<uint32*>(32) = var9.get<uint32>();
}

// First occurrence: fn07c39e, line 1013
static void exec_4e32d5b2c4a7c406(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: fn07c684, line 1298
static void exec_284f018f04399aa4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)swapBytes32(*context.getParameter<uint32*>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint32>() != (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: fn07c9f6, line 1590
static void exec_fbc7369171b4a200(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) * (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	*context.getParameter<uint16*>(8) = var2.get<uint16>();
	context.moveValueStack(-2);
}

// First occurrence: fn0861d0, line 1856
static void exec_f9e733b4a4c83bcb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)((uint32)context.getParameter<int64>() << (var1.get<uint32>() & 0x1f)));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	*context.getParameter<uint16*>(16) = var3.get<uint16>();
}

// First occurrence: fn067c58, line 150
static void exec_e87c771b20a29659(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint8)(var3.get<uint8>() | var9.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), var10.get<uint8>());
}

// First occurrence: Standalone.getModdedSoundKey, line 29
static void exec_b42fcdb0ee2b747a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), context.readValueStack<uint64>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Standalone.playRumbleEffectForAudio, line 62
static void exec_23b33832d3e5c6fb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(1, context.getParameter<float>(8));
	context.writeValueStack<float>(2, (float)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: Standalone.playRumbleEffectForAudio, line 112
static void exec_801b7303a3b74307(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(1, context.getParameter<float>(8));
	context.writeValueStack<float>(2, 0.000000f);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: Standalone.playAudio, line 151
static void exec_7195a0a36d078d4d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint64)(uint64)var0.get<uint8>());
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(4), var1.get<uint64>());
}

// First occurrence: Standalone.playAudio, line 188
static void exec_48c21b60c80ee60e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint64>() != var1.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 192
static void exec_fe52c04c9cf86527(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(4), var0.get<uint64>());
}

// First occurrence: Standalone.playAudio, line 203
static void exec_e79ac7512add1b7a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), (uint64)context.getParameter<int64>());
}

// First occurrence: Standalone.playAudio, line 265
static void exec_bbe16fd4c25f15e9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.playAudio, line 309
static void exec_aa7c142974b43410(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)!var0.get<uint8>());
	*context.getParameter<uint8*>(8) = var1.get<uint8>();
}

// First occurrence: Standalone.playAudio, line 329
static void exec_793ac6f3adcba581(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint64>(0, (uint64)var0.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 329
static void exec_cbe85a9d6def6bd2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.playAudio, line 398
static void exec_825a1c6204e215a7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) != (uint8)(context.getParameter<int64>())));
}

// First occurrence: Standalone.playAudio, line 414
static void exec_2685da2d2befb73a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: Standalone.setFastMusicFlag, line 461
static void exec_c99986396b0dba66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() != var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: Standalone.setFastMusicFlag, line 462
static void exec_0f46031cbf6ecc5b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() | var1.get<uint8>()));
	*context.getParameter<uint8*>(12) = var2.get<uint8>();
}

// First occurrence: Standalone.setFastMusicFlag, line 464
static void exec_e0c30c6131d0af1c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint8)~var1.get<uint8>());
	const AnyBaseValue var3((uint8)(var0.get<uint8>() & var2.get<uint8>()));
	*context.getParameter<uint8*>(12) = var3.get<uint8>();
}

// First occurrence: Standalone.setFastMusicFlag, line 475
static void exec_cf274d124f9919ae(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(3, context.getParameter<float>(8));
	context.moveValueStack(4);
}

// First occurrence: Standalone.setFastMusicFlagWithSpeedup, line 484
static void exec_7669098c256259e9(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<float>(context.getParameter<uint32>(), context.readValueStack<float>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.moveValueStack(-2);
}

// First occurrence: Standalone.setFastMusicFlagWithSpeedup, line 486
static void exec_a57d263755219bae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((float)context.readLocalVariable<float>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<float>() <= context.getParameter<float>(4)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.setFastMusicFlagWithSpeedup, line 493
static void exec_f533f691c78758d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>());
	context.writeValueStack<float>(3, context.readLocalVariable<float>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Debugging.debugDraw, line 53
static void exec_29157159c84e7786(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	*context.getParameter<uint8*>() = var0.get<uint8>();
}

// First occurrence: Debugging.debugDrawDynamicObjects, line 79
static void exec_d3f24a4eacf4b7c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var8((uint16)(uint16)var7.get<uint8>());
	const AnyBaseValue var9((uint16)(var3.get<uint16>() - var8.get<uint16>()));
	context.writeValueStack<uint32>(0, (uint32)var9.get<uint16>());
	const AnyBaseValue var10((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var12((uint32)(var10.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var13((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var12.get<uint32>()));
	const AnyBaseValue var14((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var16((uint32)(var14.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var17((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var16.get<uint32>()));
	const AnyBaseValue var18((uint16)(uint16)var17.get<uint8>());
	const AnyBaseValue var19((uint16)(var13.get<uint16>() - var18.get<uint16>()));
	context.writeValueStack<uint32>(1, (uint32)var19.get<uint16>());
	const AnyBaseValue var20((uint32)*context.getParameter<uint32*>(64));
	const AnyBaseValue var22((uint32)(var20.get<uint32>() + (uint32)(context.getParameter<int64>(72))));
	const AnyBaseValue var23((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var22.get<uint32>()));
	const AnyBaseValue var25((uint8)(var23.get<uint8>() * (uint8)(context.getParameter<int64>(80))));
	const AnyBaseValue var26((int64)1);
	const AnyBaseValue var27((uint8)(var25.get<uint8>() + var26.get<uint8>()));
	context.writeValueStack<uint32>(2, (uint32)var27.get<uint8>());
	context.writeValueStack<uint32>(3, *context.getParameter<uint32*>(88));
	context.moveValueStack(4);
}

// First occurrence: Debugging.debugDrawDynamicObjects, line 79
static void exec_b68c04859900cbfb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() * (uint8)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + var5.get<uint8>()));
	context.writeValueStack<uint32>(-1, (uint32)var6.get<uint8>());
}

// First occurrence: setupCharactersSidePanelEntry, line 127
static void exec_5d7b4fc2ab168534(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() + var1.get<uint8>()));
	context.writeValueStack<uint64>(1, (uint64)var2.get<uint8>());
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint64>(2, (uint64)var3.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: setupCharactersSidePanelEntry, line 129
static void exec_42df5c643342f0ff(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)var1.get<uint32>());
	context.moveValueStack(2);
}

// First occurrence: setupCharactersSidePanelEntry, line 131
static void exec_61831df24f746df3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)var3.get<uint16>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var7((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var6.get<uint32>()));
	context.writeValueStack<uint64>(2, (uint64)var7.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: setupGameObjectsSidePanelEntry, line 163
static void exec_7a90c4fa01a72779(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(3);
}

// First occurrence: setupGameObjectsSidePanelEntry, line 179
static void exec_4f81790e5e926835(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint16>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint64>(2, (uint64)var1.get<uint16>());
	context.moveValueStack(3);
}

// First occurrence: setupGameObjectsSidePanelEntry, line 181
static void exec_04a8706962ff77b1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)var3.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: setupGameObjectsSidePanelEntry, line 187
static void exec_43f4628be2311631(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<uint32>(1, (uint32)var5.get<uint16>());
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(40));
	context.moveValueStack(5);
}

// First occurrence: OxygenCallback.debugAltLeftMouseDown, line 213
static void exec_2f71af659b056e1b(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.moveValueStack(-3);
}

// First occurrence: OxygenCallback.debugAltLeftMouseDown, line 217
static void exec_82e32a8709adb1d4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: OxygenCallback.debugAltLeftMouseDown, line 218
static void exec_0bc19e328eb07165(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(3);
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 233
static void exec_613b80364d317c8a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 236
static void exec_0f3d2d500d1aed91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), var2.get<uint16>());
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 237
static void exec_5f5f84850015bdf5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(4)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var4.get<uint16>());
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 239
static void exec_fb3c1c31827bd1b8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint16>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var7((uint32)(uint32)var6.get<uint16>());
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var10((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	const AnyBaseValue var11((uint32)(uint32)var10.get<uint16>());
	const AnyBaseValue var12((uint32)(var9.get<uint32>() + var11.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(32), var12.get<uint32>());
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 240
static void exec_de675a0187532b11(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() + var2.get<uint8>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var0.get<uint32>(), var3.get<uint8>());
}

// First occurrence: Debug.changeChunkAtScreenPosition, line 242
static void exec_bddcc3d425363d19(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint32>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint64>(2, (uint64)var2.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: Renderer.drawVdpSpriteWithTint, line 15
static void exec_9de3b7b1685676f3(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), context.readValueStack<uint16>(-7));
	context.moveValueStack(-7);
}

// First occurrence: Renderer.drawVdpSpriteWithTint, line 20
static void exec_0e5747665d381e3b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint32>(5, context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(6, context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.moveValueStack(7);
}

// First occurrence: Renderer.drawCustomSprite, line 23
static void exec_8e56ea61c9d18dcd(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), context.readValueStack<uint8>(-6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), context.readValueStack<uint16>(-7));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), context.readValueStack<uint16>(-8));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(32), context.readValueStack<uint64>(-9));
	context.moveValueStack(-9);
}

// First occurrence: Renderer.drawCustomSprite, line 27
static void exec_0110ec64afbdeb05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(7, context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint32>(8, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.moveValueStack(9);
}

// First occurrence: Renderer.drawCustomSpriteWithTransform, line 30
static void exec_90531d47416e98bf(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(4), context.readValueStack<uint32>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), context.readValueStack<uint32>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), context.readValueStack<uint8>(-7));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), context.readValueStack<uint8>(-8));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), context.readValueStack<uint16>(-9));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), context.readValueStack<uint16>(-10));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(40), context.readValueStack<uint64>(-11));
	context.moveValueStack(-11);
}

// First occurrence: Renderer.drawCustomSpriteWithTransform, line 34
static void exec_457888c90912f01f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(6, context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(7, context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint32>(8, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint32>(9, context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint32>(10, context.readLocalVariable<uint32>(context.getParameter<uint32>(40)));
	context.moveValueStack(11);
}

// First occurrence: debugDrawRect, line 44
static void exec_bed53ab98b2cb1c4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(6, 1);
	context.moveValueStack(7);
}

// First occurrence: debugDrawRect, line 51
static void exec_ca08cdaf93e6b9e0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(3, context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint32>(4, context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(6, 1);
	context.moveValueStack(7);
}

// First occurrence: Renderer.setPaletteEntry, line 80
static void exec_4188f6d25a0591ce(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (uint16)var0.get<uint8>());
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.moveValueStack(2);
}

// First occurrence: Renderer.drawCustomSprite, line 93
static void exec_8721a54e550974bb(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(20), context.readValueStack<uint64>(-6));
	context.moveValueStack(-6);
}

// First occurrence: Renderer.drawCustomSprite, line 95
static void exec_4e24c506593c32a6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)var0.get<uint8>());
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: Renderer.drawCustomSprite, line 98
static void exec_67fb141df946d40f(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), context.readValueStack<uint16>(-7));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(28), context.readValueStack<uint64>(-8));
	context.moveValueStack(-8);
}

// First occurrence: Renderer.drawCustomSprite, line 100
static void exec_15454bf917374f86(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)var0.get<uint8>());
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint8>(7, context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	context.moveValueStack(8);
}

// First occurrence: Renderer.drawCustomSpriteTinted, line 105
static void exec_6f907714409d8152(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)var0.get<uint8>());
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(7, context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint32>(8, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.moveValueStack(9);
}

// First occurrence: Renderer.drawCustomSpriteTransformed, line 110
static void exec_6f8b67be5047b92c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, (uint16)var0.get<uint8>());
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint32>(6, context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	context.writeValueStack<uint32>(7, context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint32>(8, context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	context.writeValueStack<uint32>(9, context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	context.writeValueStack<uint32>(10, context.readLocalVariable<uint32>(context.getParameter<uint32>(40)));
	context.moveValueStack(11);
}

// First occurrence: Standalone.setFastMusicFlagWithSpeedup, line 115
static void exec_72d26e70756adcbb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((float)(float)var0.get<uint32>());
	context.writeValueStack<float>(1, OpcodeExecUtils::safeDivide<float>((float)var1.get<float>(), (float)context.getParameter<float>(8)));
	context.moveValueStack(2);
}

// First occurrence: Init, line 62
static void exec_717e099d69b26355(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: PostFrameUpdate, line 100
static void exec_90628e5110222085(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, (uint32)var2.get<uint8>());
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 106
static void exec_c12ccd2057a58050(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint16>(-1));
	const AnyBaseValue var2((int32)OpcodeExecUtils::safeDivide<int32>((int32)var0.get<int32>(), (int32)context.getParameter<int64>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var2.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: PostFrameUpdate, line 108
static void exec_8892cbdf4a9cf74c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	const AnyBaseValue var5((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint16>());
	const AnyBaseValue var7((uint32)(var4.get<uint32>() - var6.get<uint32>()));
	const AnyBaseValue var8((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() - var8.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(28), var9.get<uint32>());
}

// First occurrence: PostFrameUpdate, line 114
static void exec_0e082405d99cb2e9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() & var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var3.get<uint32>());
}

// First occurrence: PostFrameUpdate, line 115
static void exec_e67b6acf97dd6ac5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var1.get<uint16>(), (uint16)context.getParameter<int64>(12)));
	const AnyBaseValue var4((uint32)(uint32)var3.get<uint16>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > var4.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 115
static void exec_ed91682a8d7a7507(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((int32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var5((uint32)(var0.get<uint32>() - var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var5.get<uint32>());
}

// First occurrence: PostFrameUpdate, line 119
static void exec_34a4f1f441c79855(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) >= var0.get<uint32>()));
}

// First occurrence: PostFrameUpdate, line 121
static void exec_7689f6fc2dbc8e06(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((int32)(var0.get<int32>() * (int32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((int32)OpcodeExecUtils::safeDivide<int32>((int32)var2.get<int32>(), (int32)context.getParameter<int64>(12)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var4.get<uint32>());
}

// First occurrence: PostFrameUpdate, line 123
static void exec_0e984874c9d9592c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) > var0.get<uint32>()));
}

// First occurrence: PostFrameUpdate, line 125
static void exec_a91e24369cd91b15(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int32>(0, (var0.get<int32>() * var1.get<int32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.moveValueStack(2);
}

// First occurrence: PostFrameUpdate, line 125
static void exec_249afbfb1f485412(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int32)OpcodeExecUtils::safeDivide<int32>((int32)context.readValueStack<int32>(-2), (int32)context.readValueStack<int32>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: PostFrameUpdate, line 126
static void exec_48f1744e62b81634(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int32>() > var1.get<int32>()));
	context.moveValueStack(1);
}

// First occurrence: PostFrameUpdate, line 136
static void exec_7f3103df538be599(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(1, 1);
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	context.writeValueStack<int16>(2, (uint16)var3.get<int32>());
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(20)));
	context.writeValueStack<int16>(3, (uint16)var4.get<int32>());
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: PostFrameUpdate, line 139
static void exec_9643c4da146959ab(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(-1, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
}

// First occurrence: PostFrameUpdate, line 142
static void exec_0d21ce6d0fb07589(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<int16>(2, (uint16)var0.get<int32>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<int16>(3, (uint16)var1.get<int32>());
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: PostFrameUpdate, line 153
static void exec_107ba51aedae042d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int32>(0, (uint32)var0.get<int16>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<int32>(1, (uint32)var1.get<int16>());
	context.moveValueStack(2);
}

// First occurrence: Standalone.onLevelStart, line 28
static void exec_0f0b3877037bf5bd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint8>(1, (uint8)(var0.get<uint16>() == (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onLevelStart, line 42
static void exec_65cebbc6aab722dc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>()));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onLevelStart, line 42
static void exec_52010271fd4f366d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int64)1);
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-1) - var0.get<uint16>()));
	context.writeValueStack<int8>(-1, (uint8)var1.get<int16>());
}

// First occurrence: Standalone.onMonitorOpened, line 94
static void exec_fa4b3114600f6b17(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)1);
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + var0.get<uint32>()));
	const AnyBaseValue var2((int8)(uint8)var1.get<int32>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var2.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: Standalone.onMonitorOpened, line 101
static void exec_c6957f7c9215e8d3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint32>(1, (uint32)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: Standalone.onAnimalFreed, line 130
static void exec_fe1e4fbd99909313(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)1);
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + var0.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var1.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: getZoneActInitials, line 48
static void exec_8b55867cfcc46bdd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(4) & 0x0f)));
	context.writeValueStack<int8>(0, (uint8)var2.get<int16>());
	context.moveValueStack(1);
}

// First occurrence: getZoneActInitials, line 49
static void exec_ee10c93b5f2576cc(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint64)0ull);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint64>() == var1.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: getZoneActInitials, line 52
static void exec_892cea729e5075a4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint64>(1, context.readLocalVariable<uint64>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(2, (var0.get<uint16>() & var1.get<uint16>()));
	context.moveValueStack(3);
}

// First occurrence: Standalone.loadRawLevelData, line 56
static void exec_6a8a3383ce0a305b(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), context.readValueStack<uint32>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(8), context.readValueStack<uint64>(-3));
	context.moveValueStack(-3);
}

// First occurrence: Standalone.loadRawLevelData, line 64
static void exec_915a3523064f7666(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.useMultiSampleCollision, line 28
static void exec_a6b76376fba4f7a4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() | (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint16>() != var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 31
static void exec_971d7c23cbbfa4a3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() | (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var3.get<uint32>(), var2.get<uint16>());
}

// First occurrence: Standalone.useMultiSampleCollision, line 112
static void exec_0a1d26423d9d590f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint32)(var0.get<uint32>() - var3.get<uint32>()));
	const AnyBaseValue var6((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var4.get<uint32>(), (uint32)context.getParameter<int64>(20)));
	const AnyBaseValue var7((int16)(uint16)var6.get<int32>());
	const AnyBaseValue var8((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var10.get<uint32>(), var7.get<uint16>());
}

// First occurrence: Standalone.useMultiSampleCollision, line 124
static void exec_d0bc58c0d29895ad(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var6((int16)OpcodeExecUtils::safeDivide<int16>((int16)var4.get<int16>(), (int16)context.getParameter<int64>(20)));
	const AnyBaseValue var7((uint16)(var3.get<uint16>() + var6.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(28), var7.get<uint16>());
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_b4364a114e684b24(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_ecffcbb6d7d44cbe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() < var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 130
static void exec_ae08e7e265a96441(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() >= var4.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.useMultiSampleCollision, line 134
static void exec_cf86a17d8587c71a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), var2.get<uint32>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var5.get<uint16>());
}

// First occurrence: Standalone.debugOutputMultiSampleCollision, line 174
static void exec_b7ee05a7973ddeff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint32>(0, (uint32)var1.get<uint16>());
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var4.get<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)var5.get<uint16>());
	const AnyBaseValue var6((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var9((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(28)));
	const AnyBaseValue var11((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint16)(var9.get<uint16>() - var11.get<uint16>()));
	context.writeValueStack<uint32>(2, (uint32)var12.get<uint16>());
	const AnyBaseValue var13((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(32)));
	const AnyBaseValue var15((uint32)(var13.get<uint32>() + (uint32)(context.getParameter<int64>(36))));
	const AnyBaseValue var16((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var15.get<uint32>()));
	const AnyBaseValue var17((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(44)));
	const AnyBaseValue var19((uint32)(var17.get<uint32>() + (uint32)(context.getParameter<int64>(48))));
	const AnyBaseValue var20((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var19.get<uint32>()));
	const AnyBaseValue var21((uint16)(var16.get<uint16>() - var20.get<uint16>()));
	context.writeValueStack<uint32>(3, (uint32)var21.get<uint16>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(56));
	context.moveValueStack(5);
}

// First occurrence: ROMManipulation.CutsceneKnucklesPalette, line 93
static void exec_027d5bb981dd2d85(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var4.get<uint16>());
}

// First occurrence: ROMManipulation.CutsceneKnucklesPalette, line 94
static void exec_d843258f75391fb0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var6((uint32)(uint32)var5.get<uint8>());
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var4.get<uint16>());
	const AnyBaseValue var9((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var11((uint8)(var9.get<uint8>() + (uint8)(context.getParameter<int64>(28))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(36), var11.get<uint8>());
}

// First occurrence: waitForNextFrame, line 86
static void exec_001d91ea8ae6ac55(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, *context.getParameter<uint16*>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<uint16>(2, *context.getParameter<uint16*>(16));
	context.writeValueStack<uint16>(3, *context.getParameter<uint16*>(24));
	context.writeValueStack<uint16>(4, *context.getParameter<uint16*>(32));
	context.writeValueStack<uint16>(5, *context.getParameter<uint16*>(40));
	context.moveValueStack(6);
}

// First occurrence: waitForNextFrame, line 105
static void exec_34cffd863db09c05(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((int8)(uint8)context.readValueStack<int16>(-1));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var0.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: waitForNextFrame, line 106
static void exec_3c27dbf39b3ee8f7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	context.writeValueStack<uint16>(0, (uint16)var0.get<uint8>());
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: waitForNextFrame, line 106
static void exec_65e6677a437a1784(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)~context.readValueStack<uint16>(-1));
	const AnyBaseValue var1((uint16)(context.readValueStack<uint16>(-2) & var0.get<uint16>()));
	const AnyBaseValue var2((int8)(uint8)var1.get<int16>());
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, context.getParameter<int64>(), var2.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: yieldInWhiteScreen, line 115
static void exec_24d5b69f5c8eeb25(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(6);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 196
static void exec_36e48c2f930d65db(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var2((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var0.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var5((int64)1);
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + var5.get<uint16>()));
	context.writeValueStack<uint64>(1, (uint64)var6.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 197
static void exec_2441ef9acc4fcae6(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(20)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	context.writeValueStack<uint16>(2, (var4.get<uint16>() - (uint16)(context.getParameter<int64>(28))));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(36));
	context.moveValueStack(6);
}

// First occurrence: Standalone.checkTimeAttackFinish, line 208
static void exec_d523ddff71f4ae4a(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var5((uint32)(uint32)var4.get<uint8>());
	const AnyBaseValue var7((uint32)(var5.get<uint32>() * (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)(var3.get<uint32>() + var7.get<uint32>()));
	const AnyBaseValue var9((uint8)*context.getParameter<uint8*>(32));
	const AnyBaseValue var10((uint32)(uint32)var9.get<uint8>());
	const AnyBaseValue var11((uint32)(var8.get<uint32>() + var10.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(40), var11.get<uint32>());
}

// First occurrence: MainMenuBG.Run, line 51
static void exec_f05ec4a4959002dd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint32>(1, (uint32)var0.get<uint16>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	context.writeValueStack<uint32>(2, (uint32)var1.get<uint16>());
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(4);
}

// First occurrence: MainMenuBG.Run, line 68
static void exec_0d44d7a09b4d9834(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() - var3.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: MainMenuBG.Run, line 69
static void exec_cbcacce1e114b6c3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() ^ (uint16)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: MainMenuBG.Run, line 70
static void exec_95e7933336fe3b91(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, (var4.get<uint16>() ^ (uint16)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: MainMenuBG.Update, line 107
static void exec_c911f60d43656603(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)*context.getParameter<uint16*>(4));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() + var1.get<uint16>()));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, context.getParameter<int64>(12), var2.get<uint16>());
}

// First occurrence: MainMenuBG.Update, line 127
static void exec_ad99257880de99af(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, *context.getParameter<uint16*>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 31
static void exec_c645a8a02ee234dd(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() & (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(uint8)(var5.get<uint16>() != var6.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var7.get<uint8>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 70
static void exec_02f6deaf0d0e9c43(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 84
static void exec_0ff4bc7de2cf33bb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(2, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(3, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 86
static void exec_961c1db5b8c6adba(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 89
static void exec_3877943ba7d8b7a0(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(12));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 96
static void exec_883ad58885285f9f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	const AnyBaseValue var5((int8)(uint8)var4.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), var5.get<uint8>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 97
static void exec_128f63e342cc4b49(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 97
static void exec_dafd1d0dd1f647fa(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 99
static void exec_956514acd51653c4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 108
static void exec_a1fbb8a35a09968d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(24));
	const AnyBaseValue var7((uint16)(uint16)var6.get<uint8>());
	const AnyBaseValue var8((uint16)(var5.get<uint16>() - var7.get<uint16>()));
	const AnyBaseValue var10((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var8.get<uint16>(), (uint16)context.getParameter<int64>(32)));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var10.get<uint16>(), (uint16)context.getParameter<int64>(40)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(48), var12.get<uint16>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 110
static void exec_bb140fb63033a720(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 118
static void exec_5d882b4bba722541(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var2.get<uint16>(), (uint16)context.getParameter<int64>(16)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 119
static void exec_166f21b7856852d8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((uint16)(uint16)var0.get<uint8>());
	context.writeValueStack<uint16>(1, (var1.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 121
static void exec_8290a8e465185498(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 129
static void exec_42a8c504a741dcf7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint16)(uint16)var3.get<uint8>());
	const AnyBaseValue var6((uint16)(var4.get<uint16>() * (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var12((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11.get<uint32>()));
	const AnyBaseValue var13((uint16)(uint16)var12.get<uint8>());
	const AnyBaseValue var14((uint16)(var8.get<uint16>() - var13.get<uint16>()));
	const AnyBaseValue var16((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var14.get<uint16>(), (uint16)context.getParameter<int64>(48)));
	const AnyBaseValue var18((uint16)OpcodeExecUtils::safeModulo<uint16>((uint16)var16.get<uint16>(), (uint16)context.getParameter<int64>(56)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(64), var18.get<uint16>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 136
static void exec_c3d9e0089b3a208c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var1.get<uint32>() <= (uint32)(context.getParameter<int64>(8))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 143
static void exec_02d3c13cf6cad412(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 155
static void exec_89f39ac70714856f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(1, (var3.get<uint8>() & (uint8)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 167
static void exec_2158c7c0bf7388a8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(4, (var0.get<uint16>() + var1.get<uint16>()));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 180
static void exec_18a4d6e68ac56ac1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint64>() != var1.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 182
static void exec_a9a5de24ed748933(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(5, (var0.get<uint16>() + var1.get<uint16>()));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 199
static void exec_8827f366cca1847d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int16>(1, (var3.get<int16>() * (int16)(context.getParameter<int64>(24))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 201
static void exec_49ad5d23501990f3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(6, 0);
	context.writeValueStack<uint8>(7, context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(8);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 211
static void exec_25c2ed280aa8b196(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint16>(2, (var4.get<uint16>() - var5.get<uint16>()));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 235
static void exec_4a95c51c1879e25b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + (uint8)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var4.get<uint8>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 238
static void exec_f67f4d826ba24229(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 249
static void exec_29e192d930ebd29a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(4));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	context.writeValueStack<uint8>(2, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 252
static void exec_a1e005f8943e42d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 266
static void exec_d21d51fc9ad19607(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, 0);
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	context.writeValueStack<uint64>(4, (uint64)var5.get<uint8>());
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 266
static void exec_90ebc0aa57f40961(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int8>(-1, (uint8)context.readValueStack<int64>(-1));
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 274
static void exec_0792be47c319b4da(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint16>(5, (var4.get<uint16>() + var5.get<uint16>()));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 281
static void exec_2894cd1a504aff26(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(24))));
	const AnyBaseValue var7((uint8)((uint8)context.getParameter<int64>() - var6.get<uint8>()));
	const AnyBaseValue var9((uint8)(var7.get<uint8>() & (uint8)(context.getParameter<int64>(32))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), var9.get<uint8>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 282
static void exec_37e64823d85a2789(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>(8));
	const AnyBaseValue var1((int64)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() >> (var1.get<uint8>() & 0x07)));
	const AnyBaseValue var3((int64)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & var3.get<uint8>()));
	context.writeValueStack<uint64>(1, (uint64)var4.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 283
static void exec_06b688d3ca0d21ec(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 337
static void exec_1e8a0e3c29fda554(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(1, (var3.get<uint8>() >= var4.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 375
static void exec_5d1715aad065e31d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint16>(4, (var4.get<uint16>() - var5.get<uint16>()));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 378
static void exec_75111b688789c869(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	context.writeValueStack<uint64>(4, (uint64)var5.get<uint8>());
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 386
static void exec_74b7f7a0b9712b17(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 398
static void exec_ef21be35883cbfc8(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(28)));
	context.writeValueStack<uint16>(5, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(32))));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 399
static void exec_bf405137dcbf2110(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint16>(4, (var4.get<uint16>() + var5.get<uint16>()));
	context.writeValueStack<int64>(5, 0);
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 411
static void exec_98c50cdddd72efb3(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	context.writeValueStack<uint8>(3, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 413
static void exec_9fa50ca90b2cb313(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(12));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(4, (uint64)var3.get<uint8>());
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 423
static void exec_42e43c83e55675d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 432
static void exec_fe747d60a2cbc8dc(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 490
static void exec_6e067ffdaf744224(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 498
static void exec_45b476d70cf2eeae(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 534
static void exec_45c5e05472712ae2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(28));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 537
static void exec_c4a38a51e58ccf45(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	context.writeValueStack<uint8>(-1, (var2.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
}

// First occurrence: Standalone.onWriteToSpriteTable, line 537
static void exec_9b196402cf62ca8d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 550
static void exec_a8ce8bfd4920031b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(0, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint32>(2, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	context.writeValueStack<uint8>(3, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var11.get<uint32>()));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 605
static void exec_0b2438f5bee469e2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 612
static void exec_b41849745925c962(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 642
static void exec_e2b435f06dcb81cb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, 1);
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 642
static void exec_42c01c98a4018f6c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)(context.readValueStack<uint64>(-2) | context.readValueStack<uint64>(-1)));
	context.writeValueStack<int8>(-2, (uint8)var0.get<int64>());
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 684
static void exec_5821ef55d9991b49(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(2, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(3, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(48)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 716
static void exec_27bf8d5e3b0fe92d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, 1);
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 727
static void exec_a272c62024812dac(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 739
static void exec_88201a7d3e02ff75(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	const AnyBaseValue var5((int64)1);
	context.writeValueStack<uint16>(2, (var4.get<uint16>() - var5.get<uint16>()));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 740
static void exec_b36931c317429c01(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) - (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 741
static void exec_b185d318ad4ff59f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	context.writeValueStack<uint32>(-1, (var0.get<uint32>() * (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 748
static void exec_13d4a3bd244581ce(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, (context.readValueStack<uint16>(-1) + (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 749
static void exec_1190d8f6639a3f8c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, context.readValueStack<uint32>(-1)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>())));
	context.writeValueStack<uint32>(-1, (uint32)var2.get<uint16>());
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, (var3.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 797
static void exec_8880a49b8380be0c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<int64>(4, 0);
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<uint16>(6, context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	context.moveValueStack(7);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 804
static void exec_55bc4cd2a20a17da(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var8((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var10((uint32)(var8.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	const AnyBaseValue var11((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var10.get<uint32>()));
	const AnyBaseValue var12((uint32)(uint32)var11.get<uint8>());
	const AnyBaseValue var13((uint32)(var7.get<uint32>() + var12.get<uint32>()));
	const AnyBaseValue var14((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var13.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(48), var14.get<uint8>());
}

// First occurrence: Standalone.onWriteToSpriteTable, line 835
static void exec_d01ae85bc3ff537b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 831
static void exec_5187dc7e6e5a09c7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var1.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 847
static void exec_08d4c4a3ce4dc3d8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onWriteToSpriteTable, line 853
static void exec_ba6a22faefdeb002(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 880
static void exec_6a229437162b0be3(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 887
static void exec_45ed5eebdfe2e0d7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 888
static void exec_eddd0e8fd73e9f0d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 909
static void exec_43ae50a4278e5b55(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() * (uint8)(context.getParameter<int64>(16))));
	const AnyBaseValue var6((uint8)1);
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var10((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	const AnyBaseValue var11((uint8)(var6.get<uint8>() - var10.get<uint8>()));
	const AnyBaseValue var12((uint8)(var5.get<uint8>() + var11.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(40), var12.get<uint8>());
}

// First occurrence: Standalone.onDrawVdpSprite, line 910
static void exec_0da5efc07774e60c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint8)(var1.get<uint8>() * (uint8)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)((uint8)context.getParameter<int64>() - var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var4.get<uint8>());
}

// First occurrence: Standalone.onDrawVdpSprite, line 915
static void exec_9e829b154ce37a25(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(20)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSprite, line 923
static void exec_5108b982ed7b010b(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 924
static void exec_e57442ed99892612(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() - (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 937
static void exec_bb88d477441b572c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var1.get<uint8>(), (uint8)context.getParameter<int64>(8)));
	const AnyBaseValue var4((uint8)(var0.get<uint8>() - var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var4.get<uint8>());
}

// First occurrence: Standalone.onDrawVdpSprite, line 942
static void exec_332e8d1fdd41605f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (uint16)var0.get<uint8>());
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() & (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((int8)(uint8)var3.get<int16>());
	context.writeValueStack<uint8>(1, (var4.get<uint8>() - (uint8)(context.getParameter<int64>(20))));
	context.moveValueStack(2);
}

// First occurrence: Standalone.onDrawVdpSprite, line 942
static void exec_d7f76603523772fe(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(context.readValueStack<uint8>(-1) * (uint8)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var3((uint16)(context.readValueStack<uint16>(-2) * var2.get<uint16>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var6((int8)(uint8)var5.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var6.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: Standalone.onDrawVdpSprite, line 953
static void exec_79b8d9997f11561c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 966
static void exec_bc49ebc813226262(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)*context.getParameter<uint8*>());
	const AnyBaseValue var2((uint8)(var0.get<uint8>() & (uint8)(context.getParameter<int64>(8))));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() - (uint8)(context.getParameter<int64>(16))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.onDrawVdpSprite, line 966
static void exec_e959878960308089(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(uint32)context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: Standalone.onDrawVdpSprite, line 967
static void exec_2cc10318ea95a868(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(36)));
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>(28) * var2.get<uint32>()));
	context.writeValueStack<uint32>(5, ((uint32)context.getParameter<int64>(20) - var3.get<uint32>()));
	const AnyBaseValue var5((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(48)));
	context.writeValueStack<uint32>(6, ((uint32)context.getParameter<int64>(40) * var5.get<uint32>()));
	context.moveValueStack(7);
}

// First occurrence: Standalone.onDrawVdpSprite, line 976
static void exec_76aa9dd63ab2e3b5(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var2((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() >> (uint32)(context.getParameter<int64>(32) & 0x1f)));
	const AnyBaseValue var5((uint32)((uint32)context.getParameter<int64>(16) + var4.get<uint32>()));
	context.writeValueStack<int16>(4, (uint16)var5.get<int32>());
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSprite, line 983
static void exec_63cec7b7d2512dae(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(2, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(24))));
	context.writeValueStack<int64>(3, 0);
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(4, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var7((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(48)));
	const AnyBaseValue var8((int64)1);
	context.writeValueStack<uint16>(5, (var7.get<uint16>() + var8.get<uint16>()));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1005
static void exec_bc42ec22478affa9(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.moveValueStack(-6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1016
static void exec_22c0418439388ac6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var2((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(1, (var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(32));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(40)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1017
static void exec_e1e7ed5954efc637(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(24));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(32)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1022
static void exec_442c82d356b8e609(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(4))));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1025
static void exec_da952a7f8a1a27b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(1, (var0.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(24)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1040
static void exec_6af7766e1a9d97ca(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)swapBytes16(*context.getParameter<uint16*>(16)));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() - var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() - (uint16)(context.getParameter<int64>(24))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var6.get<uint16>());
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1061
static void exec_fb8109f2b1829c5f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	const AnyBaseValue var5((uint8)(uint8)(var3.get<uint16>() != var4.get<uint16>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var5.get<uint8>());
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1064
static void exec_184b69cd8c1fba78(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var7((uint32)(var0.get<uint32>() + var6.get<uint32>()));
	const AnyBaseValue var8((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var7.get<uint32>()));
	const AnyBaseValue var9((uint16)(uint16)var8.get<uint8>());
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var9.get<uint16>());
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1075
static void exec_f14ba2f767ac22d9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() * (uint16)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var5.get<uint32>()));
	const AnyBaseValue var8((uint16)(var6.get<uint16>() * (uint16)(context.getParameter<int64>(28))));
	const AnyBaseValue var9((uint16)(var2.get<uint16>() + var8.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(36), var9.get<uint16>());
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1079
static void exec_38262267da2b4cb2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)(var2.get<uint16>() + var5.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), var6.get<uint16>());
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1080
static void exec_681c11d73aeb91fb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(4, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(5);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1099
static void exec_eb219e7607ce613a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.onDrawVdpSpriteCompound, line 1100
static void exec_50f40e584c8c0ae8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint16>(0, (var0.get<uint16>() + var1.get<uint16>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(3, context.readLocalVariable<uint16>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(6);
}

// First occurrence: Standalone.renderWithStandardPacking, line 1114
static void exec_4ea232a7820169aa(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), context.readValueStack<uint32>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.renderWithStandardPacking, line 1116
static void exec_f75654de1a15f7c2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint16)(var3.get<uint16>() >> (uint16)(context.getParameter<int64>(16) & 0x0f)));
	context.writeValueStack<uint16>(0, (var5.get<uint16>() & (uint16)(context.getParameter<int64>(24))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.renderWithStandardPacking, line 1117
static void exec_171491e5f54a5e42(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)(var4.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	context.writeValueStack<uint32>(2, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var6.get<uint32>()));
	const AnyBaseValue var7((uint32)*context.getParameter<uint32*>(32));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() + (uint32)(context.getParameter<int64>(40))));
	context.writeValueStack<uint8>(3, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var9.get<uint32>()));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.renderWithStandardPacking, line 1120
static void exec_1307fede7a42efe1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(4));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint32>());
	context.moveValueStack(3);
}

// First occurrence: Standalone.renderWithStandardPacking, line 1123
static void exec_7a77e04102758169(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint64>(4, (uint64)var3.get<uint8>());
	context.writeValueStack<uint8>(5, context.readLocalVariable<uint8>(context.getParameter<uint32>(32)));
	context.moveValueStack(6);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 1131
static void exec_eddb5d352768fa07(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	context.writeValueStack<uint8>(2, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<int64>(3, 0);
	context.moveValueStack(4);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 1142
static void exec_e85690c4f09d50b3(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(12), context.readValueStack<uint32>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.moveValueStack(-6);
}

// First occurrence: Standalone.renderWithKosinskiCompression, line 1148
static void exec_ae66c8830c651c05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	context.writeValueStack<uint32>(1, OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var3((uint32)*context.getParameter<uint32*>(20));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	context.writeValueStack<uint8>(2, OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var5.get<uint32>()));
	context.writeValueStack<int64>(3, 0);
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(36)));
	const AnyBaseValue var8((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var6.get<uint16>(), (uint16)context.getParameter<int64>(40)));
	const AnyBaseValue var9((uint32)*context.getParameter<uint32*>(48));
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(56))));
	const AnyBaseValue var12((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var11.get<uint32>()));
	context.writeValueStack<uint16>(4, (var8.get<uint16>() - var12.get<uint16>()));
	context.moveValueStack(5);
}

// First occurrence: Standalone.renderCutsceneKnuckles, line 1162
static void exec_eae3585b614574cb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(1, (uint64)var0.get<uint8>());
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(12));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(20))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint64>(2, (uint64)var4.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: Standalone.renderCutsceneKnuckles, line 1205
static void exec_1e7390c6fe61d785(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, (uint64)context.getParameter<int64>(4));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint64>(2, (uint64)var0.get<uint8>());
	context.moveValueStack(3);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 38
static void exec_595f830370562fc7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), context.readValueStack<uint16>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(20), context.readValueStack<uint16>(-6));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(24), context.readValueStack<uint8>(-7));
	context.moveValueStack(-7);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 43
static void exec_734fc1be2d5ad848(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint64)context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint64>() == var1.get<uint64>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 48
static void exec_f543cc43c1be3f0a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() - (uint16)(context.getParameter<int64>(12))));
	context.writeValueStack<uint64>(1, (uint64)var2.get<uint16>());
	context.moveValueStack(2);
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 58
static void exec_9de6e07702f1100d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int8)(uint8)var0.get<int16>());
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var1.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSpriteDirect, line 67
static void exec_ceb29dbf1d99c4ab(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(2, context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.drawCharacterSprite, line 79
static void exec_8b9793079535d8d7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(4), context.readValueStack<uint16>(-2));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(8), context.readValueStack<uint16>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), context.readValueStack<uint8>(-5));
	context.moveValueStack(-5);
}

// First occurrence: Standalone.drawCharacterSprite, line 81
static void exec_7470810d836eceba(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() == var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 94
static void exec_1199e0a02b85b64c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)0);
	context.writeValueStack<uint8>(0, (var3.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 94
static void exec_e915c7842a7f71f5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + var4.get<uint8>()));
	const AnyBaseValue var7((uint8)(var5.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	const AnyBaseValue var8((int64)0);
	context.writeValueStack<uint8>(0, (var7.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 101
static void exec_ad94226fae7f7a92(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() <= (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 107
static void exec_4c993556bb84cbaa(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint32>() == (uint32)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 115
static void exec_3de329fabf8622ff(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint16)swapBytes16(*context.getParameter<uint16*>(4)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() * (uint16)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)var3.get<uint16>(), (uint16)context.getParameter<int64>(20)));
	context.writeValueStack<uint8>(0, (uint8)(var0.get<int16>() > var5.get<int16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 128
static void exec_ec33f6f381db7f89(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	context.writeValueStack<uint8>(0, (uint8)(var0.get<uint16>() == var2.get<uint16>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 133
static void exec_48039b78e64e0c21(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint16)1);
	const AnyBaseValue var2((uint16)(var0.get<uint16>() >> (var1.get<uint16>() & 0x0f)));
	const AnyBaseValue var3((uint16)1);
	const AnyBaseValue var4((uint16)(var2.get<uint16>() & var3.get<uint16>()));
	const AnyBaseValue var6((uint16)(var4.get<uint16>() + (uint16)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), var6.get<uint16>());
}

// First occurrence: Standalone.drawCharacterSprite, line 139
static void exec_9b60b88c7caf66d1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var2((uint16)(var0.get<uint16>() & (uint16)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint16)(var2.get<uint16>() + (uint16)(context.getParameter<int64>(16))));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var4.get<uint16>());
}

// First occurrence: Standalone.drawCharacterSprite, line 143
static void exec_d25ec667b59401d0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeDivide<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(12)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() * (uint8)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var6.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 144
static void exec_7667b37c86bb1fb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & var4.get<uint8>()));
	const AnyBaseValue var6((uint8)*context.getParameter<uint8*>(16));
	const AnyBaseValue var7((int64)0);
	const AnyBaseValue var8((uint8)(var6.get<uint8>() == var7.get<uint8>()));
	context.writeValueStack<uint8>(0, (var5.get<uint8>() == var8.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 146
static void exec_944e4559415143d7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(12)));
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + (uint8)(context.getParameter<int64>(20))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(28), var6.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 155
static void exec_8a4feac152fdae0e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 158
static void exec_5e343918647bcf7f(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::safeModulo<uint8>((uint8)var2.get<uint8>(), (uint8)context.getParameter<int64>(4)));
	const AnyBaseValue var5((uint8)1);
	const AnyBaseValue var6((uint8)(var4.get<uint8>() + var5.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var6.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 196
static void exec_3777eb6fe2edeed1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)(context.readValueStack<uint32>(-1) + (uint32)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var1.get<uint32>()));
	const AnyBaseValue var3((uint8)1);
	const AnyBaseValue var4((uint8)(var2.get<uint8>() & var3.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var4.get<uint8>());
	context.moveValueStack(-1);
}

// First occurrence: Standalone.drawCharacterSprite, line 201
static void exec_9bb7e2b6ff80ea6d(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (context.readValueStack<uint8>(-1) <= (uint8)(context.getParameter<int64>())));
}

// First occurrence: Standalone.drawCharacterSprite, line 206
static void exec_ca486cadfdbf9a53(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(4));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var3.get<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() != var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 208
static void exec_57459e7d82cc11b4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() - var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), var2.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 209
static void exec_d14a9624db54f195(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(1, context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: Standalone.drawCharacterSprite, line 209
static void exec_bc7a136c5832578b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)(context.readValueStack<uint8>(-2) + context.readValueStack<uint8>(-1)));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), var0.get<uint8>());
	context.moveValueStack(-2);
}

// First occurrence: Standalone.drawCharacterSprite, line 232
static void exec_76d113f3d5b0708e(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int32)(uint32)var1.get<int8>());
	const AnyBaseValue var3((uint32)(var0.get<uint32>() - var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
}

// First occurrence: Standalone.drawCharacterSprite, line 233
static void exec_3c24115b1b1fea64(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint8)(uint8)(context.readValueStack<uint16>(-1) <= (uint16)(context.getParameter<int64>())));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint8>());
	const AnyBaseValue var3((uint32)1);
	const AnyBaseValue var4((uint32)(var2.get<uint32>() + var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var4.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: Standalone.drawCharacterSprite, line 235
static void exec_962a9270bfc4600c(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() - (uint32)(context.getParameter<int64>(4))));
	context.moveValueStack(1);
}

// First occurrence: Standalone.drawCharacterSprite, line 237
static void exec_4e9872e883842294(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (var4.get<int32>() & 0x1f)));
	const AnyBaseValue var6((int8)(uint8)var5.get<int32>());
	const AnyBaseValue var7((uint8)(var0.get<uint8>() + var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var7.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 239
static void exec_1673a0869875a6db(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var4((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int32)(var3.get<int32>() >> (var4.get<int32>() & 0x1f)));
	const AnyBaseValue var6((int8)(uint8)var5.get<int32>());
	const AnyBaseValue var7((uint8)(var0.get<uint8>() + var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var7.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 244
static void exec_9ac49cf3235f84f4(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() >> (var2.get<uint32>() & 0x1f)));
	const AnyBaseValue var4((int8)(uint8)var3.get<int32>());
	const AnyBaseValue var5((uint8)(var0.get<uint8>() + var4.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var5.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 256
static void exec_76d70ace363a6486(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	*context.getParameter<uint8*>(4) = var0.get<uint8>();
}

// First occurrence: Standalone.drawCharacterSprite, line 309
static void exec_76d95cfa81331fe9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ (uint8)(context.getParameter<int64>(4))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), var2.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 318
static void exec_3b0eee994329cfa7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: Standalone.drawCharacterSprite, line 322
static void exec_625a9efdf84703e5(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)*context.getParameter<uint32*>(8));
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + (uint32)(context.getParameter<int64>(16))));
	const AnyBaseValue var4((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var3.get<uint32>()));
	const AnyBaseValue var5((uint16)((uint16)context.getParameter<int64>() - var4.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(24), var5.get<uint16>());
}

// First occurrence: Standalone.drawCharacterSprite, line 334
static void exec_8a06593b724b22ea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)1);
	const AnyBaseValue var2((uint8)(var0.get<uint8>() ^ var1.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 340
static void exec_9f0119e342d5153f(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint64>(1, context.readLocalVariable<uint64>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: Standalone.drawCharacterSprite, line 346
static void exec_955818f15535315a(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint8>(4, (var0.get<uint8>() | (uint8)(context.getParameter<int64>(20))));
	context.writeValueStack<int64>(5, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(36)));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(40));
	context.writeValueStack<int64>(8, (uint64)context.getParameter<int64>(48));
	context.moveValueStack(9);
}

// First occurrence: Standalone.drawCharacterSprite, line 350
static void exec_e136750f284504dd(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(5, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(7, (uint64)context.getParameter<int64>(28));
	context.moveValueStack(8);
}

// First occurrence: Standalone.drawCharacterSprite, line 364
static void exec_a5e76738ec6472a9(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() & (uint8)(context.getParameter<int64>(12))));
	const AnyBaseValue var6((int64)0);
	const AnyBaseValue var7((uint8)(var5.get<uint8>() != var6.get<uint8>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(20), var7.get<uint8>());
}

// First occurrence: Standalone.drawCharacterSprite, line 375
static void exec_997d97402560d4f2(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var5((int16)(var3.get<int16>() >> (int16)(context.getParameter<int64>(16) & 0x0f)));
	context.writeValueStack<int64>(0, (uint64)var5.get<int16>());
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(24));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(32))));
	const AnyBaseValue var9((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var8.get<uint32>()));
	const AnyBaseValue var10((int64)1);
	context.writeValueStack<uint8>(1, (var9.get<uint8>() & var10.get<uint8>()));
	context.moveValueStack(2);
}

// First occurrence: Standalone.drawCharacterSprite, line 380
static void exec_25304d53dfc9b7a1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)swapBytes16(*context.getParameter<uint16*>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((int8)(var1.get<int8>() * (int8)(context.getParameter<int64>(12))));
	const AnyBaseValue var5((uint8)(var3.get<uint8>() + (uint8)(context.getParameter<int64>(20))));
	const AnyBaseValue var6((int16)(uint16)var5.get<int8>());
	const AnyBaseValue var7((uint16)(var0.get<uint16>() - var6.get<uint16>()));
	const AnyBaseValue var8((int8)(uint8)var7.get<int16>());
	const AnyBaseValue var9((uint32)(uint32)var8.get<uint8>());
	const AnyBaseValue var11((uint32)(var9.get<uint32>() + (uint32)(context.getParameter<int64>(28))));
	*context.getParameter<uint32*>(36) = var11.get<uint32>();
}

// First occurrence: Standalone.drawCharacterSprite, line 381
static void exec_715377f7f1cc9b66(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint16)OpcodeExecUtils::readMemory<uint16>(*context.mControlFlow, var0.get<uint32>()));
	const AnyBaseValue var2((uint16)swapBytes16(*context.getParameter<uint16*>(8)));
	const AnyBaseValue var3((uint16)(var1.get<uint16>() - var2.get<uint16>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var5((int16)(uint16)var4.get<int8>());
	const AnyBaseValue var6((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var7((int16)(var5.get<int16>() * var6.get<int16>()));
	const AnyBaseValue var9((int16)OpcodeExecUtils::safeDivide<int16>((int16)var7.get<int16>(), (int16)context.getParameter<int64>(24)));
	const AnyBaseValue var10((uint16)(var3.get<uint16>() + var9.get<uint16>()));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(32), var10.get<uint16>());
}

// First occurrence: Standalone.drawCharacterSprite, line 386
static void exec_77abb5d83c1344ae(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((int32)(uint32)var3.get<int8>());
	const AnyBaseValue var5((uint32)(var2.get<uint32>() + var4.get<uint32>()));
	context.writeValueStack<int64>(0, (uint64)var5.get<int32>());
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.moveValueStack(3);
}

// First occurrence: Standalone.drawCharacterSprite, line 387
static void exec_f8ec6b790c50fecb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, context.readLocalVariable<uint64>(context.getParameter<uint32>()));
	context.writeValueStack<uint16>(1, context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint16>(2, context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(4, context.readLocalVariable<uint8>(context.getParameter<uint32>(16)));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	const AnyBaseValue var2((int16)(uint16)var1.get<int8>());
	context.writeValueStack<uint16>(5, (var0.get<uint16>() - var2.get<uint16>()));
	context.writeValueStack<uint8>(6, context.readLocalVariable<uint8>(context.getParameter<uint32>(28)));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(40)));
	const AnyBaseValue var6((int8)(var4.get<int8>() * (int8)(context.getParameter<int64>(44))));
	context.writeValueStack<uint8>(7, ((uint8)context.getParameter<int64>(32) - var6.get<uint8>()));
	context.moveValueStack(8);
}

// First occurrence: CreditsDataGenerator.build, line 27
static void exec_5cfc469c03ee6ce1(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::readMemory<uint32>(*context.mControlFlow, var2.get<uint32>()));
	context.writeValueStack<uint8>(0, (uint8)(var3.get<uint32>() == (uint32)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: CreditsDataGenerator.build, line 27
static void exec_555cdd6d00e2d527(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)OpcodeExecUtils::readMemory<uint8>(*context.mControlFlow, var2.get<uint32>()));
	const AnyBaseValue var4((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	context.writeValueStack<uint8>(0, (var3.get<uint8>() == var4.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: CreditsDataGenerator.build, line 41
static void exec_609e006c838c395e(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 42
static void exec_99417f68c643bfb9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 58
static void exec_0edf1a580250f3eb(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.build, line 150
static void exec_7320b2338023ddbe(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 151
static void exec_a68b3a3ab2258519(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 168
static void exec_15c97b94b55e96d4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 172
static void exec_6b1a3e3793549f73(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 180
static void exec_050eacea39d0cebb(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + var1.get<uint8>()));
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 207
static void exec_48e2739be71af257(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 208
static void exec_d79b6bd81926b758(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)1);
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + var1.get<uint8>()));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(4));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 210
static void exec_8ca028c4d68cfab0(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() + (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<int64>(1, 1);
	context.writeValueStack<uint64>(2, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(3);
}

// First occurrence: CreditsDataGenerator.build, line 217
static void exec_6ad0c3972a6a8523(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(4));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<uint64>(3, (uint64)context.getParameter<int64>(12));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.addLine, line 228
static void exec_0e35d7b16d23223a(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), context.readValueStack<uint64>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.moveValueStack(-3);
}

// First occurrence: CreditsDataGenerator.addLine, line 236
static void exec_86866ca481eb938c(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(1, (var0.get<uint8>() == (uint8)(context.getParameter<int64>(8))));
	context.moveValueStack(2);
}

// First occurrence: CreditsDataGenerator.addLine, line 236
static void exec_30e7ca76427ab7b6(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)(context.readValueStack<uint32>(-2) + context.readValueStack<uint32>(-1)));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(), var0.get<uint32>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((int64)1);
	const AnyBaseValue var3((uint32)(var1.get<uint32>() + var2.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(8), var3.get<uint32>());
	context.moveValueStack(-2);
}

// First occurrence: CreditsDataGenerator.addLine, line 239
static void exec_45e1d6e3c634452d(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var3((uint32)OpcodeExecUtils::safeDivide<uint32>((uint32)var1.get<uint32>(), (uint32)context.getParameter<int64>(12)));
	const AnyBaseValue var4((uint32)((uint32)context.getParameter<int64>() - var3.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var4.get<uint32>());
}

// First occurrence: CreditsDataGenerator.addLine, line 240
static void exec_a84ec66d56070af4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(0, context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<int8>(1, (uint8)var0.get<int32>());
	context.writeValueStack<uint8>(2, context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint64>(3, context.readLocalVariable<uint64>(context.getParameter<uint32>(12)));
	context.moveValueStack(4);
}

// First occurrence: CreditsDataGenerator.addLine, line 244
static void exec_cde311851fb489e4(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint64>(context.getParameter<uint32>(), context.readValueStack<uint64>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(12), context.readValueStack<uint8>(-4));
	context.moveValueStack(-4);
}

// First occurrence: CreditsDataGenerator.addLine, line 246
static void exec_86ab4b7d5a320fea(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint32)(var0.get<uint32>() - (uint32)(context.getParameter<int64>(8))));
	const AnyBaseValue var3((int16)(uint16)var2.get<int32>());
	const AnyBaseValue var4((uint32)*context.getParameter<uint32*>(16));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var4.get<uint32>(), var3.get<uint16>());
}

// First occurrence: CreditsDataGenerator.addLine, line 250
static void exec_3a463615e9e50095(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((uint8)(var2.get<uint8>() + var3.get<uint8>()));
	const AnyBaseValue var5((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var6((uint32)1);
	const AnyBaseValue var7((uint32)(var5.get<uint32>() + var6.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var7.get<uint32>(), var4.get<uint8>());
}

// First occurrence: CreditsDataGenerator.addLine, line 256
static void exec_b460d034f825b953(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + var1.get<uint32>()));
	OpcodeExecUtils::writeMemory<uint8>(*context.mControlFlow, var2.get<uint32>(), context.readValueStack<uint8>(-1));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var4((int64)1);
	const AnyBaseValue var5((uint32)(var3.get<uint32>() + var4.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(16), var5.get<uint32>());
	context.moveValueStack(-1);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 23
static void exec_40a5947fa97cbb84(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 113
static void exec_8253506204dc4f55(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint8>(-1, (uint8)(context.readValueStack<uint32>(-1) != (uint32)(context.getParameter<int64>())));
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 131
static void exec_ad9603c492c129d2(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 141
static void exec_e1521bcbc5081d05(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 267
static void exec_2a8a9bd903088bb4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 295
static void exec_025383c706c07f52(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ1, line 325
static void exec_f6fe2801641e9e37(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ2, line 345
static void exec_b75383c124be1123(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_AIZ2, line 453
static void exec_360f9bce39077285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 600
static void exec_9758d59f88924585(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 0);
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 882
static void exec_f6f6735ed1d62089(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, ((uint16)context.getParameter<int64>(8) + var1.get<uint16>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 883
static void exec_a238f35c5dd6cb09(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, ((uint16)context.getParameter<int64>(8) + var1.get<uint16>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(36));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_MGZ2, line 1052
static void exec_908d024c0b79f285(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, 0);
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_LBZ1, line 502
static void exec_647586cc9b205805(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, 0);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SOZ1, line 109
static void exec_ee12736240920378(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(16)));
	context.writeValueStack<uint16>(1, ((uint16)context.getParameter<int64>(8) + var1.get<uint16>()));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(28));
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_LRZ1, line 75
static void exec_dacc6ea1992b9356(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<uint8>(3, context.readLocalVariable<uint8>(context.getParameter<uint32>(24)));
	context.writeValueStack<int64>(4, 1);
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ1, line 16
static void exec_b22bb4fd04a393b7(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) - var1.get<uint16>()));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ1, line 21
static void exec_5ac2c1ae7e7f8bd8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + var1.get<uint16>()));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ2, line 237
static void exec_0a8b6dfd8d946cb4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_SSZ2, line 240
static void exec_5ef6a213eb760234(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-2, (context.readValueStack<uint16>(-2) + context.readValueStack<uint16>(-1)));
	context.writeValueStack<int64>(-1, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, 0);
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_DEZ2, line 551
static void exec_ebe8147d357d6604(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, (uint64)context.getParameter<int64>(16));
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(24));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects_DEZ2, line 698
static void exec_a240a7fef01f48b7(const RuntimeOpcodeContext context)
{
	context.writeValueStack<int64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<int64>(1, (uint64)context.getParameter<int64>(8));
	context.writeValueStack<int64>(2, 1);
	context.writeValueStack<int64>(3, 1);
	context.writeValueStack<int64>(4, (uint64)context.getParameter<int64>(16));
	context.moveValueStack(5);
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 17
static void exec_5c10babd1420d574(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint64>(0, (uint64)context.getParameter<int64>());
	context.writeValueStack<uint16>(1, swapBytes16(*context.getParameter<uint16*>(8)));
	context.writeValueStack<uint32>(2, *context.getParameter<uint32*>(16));
	context.moveValueStack(3);
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 18
static void exec_ef86075bb66f29af(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((int64)0);
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint32>() != var1.get<uint32>()));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), var2.get<uint8>());
}

// First occurrence: LevelObjectTableBuilder.buildObjects, line 142
static void exec_dc0e22982ab07838(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)*context.getParameter<uint32*>());
	const AnyBaseValue var2((uint8)(uint8)(var0.get<uint32>() != (uint32)(context.getParameter<int64>(8))));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(16), var2.get<uint8>());
}

// First occurrence: LevelObjectTableBuilder.addObject, line 608
static void exec_abb8905fdd9c9cd7(const RuntimeOpcodeContext context)
{
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(), context.readValueStack<uint8>(-1));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(4), context.readValueStack<uint8>(-2));
	context.writeLocalVariable<uint8>(context.getParameter<uint32>(8), context.readValueStack<uint8>(-3));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(12), context.readValueStack<uint16>(-4));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(16), context.readValueStack<uint16>(-5));
	context.moveValueStack(-5);
}

// First occurrence: LevelObjectTableBuilder.addObject, line 611
static void exec_4f8845a141360a84(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	const AnyBaseValue var2((uint16)(uint16)var1.get<uint8>());
	const AnyBaseValue var4((uint16)(var2.get<uint16>() << (uint16)(context.getParameter<int64>(8) & 0x0f)));
	const AnyBaseValue var5((uint16)(var0.get<uint16>() | var4.get<uint16>()));
	const AnyBaseValue var6((uint32)*context.getParameter<uint32*>(16));
	const AnyBaseValue var8((uint32)(var6.get<uint32>() + (uint32)(context.getParameter<int64>(24))));
	OpcodeExecUtils::writeMemory<uint16>(*context.mControlFlow, var8.get<uint32>(), var5.get<uint16>());
}

// First occurrence: LevelRingsTableBuilder.buildRings_CNZ2, line 543
static void exec_cf11ac05704610e8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	context.writeValueStack<uint16>(0, ((uint16)context.getParameter<int64>() - var1.get<uint16>()));
	const AnyBaseValue var3((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(20)));
	context.writeValueStack<uint16>(1, ((uint16)context.getParameter<int64>(12) + var3.get<uint16>()));
	context.moveValueStack(2);
}

// First occurrence: SHCSplash.setPalette, line 38
static void exec_fe496b2985f69bdf(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var1((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(8)));
	const AnyBaseValue var2((uint32)(uint32)var1.get<uint16>());
	const AnyBaseValue var3((uint32)((uint32)context.getParameter<int64>() - var2.get<uint32>()));
	context.writeValueStack<int32>(0, (var3.get<int32>() * (int32)(context.getParameter<int64>(12))));
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(20));
	context.moveValueStack(3);
}

// First occurrence: SHCSplash.setPalette, line 44
static void exec_ab153720dd1cc727(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, 1);
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	context.writeValueStack<uint32>(1, (uint32)var0.get<uint8>());
	context.moveValueStack(2);
}

// First occurrence: SHCSplash.setPalette, line 46
static void exec_72ba76f663d630ed(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() >> (uint32)(context.getParameter<int64>(4) & 0x1f)));
	const AnyBaseValue var4((uint32)(var2.get<uint32>() & (uint32)(context.getParameter<int64>(12))));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(20), var4.get<uint32>());
}

// First occurrence: SHCSplash.setPalette, line 48
static void exec_edb23c6dcae4ecde(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint32>(0, (var0.get<uint32>() - var1.get<uint32>()));
	context.writeValueStack<int64>(1, 0);
	context.moveValueStack(2);
}

// First occurrence: SHCSplash.setPalette, line 51
static void exec_4bd98335c4a94b40(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint32)(var0.get<uint32>() + (uint32)(context.getParameter<int64>(4))));
	const AnyBaseValue var3((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(12)));
	const AnyBaseValue var5((uint32)(var3.get<uint32>() << (uint32)(context.getParameter<int64>(16) & 0x1f)));
	const AnyBaseValue var6((uint32)(var2.get<uint32>() + var5.get<uint32>()));
	const AnyBaseValue var7((uint32)context.readLocalVariable<uint32>(context.getParameter<uint32>(24)));
	const AnyBaseValue var9((uint32)(var7.get<uint32>() << (uint32)(context.getParameter<int64>(28) & 0x1f)));
	const AnyBaseValue var10((uint32)(var6.get<uint32>() + var9.get<uint32>()));
	context.writeLocalVariable<uint32>(context.getParameter<uint32>(36), var10.get<uint32>());
}

// First occurrence: SHCSplash.showSplashScreen, line 80
static void exec_98890bffe9e721c1(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(-1, OpcodeExecUtils::safeDivide<uint16>((uint16)context.readValueStack<uint16>(-1), (uint16)context.getParameter<int64>()));
	context.writeValueStack<int64>(0, 0);
	context.writeValueStack<int64>(1, 0);
	context.writeValueStack<int64>(2, (uint64)context.getParameter<int64>(8));
	context.moveValueStack(3);
}

// First occurrence: SHCSplash.showSplashScreen, line 151
static void exec_92bd7a7c29768cb8(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var2((uint8)(var0.get<uint8>() * (uint8)(context.getParameter<int64>(4))));
	context.writeValueStack<uint8>(0, (var2.get<uint8>() < (uint8)(context.getParameter<int64>(12))));
	context.moveValueStack(1);
}

// First occurrence: SHCSplash.showSplashScreen, line 153
static void exec_fe8db357d07779f3(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint16)(context.readValueStack<uint16>(-2) | context.readValueStack<uint16>(-1)));
	context.writeLocalVariable<uint16>(context.getParameter<uint32>(), var0.get<uint16>());
	context.moveValueStack(-2);
}

// First occurrence: SHCSplash.showSplashScreen, line 157
static void exec_0dec5fb270aa57f9(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	context.writeValueStack<uint32>(1, (var1.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	context.moveValueStack(2);
}

// First occurrence: SHCSplash.showSplashScreen, line 158
static void exec_94404a70d2e8cd47(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint32>(0, (uint32)context.getParameter<int64>());
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(8)));
	const AnyBaseValue var1((uint32)(uint32)var0.get<uint8>());
	const AnyBaseValue var3((uint32)(var1.get<uint32>() * (uint32)(context.getParameter<int64>(12))));
	const AnyBaseValue var4((uint32)1);
	context.writeValueStack<uint32>(1, (var3.get<uint32>() + var4.get<uint32>()));
	context.moveValueStack(2);
}

// First occurrence: SHCSplash.showSplashScreen, line 163
static void exec_70c473a0c2b4310b(const RuntimeOpcodeContext context)
{
	const AnyBaseValue var0((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>()));
	const AnyBaseValue var1((uint8)context.readLocalVariable<uint8>(context.getParameter<uint32>(4)));
	context.writeValueStack<uint8>(0, (var0.get<uint8>() >= var1.get<uint8>()));
	context.moveValueStack(1);
}

// First occurrence: SHCSplash.showSplashScreen, line 181
static void exec_e03d31394de823b4(const RuntimeOpcodeContext context)
{
	context.writeValueStack<uint16>(0, context.readLocalVariable<uint16>(context.getParameter<uint32>()));
	const AnyBaseValue var0((uint16)context.readLocalVariable<uint16>(context.getParameter<uint32>(4)));
	const AnyBaseValue var1((int64)0);
	context.writeValueStack<uint8>(1, (uint8)(var0.get<uint16>() != var1.get<uint16>()));
	context.moveValueStack(2);
}


void createNativizedCodeLookup(Nativizer::LookupDictionary& dict)
{
	const char emptyEntries0[] =
	{
		"\x69\x03\x89\xa9\xdb\x32\x54\xa9\xfd\x0b\x95\x8e\x9e\xa2\x18\xf1\x86\xd6\xbe\x64\x5c\xc5\x2c\x4b\xa9\x78\xca\x48\x02\xbd\x61\x7d\x77\x1d\x04\xdf\xdd\xc0\xf0\xb4\xa3\xf9\x0d\x2c\x68\xfa\x3d\xa2\xf2\xf8\xe6\xf8\x18\xc0\x53\x5d\x45\x18\x98\xca\x0f\x09\x25\x9a\x19\xc3\xf8\x61\xae\x71\x94\x8a\x44\x76\x87\x3c\x93\x38\xbf\x2b\x0b\x91\xac\x38\xcf\x64\xe0\x89\xce\xfb\xea\x3c\x7d\x82\x89\xc9\x05\x6e\x7f\x11\xf0\xf4\x20\x71\x7e\xf0\x38\xf6\xb8\xfa\xbc\x02\x20\x64\xfa\xea\x53\xcf\x3f\x0f\x15\x95\xb2\x25\x02\x1b\x17\xa5"
		"\x59\xc6\xf6\x2d\x3a\x1e\xe5\xf9\x79\x3d\x00\x18\xa6\xa3\xec\x43\x36\x25\xb6\x4c\x61\xe8\x12\xf4\xe9\x2f\xe7\xcb\xbe\xb3\x62\x11\xf2\xe7\xa8\x65\xeb\x72\x92\xe5\x30\x91\x42\xdb\x19\x55\x47\x1b\x9c\x4e\x52\xe7\xb4\xf7\x38\xf8\xb6\xd9\xfe\x50\x15\x35\xf7\x82\xc8\x1b\x60\x36\x4c\x3b\x89\xd9\xfb\x28\xea\x60\xfc\xc0\x13\x1a\x42\xdc\x66\xbb\x11\x36\xa3\x8b\xc9\xc2\xc6\x8c\x93\x24\x35\x85\x90\x50\x58\x35\xdc\x0a\x8a\xe9\x31\x37\x8a\xa8\x92\x2e\xe3\xd7\xeb\x1c\xa4\x5b\x71\xdb\xa0\x4e\x04\xfc\x3b\x57\x7c\xdb\xd9\xde"
		"\xbd\x52\x32\x10\x17\xa6\x49\xeb\x0d\xac\x0d\xc6\x73\x40\xfc\x9f\x47\x5a\xe5\x64\xbe\x60\xcc\xe2\x8d\xaa\x75\xf9\x99\x67\x6b\x82\x38\x6b\xff\x82\x3c\x5a\xff\x4f\x1d\x85\x14\xd5\xbf\xc4\x11\xc5\xe2\x6a\x62\xc6\x91\x6d\xbf\xd7\x85\x2f\xb6\xdc\x59\xe7\xff\x17\xe8\xff\x94\x8b\x33\x78\x9f\xe4\xf8\xdb\x79\x82\x73\xfa\xff\x20\xda\x16\x83\xea\x1a\x40\xb3\x68\x71\x80\x9b\xd5\x08\x95\xc0\x32\xdf\x37\x07\xab\xd4\xda\x0b\x37\xee\xf7\xcb\x20\x0c\x68\x35\x77\xeb\xde\xa3\x38\xf4\xe3\x88\xb5\x80\x40\x9c\x21\xd0\x20\x9a\xeb"
		"\x1b\xfd\x4a\xb6\x23\x12\x35\x64\xcc\x50\xea\x49\x13\x9b\x8b\x60\xf9\xfc\xef\x03\x33\x96\xe0\xa2\x65\x24\x24\x11\xf8\xb3\x24\x01\x33\x9d\xb8\x3f\x66\x8b\x4a\xcc\x12\xcd\x3f\x9d\xdf\xe3\xb6\x13\x01\xe0\xd5\x15\xd4\x3e\xa8\x0b\x28\xff\xb7\xd5\xff\x44\x4e\x98\x6d\x11\xf0\x2e\x4b\x05\x2a\xc2\xe5\xdc\xaa\x6f\xb8\xd4\x16\x80\xa7\x57\xd4\xb7\x1e\xdc\xbb\x7a\xa6\xff\xf8\xeb\x7c\x33\x8d\xc6\xf3\x5b\x64\x2b\x4d\xce\xb3\x01\x49\xd7\xd9\x1b\xef\x76\x0d\x3b\xc3\x37\x5d\xd0\x2d\x46\x74\xff\x44\x05\x26\x2a\x8f\x29\xae\x5c"
		"\x7c\xe4\xc8\xa8\x79\xc0\xd5\xeb\xd1\xbc\x5f\xf8\x09\x8d\x23\x5a\xf1\xdc\x86\xcb\x4a\x3c\x97\x1e\x73\xa8\xcb\x7e\x02\xd9\x6d\xf9\x9f\x68\xd5\x75\xac\xbd\xba\xfe\xba\xdb\xe9\x2d\x02\x1c\xc7\xba\x73\xdf\x5d\xdf\x44\x85\x4e\xd7\xa1\x81\xef\x65\x5f\xaf\xd9\xd9\xf9\x47\x6e\x68\x6f\x46\x5c\x7f\x28\xac\xf0\xa3\xe7\x0b\x3d\xc8\x04\xf2\xad\x8e\x80\xfc\x39\x0e\xc9\x50\xc5\xb5\x12\x1b\x51\x55\xe5\xf2\x42\x5f\x88\xd4\xdf\xc3\xce\xc1\xdd\xba\x7e\xea\xab\xd5\x0f\xc0\xb7\xe2\x4d\x36\xa7\x88\xbc\x6e\xf9\x19\x31\x18\x1f\x58"
		"\x39\x6c\xa7\xb6\x3a\xcd\xcb\xc4\x37\xc9\xef\xd1\xa7\x30\x7d\xb4\x69\xbe\x67\x6e\x32\x18\x38\x76\x82\x04\x2b\x11\x20\xb4\x4e\x1a\x47\x1d\x1f\xbc\xfb\x77\x29\xce\xb2\x4a\x7d\x3b\xeb\x1e\x46\x4b\x8d\x91\xb5\x80\x7a\xdb\x57\x7f\x4d\x17\x96\x09\xd0\x3b\x79\x39\xc1\xb0\x25\x61\x7a\x23\x39\x4d\xee\xb5\x3a\x79\x1f\x60\x18\x4b\xd1\xda\x52\x11\xef\x07\xa5\x7d\x93\x1c\xe6\x37\x27\xdf\x39\xdb\x2e\x31\xfa\x59\xd9\x53\x99\x2d\xb3\x42\x54\xc2\xf1\x34\x4f\x7e\xf7\x0e\xa0\x21\x3d\x62\x01\xed\x67\xd7\xb3\xff\x59\xc1\xb5\x08"
		"\x7b\x76\x2c\xd6\xab\x17\x52\xb4\xce\x22\x3a\x6b\x04\xcc\xc1\x03\xee\xf2\x87\x3d\x43\xbd\x75\x56\x44\x24\xb4\x2c\xce\x6c\x8f\xce\x80\xa9\xb2\x34\x5e\x65\x23\xb0\xfd\xfb\x70\xfe\x45\xa3\x6c\x2c\xad\x6f\x9d\x45\xf6\xe8\x02\xe4\x66\xd5\xb2\x3e\x9a\x3b\xb7\x71\x8c\x6e\xfd\xa4\xa9\x8a\xd7\xab\x77\xb4\x92\x58\x77\xfd\x7e\xd3\xc7\x27\xc5\xab\x07\xa3\xb8\xea\x8e\x6a\x06\x1e\xa6\x2b\x81\xfc\xd2\x7c\x5b\xd9\xcf\x4f\xab\xfb\x40\x37\x01\x76\x22\xe4\xc7\x8f\xa1\x31\x93\x1d\x8a\x7f\x50\x39\xbc\x13\xf2\x7a\xd3\x37\x88\x7f"
		"\x39\xed\x9b\xb6\x36\x71\x0b\x59\xa1\x9c\x83\xb9\xf8\x1c\x85\xa6\xeb\xc2\x09\x7e\x9f\x81\xee\x72\x39\xc8\xc4\xb0\x7f\xd4\x1a\x1e\xec\x87\x4a\x65\x37\x5a\x2c\xb8\x78\x75\xae\xfc\x99\x11\x29\x01\xe0\x0c\x4f\x9e\x14\x55\x08\x8d\xbf\xae\x9f\xe3\xa7\xba\x8e\x03\xc2\x14\xea\x9c\xd2\x3d\x5a\x8e\x1e\xdf\x87\xae\x79\x60\x4f\x4f\x48\xda\x27\x82\xbf\xb3\x64\xfc\x90\x39\x3d\x70\xe4\x83\x9c\x4e\xba\xdc\xc3\x3e\xa4\xe0\x21\x05\xe4\xa8\x7a\xaf\xaf\x64\xcb\x66\x4b\x09\x59\x00\x9f\x63\xe0\xc6\x75\x5d\x7a\xbb\x3e\x03\x56\x0b"
		"\x10\x84\xea\x32\xf6\x29\xf2\x22\xf5\x0f\xbd\x94\xdf\xb4\x04\x81\x4c\xad\x39\x4b\x90\xb0\x39\xfd\x47\x1c\x03\x45\xe1\xac\x98\xe1\x8c\xc1\xdc\x02\x96\x43\x05\xae\xd8\x31\x96\x38\x11\xfa\xf3\x84\x12\xfe\x3c\xbd\x3e\x77\x3b\x12\x68\x62\xc2\x0d\xd4\xdc\x6f\x3f\x54\x2e\x2d\xf6\xd5\xd5\x58\x4e\xe3\x1e\x56\x6d\xc5\x9a\x9e\x30\xba\x08\x63\x8c\x43\xa5\x87\xc5\xf7\x9b\xfb\x4b\xe2\x4e\x2b\xf2\xad\x8d\xbb\x91\x21\x96\x87\x25\xb7\xde\x7e\x9f\x73\x52\xee\x58\x8b\xc4\xf6\x21\x4c\x88\xde\xc3\xc1\x12\x93\xf7\xb3\x85\xb4\xeb"
		"\x98\xb1\x11\xca\xa3\x3c\x2b\xb0\x94\xda\x23\xab\xd8\x19\xae\x67\xf5\xbb\xef\x28\xcc\x5c\xae\x3f\xab\xdd\x7f\xb4\xf5\x34\x63\x83\xb0\xf8\x99\x2a\x6b\x3e\xab\x83\xb5\xba\x3d\x79\xed\xb0\x89\x93\xb8\x50\xc6\x3e\xf7\xf1\xa7\x81\x9b\xa5\xce\x07\x83\xea\xb8\xf6\xce\xb1\x0a\x70\xf6\x85\xd1\xa1\xaf\xb6\xa6\xfa\xde\x54\x80\xa9\xa1\x2b\xbf\xae\x79\xbd\xe3\x54\xef\x6d\x6c\x54\x94\xcb\xbf\xa8\x5b\x08\xef\x14\x2e\xfc\x80\x0c\xe3\xaa\x0c\x1e\x95\xb4\x7f\x89\x1a\x81\x92\x46\x95\xb1\xce\xc1\xf9\x97\xf0\x32\xd0\x66\x98\xe6"
		"\x80\xb3\x0c\x27\xb4\x9b\x49\xda\x4c\x81\x17\x7a\xdf\x17\x55\x75\x80\x1d\xe6\xd5\x88\x8b\x14\x8b\x7f\xa5\x7f\xcf\x2d\x71\x07\x57\x62\xae\x46\x88\x40\x10\x6b\x5d\xa5\x53\x5b\x71\x8b\x46\x9b\xc5\x19\xba\x90\xf2\x43\x15\xfb\x69\xcc\xcb\x77\x25\xf1\xca\x69\x3e\x10\x48\xc8\x10\x7a\xa5\xa2\x26\x16\x28\x9b\xff\x69\x9d\x6d\x6a\x78\x66\xf3\xdb\x29\x57\x5c\x7b\x7a\x90\xc8\x15\xce\x8b\x6d\x9a\x3d\x7a\x90\x2b\x79\xb9\x45\xb0\xa8\x56\x7d\x53\xcd\xf2\xb1\xfb\x9c\x44\x20\x90\x90\x40\x3f\x8e\x7d\x58\xde\xea\x52\x49\xfa\xc1"
		"\x8c\x08\xa6\xbf\x43\xaa\x54\x85\xc1\xd2\xec\xa9\xee\xd1\x33\xf1\x9f\xe4\x45\xbd\xbb\xaa\x02\xa1\x2d\x43\xfe\x20\xcb\xb7\x7c\xcb\xa5\x4f\x6f\x14\x3f\xae\x13\x40\x64\x96\x91\xe7\xc0\x3a\x92\x49\x07\x73\xdc\xe3\xb4\x54\x85\x35\xb6\xb8\x04\xd9\x18\xb1\xd7\x1c\xbc\x83\x0b\x35\xf3\xd7\x48\x9e\x2a\x33\x95\x44\x2f\xf0\xc9\x33\x88\x7a\xc8\x6a\x31\x3b\x4b\x1f\x3e\x3e\x8a\x18\x2e\x37\x0b\xb8\x7d\xdb\xd8\x20\xa8\x1a\x78\xcc\x8a\x4c\x41\xaf\x01\x3a\x61\x02\x9c\x5d\x83\x64\x99\x17\xf5\xd1\x5f\x09\x70\x0a\x79\x2e\x3d\xde"
		"\x29\xcb\x0f\x8e\x2e\x2c\xc3\xae\x1a\x2f\x5a\x49\xe0\x9e\x34\x1a\x47\x3b\xb1\x5d\x64\x51\x1d\x5c\x6e\x12\xc3\x0a\x0a\x57\x04\xf4\x6e\xb7\xf4\xb2\xb7\x90\x4b\x89\xd8\x85\x16\x70\x33\x1f\xc4\xa7\x5e\x05\x23\x8f\xf2\xd6\x10\xaf\x16\xac\x64\x7a\x67\xee\xe4\x45\x69\x14\x34\x24\x3e\x98\xcc\xa3\xca\x23\xc7\x91\x49\x82\xb3\x9b\x7a\xc8\x66\xfe\x54\x79\xec\xe9\xc3\x4e\x2d\x79\x1b\x24\xc3\xbb\xa9\xdd\xef\xf1\xd6\xc1\x11\x30\x43\xfe\x3b\x2a\x58\x0b\x90\x45\xd5\xed\x99\x31\xc4\x74\x24\xe6\xbc\xe4\xf3\x5e\xb1\x29\xd8\x6f"
		"\x59\x80\xfa\x82\xe1\xb0\x0b\x1f\x78\x31\x36\x02\x1a\xfd\xff\x91\x78\x5b\x6a\x7a\x9a\x74\x76\xf1\xdb\x16\x88\x14\x3a\xc3\x65\xff\x1e\xc7\x24\xb2\x79\x9c\xf7\x1f\x9e\x37\x45\x0b\x8d\x5d\xd1\xc2\x50\xfb\x61\xf1\xa9\x5a\x49\x1e\xe5\xc1\x20\x3d\xd5\x99\x6b\x71\xbf\x78\xd3\x09\x57\xb3\x20\x6e\xfa\x28\xf7\xbe\x8b\xaf\x0e\x80\x5e\x0b\x99\x80\x54\xec\x10\x6a\xb8\xf2\xf3\xed\x94\x3e\x58\x0c\xc8\x21\x74\x3d\x1a\x98\x97\x3f\x6d\xe2\x1e\x4a\x06\x92\xea\xa3\x4f\xcf\x3d\x28\xcd\x4e\x5a\x7a\x5b\xba\xca\x1d\xfd\x2e\xd3\x90"
		"\xdd\x22\x0d\xd5\x3f\x67\x26\x93\x2b\x1d\xeb\x1b\xaa\xa2\x9d\x4d\x41\xf2\xbb\x54\xed\x35\xf0\x5a\x70\x3d\x92\xb0\x55\x79\x08\x2d\x42\xe8\x92\xc7\x24\x9f\x1c\xc8\x50\x13\x1d\x6a\x7e\xe5\x8d\x8e\x23\xff\x34\xef\x71\x9c\x5a\xe0\x5f\x65\x5b\x82\xf8\x71\x46\x04\xc3\xaf\x0c\x22\x59\x08\x14\xbb\x25\x59\x3c\x4f\x8e\x55\x78\x0a\xf5\xb8\x0a\xcf\xff\x97\x46\xea\x67\x8c\x9b\xb4\xd3\x40\xa5\x3a\x6f\xdf\x3e\xd9\xa7\xd2\xab\xf3\x69\xb5\x1d\x15\xf4\xee\x63\xbb\x72\xaa\xc5\x9c\x04\xf1\x63\xf7\xbd\x18\x70\xa4\x89\xad\x5d\x1e"
		"\x4b\x71\x25\x8e\x85\x6e\x09\xbb\x92\x3a\x69\xcd\xcc\xb1\x0d\x44\x01\x8c\x4b\x38\xc5\x08\x82\xc3\x9a\x68\x00\xfd\x7a\xef\x9d\x47\x80\xf1\x27\x76\x7d\x57\xa1\x2f\x1b\xfd\xd5\x94\xf4\x55\xb2\x32\x9a\x2b\x65\x6a\x2b\xd7\x09\xff\x10\x6b\x91\x26\x47\x80\xfe\xa3\x6a\xca\x0b\xb0\x51\x8f\x0f\x06\xf6\x11\x53\xea\x1e\xda\x2b\x77\xe9\x81\x9a\xce\x9e\xf5\x14\xdb\xc5\x4c\xc6\x5b\x17\x7f\xce\x34\xdb\x50\x4c\x66\x8f\xb6\xc4\x7c\x7f\xd1\xe0\xb2\xd5\x6d\x38\x20\x40\x11\x1c\x48\xc3\x92\xbc\xea\x5a\xf4\x16\xb3\xe8\xb4\x23\x92"
		"\xcb\xea\xb3\xc3\x11\x52\x69\x5f\x39\x98\x57\x4f\xd7\x47\xba\x75\x66\xc6\x7b\x89\x49\x5f\x20\x0c\xbe\x4d\x95\x65\x19\x52\x84\x04\x30\x1e\x4a\xea\xde\x6e\xbb\xc3\xcc\x66\xfb\xb9\xa5\x30\xc9\xb2\x26\xef\x93\x33\xcc\xb1\xe4\x02\x10\x93\xa8\xd0\xc8\x1b\xb1\xef\x5d\x61\xf7\x87\x5a\x3b\xc2\xff\xda\x68\x54\xd3\xcf\x27\x20\x0f\xad\x50\x21\x02\x79\xaa\xbf\xa2\x24\xcf\x41\x51\x0b\x0f\x1e\xcd\x71\xf0\x23\xa1\xfb\x7e\xd8\x48\xf7\xe9\x30\x5a\x4e\xc2\xe5\xc9\x1c\x81\xdf\xb3\x56\xa6\x61\x90\x66\x47\xfb\x37\x9d\xa8\xb7\x05"
		"\x8e\x50\x92\x53\x83\x21\xfe\x15\x5f\x0b\x40\x94\x34\x80\xc7\x37\xc5\xa7\x9d\x57\xfa\x23\x82\xb7\x08\x20\x1f\x9b\x34\xc8\x68\xbe\x18\x4c\xc7\x92\xed\xc2\x8b\x8b\x6d\xa2\x5e\x97\xa3\x53\x65\x95\x9e\x83\x03\x90\x6a\xb0\xe4\xb6\x71\x99\xba\x77\xd2\x78\x10\x91\x25\x88\xbe\x73\xaa\x2a\x9f\x0e\x41\x73\xd9\x04\x77\xd7\x93\x3d\x15\xed\xd7\xe4\x7c\xc0\xfb\x9b\x05\x8b\xfd\x3e\xa7\x0f\xe2\xb0\x9d\xe4\xed\x37\xf1\x42\x82\x65\x06\x09\xc4\x08\x0a\x4f\x6e\xe1\xb6\x90\x3e\x9d\x3a\x80\x7d\x69\x95\x38\x2a\xc2\x22\x1c\x0d\xb7"
		"\x1d\x05\xd4\x94\x93\xd1\x3a\x1d\xa3\x5e\x46\x90\xca\x9b\x98\x49\xdc\xab\x05\xe4\x3b\x50\x42\x22\x45\x6f\x29\x5a\xd7\x13\xa5\x09\x15\xd0\xf9\x27\xf6\x8a\x4a\x50\x98\xb8\x96\x1b\xd3\x07\x21\xe9\x7d\x2a\x37\x08\xba\x72\xf8\x09\x4b\x91\xac\x52\xf9\x2f\x91\x78\x3f\xe2\x10\x0f\xb8\x76\x31\x7c\x59\x18\x7c\x1d\x8a\x4f\x35\x39\x2f\xc7\x19\x17\x7f\x70\x8f\xff\x8e\x74\x6c\xaa\xe8\x5a\x91\xdc\xe4\xc3\x36\x22\xbe\x23\x2f\x6e\xec\x32\xf9\xd7\x70\x0e\x1d\x4a\x9f\x48\x59\x71\xcd\x18\xb6\x13\x50\xe2\x3a\x4b\x8e\x58\x05\xa7"
		"\x57\xc9\xaa\x70\x17\x3e\x27\x9d\x0d\x9f\x55\x82\xf8\xa5\x3f\x04\xf6\x79\xc3\xe6\x30\xcb\x5a\xc6\x79\x25\xde\x41\x2b\x33\xaa\xba\x7b\xbb\x1d\xff\x5e\x1f\xe4\x5c\x65\xf5\xcb\xaa\x67\xea\xe9\x4e\x57\xed\xa6\x61\xdf\xfa\x7d\xd0\xa1\x53\x6a\x69\x4b\xa9\x91\xfb\xf8\x81\xfc\x1a\xaf\xc6\x88\x57\xb0\x64\x80\x9d\x92\x80\x8d\x52\x87\x30\x8d\x70\x92\x20\x90\x0a\x83\x75\x5c\x04\xe4\x96\x0f\xd5\xab\xf7\xa3\x21\xb0\xc6\x8d\xd1\xfd\xa8\x68\x19\xaf\x37\x52\x3c\x38\x5f\x35\x22\x04\x8a\x35\x21\x84\xac\x5e\x91\xf0\x4e\xef\xea"
		"\x0c\x80\x3f\xdf\xd4\x3d\xd3\x48\x0d\x0b\xb8\x0b\x7f\xd8\x57\x9d\x87\x8c\xc1\x40\x2c\x7b\xa8\x7f\xd2\x07\xa5\x49\xa1\x8c\x63\xc7\xf4\xf1\xb0\x85\x44\x50\x80\xc6\x5c\x80\x92\x23\xd7\x03\xd0\xf5\x4e\x39\x90\xae\x5e\x75\x7d\xc7\x7b\x2b\x38\x88\x92\x7d\xde\x69\x83\x00\x44\xc9\x26\x4d\x37\x37\xcb\x92\xb5\x51\x7e\x5a\x41\x3f\xe4\x02\x19\x24\xcd\xc1\x35\x59\xcc\x29\x7c\xa8\x8d\xd7\x43\xd9\x56\x71\x14\xd3\x1b\x2a\x2d\x09\x78\x3d\x89\x90\x9c\xb4\xc3\x42\x8d\xdf\xe1\x7b\x58\x56\xbe\xb9\x44\x4c\xff\x96\x78\xaf\x18\x69"
		"\x2a\x55\x6f\x31\x40\x4b\x27\xcb\x2e\x9d\xbb\xcc\x79\x80\xaa\xf5\x93\x77\x3e\xf6\x24\x0e\x66\xf4\x0b\xcd\x17\x48\xb1\xba\x96\x00\xd5\x38\x44\xeb\x63\x79\x26\xd8\xc7\x48\x5a\x56\x90\x5a\xea\x3f\xf7\x0c\xbc\x47\x41\xb4\xc9\x48\x94\xf0\xa4\x1e\xeb\x3b\x2b\x9b\x02\xb9\xcc\x09\x79\x81\x4c\x96\x11\xad\x57\x05\xb5\x48\xa6\x39\x82\x02\x34\x6e\x70\x4a\x11\x1d\xec\x32\x47\x5b\xa6\x54\x02\x0e\xe8\x71\x29\xd4\x82\x21\x92\xc9\x70\xef\xad\xd8\xfa\xa4\x83\x09\xc2\x94\xe3\x20\xa4\x56\xb4\x37\x73\x20\xc5\x9c\x6c\xbe\x19\x3d"
		"\x54\xa4\x36\x6f\xaf\xc5\x64\xff\x31\x19\xf0\x2e\xc4\x63\xbd\xca\xea\x23\xee\x56\x69\xfd\xb2\xf4\x20\xc1\x66\x28\x34\x0a\x57\x21\x9e\x54\x54\x62\x3f\x35\x20\xd5\xb6\xc9\xca\xa7\x1d\xa2\xdd\x9d\xbe\xe5\xf2\xa7\x85\x8a\x93\x3f\x25\x63\x11\x40\x5e\x8f\x9e\x41\x7c\xd4\x28\x19\xa2\x76\x1e\xd5\x23\xa3\xf3\x97\x07\xf5\x1e\xb4\xeb\xb3\x80\x7d\xb1\x03\x71\x0c\x42\x4e\xd7\x9b\xf0\x10\x93\x23\xaa\xfe\xa0\x87\xc2\x3b\x46\xd4\x0a\x88\xe3\xcf\x34\x2d\x71\x16\xb6\x78\xf0\x5c\x75\x33\xd8\xe8\x22\x57\x51\xad\xeb\xe6\x86\xe4"
		"\x0f\x96\x0c\x02\x4e\xcf\x56\x68\x9a\x6a\x3e\xe4\x50\x91\xdc\x4d\x34\x4c\x6d\x94\x5c\xa2\x91\xe0\x42\xbf\x6c\x7a\x86\xd1\xa4\x56\x86\x31\x75\xaa\x01\x93\xa2\xc6\x51\xae\x7e\x85\xfc\x24\x63\xb1\xf7\xf2\x45\xd0\x33\x04\xdc\xfb\xb1\x15\x5b\xae\x58\xe3\xad\x73\x96\x5a\x34\x29\x78\x82\x61\x22\xdd\xf8\x84\xf8\xa4\x75\x84\x0c\x48\x9b\x8d\xaa\x0c\x3d\xc4\xb9\x5f\x59\x45\x40\x0a\xe6\xab\xb3\xf6\xf7\x22\xd9\xfb\xa8\xd5\x55\x0a\x9e\x60\xcf\xbd\x47\xc0\x8e\xc4\xbd\xf6\x3c\x1a\x73\x70\xb7\xe9\xca\x01\x66\x99\x0a\xb0\x14"
		"\xe1\xee\x89\xbc\x87\x1e\x00\x48\xf9\xa0\xe0\xcf\x4a\x7c\x17\x7a\x98\xaf\x3d\x46\xea\x11\x3b\x81\xe4\x88\xf1\x9a\xd8\xd0\x36\x06\x7c\x20\x70\x2f\xad\x20\xc0\xd5\xfc\x90\x33\x0c\x43\x10\x62\x83\xff\x45\x2b\x44\xa4\x01\xf5\x0e\xd0\x35\xf6\xa7\xb8\xf7\xc2\x78\xfc\xbb\x63\xcf\x70\x45\x07\xfc\x7e\x25\x36\xd3\x4e\x5a\x30\x1f\xe3\x53\xbd\xc2\x0b\xdf\x8c\x3c\xfe\xd7\xde\xb9\x19\xc1\x04\x86\x6e\x60\xd7\x00\xd5\xc0\x18\x0a\x18\xc9\xa2\xdb\xff\x01\xd6\x44\x5c\x30\x19\xee\xab\x53\xfc\x35\xff\xf5\xdd\xb3\x5f\x5a\xae\x7f"
		"\x64\x1f\x1b\xd7\xb1\x42\x71\xcd\x18\xce\x35\xf6\x24\xdc\x5b\xf4\xf1\x00\xc5\x61\x01\xca\x30\x9e\x7a\x10\x0e\x67\xcd\x51\x05\x78\x27\x00\x43\x06\x92\xd2\x99\x7b\x05\x61\x5f\xa8\x2d\x5a\xd9\x27\x59\x46\x6e\x88\xf1\x42\x7e\x5e\xba\xea\x8d\x29\xc9\xc8\x05\x19\xd9\x9f\x23\x1c\x1e\x9a\x82\x38\xa8\xd6\xa4\xe7\xea\x31\x59\xae\x01\x12\xbb\x5c\xfc\xfd\x8f\x23\xf9\x4b\x25\xd5\xb0\x37\x6a\xa8\x8d\x2a\xde\x73\x92\x28\x50\xd5\x8a\xbb\xf7\x86\x2d\x91\x70\x07\xcd\xa7\xce\x61\xa1\x59\xd5\x65\x8f\x19\x40\xa1\x26\xb8\xbf\x9d"
		"\xad\x6e\x69\xab\xf9\x15\x1f\xf1\x6d\xf7\x9e\xf0\x9f\xfa\x0f\xdb\x74\xfa\xd1\xbe\x46\x05\x69\x88\xe4\x5f\x67\x0a\x79\xfc\x32\xde\x85\x80\x47\x26\x3d\x82\x71\xfb\xac\x14\x94\xeb\xff\xf1\x0a\x90\x05\xe7\x18\xe5\xe0\x65\x80\xb5\x3f\x4a\x71\xef\x0d\xaf\x09\x51\x23\x20\x94\xa1\xbc\xf5\xa0\xc4\xa2\x62\xd4\x99\x28\xb2\xcd\x7c\xf2\x09\xa1\x66\x79\xa7\xbe\xac\x7e\x86\x68\xc7\x30\xa9\x92\xb0\x5a\x6d\x6e\x25\xa4\x2f\x70\xcf\xf7\x33\xd1\xed\x4e\x81\x0e\x71\x9a\x33\x1e\x65\x97\x5f\xe3\xfd\x34\x95\x6a\xed\x94\x39\x54\x3f"
		"\xf7\x1a\x20\x1f\x61\xb9\x9b\x13\x01\xf0\x0e\xcc\x80\x0d\x29\xa7\x66\x14\x4b\x32\xf3\xc7\xa2\xf1\x16\xef\x46\x22\xb3\x7f\x85\xd0\x08\xfc\x31\xce\x79\xe8\x70\xd2\xca\xc8\x72\xbd\xd0\xe3\x74\xfa\xec\x5b\x78\x60\xb0\xbf\x7d\xff\x67\x0d\x8c\xc3\xfb\xa9\xa7\x4e\xe4\x39\xc3\x91\x2f\x98\xa9\xbb\x99\x66\x65\x95\x5b\x88\x70\xca\xe2\x42\xdd\x7b\x8c\x41\xe3\xfc\x4d\xcd\xdd\x27\xb1\xd4\xe8\xc4\x8c\x52\x7c\xba\x21\x01\x1b\x62\x89\x02\xdb\xb5\x38\x0c\x73\x59\x4e\x51\xea\xb0\x7f\x02\x47\x1e\x88\xaf\x29\x74\xf8\x46\x12\x1d"
		"\x03\x32\x36\x27\xf4\xef\x17\x79\xed\xf6\xab\x98\x43\x74\xa4\x28\x79\x75\x46\xa6\x6b\xf0\x2d\x93\xbf\x0c\x8c\x8e\x4b\xb3\x00\xd6\x89\x94\x03\xf7\xe7\x99\x4d\x01\xaa\xff\xdf\x55\x87\xf1\x75\x51\xf5\x1e\x19\x09\xe2\xe9\x6a\xe1\x86\x1b\xc8\x4e\x82\xa1\x92\x2d\x33\xb5\xa3\x14\x11\x24\xea\x33\xbc\xc9\xcc\x86\x63\x18\xd1\x6a\x92\xa3\x2b\x72\xe6\xca\xbc\xcb\x22\x53\xfc\xea\x86\x94\x4f\xed\x08\xb9\xb9\x0e\xb2\xe9\xe0\x66\x68\xe0\x17\x0f\xa7\x87\x54\xcd\xc3\x78\xd9\x22\xa8\xd0\x19\x0e\xa5\x2a\x97\xbc\xac\x4f\xa8\xc6"
		"\x4c\xdb\x17\x2a\x07\x18\xb1\xb3\xa1\x29\xc0\xa0\x38\x83\x11\xcb\x87\x2e\x30\xec\x88\xdb\x96\xf3\x4f\xc5\x6e\x80\x2e\x9a\x4e\x4d\x04\x61\x2e\xd1\xdc\x7c\x08\x97\x91\xf3\x6a\x10\x22\x51\x46\x46\x22\x92\x95\xd1\xc8\xe2\xf5\x1e\x36\x25\x8a\x02\x04\x3b\x0a\xbf\x57\xc7\xac\xa0\x82\x98\x67\x76\x5f\xf3\xf0\xdb\x8a\xde\x79\x49\x52\x4b\x49\xac\xda\x30\x7a\x55\x29\x4e\x62\x90\xc3\xab\xf8\xde\xe9\x3d\x9e\x6b\x44\x6f\xe4\x23\xb3\x42\x0f\x0f\xae\xb3\x6a\xe1\xa8\x38\x42\x04\xbe\x5b\x75\xb0\xcb\xfe\xf2\xb6\x1e\x34\x95\x0a"
		"\xad\x30\x7c\x23\xdf\x02\x77\x7a\x31\x66\x95\xc3\x2a\x00\x9c\x02\xc1\xb2\x60\x29\x1c\xda\xdc\x2f\x19\x54\x7f\x0f\x98\xe7\xd4\x1b\x5b\x9c\x5d\x71\x90\xe4\xed\x2d\x0f\x91\x88\x80\xc0\xe6\x20\xbb\x00\x99\xf4\x08\x3e\xf2\x02\x1e\x95\xb0\x89\x99\x06\xb9\x72\x29\xc5\x5a\x8b\x83\x98\xf8\x96\x94\x99\x17\x5a\x45\x18\x9b\x72\x9f\xb7\x3b\xbc\xad\x78\x2c\xcd\x5d\x24\x01\x46\x5a\x8b\x89\xa2\x82\xc3\x37\xd1\x1c\xbd\x1e\x2f\x20\x8e\x0f\xfc\xa4\xe4\xbe\xd9\x95\x3d\x94\xe9\x89\x24\x2b\xa6\x5d\xda\x77\xd0\x99\x42\xbd\x20\x6e"
		"\x8d\xf5\xe6\x1c\x15\x4e\x69\xb3\xe0\x4f\x35\x6c\x18\x4b\x54\x56\x8a\x29\x3b\x6e\x93\xea\x5e\xdc\x25\x12\xc4\x37\xe6\xf5\x91\x7f\x1d\xd4\x46\xe2\x5c\x30\x27\xe1\x09\xc9\xfb\x75\x10\x8f\xf3\x67\x49\x8a\x97\xc1\xed\x2c\xfc\xe9\x9f\xf0\x9c\x2c\x2e\xb3\xd7\x2a\x85\x4d\x83\xd4\xaa\x9d\xa1\x71\xf7\x9a\xda\x33\xc1\x13\x98\xfc\x15\x9c\x89\xd3\xf6\xde\x2b\x20\x49\x11\xe6\x5e\x9e\x0f\x98\x95\xac\x1e\xcc\xbd\x82\x23\x18\xa8\xeb\x07\xf7\xe5\xd5\x5d\xd0\xb1\xbc\xe3\xe0\xe3\xfc\xf1\x3f\x93\x4a\x48\x01\x7a\xba\xe3\x16\x97"
		"\x01\x36\x9c\xb6\xa8\xa2\xa4\x0a\x9e\x6e\xb9\x05\x13\x39\x98\x55\x8e\x59\xb7\x92\xf7\x61\xd5\x9c\x71\xa0\x35\xd5\x6a\xce\xf8\x6a\xc5\x19\x9a\x08\xa9\xb3\x02\xbd\x6e\x2b\x3b\xb1\x3c\x10\x3c\xfa\xf4\x38\x3b\xa5\xf1\x71\x11\x62\x02\x22\xc4\x37\xef\x9e\xfa\x4a\x46\x1f\xfb\x47\x62\x0c\x5e\x59\x6d\x0e\xb9\x81\xd6\x2a\x23\x94\x9b\x3a\x07\xad\x0b\x4f\x57\x6a\xa2\x1b\xf0\xb6\x1e\xce\x91\x0a\x7a\x8f\xf1\xc2\x5d\x02\x76\xc1\x04\xe4\xcc\xb7\x98\xaa\xfe\xc5\x82\xa2\xa4\x6b\xed\x5c\xb1\xf1\x46\x74\x95\x25\xcf\xba\x8d\xd0"
		"\x92\x21\x6e\x8b\x23\xea\xc3\xcc\x55\x49\x69\xd6\xff\x78\xee\x3c\x41\xc5\xa0\x8b\x02\x6e\xef\xec\x65\x20\x77\x27\xd6\x43\xfa\x96\x6c\x20\xb4\x2b\xfe\x2f\x16\xe8\xed\x24\xf9\xbe\xcc\xd6\x73\xa1\x13\x51\x95\xbd\x0c\xcf\xe7\x14\xdf\x8a\x16\x34\x49\xca\x4c\x0a\xa7\x22\x45\xc3\x7b\x37\x2e\x45\x5a\x00\xd8\x38\x4c\xca\x81\x81\x9a\xa3\x88\x61\x1d\xd7\x4b\x5b\x05\xca\x68\x51\x65\xf6\x69\xc4\x67\xd9\xaf\x6d\x17\x67\xbd\x1f\xe9\xf2\x91\xcb\x9e\x5b\x49\x43\x1c\x1b\x30\xdb\x1f\x25\x27\x8d\x6c\x72\x4d\xf7\x48\x5c\x69\x76"
		"\x77\xbc\xa5\x86\x1a\x03\x2e\x4c\xa3\x7e\xa9\xb8\xe2\xec\x1c\xdd\x6e\x93\x2b\xe4\x6f\xeb\xdf\xcc\x1d\xbb\x5d\xef\x48\xf3\x54\x1c\xdd\xb0\xbd\x77\x73\xd4\x8b\x6c\xf0\x7d\xad\xdc\xa7\xe1\xcf\x34\xbe\x88\x04\x82\xdd\x2e\x07\x27\xe2\xe7\x82\x41\x41\x92\xac\x68\x0d\xc1\xda\x19\xb0\xba\xa3\x95\xc9\x1c\xc7\x1a\x13\x87\xab\x40\xc9\x85\x65\xbb\xa1\xd6\x86\x34\x37\x87\x22\x29\xbe\x0e\x71\x6f\xee\x0d\x2a\xa8\x2e\x74\xde\xc0\xc9\xd0\x39\xad\x64\x04\xe9\x33\x5d\x47\x32\xf5\x10\xaa\xe2\xc2\x1f\xea\x88\x31\x44\x63\x2f\xed"
		"\x1e\x73\x67\x2b\xe0\x2a\x37\x1d\xb0\xdf\xdc\xb8\xf9\x96\xb3\x5e\x7f\x41\x3d\x69\x14\x8b\xe5\xeb\xf1\xb0\xfd\x5f\x13\x00\xda\x89\x03\x25\xaf\xfc\xdf\x03\xfa\x58\xbc\x12\xca\xc8\xdd\x84\x9b\x4f\x47\x30\xa1\x4f\x2d\xa8\x1f\x4e\x54\x34\x71\xce\x67\x4f\xd7\x85\x04\x25\x6f\x4c\x6c\x8a\xd3\x00\xd6\x61\xf2\xa3\x85\x57\x6b\xc4\x9b\xd1\x78\x69\x07\x68\x86\x19\x9e\xba\xbf\xb0\x1a\x97\x4a\x2d\xc1\x2a\x52\x05\x9e\xf6\xf4\xcd\xb9\xe9\xb3\x23\x46\x03\xd6\x5c\x14\x3f\x6d\xea\xfb\x90\x36\x46\xf7\xe2\xc6\x2a\x73\x7e\x05\xf8"
		"\xca\x58\x9c\x87\xa5\x7a\xfe\x4d\x4f\x0b\xb0\x29\x34\x64\x9a\xe6\xe2\xf9\xc8\xa9\xae\x94\x03\x96\xc0\x0d\x00\xab\xee\x54\x7a\x6d\x97\x2d\xaf\x95\x0b\xe2\xe9\x07\xe0\xac\xe4\x0f\xa1\x00\x78\xb7\xe2\x7f\xab\x1e\x0a\x6c\x25\x8c\xda\xc4\x4a\x33\x28\xb4\x4f\xed\x4a\x03\x86\x8d\x2c\x0c\xaa\x3f\xd5\xa9\x34\x3c\x61\x20\x5b\x87\x5f\xb7\x8e\x92\xfd\xbe\xfb\x73\x47\xec\x3b\x1f\x5b\xf4\x45\x7c\x05\x9c\x2d\x01\x2f\xf5\x60\xf5\x1d\x5d\xf3\x87\xe8\x13\x57\xb6\x6b\x86\xef\x4e\x40\x2d\x2c\xe5\x2b\x9c\x6f\xad\x42\x29\x31\xf9"
		"\xe2\x6c\xdd\x01\x3e\x13\xc1\x12\xe2\x60\x31\xe3\x67\x78\x41\xc4\xbf\xd9\x94\xcf\x5a\x8e\x23\x16\xaf\x1c\x45\x52\x7e\x2f\xb0\xfc\x7e\xd2\x8e\x3c\xd2\xb1\x8c\x08\x68\x3b\x72\x44\x42\x5e\x10\x40\xe3\xbf\xe7\x2a\x93\x1c\x75\x92\x53\xdf\xb7\xb3\x8c\x40\xed\xbe\xbe\xc9\x30\x49\xa0\x41\x71\x95\xab\x0d\x6b\xb6\x09\x6d\x36\x96\x24\x7b\x44\x28\x80\xbb\x2c\x05\x77\x5d\x2a\x9d\x95\x33\x3c\xfa\x48\x91\x01\xea\xd9\x6f\x2a\xbb\x6a\xf0\xcf\x10\xb4\x2e\x4d\x57\x78\xfd\x6a\xcb\xf7\x4d\x35\xac\x56\xb3\xed\x19\xb7\x90\xa9\x52"
		"\x80\xbf\x42\x1a\x34\x13\x7c\xe0\x22\xbd\xac\xe0\x17\x47\x49\x76\xb4\xc1\xa2\xeb\x06\xec\x4a\xd0\x60\xa1\x98\x50\x13\x17\xdb\x0a\x9d\xbd\x96\xdb\x9a\xed\xf0\xe2\x4b\xe7\xba\xa3\xe8\xbe\x0b\x9e\x4b\x6f\xdb\xdf\x90\x0b\xf1\xfa\x7a\x77\xe6\x12\x05\xa4\x19\xf4\x7d\xd3\x0d\x26\x96\x98\x8e\xc4\x10\xbf\xcc\xd1\x98\xf7\xbd\x57\x3e\xe1\xb8\xab\x4c\x1c\xed\xaa\x21\x57\xe1\xee\x22\xcf\xdb\xac\xa7\x16\x8f\x19\x49\x6c\xba\xdf\x5f\x08\x8d\x02\x04\xa1\x0d\xbf\xb4\x25\x98\x9e\x1f\x2d\x08\x3e\x66\xd9\x80\x62\x7b\x1a\x56\x65"
		"\xfa\x18\x87\xe2\x69\xa6\xe4\xe6\xf0\x6e\x5e\x60\xa8\xef\xb7\x1c\xbf\xda\xaa\xb2\x56\xb6\x2a\x13\xf5\xa7\x89\x8c\x49\xea\x93\xd9\x27\xf4\x7b\x6b\xc6\x68\x31\x50\x40\x2e\x06\x8d\x73\xcc\x69\xe1\xcf\xb4\xc9\x08\xa9\x15\xeb\xcf\x3b\x0b\x46\xbc\x51\x74\x72\x5f\x3a\x90\x5a\x05\xb5\xae\xa9\x39\xc4\x46\x07\xa2\xd3\xfa\x71\x3f\xd1\x34\xf3\xe2\x45\x5e\x49\xd7\xc8\x70\x08\x32\xeb\x9e\xa7\x61\x71\x70\x2b\xc0\x82\x89\x8b\x67\xdd\x1a\x58\x06\x31\x9e\xe3\x8c\xad\x98\xc2\xa2\xe8\xc0\xf2\x8e\xaf\xb2\xf3\x6e\x92\xa4\x2d\x8d"
		"\x41\xe7\x08\xb0\x51\x29\x0c\x06\x2a\x93\xf4\xd1\x90\x76\x74\x72\x30\x5d\x8c\x5d\x4b\x3a\xac\xcb\x61\x27\x32\x6b\x43\x69\x2c\x39\x9c\x32\x14\x2e\xaa\xb7\xc9\x2a\xa5\x65\x2c\x06\x1f\xce\x9b\x5a\xb6\x25\x50\xf5\x36\xd9\xb3\x48\x7c\x3e\x0a\xdb\x44\x3f\x19\xc7\xb9\xc0\xb3\x6a\x94\x0e\x0f\xdb\xd9\xd6\xc8\x0e\x0d\x19\x5a\x0f\x4b\x3e\xb9\x68\xfb\x3c\xd3\xc0\x67\xaf\x2b\xbd\x8f\x67\x9a\xb6\xaf\x6e\x28\xbf\x79\x89\x6a\x04\x67\x9d\xc0\xfa\xd0\xf9\xb8\x33\x7f\xbb\x59\x91\x60\x99\xec\x00\x9b\xe9\x55\x86\x98\xc8\x47\x7d"
		"\xc0\xed\xf1\x5f\xa4\x29\xfd\xf6\x60\x8e\xd5\xbf\xdc\xa3\x0c\x50\xa3\x12\xc0\x02\x04\x91\x2f\x40\xc9\x0d\xe0\xe7\x9e\x74\x6c\xaa\x9f\xe3\xfc\x4e\x77\x6a\x26\xc3\x76\x26\x70\x04\xe0\x44\x9c\x6e\x14\x89\xd1\xbc\x6f\x8c\x12\x73\x76\x6f\x9c\xd7\x5e\xd2\xea\x8e\x7c\x60\x96\x7d\xc4\xc8\x70\xd1\x1a\x47\x2f\x4f\xde\xc0\x28\x7b\x68\x5f\xac\xb9\x28\x72\xc6\x59\x1d\xbe\xa9\x8e\xf4\x5b\x7a\xee\x64\xe1\xb2\xe1\x5c\x51\x3b\x21\xd1\x04\xd4\xbf\x64\x66\xd6\x27\x38\x6e\x80\xae\xad\xe3\xc5\x74\xe2\x7b\x40\x8a\x2b\x65\x98\xa8"
		"\x82\x53\xe6\x2a\xc1\xe1\x9d\xff\x62\x72\xf2\x6d\x2b\x36\x0d\x60\x81\x55\x70\x26\x2c\x5a\x6f\x54\xa3\x28\xc5\x14\x8b\x7d\x80\x49\xf4\x85\x91\x85\xca\x72\xc7\xfb\xc9\xe6\x48\x3c\xb7\xe9\x7c\x7c\xa8\x99\xa7\x95\x9b\x2e\x57\xf8\x09\xfa\x76\x36\xfa\xee\x19\x29\xc6\xb1\xe9\x54\x7b\x61\x91\x6c\xdb\xaa\xfa\xce\x8f\x7e\xbd\x65\x77\x60\x3b\x24\xf7\xa9\x00\x26\x37\x93\x75\x2c\x95\x67\x09\xb0\x59\xf4\x53\x90\xaa\x1a\x7e\x26\x49\xc8\xa9\x61\x93\x2f\x53\x4c\x65\x89\x5a\xab\xd9\x0a\xde\x06\xd3\x0a\xaa\x72\xd3\x7a\xae\x79"
		"\x38\x1e\xd5\xdb\xd5\x30\x1d\x29\xc8\x95\xc7\x8c\xcf\xb4\xa6\x68\xc7\x2e\xba\xff\x37\xbc\xfa\x8e\x06\x08\xda\x1c\x8c\x7f\xb5\xf3\x07\x59\x46\x50\x10\x2e\x9f\xc6\x90\x67\xf7\xdb\x1f\x19\xfc\x3a\xf5\xb9\x28\x6e\x46\xef\xab\xcc\x16\xb2\x1d\x29\xb5\x96\x92\xa1\xdd\x2c\xb4\x39\xc5\x48\x07\x5c\xe9\x9b\x7a\x68\xb0\x7e\x12\x0e\x05\x3a\x01\x73\xe8\x0a\x56\x10\x9d\xac\x77\x9e\x62\x38\x6b\xda\xfa\xcb\x90\x4e\x55\x76\x84\x93\xa6\xf7\x48\x19\x16\xbf\x3d\x23\x0c\xf7\x9a\x68\xc6\x20\x5f\x2b\xe4\x5e\x84\x02\x04\x6f\x03\xbf"
		"\x7c\x4d\x3e\x2d\x00\x1d\x04\x76\xa6\x10\x52\x07\xdb\x43\xfe\x6a\x33\x64\xf7\x78\x57\xc0\xbb\xdd\xd2\xe5\x32\x1b\x04\xe9\xe4\xba\xda\xa6\x76\x7b\x10\xfa\xf6\x35\x6d\x35\x66\x38\x9c\x95\x38\x91\xc2\xcb\xd9\x8a\xc0\x0d\x15\xae\xa1\xa6\x3e\x5c\x51\xdf\x60\x9b\xd4\x1b\x21\x1f\x8d\x5f\x90\x17\xb1\x2c\xf4\x9f\xad\x45\xa5\xd1\x3c\x97\xd0\x56\x18\x8d\x94\xc0\xba\x9f\x8e\xe7\x5e\x4d\xb7\x0a\x68\xc3\xc2\x42\x06\x65\x93\x11\x0c\x07\x33\x2a\x08\x41\xdb\xe8\xbe\x64\xc6\xd6\x69\xf4\xaa\x9b\x00\x36\xc7\x4e\xb4\x46\x8f\xbe"
		"\x96\xc4\x78\x5e\x75\xb2\x6e\xbf\xff\xad\xf9\x31\x1b\x64\xcc\xe3\x6e\x81\xa1\x05\xa1\x06\x16\x2a\xa2\x44\x53\xac\xdb\xb0\x55\x0d\xf4\xdc\x4f\x2d\x72\x2e\x08\x3c\x7a\xf0\xd2\x15\x04\xfe\x70\xeb\x7a\x2a\x9b\xcb\xb0\x2c\x6e\xd8\x26\x77\x86\x19\xac\x28\xce\x14\x36\x82\x58\x82\xf8\x0b\x43\x04\x4d\xe1\xa2\x41\xed\x76\x66\x5a\x6c\x3b\x66\xb9\x9f\xfd\x5f\x11\x32\x6e\x38\xa9\xc9\xd2\x1d\x8f\xbf\x17\x6f\xd0\x81\x7d\x0a\x5b\x39\x42\x92\x14\xab\x37\xf3\xd6\x03\xbd\x3d\xad\xe4\x32\x1e\xc4\xa0\xf5\x7f\x88\x66\x23\x80\xbf"
		"\x06\xb0\x5a\x20\xd0\x63\x2f\x7c\x0e\xef\x40\x42\x32\x25\xed\x51\x9a\xf1\xbe\xbb\x08\x88\x84\x24\xa2\x31\x5f\xa4\x78\x77\x45\x6c\x53\xbb\xf9\xf9\x7d\x2c\x4f\x9c\xca\xb2\x9f\x16\xda\xfd\x72\xec\x67\x4c\x2f\x89\xee\x3c\x45\xee\x46\x20\xab\x61\x74\x70\x0c\x74\xa9\x9c\xa0\x3c\x4d\xd2\xca\x86\x3d\x17\xf8\x78\x5e\x45\x6a\xe4\x1d\xd9\xa7\xf7\xd1\x54\xfa\x64\x4e\x24\x80\xb6\x2b\x38\x7e\xb2\x2d\x80\x87\x15\x23\x4f\x69\x5f\x41\x12\x1d\xc4\x4e\xcd\x3d\x7f\x0d\x4a\x36\x57\x84\x70\x61\x1a\x05\xba\xb8\xcc\x79\x1a\xa7\xf5"
		"\x7b\x1b\xf4\x3d\x16\x05\x60\x08\x1d\xaf\xa7\x29\x61\xe7\x20\x94\x57\x18\xbe\x6b\x2b\x13\xf6\x12\x42\xa6\xfb\x61\xae\xd7\x97\x8a\xe3\x27\x0e\x37\x24\x2e\x5e\xe4\xee\xc1\x59\xf6\xc3\x45\x91\xbe\x78\xd4\x29\x9b\x47\xed\x3d\x00\xc7\x8d\x6a\xf9\xcc\x6b\x81\xdc\x56\xa6\x62\xd7\x12\x38\x58\x04\xa7\x22\x87\x0a\x79\x5e\x58\xde\x77\x2e\x2d\x1a\x78\xf9\x0b\x3d\x8c\xc7\x9f\x9e\xac\x2b\xcb\xe9\x5f\xde\xf3\xce\x09\x8f\xfc\x77\x7b\xe5\x11\x63\x6f\xd4\x5b\x9f\x72\x36\x05\x0f\xe5\x91\x60\x75\x39\x25\x8c\x28\xf4\x89\x18\x50"
		"\x85\xad\xbc\xd6\x6b\x48\x28\x9a\xb2\xf0\x4c\x45\xb1\x70\x86\xe1\x55\x00\x3c\x3d\x7b\x75\x50\xfd\x4e\x22\xa3\xf3\x2d\xe8\xe5\x05\x1b\x0b\x13\x15\xd2\xc2\x23\xf4\xb1\xcf\x75\x0a\x79\xfa\x43\xde\xee\xa7\xd9\x5e\x92\x4d\xd4\x4c\xaf\x50\xa2\xaf\xe0\x9a\x1c\x79\x65\xff\xe5\xce\x66\xba\x30\x86\xd6\x17\xb5\xe9\x1d\xde\xb2\xef\x5d\x69\xb3\xa7\xa0\xe9\x9f\xdc\x52\x80\xa6\x9a\x0a\x41\x2c\xad\xb7\xc2\x5e\x4d\x38\xdd\xab\x70\xa2\x8c\xc6\xf7\xc8\xef\x4c\x20\x0f\x35\x67\x6f\x19\x28\x61\x1e\x85\xae\xdc\xb3\x54\x8f\xd0\xe1"
		"\xba\xfd\x79\xbc\xe1\x97\x8b\x75\x5e\xd3\x9a\x97\x5e\x28\x35\xed\x1a\xab\xd8\xa1\xfb\x9d\xcf\x5d\xca\x64\xbf\x9b\xed\x88\x01\x38\xe2\x89\xe8\x53\x9f\x28\x0c\x61\xc6\xd2\xaa\x08\x28\x86\x38\x64\xc5\x41\x11\xcc\x00\xba\x05\x52\xa0\x68\x3d\xa1\x67\xcf\x3b\xc3\x4f\x0a\xf6\x2d\x73\x13\xc5\x0b\xdf\xdc\x80\xaf\x03\x4d\x4e\x5a\xd0\x45\x74\xc2\x75\x9d\x06\xa9\x1c\xe8\x62\x63\x5e\xff\xa2\x88\xb0\xee\xf6\x26\x1e\x3a\x9e\x4b\x64\x78\xed\x6f\x24\xb0\x58\x27\x55\xd7\xca\x39\x5f\x3d\x52\x12\xa2\xda\xc9\x10\x89\x43\x98\x04"
		"\x5a\x0f\xcf\xc9\x3d\xb1\x95\xa7\x58\x85\x89\x4f\xad\x34\x42\x4f\xff\x3d\xa2\x7f\x20\xbc\xbb\x7f\x09\x4c\x31\x37\x3c\x3c\x44\xe0\x32\x73\x5f\xd1\xbe\xee\x01\xb5\xc1\x6d\xd9\x62\x0a\x27\x8a\xcf\x72\x63\xdd\x02\x70\x65\x1a\x7c\x6c\xb2\x0e\x5f\x3f\x24\xd5\xf2\xef\x21\x01\x72\x39\x2e\x3d\x18\x64\xe3\x1e\xc8\x03\x21\x94\xf2\xe8\x24\xfb\x11\x1f\xb9\x33\xaa\x4f\x68\xb5\x30\xc3\xbb\xb9\x0a\x82\xe6\x8c\xca\x8d\x8a\x03\xb3\xfa\xa1\x3b\x58\xa1\xa4\xf1\x67\xad\x61\xbf\x19\xd7\xbf\x4c\xbd\xfc\x26\x0c\xb3\x95\x92\xae\x7b"
		"\x0d\x96\x19\x25\x54\xfc\xd8\x92\xe4\x02\x39\xa9\x6a\x60\x18\x28\x8f\xcb\x2c\xed\x9d\xab\x02\x3b\x9c\x46\x58\x76\x20\x29\x73\x71\x5c\xa7\x52\xce\xa5\x7e\xe0\x5e\x40\x9e\x39\x7b\x26\x00\x6c\xcc\xf9\x00\xca\x55\x87\x4e\xaf\x3e\xcc\xb3\x68\xa7\xbc\xfe\x8c\xb2\x7f\x3f\xa7\x88\x21\xd3\x03\x86\x9a\xad\xce\x8d\x5c\xa0\x3c\x5c\xff\x60\xa0\x7c\x53\xf1\xc7\x1c\x9b\xf2\xce\x61\x18\x45\x2c\x71\xfc\x75\xbf\xca\xb2\x86\xa1\x3d\xe4\xd1\x36\xda\xd6\x3a\xc9\x66\x76\xcd\x25\xb6\xcf\x4e\x37\xd4\xb3\x93\x56\xe3\x09\x87\xf1\xa8"
		"\xf5\xf4\xc5\xe4\x69\xe1\xb5\x0d\xdf\x06\x4e\x47\x1e\xf7\xd0\x98\xfa\x82\x99\x14\x01\x09\x94\x85\xf6\x24\x88\xaf\x50\x14\x25\x16\x5c\x38\x6a\x7f\x8e\x06\x1d\xb2\x7d\xa2\x88\x65\xdd\xbd\x2c\x2a\x73\xb6\x57\x0e\x03\x04\x97\xd4\x7e\x00\xbd\x64\x94\x2c\xcf\x44\xaa\x6b\xad\xca\x86\xee\xaf\xc4\xf7\xe8\x04\xe7\x7e\xcc\xb0\x05\xa6\xb9\xa9\xdc\x16\xc2\x38\xa1\x07\x9d\x4a\x3d\x2e\x21\xb2\x57\x69\xd5\x0d\x62\xb9\x62\x6a\x51\xac\x4a\xf8\xcb\xe2\x02\x08\x0a\xe9\xc6\xe4\x7a\xa9\xc3\xc8\x48\xc2\x9c\x98\xf4\x24\x12\x96\x11"
		"\x52\x1d\xbb\xff\xbd\xcd\x48\xac\x46\x46\x99\x0e\x2b\xdf\x98\x34\x32\xb4\xa1\x4f\x81\xe9\x47\x62\x5f\x32\xec\xa3\x76\x74\xf8\x25\x34\x5c\x60\xaf\x62\x47\x1f\xca\x78\xb9\x08\xf3\xc4\x3a\x72\x0f\xb9\x92\xd3\x7b\xb7\xdb\xa0\x1e\x42\x5c\x75\x91\x75\x45\x84\xc0\x45\x9a\xfd\x79\xc4\xd9\xdf\xad\x62\x39\x57\x7c\x29\x68\x12\x49\x12\xf3\x2a\x3e\x14\x20\xa7\xfe\xee\x70\xfc\x8d\x1b\x82\xb2\xac\x55\xd9\xa8\xa5\xad\x34\x9d\xaf\xad\x0a\x18\xfb\xa7\xba\x1e\xfb\xcf\x97\x47\xfd\xe2\x96\x07\xff\x01\x52\xdb\x82\x44\x96\x8f\xbd"
		"\xa5\xd4\x41\x37\x3a\xa9\xce\x2e\x9f\x58\x67\x55\xc4\x97\xf6\x38\x89\x48\x61\x75\xc1\x17\x98\x6d\x6f\xf8\xf4\x1a\x8e\x2e\x16\x39\x6c\x9e\xc0\xd6\x69\x28\xa4\x9b\xd6\x53\x2e\xaa\x19\xc4\x79\x09\x16\x8c\x7c\xcc\x7c\x90\xe8\x5e\x9e\xed\x1b\xa0\x78\x0c\x13\x67\xf1\x98\xcc\x5e\xea\xb2\x90\x75\xb7\x1b\x2b\xfd\x86\xf1\x4f\x83\x0e\xcc\x22\x3e\xe0\xd4\xa4\x3d\xb0\x4a\xe3\xe6\x3e\x62\xfa\xf8\x02\xa2\x40\x54\x3e\x2b\xc2\x64\xab\x16\xae\x65\xeb\xed\x50\x8f\x69\xff\xeb\x56\x59\xfb\xdd\xe0\x52\xb1\x11\x99\x63\x1c\xab\xf5"
		"\x38\xe8\x03\x99\xb6\x5a\xbf\x71\x7b\xa8\x0a\x07\x72\x9e\xdf\x49\xbc\x7d\xd2\xc7\x8c\x35\xe9\xf6\x6b\x00\x2a\x17\x19\x65\xd5\xae\x64\xaa\xee\x9d\x56\x4e\x2c\xca\x15\xa9\x7c\xd9\x9c\x4c\x5f\x81\x50\x03\x40\x5f\x09\x45\x81\x02\x21\x4f\x1a\x99\xb8\x79\xda\x83\x78\x44\x41\x54\xf5\x20\xa5\x7c\xf2\x01\xca\x63\xa5\x7a\x3a\x0e\xa8\xa5\x8f\xf8\x23\x91\x9a\xad\x1d\xdd\xd1\x84\x55\x2c\x4f\xfc\xb4\x10\xef\x08\xa4\x59\xc6\xa1\x78\x48\x7b\xfb\x05\x86\x04\xdd\x2f\x88\xcb\xcf\xc7\xed\x0e\xb3\xbb\xdf\x27\x18\xe8\xac\x51\xda"
		"\xbc\xfe\xb8\x8f\xc8\xc2\x34\xc1\x13\xe2\x8b\x7b\xb6\xce\x7a\x15\x35\x19\x84\xa2\xc5\x81\x71\x63\x58\xf3\x08\x88\x6a\xc4\x36\x5c\x4e\x02\x0d\xcc\x40\x2e\xfc\xf2\x3c\x55\x1e\xa0\xc6\xce\x0c\x5c\x3a\xec\xd5\xf2\xad\x47\xd9\xbb\xb5\x73\x31\xfb\x04\x10\x91\x1c\x29\x70\x4b\xf0\x14\x3f\x05\xe1\x02\xa5\xb8\xc0\x39\xb1\x0a\xd8\x27\x40\x4b\xbb\xd1\xc5\x33\x0a\x7e\x88\xda\x04\x23\x2e\xed\xc2\xf5\x55\x81\xb3\xcb\xed\xb6\x8a\x73\xfc\xae\x14\xf0\x38\x62\x5f\xa9\xe0\x78\x8a\x41\x52\x17\x0b\x95\x7c\x9c\x93\xa7\x5f\xa1\xdb"
		"\x90\xd2\xac\xe7\x4c\x73\x72\x6c\x4b\x55\x90\x47\x0d\xda\x44\x4e\x09\x58\xc9\x0f\xdc\x29\x23\xd3\x00\x0b\xe0\x46\x76\xa5\x8e\x84\x2d\xf1\xfe\x0a\x47\x2b\xd5\x63\xb8\x70\x6e\x43\x5a\xd2\x71\xac\x7c\x64\x16\x31\xad\x01\xe3\x96\xc6\x11\x25\x97\x19\x62\x04\xbc\x0c\xb1\xee\x17\x25\x7b\x2a\xe0\x8e\x63\x54\xf4\x42\x13\xcc\xf4\xe8\x93\x13\x8f\xf8\xe8\xfc\xe9\x94\x5b\x0a\x23\x84\x86\x60\x08\x50\x87\x88\x8a\x06\xd6\xbd\x22\xc6\x52\xdc\xe6\x13\x42\xc5\x9e\x88\x5d\xd9\xed\x0f\x38\xe8\x9a\xc8\x16\x5b\x60\x16\xfc\x26\x6a"
		"\x59\x21\xcc\x90\x88\x39\xbc\x42\x9b\xdd\xd2\x2d\x72\xa1\x7e\x6a\x37\xc4\x6c\x6c\x49\xd1\x0c\xeb\x9e\x1c\x7b\x41\x77\xcb\x9e\xf6\xa5\xa6\x7a\x97\x1a\xee\x3b\xcd\x5c\xc9\x8d\xbd\x36\x69\x6c\x10\xf8\xae\x1a\xd8\xa5\x45\xcb\xb2\x0d\x89\x83\x10\x7c\x69\xfa\x85\x51\x32\xde\x97\x3a\x0a\x18\x69\xfe\x86\x46\x2d\xc9\xaf\x9d\xb5\x61\x8c\x0f\x70\x8b\xac\x78\x62\x40\x0a\x2b\xb2\x12\x72\xd1\x7f\x51\xf0\xed\x43\x76\x79\x8a\xfb\x28\x3d\x50\x90\x25\x40\x81\x64\x7b\x57\xf9\x1a\xa3\xea\xdf\x50\x1f\x81\xfb\xc3\x59\x82\x1d\x79"
		"\x50\x34\x34\xec\xff\xb9\xf8\x69\xdc\x85\x18\x62\xae\xd3\xb9\x8a\x32\xb7\x27\x03\xc2\xeb\xda\x8f\xf6\x8e\x98\x69\xcc\xd2\xda\x38\x95\xfa\x11\x4e\xec\x91\x52\x46\xd3\xcf\x6a\xaf\x28\x86\x48\x90\x7c\x52\x67\x0d\x90\xe5\x35\xd5\xdb\x0c\xce\x81\x1b\x84\x96\xc4\x6e\x29\xe5\x0e\xaf\x81\x49\x04\x94\xf1\xe5\x59\x0a\x7a\x40\x8c\xba\x76\x29\xc1\xc1\xac\xde\xf0\xd3\x16\xc8\x26\x21\x78\xfc\xc1\xd9\xf7\xf1\x73\x1c\x19\x0f\x07\x61\xe3\x9f\xf0\x1e\x9a\xe8\x9e\x53\x29\xa3\xaf\xb5\xd6\x96\x3e\x44\x1f\x72\x80\xb2\x06\xfc\xee"
		"\xb2\xd4\x9c\x6a\x06\x9a\x86\x25\xcd\xb0\x4c\x39\x64\x95\xc7\x19\x5d\x4c\x9e\x28\x11\xb7\xe6\xe4\x7f\x45\xd4\x44\xde\xd6\x1e\xf5\x6f\xcf\xe1\xef\x34\xbd\x49\xf9\x74\xc4\xef\x74\xeb\xca\xca\x8d\x33\x96\x58\xc0\x86\x5d\x8f\x2e\x48\x33\xb1\x01\xac\xe3\xbd\x96\xd3\xae\x91\xb5\x3f\x8e\x11\x96\x08\xbb\xf8\x54\x8f\x8f\x4c\x2a\x5e\x13\x88\x3b\xc4\xf8\x9e\x0f\xb1\xed\xc4\x58\xbf\x97\x2b\xdf\x25\x56\x22\x97\x81\xc9\xb9\x4f\x3e\x45\x8f\x6d\x66\x6d\x20\x96\x00\x7d\xfd\xbf\x3d\x8f\x66\x65\x42\x80\xa5\xbd\x55\xe9\x22\xd2"
		"\x33\xcc\xfc\x80\xe8\x76\x99\xfa\x98\xf7\x79\x56\x40\x7a\x91\xd9\x51\x2e\xeb\x1e\xe1\x9b\x39\x2f\x70\xb3\x28\xeb\xf8\x1e\xfc\xa0\x12\x81\xdd\xd9\xa4\xbc\x1b\xda\x65\x3b\xfa\x2e\x18\x1e\x75\xbb\xe3\x13\xc6\x25\x4b\x24\xd4\x96\xba\x90\xe2\x04\xc8\xa7\x54\x99\x54\xbc\xdb\x1c\x69\xb5\x6b\xc4\x7e\x65\x55\x79\x1b\xc9\x96\xdd\xbf\xf9\xf6\x80\x20\xce\x6b\xcb\xe6\xdc\xb4\xe2\x4d\xd0\xa3\x88\x87\x9d\x27\x6a\x99\x27\x8c\x1d\xee\x4b\x9c\x73\x62\xb4\x50\x06\x87\xdc\x68\xfb\x04\x94\x5d\x3f\x3f\x79\x20\xd8\xdb\xa0\x04\x93"
		"\xf5\x4f\xda\x8a\x89\xc0\x8c\xa5\xa6\x61\xa9\x30\xe8\x19\x37\x46\x3d\xef\xea\x92\xce\x9a\x30\x26\xcd\x8b\x9b\xb3\xc9\x39\x7c\x35\x1c\x8e\xd1\xce\x71\xf0\x6b\xb8\xa2\x94\x1e\x81\x25\x84\xdf\xc6\x61\x9c\x34\x9e\xd8\x65\x4e\x5b\x9f\xde\x94\x91\x1e\xe9\xf7\x01\x07\xaa\xf2\xf1\xdf\x37\x75\x5c\xf2\xdf\x6c\x99\x50\x74\x21\x7a\x29\x24\x4b\xbf\x60\x12\x8d\x39\xc2\x0c\xd0\x02\x6a\x74\x9d\x1c\xb8\xae\x2d\x95\x42\xcb\xcf\xad\xc0\xd7\x8d\x48\x35\x67\xd9\x96\x79\xb8\xcb\xeb\xda\x5e\x0c\x78\x2c\xb5\x40\xbf\x62\x4e\xbd\xbc"
		"\x3c\xb2\x8e\xa1\x9a\x87\xc5\xd2\xa7\x05\x0c\x05\xf7\xca\xef\x86\xaf\x5c\xac\x1d\xd6\x9a\x22\xd4\x71\xac\xc3\xf9\x9e\xa6\x2c\xe9\xcf\xab\x10\xc8\xde\x27\xac\x21\x21\x14\x57\xe7\xc9\x41\x97\x40\x6e\xc5\xa2\x01\x03\x0b\xc6\xb2\xb9\x09\x07\xc2\x5b\x42\x68\x24\x3a\x3c\x5d\x0e\xc9\x27\x1a\x77\xa8\x8e\x5a\xc2\x9e\x3d\xd8\xc2\x5f\xf4\x9e\xd9\xdb\xa7\x70\x7f\x38\x0a\x9b\x54\xce\x8b\xb0\x89\xe7\xc4\xdf\x9e\xfe\xea\x37\x24\xb9\xa6\xe5\x53\x9f\xc2\x08\x61\xaa\x1a\x50\xf2\xb7\xb4\xb8\xdc\x18\xd9\xdf\x51\xce\x44\xca\x7c"
		"\x00\x2c\x3e\x75\x6f\xc5\x1f\x5f\xdf\x46\x40\xc5\x54\xd4\x56\x79\x99\xac\xaa\xf1\xac\x73\xfe\x18\x37\xf0\xfe\x45\x02\x51\x68\xd5\xf2\x53\x07\x79\xc9\x65\xea\x0d\x9c\x49\x30\xc1\x80\x82\xa5\xe5\x08\xda\xd7\xda\x35\xf7\x68\x92\xf4\x25\x14\x54\xf6\xbe\x3b\x3b\x3f\x7b\x1b\x6b\xe0\x1e\xa1\xea\xe6\x1e\xa1\xda\x83\xa8\x39\x04\xdf\x2e\x18\xd1\x12\xc4\x60\x2b\x52\xec\xd6\x0d\xf2\x1b\x37\x72\xa2\xfe\xfe\x02\xb5\x6b\x6d\x48\x74\x62\xf6\x23\xf8\x63\xd8\x23\x71\xf4\xc1\xd1\x56\xab\xf5\x10\xe8\x06\x97\x37\xa7\x91\x21\xbc"
		"\x19\x90\xe6\x5d\xb6\x60\x3a\xa3\x78\xe3\x64\x90\xa0\x0e\x46\x18\xc5\x3b\x6f\x83\x9d\x57\x7a\x3b\x56\x66\x2d\x00\x8b\x4a\xfe\x09\x75\x55\x9c\xe8\x2a\x6c\x7f\xfa\x55\xf7\xdd\xf8\x1d\x53\x63\xcf\x1f\x30\x91\x05\x74\x20\xe4\x0d\x60\x49\x96\x77\x03\x66\x8a\x67\x8b\x40\x80\xf1\x70\x82\x24\x2c\x8f\x1e\xe4\xbb\x51\xe3\x76\x98\x26\xed\xc7\x2f\xa4\x0d\x09\x2d\xa6\x15\x0d\xde\xcd\x27\xa1\x5e\x58\x02\x92\xb9\xf1\x99\x0f\xed\xa5\xf2\xf9\x5b\x6c\x5d\xa4\x9b\x60\x9a\x9b\xf1\x7e\xd6\xa3\x54\x01\x32\x42\x82\xf0\x60\x1e\xa5"
		"\x77\x1a\x84\x9b\x8f\xc0\xfe\xe5\xe2\x86\x1a\x80\xf7\xd8\x13\x00\xf3\xb3\x4b\x2d\x08\xb6\x38\x46\x47\xf6\xc6\x0b\x66\xa0\x70\x3a\xb3\x6f\xc5\xda\xeb\x5c\x7b\x5d\xc4\xdd\x8d\x61\x63\xc4\xa3\xcd\x5a\xcb\x06\xc6\xea\xe4\xf6\xef\x4c\x5b\x01\x19\x57\xdd\xbf\x72\x7a\x43\x47\x1d\x36\x56\x25\x18\xfc\xb1\x41\x9b\x70\x67\x25\xf7\x4e\xcd\x1b\xcb\xbd\x13\xff\x3a\xae\x50\x0d\xb7\xff\xdd\x49\xa7\x51\xc5\x7c\xa0\xc9\xc1\x08\xc6\xeb\xd4\x85\x8e\xe6\xcd\x1d\x82\xe8\xa8\x5b\xa5\x59\x7d\x41\xfb\x84\xf6\x4f\x26\xd5\x0e\x81\xf1"
		"\x2a\x3a\xf8\x1b\xe8\xe3\x2e\x50\xf2\x2e\xfc\x48\xab\x64\x64\xb3\x92\x40\x21\xf9\x8b\xf6\x89\x6a\xb2\x4d\xb6\x5c\x60\xe7\x2d\xdb\x14\xff\x94\xe1\x96\x25\xe9\x00\x2a\x12\x11\x9d\xdb\x56\x55\xb0\xc0\x71\x59\xd4\x07\x02\xfa\xd1\x85\x67\x68\x42\x0e\x98\x71\x65\xe5\x0f\xe8\x14\x55\xe5\x1d\x97\xba\x3f\x19\xbd\xe2\xec\x70\x2f\x6e\xaa\xb5\xa3\xb3\x89\x9f\x07\xd2\x14\x4a\x2c\xbf\x1b\x1d\xde\xa0\xe1\x51\x24\x5b\xb9\x43\x0c\x3f\x39\x98\x06\x19\xf2\x45\x3d\x3b\x74\x5c\x84\xae\x40\xfb\xdb\xc1\x7e\x91\x52\x9b\x8b\x3a\xd5"
		"\xf3\xaf\x6f\x0d\x89\xd2\x69\x85\x68\xea\x20\xb1\x3c\xd0\x7e\x54\x66\x45\x6d\x05\xbe\xd7\x7d\x31\x31\xd1\x8b\x78\xe9\x74\xcf\x27\x1d\x8c\x16\xf7\x8d\x6d\xb5\x5d\xd8\x4c\xa1\x60\xc0\x9c\x7b\x68\x61\x41\x5d\x44\x4a\x92\x20\xcb\x5b\x2e\x4f\xfd\xa2\x94\x2e\x89\x9c\x1d\x14\x2d\x4c\x58\xfa\x34\xd9\x7c\x4e\x91\xd0\xea\x72\x46\x05\x7c\xdc\xba\xc9\x1e\x8a\x4c\xab\x44\x33\x50\xbb\xae\xf9\x6e\xa2\x1a\x66\xed\x2a\xeb\x1d\x7f\x84\x66\x0b\xd7\x28\x7b\x4c\x71\x6b\x21\xcd\xef\x30\x82\x95\x37\xc1\x44\xbb\xc9\xf4\x4c\x7d\x82"
		"\x59\x41\x48\xaf\xe0\x77\x47\x75\x46\x09\xd5\x67\xb6\x1a\xdf\xa8\x6e\x4d\x39\x26\x47\xef\x53\x1f\xed\x39\x00\x5d\x3c\x46\xd9\xf0\x35\x6c\x69\x3b\xac\xe3\x67\xe3\x3a\x6f\x61\xa5\x59\x49\x48\xfb\x12\xdb\xc9\xf4\x00\x2f\x48\xb5\xc0\x9f\x24\x26\x05\xb1\x96\x35\xfa\xf9\xf4\x10\x6f\x1e\xd9\xd3\xa6\x2b\x3f\xb8\x9e\x07\xb4\x8d\xeb\x88\x53\x22\x2b\x54\x06\x99\x03\x53\xd6\xb9\xf1\xc4\xdb\x9f\xa3\x30\x47\x54\x94\x51\x0f\xc3\xca\xb8\xb3\xe6\x5d\xdb\x1c\x0e\xb8\x8b\x7f\x3b\x4e\xb5\x2e\xcb\xdc\x9d\x86\x88\x90\xdb\x85\x80"
		"\x59\x47\x10\x69\xa7\x2b\xa6\x42\xf5\xa5\x3a\x5c\x9b\x33\x7b\xdd\x35\x66\x20\xb5\x64\x9e\xc3\xc9\x8e\xd7\xfc\x34\x4b\xe0\x7e\xc9\xb0\x89\xba\xd0\xa1\x9e\x5c\x95\x17\x4e\x1f\xec\x53\x30\xbc\xa0\x64\x57\xe1\xe0\x52\x80\xeb\x90\xfe\x31\x7b\xe1\xe0\x4e\x0e\x1e\x7e\xfa\xfc\x51\xb4\xda\x93\xe3\xa9\x59\xe9\x67\x1b\x1f\xba\x43\x47\x83\x10\x3f\xc1\x1a\x95\x2a\x95\x9e\x97\x69\x1d\x77\xd8\xf8\xc9\xcb\x46\x8c\x3d\xc6\xe5\x55\xfd\x00\xcc\xd6\x35\x70\xc6\xad\x7d\x60\xf0\x17\x2e\x23\xe2\x56\x3f\xc9\x6b\x6a\x67\xa5\xd6\xa0"
		"\x5f\xd0\xd4\xde\x3f\x85\xdf\xb3\xdc\x84\x95\x02\xc4\x84\xf9\xc7\x13\x0c\xba\xe2\xf9\xb5\x5d\x7b\xac\x2a\x1d\x19\x4a\xd7\x65\xf9\x95\x40\x04\x70\xa1\x45\x37\x3f\x60\x67\x01\x3a\x7e\x9b\x94\xe4\x41\x7e\x85\xf3\x6b\x38\x5f\xca\xb8\x70\x45\xce\x20\xe6\x33\xf5\xb3\x17\x58\x65\xef\xc8\xf4\xd5\xcf\xd5\x64\xe1\xfe\xf5\x0c\xe8\x93\x4a\x3e\x39\x15\x7f\x6c\xb2\x8a\xdd\xbd\x15\x96\x5c\x1b\x50\x1b\x43\xb2\x83\xc0\xae\xdb\xc6\x9a\xf9\xf0\x32\x6c\xf1\x07\x7f\x2a\x38\x50\x7a\x78\x58\x78\x02\x94\xb5\x5e\xff\x96\xa0\xf1\x67"
		"\x20\x1c\x1e\x4a\xb1\x48\xe8\x29\x44\x4a\x82\x04\x2d\xe9\x7e\x82\xa3\x4b\x7a\x93\xe8\x97\xbe\xd4\x8f\x5e\xa3\x36\xc1\x3c\xbb\xb4\x51\x4c\xf3\x5c\xa2\xf4\x06\xcf\x96\x67\x59\x03\x17\x54\x95\xba\x66\xc9\x38\xb8\x50\x94\x2e\x94\xdc\xb4\x59\x1d\x62\xc1\x5a\xb6\x12\x6f\x0a\xf2\x47\x2f\x93\xa3\xef\x7f\xd9\x87\x35\x2a\xb3\x9b\xe4\x84\xb0\x48\x8e\xb3\x16\x72\x2f\x5f\x74\xcf\xd0\x9f\x84\xc3\x1a\xa2\xbf\xef\xf1\x11\xeb\xa0\x08\x08\x07\xd2\xb9\x1e\xc1\x1c\x2d\xb3\x19\xec\x0e\xc8\x41\x58\x74\x66\x8f\x7c\x15\x09\x4c\x2f"
		"\x6e\xf6\x4b\x97\x9c\x79\xd8\x09\x88\x49\xcc\x16\x7e\x95\xe7\xb3\x52\xc6\xf4\x59\x50\xb4\xa0\x63\x3f\x62\x56\x9c\x95\x16\xf1\x45\xde\x22\x57\x9c\xbf\xf8\x42\xa4\x36\xce\x3a\xfc\xb9\x92\xcf\xf8\x11\xad\x5d\xcb\xaf\xcb\x0c\x9a\xb0\xae\xeb\x10\x38\x27\xc5\xa9\x04\x13\x57\xbc\x17\x9b\x9d\x59\xde\xf2\x39\x23\xb4\x57\x57\x47\x68\x5d\x80\x1b\xa8\x24\x98\xe7\xe8\xb0\x9a\x8e\x62\xdf\xcc\xc0\x78\x3b\xfa\xa8\xc4\x74\x7e\x1a\xa5\xb5\x65\x15\x12\xd1\xb5\x95\x34\x66\xa9\x5a\xaf\x04\x87\xfe\x63\x1b\x32\xd4\x82\x53\x9c\xc9"
		"\xa1\x35\xab\x52\x70\x5b\xa6\x33\x17\xd8\xaf\x21\x09\x62\x2c\xb3\x36\x86\xcc\xf0\x0a\x0d\x98\xe3\x1b\x98\xce\xd5\x75\xd1\x04\x2c\x7a\xa1\x54\x8c\xeb\x07\x01\xe2\x74\xba\x24\x03\x98\x94\xab\xda\x76\xe3\x25\xdc\x33\xc0\x11\xd2\xcd\x71\x05\x87\x70\xff\x51\x40\xf5\xc0\xd7\x7e\x8e\xd8\xbb\x4f\x0d\x65\xba\x98\x35\x40\x68\xd3\xe7\x1f\x73\x8e\x37\xfc\xc0\x28\x3c\xff\x3c\xbb\x82\x1c\x13\xf7\x22\x8a\x6a\xba\xa3\x93\xbc\x56\xe2\x3c\xb3\xe4\x63\xd6\x28\xa0\x98\x30\x23\x2c\xce\xb5\x73\xe1\x34\x11\xae\xf1\x3d\xf2\x1d\x9e"
		"\xa8\x96\xaf\x26\x00\x79\xb8\x45\x13\xfb\xcb\x71\x7b\x48\xd0\xfe\xa5\xe1\xc0\x65\xd5\x0c\x13\x14\xb9\x07\x0e\xd3\x62\x29\x70\xdf\x48\xcd\x06\x32\x91\xea\x68\xf9\x2f\x90\xe5\x07\xb5\xbf\xf7\xc9\xed\xfd\x8c\x8a\x54\xeb\x3f\x4f\x52\xaf\xbb\x83\xa1\x48\x1d\x46\xf8\x5e\x9b\x7e\x09\x0b\x2b\x69\x9b\xad\x96\x03\xbd\xdb\xb7\x2d\x6b\x73\x55\x62\x59\x2f\xd3\xfb\xb6\x6a\x97\x09\x43\x2a\xc3\xc3\x7c\x88\xcc\x6e\xbd\x05\x9b\xbc\xb5\x18\x5f\x05\x54\xb4\x26\xa4\x45\x41\x73\xb7\xed\x14\x19\x09\xdc\xc7\x6d\xb8\xc7\xd9\x37\x74"
		"\xea\x17\xec\x60\xe7\x4e\x54\xf5\xd0\x2c\x41\xe4\xf4\x3c\x24\xaf\x21\x7e\x53\x7d\xf8\x6c\xbf\xc8\x57\x39\xa1\x4d\xee\xef\x42\xdc\xe0\x85\x7e\x74\x40\xa6\x87\xa9\xac\xf5\xba\x12\x62\x13\xf2\x27\x1b\x9e\xf7\x9d\x34\xca\xf2\xfe\x39\xc0\xdb\x9e\x62\xd7\xd8\x2c\xdf\x78\xc8\x25\x40\x0b\x59\x19\x7e\xc6\xb8\x86\xc8\x31\xe8\xf2\xaa\xd0\x9c\x5b\x77\x35\x74\x33\xfd\x27\xe7\xbf\xc9\xc2\xf4\x19\xce\x3a\x6b\xe5\xdf\x80\x3e\x39\x54\x9b\xb7\x7c\xfb\x78\x0e\x23\x05\x73\x30\x42\x6c\x1a\xc9\x25\x54\x0b\xc5\x6d\x65\x3c\x89\xb3"
		"\xd7\xe7\xf6\x5d\xa5\xc9\x8e\xf3\x21\xef\x93\x4e\x5f\x51\xae\xe7\xbe\xf0\x71\x5c\x44\xc7\x78\x70\xa4\x4e\x37\xe9\xad\xe7\x0d\xef\x8d\x20\x65\x16\x35\x7d\x64\x42\x75\x8f\xb1\xd7\xb4\xbb\x62\x6b\x7d\xf3\xf4\xe1\xb5\xd0\x5b\x76\x5a\xfd\x6e\xca\x69\x15\xaa\x82\xc2\xc1\x57\xfb\xf9\x63\xf0\x54\x35\x9a\x8a\x20\x4d\x4d\x29\x93\xe9\x8a\x8a\xa9\xca\x40\x9d\xbe\xa5\xdc\x6e\x2c\xbb\xb5\x8e\xfb\xd0\xc4\x2d\x25\x2b\xb9\x21\x05\x4b\x01\x77\x03\xed\xb7\x40\x56\x88\x58\x91\xa4\xd5\xba\xbe\x7b\x1d\xef\x9c\x1b\x5f\xd5\x90\xb0"
		"\xdc\xbf\x88\xc9\x0e\x16\x4b\x74\x70\xa5\x49\xbe\x1e\x53\x9a\x88\x62\x3a\x73\x01\xf8\xa0\xb0\xfb\xb1\x63\xde\xf2\xba\x09\xe6\x42\x36\x8d\xf6\x07\x35\x5d\x2d\x80\x80\x3e\xb8\xc3\xf4\x94\xac\x96\x27\xb4\x08\x4b\x95\xd0\xd6\xf8\x80\x03\x38\x07\x4a\x16\x55\xd0\x11\xb1\xb8\x01\xb7\xcf\x2e\xbc\xcb\x95\x7a\x0e\x87\xe8\x5e\x48\x30\xa6\x30\xab\xc6\x5a\xed\x79\x41\xe9\xfb\xe7\x62\x9d\xbb\x3d\xcf\x7c\x55\xfa\x86\xba\x1c\x63\xb8\x6e\x5e\xb5\x1a\xdf\x52\xc9\x07\x83\x23\xda\xf1\xa9\x4c\xb8\x10\xc6\xa7\xce\x3f\x72\x0f\x90"
		"\x0e\xe7\x7f\xa1\x6d\x79\xd5\xcf\x5b\x4f\xc6\xec\x7b\x9e\xc0\x80\x89\xa1\xeb\x3a\x28\xb4\xc7\xf6\xf3\x99\xf4\xbe\xe0\x58\xd8\xcc\x8f\xea\x29\xd1\x36\x10\x7d\x2e\x19\x22\x7f\xb0\x47\x14\x9b\x85\x7a\xcb\xf3\xb4\xcf\x19\x95\x12\xe9\x00\xe0\x4d\x8e\x13\x99\xa5\x1d\xf2\xde\x7f\x88\x1e\xa0\xdb\x34\x3b\x7d\xa0\x59\xcf\x7a\x3b\x8b\xe7\xf0\x93\xbd\xc9\x39\x8d\x0a\x09\xe1\x2d\x88\xff\x6d\xdc\xbb\xf3\x22\x7f\xfd\xa2\x2c\x3f\xe2\x9b\x60\x00\xde\x77\xe9\xaa\xca\x87\x95\x71\xda\x0f\xcf\xe6\x40\xb7\x73\x06\x22\x81\xad\x2d"
		"\x75\xdb\x8c\xeb\x42\xc3\xd2\x4d\xef\xc5\x84\xa4\x73\x4a\x5d\x25\x92\xdf\x05\xd4\xa8\xec\x05\x64\x21\x5d\xfc\x63\x1d\xbe\x49\xa6\xe2\xc7\x05\x9e\x0b\x56\xba\xc4\x8a\x7e\x3e\xe0\x7b\x9e\x68\x40\x48\x6e\xf6\xab\x83\xfd\x4b\x33\x97\x83\xf6\xa6\x5b\x17\x02\x84\xd0\xcb\xd4\xc1\x01\x2e\xf7\x20\xe4\xf5\x89\x83\x35\x85\xd9\x82\xc3\x48\xf4\x31\x54\xf9\xf9\x08\x50\x51\x0f\x3b\xda\x20\x57\x36\x19\xc8\xa7\x12\x08\xa1\x85\xe4\x8e\x04\x3a\x95\x58\x3a\x8a\x63\xe6\x8b\x00\x9e\x78\xfb\x96\x44\x1f\xc7\xd6\xf6\x33\x71\x1d\xfe"
		"\x0d\x31\x1c\x15\x5d\x07\xf7\x01\x1e\x10\x3e\xb6\xbb\xab\x55\x70\xf7\x31\xe5\x2f\xa0\x2a\x89\xee\x76\x6d\x57\xd3\x50\xf8\x15\x45\xab\x33\x0b\x50\xe2\x10\x74\xd6\xd3\xbb\x2f\x39\x55\xcc\x6d\x75\xcf\xca\xde\x54\x0c\x0d\x6a\xfd\x7f\xbb\x24\xdb\x59\xf0\x37\xfc\x62\x1b\x95\x1c\xb6\x93\xf2\xd6\x32\xdc\xa5\x7f\x4e\xc8\x1c\x13\xd9\xa4\xa1\xe4\xd2\x1a\x9d\xb3\x83\x07\x49\x8b\x79\x82\xb1\x94\xf4\xff\xf8\x3e\x07\xeb\xb3\x9a\xef\xfe\x67\xe7\x14\xd6\x5e\xe9\x17\x37\x4d\x46\xbf\x0a\xcf\x39\x2e\x5d\x19\x23\x24\xf0\xad\x7c"
		"\xb7\x45\xa0\xe7\x47\x1e\xf2\x0b\xa5\xae\xce\x8d\xe4\x7e\x25\x42\x6a\xfd\xa8\x50\x1a\x9a\xef\x5f\xa9\xeb\xc4\x91\x5a\xac\x64\x32\x77\x14\x8b\xc4\x20\xae\x36\x55\x01\x1a\xb6\xed\x38\x2a\x58\x15\xe4\xe9\x9a\x54\xaa\x0a\x46\xd4\xa2\x3c\x0b\x4d\xfa\x9e\x3e\xc8\x20\x42\xb1\xa4\x07\x20\x4d\x27\x0a\xe0\x68\x15\xa2\xdb\x15\x39\xfc\x69\x32\x96\xbd\xe5\x79\xb0\xab\x38\x5a\x0f\x2e\xa5\x00\x1f\xe1\xf2\x59\x55\x2a\x53\xe0\xd6\x2e\x45\xa8\xfc\xf1\x05\xe9\x76\xb6\x76\x9a\x3c\x8a\x92\xd4\x72\x80\x56\x2f\xc3\x03\x7b\xc5\x95"
		"\x8b\x71\x7c\x1a\x53\x52\x03\xfc\xe9\x31\xf8\xa3\x81\x4c\x3f\xe7\xfe\xff\x34\x6a\xce\x5c\x1f\x90\xc3\x28\x27\x62\x69\x2e\x26\xed\xde\xde\x58\x87\x22\x4a\x70\xe1\xc8\xae\xe9\x91\xd3\x3e\xc3\x00\x80\x48\x3f\x1f\x0f\xcc\x39\x96\x58\x08\xd7\x63\xf7\x4d\x90\x00\xe0\x80\x05\x59\x0c\xb3\x53\xde\xf6\xf0\xd1\xa6\xf3\xc3\x50\x57\xb2\xd0\x8d\x69\xab\x44\x86\xd9\x45\x7f\xe4\x32\xca\xc3\xa4\x79\x17\xc6\xfe\xb8\x16\xb0\x07\x00\xb4\x5d\x3f\xa3\xa5\x0a\xbf\x89\xa5\x51\x33\xf1\x0d\xed\x20\xbf\x93\x11\xeb\xe0\x62\x70\x0e\x1a"
		"\x60\xa9\x9b\xde\x8a\xa7\x1c\x3c\x55\x55\x69\x0e\xe6\xbc\xba\x6c\x7e\x59\x72\x0c\x46\x1c\x58\x94\x1b\x0b\x3f\x6f\xd7\xc2\x63\x69\x88\xa7\xb3\x45\x9c\x48\xc1\x7f\x7c\x30\xbc\x48\x88\x46\x82\x67\x65\xec\x3c\xfe\x3d\x5f\x56\xa1\x15\x9d\xaa\x97\x46\x6d\xe9\x7d\xfd\x11\xb0\x96\xed\x6f\x4e\x20\x3b\xee\x2a\x27\x6b\x62\xf8\x67\x74\x9f\xcc\x34\xaa\x3c\x4b\x80\xe5\x40\xf5\xcb\x48\x26\x8c\x0d\xf4\x84\x88\x0b\x4b\xd3\xe0\xb5\xac\x53\x28\xb1\x67\xd2\xbc\x49\x15\xee\x48\x35\xf9\xd5\x64\x6a\x4e\x9b\x96\x11\xcf\xf8\xa8\x87"
		"\xa4\xa6\xb7\x55\xb9\xf1\xc6\x8e\xf8\x66\x3a\x2c\x85\xf6\x88\x25\xa4\x22\x80\x34\x92\xa7\xe4\x1f\x96\xcb\x00\xa4\xf5\xb4\x9f\x09\x2b\x05\x56\xd9\x3c\x7c\xd6\x1f\xde\xa1\xba\x13\xaf\x93\x0e\xce\x28\xc2\x5d\x14\xe9\x21\xb4\x63\xb3\xff\x9d\xce\x12\xc4\xf5\xda\xdf\x30\x6a\x56\xda\x61\x66\x44\x75\xac\x5b\x91\xf5\xac\x99\x2f\xe8\x1d\xa5\x4c\x1d\x52\xf6\x75\xe9\x12\x53\x15\xb7\x62\x41\x21\x1e\xf5\xf4\x9a\xf2\x33\xa2\x0f\x63\x78\xc4\x9c\x5d\x18\x2b\xe2\x37\x4f\xd2\xae\xfe\x65\x33\x21\x63\x4e\x80\x72\x6e\xc7\xc9\x03"
		"\xdc\x52\xb7\x65\x09\x2e\xee\x71\xb8\xa5\xa4\x98\x30\x7d\xfd\x67\x12\x87\x40\xd4\xec\xfc\x27\x94\x0b\xa3\x34\x07\xe8\x2c\x13\xee\x71\xbf\x94\x48\x2e\x0e\x6a\xb8\x89\xba\x25\x73\x22\xb5\xf0\xe0\x26\x94\x21\x48\xf1\x57\x9f\x06\xae\x74\xa6\xfc\xc3\xc6\xbe\x93\xf2\xe8\x02\xf9\x10\x5c\x01\x77\x38\xa4\x84\xad\x3d\x78\x79\xb4\x1d\xff\x8a\x62\x82\x1f\xcf\x11\x8e\x6b\x52\x2a\x81\xe8\x25\x80\x4f\x51\x72\xa3\x45\xe8\xcd\x1c\x9b\x89\x5e\x70\xbd\x94\x3d\xe2\xe3\x7e\x2d\x16\x29\x84\x96\x07\x26\x10\xd2\x0b\x7e\x46\xd0\x70"
		"\xfb\x2d\x6f\x3f\xc0\x52\xaa\xed\x63\x8a\xdd\x51\x55\xd3\x2b\x5f\x98\x7b\x24\xc6\xd6\x7a\x61\x05\x31\x56\x59\x36\x9c\x49\x65\xd9\x96\xf1\xbb\x81\xd6\x90\x26\x94\x55\x5e\x30\x2c\x92\x2d\x66\xd3\x37\xb2\xa0\x5e\xf9\x00\xad\x2a\x39\xd8\xfb\xd2\x9c\x6e\xb4\xf5\x37\xe9\x74\x13\x57\xba\xaa\xfc\xb9\x12\xa1\xd2\x32\x88\x04\x74\xdc\xf4\x43\x4b\x72\x62\xae\x2f\x5f\xd0\xd9\x60\x91\x57\xc0\xb9\xc5\xa2\x8d\x26\x0d\x89\x8e\x8f\x5d\x1c\xd1\x24\x6e\x7e\xd8\xb3\x2a\xb6\xf9\x12\x36\x5a\x97\x2b\xfb\xec\x1c\x52\x12\x93\x29\x12"
		"\x70\xc6\x4c\x17\x04\xae\x48\xd6\x08\x6b\x12\xb0\x7e\xb5\x09\x3c\xa0\x1f\x34\x9c\x1e\xf1\xfd\xd2\x7e\x6d\x3a\x85\x48\x57\x0b\x7f\x09\x11\x5e\x37\xbc\x82\xdf\x8d\x10\xab\xa4\x21\xa9\x62\xc5\x1b\x31\x6a\x39\x8d\x62\xb2\xeb\x91\x4c\x38\x8a\xda\x82\x86\xd4\x63\x55\x72\xff\xa4\xce\x6f\xb5\xd5\x16\xff\xcd\x4c\xd2\x68\xa7\x42\x31\xa5\xbc\x52\xb7\xd1\x12\x85\x1f\x38\x48\x09\x59\x63\xbd\x08\xca\xeb\x6a\x66\xf0\x60\x4c\xc2\xaf\xba\xf9\x8d\xb5\x57\x0d\x35\xc4\x66\x52\x00\x75\x46\xc5\x65\xa3\xc3\x37\x3b\x1d\x98\x68\x68"
		"\xdd\x2c\x94\x15\x6e\x8b\x78\x68\x55\xc9\x1a\xbf\x42\x65\x22\x95\xc1\x2e\x91\xb5\x72\xf7\xe0\x49\x6a\x35\x58\xda\xc9\xd2\xca\xcd\x77\xa9\xfc\x07\xb5\xef\x12\xca\xe9\xd4\x01\x97\xf2\xf4\x4a\x50\xd0\xc6\xc9\x29\x53\x18\xc2\x5c\x74\x5d\x23\xa1\x50\xe1\xea\xd1\x64\x1a\xbc\xf0\xf7\x1d\xb0\xfd\xac\xaf\x2b\xf4\x72\x7a\x64\x4d\x05\x05\x49\x8a\xf0\xae\xc6\xc6\xaf\x57\x25\xf2\xa6\x90\x43\x1d\x0e\x3a\xb8\x17\xaa\xea\xe3\x23\x23\x1d\x7f\x5a\x41\xd5\x01\xb7\x14\x48\xba\x34\xee\x23\xd6\xe8\xbf\x68\xa6\x21\x82\xa3\xad\x11"
		"\x1a\x27\x8e\xbb\x32\x05\x51\xad\x3e\xc9\x4a\x5d\x2b\xa1\x2c\x11\x18\x8e\x3f\xa4\x19\x99\x8d\x0b\x9e\x24\x57\xe4\xaf\xc3\x92\x0e\x44\x9b\x88\xd0\x69\xbc\x8d\x9a\x00\x6b\x90\xb3\x49\x35\xe0\x3b\xa2\xbb\xb4\x66\xbf\xf8\xa6\xb5\x8e\x18\xb0\x10\xba\xb0\x10\x61\xa2\xd1\x21\x28\xb8\x00\xa6\x83\x3d\xdc\xb8\x9b\x6e\x01\xcc\x76\xb9\x9e\x39\xae\xca\xae\xd4\x21\x0b\x44\xc0\xa6\x9b\x70\x2f\xf2\x1a\x36\xa0\x61\x8d\x45\x12\x74\x53\x09\x85\x52\x82\xa7\xd0\xa9\xd2\x0d\xd9\xf7\x9c\x8a\x80\xd4\x5a\x18\x7e\x8e\x71\xf5\x70\x61"
		"\xdf\x7e\xec\xf6\x93\xc0\xc0\x49\x80\xc3\xf5\x13\xa8\xaa\xe3\x21\x23\x30\x20\x12\x88\xbf\x1a\x7b\xc9\x20\x20\x7c\xa9\x84\xfb\x9c\x43\x0b\x09\xbd\x84\x65\xe6\x7e\x4e\x95\xbf\xc7\x0f\x8b\x6d\x55\x24\x96\x95\xa9\x59\x72\x73\x95\xb9\xff\x98\x26\x58\x14\x64\xab\x65\x3f\x5d\xa6\xd5\xec\x63\x44\x15\x4c\x6e\x13\x1f\x4c\x31\x8b\xe7\xcb\xa5\x62\x8b\xc1\x57\x5d\x5c\x0e\x95\x5c\x2b\xf4\x94\x4b\xd5\x19\xb4\xc9\xf3\x1e\x79\xdb\xb5\x7b\x5a\x71\x78\x9c\x1f\x92\x61\xd8\xb6\x33\x0f\xf7\x9a\x7e\x52\x03\x08\x84\x3e\x4a\x92\x9f"
		"\xa1\xde\x24\xb9\x9d\x6e\xd2\xa3\x33\x9a\xa0\x68\xff\x19\xe7\x5a\x3c\xc3\xcb\x21\x57\xf4\xf2\x60\x60\xfa\xf8\xae\x23\xd2\x0c\x4b\x2c\x8a\x5b\x87\x1f\xbc\xd6\x73\x0e\x06\x68\xdd\xf2\x5f\xcc\xec\x12\x0e\x78\xf6\x60\x1a\x91\x00\xe2\xac\x0c\x9f\xc5\xdb\x63\xc3\x3a\xae\x0c\x81\xe9\x67\x13\x6f\xcc\x00\x1f\xb2\x79\xd0\xf0\x1f\x81\xb0\x77\x6e\xb2\xa1\x05\xef\x1f\x20\xed\xab\x53\x3d\xff\x73\x31\x8d\xc2\xbd\x53\xb6\x67\x37\xbe\x7f\xb1\x78\x5b\xfb\xbe\xcd\x8c\x51\x67\x8b\x83\x2f\x72\x40\x44\xaf\x41\x22\xaf\xb0\xc4\xf4"
		"\x3a\xff\xf1\xe2\x48\x59\xef\xaf\xb7\xba\xd2\xaa\x42\x69\x91\x6c\x76\xdd\x18\x8a\x51\x9d\xce\xb6\x28\x01\x41\x32\x48\xbb\x5c\xe4\xb3\xee\xf7\x34\xcc\x4f\x73\x5b\x82\xf8\xc8\xb0\xa4\xbc\x55\x24\xb2\x84\xec\x7c\xf6\xef\xb2\x4c\x80\x4a\x22\x05\xe9\x66\x9b\x94\x73\xe8\x33\xc8\x41\x88\x09\x9d\x65\x65\x98\x27\x46\x07\xd0\xe5\xb3\xa8\xb2\x5f\x39\x83\xec\x8d\x67\xc6\x47\x07\x86\x01\x7f\x0e\x5d\xdf\x68\x9a\x6b\x7e\x41\x6b\x60\xcc\x40\x22\x47\xa5\x92\x05\xa1\xdf\x50\x5f\xb6\x92\x2b\xdb\x77\x86\x6c\xa8\xbd\xe4\x9f\xf0"
		"\xde\x02\x46\x0e\x41\x89\xc0\x1f\x08\xb6\xd9\x78\x7a\x6e\x92\x06\x7b\x0c\xbd\x3e\x70\xd9\x70\x9f\x64\x55\xfb\xfa\x11\x9e\x14\x19\xa8\x03\x0e\x9c\xc2\x0e\xde\x4d\x82\x0c\x53\xcf\x58\x69\xb0\x60\x54\x41\x91\x91\x50\x80\x12\x64\x03\x09\x72\x51\x6b\x21\x19\x8d\xc3\x3d\x72\x14\xd4\x9f\xa7\xed\xa1\x59\x91\x85\xd9\x4b\xc1\xb2\xc3\xe9\xfd\x11\xa5\x0e\x02\x48\x85\xd9\x0a\xf8\x9b\x81\x20\x09\xb9\xf0\x40\x8c\xc6\x8e\xf9\xc3\x8a\xbf\x12\x62\xae\x07\xb3\x8a\x0b\xe0\x0b\x30\xb4\xb7\x0d\xb7\x0e\x45\xc3\x1d\x21\xc7\xbb\xa9"
		"\x12\x6b\x56\x6b\xc6\x3a\x05\x50\x4d\x54\x4e\xa5\x28\x94\x72\x5c\x43\x8c\xaf\x6a\xc8\x9b\xf9\xf8\x79\xb3\xad\xed\x20\xd2\xa0\x76\x7b\x3b\xbb\xc6\x33\xbc\xa2\xe4\x5b\x36\x33\xe9\x0b\x85\x11\xba\xb2\x7b\x5f\xae\x65\xf1\x2e\x34\x88\x26\xd5\x8b\x1f\x38\xf4\x89\xc4\x84\xa9\x9a\xd3\x8d\x38\x0f\x62\xd0\x19\x1c\xce\x0f\x3a\x08\x90\x5d\x9d\xa5\x55\xdb\xf1\x92\xb7\x2f\xd6\x6e\x8c\x69\x12\x13\x7c\xae\x48\x92\x20\xeb\xed\xf2\x95\x68\x98\xcd\x11\x85\x93\x63\x3b\x1b\x4a\x21\x00\x06\xca\x4b\x35\x49\x5c\xb9\x51\x89\x1b\x7a"
		"\x10\xc7\x54\xb3\x28\x10\x35\xc1\x7d\x60\x8a\xb5\xd0\xfc\x2d\x69\xde\x0e\xef\x67\x0e\x3c\x92\x58\x42\x59\xbd\xe9\xba\xfa\x55\xc6\x2a\x61\x1e\x3b\x10\xe7\x34\x85\x78\x33\xa6\x97\xe6\xd8\x78\x64\xea\x1f\x56\x99\xa1\x75\x4e\xe6\x08\x8e\x33\xd3\x56\xa9\x38\x3f\xb7\x66\x23\x44\xb1\x44\xed\xd6\x43\x7f\xee\x03\x70\xbe\xb3\x48\xf2\xf0\xb6\xd6\x03\x2e\x3e\x1f\xb4\x16\xc5\x93\x7a\xef\x54\x23\x83\x6d\x95\x1e\x18\xb3\x40\x32\x4f\xdc\x9b\xc2\xa5\x33\xa2\x68\xcb\xf2\xc9\xa5\xf9\x0c\xff\x6f\xad\x18\x05\x56\xbf\x5e\x6a\xd3"
		"\x0b\xaa\x50\x3e\x11\x17\xcc\xfd\x14\x58\x65\xfd\x60\x29\xfc\x33\x43\xc2\xfa\x96\xff\x53\x26\xdb\x14\x9a\x01\xd7\xc6\xad\xa3\xf0\x13\x73\x15\xd7\xb1\x92\xf4\xde\x22\x86\xc9\xce\x9d\x7e\x80\x09\x9e\xe1\xfb\xa4\xc2\x90\x1f\xa4\x3f\xd9\x11\x11\xa9\x47\xa2\x95\x1b\x21\x68\xb4\x5f\x67\xce\x0d\xbd\xfa\xd8\xca\x3e\x37\x09\x40\x91\x26\xed\x30\x79\xea\xd4\xda\xdb\x17\xe4\xb5\x3d\x3f\xe0\x6e\x73\x44\xea\x56\xc6\x76\xc7\x99\x4e\x22\xe5\x7f\x34\xcd\x18\xf0\xb2\x0f\xac\x72\x0c\xb4\x29\x75\x18\x93\xc1\x8c\xa4\xdb\x6c\x1a"
		"\x62\x55\xc2\xf1\x2e\xf5\x23\xda\x7a\x17\xd9\x0a\xe7\xb3\x57\xd2\xab\x9a\x09\xc1\x8e\xaa\xf5\xe3\xe3\xe8\x0c\x74\xb3\x43\xb3\xe5\x37\x63\x0f\xbb\x81\xeb\x6d\x36\xa4\x96\x12\x28\xcf\xd1\xd5\x62\x0d\x8d\xa1\xd3\xdf\xc0\x33\x17\x22\x79\x09\x32\x45\xb1\xdf\xe4\xdc\x44\x68\x48\xfd\xfa\x68\x48\x21\x2d\x28\x41\xeb\xb2\x98\x44\xb7\x41\x25\x96\xfe\x83\x0f\x49\x1d\xe6\xce\xce\x66\x8a\x15\x86\xad\x60\xb4\xc6\xc0\xdc\x13\xf4\x76\x3e\x3a\x35\x7b\xb5\x81\xa0\x8b\x19\xe8\xe4\x25\xc9\x60\x5e\xf8\xae\xae\x1a\x5a\xd4\x00\x42"
		"\x8b\x8e\xca\xb0\x7f\xa0\x21\x1e\xbe\xe2\x64\x03\xea\xd8\x70\x34\xdd\xd3\xc5\xcc\xfe\xee\x5e\x85\x55\x13\xb2\x85\x90\x26\xe4\x85\xe0\x94\x10\x2b\x43\x8b\xc6\xc2\x49\xac\x29\x3e\xcd\x9e\xe9\x71\x1e\x1c\xe3\x65\x6c\xdb\xce\x46\x27\xbd\x1d\xce\x86\x7a\x03\x65\x94\x24\xd8\x51\xad\x2a\xb1\xd6\xe3\x3a\x02\xae\x60\x60\x23\xa7\x84\x93\xf1\x7f\x28\x14\xcb\xef\x1e\xb7\xd8\x93\xe6\xf6\x63\x14\xa8\x49\x53\xff\x04\x2c\x2c\x20\x56\xcf\xa3\xf9\xfd\xfd\x9d\x53\xd6\xe1\xd2\x58\xbb\x61\xf3\xf7\xf2\xc6\x2f\x58\xe3\x95\x41\x15"
		"\xf7\xa8\x85\x93\x2e\x36\x43\x37\x72\x6d\x6e\x07\xe3\x27\xa2\x11\x7c\xbc\x8d\x77\xd5\x20\x1d\x5f\x31\x79\xac\xb7\xac\x7c\x52\x68\x1f\xef\x45\x21\x10\xc1\x0a\xc8\x5b\x33\x1a\x47\x10\x00\xf9\x6b\xdd\x60\xae\x3c\x97\x3b\x9d\x4f\x62\x7b\xe3\x32\xbf\x45\x16\x63\x14\x30\x23\x1f\xdb\x99\x6b\xbc\x83\xed\x70\x0f\xab\xd8\x91\xb6\xe9\xae\x80\xb0\x0c\xb7\xf6\xdf\x43\xc3\x2a\x4d\xa4\x88\x0e\xf0\xb2\x12\x2a\xf0\x7a\xa9\xee\xdc\x7c\x03\x21\xb4\xdb\xf0\x5e\x2c\x9f\x1f\xd1\x8e\x33\x45\x70\x80\xcc\xac\x61\x2b\xe0\x5e\x30\x1d"
		"\xf9\x38\xd2\x2c\x83\x13\x7e\xa6\xa1\xab\xc5\xb4\xe7\xf0\x67\x88\xe8\xae\x4e\xc0\xb7\xd4\x9b\xfb\x36\xf5\x7f\x02\x54\x90\x50\xf7\x3d\xad\xb1\xcb\x7d\xef\xfd\xe6\x16\xe5\xd0\xe9\xba\x8f\xdc\x14\x97\x61\x78\xbf\x78\x95\xc4\x11\x19\xbc\x21\x3b\xdf\x3a\xea\x0d\xa2\x1f\xe5\x08\x92\x45\x0e\xcc\xdc\xbb\xe9\x71\x4c\x69\x58\x3f\x07\x6d\x16\x7e\xb9\xe6\xe6\x64\x34\x05\xf7\x6f\xf6\x2b\x2d\x4c\x97\x5e\x52\x59\x4a\x94\xb8\x47\x18\xce\x85\x1c\x29\xc2\x4c\x31\xc0\x20\x0f\x3c\x61\xf2\x2e\x87\xf3\x55\x2a\xd0\x9c\x57\x02\x4e"
		"\x8f\xcd\x2d\xee\x79\x88\x01\x53\xb4\x13\x50\x9c\x74\xdd\xb6\x4a\x79\x0d\x20\x48\x97\x81\xdd\x5f\xe9\x7f\x8c\xd8\x26\x27\x71\x10\x99\x2b\xb0\xa3\x0a\x4a\x72\x87\xd3\xb0\x33\xe0\xc9\xfa\xae\x6d\x7d\xde\xee\x07\x8e\x9f\xe9\x9c\xfe\xc2\x03\xfd\xb8\x6f\x3c\x81\x52\x0e\x85\xa1\x57\x80\xad\x1e\x93\x53\x58\xb8\xf0\x77\xca\x41\x60\x32\x13\xbb\xda\xbd\xcd\x5e\xf3\x0f\x20\x25\xe7\x39\xb6\xbf\xee\xb4\x6d\x17\xd2\xa9\xc4\xf7\xaa\x8f\x21\xe4\xa8\x34\x4f\x19\x81\xa1\x4a\x0e\xad\xfc\x6c\xa8\x97\xf5\x6e\xe0\x60\x16\x54\xc5"
		"\x42\x04\x17\x34\xed\x99\xcd\x8a\xc8\x36\x85\xa8\x20\xaa\x13\xbe\xa9\x8d\x0a\xe0\xe9\x7b\xa2\xde\xe2\x1d\x6f\x51\x0d\xae\x64\x0e\x9d\x84\x0e\xdf\xf4\xb2\x56\x3e\x8d\x8f\x94\x36\x8f\x7b\xc7\x45\x76\x95\x76\x25\x16\x2e\xb0\x0e\x71\x89\x0d\x9b\xe9\x5e\x60\x81\x55\x3e\x32\x8a\xc8\xf2\xd9\xeb\x14\x97\x90\x18\xd7\xf9\x6d\x1f\x49\xb7\x25\x48\x04\x05\x67\xe0\x99\x53\x4c\x5a\x27\xfc\xd7\x54\x1f\x90\x4e\x20\x10\xfa\xa5\x74\xa7\xe8\x33\xcc\x79\xc6\x0a\xf5\x71\xce\x37\x8f\xab\xdf\x26\xc9\x97\xd4\x01\x6c\xbc\xfb\x6f\xa6"
		"\x5b\x1e\xc3\x62\x57\x8d\x79\xf9\x50\xf8\xc3\x14\x25\x11\xcd\xda\xec\xeb\x71\xed\x63\x43\x42\x17\xde\x95\x87\x05\xbd\x60\x8d\x76\x7a\x9a\x6a\xeb\xcd\x23\xdb\x09\xfb\x0d\x68\x4b\xcf\xfa\xd5\xe6\x01\xc0\xe7\x27\x2c\x61\x11\xf2\x07\x9a\x56\x5d\x8d\x04\x29\x21\xdd\xb0\xec\x8e\x3c\xa8\x7a\xcd\xd7\x17\x95\x79\x55\xa8\x49\x2a\x67\xd7\xfc\xad\xfe\xa7\xac\xe4\x70\x01\x11\x8b\x33\xe9\x76\x11\x17\xda\x26\xe7\x0b\xe2\x81\xd8\x43\x64\xf0\xe6\x26\x28\x4d\xbc\xae\xaf\x0d\x61\xa1\xf6\x84\xb0\xad\xa5\xaf\xdf\x41\x44\x09\x96"
		"\xb4\x4e\x48\x5e\x3a\x2c\xde\x46\x1c\x3b\xad\xd6\x19\x83\xa1\xa7\x97\xed\xc3\x1a\x8f\xa6\x68\x62\xdc\x73\x8d\xf5\x6a\x81\x68\x18\x76\xb5\x65\x1d\x1a\xe8\xfa\x13\x9a\x0c\xc9\xc9\x68\x45\x4d\x34\x64\x07\x8e\xe3\x86\xfe\x62\x7b\x49\xa5\x97\x7c\xe5\x81\x53\xf7\x84\x35\x1b\x8f\x0e\x98\x8e\x50\x4b\x58\xe5\xe1\x2e\xe4\xfd\xeb\xcc\xb5\xf4\xd3\xd9\xae\x28\x26\x0f\xd8\xf2\xa1\x97\x93\x0d\xf6\xc3\xd0\x08\xd8\x9b\xb2\x94\xe7\xe1\xd2\xb4\x14\x26\x6f\x2a\x07\x91\x3e\x10\x6d\x75\x3b\x83\x9d\xe2\x84\xf1\xd9\xa5\x3e\xa7\x1c"
		"\x51\x98\xd7\x4e\x26\x40\x64\xe6\x72\xfb\x94\x16\x31\xf6\x2c\x06\xdf\x80\x28\x78\xad\x0a\x14\xc8\x83\xbf\x55\xc3\x42\x51\x29\xe5\x75\xcd\xc5\xb2\x7a\x0e\x8f\x15\xcb\x56\xd0\x0d\x3f\x3f\x06\x1b\x60\x64\x4a\xa4\x06\x61\x7e\xde\x55\x8b\xed\x9a\x2f\x01\x82\x86\x11\x0c\x01\x62\x56\x80\x12\x13\x51\x0e\x3b\xea\xe5\x84\x8b\xa5\x35\x03\x47\x99\xe2\x70\x16\xcd\x02\xc9\xa9\x66\x27\x9a\xd0\xeb\x89\xb2\x42\xff\x8e\x4b\x7f\xd6\xbc\x7b\x85\x40\x19\xed\x08\xac\xc9\x55\x05\xc6\x4c\xac\x5c\x05\x2e\xd1\xc5\x54\x85\x0d\x5f\x69"
		"\x0f\x08\xc0\x4d\x2f\x26\xa5\x9e\xe1\xd0\x3c\xa4\x0a\xbe\x53\xd0\xa2\xfb\x1f\x30\x5e\x4f\x45\xf8\x24\x29\xbe\x5e\xea\xb4\x7f\x75\x0c\x85\x8d\x94\x84\x00\x1b\x40\x74\x7d\xa7\xe0\x7a\xe6\xdf\xe6\xd4\xec\x2a\xcd\xd0\x9f\xb7\xaa\x55\x1b\xc5\x97\x1b\x34\x35\xfd\xbb\x6c\xa2\x95\xdf\xff\xd7\x72\x76\x78\xb1\x78\x7b\xfa\x32\x46\x52\x26\xfc\xaa\x1d\xd8\x5a\x0d\xf9\xae\x3e\x69\x5a\x2b\x68\x6d\x70\xc4\x5d\xd4\xaa\x6f\x75\x71\xea\x97\xe0\xe3\x07\x6d\xab\x40\x37\x66\x8a\x76\xcd\x14\xc1\x40\x06\xbb\x1b\x90\x93\x05\x0c\xbb"
		"\xba\xcc\xfa\xc0\x6e\x43\x64\x2a\x72\x1e\x4a\xc3\x90\xd3\x46\x5f\xe1\x51\x02\xbc\xcf\x16\x84\x48\x3f\xdf\x2a\x89\x37\x45\xb0\xc8\xaa\x44\x8a\xb5\xf5\x4d\x15\x69\x81\xdf\x97\x96\xed\x3d\x5e\x9a\x83\xb9\xda\x59\x04\x5f\xc3\xb8\xe1\xfa\x61\xfb\x85\xb5\xa2\xfc\x82\x1a\xf7\x3e\x9f\xbe\xf9\x8e\x7d\xcf\x03\x08\xe7\x86\xed\xd7\xfa\xea\x31\x1a\x08\x45\x96\x5c\x84\x26\x49\x2d\xf0\x91\xf4\xdb\xee\x63\x75\x6d\x69\x3a\x9e\x5a\x42\xcb\x46\xc7\x1d\x47\x56\xdc\xe7\x72\x83\x6f\x2f\x65\x4f\x81\x56\xc0\x28\x3a\x0f\x72\xc0\x6e"
		"\x62\xe5\xb4\xb3\x4e\x7f\xd0\x28\x70\x7b\x5b\x51\xd2\x9f\xef\xe9\x32\xfb\x55\xa2\x8d\x7c\xd9\x0e\x03\x5d\xe6\xc6\xcb\xaa\x4b\xb8\x9f\x02\xab\x9a\xeb\xe9\x1e\x0c\x40\x4c\x35\x77\x10\xee\x52\x15\x74\xd6\xd0\x87\x35\xf8\xa8\x9b\x46\xd9\xc1\xc9\x7e\x7e\x32\xaa\xfb\xf1\xf1\xbc\x84\x35\xcb\x7e\x8f\x35\xe6\xb8\xa5\x39\x63\xbf\xb4\x30\x6a\x24\x74\xbd\x97\xd4\x30\x94\x22\x3e\x26\xe3\x4d\x5c\xb9\x97\xfc\x55\x88\x2c\x75\x88\x8a\xc8\x65\x15\x17\x99\x3c\x52\x30\x2e\xc4\x6f\x0f\x39\x14\x7b\xf2\xc6\x6c\xf8\x76\xe3\xa2\x31"
		"\xa7\x72\x25\x60\x34\x2d\xa0\xd7\x8d\x48\x04\xeb\x3f\x78\xf6\x09\xc6\xbd\x1b\x2a\xff\x4a\x93\xc0\x74\x15\xe0\x75\x82\x0c\x0e\x6e\xd7\x68\x87\xef\xf9\x80\x95\x3f\xfd\xcc\xeb\x81\x95\xee\x25\x15\x5e\x89\x46\xc6\xbc\xea\x8c\x65\xc3\xad\x6b\x2e\x6c\xe3\x27\x3d\x87\xaa\xa6\x55\x94\x69\xf7\x98\xd6\x65\x77\x0c\x6f\xfb\xee\x72\xf5\x21\x55\x55\xd1\x40\xce\x21\x56\x6f\xb2\x51\x72\x66\x30\xa3\x85\x2e\x6b\xb1\xcf\xbc\x43\x9c\xe1\x74\x5c\x1b\xa1\xb4\xe6\x14\x04\xfb\xe1\x9f\x31\x52\x9c\x15\x85\xa5\x37\xce\xa0\xdc\x1b\xb3"
		"\xb6\x95\x78\x2e\x05\xd1\xba\xc2\xdd\x54\x16\x52\x79\x2c\x7d\x00\x11\x2c\x8f\xfa\xee\xb7\xb9\xdd\x17\xa0\xf5\x3e\x91\x45\xce\x1f\x25\xd5\x11\x24\x2f\x1c\xad\x10\x1b\xa3\xa0\x66\x20\xcd\x7e\x05\xe8\xa4\x77\x72\x6e\x95\xbf\x03\x82\x70\xba\x9b\x04\x47\x7d\xdd\x84\x5e\x14\x0a\x9e\x8a\x24\x5a\x56\x5d\x6d\x3c\x23\x88\x3f\x3f\xfd\xee\x06\xa1\x94\x0f\x76\xa8\xb5\x24\x38\x91\xd1\x9b\xf5\x8e\x2e\x14\x4a\x4f\xc4\xdc\x39\x4f\x8b\xc3\xa3\x76\x37\xf0\xa4\x07\xe2\x95\xf9\xde\x84\x8e\x6e\x89\xab\x95\x04\xbe\xb2\x25\xbf\x8b"
		"\x4e\x48\xbe\x90\xfe\x46\x54\xeb\xa1\x99\x0d\x1b\x79\x9a\x7f\x9d\xe6\x75\x8f\x25\x9a\xc5\xff\xef\xaa\xc6\x69\xce\x32\x95\xe9\xd3\x15\xb4\x87\xda\x0f\xbb\x4f\xa5\xea\x75\x05\xa7\xf8\xe6\x2f\xba\x98\x70\x46\xa8\x54\x1f\xf0\xdf\xce\x7a\x78\xaf\xc3\xe8\x79\x27\xca\xa4\x8b\xa1\xa1\x44\x51\xb0\x76\x99\x27\x58\x9d\x41\x19\xd9\x41\xef\xe6\xdd\x8f\x1f\x9c\x3b\x9c\xc9\x0c\x1b\xbf\x3d\x32\xd6\x42\x56\x79\x77\xe7\x98\xc2\x61\xa4\xe1\x89\x7e\x6f\x9e\xda\x93\x70\x05\x13\x3a\x15\x26\x69\x7f\x53\x95\x20\xcc\xa6\xac\xaf\x60"
		"\x76\x2b\xa8\xff\x6b\xe4\x68\x04\xa5\xa0\x99\x8d\x71\xdd\x62\x0e\x9a\x68\x59\xd8\x0e\x87\xc3\x56\xd2\xe0\xd6\x28\xf7\x6a\xb4\x38\x12\x82\x49\xa5\x98\x05\xd2\x8e\x12\xfe\x8a\xd1\xc0\x8e\x87\xd3\x2e\x35\x11\x4e\x99\x02\xe4\x5c\xa4\xf2\x8a\x2d\xe5\x97\x2f\xcf\xb5\x86\x5d\x58\x5d\xfd\xc8\x4f\x13\x20\x90\xb3\x33\x33\xa0\x8f\x1f\xcd\x8c\x58\x24\x03\x08\xcc\x7f\x8f\x50\x51\x2d\x3d\x26\x24\x20\x41\xf2\x55\x95\xfd\x5e\x59\x68\x59\x42\xa1\xcd\xf3\x19\x9a\xac\xf6\x14\xb5\x51\x27\x77\x59\xfc\xda\xc9\xec\x42\x11\x76\xbd"
		"\xe0\x56\x15\x0b\x4c\x36\x28\xc5\x7c\xa1\xfe\xf1\xab\xa9\x8b\x76\x54\xdb\x1c\xa2\xa5\xa9\x03\x43\xe0\x86\x97\x94\xdf\x86\xd8\x80\xbc\x7c\xd4\x18\x04\xc8\xda\xae\x0a\xdd\xe3\xee\xf2\x48\x08\xde\x41\x56\x5b\xf2\xa4\x6f\x75\x26\xed\xd6\xbd\x08\x53\xa9\xbc\x1e\x37\x8e\xfc\x5e\xb1\x5b\xe2\x6f\x58\xa8\x35\x73\xfd\x24\xc5\x68\xd1\x83\x3e\x9b\x7f\xb9\xb2\x76\x1a\x34\x32\x6f\x40\xd1\xbb\xa6\xcf\xff\xb3\x04\x46\x88\x86\x36\xdb\x09\xe7\x3d\x15\xa3\x4f\x18\x7c\x7f\x53\xb5\xaa\x1d\x5a\x07\x76\xee\x2d\x59\x0a\x48\x72\x67"
		"\x8a\x1a\xf8\xbd\x3a\x34\x0f\x33\xd3\xf3\x52\x8f\x24\x49\xc4\x5b\x09\x2e\xcf\xfa\xbf\x68\x8b\x2a\x39\x3d\xd4\x07\xb5\x5b\xe3\xc9\x40\x66\xa4\x7d\x6b\x58\x50\x3f\x00\xb3\xf6\xb1\xfe\xf5\x1b\x60\xd5\xc7\x45\xa5\x72\xc7\xa3\x01\x91\x0a\xbc\xa8\x6a\x44\x0b\x4b\xb9\x47\x52\x36\x5e\x87\x5e\xde\x22\x19\xf0\x0c\x66\xcb\x71\xb4\xfb\xf9\x4b\x2a\x60\x7b\xb3\x68\x25\xbf\xe0\x3a\x16\x5a\x99\xdc\x13\x39\xc3\xb0\x31\xd1\x24\xce\xca\xe8\x02\x0e\xe6\x48\xeb\x68\x91\xf1\x89\xb1\x01\x3d\xed\x2a\xa6\x2a\x7f\x95\x18\xf1\xfc\x4e"
		"\x1e\x93\x23\x52\x28\x48\x3a\xf2\x92\xec\xf8\xea\x30\x7f\xc4\xe5\x57\xc3\xfd\x86\xbc\x0b\x4a\x48\x58\x04\x3c\x04\xd6\xba\x03\x67\xa1\xd5\x46\xfe\xf0\x3e\x47\x73\x8a\xf4\x15\xf6\x6f\x8d\xa5\x9e\x50\xe0\x8a\x55\x48\x8a\x95\x44\xe7\xa3\xb4\x4e\xe9\x9d\xb7\xc1\x21\xb1\x40\xdd\x89\x87\x98\xa4\x06\x9f\x80\x01\x39\xaa\x34\xf2\x5f\x00\x27\x11\x65\xe3\x7c\x93\x27\x7b\xcd\x48\x55\x7f\xe9\xbc\xf0\xe8\x95\x57\xeb\x1a\x40\xd9\x60\x81\x5a\x4f\xf5\x8f\x87\x6c\xd4\x2a\x6e\x57\xbf\x75\x04\x86\xc1\xb1\x78\x59\x8d\x6e\x76\xc9"
		"\xe4\xf7\x1f\x43\x5a\xc6\xdf\x09\x51\x41\x22\x5c\xe3\x5a\x41\xbd\xbb\x47\x42\x7b\x26\x32\x76\xcc\x87\x15\xa4\x98\x69\x2f\x32\x97\x80\xfd\x27\xc5\x1a\x9f\x81\xf7\x49\x48\xd3\xb7\xf6\xc1\x55\x69\x1e\x80\xd1\x6f\x9c\x53\x72\xab\x34\x7f\x1c\x2e\x03\x7a\xa2\xe0\xef\x6e\xc1\x8c\x6e\x21\xdd\x54\x75\xc5\x9f\x09\x41\x3d\x73\x25\xb1\x60\xf8\x2d\xd7\x15\xcb\xa7\xb7\x14\x1d\xf1\x42\x1b\x0e\xf4\x68\xab\xd6\xe9\xba\x5b\xe3\x14\xb6\x3f\x61\x2d\x11\x65\x63\xe0\x02\x3c\xf5\x9b\x2a\x99\x39\x72\x40\xbb\x38\x1b\x4f\x6b\x27\x4a"
		"\xe5\x25\x36\x74\x0a\x20\xbd\x94\x71\x1c\x20\x1d\x12\xf1\x5a\x52\x1e\x0b\x86\x57\x77\x7b\x03\x76\x9d\x12\x60\xbb\x93\xf2\x70\x50\x3b\xca\xc1\x44\x51\xd4\x04\xc6\x2b\xdd\x0c\x4e\x9d\x19\x79\xbe\x25\x71\x41\x3d\xae\x86\x36\x27\xe1\x64\xe5\xde\x62\xd3\x69\x11\xa8\xba\x5b\x65\x90\x3f\x05\x87\x47\xfa\xda\xa9\xeb\xe1\x18\xcc\xa7\x5e\x43\xa1\x8a\x1c\x56\x3b\x81\xb8\xbd\xfb\xf6\xea\xd5\x54\x22\x75\xb9\x0e\x6f\x2c\x5e\x65\x48\x4b\x07\xd6\xd3\xea\x13\x82\xdf\x18\x2f\xce\x79\x82\x6d\xd2\x7d\xee\xf2\x22\xd2\xa6\x23\x93"
		"\x3f\xee\x0c\x9a\x1d\xdc\x28\x37\x61\x45\x7a\x45\xd1\x33\xf8\xec\x6f\xb9\x1d\x09\xad\xf2\xa0\x76\x81\x3d\x70\x06\x71\x40\xcb\x82\x96\xe8\xc1\x75\x65\xac\xb0\xcf\xfc\xbe\x47\xeb\xff\x0f\x0a\xf0\x81\x6c\x90\x62\xe9\xcd\x5e\x5d\x6d\x45\xe5\x19\xee\x9a\xac\xe8\x08\x0a\x78\xe0\xca\x1a\x63\xab\x9b\x22\xf0\xa8\xf6\x77\xc9\xb5\xa7\x11\x1e\x19\xba\x5c\xfc\x51\xb4\x4a\xbd\x96\xa9\x4d\x30\x85\x7f\x1a\x3e\x28\x79\x1f\x11\x31\x6c\xde\x80\xfc\x7d\x15\xe7\x17\x0d\x68\x21\x8e\xa7\x17\x98\x6e\xb9\xe8\xa0\x4a\x22\xf3\x17\x73"
		"\x08\xc3\xdc\xca\x5c\x9b\x31\xeb\x84\x36\x9e\x3e\x83\x00\x45\x8a\x46\x6c\x4a\x84\x47\xa6\xc9\x26\x06\x9b\x29\x40\x46\x42\x4e\xbe\xcb\xd0\xa1\x30\x49\x0b\xeb\xd1\xda\xd9\x0e\xb9\xcf\x62\xe3\xa4\xc7\xca\x0f\x30\x42\x5c\x83\xe3\x1b\x1c\xaa\x32\x2f\x1d\x86\xad\xb6\x9a\xce\xf1\xbf\x03\xaf\xff\x56\x64\x2f\x52\x83\x13\xec\x35\x78\xe8\xb2\x95\x55\x68\xe4\x5e\x57\x03\x05\xb7\x73\xb3\x5e\xf8\x91\xf9\x32\x73\xa6\x4b\x83\x0d\x3c\x8e\x95\x24\x92\x3a\x51\xb8\x1e\xa5\xe0\x13\x9e\x5c\x81\x4f\xde\x5a\x38\xb8\x47\xe1\x64\x52"
		"\x63\x22\x56\x79\xbc\x15\xfc\x63\xfa\x66\x41\x9b\x7f\x1f\xb6\x76\xf1\x2f\xb9\x75\x03\x97\xc8\xe1\x51\xc5\x57\x92\xfe\xee\xa2\xe6\x89\x45\xab\x01\x54\x8d\xe2\xc4\x76\x3d\xc9\x64\xaf\x27\x60\x27\x5a\x7e\xa2\x56\xc3\x1a\xc3\xe3\x02\x1a\xf7\x03\x3d\x8b\xa7\x09\xc0\x06\xe8\xbf\xb5\xb0\x93\x55\x24\x33\xd8\xec\x6e\x44\xdd\x10\xb2\x4e\xe8\x0d\xc2\x03\x03\x8f\x02\xb1\x7b\xec\x92\x7f\x14\x99\xb5\xea\xf5\x17\x35\x24\xdb\xb9\x4f\xd0\xca\x2f\xa4\x73\x0c\x2d\x8a\xa7\x48\xf4\x9f\x8e\x2b\x9d\x9d\xa6\x7b\x88\xae\xf9\x32\x87"
		"\x06\xc0\x31\xf6\xb7\x2f\xe2\x06\x9f\xca\xc6\x94\x92\x97\x1f\xd8\xe9\x0d\xbf\x79\x0c\xb5\x4e\x49\xc7\x91\x3b\xd9\x9b\x6d\xa8\x8c\x3e\xbd\xa3\x9c\x77\x8f\x54\xa8\xb4\x72\x39\x1f\x49\x78\x21\x0b\x76\x25\xf8\x0f\x2d\x86\x0b\x95\x9e\x26\x4a\xfe\x4e\x89\x7c\x5a\x4e\x1c\x6a\x46\xab\x24\x4d\xc9\x99\x81\xb7\x5e\xb4\xa8\xa3\xe5\x16\x2b\x9e\x7b\x96\x7f\xc7\x61\x2d\xb9\xb1\x23\x4a\x02\xbd\x3c\x91\x76\x71\x46\xbb\x98\x5a\x0a\x61\x6e\x86\x42\x73\x6a\x81\x18\x4a\x5a\x56\x72\x72\x4d\x19\x6d\x85\x9c\x11\x5c\xee\x86\x27\xc8"
		"\x93\xf2\x50\xf2\xd7\x57\x9e\x60\x42\x2e\x90\xc8\x8e\xd7\x5c\x50\xa8\xeb\x4d\x88\xcd\xad\x9f\xf2\xe0\xe8\x76\xd4\x83\xfa\xbe\xd2\x23\x2c\x8c\x80\x00\xf0\xc9\x4b\x38\x2d\x88\x61\xca\xc6\x0f\xe0\x26\xd4\xbd\x2d\x1d\x54\x56\x3c\x4b\x67\x92\x9a\x51\x1c\xa3\x25\x02\xbb\xb4\x24\x4f\x42\x69\xfc\x17\xc3\x67\x96\xcf\xb5\x62\x62\x73\xff\x3f\xb0\x43\x33\x46\x1c\x30\x3d\xe8\xa5\xb9\xd8\xf3\xd1\xb6\x4b\xfb\xac\x48\x46\xad\xe2\xc2\xc4\x60\xd9\x00\xa6\xf2\x8c\x70\x16\x29\x60\xad\x7b\xc8\xd2\x44\xd6\x2c\xc0\x58\x66\x78\xf8"
		"\xf4\xab\x8a\x08\x43\xf7\x0b\x1a\x0d\xea\x88\xe6\x00\xe9\x8f\xc7\x25\xd3\x50\xa1\xa3\xf4\xfd\x94\xdc\x81\xdc\xd7\x1d\x20\x35\x69\x63\xaa\x43\x7e\x38\xee\xe6\xde\x79\x2c\xef\xfa\x4d\xfd\xc9\xab\xca\x80\x1e\x7f\x86\x4f\x81\x27\xf9\x42\x60\x98\xdc\x1a\x82\xcd\x98\xb7\xb6\xeb\x13\x2e\xae\xa7\x12\x3f\x34\x8b\x41\x37\x97\xf3\xce\xa7\x9b\x94\xf4\x44\x92\x7e\xb6\x16\x90\x17\x11\xa5\x38\x22\xc0\xbb\x42\x77\xb1\x11\x58\x6f\xc0\xa5\x91\x7e\xe2\xc0\x7d\x16\xcb\xc3\xb7\x28\x6b\xc7\xa8\xce\x5c\x64\xc3\xdb\x8f\x31\xe3\xcc"
		"\xb3\xa2\x52\xf1\x8a\xbb\x91\x78\xf8\x48\x46\x39\x54\x68\x53\x04\x74\x38\x98\xbd\xe4\x5c\x71\x90\xcc\x25\x95\xe3\xb1\xf9\xf6\xfb\x1e\x3f\x2d\xe0\x41\xb6\xce\x6f\x2d\x92\xfa\xf4\x00\x19\x6f\x4b\x9a\x47\x28\xff\xc3\x10\x52\xad\xf7\x96\xff\x8a\xbf\xee\xf2\xa9\x1b\xbe\x8d\x7d\xe7\x87\xef\x52\x83\x2e\x17\xd3\x6a\xc2\x90\x21\x3e\xf1\x00\xb3\x26\xa1\x45\x0c\x35\xd3\xe0\x24\x20\xb9\x21\xa6\xf0\x35\x0d\x20\x46\xdc\x2a\xe6\xea\xe3\x49\x48\x39\x07\xe1\xd9\xf8\xb2\x80\x04\xdf\x21\x8d\x99\x57\x93\xef\xbd\x29\x58\xa3\xc8"
		"\x31\x96\x00\x7c\xa1\x8d\x79\x4b\x00\x3d\xf1\xe6\x23\x78\x32\xc4\x2d\xf8\x08\xc9\x8a\xd9\xb1\xe1\x00\x11\xdc\xe5\x11\x6c\x41\x87\x9a\x09\x87\x61\x6f\x40\x7c\xa1\x5b\x6b\x12\x90\x6c\x5e\x7b\xa8\x15\x49\x1d\xc6\x37\x53\xff\x8b\x1c\x27\x67\x27\xf8\xd4\x00\x62\x7a\x25\x3d\xe1\xce\xd0\xbf\x52\xd8\x9c\x95\x33\xa3\xf8\x78\xe9\xbf\x94\xfb\x3c\xb0\x19\x2a\xab\x43\x1a\xa8\xc6\x90\x11\xf0\x00\xf6\xce\xf9\xa4\x09\xa8\x9e\x7a\xcc\x6c\xd7\x8a\x89\x5a\x89\xa5\x66\xc5\x9a\xe1\x96\xf1\xef\x00\x6a\xe0\x31\xe8\x0b\x3b\x9d\xda"
		"\xdf\x97\xe0\x3a\x0e\x86\x94\x46\x90\x51\xdd\xba\x12\x20\x9d\xa4\x23\x88\x37\x9b\x1c\x68\x61\x15\x7f\xd4\xa2\xbb\x11\x89\x96\xb9\xfc\xff\xf3\x07\xb5\xbd\x08\xca\x6e\x58\x01\x19\x19\x42\xca\x56\x0a\xec\xa4\x8d\xe2\xe5\x1f\x24\xe4\x7c\x0c\xff\xe6\x89\x15\xc6\x24\xe9\xb5\x1c\xfe\x76\xe9\xd4\xec\xf1\x37\x57\x90\x31\xdc\x7f\x50\x1d\xd3\xb4\x01\x7b\x04\x61\x17\x0a\xc2\x3d\xfc\x66\x31\x59\x98\xd0\x1c\xc1\x75\x79\xa7\x9e\x76\xe5\x62\xb6\xae\x15\xbf\xf1\x35\x8d\x29\xb0\x70\xce\x30\x57\x97\xfd\xd7\xe2\xfa\x8d\x13\xbd"
		"\x8c\xfb\x29\xbf\x4b\x75\x70\x33\xa5\x6b\xe4\x50\x29\x4b\x99\x03\x8c\xb2\x90\x4d\xda\x93\xcb\xae\x8a\x5c\x28\x94\xa0\x9a\xd6\xf7\x4c\x20\x18\x48\xa0\xf7\x0a\xb4\x71\x60\x50\xe0\xa8\x1e\xea\xb2\x3a\x38\x2f\xd4\x82\xed\x98\xc9\x20\x00\xb1\x8f\x5a\x5e\xbd\x6e\x8e\xd8\x69\x8e\xa7\xc7\xce\xee\xcb\x8c\x7c\x02\x86\x4b\xd1\x48\x92\x60\x5d\x31\xc6\xd3\x06\x16\xf2\xd6\x09\xb5\xaa\x07\xa3\x5f\x96\x4a\x99\xcc\x47\x32\xdc\xe9\xfc\xc7\xa6\x9c\xc6\xa5\x73\x32\x3f\xf9\x47\x12\x09\x30\x35\x6e\x47\xa6\x01\x02\x57\xda\x25\xa3"
		"\x4a\x32\xa8\xc4\x0d\xba\xc7\x36\x18\x64\x3d\xa8\x6d\xe7\x77\x50\xd4\x69\x95\xe3\x39\xe9\x3c\xc1\x29\x57\x8d\x85\x6b\x60\x56\xa1\x7f\xa1\xea\x8a\xfb\x8f\xdd\x3d\x2a\xe4\x06\x25\x44\x34\x61\xb6\x16\x47\xc1\x09\xa5\x88\x35\x4b\x4b\x3e\x38\xdb\x9e\x68\x13\x7b\x78\xb6\x77\x75\xae\xa3\x39\x36\x27\xf1\xc7\x90\x60\xfe\xd5\xd6\x60\xe6\xa4\xad\x82\xc1\xbd\x47\xb5\xc3\x33\x00\x1c\x41\x81\x27\x34\x7d\x55\x14\x88\x3f\xfb\xa4\x5f\xa7\x85\x66\x76\x71\x5b\x55\x0f\x5b\xc3\x53\xbf\xa5\x6f\x6d\x61\xec\x95\xa9\x65\xa3\xbe\x03"
		"\xad\x19\x94\x97\xa8\x4c\xa9\xc6\xc6\xd4\xe0\xf3\xd4\x16\xad\xe4\x30\x3f\x49\xc3\x20\x8c\x1e\xf1\x35\x99\xb3\x08\xf6\x7a\x87\x4a\x3b\x8e\x86\x6c\x7e\x53\x98\x4c\x31\xad\xdf\x71\x50\xe9\x48\x4b\x52\x82\xc8\x8c\xff\xc9\x82\x16\xea\x39\x69\x2e\x56\x77\x50\x1e\x8f\x0a\x38\x3e\xdd\x4e\x3c\x15\xa8\xbb\x39\x76\xea\x43\x4c\x23\x6d\xc7\xf5\x16\x5a\xc2\xcf\x54\x62\xbe\x9c\x0d\x11\x90\xcb\xcb\x40\x5f\x0f\xae\xb5\x15\x7e\x10\x3a\xee\x91\xe3\x8c\x7d\x22\x73\x97\xfa\xf7\x5f\x76\x9a\xf4\x75\x5b\x82\x0d\x23\xf8\xd7\x71\x6f"
		"\x89\xb9\xaf\x09\xc2\x40\xa4\x10\xe5\x6d\x93\x2d\x78\xf0\xee\x60\x9d\x58\x72\xe9\x42\xbb\x54\x8a\xa8\x3f\x69\xec\x58\x48\x8e\x69\x3a\x2e\x44\x19\xd6\x0a\x2b\x5b\xd0\x30\x95\xbf\xca\x50\x7e\x9d\x7a\x44\xec\x95\xe7\xb8\xc5\xc7\x98\xd2\x24\x77\xfa\x11\x2a\xc6\x56\x67\xa1\x09\x05\x65\x47\x56\xbb\x4b\xfd\x7a\x8d\x74\x12\x64\x97\x7a\x4f\xc5\x71\x6d\xcf\x86\x30\x68\x1f\xfc\xae\x4a\x3f\x4e\xf2\x26\x99\x6b\x9b\xd6\x50\xdd\x69\xa0\xa2\x18\xbd\xa1\x1d\xbb\x57\x93\x6d\x37\xbe\xdd\x57\x6b\x5e\x63\x7f\x54\xdc\x3f\x9a\xba"
		"\x46\xa6\x12\x43\x52\x59\xd4\x61\x99\xc0\xf5\x4b\x58\xdb\x7f\x56\xd4\xcf\x4f\x03\x58\xe1\x51\x14\x5b\x87\x86\xda\xfa\xe3\xf9\x8f\x99\xc4\x67\xf7\xf6\x6f\xcd\xd4\xe6\xca\xca\x3c\x07\xc2\xf2\xd0\x59\xfd\xbf\x31\x13\x5c\x3f\x89\x93\xa6\x63\x24\x58\xdf\x31\xee\x64\x3d\xc3\xf4\xc8\x59\x4b\x0c\xbd\x9a\x10\x4b\xb6\xee\x19\x71\xf3\xf6\x5c\x5f\xea\x9e\x3a\x76\xb6\x6c\x37\x5c\x8a\x8b\xee\x38\x0d\x2b\x5c\x53\xc5\xd9\x2a\xc7\x7e\xfe\xbc\xc8\xe0\xcc\x5c\xe1\xae\x26\xd0\x1e\xa9\x2a\x20\x40\x2d\x80\x81\x8b\x2e\x07\x42\x8b"
		"\xca\x3e\xd7\x70\xc1\xc0\x26\x97\xbe\xc2\x1c\x00\x8f\x65\x1a\xdd\x3e\xa3\xa7\x9b\x01\x5f\x16\xea\xfe\x88\x11\xc7\xa3\xc9\x59\x8a\xbb\x54\xfc\xbc\x6f\x07\xfc\x3d\xd8\x20\x85\x6d\x47\x38\x3b\x68\x3f\x4d\x0f\x69\xbb\xb5\x7b\xaf\xba\xd9\xfc\x40\xec\xdf\xf2\xd8\x89\x6a\xcf\x15\xd7\x6f\x68\xfd\x9f\x84\xd4\x9c\x08\x2b\x8e\x36\x17\x6d\x1a\x94\xe0\xef\x3d\x28\x01\x36\xfd\x99\x88\x50\x81\xe5\x84\x2c\xc4\xb8\xa7\xc0\xe4\x9c\xee\xd5\xbd\x0c\xd5\x03\xf6\xc7\xfb\x43\x38\x02\x5e\x6a\xad\x4a\x8a\x6a\x08\x77\x70\xfa\x94\xe2"
		"\x68\xe4\x40\x52\x2c\xd2\xb1\xb0\x55\xcf\xf8\x8f\x14\x84\x4c\x36\x83\x67\xae\xa3\x6c\x2d\x6d\x38\xb2\xb3\x9e\x3a\x5e\x1f\x5c\x15\xd0\xc3\x30\xb2\xe9\x68\xd0\xd3\x71\x3a\x04\xcb\xc3\x25\x26\x69\x54\x3a\x2c\xf6\x52\xa4\x20\xd7\x05\x3e\x16\x24\x48\x38\x53\x63\x8c\xaa\xb3\xad\xe7\x2b\x16\xdf\x7b\x13\xb9\x5a\xa7\x7c\x50\x77\x86\x6c\x3e\x9b\x95\xbc\x66\x32\x9d\x80\xb8\x32\x89\xf2\xd7\x39\xa0\x0a\x68\x07\x4a\xc2\x82\xe7\xd2\xfd\xdf\x29\xd2\xfb\x49\xa1\x22\x5a\xf0\x8b\x76\xe5\x57\x6d\xc6\xaa\x9f\x46\x9f\x30\xfb\x55"
		"\x3c\x51\x67\xd9\x0b\x9c\xa6\x40\xdd\x1c\xde\xc2\x9b\x8d\xd4\x41\x9e\x4c\x15\x27\xe2\x46\x60\x9f\xde\x6e\x8d\xf8\xaa\x7e\xe7\x9d\xcd\x04\x92\x7f\x21\x17\x67\x07\x27\xb1\x8d\xcc\x78\xdc\xd0\xef\xd5\x6b\x85\x1c\x16\xc4\xa6\x93\xb0\xfd\xfc\x6a\x15\x41\x12\xed\xe5\x73\xb3\xbb\xe9\xc9\xb0\x6a\xa0\x4c\x37\xd7\x55\x6e\x59\xdb\x05\x6c\xa7\xf8\x7c\xf9\x9d\x88\x4a\x0c\x36\xfe\x42\x1c\x02\xe6\xdb\x05\x47\x9f\xe2\x48\xcf\x71\x46\xa8\x7b\x78\x72\xaf\x95\x12\xe0\x97\x88\x66\x45\x93\x44\x3a\xab\xea\x71\xcd\xdb\x08\x80\x8b"
		"\x72\x54\xba\x86\xd4\xe9\xd9\x03\xfa\x6d\xda\x03\xf5\x92\x14\x90\x21\xce\x07\xa2\xd6\xbf\xd9\x06\xa7\x46\xaa\x59\x58\x35\x59\x50\x2a\x3a\x51\x6b\xcd\xe3\xcf\xb7\x29\x35\xca\x7e\x8f\xb9\x0e\x82\x8b\x62\x60\xc1\x39\x73\xb9\xbf\xe9\x09\x2f\x50\x07\x46\xf0\xae\x16\x1d\x87\x26\x9c\x7c\x30\xe2\x58\xc6\xa7\xd0\xcd\x2a\x50\x34\x0d\x9f\xf3\xc0\x8e\x16\x73\x6b\x37\x42\x2a\x12\x24\x50\xfc\x58\xae\x73\x2a\x06\x40\x5b\x0e\xef\xf5\x5b\xa1\x1d\xba\x90\x90\x57\x82\xbd\xf6\x86\xd5\xf8\xb1\xd8\x86\x26\x27\x3d\x62\x4e\xed\x88"
		"\x08\x49\xb0\x58\x03\xc0\x53\xdf\x7b\x07\x0b\x0d\x70\x87\xf9\xf0\x06\xd9\x81\x1d\x2f\x9d\x66\xe1\x88\xbc\x93\xa1\x00\xb8\x38\xc7\x66\xc7\xf1\xe1\xbc\x30\x98\xec\xbd\xc7\x70\xe7\xe1\xb0\x7d\x7c\x14\x69\x05\xab\xc0\x2b\x4f\x44\x3c\x67\xfb\x66\xf6\xc4\x06\x1f\xe5\x5e\x13\x1a\x43\xd5\x05\x5e\xd7\x13\x89\xd4\xaa\x69\xa8\x71\x98\x55\xad\x5f\x41\x15\x16\xfe\xe7\xfd\x40\xfd\x52\xf7\x79\xfc\x46\x27\xa1\xef\x39\x76\x2a\x76\x63\x89\xce\xc4\x4d\xcb\x02\xf8\xc1\x78\x40\x18\x5f\xc7\x9d\x8e\xd3\x41\x83\xdf\x9d\x1b\x2b\xbb"
		"\x2b\x62\x0c\x6e\xc3\x10\xdb\xfb\xb6\x61\xaf\x1a\xab\x45\xd4\xba\x82\x8b\x55\x27\xb6\x77\xb8\xe6\xb7\x8c\x6f\xff\x33\xe8\x49\xf3\xd4\xc5\x65\x19\xaf\xd1\x4e\x3c\x80\xd5\x62\x66\x0d\x0d\x66\x50\x5e\x78\x93\x70\x15\x93\x3d\x95\xee\xf2\x4c\x10\xd6\x07\x1d\xcb\x0e\x4f\xe4\x72\x48\x76\xb2\x31\x88\x10\x1f\xbe\x0f\x03\xbe\x2d\x7b\x37\xf8\xb0\x3d\x8c\xe9\x7b\xb1\x12\x8a\xca\xba\x2e\x70\xb4\x92\xb1\x26\x6e\xd7\x16\x15\xc2\x96\x0c\x58\x65\x9c\xb5\x36\x29\xf4\x49\xc9\x34\x84\xf1\xb9\x34\x72\x03\x97\x4d\xa3\x0b\x50\x3f"
		"\x0a\x5f\x08\xb1\xe9\x98\x3e\xf7\x18\x51\x7a\xca\x82\x56\xe8\xbf\x4d\x6e\x96\x02\xf1\x22\x23\x73\x04\x08\x72\x07\x81\x12\x61\xc5\x2d\x3e\x26\xb7\x12\x7c\x7b\xe1\x4a\xdd\x94\xe5\xdc\x8f\x8c\x3b\xcd\xd2\x63\x74\xd7\x9d\xf0\x9c\x91\x5c\x27\x71\xa8\xab\x25\xa3\xbd\x1d\x7e\x85\x6f\x01\x05\x86\x7d\x8e\x75\x19\x6c\x37\xec\x20\x1a\x27\x05\x6c\xdf\x1b\x63\x9d\x41\x5c\x08\x6f\x32\x06\xf6\xe2\x54\x63\xda\x58\x73\x08\x07\x8d\x86\x07\xe7\xd0\x01\xb9\x29\x68\x1f\x76\x0f\x83\x57\x6b\x9c\xaa\x28\xb1\x76\xfe\xa8\x1f\xf2\x9d"
		"\x21\x16\xfc\x9b\x77\x62\xda\x3e\x61\x8f\x40\xdf\xc2\xd9\xf2\x4b\x23\x02\x1b\x8b\x7e\x0c\xcc\xc2\x38\x58\x13\x57\xdd\x44\x73\x0d\xeb\x52\x86\x7b\xaa\xe7\x41\xd5\x85\x96\xe4\xab\xce\x35\xa4\x94\x68\x06\xa2\xa7\x94\xd2\x6c\xfc\x15\xca\xdc\x28\x3f\x3f\xbe\xa2\x22\x72\xa8\xc6\xdc\x3c\xce\xdf\xfe\x23\x4e\x59\x44\x1f\x3c\x5e\xed\x1d\xa5\xab\x4a\x8a\xa6\x8a\xc7\x71\x02\xb9\xe3\x2c\x56\x36\xa6\xcc\x8d\x85\xc6\xaa\x28\x0e\xfc\xb8\x3a\x48\xb9\x7c\x5a\x9d\x39\x10\x95\xa7\x81\xc2\x2f\xf1\x85\x8d\xfd\xba\xb5\xef\x19\x06"
		"\xf6\xdf\x04\x9b\xe9\x2c\x56\x81\x89\x21\xb3\x79\xff\xf8\x9d\x2e\xce\x89\x28\xa5\x79\xae\x10\xb3\x21\x1b\x3e\x2a\x3f\xf1\x93\x59\x56\xeb\xfa\x0e\x05\xd1\x7c\x0b\xce\xce\x7c\x74\x50\x87\xff\x06\xe9\xc0\xe8\xf6\xe4\x6e\x4b\xa3\x28\xb4\x20\xfb\xa7\xec\x28\xfb\x65\xdb\xb3\x64\x7d\x66\x10\x5d\x8a\x88\x51\x9a\xb9\x6b\x74\xae\xd6\x0f\x15\x1d\xc8\x92\x23\xad\xad\xd7\xa3\x41\x46\xe8\x6c\x3e\x2f\x7d\x1d\xa8\x58\x72\xd0\xb1\xa3\x93\xfd\xae\x16\x9e\x9a\x41\x03\xfc\x50\xf2\xcb\x54\x18\x3f\xe6\x98\x03\x56\x55\xee\x60\x85"
		"\x58\xb0\x6a\x2e\x29\x81\xc1\x90\xd7\xcb\x44\xd2\xc6\x7d\x55\xc3\x56\xf1\x5b\x70\x45\x6d\x81\x28\x2d\x6f\xa5\x93\x10\x2b\x13\x1d\x7f\x31\x49\x18\x7b\x19\xbb\x29\x3f\xb5\x51\x51\x13\x00\x94\x88\x75\x51\x93\xd8\x1a\xf5\x09\xc4\xff\xa8\x38\xc0\x56\x1d\xe3\x03\xe3\xe7\xba\x80\x0e\x4a\x8a\xc2\x69\x81\x42\xf5\xd0\x4c\xb1\x5a\xcb\xd5\x70\xec\xdd\xbd\x45\x31\xfa\x6d\x5f\xe8\x82\x9b\x94\x6b\x11\x9d\x0c\xbe\xe3\xcf\x70\xc2\x40\x7f\xdf\x34\x76\x94\xca\x22\xc6\x34\xeb\x51\xcd\x77\x12\xcb\xeb\x98\x4d\xc0\x25\xc8\x7b\xc7"
		"\x68\x9a\x56\x4d\xe2\x2a\xef\x53\xcb\x43\x13\x7c\x7f\x8a\xb4\xff\x28\xc6\x0f\xa6\xe8\x65\xac\x7b\x38\xb1\x21\x58\x56\x99\xb3\x6b\x3d\xea\x85\x2f\xd4\x84\x55\xfd\xac\xba\xc3\x73\xf0\x8b\xe7\x8d\x3f\xa8\xd7\x72\x9f\xd0\x13\x8f\x6f\x98\x97\x8a\x44\x36\xc7\xf8\x98\x3b\xa1\x82\x99\x85\x13\x14\xbc\xa0\x26\x0b\x65\xbf\xd9\x53\xa3\xe6\x18\xae\xfb\x19\x84\xc4\x76\x72\x66\xbd\x7e\x00\xf6\xce\x65\xef\x31\x90\x2d\x6b\x68\x6e\x71\x68\xa4\x5b\xe1\xc8\x6f\x33\xd1\xd7\xeb\xf2\x18\x01\xdd\x18\x2c\x02\x66\xa8\xbb\xd6\x1b\x57"
		"\x6d\x18\x5b\xb1\xbc\x42\x36\xc1\x14\x88\xee\xcf\x12\xdc\x7a\x20\x98\x38\x83\x7b\xb6\x9c\x70\x15\x3d\x7e\x9b\x02\x0a\xb6\x70\xe3\xd0\x65\x8f\x2e\xa4\x86\xee\x87\x31\x0a\x9e\x18\x2b\x98\x96\xc5\x5e\x00\x16\x31\x7a\x30\xe4\xe5\xf8\xc7\x02\x11\x38\x57\xe0\xa9\x5b\xe0\x7e\x26\xfe\xee\xb5\x72\xc2\xc5\x7b\x82\x99\x36\xbb\xe8\xb2\x06\x5d\x7d\x55\x0e\x9d\xb8\x1b\x23\x9b\x44\x6b\xb5\x22\x7d\x71\x50\xbd\x31\x32\xf1\x13\x9f\x2f\xcc\x25\x65\xe1\x2d\x7c\x8a\x4c\x4e\x0f\x8f\x3d\xcb\x6c\x03\x5f\x3f\xbd\x84\x9d\xb4\x1c\x99"
		"\xca\xad\x98\x55\xd5\x7e\x9e\x56\x02\x22\x7e\x38\x8a\xa4\x38\x13\xa9\x52\xfa\xfb\xe5\x3c\xa3\xa5\x55\xa1\x97\xe0\x88\x18\xf2\xd6\xed\x89\xef\x9a\x2d\x36\x12\x25\x72\xae\x97\xdc\x15\x95\xc9\x8b\x03\x8e\x1b\x30\xca\x5b\x9e\x96\xba\x37\x93\x40\x34\x37\x60\xbc\xd4\xbf\x5e\x9d\xc0\xd3\x5e\x7a\xf0\xa2\xd4\xc1\x2b\xcf\x40\xae\xd8\x66\xe4\xb6\x27\x84\x84\xf2\xbe\x4f\xdc\xdf\xc5\x28\x00\xf6\xec\x2f\x9e\x99\x56\x9a\xb3\xce\xf1\xf8\x17\xbc\x30\x85\xff\x15\x11\x11\x1a\xf0\x3a\xef\x35\x01\x1b\x66\x11\x22\xb8\x2d\x9f\xe7"
		"\xc4\xb9\xa7\xa0\x7a\xaf\xbe\x36\x35\x1f\x56\xaf\x24\xdb\x62\x89\xb8\xcd\x5e\xb2\x9c\xa5\xa9\x52\xa4\x7f\xa5\xd3\x19\xc7\x8b\xcd\xa3\xd4\xf0\x5a\x30\x4e\x35\xe9\x0b\x45\x15\x1b\x06\xe7\xb2\x21\x79\xeb\x0b\x21\x72\xff\xc6\x91\x95\xe6\x2d\x49\xa0\xdb\x6d\x95\xd3\x4e\xb0\xca\x86\x54\xb3\xc4\x8b\xe2\xce\xaf\xeb\x5d\x29\x31\x99\x39\xb8\xe6\xe5\xf2\x93\xbc\x2e\x75\xbe\x84\x59\x53\xc0\x29\xb5\x4c\x41\x8b\x3a\xf5\xe6\xfe\x7c\x85\xde\x93\xf2\x27\xee\xdd\xdc\xe5\x6f\x46\x80\xc3\x04\x7b\x21\xbf\x75\x92\x0f\x84\x61\x46"
		"\x96\x5c\x66\xb1\xcb\x26\x36\xe0\x2a\xaf\x52\xfd\x47\x75\xae\x98\x6c\x7c\x0c\xe9\xd0\xfb\xd8\x9e\xdd\x91\x4f\x08\x4b\xc9\x22\x00\x19\x0f\x8e\xde\x01\x97\xc3\x08\x66\x9d\xb7\xb3\xc0\x90\x21\x20\x02\xd2\xda\xcd\x01\x18\x86\x10\xd0\xd1\xce\x46\xbe\xec\x9b\x88\x9b\xab\x15\xd8\x40\x1f\x70\x72\x80\xbd\x1d\x77\xbe\x52\xd1\xa6\x2d\xb7\x24\x6a\x05\x18\x3c\x19\x53\xda\xed\x93\x5f\x94\x53\xab\x80\x66\x1a\x83\x74\x4f\xf7\x75\x41\x12\x50\x96\xa0\x60\xe6\x45\x2f\x54\xc4\xef\x31\x72\x01\xd8\xc2\x76\xbe\x2a\x8b\xf3\xfc\x69"
		"\xf0\x43\x9f\xc3\xc2\x65\x20\xa5\x5c\x4c\x8c\x7e\x96\x54\x2d\xb4\x12\xeb\x21\x85\x89\x76\xcc\x15\x93\xc3\x63\x4d\x0e\xb6\x60\x95\x9e\x25\x31\x83\xe8\xfa\x72\x2d\x95\x94\xdf\xf3\xd5\x75\x01\xda\x28\xb9\x3b\xf4\xdb\x08\xf6\x8d\xcc\xee\x13\x99\xe1\x89\x52\x14\x7d\x6d\x86\xe5\xdc\x91\x7b\x3b\x0c\x69\x6b\x9b\x70\xfd\xb6\x64\x37\xc4\x47\x14\xb9\xb6\x0e\xd3\xd9\x41\x16\x09\x34\x8d\x5e\x26\xd9\x6b\x50\xdb\x0b\x45\x50\xe3\x99\x7a\xfb\x7c\xf8\xdb\x91\x6c\xbe\x15\xf8\x9f\xcb\x5f\xd7\xcd\x7f\x51\x27\xf6\x86\x89\xcd\xe5"
		"\x22\x33\x4c\x5d\xde\x3d\x53\x7c\x25\x71\x82\x79\x36\x44\x21\xd3\x07\x6b\x30\x2c\x31\x9c\xc7\x9f\x2d\xdd\x66\x0c\x5e\xfb\x7e\x0a\x05\xe6\xef\x0e\xa7\x3b\xd2\x87\x43\xc0\x63\x60\x16\x2e\x31\x6a\xe6\x11\xe2\x95\xaf\x5b\x0b\x66\x76\x3d\xd3\xe9\xda\x45\x0a\xbe\xe6\xe5\xd9\x56\x2e\x1b\x75\x80\x4c\x8a\x51\x77\xb2\xf5\xd3\x30\x1f\xf1\x4c\x65\xc9\xbe\x81\xc7\x0e\x59\xa9\x4c\xc8\x60\x34\x78\x33\x51\x91\x04\x25\xc2\x43\x53\x90\x3c\x36\x53\xd6\x20\x39\x27\x8d\x4b\x87\x35\x6d\x0b\x7f\x42\x1c\xc7\x1e\x3f\x0d\x26\x27\x41"
		"\x50\x18\xc8\x71\x9a\xff\x2f\x06\x01\xa2\x21\x02\x90\x5f\x57\xe9\x66\x05\x27\xec\x06\x04\xcd\xe8\xe3\x2e\x20\x90\xe7\x4c\xdb\x74\x3c\xfc\x0b\xb7\x98\x74\x68\x95\xed\x89\xa7\x2c\x87\x3d\x1b\x95\x45\x73\x55\xc7\xb6\xbe\x85\x32\x3c\xb8\x49\x83\x11\x23\x12\x4e\xcc\xc4\x8a\xa5\xfe\xb2\xfa\x41\x7c\x28\x9c\x08\x1f\x9e\x45\x58\x5c\x16\x84\x52\x88\xfe\x07\xaf\xbd\x91\x4e\xd0\xff\x35\xdd\x88\xb2\x31\x3a\x56\xcc\xfb\x7c\x13\x5b\xac\xe5\x8e\x70\xc8\x07\x28\x4c\x28\xf1\x3e\xe6\xed\xf8\xb5\x71\x34\xf6\x15\x00\x49\xce\x88"
		"\x55\xe4\x2d\x7b\x58\x64\xed\x25\x74\xf7\x15\x2a\xff\x7e\x8c\xc0\xc7\x7f\x2b\x90\x69\x01\x62\x5e\xc2\x6e\xe8\x4f\x60\x4d\xfd\xd8\xc7\x8c\x86\xd7\x3c\x05\xf1\x93\xed\xcb\x8d\x67\xa6\x24\x52\xc9\x4c\x1d\x3e\x06\xb2\x2b\x67\x31\x85\xc1\xc0\x9b\xac\xe1\xd5\x4f\xef\x38\xd0\xb5\xcb\x4e\x6d\xd2\x74\x0a\x5f\xf4\x65\x29\x9e\x21\xd5\x81\xbc\xaa\xc7\x8f\xc6\x6a\x4c\xa1\xf3\x02\xd7\xa5\xd1\xef\x96\x14\x96\x50\xb1\xce\x9b\x3b\xce\x7d\x97\x54\xa7\xad\xee\xeb\x15\x16\x86\xf9\xc2\x82\x6c\x99\x79\x72\x97\x9a\x1c\x11\x28\xe0"
		"\x71\xc5\xad\xab\x51\x4e\xad\x87\xe4\x2f\x03\x5e\xd6\x69\x2e\x0e\x6a\xc3\x67\xb6\x47\x78\x79\x2f\x92\x83\x53\x0a\x5b\xcd\xf3\x1a\xab\x4b\x99\xea\x58\x78\x69\x11\xfd\xa1\xaf\x30\xc3\xef\xb2\x0a\x23\xaf\x15\x4a\x10\xbc\x48\xc3\x67\x90\x99\x05\x7a\x08\x42\x5f\x1b\x93\xb2\x74\x54\x87\x44\x4b\xea\x6b\xea\xcb\xe2\x4d\x2c\x79\xdd\x73\xc7\x4b\xf4\xb4\x17\x65\x0b\xdd\x95\x36\x2c\x8f\xb9\x83\x5c\xce\x17\x5e\xb2\x86\x81\x68\x21\xd1\x9b\xde\xc2\x8d\x80\x70\xc0\xb6\xfe\x85\x6b\x8a\xd0\xac\xa4\x7e\xbd\xd2\xec\x34\x3d\xca"
		"\xcc\x80\x80\x1d\x84\xd6\xdc\x4a\xb7\xd1\xed\xac\xb6\xfc\xd3\x8d\xba\xfc\x11\x46\x2c\x14\x53\x37\xd3\xdf\xcd\x1d\xad\xd1\x67\xee\xf6\x30\xf0\x7c\x1b\x3b\xc6\x0f\x18\xc5\xca\xbf\x46\x49\x34\x1f\x38\x65\x05\x22\xae\x9c\xdb\xd7\x7c\x44\x48\x22\x4e\x2e\x86\x14\x79\xe5\x15\xe9\xa0\x33\x06\x2d\x5e\x3b\x91\x84\x8f\x2b\xb8\x68\x04\xd1\x61\x37\x27\x9e\xdb\xdb\x74\x68\xbb\xf4\x6d\xfc\x50\xc2\x9a\xa8\x07\x9e\x06\x38\x1d\xfc\xf0\x81\x79\x87\x81\x8a\x35\x7b\x05\xf7\x15\x75\xf3\xd2\xfb\x2c\x23\xec\x9e\x26\x36\x93\x6f\x65"
		"\x51\x66\x20\xef\x3c\xe0\x40\x1e\x21\x99\xdd\x42\x96\xe0\x81\xa3\x1b\xa7\x4d\x52\x53\x3b\x1c\xc0\xd0\x40\x4d\xdd\x00\xb6\x58\xb6\xd9\xd1\x66\x64\x94\x9f\xe4\xfd\x8c\xd4\x41\x11\x06\x63\xad\xb2\x3c\x3b\x26\xe4\x7f\x43\x9c\x2d\x2e\xc5\x58\x98\x59\xd8\xed\x05\x15\x69\xef\xe9\x63\xb3\x27\xf1\x10\x55\xc2\x16\xaa\xee\xb2\x33\x85\x60\xf6\xd8\xa2\x8d\xdb\x77\x14\xf2\x82\x2f\x31\x5b\xe9\xb8\xd3\x04\xb5\xdd\x89\x02\x37\x1b\x22\x46\xf0\xaf\x95\x57\xa2\x91\x98\xab\xd2\xde\x07\x22\x6b\xcd\x57\x80\xbe\xcc\x79\xe6\xad\xf5"
		"\x77\x18\x09\xc9\xbd\xf9\xaa\x23\x8c\x27\xcd\x92\x52\xeb\x9d\xe4\x14\xf1\xd8\x7a\x80\x58\xfd\xf6\xe5\xf3\xbc\x74\x28\xbe\x53\x76\x8d\x93\xfb\x8d\x62\x46\x29\xb6\x4f\x37\x06\x0a\x16\x77\x23\xef\x8c\xfc\xc7\x7b\x22\xca\x0e\x3f\xf4\x9e\x2e\x1e\x55\x9a\x4e\x6a\x92\x7d\xc8\x04\xfc\xb8\x16\x46\x19\x40\xbd\xa7\x19\x1d\xb9\xa9\xf5\x8f\x64\x2b\xe0\xc4\x33\x1d\x1e\x5a\xbf\x89\xa0\xfb\x20\x27\xa8\x07\x13\x34\xd0\x07\xf7\x14\x70\x0c\x2e\x3e\x27\xf5\x00\x78\x60\xfb\x74\x0f\xf6\x18\xc4\x3e\x69\xa9\xae\xd3\xf0\xc5\x41\x89"
		"\xb5\x82\x5a\x20\x4e\x24\x82\x37\x7b\x35\x98\x7d\x8b\x84\xed\x17\x77\xc6\x70\x0b\x1b\x7e\x76\x3c\xc6\x07\x9b\x1c\x6e\x5e\x46\xd7\x9c\xe8\x83\x0b\x91\xbe\x5b\x8b\x30\x1e\x75\xd9\x0d\xa3\xfc\x45\x89\x1c\x69\x9e\xee\xc3\x08\x28\xe9\xc7\xe3\xd0\x29\xb4\x94\xc1\xe6\xfa\x96\x3b\xe8\xf2\x22\x34\xfe\x5c\xe5\x57\x7d\x90\x0d\xdf\x69\x88\xfa\xd3\x8c\x67\x71\x03\x87\x10\xe6\xc2\x51\x21\xb6\x14\xdb\x61\xcc\xd4\x36\xc3\x9a\x71\x0e\xe1\x8a\x1a\x28\xa4\x0f\x94\x31\x6a\xf6\x47\xcc\xbf\xd2\x0f\xb1\x0b\xa7\x29\x4a\x81\x93\x93"
		"\x0c\x66\x79\x93\x2c\xd2\xee\x0f\x94\x31\xda\x0b\xe5\x9e\xdb\x25\x63\x66\xfd\xd7\x39\xdb\x78\xf2\x13\xb8\xd0\x4e\xad\x1d\x7e\x02\xea\x5a\xcf\x20\xe0\x7d\xfb\xf8\xe6\xc6\x6a\xb2\xe5\xad\x0d\x7d\x82\x69\x37\xe7\x6e\xc2\x18\xb5\x59\x1a\x0e\x78\x61\xc3\x5a\x41\x8b\x3d\x15\x8c\xb8\xca\x4e\xcd\xd7\xb1\x91\x55\xd1\x24\x11\x0c\x4a\xc6\xd2\xd7\x67\x40\x24\x8c\xf1\xf1\xbb\x3b\xed\xe8\x1e\x79\xa0\x2e\x6e\xb5\x75\xab\x42\x67\xf2\x53\xb9\xf1\xf7\x5e\x4b\xa5\x7a\x08\x27\x38\x12\x06\x5a\x65\x1b\x2f\x75\xc5\x03\xe8\x7f\x54"
		"\x8a\x89\x5f\x66\xcb\x4a\xae\x39\xa4\x40\x80\x31\x44\x31\x25\xed\x4d\x8c\xcc\xe7\xde\x97\xa6\x99\x4e\xfa\x4c\x43\x18\x31\x97\x51\xda\x58\x4f\x29\xd6\x78\x0e\x17\x22\x9e\x2c\xb8\x8b\x2f\xca\x29\x2a\xb3\xd7\x5b\x2c\xae\x6b\x15\x8e\x33\x7e\x7a\xaa\x68\x4e\x55\x7a\xfb\xc2\xbd\x26\xb0\xb1\x0a\x80\xfa\x0a\x16\x0d\x34\x5e\xe6\xc9\x72\x90\xcf\x4c\xc0\xda\x29\x04\x81\xd2\x1f\x47\x35\x3a\xb3\xfe\x6d\x0d\xd7\x7b\x6b\xe2\x26\x25\xd7\x2d\x06\x08\x5c\xb9\xc0\x77\x04\xfd\xb3\x4e\x2d\x96\xce\x7a\x38\xe5\x53\x4d\xba\x8e\xa3"
		"\x47\xdc\x44\x23\xd5\x74\xf7\x97\x12\x2b\x70\x4e\x51\x26\x43\x33\x87\xe1\x43\xce\x65\x00\x28\xfc\x84\x9d\x3b\xa7\x0b\x24\x02\xdc\x65\x50\x6f\x80\xac\x68\xab\xbf\x1e\xfd\xd0\x63\xa1\x23\xc0\x90\x63\xe6\xf9\xac\xa3\x56\x48\xaf\x75\xf1\x3e\x36\x7d\xf8\x73\x00\x1c\xbc\x53\x7d\x4d\x92\x0d\x1e\xb4\x34\x88\x37\x36\x06\x5b\x5a\x96\x2f\x35\x31\xd6\x09\xa3\xfd\xe8\x31\x3a\x11\x0a\x52\x8e\x98\xf2\x92\xd3\xd0\x2e\xa9\x92\xcc\x0b\x79\xfc\xde\x84\xf4\x71\x89\xe8\xf7\x8e\x0f\x44\xd9\xa9\xd3\x37\x25\x8e\x40\x19\x1f\x13\xac"
		"\x60\x5d\xc5\xb6\x4e\x8a\x41\x77\xb4\x43\x5e\x45\x1b\xae\xee\x41\x24\x68\xfb\x5a\x10\xde\xcf\x00\x9f\xaa\xba\x03\x00\xcb\xc6\x33\x47\x75\xd2\xf9\x38\x38\x69\x97\xc4\x2b\x4a\x80\x4c\xee\x13\x09\x10\xec\xf7\x8e\x31\xdd\x5e\xa4\x93\x55\x44\x1e\x98\x44\xf0\x42\x4c\x1b\x68\x06\xd4\xa9\x57\x59\x21\x47\x29\x35\xb7\xc5\xbf\x8f\x9e\xae\x38\xd9\x9b\x07\xa5\x8c\xa8\x82\x7b\x75\xe0\x41\xe3\x0b\x27\x56\x7d\x04\xb9\xab\xc2\x1b\xc9\x97\xdc\x21\xc1\x38\x2b\x61\xf7\x65\x99\xc4\x2c\xd8\x73\x30\x94\xc7\x4e\xdf\x85\x69\x6e\x04"
		"\x18\x2a\x71\x94\xa8\x05\x56\x57\xb1\xa3\x10\x78\xa4\xa4\xb0\x45\xa0\x2c\x49\x2b\x2d\x74\x3c\xe6\xb6\x58\xf2\xc2\x8e\xdc\x87\x20\xc9\x51\x87\xd3\x73\x55\xc0\x39\xfe\x90\x25\x4f\xd4\xe3\x50\x78\x45\x5b\xbc\xff\x58\xa0\x97\x97\x3c\xb8\x45\x1e\x55\xca\x69\x6a\xee\xe8\xda\xa0\x2a\x4f\xea\x4a\x37\x20\x1c\xf3\xd5\x2c\x68\x6c\xf4\x90\x3d\x1e\x40\x4e\x08\xa1\x38\x31\x08\x66\x90\x9a\xe8\xef\x2b\x3c\x61\x43\xee\x86\x3f\x22\xd2\x37\x01\x80\x33\xea\xf7\x72\xe5\xbf\xad\x18\x07\x76\x23\x43\xd3\x44\x2a\xde\x7d\x1b\x15\x40"
		"\x44\x23\xdc\x30\x84\xc5\x5f\x6d\x44\xfa\xe3\x4d\xf2\x72\x3b\xe9\x01\xe6\x85\xa1\x64\x43\xc9\x27\x01\x8d\x79\xce\x5f\x39\x3c\x0b\x4f\x20\x22\x31\x8b\xbe\x42\x04\x67\x06\x36\xbd\xb8\xd2\x6a\xcb\xb7\x63\x19\x48\xd4\x34\x91\xc1\x95\x41\x1d\x85\x6e\x7c\x8e\x11\x05\x16\xa1\x8a\xc0\xb5\xce\xae\x31\x60\x5f\x38\x98\x4f\xb0\x54\xd7\xe0\x81\x8d\xed\xb3\x6c\xa6\x24\x90\x7e\x81\x4f\x19\x7f\x5f\xf2\xa0\xc3\x60\x82\x56\xe4\xc2\xc0\xee\x35\xfa\x32\xd7\x69\x18\x4b\xc2\xee\xeb\xc9\x41\xae\xff\x71\x0f\x8c\x6d\x91\xdd\x9b\x47"
		"\xad\x75\x8a\x30\x6e\x5c\xf7\x3e\x90\x9e\x0b\xd8\x4d\x8e\xde\x91\x41\xda\x60\x00\xc4\x0f\xef\x73\x56\x90\xde\x2b\xe4\x83\xba\x2a\xbe\xe0\x42\x71\x01\xd8\x8c\x37\xb9\x4b\x28\x55\x9a\xa8\x2a\x84\xb6\x73\x33\xd2\x1e\x64\x95\x9f\x85\xf3\xf8\x8a\xde\x6c\x35\xcb\xe0\x17\xee\x72\x2a\x99\xa3\xcf\xf2\x9f\x7a\x45\xe6\x9f\xd0\xc1\xca\x85\x64\x1a\x75\xd2\xa3\x9a\xc5\x05\x92\xa4\x06\x7b\x67\x0f\x7b\x6a\x24\x74\xdf\x82\xe1\x4f\x95\x1e\xd2\x22\xbc\xaa\xfa\x79\xbc\x9b\xed\x9e\xda\xdd\x35\xde\xc6\x2e\x6e\xba\x08\x1e\x8c\xba"
		"\x28\x73\x86\xaa\xa2\x13\x31\x6d\x0e\x4e\x02\x52\xcd\xa7\x2d\xcb\x13\x4f\x0c\xf8\x3a\x06\x56\x54\x06\xc8\x77\x90\xad\x1d\x1e\xfb\x70\x67\x43\x82\xc5\x0d\xb7\xeb\xd9\xcf\xb1\xe0\x58\x72\x57\x21\x71\x2d\x31\x88\x91\x16\x12\x9f\x4f\x1c\x61\x19\x3b\xbd\xc1\xf9\x2a\x6f\xde\xcc\x68\xe0\xd1\x55\x5d\x09\x59\x04\xf3\x3c\xf6\xff\xf1\xe5\x52\x73\x12\x8f\x7c\x37\x19\x84\xfe\x13\x0a\xf9\x42\x47\x09\x8a\xbf\xad\x5f\x00\xf6\x76\xe6\x6f\xda\x96\x87\xc9\x12\xab\x34\x8d\x1d\xf6\x6c\x91\xda\x6f\x47\xeb\xe8\x4e\x26\xa4\x78\xe6"
		"\xc4\x56\x2e\x03\xbe\x0b\x55\xed\xcd\x8f\xb8\xf2\xe4\x42\xf4\x32\x6c\x30\x8a\x42\x38\x0a\x1d\x47\xfc\x8c\x5e\xa7\x80\x3e\x66\xe1\x2e\xb3\xa8\x60\xa5\xcd\x84\xcb\x60\x9d\x40\x64\xb7\xea\x46\xf0\x3d\x6b\xed\x76\x98\x56\x36\xa1\x12\xc5\xc8\xef\x1c\x29\x64\xdf\x07\x2c\xf1\xb4\x57\x4a\x3e\xa5\xa9\xe0\x82\xeb\x3d\x43\xfa\x4a\x54\xdd\xfc\xc5\x22\x3f\xb0\x79\x52\x82\x58\x59\xbe\x34\xf8\x33\x64\x84\xaa\xb8\xc2\xe6\x8f\xad\xed\xd4\x00\xf9\x26\x66\xd6\x3a\x5e\xf1\x29\xbe\xb5\xf4\x84\xed\x94\x6e\x9d\x61\xe1\xc4\x0d\xf4"
		"\x2f\xb4\x33\xc6\x4a\xfb\x5b\x32\x28\x33\xe4\x9e\x73\x29\x38\x41\x7b\xa9\x5e\x91\x56\x6d\xc3\x6a\x97\xe3\x50\x2b\x5e\x60\xa9\x70\x08\x3c\x5c\x41\xe4\x83\x43\xef\xf4\x40\x7e\x22\xab\x9b\xc2\x5c\xee\xc7\x5c\x67\x31\x7d\x60\x89\x99\xcd\x41\xd0\xa5\x8b\x54\x2c\x7c\x1f\xe2\x70\x21\xf0\xbf\xa1\x8a\x91\xf4\xaf\xda\xc7\x70\x0b\x1a\xfd\x8c\xa3\xe8\xa4\xda\xc0\x3b\x7d\x47\x0d\x65\x84\x3b\xf0\xa5\x6d\xa0\x0e\xc2\xcb\x8b\x1e\x53\xbe\x98\x20\x9b\x03\x07\xe6\xea\x37\x12\x3b\xb3\x80\x41\x24\xd1\x10\xd1\x9d\xd1\xf8\x65\x7f"
		"\xf6\xd9\xdb\xad\xa1\x37\xe0\x3e\xe6\x22\x65\x14\xc6\xb0\xde\xb6\x53\x05\x8c\xa1\xd5\x32\x31\x7e\xea\x83\x88\xb5\x3f\x4b\x7a\x35\xa4\xdd\xe7\x03\x58\x4e\xaf\x13\xa3\x0e\xd3\x95\x2e\x83\x2a\xbb\xae\xf1\x8b\x6c\x96\xe6\xd3\x22\x63\x3d\x8b\x91\x89\xa8\x91\x0d\xdd\xef\xc8\x1a\x41\x58\x45\xe8\xe0\xb6\xb2\x9b\x21\x3f\x3f\xc3\x95\x93\x2e\x8d\xa8\x15\x16\x39\xa5\xef\xc0\xab\x35\x2a\x30\x99\x97\x74\x8f\x0c\x0e\x32\x61\x70\x25\xe2\xa1\x4b\xac\x02\x53\xe1\x23\x1b\x85\xfa\x5c\x22\x21\xdb\x2b\xdb\xb4\x18\xfc\x78\xc8\x8b"
		"\x4a\xd8\xcf\x2e\xa8\x61\xe3\x72\x3c\xcc\x96\x76\xd0\xd9\x7e\x0c\x1d\xc0\x52\x2d\x72\x94\x0b\x3c\x09\x7e\xf4\xb5\xbd\xa6\xe2\xd7\x12\xf1\x01\x86\x75\xc7\x23\xdf\x2a\xea\xfc\xb9\x2f\x92\xd7\x5f\x53\x67\x1d\x03\x40\x3b\x2e\x33\xea\x95\xd5\x4c\x27\x29\x34\x6c\x6a\xea\xc9\xf9\xf8\xda\xc7\xc5\x41\xb7\xfa\x3e\x22\xef\x9d\xbc\xdc\xf1\xd7\xdc\x53\xc7\x8d\x8c\x7b\x2a\xda\x80\xec\xbb\x8a\xc5\x75\xd9\xf8\x14\x47\xf8\x3e\x84\x0f\xa9\xeb\xec\xda\x33\x3d\x92\x5c\xd8\x12\x67\x4b\xdd\xe1\x5f\x41\x68\x6a\x63\x89\xa5\x06\xe3"
		"\xfa\xd9\x17\x67\x58\xe2\xe1\xf9\x1d\xe5\xa7\x19\x5d\xe2\x85\x9e\x8f\x83\xa0\x1d\x87\xab\x7c\xdb\xa2\x48\x64\xad\x7a\x65\xd1\xdd\x84\xba\xf6\xe7\xc0\xb2\x27\x82\x63\x90\x46\xc3\x4e\x46\xaa\xa2\xa0\x19\xdb\xd5\x8a\x1c\x8b\xa6\x59\x4b\xbb\x28\x85\x38\xf4\x26\x13\x27\xd6\x75\x61\x81\x80\x0a\x0e\xf4\x03\x5f\xa3\xed\x3f\x71\x0c\x2d\x48\xc8\x31\x8b\x2c\xa5\x05\x7e\xf9\x1c\xdb\x22\xa1\xb7\xd2\x2c\x78\x2b\x40\xf9\x69\x3e\x40\xcd\x75\xf7\x93\x0b\xa1\xae\x6c\x18\xbe\xb9\x05\x52\xc6\x8c\x9a\x63\x9e\xd5\x08\xfb\xc3\x32"
		"\x18\xff\x07\x0d\x74\x65\x95\xd7\xcd\x00\x70\x86\x28\xf7\xeb\x95\x1e\x7b\x90\x9d\x04\xc9\x37\x85\x46\x60\xd2\xa6\x1d\xed\xb1\x56\xd2\x68\x8e\x51\x2a\x9e\x4b\xd9\xe1\xe1\x61\xe1\xfd\xbe\xb9\x58\xb0\x22\xb5\x18\x93\x49\x3a\x31\xf4\xb9\x32\x2d\x94\x7c\x3d\x6f\x86\x4e\xc7\x0e\xf0\x1d\x7c\xc1\x73\xe1\xc9\x05\x09\x92\xad\x7f\x4c\xd0\x69\x63\xb8\xe7\xed\xb3\x50\xb8\x04\x9b\x38\x46\xb1\x81\x54\x4c\xa8\x4b\x45\xe0\x49\x40\xc4\xaa\xce\xa0\xa2\x47\x6a\x62\x43\x61\x29\x85\x85\x2e\xe5\x01\x7f\x92\xa8\xc0\x69\xf6\xe5\xe4"
		"\x74\x68\x68\xba\x08\x52\x85\xba\xa9\xce\x6a\xe9\xf6\x00\x1c\xb9\xad\xb6\xfc\x73\xd3\x87\x2d\xb6\x74\xff\x9b\x12\x7e\x8c\xe2\xfc\x61\xd7\x25\x67\x18\xfc\xb0\x94\x29\x9e\x15\x70\x3a\xd7\xa7\x72\xb6\xb2\x63\xd2\x06\xcc\x95\x82\x1e\x03\x33\xa6\xb7\x0b\xb9\x17\x97\x65\x5c\x7d\x4d\xc4\x17\x1e\x04\x7c\x35\xc7\x94\xbc\xcc\x2d\x80\xc7\xac\xb8\xa4\x55\x75\x70\x1a\xf7\x48\x39\xc5\x39\xa2\xae\xe2\x9e\x20\x99\x04\xe2\x28\x43\x6f\xde\x6a\x06\x23\xe0\xa7\xab\xa6\xb4\xf4\x1a\x81\xc5\x12\x38\x66\x0f\xb9\x7c\x0a\xf8\x89\xb7"
		"\xb0\xe4\xbc\x7a\x10\x23\xa7\x47\x37\xd7\xfb\x6e\x3c\x15\x3e\x7b\x49\x20\x94\x4d\xa3\xa5\x4c\x3f\x3f\xe2\xc1\x0b\xee\x61\x34\x87\x27\x3a\x79\xc2\x58\xb0\x75\x9d\x52\x3c\xc1\x00\x8f\x37\x31\x58\x8d\x35\xbe\x5e\x7a\x12\xa9\x09\x5d\x25\x69\x5a\x41\x36\x64\xa2\x6e\x8e\x0f\x19\x8c\x21\x0e\xcb\xcf\x86\xe8\x86\xdb\x12\x6a\x22\x2b\x70\xc7\x68\xd2\xff\x00\x5f\xad\x4f\xcd\xca\x9d\x2b\x48\xc3\x46\x8f\x10\x7a\xbd\x76\x0b\xf5\x51\x70\xdb\xd8\xd9\x3e\x68\x15\x37\xef\xc9\x86\x12\xd4\x2c\xcf\xc6\xa2\x62\xbb\x10\x3e\x70\x9e"
		"\xde\x57\xc1\xe4\x9d\x63\x0e\x89\x68\xe3\xe1\xfc\xcd\x39\x0d\x8c\x74\xc4\xbf\xd5\x18\xaa\x2f\x76\x2f\x40\x09\xa5\xaf\x73\xbd\xfa\x60\x41\x29\xd8\x11\x8b\xef\x23\xc5\xf4\x9a\x9b\x01\x64\xf0\x01\xcf\x16\x8a\x3c\x7f\x22\x5e\xab\x3d\x74\x07\x88\x5f\x83\x16\x85\xb1\x3e\x61\xbd\xe5\xdf\x04\x78\xef\x5a\x5f\xf5\x5d\xe8\x47\xf6\x78\x75\xe0\x2a\xa1\x35\x9b\xe8\xf0\xb4\xa1\x75\xab\x6a\xb5\xee\x91\x9e\x7d\xc6\x04\x51\xd4\x3d\x2f\x38\x67\x77\xad\x69\xc2\xe1\x08\x94\xf8\xc8\x5f\xac\x7b\x3a\x09\xff\xc6\x8e\x95\xa0\x5f\xe9"
		"\x28\x2c\x6c\x79\x61\xd0\x1d\x42\x70\xe1\xb7\x1b\x90\xc4\xa1\xfd\xf7\x4c\x69\x65\x5f\x6b\xa0\x30\xd1\xdb\xa2\x72\x63\x70\xd9\xfb\x6e\x1d\xe4\x92\x9f\xe7\x97\xef\xd9\x80\xf5\x52\x3b\x99\xc2\x5d\x2f\xba\xf6\x64\x8b\x06\x7a\x65\x30\xd7\xc8\xeb\xe0\x50\x05\xf5\x5e\x0d\x09\xe5\xda\x7a\x7b\xea\x4f\x28\xb4\x21\x27\x34\x0c\xab\x1c\xe1\xda\x04\xb6\x4c\x2b\x12\x11\xf6\x16\x29\xae\x68\x8d\x68\x07\xfb\x40\xbf\xbb\xc2\xd5\xce\x5d\x52\xa7\xee\x2c\xd0\x0b\x78\x27\x91\x27\xc1\xa0\xc8\xeb\xe2\x96\x61\x58\xd8\xfe\x1f\xd4\x01"
		"\xb1\x2a\x01\xd4\x0c\x81\xfe\x5a\xd6\x12\x94\x87\xaf\x85\x28\xa8\x3c\xf5\x98\xd6\x36\xae\x3b\xed\xcc\x35\xa3\xb8\x56\x80\xa5\x76\x37\x27\x05\x32\xa0\x02\x8e\x81\xd7\x2a\xff\xbe\x42\xa9\x04\x41\x9e\x5f\xca\xb1\xf5\xdc\x9e\xc5\xb9\x3b\x4c\x3c\x47\x80\xe9\xf0\x6d\x94\xbc\xc3\x65\xb5\xa1\x67\xa2\xf9\x96\xea\x02\xaa\xbb\xeb\x09\x5f\x6c\x4a\xab\x1c\xbf\x57\x92\x24\xcd\xa6\x1b\xde\xe4\x75\xf8\xd0\xf9\x94\xcd\xdc\xc1\xa2\xad\x90\x2c\x8d\xa8\xd3\xcc\xdc\xed\xb5\x78\xc8\xbb\xaa\xa9\xef\x7f\x8b\x0d\x0e\x1d\xe3\x5c\x96"
		"\x0d\x7e\xbb\xf9\xa6\x86\x41\xfb\xa9\x7f\x52\xb9\xbf\x1b\x93\x11\x13\x2e\xfd\xae\x91\xb4\x2f\xdd\xbe\xe3\x5d\x84\x17\xf2\x85\x23\x2d\x8b\x39\x5c\xf5\x9f\x40\x7e\xe4\xa1\x3c\x51\x52\x6d\x67\x17\x72\x67\x68\x6d\xb8\xe1\xbf\x08\x90\x49\x22\x1b\xeb\x41\x6c\x2c\x92\x6c\x99\x5b\x93\x79\x4d\xb9\x5a\x8a\x92\x1e\x18\x4d\x3d\x32\xaf\x9f\x3f\x8f\x20\x31\x0b\xc8\x06\x2e\x89\x4f\xf8\x36\xdd\x51\xe2\xf2\x1d\xcf\xf1\xe0\x36\xc8\x57\x81\xd4\xe5\x5f\xab\xdb\xd3\x44\xb5\x3a\x1f\x1e\x8f\xf7\xf9\x05\x86\x3f\x34\x49\xb1\x40\x17"
		"\x89\x8e\x9f\xe0\x09\x7e\xdf\x7e\x90\x25\x29\x7c\xa6\xff\xf7\x3c\x57\x06\x63\xfa\xa1\xf8\x26\x13\xdf\xb9\x92\xf0\x29\x66\x06\x4f\xaa\x06\x4f\xb5\x6b\xbf\x88\x08\x19\x97\x47\x0a\x6b\x09\xed\x6a\x63\xb1\x56\xef\x7f\x11\xb1\xe8\xe6\x51\x9a\x08\x41\x3d\x14\x95\xea\x97\x06\xac\x97\x63\xde\xdc\xd6\x69\xe4\x64\x39\x73\x59\xaf\x68\x67\x19\x8a\x09\xbd\x8a\xc8\x7b\x49\xbb\xc9\xc5\x00\x06\x7b\x8e\x82\x69\xf1\x1f\xa1\x44\xa0\x48\x40\xd1\x36\x4e\x13\x21\x69\x65\x87\xec\x82\x3b\xcc\x00\x73\x9f\xff\xf0\x10\xc3\x09\xdb\x17"
		"\x46\xb1\x68\x2d\x5a\x51\xd1\xe6\x77\x05\xe8\x7f\x34\x33\x1c\xf0\x0c\x90\x29\x4b\xdf\x85\x7f\xc0\x07\x4c\x8d\x88\xa2\xcc\x59\x82\x19\x5e\x50\x85\x5c\x6c\x9d\x73\x05\x2b\x48\xb2\x3a\x02\xb4\xa6\x20\x4b\x73\x98\x10\x78\xa0\x2e\x03\xb2\xaf\x0f\xf1\xcb\x88\xb6\x5b\xd6\x6a\xa7\x1b\x64\x2e\xda\x17\x87\x89\xbf\xa4\x39\x5c\xd8\xef\x12\x46\xb5\x26\x17\x13\x27\xff\x6d\xc7\x11\x8b\x94\x5f\xf3\x6a\xd2\xe9\xdd\x8f\x85\x9f\x3b\xd5\xe8\x42\xac\x98\x76\x7a\x85\x30\xcf\xec\x86\x31\xb3\x98\x06\xd9\x30\x59\x6e\x26\x49\x20\xce"
		"\xac\xa3\x7b\xea\x08\xe8\xa1\xd8\xed\xd6\x8c\x31\x8b\xc6\xd0\xb0\x0b\x7c\x26\x32\x63\xf9\xbf\xeb\x40\xb5\xcd\x46\x5c\xc6\x65\x2e\x76\x28\x13\xc7\x36\x98\xa6\x96\xbe\x25\x51\x04\x87\x51\x00\x2a\x37\xba\xef\x96\xa3\xbc\x01\xf8\xf4\x37\x50\xd9\x0b\x6c\x8b\x40\x3f\xcd\xdc\xf4\x75\x0b\xac\xdb\xb6\x3d\xc7\x51\xb5\xcc\xc8\x43\x87\x8c\xdd\x2a\xd3\xf3\x36\x53\xb8\x3f\xe4\x18\x38\xa3\xa6\x1f\x4e\x65\xb1\xa2\xcb\xfb\xda\x3b\x44\x32\x00\x26\x0f\xac\x73\xa1\x86\x01\xbf\xc4\xc0\x6d\x0d\xc5\xb7\x32\x9b\x1e\x4a\x4e\x63\x14"
		"\xf2\xaa\x4f\x19\x04\x39\x16\xae\x1d\x34\x99\x2b\x1e\x79\xb1\x42\x23\xc4\x19\x3b\x4d\xe4\xfa\x79\xa7\xba\x88\x67\x34\xad\x39\xbb\x0e\xc6\x69\xf2\xa4\x6d\x86\x26\xa9\x7f\xb5\x5e\xea\x82\x75\x75\x5f\x73\x42\x17\x50\xb3\xc7\x52\xad\xf0\xd7\xb6\x2a\xd0\xb6\xe0\xc2\xf1\xde\xde\xd5\x68\x75\xd0\xcc\x6e\xaf\x05\x03\x51\x8a\x37\xf0\xe9\x2d\x79\x1d\xf6\xfe\x5b\xaf\x6b\x7e\x52\xdc\xa0\x69\xf6\xe6\xfc\x48\xe2\x99\xbe\xd2\xd8\x16\x9e\x8f\x9d\x49\xd4\x50\xe8\x27\x55\xa8\x12\x5a\xba\x7b\x8d\x34\xda\x41\xbf\xa3\x9d\x7c\x64"
		"\x5d\x40\xa2\x6f\xa9\x75\x01\x65\xbb\x1c\xdc\x1e\xaa\x01\x5e\x40\xf2\x9f\x35\xfd\x70\xc3\x7a\x7f\xd4\x28\x8e\x33\xcc\xe5\xdd\x02\x35\x62\xdd\x80\x6e\x71\xd5\x0f\x67\x7b\x13\xb0\x81\x74\xb2\xb3\xc6\xe2\x1c\xcf\x40\x10\x58\xc2\x37\x87\xdb\xbf\x5c\x3e\xb8\xa7\xd6\x50\x0d\x13\xac\xee\x12\xf3\x53\xa5\x9c\x29\x0a\x34\x14\x03\x83\x2e\x02\xb5\x74\xa4\x3a\x42\xf7\x88\xa6\xbb\xfa\x6f\x9e\x1f\x13\x6e\x64\xd9\x0b\x36\xa3\x40\xf7\xfc\x88\xac\xe4\xf1\x02\x9a\xe7\xc8\x1e\x72\x04\x48\x3f\x18\x1d\xd5\x7d\x0e\x18\x89\x00\x27"
		"\xc2\xf4\xc1\xdf\x2b\xa5\xc8\x4b\xd1\x25\x7e\xc5\x19\x64\x72\x3a\x2f\xbc\x21\xb3\xfe\xbe\xea\xce\xda\x57\xaa\x30\xd8\xad\xde\xcc\x15\xab\xe2\x4f\xaa\x34\x3c\x6b\x76\xa8\x3e\x2d\x64\x9f\xd2\xf0\xea\xb2\x88\x9a\x60\x55\x2d\x0c\x51\x60\xaf\x39\x73\xee\x48\x23\x42\x9c\x23\x6a\x03\x58\x40\x53\xf7\x27\x38\x33\x8c\x04\x73\x3b\xd1\x5b\x58\xe8\xa9\xb2\x27\xb1\xe8\x40\x5f\x02\x88\x6b\x59\xba\x70\xbc\xeb\x9b\x85\xc1\x24\xf5\x05\x8f\xf9\xee\x29\x1c\xb6\x29\xfc\x9b\xaf\x6a\x81\x20\xfc\xae\x60\xfd\xcf\xc8\x60\x6b\x4a\xf8"
		"\x66\xef\xc8\xfd\x9e\xf5\x82\xa0\x8e\xf6\xbd\x16\xe6\x9f\xde\x10\xc2\xe5\x7e\x03\xe6\xcf\xc4\xb9\x92\x9a\xa4\x1c\xbc\x03\xf4\x19\x09\xd2\x4a\x7a\xd5\x60\x04\x70\xa1\x66\x98\x22\x6c\x0c\x6f\x08\x30\xe7\x55\x24\x1a\xc1\x36\xe7\x1b\xbb\xf5\xd5\x72\xc9\x2e\xc3\xd5\x02\x19\xb7\x86\x97\x03\x52\x8f\xd4\x74\x48\x35\xf9\x5a\x22\xd9\x7b\x00\x97\xdc\x27\x43\xd6\xd3\xc9\xad\x22\xb2\x8d\x9f\x10\xa5\x44\xd2\x71\x9e\x2d\x8a\x0f\x00\x4a\x74\xdc\x21\x57\x72\x96\xcd\x5a\xf7\x20\xe2\xe5\xb4\xa9\x97\x79\x8e\xa9\xa1\x17\x5f\xa8"
		"\x6a\xb0\x27\x54\x1d\xdb\x18\x84\xcb\x02\x92\x9f\xe4\xb8\x57\x74\xf5\x2a\x35\xe9\x88\x72\x69\xf3\x67\xad\x23\x20\xa6\xe4\xd5\x99\xfb\xd2\x85\x2b\x64\x83\xe5\xba\xcc\x1d\x36\x3e\x80\x09\x7d\xba\x14\x2f\x8c\xdd\x3f\x94\x5e\x88\x85\xe6\x57\x83\x74\xe2\xb4\x78\x8f\x4d\x56\xbe\x1e\x52\xe2\x6b\xa9\xb9\xb9\x61\xc1\xe8\xed\xc1\x94\x7b\x92\xed\x03\x06\x6c\x9a\xb7\xa7\xb5\xba\x9e\x07\x69\x90\x3c\xf9\xbc\x48\x11\x5a\xc3\x3c\x0e\x58\x26\x3d\xd1\x67\xd6\xfa\x67\xe8\x80\xb3\xcb\x56\x06\xb2\x27\xe5\x42\x65\x36\x62\x8c\x2a"
		"\x49\xaa\x22\x76\xed\xbe\x2b\x5b\xe6\x2e\x65\x38\x9b\xab\x7c\x7b\xe4\x77\x3e\xb0\xe5\xa6\x9c\x6a\xc3\x75\xd6\xd4\x3f\x66\x85\x18\x28\x7c\xcd\x41\xe3\xde\xc9\x17\xab\xb8\xfc\xa5\xb8\xa2\xb7\xb7\x66\xf7\xcd\xa6\x04\xd1\x0b\x04\xe8\xb7\xc1\x81\xd6\x5c\x2d\x94\xc8\xa7\x74\x6c\x24\xd8\xd0\x4b\xc0\x32\xa4\x6c\xf2\xa3\x82\x1e\xfe\xa4\x70\xf9\x4f\x44\xf3\xd8\xe1\x2c\x15\x22\x8c\x20\xb1\xe2\x8f\xab\x27\xe2\x4d\x67\xb4\xf4\x61\x77\x73\x4b\x32\x0b\xaf\x27\x2b\x7e\xc2\xa3\x5b\xa0\x0f\x8a\x68\x13\x86\x0e\x6f\x80\x5a\x60"
		"\xa0\xbe\x77\xa6\xe4\x23\x06\x34\x29\xcb\x76\x00\x9e\x74\x78\xb4\x7d\x84\x8c\x2d\x7a\x7a\x37\xb5\x32\xf0\x1a\xd5\x90\x61\xb8\x16\xe3\xc4\x7c\x7a\xd5\x00\xe0\x92\x8e\xbf\x67\x15\x71\x74\x19\x8b\x34\xc6\xe3\x2a\x0f\x0a\x33\xd1\xf3\x69\xa0\x45\x20\xd0\x2d\xdc\x3b\x4f\x89\x9a\xa8\xe7\xdf\xcf\x54\x76\x8d\x96\x0e\xd1\x62\x98\xb2\x79\x63\x66\xcd\x74\x6a\xc7\xb1\xb2\x0f\x4e\xf5\x05\x94\x72\xd7\xf7\xfd\x06\x1c\xb7\x68\xae\x3d\xd3\xf6\x02\xdf\x7e\xb4\x9c\xd5\x46\x0a\x93\x65\xf7\x17\xd2\xdd\x75\x16\x66\x4f\xda\x3f\xd3"
		"\xbd\x5d\x5a\xe6\xb5\xe8\xac\x78\x1c\x1d\x42\x8a\xb0\xa8\x58\xfc\xd1\xf9\x13\x47\x0b\xc3\x19\xd4\xfa\x54\x81\xd7\xe9\x84\x72\xfa\xc6\xb6\x74\xad\xe3\xaf\x8a\xdc\xc6\x41\xff\x3b\x7c\xef\x46\x75\x2f\xbe\xe0\x0c\x3a\x74\x87\x81\xa2\x0c\x56\xb4\xc0\xa1\x07\xc0\x40\xc6\x01\x95\xf6\x2c\xa8\xd2\xf5\xe3\x21\xb2\x79\x36\xf4\x1f\x85\x75\x7a\x57\x9d\xd1\xb8\x7e\x93\xa1\x42\xd4\xb2\x05\xc3\x4f\xfd\x8b\x19\x3e\x74\xc0\xab\xbf\xfd\x09\xc5\x2f\xa4\xa7\x05\x2d\x85\x5c\xf6\xb2\xc3\x14\x60\x23\xd9\x2c\xa5\x3d\xbb\xe6\x71\x7c"
		"\x32\x99\xed\xdb\x10\x4f\x28\xd6\x75\x31\x12\x8f\x3d\x31\x70\x03\xa4\x96\x23\x25\xf7\x80\x1e\x60\xe2\xab\xf3\x48\x3e\x08\x90\xab\x62\x78\x27\xfd\x3e\x59\x11\x8c\x1e\x67\x97\x74\x62\xdf\x76\xa5\xd0\x54\x6f\x95\xf6\x50\xaf\x7d\xdc\xc0\xa1\xb6\x49\xcd\x10\x95\x8e\x3a\xcd\xea\x8d\x52\x29\xfd\x41\x0e\xfe\x02\x54\xc2\x74\x59\x5c\x1e\xb0\x74\x8a\xda\x6e\x05\x7d\x2b\x5c\x4e\x6d\xea\x7e\x40\x54\xaa\x29\xb1\x42\x3a\x49\x46\x69\x0a\x5a\x28\xc4\xc4\x65\xa7\x39\xd2\x15\x0f\xf6\xc7\xb5\x90\xb4\xd2\xa2\x9b\x47\x9a\xe3\xf4"
		"\xce\x2d\x2d\xdb\x5a\xea\x33\x5f\xfb\x89\xb9\xf7\x96\xa5\xac\x27\x21\x0b\x9e\x95\x54\x8d\x19\xdd\xcb\x90\x2a\x3e\x57\x6b\x05\xc8\xca\xcb\xaa\x94\x55\x6f\xce\x21\xcd\x89\xe8\x7e\x27\x18\xc2\xe9\x37\xa8\xed\xc6\xe2\x6c\xeb\xed\xd7\x40\x76\x35\x83\xcc\x15\x22\xf9\x74\x9d\x3e\xd7\x01\x75\x77\xbb\x6b\x25\x27\xba\x1f\x85\x15\xe2\x90\x81\x93\x1f\x16\x74\x94\x69\xea\x61\x5a\xa7\x20\x0f\x37\x4a\x8a\x3a\x85\x86\x8c\x5b\x17\xb1\x2c\x31\xbf\x02\x9e\xff\x1d\xdc\x27\x84\x48\x2d\x1b\xcd\x68\xfb\x56\x86\xf6\x17\xff\xb2\x6f"
		"\xca\x41\x7e\x7f\x13\xbf\xaf\xdd\xd3\x5f\x69\x22\x7d\xf8\xa0\xee\x6a\x94\xbe\x6d\x95\x36\x31\x85\xbf\x1b\xf2\x08\xf4\x47\xe5\x60\xcc\x68\xe3\x50\x90\x15\x70\x60\x94\xbd\xe8\xb5\x61\x21\xc4\x2e\x5e\xc2\xa3\x95\x4d\xaf\x80\x42\x92\x33\x26\xdf\x85\xf3\xdd\xc3\xfa\x8d\x94\x32\xfe\x42\xe7\x6c\xe1\x86\xe9\xb0\xa3\x4b\xf5\x03\x36\x0f\x55\x1d\xda\x80\x15\x1e\x9c\x1c\xda\x25\x4d\x02\x32\x94\xde\x89\x74\xb0\xe4\x49\x25\x6c\xdd\x4d\x28\x12\x66\xe7\xeb\xed\xa3\xbc\x44\x62\xbb\x88\x42\xdd\x56\x3e\xd3\x4b\x91\x11\x6c\x92"
		"\xe0\x9c\xd6\x8b\xe7\x05\x3a\xed\x9f\x00\x5d\x32\x45\x9a\xa2\xd5\x76\xb6\xda\x08\x59\xa5\xab\x23\xd3\xf6\x99\x51\xc9\x12\x0a\x96\x43\xe5\x26\xe3\xda\x04\x0b\x5e\xff\xbf\xf5\x63\x90\x99\x73\x6f\xf8\xae\x0f\x0d\xcd\xa6\x12\xb4\xb7\xe7\xf0\x6e\xd5\x3a\xcb\x09\xc0\xef\xfd\x8c\x04\x94\x8c\x0b\x61\x5c\x24\x80\x6b\x27\x09\x21\x23\x72\xbb\xb8\x2c\xe9\x4f\x1f\xb0\x63\xf4\xed\xb3\x3c\x04\x12\x75\xd4\xc2\x06\xc0\xad\x1d\x54\x88\x5b\x68\x16\xd7\xf6\x14\xef\xdb\x3d\x55\x51\x42\x88\xcd\x38\x7d\x0a\xbb\x9b\x74\x66\xd8\xd2"
		"\x7f\x85\x9b\xf7\x22\x5c\xde\x1d\x31\x8e\xb0\x6f\xb3\x2e\x82\x8d\xcc\x71\x81\xe3\x8d\x26\xe7\xbb\x78\xc2\x02\x9d\x66\x4b\xb5\xe5\xad\xe4\xba\x04\xb3\x17\x5f\x1a\x86\xbb\xbe\xe7\xeb\x59\xd5\xa7\x78\x71\xdf\xda\x87\x82\xe9\xe6\x7d\x76\xd8\xb6\x9e\x83\xd3\x93\xbc\x13\x84\xef\x27\x55\x98\x5c\xab\x14\xca\x9b\x87\x29\x32\x10\xea\x2a\x51\x9f\x5b\x7f\x56\xf8\x2a\x58\x52\x30\x3a\x79\xb4\x27\x1c\x07\x2c\xa6\x88\xae\x97\x82\x11\x2e\xc1\x89\x83\x38\x54\xb9\x93\xf6\x2d\x12\xe4\x40\x53\x44\x73\xa2\x3f\x6b\xf7\xae\x2c\xbd"
		"\x5d\x94\x6c\x8f\x93\x03\xe0\x1e\xcf\x83\x68\xaa\x4f\x9f\x55\xf1\x47\xe2\x7b\xeb\x01\xc6\xca\xce\x87\x03\x6a\xf7\x8f\xf3\x8f\x5c\xfb\x34\xb9\xf8\x3e\x79\xb0\x95\x5c\x66\xeb\x12\xc0\x79\x02\xb6\x7f\x3e\x71\x48\xbe\x87\x33\xbc\x6b\xce\xcf\xf3\x29\x87\x36\xa5\xe9\x8c\xf8\x4a\x0f\x9b\x6d\xfa\x41\x8e\xfe\x02\xfe\xf0\x88\xe3\x52\x76\x76\x82\x53\x98\x8f\xc0\x4f\x6f\x6e\x19\xaf\x03\x59\x3c\x46\x7b\x72\x04\x23\x85\x1a\x23\xf2\x46\x4b\x16\xb9\xb7\x77\xa8\xb8\xfd\x19\x84\x98\x1a\x99\xcf\xcd\x21\x39\x8b\xbb\x2b\x9c\xc6"
		"\xfc\x7c\xcd\xae\x99\xd1\x3a\xde\xf5\xfd\xb0\x3e\x19\x54\x48\x3a\xd6\xd8\x31\xd3\xd2\xf5\xfc\xce\x7c\x54\xdb\xf6\x01\x18\xee\x69\x27\xe3\x12\xbe\xe7\xd9\xf7\x10\x32\x35\x92\xc7\xe6\x1d\x91\xd4\xad\xf9\xef\x63\x90\xcd\x6c\x6f\x94\x4d\xae\x85\xcd\x67\xbb\x26\x92\x44\x10\xca\x18\x48\x1b\x74\x4a\x6d\xfb\xbe\x87\x7e\xb9\x28\x2a\x8b\x3a\x7d\xf4\x85\x5c\x93\xb2\x82\xef\x3f\x56\xb9\x90\x11\x27\x20\x34\xf8\x32\xf7\xbc\xa8\x2a\x19\x90\xdc\xee\x6d\xc6\x86\xcc\x10\xec\x12\x0a\x17\x80\x7f\x5b\x56\x62\xd1\xbe\x54\x05\xb5"
		"\xea\x43\xc0\x28\x54\x20\xf0\xbe\xb5\xe7\x56\x4f\xf7\xd3\x7a\x06\x8c\xf5\xd7\x5d\xf4\xa0\x4a\x32\x0e\xad\xd6\xf0\xd8\xe2\x9f\xc3\xba\x20\x38\x40\x2e\xaa\x90\x1b\xbf\xae\xbe\x10\x9e\x72\xf7\xb1\x61\x41\x3d\x94\x72\x9b\x56\xa6\x88\x04\xc8\x20\x0b\xa1\x1b\xba\x49\xd4\x26\x2b\x91\x30\x54\x1e\xb4\x48\x89\xba\x49\x31\x0f\x15\xd8\xae\xe5\x11\x08\x2e\x87\x0b\xc7\x8e\x23\xea\xc8\x33\x30\x7b\x7d\x01\xfd\xe2\xf3\x39\xcd\x83\xe4\x28\x37\x38\x8e\x36\x68\x1b\x1f\xcf\x75\xc5\xbf\xb2\xf7\xcc\x78\x07\xf6\x69\x28\x02\x8d\x43"
		"\x57\x8b\x83\xb6\x85\xff\xc6\x85\xba\x73\x5f\x1b\x39\xa3\xcc\xb9\x2a\xff\xea\xc4\x55\x6b\xe9\x5e\xbf\xfc\xf7\x53\x51\x21\x86\x8e\x5a\x3a\xc8\xfe\x83\xe7\x6f\x98\x4e\x10\x3d\x1b\x20\xc8\x79\xa0\x46\xfe\x55\xd9\x0b\x38\x92\x40\x4f\x80\xaa\x02\x59\x7a\x21\x94\xdc\x15\x70\xdd\x33\x81\xb0\xef\x56\xb4\x7a\xda\x8a\x73\xbc\xc8\x92\x14\x34\x7b\x1b\x96\x82\x7f\x3d\xd3\xae\x58\xc7\xaa\x50\x54\x60\x2b\x52\xe5\x4c\x2c\x2d\x06\x7f\x72\x09\xfc\xc4\xc5\xe8\x8f\x98\x99\xd5\x08\x87\x18\x37\x19\x84\xda\xb2\xc6\x03\xbd\x3b\x64"
		"\xaa\x81\x3d\xb7\xeb\x4e\x84\xe4\xe4\xfd\x64\xa5\x18\xc7\xd0\x4b\x01\x90\x2d\x3a\xd7\xc5\xab\x43\x31\x0e\x2d\x02\xe3\x80\x2d\x66\xc1\x63\x04\x12\xde\x5c\x15\x77\x25\x52\x51\xf6\xc0\x7d\x07\x66\x2f\x60\x96\xb9\x19\x86\x34\xf9\xad\x03\x16\xb1\xf3\xed\xe8\xc1\x9d\xd3\x66\xf3\x6f\xc3\x04\x11\x7a\xba\x1f\xb4\xe8\x50\x31\x7c\x30\x9e\xbe\xb1\x33\xf8\x6d\xdc\xab\xe5\x12\x14\x50\x72\x70\xe3\xee\xa3\x86\xbf\xa4\xd3\x58\xd8\xf0\xf1\x6b\xc7\x3b\xac\x2a\x1b\x68\xe5\xe6\x6c\xce\x95\x1e\x35\x19\x7a\x4d\x66\xf7\x4f\x99\x8d"
		"\x77\x40\x82\xc2\x60\xab\x98\x46\xeb\x93\xca\x65\x05\xf4\x94\x5a\x45\x9f\x56\x7d\x4d\xf8\x10\x1e\xec\x66\x3e\x74\xdf\x18\x00\x50\x03\x7b\x4c\xf1\x10\xec\x64\x73\x5c\x03\x2f\x7e\x00\xb3\x97\x72\xdf\xed\x67\x84\xdf\x43\x43\x52\xc1\xa9\x81\x4b\xc7\xea\x1d\xfa\x8c\x17\x5e\xe8\x13\xd3\x79\x4c\xbc\x62\xcb\x88\xc4\x5f\x47\xd4\x34\xbb\x56\x8f\x37\x28\xca\x7c\x5b\x16\xd1\xcb\xcb\x1e\xd5\xde\xa3\x1e\x00\xb6\x28\xea\x7c\x7e\xf0\x72\xd4\x25\x39\x39\xb5\x1f\xb9\x8f\xa4\xa0\xf9\x58\xe7\x28\x7b\x5f\x60\xcf\xa6\xae\x23\x32"
		"\x85\x0c\xb2\x37\x33\x69\x2d\xc7\x3a\x8f\xe9\x6f\xd9\xc8\x53\x8d\x90\x74\x02\xa4\xd5\xd3\x87\xdb\x4e\x7f\xfb\xa7\x5a\x54\x30\xc5\x1a\x7c\xcf\x5e\xea\x18\x94\x75\x6d\x13\x34\xaf\xac\x6a\x2f\x02\xdf\x99\x7c\xca\x8d\x9d\x0b\x58\x71\xcb\xfc\x17\xab\x80\x14\xab\xb9\x8e\x39\xf8\xa0\x5a\xd7\xb9\x7b\x56\x70\xe0\xb0\xf5\x10\x56\xcc\xb0\x47\x15\x2d\xec\x78\x6b\x97\xb2\x01\x98\xee\xa4\x0f\x6a\xc1\x08\xeb\x6f\x2c\x56\xe6\x70\xcb\xd8\x46\xf8\x4b\x93\x63\xa3\x54\x0b\xc1\x08\xa9\xe3\xe0\xcf\xdb\x68\xb9\x76\x48\x08\x93\xc8"
		"\xca\x6f\xc3\xd8\x0d\x16\x3c\xb4\xef\x72\x8a\xdc\xd0\x74\x75\xef\x0a\x22\x3e\x24\x1b\x13\xe7\xff\x63\x9f\xfe\xbe\x1c\xb1\x97\xe4\xfd\x3e\x25\x50\xa5\x35\x2e\x64\x3a\x88\xa6\x30\xaf\xa3\x12\x02\x4f\xa1\x56\x01\x0c\xcd\xdd\x73\x57\x19\x50\x4b\xd3\xd4\xc9\xea\xec\xd6\x6a\xec\x3c\x48\x8c\x37\xa4\xcc\xd0\x1e\x87\x6f\x06\x91\x26\x89\xff\x4f\x80\xa4\x47\x97\xe0\xd8\x10\x97\xc3\x80\x07\x7e\x54\xe1\x28\x79\x86\x51\x35\x71\xec\x14\xc5\xcc\x16\xe6\x75\x0a\xa2\x73\x5d\x8a\xf9\xb6\x0b\xa0\xbf\x20\x5f\x36\x31\x22\xc2\x55"
		"\x3e\xd1\x5c\xb2\x46\xa4\x1f\xd2\x22\xb0\x4d\xfc\x7b\x56\x60\xf6\x51\xd6\x4b\x86\xb1\x03\x3f\x6f\x65\x8f\x11\x25\x4c\x64\x87\x52\x02\x3f\xbe\x21\x77\xf0\x18\x28\xaa\x0c\xc9\x82\xe1\x52\x2a\x0a\xfc\x8f\xd0\xcc\x13\xfa\xa0\xbe\x8f\x2e\x36\x60\x50\x7b\x21\xa3\x74\x55\x51\xae\xa3\xcb\xd8\x24\x34\xcb\x6b\x9a\x9f\x72\xc5\x53\xe7\x93\xb8\x83\x1e\xe2\x65\xf9\xb0\xe0\x8b\x8e\xb4\x48\x0d\xe3\x3b\x95\x75\x1c\xef\x9f\xcf\x9b\xd9\x6b\x87\x21\x09\xce\xfc\xb2\x47\x0f\xc1\x1b\xe0\xef\x43\x3d\x4a\x86\x62\x92\x74\x29\x85\x87"
		"\x1f\x87\xe1\xad\x35\x22\x73\xe1\x58\xe5\xaf\x5d\x98\x38\xce\x66\x83\x1f\x6b\x15\xcd\xa4\xa5\xca\x19\xe7\x87\x65\xc0\x7a\x08\xfa\xa8\x0d\xdc\x8f\x38\x5b\x71\xb2\xe7\xed\x02\x4e\xd2\x83\x04\x55\x17\x1c\x51\x42\x12\xab\xa6\x5b\x5e\xd1\x2c\xaa\xd6\x86\x9d\x02\x63\xf6\x78\x2d\xda\x6b\x42\xd5\x7e\xcb\xc3\x10\x09\x57\x06\x6e\x7c\xcd\x83\x27\x6a\xe8\x1c\xc3\x39\x56\x0c\xa4\x00\x1c\x9e\xb1\x2c\x13\x0b\x04\xb0\xf7\x5c\x0b\x10\x73\xcf\x4c\x23\x40\x4f\xe4\x8d\xed\x75\x77\x22\x63\x0d\xd6\x3b\xda\x44\x69\x73\xbb\x99\x37"
		"\x1a\x82\xdf\x67\xf5\xfd\x69\x77\x24\xd5\x2a\xb1\x24\x2b\x55\xee\x2d\x61\x88\xbf\x7f\xf4\xa2\x1a\xab\xd1\x55\x76\xf1\x3d\x29\x3f\xf0\xdd\xdd\xa4\x14\x2e\x9a\x11\x69\x40\x82\xc4\xf4\x16\xbc\xf9\x12\xb9\xd0\x32\x60\xe7\x7a\x02\x51\x60\x5c\xd4\x36\x6e\x50\x62\xb6\x51\xdf\xdd\x30\x34\xb1\x25\xd9\x16\xc3\x22\xe6\x30\xb1\x32\x23\x74\x47\x67\xd0\xfb\x58\xe4\xbd\x1d\x94\x3d\x54\xd3\x03\xc9\x75\x08\x61\x76\xb4\xcf\x18\x49\x84\xbc\x9e\xb2\xd9\xa3\x5b\xf9\x67\x2e\x37\x52\xa1\x5a\xf6\x71\xd9\x19\xda\x4d\x4c\x7b\xfb\xd6"
		"\x42\x6d\xf7\x88\xfb\x7a\x72\xc2\x9e\x07\xee\xff\x19\x91\x05\x68\xca\x3f\x7d\x4f\x2c\x92\x43\x7b\xf5\xf0\x1c\xb7\x92\xc0\xe6\x55\xde\x0a\xd3\x81\xd6\xc0\x41\x94\x80\x98\xf6\x7d\x7a\xdb\x9a\x29\xbc\xce\xd5\xa6\xda\xfb\xe0\xfc\xf1\xcf\x78\x04\xe0\x76\xa6\x6e\x35\xa1\xfb\xc8\x71\xbe\xb0\x2c\x00\x26\x25\xef\xfa\x55\x8e\x19\x50\x5c\xf4\x22\xba\x20\xdc\x4c\xb2\x85\x85\xd7\x81\x36\x04\xf6\x7e\x24\x24\x68\xb3\xa6\x38\xd9\x0a\x3c\x3a\xb0\xfa\x7d\x40\xf3\xaf\x14\x78\xaa\x01\xf9\xa5\xc6\xf9\x1c\x3a\xc4\x90\xba\xb1\xb4"
		"\x74\x8d\xcc\x5f\xed\x7f\x27\xba\x96\xf7\xea\xe3\x24\x46\x87\x7a\x62\xb8\x56\xcc\xa3\x4b\xc3\xb6\x58\x74\x17\x1b\xab\x67\xab\x9f\x7b\xc7\x18\xa9\x3a\x11\x91\xb5\x76\xc0\x15\x19\xb3\xf8\x0c\x36\x0f\xe6\x5b\x42\xb2\xc4\xe1\xfe\xca\x45\x68\x99\x20\xc6\xa5\x81\x29\x69\x6c\xda\xd2\xcc\x19\xfa\xe1\x4f\xec\x43\x07\x88\x6f\xec\x0c\xd8\xb9\x4d\x51\x99\x71\x98\x3b\x39\xfd\x5d\x21\x88\xcc\x1a\x15\xf6\xe6\x7e\x47\xcc\x52\x09\x7d\x1f\xc2\x3c\xdc\x85\x92\x9a\xd4\x4a\x00\x31\x35\xfa\x9d\xca\xde\x78\xea\xb6\x57\xd6\x0a\xc8"
		"\x92\xf6\xa1\xfa\xdc\x95\x6e\x95\x70\xa9\x9c\xd5\x6b\x7d\x36\x09\x84\x6b\x46\xa5\x9e\xcb\x24\xee\xe9\xe0\x46\x55\x4e\x54\x49\x2e\x19\x05\x90\xc7\x24\x39\x19\xc8\xe3\x36\xef\xd8\x26\x42\x48\x15\x95\x65\xa5\x1f\xb8\x5f\x88\x1b\x4a\xe3\x2b\x5f\x3e\x30\x95\x10\x84\xba\x84\x07\x65\x1f\xbf\xf2\xd2\x11\xa2\x91\x50\xc6\x65\x13\xff\xf0\xbd\x8e\x46\x80\x9c\xf4\xee\xcb\xef\x5b\x35\x9f\x0d\x25\xce\x8a\x44\xca\x5a\x88\x04\x99\xee\x32\x45\x63\x4e\x6b\xcd\xc3\xba\x17\x5f\x4a\xb0\xf9\x59\x3f\x5d\x2d\x83\x3a\x21\x12\x38\xbf"
		"\x95\x7c\x99\x8d\xd2\xbf\x30\x0f\x42\xe6\xc7\x4a\xce\x53\x55\x76\xd2\x15\xff\x64\x1e\xd9\x14\x6b\x3f\xdb\x3b\x9c\x9b\x2b\x44\x0b\xf2\x82\x9b\x24\x6b\x02\xca\x2e\xba\x5d\x03\xdf\xeb\xff\x95\xce\x90\x51\xa2\xd2\x24\x9a\xe8\xe9\xee\x46\x08\x85\x08\x08\x8c\x7b\x7e\xe1\x2d\xd9\xaf\xcc\x30\x1e\x41\x7b\x6d\x8e\x1e\x98\xcd\xf7\x1b\x59\x02\x4c\xea\xb7\x6f\x41\xf6\xbc\xe6\x99\x05\x7a\xdc\xc3\x53\xd8\xad\x9b\x97\xa9\xb0\x06\xf4\xdc\x75\xec\x59\x97\xdb\x89\x2a\x53\x80\x77\x5a\xbe\x20\x25\x44\x47\x99\xc7\x3a\x6d\x99\x85"
		"\xac\x2a\x29\x0c\x59\x9a\x2c\xb6\x38\x7b\xda\xc3\xc8\x30\xcb\x4d\xe2\x87\x7f\xbe\xe4\x95\x40\xf9\xd8\x69\x59\xa1\x78\xac\xfc\x25\x10\x65\xcd\x9b\xb5\x6b\xc8\xe6\x04\x0f\xc8\x50\xa3\xed\x17\xf9\xf6\x8a\xb0\x36\xe5\x01\x9a\x85\x46\xae\xe2\x72\xf3\x89\x64\xc7\xcd\xd7\xe9\x13\x1b\x88\xad\x31\x2c\x6b\x33\xe5\xd6\xb1\x0a\x35\x7d\xed\x83\xa5\x20\xdd\xc8\x57\x4b\xe2\x9a\x37\xa4\x47\x61\x7e\xe1\x50\x1d\x93\xf5\x10\x86\xb2\x37\xfe\x62\x13\xfb\xe8\x45\x58\x1f\x34\xcd\x72\xd0\xcd\xd6\x42\x2b\x4b\x7a\x19\x8c\xd2\x3a\x4c"
		"\x68\x11\x7c\x2f\xf2\x14\xce\xd3\xbc\x55\x8e\x7c\x56\x65\x2f\x68\x5b\xe2\x08\x47\x86\x7e\x5b\x1c\x5c\x8f\x92\xe5\xb2\xd1\x1a\x9c\x68\x7f\x87\xb1\xb3\x0a\x2d\x16\x63\x8d\xf9\xed\xd5\xb9\x4c\x31\x9c\x60\x77\x9b\xac\xa2\xf8\x95\x8a\x0b\xf5\x34\xcc\xe9\x6f\x5b\x3b\x8d\xea\x7a\xa9\x8f\xcf\x48\x7c\x72\xe0\xb5\x91\x9f\x3a\x54\x04\xde\x2e\xeb\x16\x1d\x8a\xb7\x90\x84\x97\xa5\xe2\x39\x4e\xfc\x1f\x38\xcd\x04\x30\x43\x7b\x3e\x7d\x6d\x64\x6b\xe0\x97\x05\x41\x67\x92\xe8\x60\x96\x5f\x73\xa6\xa6\x8e\x81\x27\x9b\x71\xb1\x05"
		"\x9e\xac\x3f\x0f\xe2\x42\x57\xd7\xbd\x05\x4a\xef\xff\x52\x62\xed\xba\x6f\xd7\x23\x48\xdc\x33\xd5\x74\xf4\x23\x62\xef\x28\x7a\x57\xa4\x1b\x21\x6b\xef\x84\x10\x91\xc7\x63\xb1\x62\x32\xd7\x59\xa6\xbf\x5e\x43\x1f\x1e\xc1\x01\xfa\xa2\x85\x85\x91\x7b\x5b\xb5\x17\x40\xd8\x33\xa7\xd5\x90\x8b\x43\x91\x13\xf9\x3e\x87\x42\xe8\x11\x32\xd1\xb8\x68\xc6\x55\x27\xa3\xe5\x76\xa2\x4c\x83\x4c\x5f\x6d\xcb\x2b\x67\xad\x7a\xcb\xd4\xdd\xa3\xeb\x2a\xf1\x6d\x59\x9b\xb8\x7e\xa4\x69\x9a\x4b\x1b\x99\x5c\xed\x06\x1c\x73\x0c\xef\x23\xae"
		"\x24\x04\xa0\x25\x98\xd3\xe5\xd3\x12\x81\xb2\x71\x81\x5a\x58\x95\xe2\x78\x60\x60\x70\x96\xe8\xf6\xb1\xfa\x83\x02\x08\xec\x26\xee\x33\x5d\xc4\x4d\xf9\xef\xcd\x96\x36\x97\x8c\x47\xc1\x1a\xaf\x58\xa6\xa9\x54\x20\xc5\x68\xc6\xa0\x3f\xa5\xe6\x87\x07\xb7\x48\xd9\xb4\x86\x1f\xb2\x3f\x4a\x43\x35\x62\xb4\xbd\xdd\x78\x07\x47\x00\x0f\xf0\xa2\x61\x9f\xd8\xba\xb7\x8c\x60\x65\x88\x3f\xef\xe6\x09\x8f\xbe\xa4\x42\xd4\x09\xab\x15\x09\x1b\x6f\x2a\x54\x86\x3e\x27\xf7\x19\x7c\xa9\xc5\x18\xef\xbf\x1f\xab\x92\xc7\x81\xa1\x84\xd5"
		"\x5a\x4c\x62\x95\x8a\x1f\xd5\xc9\x7e\xb2\x3d\x69\x92\x55\x81\xac\x4e\x9e\xcd\xb3\xa0\xa2\x87\xf3\x3b\xec\xea\x66\x3b\x84\x6c\x1c\x10\x0e\x9c\xa4\xfd\xa5\xf4\x12\xb4\x3a\x0f\xc7\x1e\xd3\xc3\x1a\xdb\x30\x31\x00\x3c\xae\x46\x5a\x2b\xd4\x84\xc9\xbb\x80\x8e\x9f\x4d\xfb\x35\x4b\xa3\x5d\x5f\x95\xc6\xac\x52\xf2\xa4\x3d\x6b\x26\x53\xfc\xd5\x6b\x4b\x3e\x6d\x4b\x05\xbe\xc5\x63\x1d\xb8\x61\x6f\xa9\xae\x9d\xcd\xc9\x0c\x24\xa8\x2b\xf1\x0c\xd8\xd2\xf7\x7c\xe9\xe9\xe1\x2a\x96\x6c\x69\xc1\x60\x28\xee\x40\xdc\xc1\x4c\xcb\x0c"
		"\xfc\xc1\xc0\xb2\xea\x05\x1e\xca\xe0\x0a\xb3\x68\xc6\x89\x20\xa3\x93\xdb\x0c\xf7\x9f\x93\xc6\xae\xee\xd1\x68\xc5\xcd\x72\xf5\x27\x25\x84\xdb\x59\x99\xec\x3c\x73\x89\xd7\x9e\xcb\x54\x57\x29\xea\x76\x8c\x9f\x00\xf3\xef\xce\xf4\x5e\x7c\x93\xfa\x58\x7d\x8e\x95\xb8\x7c\x26\x35\xbb\x93\x4d\xf1\x27\x99\xf9\x8a\x38\x5e\x1b\xf1\xf8\xb2\x1c\x1e\xc4\x04\x9d\x08\xf0\x42\x7e\xfa\x02\xdd\xee\xac\xc6\x7c\xa9\x9b\x3c\x7b\x3b\xf3\xac\x2f\xba\x7f\xdf\x6d\x56\x24\x23\x99\x45\x33\x9c\xe0\x48\x9c\x7e\xc4\xdd\x4e\xb0\x1e\x37\xb0"
		"\x8c\x3a\xaa\xb6\xb2\x14\x9b\xc1\xf9\xa7\x40\x7d\xbe\x01\xc7\x37\xa0\x4f\xb0\x7d\xf1\x89\xb1\xcf\xc7\x33\xba\x14\x8f\xfe\x2f\x26\xf1\xdc\xa3\xd0\xe2\x5e\x21\x85\x8c\xbb\x6a\x9e\x1b\x3c\xaf\xe7\xf4\xae\x6a\xa8\xba\x89\x91\x63\x22\x5a\x82\x0a\xfd\xa8\x34\xa0\x80\xd0\x52\x7d\x69\xa3\x9c\xe0\x3b\xfb\x6d\xc5\x32\xc0\xdb\xe8\x66\x61\x26\xe6\x6d\x28\x78\x6e\x41\x5b\x46\x85\xe7\xcd\x74\x65\x40\x04\xc4\xa9\x8e\xee\x7e\xa2\xbf\xd4\xbe\x81\xd6\xf6\x29\x94\x6f\x78\xe8\xc9\xb2\x23\x99\xfd\x66\x83\xe5\x35\x1f\xdd\x1f\x25"
		"\xc5\x94\x5f\xd1\xa4\x79\x9b\x96\xc2\xe9\xba\xdb\x5b\x8b\xc7\x6e\xe5\x79\x51\xb3\x59\x05\x35\x1c\x4e\xd7\xa1\x1c\xe7\x15\x88\xfd\xab\xf6\xe8\x87\x4e\x53\x91\x59\x00\x23\xfc\xb0\xa7\x84\x76\x77\x34\x54\x12\xf6\xd5\x66\xb3\x89\x05\x4b\x0e\x5c\x97\x3b\xcb\xdc\x8e\x1e\x77\x72\xe9\xc3\xed\xb6\x2f\x65\x60\xc5\xa5\x73\x9b\x1c\xbe\xc5\xbb\x62\x21\x02\xba\xe7\x64\xcb\x8c\x73\xb4\x50\x64\x60\xd9\x30\x5e\xfb\x12\x41\xc5\xe9\xa2\x96\x4c\xe6\xcc\x49\x26\xd2\x3c\x9e\x9f\x0b\x4b\x03\xfc\xb5\x27\x87\x65\x42\xec\x73\xf3\x93"
		"\x36\xb8\x00\x37\x6a\x64\x46\x1f\x57\xa6\x59\x0a\x61\x36\xd5\x09\x8d\xa6\x34\x18\x34\x7e\xa9\xf9\xa1\xc6\xd6\x16\xd5\x0b\x09\x6b\xc4\xeb\x17\x29\xb5\xca\x8b\xa1\x66\x7c\xe4\xca\xdb\xf4\x0f\x30\x52\x38\x22\x8c\xc4\x97\x30\x6b\x47\xa1\x32\xf2\xcb\xd3\x98\x33\xdc\xf3\x47\x40\xc7\x78\x65\xad\xa5\x81\xe1\x97\x5c\x0a\xd8\xfd\x86\x49\xc6\x0e\x5f\x7b\x44\xd4\xda\x99\x4f\x60\xe0\xbe\xbc\xa6\xf2\xca\x66\xc8\x00\x02\xe8\xf6\x04\x27\xe1\xc7\x1e\x3e\xac\xe4\xef\x37\x06\xa8\x57\xa2\x83\x61\x6d\x3b\x2f\xc4\xde\x42\x75\x21"
		"\xbe\x51\x92\x4e\x75\xc9\xaf\x2b\xfa\x11\xe7\x38\x31\x1f\xab\x83\x0b\x29\x90\x3f\x4f\x9a\xda\xaa\x85\x80\xb7\xc7\xe2\xca\xfa\x6b\x3d\x03\x80\x3b\xa3\x79\xe2\xad\x82\x81\x91\xbb\x2f\x67\xe3\xa0\x84\x37\x15\x26\xc1\x5b\x29\xc5\xb9\xf0\xe4\x04\xed\x70\xc9\x02\x61\xf1\x15\x1a\x7a\x68\xff\x81\x21\x4d\x27\xa1\x46\xa4\xbf\xd4\xce\x74\xd1\x84\xa1\x07\x66\xe6\xa6\x4e\xf2\x64\xca\x4a\xb6\x25\x5c\x1d\xa9\xad\xfb\xc9\xec\x55\x9f\xcf\x1a\x8a\x16\xa7\x70\x9d\x92\xdf\xf9\xb7\xcc\x6b\xc7\xa8\x69\x0a\xc0\x92\xf0\xa0\x9d\x6b"
		"\x74\x19\x84\x71\xc3\x11\x48\x64\xe4\x36\x1b\x36\x92\x9a\x4e\x24\xf4\x7c\xdb\xf2\xb3\xbe\x86\x94\x15\x0b\x03\x26\x0d\x69\xeb\x8e\xf1\x04\xfc\x4c\x2b\x31\x7c\x75\x15\xa8\xb2\x31\xe2\x68\x43\xb5\xc2\x7c\x43\x5f\x52\x95\x59\x7a\x1f\xb2\x70\xd1\xdd\xf4\x7e\x41\xfa\x38\xb2\x0e\xd1\xd4\x6b\x2e\xb5\x25\x13\x10\x7f\x49\x37\xc4\x2a\x38\xe7\x38\x9d\x10\x51\x4d\x9a\x29\x1d\x5d\xd1\xf1\x5a\xff\x5b\x98\xa8\x63\x0b\xf7\x65\xbe\xf4\xa4\x48\xc9\xbf\x7a\xb2\x44\x30\x6b\x41\xee\x7b\xfb\xc6\xd6\x54\xe7\x49\x5f\x56\x6d\xd3\x79"
		"\xed\xb4\xf5\xf9\x79\x6d\x19\xb5\x75\x74\x73\xf0\x10\x54\xc8\xfd\xef\xb8\x8d\xe7\x6b\xaa\x84\x5d\xf4\x13\x84\x2c\x64\xcd\xca\x97\x01\x0f\xc5\x43\x2c\xb1\x5b\x45\xc4\x10\xb0\x79\xa6\x06\xf1\x53\x0d\xe1\x67\xa5\x18\x2d\xd4\x4b\x8c\xe5\x40\xad\x5c\xce\xb6\x31\x4c\xf2\xb5\x7a\x43\xba\xc3\x88\x2c\x9a\x6d\x38\x77\xa9\xef\x65\xcd\x36\x3a\xaa\x6d\x09\xb1\x22\x14\x82\x60\x2a\xaf\xc2\xa1\xa2\x6e\xb0\xa1\x4f\xff\x28\x1e\xee\xb8\x31\xe7\x99\x89\x46\x17\x4e\x9a\x1d\x55\x5d\x70\x9b\x0f\xa0\x95\x5b\x7d\x19\x8f\xac\xc8\x20"
		"\xa0\x47\xa5\x42\xac\x6a\x6d\x0a\x6b\xf3\xcd\x1a\xe7\x9f\xf2\x3a\xff\x44\x6f\x0c\x88\xfd\x55\xdf\x73\x36\x95\xbc\x6f\xca\x4a\x54\xd2\x97\xba\x20\x08\xc3\x6c\xb5\x4e\x20\x93\xae\x4e\x00\xd7\x1f\x04\x31\x2e\xd5\xb0\x12\xf9\x02\xb0\x4b\xf2\xf7\xe7\x2c\x75\xbc\xfc\xce\xad\x60\x82\x0c\xb4\xaf\xff\x9d\x35\xbc\x1c\x46\x3a\x63\xaf\xd0\x4e\xf3\x66\x21\x96\x7d\x61\x41\xe8\x92\x50\xd2\xaf\xef\x44\x46\xb1\xd4\xce\x27\xb2\x97\x34\xd0\x64\xa3\x4e\x17\xac\x03\x98\xe0\xde\x68\xc5\x67\x29\x74\x2a\x00\xde\xf2\x9f\x5a\x53\x7d"
		"\xf8\x1d\x45\xd9\x00\x28\x67\x85\xc2\xf8\xdd\xaa\x46\x30\x9d\xd5\x2e\x63\xb1\xde\xb6\xa5\x2d\x27\x3c\xdd\xc9\xd2\x0d\xe0\x47\x59\x4d\x1f\xfa\x9d\x62\xb4\x77\x83\x2b\x7e\x94\x61\x32\x76\xfa\x47\x0e\x09\x62\x33\x86\x9d\x42\x68\xa8\x8e\x9d\x79\x05\xd2\x8b\x84\xa1\x79\xbc\x81\xa6\x90\xed\xde\xef\xa9\x5c\x2c\x0c\x53\xe6\x7d\xea\xd3\x4f\xda\xa7\x0f\x71\x2b\x6c\x9c\xfb\x25\xf9\x56\x87\xbc\x70\x68\x93\xc3\x28\x25\x5f\x53\xba\x3d\xe3\x43\x24\xf6\x3a\x0c\xf7\x2f\x72\x5d\xe5\xab\xee\x28\x38\x93\x11\xcf\xaf\x83\xc4\x46"
		"\xf0\x08\x96\x84\x59\xbf\x90\x29\x93\x13\xcc\x7c\x11\x94\x19\x19\xa5\xbb\x03\x32\xd9\xec\x1c\x0b\x7a\x2e\x47\xcc\x80\x78\xc7\xc3\x2b\x0e\xc2\x95\xb6\xab\xa3\xe3\xd0\xbb\x79\x08\x41\x72\x5a\x2d\x59\x6b\xdc\xf0\x36\xc1\x9c\x75\x27\x60\x57\xc5\x54\x04\x72\x79\x6f\x03\xb0\x13\x0b\xe7\x25\x5e\x8e\x27\x35\xcc\x31\x9b\xe0\xb0\xfc\xe4\x7b\x3f\x25\xbd\xc3\x75\x73\x65\x80\xd7\x90\x27\x9f\x64\xc9\x7f\xb1\x2d\xe9\x8c\xd3\xa1\x67\x3d\xcc\xc4\xe8\x83\xa3\x88\x23\x04\x22\xe8\xe1\x55\xaa\xc1\x35\x0e\x49\x85\x0b\x3b\xd5\xc4"
		"\x2e\xb1\xc3\x22\xab\x5f\x4a\x53\x1e\x7a\xda\x0f\xc0\x39\x79\x5c\xee\x6d\xa3\x75\xfd\x22\x8f\xf8\x13\x13\xbc\x98\x3a\x3b\xfd\x3a\xeb\xf9\xdf\x36\x63\x42\x3e\x50\x56\x08\xf4\x21\x53\xb1\xc1\x26\x2e\xa7\xfd\xd4\x41\xa5\xeb\x67\x55\xe6\x56\xdb\x1d\x03\xd1\xa9\x24\x49\x08\x8d\x3c\xa3\x39\x72\xd5\x48\x96\x27\xa5\xd0\xea\xb1\xf3\xd7\x8e\x50\xbc\x03\xa6\x1f\xed\x98\x21\x78\xd4\xfb\x29\x01\x88\xdd\x46\x10\x74\x80\xd7\x6f\xb3\x26\x85\xa9\x2a\x46\xf7\x94\x58\x6f\xa8\x81\xe3\x6a\x94\x89\xd2\x98\x2d\xc9\x90\x4d\xb9\xfd"
		"\xa7\x24\xe2\xe3\x15\x83\x6e\x4d\x6a\x4d\x49\x96\x6e\x43\x99\xba\x55\xa6\xd5\x41\x83\xcc\xe3\x89\x86\x62\xb5\xf5\x1a\xf0\xbc\x33\x95\x7d\xc7\x60\xaf\xe3\x88\xba\x4a\xd2\xc8\xb2\xb9\xe1\x60\xcf\x6d\x6a\x0b\x4e\xe6\x46\x36\x1c\x36\x9f\x54\x03\x04\xbf\x0b\x46\x0f\x32\xbd\x98\x57\xd8\xea\x3d\xa9\xec\x69\x63\xdf\xda\x3f\x9f\x5c\xfc\x1b\x96\x3e\xd4\xfa\x5d\x77\xa7\x13\xa8\xb5\xa2\xb2\x76\xb5\x41\xdb\xb7\xea\x5c\xde\xc0\xd0\x34\x46\x09\x53\xc9\x6e\xb1\x48\xda\x56\x95\xc1\x09\x40\x5f\xb6\x2d\x19\x66\x44\xdf\xf4\x69"
		"\x09\x90\xe8\xf1\x15\xba\x13\x9a\xc5\x4d\x86\xff\xd7\xb6\xff\xfd\xc8\x69\x85\x05\x91\xd5\xd2\x8c\xc0\xbe\xca\x3d\x66\x69\xac\x6d\x6e\x41\x65\xa9\x62\x83\x5e\xa1\x74\xf0\x73\x1a\x2a\x5f\x04\x4d\xda\x61\x96\xb2\x17\xf9\x9b\x2d\x80\x58\x70\xc9\x2f\xc3\x16\x79\xa9\x2d\xe4\x74\xef\xce\xc9\xea\xff\xf6\x15\x24\xa3\xad\x66\xfa\xd4\xaf\xf1\xc3\x57\xef\x33\x44\x93\x04\xfc\x84\xf3\xda\xa8\xfd\xe0\x7d\x6e\xe1\x7d\xef\x50\xaa\x8b\xbc\x64\x0b\xdf\x43\x2e\xf6\xb1\x68\x59\x51\x5d\xf4\x27\x63\xfc\x81\x7f\x20\xa8\xaa\x26\xe8"
		"\xac\x36\xc4\xec\x05\x79\xdd\xf7\xe2\x82\x74\xab\xa1\x7e\xd5\xe9\x91\x63\x2f\xb4\x20\x16\xd7\xa6\x4a\xa0\x6d\xc0\x52\x2a\xbd\xd0\xee\x7a\x0a\xc2\xd7\x25\x36\x50\x4b\x22\x52\xf1\x83\xac\xe4\xb3\x0f\x74\x09\x35\xd4\x9e\xe0\x53\x2d\x8f\x7c\xa7\xfd\xb0\x47\xc3\xbb\xad\xcc\xa9\x8e\x20\x89\xa2\x8e\x6f\x25\x99\xd5\x0f\xc0\x86\x00\xce\xf8\xac\xc3\xcf\x3c\x8d\x67\x22\xa3\x23\x71\xe0\xcd\x48\x36\x63\x75\x29\xbd\x48\x23\x30\x5e\x19\x1e\x27\x4b\x8f\xac\x3d\x11\x86\x97\x4e\x5a\x5a\x4e\x14\x1d\xc8\x72\x14\x52\x05\xd0\x4a"
		"\x55\xeb\x5e\x67\x95\x85\xcc\x6b\x13\x1a\x22\x50\x99\x23\x2a\x67\x54\x1c\xb2\xaa\x25\xf1\x95\xea\xd1\xba\x94\x6e\x5a\x2f\x6c\x17\x98\x50\xca\x69\x7b\x14\x42\x3d\x1b\xe3\xe1\xe4\x64\xca\xcc\x8a\x98\xcb\xba\xa5\x38\x4d\x9c\x84\x7c\x77\x45\xd1\x24\x32\x5e\x61\x07\xae\x42\x9b\xfd\x0c\x43\xd0\x53\xf6\x70\xc0\xf6\x40\x92\xf7\xbf\xc6\xf2\x2e\xc4\x48\xc1\xfc\x4f\x06\xde\x17\xed\x4c\x61\xd6\x98\xa0\x87\x2b\xd3\xf2\x6a\x6b\xae\xd6\xfb\x8a\xde\xd2\x38\xcb\xb9\x91\xe8\x41\xc8\xa3\xe7\x64\x92\x80\x42\xea\x73\x17\xf5\x56"
		"\x13\x14\x78\x51\x16\x62\x3e\x5f\x5b\x0e\xc5\xe1\x14\x0d\x2d\xe6\xcc\x9b\xbc\x13\x65\x4d\x52\x87\x85\x1f\xef\xbb\x7a\xc8\x43\x2f\x9f\xe9\x6e\x36\x36\x87\x3a\x45\x1c\xe7\x75\x69\x41\x33\xf9\xfc\x2a\x23\xb3\xdc\xa8\x6f\x28\x65\xa0\x80\xdd\xa7\xca\x44\x3d\xb7\xde\x6f\x0e\xe3\x04\x4b\x1e\xa9\x13\xb2\x9e\x18\x51\x5a\x44\x08\xdc\x2c\x9b\x4f\x3e\x6f\xa5\x60\x33\xb7\x1f\x48\x7d\x92\xae\xeb\xc3\x4c\x14\x7f\xaa\x32\x40\x15\xfa\xf1\xeb\x8c\x73\x03\x55\xa1\xac\xf7\x44\x71\xc8\x85\x34\x50\x2e\x21\xc7\xeb\x1b\xe2\x13\xea"
		"\x0c\xc9\x40\xdd\xea\x0b\x2e\xcb\xb7\xa5\x55\x0b\x24\xa0\x6a\x7d\xc9\x40\x17\x33\x35\x83\x1f\x7f\xb0\x5f\x1d\xb1\x51\x38\x6a\x47\x95\xba\xfc\xfc\x5f\xa2\x91\x4a\xd9\x29\xef\xb0\xa8\x90\xa9\x27\xdb\xc4\x45\xfb\xea\x1d\x34\x92\xb5\xd7\xf9\xf2\x18\x12\xdd\x78\x87\xd0\x50\xca\x3b\x01\xd3\xf4\x6c\xb4\x73\xe3\xde\x21\xb0\x4f\x14\xd8\x58\xf4\xf9\x0b\x2c\x5a\x62\x9f\x2e\xd5\x44\x22\xb9\x61\x04\xc1\x2f\x8f\x22\x58\xc5\x08\x02\x13\xb0\xbd\xd7\x46\xa6\x12\x6e\x29\x25\x9b\xec\xb5\xb5\xf6\x71\x60\x9d\x91\x47\x95\x93\x7b"
		"\xe1\x3a\x3b\x4b\x06\x68\x21\x5d\xef\x3a\x72\x48\xf9\xe2\x05\x59\x03\x66\xe3\x41\x8b\x0f\xf2\x5f\x87\x8a\xfe\x45\xa5\xd4\xe1\x98\xdc\xcf\x02\x3b\x71\x3c\xf2\xd1\x63\x13\xf4\x8d\x61\x89\x2a\xb1\xed\x9f\xeb\x05\x24\xe1\xa6\x5d\x40\xc8\x86\xc3\xf3\xdc\xd7\xd7\xab\x5c\xb2\x42\x2f\xe2\x42\x5e\xd4\x95\xf1\x0d\xe6\xe4\xd6\x68\x34\x6b\x6f\xaa\x01\xc7\x9b\xc6\x08\x01\xe6\x8b\x40\x87\xff\x95\x90\x94\x7e\xdc\x8c\xbb\x99\x4f\x67\xae\xd0\xcf\x3b\x87\xfe\xf5\x80\xde\xe2\xcb\x70\x7a\xf2\x22\x8b\x43\x7f\x6a\x31\x96\xa2\xc6"
		"\x5b\x90\x04\x17\xba\x60\xf7\x73\x60\x6b\xf1\x11\x30\xea\xbc\x01\xee\xad\xd9\xc9\x89\x2a\xd8\xcf\x69\x42\x12\xae\xb5\x7b\x81\x10\xa9\x7b\xf9\x7d\x7a\x41\x9e\x29\xff\x18\xe5\xf7\xfd\x5a\xca\x8b\x64\xb2\xca\x1c\xb1\x13\x3d\x83\xf1\xd9\x8d\xd9\x55\xe3\xdd\x57\xe1\xce\xb5\xc3\x15\x54\xbe\xf5\x42\x6e\x2a\xfc\x92\x55\x86\x6c\x3b\xda\x24\x2c\x60\xee\xe7\xc3\x33\x9f\xed\x97\xd6\x36\x71\xe2\x24\xe8\x37\xf3\x40\xe0\xa6\x24\xda\x24\xb0\xd2\x3f\xed\xde\x5a\xcc\xc8\xc2\x02\x09\x9e\x92\xcb\xc6\x03\xc1\x3f\xd1\x86\x9e\x36"
		"\x18\x67\x27\x10\x40\x7e\x1b\x45\x29\xce\x1f\xa7\x54\xb6\xd6\x17\xb6\xb8\x58\x84\x23\x0f\xe4\x40\x58\x5e\x47\x3b\xad\xfc\xcb\x22\xf2\x22\x4c\x85\x07\xb1\x0e\xdb\x91\xa3\x49\xab\x51\x37\xa7\x9d\x10\xed\x24\x12\x60\x6a\x24\x29\xa2\x77\xdb\x2e\x9e\x11\x9b\x30\x5a\x22\xd1\x25\x40\x3d\x63\x19\xd0\x92\x0a\x90\x98\x32\x89\xc4\x28\x3e\x77\xdc\xdb\xae\x1b\x3c\x1d\xe5\x7a\x51\xb6\x9d\xb6\x19\xc7\x46\x01\xe0\x39\x84\x94\xf2\x0e\xb3\x2b\x7a\xe3\x94\xa3\xcb\x9c\x65\xb8\x4f\x48\xcf\x1f\xed\x2d\xef\x49\x76\xb4\x9f\xfd\x48"
		"\x79\xf9\x74\x13\xd3\x4d\x93\x2e\xa3\x82\xe2\x0e\xd7\x1f\xc7\x0a\x68\xfa\x76\xe6\x70\x15\x7d\x58\x27\x7c\xd2\x7c\x7f\x94\xae\x00\x5c\x90\xad\xe8\x87\x37\x1d\xf2\x50\xce\xab\x55\xcb\xc2\x5e\xf3\x17\xa5\xf4\x42\x3a\xb4\x04\xaa\x8a\x69\xbb\x00\xff\x20\xab\x34\x31\xda\x6c\xca\x77\xda\x1c\xfe\x7e\xb2\xf9\xe5\xa2\x2d\x0a\xd1\xf3\x15\x83\xed\xc6\xc2\x94\xb8\x12\x94\x48\x36\x8b\x5e\x95\xd4\x9e\x9e\x17\x09\x71\x8c\x41\x8c\x65\x30\x6b\x64\x0f\xbe\x4a\xc3\x83\xce\x06\x3b\x79\x75\x80\xf4\x5d\xb6\xb1\x5c\xe6\x49\x18\xd1"
		"\xe3\x25\x97\xfa\x3b\xee\x7c\xec\xb0\x76\xd9\x75\x93\xf0\xa6\x30\xca\xf4\x8b\x50\xbc\x9d\xa2\x1f\x8f\x05\xea\x15\xad\x18\x04\xb5\x60\x7f\x0f\x1e\xa0\xf7\x46\xbc\xd0\xa6\x0e\xaf\xdc\xa0\x14\x8b\x8a\xc5\xa9\x93\xf5\x2f\x13\xf2\x45\xb5\x4a\xdd\x13\x88\x4e\xaa\xb0\x46\x4c\x1c\x09\x7a\x9e\x95\xe2\x6c\xa1\x0e\x21\x7f\xe8\x4d\x35\xec\x11\xb4\x54\x70\xd5\x81\xb8\xfc\x42\x13\xe4\x93\x40\xac\xfd\x19\x92\x90\x34\xee\x94\x8c\x32\x96\xfa\xbb\xa2\x7b\xa6\x08\x31\x20\xfe\x05\x90\x62\xd0\x34\x47\x0d\xf8\xb9\xdd\x38\x94\x00"
		"\x11\xe8\x4e\xd0\xc4\x4c\xb1\x15\xcf\xcb\xe5\x2c\x4a\x21\x45\xca\xb5\x1e\x7e\xb0\x14\x69\xe6\x3b\x46\x0c\xca\x7b\xc5\x6d\xa8\x4e\x7c\x33\x6c\x3f\xfa\x4f\xbe\xf4\xcf\x73\x82\x38\x62\x3c\xf7\xc3\xc1\xad\x2d\xa3\x32\x6c\x85\x37\x9f\xb8\xde\x8b\x08\x05\xe1\xea\xb4\x52\xb1\x9b\xd0\xb2\x6d\x1f\x41\xbd\xe0\x80\x45\x0b\x41\xf1\xef\x24\xe1\x63\x37\x3d\x07\x4e\x07\x58\x65\x35\xa1\x75\x07\x5a\xa3\xa2\xa3\x5a\xff\x8b\x0e\xe2\x7e\x71\x12\xda\x79\x61\x54\x7e\xd9\xe9\x52\x0c\x6b\xa8\x2f\xf3\xa7\xef\x88\xc1\x7f\xdf\x6d\x55"
		"\x9d\xd0\x6f\xbb\xea\x70\x28\x9b\xd6\xd5\x9c\x50\x1d\x74\x71\xc3\x18\xb1\xf3\x0a\x77\xc0\xc5\x9e\xaa\x1b\xea\x6e\x59\xe7\xd6\x4d\xe7\xff\x58\x25\x7f\x52\x55\x55\xc5\xe3\x18\x1a\x3e\x4e\xb5\x03\x06\x9b\xc5\x32\xcd\x5c\x6d\x3e\x7e\x6a\x55\xf4\x02\x17\xc4\x6c\xff\xd6\x11\x4b\x86\xa0\x88\x7b\xba\xb3\x36\xd9\x97\x42\x30\xc3\x40\x26\xc4\x3e\xd1\xfc\x6c\xc1\xf4\x8e\xc0\xed\x10\x9f\x07\x98\x2c\xd6\x3b\x2a\xb0\xf2\x79\xfe\xe4\xcc\x2c\x50\x12\xb7\x9b\x32\x6a\xb4\xc2\xa4\x0e\x19\xf8\x29\x9e\x7b\xa0\x8f\xdc\x3f\x33\xe4"
		"\x53\xf6\x28\x99\x19\x8d\xbe\x32\x62\xb1\x96\x4c\x8d\x10\xa3\x5d\xde\x8c\x84\xdb\x85\x6f\x79\xc2\x7c\x97\xdb\xda\x37\x65\x95\x17\xe4\x98\x60\x10\x7b\x1e\xbe\x13\x0c\x3d\x03\x97\xfb\xff\x07\xfa\x4a\xe6\xdb\x91\xd5\x4e\x9b\xe3\x1c\xcf\xd9\xfd\xc4\x8b\x10\x4d\x49\xef\x2a\xde\xbf\xd6\x12\x5d\x0c\x6e\xcd\x01\xd4\x43\x61\x28\x35\xc9\x4b\xfb\xa4\x8a\x50\x36\x9b\x28\xff\x65\xec\x11\x45\xa7\x4c\xe8\x32\xd9\x9b\x3b\x9e\x8c\xfe\x16\x8f\x8c\x39\x02\xb6\xf5\xb9\x7e\x45\x68\x2c\xdf\x48\x65\x51\x40\xa7\x5b\x37\x7d\x31\xb6"
		"\x71\x59\x2e\x1c\xfe\xda\xb8\x6f\xd1\xaa\x91\x32\xfe\xdc\xe3\x6c\x33\x5a\x93\x9b\x59\x3b\x17\x0b\xd2\xd5\x9f\x24\x54\x41\x63\xe9\x6e\xcd\xa4\xd0\x04\xd0\x17\x8a\xac\x1e\x31\x2d\xf9\x13\x08\x1a\x32\x3e\xb1\x62\xe2\xfa\xdb\x26\xd7\xc6\x8b\x99\x2e\x31\x2d\x21\xc0\xc2\x05\xcc\x78\xa2\xd7\x38\x44\x34\x91\xb9\xfc\x53\xfe\x5d\x70\x56\xb5\xe6\xe5\x8c\x90\xbc\xc0\x54\xb0\x87\x49\xb6\x3a\xb5\xca\x05\xc5\x8e\x54\xb5\x15\x91\x03\xde\x6d\x73\x7c\xa1\x43\xca\x23\x60\x62\x9a\xed\xf1\xc2\xeb\x26\xc8\x08\x54\x11\xf3\x7c\x8c"
		"\x2c\x1d\xdc\xac\x9a\x41\x0f\x25\x4b\xa9\xcb\xb8\x6a\xf3\x90\xd2\x94\xb4\x62\x01\x09\xfa\x7d\xb7\xcd\xea\xef\x3b\xb4\xf7\x1f\x8b\x50\xf3\xea\xb5\x4d\x1f\x32\x9c\x80\xe4\x77\xb6\xde\x5b\xd7\x7f\xb7\x60\xbe\xef\xc2\x2d\x12\x25\xf9\x3b\x6e\xf0\xa3\x77\x13\x35\x0a\x40\xb8\x0e\x9a\x59\xe5\xd0\x6e\x54\xc8\x58\x16\x73\xe1\xb3\x5f\x40\x0c\xe3\x64\x44\xd2\x91\x2b\x14\xfc\xa0\x2a\xb3\xc1\x5d\x4e\x8e\xcf\xac\xfe\x9b\xfd\x09\xfe\x5b\xfb\x35\x67\xb7\xfd\x36\x07\x5d\x83\xe2\xef\x8c\x5f\xb1\x3f\x1c\x70\x06\x0c\x39\x3d\xe3"
		"\x78\xcf\xea\xe5\xec\xaf\xdd\x56\xe5\x2f\x7e\x43\x31\x6f\xc2\x96\x9d\xe4\x59\xfe\xd0\xa2\xe1\x22\x60\x6c\x29\x2d\x8e\x7d\xfa\x22\xc7\x63\xc4\xee\xab\x56\xb6\xc4\xa2\x12\x5f\x6c\xdc\x32\xcf\xab\x0d\x69\x8e\xfc\x98\x54\x94\x3c\x6b\x48\xd1\x98\xd6\xbc\xc7\xe9\xd7\xa2\xe7\x3a\x0f\x40\x20\x9d\x7f\xfa\xd0\xe0\x43\x8e\x46\xe7\xb5\xee\x6b\x6f\x08\xe1\xb6\xf1\xc4\xcc\x2a\x6f\x64\x93\x84\xa3\x4a\xf5\xf8\xb8\x16\x95\xfd\xc0\x91\x61\x68\xd0\xfe\x99\x8a\x94\xe4\x23\x03\x92\x2d\xb1\x0f\x88\xbc\x33\xa3\x07\x7e\xc7\x34\x9f"
		"\x51\xa9\xff\xf1\x15\xea\x2e\x9a\xc1\x4a\x7f\xbc\xb6\x2f\x13\x56\x5e\xe2\x76\x01\x1d\x60\xdf\x72\xd9\x2b\x23\xbb\x8f\x9f\x2a\x69\x5e\x28\x3b\x71\xd8\x0d\x57\xdd\xf6\xef\xf0\xfc\x23\x77\xdb\x65\x0a\xe0\x31\xde\x89\x6f\x02\xea\x7c\x8c\x1c\x1c\x94\xd6\x73\x9e\x46\x18\x5e\xa8\x69\x77\xc7\xdb\xbc\x16\x1f\x4f\xbd\xdb\xc0\xf2\xf7\x68\x95\xcb\xc7\x8a\xa6\xbd\xe9\x35\xb2\xb9\xbf\x34\xc6\x8d\xe5\x65\xec\x46\x67\x5a\xa5\x9f\x0a\x11\x4c\x0e\xeb\x71\x26\x93\x24\xfc\xaa\x45\xeb\xb0\x27\xa7\x51\x0c\x91\x28\xa7\xdb\x68\xf2"
		"\x2e\x61\x50\x67\xf4\x43\xf5\x3a\xeb\x40\xca\x20\x7f\xa4\xbd\x9c\x90\x19\x38\x32\xee\xd9\xce\x0b\xe4\xee\x13\x4a\xdf\xeb\xf9\x1f\x79\xc6\x50\xd8\xda\x98\x7f\xca\x4a\xe5\x39\x6f\x36\x4e\x6f\xa8\xf7\x98\x7b\xe2\x80\x55\x0a\x57\xa5\x92\x04\xc9\xd2\xe6\x1e\x30\xdb\x54\x24\x8e\x7c\xaa\xea\xbc\x86\x27\xb6\x7e\xd3\x92\x30\xd6\x34\xeb\xbc\x05\xc5\xbb\x1f\x8f\x6f\x39\x02\x36\x17\x09\xa6\xa6\xb5\x36\x6d\x94\xd3\xfe\x4a\x84\x75\xf3\xaa\xa4\xa4\xa5\x46\x0a\x51\x21\x6c\xd1\x59\xed\x47\x73\xdd\x67\x70\xea\x3f\x6b\x31\x16"
		"\xe9\x28\xb1\x4d\x01\xa2\x99\x7f\xf7\xe8\x48\xe4\x82\xca\x3e\x6d\xd8\x87\xfd\x33\x63\x44\xe6\xae\x04\xa0\x5f\xe6\xd3\x33\x6b\x3a\xc2\xc6\xab\xb7\x33\x5b\x82\xc3\x95\x8a\xd3\x28\xce\x4c\x7c\x03\x81\xfd\x1f\x59\xad\x51\xc0\x8d\x97\xc1\x9a\x7c\x21\x33\x61\x20\xe9\x37\xac\x64\x35\x4c\x36\x54\x62\x59\x02\xdb\xc6\x71\x69\x27\x6e\x65\x11\x68\x1a\xb2\xe5\xf6\xef\x2b\x19\xae\x23\x41\xd5\x8d\xff\xe0\x4f\xd6\xd7\x53\x67\x70\xb9\x49\xbf\x9f\xd0\x5c\x2d\x49\x45\x07\xb4\x58\x40\xae\x79\x92\xb9\xeb\x10\x26\x5a\x5b\x60\x38"
		"\x80\x88\x89\x20\x35\x04\x87\xe6\xb9\xd0\x78\x6a\x93\x84\x56\x5c\xfd\x14\x3c\x1f\xdf\xdb\xb1\x6f\x6e\xfb\x0c\x44\x81\xbe\xf5\x73\x97\xf1\x4d\x22\x48\xc3\x7b\xe8\x22\xaf\x57\xd7\xf1\x02\x6e\xcb\xda\x1e\xb3\x8c\x45\x3e\xcd\x18\x05\x4f\xfd\x30\xc2\xc8\xbb\x05\x11\xc2\xd9\x14\x60\x7a\x40\xb1\x1f\x7b\x68\x2e\xbf\xc5\xdb\xa4\x58\xec\x2e\xc8\x8d\x16\x4e\xdc\xc3\xc6\x0c\x64\xbb\xb0\x67\x28\x96\x43\xcc\xb9\xff\x37\x38\x91\x16\x51\xf8\x76\x77\x75\xdf\x74\xf9\x4b\xa6\xd3\xc0\x8e\x10\xab\x8c\xab\x07\xa0\xb5\x7a\xce\x93"
		"\xb1\x6a\xa3\x24\x76\x0e\xf3\xe7\x23\x17\x74\xde\xa0\xbf\x53\xcf\x2c\xe7\xc6\x3e\x4d\x13\xc2\x5c\xf0\xb6\x58\x88\x1a\x3c\xb5\x9e\x01\x3f\x9c\x31\xcf\xaa\x90\xa9\xde\xb0\xc8\x59\x1d\x72\x2e\xcf\x01\x9e\x92\x93\xb8\x03\x4b\xa9\x3c\x78\xce\x46\xe6\x97\x36\xac\x95\xee\xd6\x4e\x13\xcb\xd5\x27\xce\x2d\xef\xf8\x58\xd0\x8d\xe6\xea\x12\xb9\xe1\x6f\xe9\x6c\x30\xff\x4a\x13\x50\xe4\xbd\xd4\x55\xa6\xac\x6c\x68\x9a\xc8\xc7\xb7\x95\xa8\x59\x72\xe7\x49\xfb\x89\x06\x8f\xcb\xf8\xa2\xac\xdf\xed\x51\x47\xc2\x6a\xd0\x02\x43\xed"
		"\x59\x4c\x7f\x6d\x69\x6e\x50\xd0\x1b\x26\xb2\x8a\xcb\xd0\x56\x5d\xf3\x6b\xf8\xae\xda\x0b\xf3\x49\x8b\x10\x39\xc8\xd0\xdc\xe1\x64\x6f\x85\x75\x56\x4e\xcd\x4c\xc4\xc7\xea\x2e\xb6\x82\xb0\xb8\x93\x5a\x53\x61\xb5\xb3\x99\xe1\xc8\x03\xb2\xad\xa3\x3b\x82\xd5\x51\x06\xbe\x1a\x52\xf2\xd1\x36\xe7\x41\x06\x27\xd7\xd5\x59\x18\xe3\x95\x46\x1e\x14\xba\xb8\xb5\x2a\x3f\xb9\xdb\xbe\x33\x79\x7b\x39\x08\x73\x5c\x52\x1d\x9e\xa8\xde\xfb\x20\xff\x9f\x80\x9e\x3c\x4f\xf9\xb9\xbc\xc7\x10\x8f\xb3\x85\x54\xd1\x78\x9c\xa0\x44\x9c\xd3"
		"\x51\xfb\x84\x93\xf5\xdc\x39\x0d\xac\xa9\x83\x83\x49\xee\x95\x87\xf1\x81\xee\xcd\x15\x61\x08\xc4\x76\x19\xda\xb1\xaf\x8c\x29\xed\x60\x22\xd7\xb8\xe3\x32\x23\x36\x3a\x63\x57\xf6\xe8\x32\x11\x50\xdc\x2f\x6a\x9a\xc6\x0e\xea\x35\x2d\xeb\xce\xd8\xfb\xb1\xc0\x2a\x32\x62\x24\x36\xc3\x6c\xf3\x2b\x4b\x60\xc7\xd5\x5b\x7a\x8b\x4a\xd6\x4a\x8f\xa0\x20\x75\x84\x09\x20\x41\xba\x45\x26\xb0\xdf\x70\x15\xe1\x53\xe9\x8d\x44\x09\x9b\x6a\x4d\x1d\xa9\x42\x01\x1c\x2f\x7a\x7b\x43\x90\xca\x35\x95\x49\x72\x3a\x76\x66\x6a\x6c\x27\xc4"
		"\x6a\x24\xde\x8a\x20\xf2\x3f\x9e\xf1\x5a\x3c\x46\xfc\x6b\x3a\x81\x21\x8f\x91\x70\x27\xac\x0d\x42\x7b\xfd\xde\x8f\x00\x37\x88\x61\x53\x7f\xbe\x4e\x85\x10\xf4\xe2\x30\xfc\x5f\x3f\x7a\x5c\x14\x57\x6c\x40\xd4\xe8\x19\x78\xde\xa6\x62\xb7\xa8\x63\x9e\x35\x98\x22\xf0\xba\x5f\x22\x1d\x9f\x87\x47\xb0\x8f\x61\x9a\x1a\x40\xe2\x51\xfb\x9f\x3a\x50\x59\x11\x92\x2a\xe9\x32\x77\xd7\x01\xc0\x47\xc7\x0a\x54\xfb\x7b\xeb\x66\x8f\xf0\xd3\xfa\x8b\x16\x48\x35\x51\x5f\x4e\xf9\x0d\x9c\x89\x18\x4e\x80\x85\x7b\x45\x13\x92\xd0\x52\x3d"
		"\xd5\x70\x26\x0d\xec\xe2\xa2\x85\xba\xd5\x3d\xd2\x82\x95\x91\xbd\x41\x9b\x7f\xb9\xdc\xb1\x57\x8b\x0d\x30\x45\x94\xb2\x8e\xef\x96\xf5\x7a\xb6\xb4\xfb\xbd\x9b\xb1\x0b\x24\xaf\xbc\x3c\xa3\x78\x64\x92\x20\x27\xab\x75\x53\xdc\x7b\xeb\x09\xb2\xf6\x1a\x76\x52\xfa\x09\xe4\x42\xf5\x33\x27\x12\x48\x23\x80\xc5\x6f\x7d\x38\xf3\x17\x13\x63\x83\x03\x59\xd9\xa6\x22\x11\xfa\xe5\xee\x86\x91\x4e\xc6\x8d\x3a\x15\x8f\x8e\xc5\xb3\xeb\xeb\x55\x21\x2e\x47\xc9\x6a\x9e\xd7\x2c\x27\x5e\x40\x42\x4e\x73\xf3\x30\x1a\x04\x50\x60\xe0\x2e"
		"\xad\x7c\xec\x87\xa1\xaf\x0e\xab\x56\x6b\x5d\xe0\x2f\x1a\xa7\xa9\xa5\x0b\x45\xc9\xb6\x42\x9b\xfe\xf5\x4c\x77\x02\x28\xff\x6c\x4e\x4b\x70\xe3\x78\x68\x6c\x14\x0a\xa0\x79\xbe\x4d\xbd\x20\x10\x1f\xb4\x40\xec\x52\xa6\xdd\x70\xcb\x3f\x58\xa4\xa7\x63\x5d\x0f\xc9\x80\x0d\x33\x42\x85\x18\xcf\x7a\x06\xb4\x32\xb6\xbe\xaf\xbd\x6b\xdb\x2b\x2a\xf8\x0d\xbc\x71\x5f\x50\x42\x1c\xf3\xf4\x0e\x84\x88\x4d\xab\xbd\x35\x60\x3d\xcd\x87\x17\x21\x09\x6a\x5f\x0d\xe2\xc6\xb1\x56\x5b\x5c\xda\xca\x05\x3e\xf9\xdc\x8f\x31\x0e\xa9\xe3\x30"
		"\xb9\xfb\xef\xf1\x9d\xd4\x7f\xfb\x09\x8f\x99\x7a\xcc\xd3\x2f\xc2\xff\x20\xeb\xae\xab\xa7\xd7\x16\xda\xeb\xc1\xf9\x5f\xe5\x80\x44\xe4\x68\x12\xd2\x27\xb8\x01\x89\x9e\x11\x98\x00\x60\x5f\xb9\x50\x86\x67\x8f\xc1\xc1\xd2\xd2\xf5\x1e\x0d\xd8\x79\xc3\x6b\x3c\x49\x65\x23\x12\xff\x6e\xe1\xa8\x0f\xc9\xb1\xc8\xc8\x95\xb2\x99\x41\xcf\xa2\x24\x49\xa6\x1e\x88\xf7\x93\x67\xed\x5b\xfa\xdb\x52\x82\x8c\x97\x72\xd3\x15\x43\xb4\x95\x2b\xd1\xc3\xd6\x38\x8e\xf7\x0f\x09\x9b\xa8\xb1\x58\x95\x41\x88\x64\xc4\x15\x6e\x5a\xd2\xc6\xe7"
		"\xe6\x21\xc1\x1f\xb7\xdc\x76\xd4\x33\x45\x81\x27\xe9\x69\x0b\x71\x29\x66\x0a\xff\x90\x89\x99\xcc\x92\x22\x3f\x11\xe2\x63\x74\x68\x3a\x5d\x58\xed\x52\x32\xfa\x9d\x67\xc1\xd1\x82\x6e\xe2\x82\x63\x52\x52\x95\x7d\x8b\x1e\xea\x17\x6c\x53\xce\xad\x98\xa7\x98\x4b\xce\x09\x0c\x34\xe3\x2a\x6f\x61\x0f\x2f\x9b\x3b\xe3\xe6\xe2\x8a\x28\x0e\x8b\xf2\x4e\xd0\x5d\x83\x8a\x1f\x6a\x46\x80\xf7\xfd\x7a\x2b\x1f\x22\x0f\x95\xaa\x6a\x7b\x25\x35\x12\x6c\xe9\x31\x9b\xee\xdc\x2e\x0e\x6f\xd3\x9f\x88\xbc\x02\x97\x66\xe3\xcf\x40\x18\x04"
		"\x28\xf4\x0e\x3e\xaf\x14\xbe\xb9\x10\x66\x80\xe6\x57\xa1\xd9\x71\xdc\xac\x7d\x54\xb3\xd1\x3c\x35\x8e\x22\x60\xa6\xd5\x52\x67\x44\xbe\x25\x83\xaf\x2a\x45\x77\xc3\xaa\x39\xfc\x31\xe6\x7e\xa1\xda\x5f\x10\x5c\xd6\xfd\xc5\x26\x40\xfd\x77\x1d\xde\x93\x1e\x02\xbb\xee\xad\xde\x41\x4e\xab\x64\x12\xe3\x4b\xaf\x0c\x68\x27\x3e\xe0\x4b\x08\x40\x9a\x0f\xa8\xfb\x7c\xa2\xa9\x21\xf6\x30\x98\x99\xb5\x8c\xc3\x0d\x7e\xb9\xb4\xdc\x64\x16\xd7\xfc\x09\x24\xe3\x93\xf7\xb7\xd0\x64\x9a\x9f\x1e\x71\xf2\x7a\x17\x5a\x3c\x30\xa0\x50\x72"
		"\xb2\x77\x24\xfc\x80\x2b\x4d\xe8\x71\x3c\xc7\x39\x58\x93\x8a\x1b\x99\x4a\xa3\x50\x16\x34\x92\x35\x1b\xd1\xd4\x4e\xcc\xa3\x7a\xfe\x48\x2d\x97\x95\x7a\xfd\x91\x63\x3b\xc6\xa5\xc5\x11\xf9\xcf\x2c\x8a\xc4\x49\xa1\x2d\xb3\x61\x6d\xd2\xb0\x7e\xc9\x3f\x19\x0d\x34\xcc\x9f\x3b\x35\x5c\x17\x5e\x18\x9d\xb5\x49\xaa\x17\xe6\xe6\x8a\xa5\x85\xac\x98\x93\x52\x24\x1e\xdd\x9e\xfd\x39\x85\x48\x82\x49\x42\xc5\xb2\xcb\x57\xbd\x86\x9a\x40\x58\x02\xb5\xf8\x3a\x8a\xbb\x61\x9e\x06\x68\x71\x4d\xaa\xe7\x23\x25\x04\x1a\xe1\x87\xd0\x00"
		"\x59\x8f\x14\x0e\x7e\xc4\xc2\x41\xa1\x9e\xdf\x97\x66\xd4\xbd\x7a\xb2\xf5\x57\x68\xda\xe4\x9e\xbe\xaf\x21\xba\x26\x23\x21\x4d\x9b\x74\x73\x4f\x5a\x9e\x8b\xf6\xd3\x8e\xf9\xe5\xca\xa0\x3a\x79\x97\xc8\x10\xf9\xe3\x7e\x04\x93\xef\xb8\x81\xaa\xc3\x28\x55\x7a\x53\x71\x54\xdc\x03\x83\x7f\xf6\xa8\xd8\xa3\xd5\xa8\x94\x4c\x13\xa5\x0a\xc7\x70\x12\xb6\x65\xaf\xd1\x59\x63\x13\x3b\x76\x4c\xf1\x87\x1b\x57\x02\xef\x68\x0a\xc5\x94\xa3\xfd\xeb\x1c\x47\xd0\xdc\x56\x65\x3c\x0e\x99\x73\x96\x3c\x2d\xb6\xb2\xc8\x3d\xbc\xca\x30\x45"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries0), 0x1000);

	const char emptyEntries1[] =
	{
		"\x60\x1e\x5e\x87\x17\x19\x9a\xaf\x2a\x97\x93\xfe\xba\x1d\xc2\x2d\xd1\x81\xfe\xf0\x02\x62\xb5\x36\x42\xaa\xba\xd2\x4f\xe4\x98\x68\x35\x33\x12\x38\x0b\x6d\x74\x03\x9c\x28\x02\x7d\x3d\xf7\x10\x86\x14\x4d\x23\xcb\x84\x85\x31\xf4\xc6\xe5\x15\xc2\xd2\xef\x4b\x47\x45\x8f\x06\xa1\x1d\x4e\xd7\x20\xd6\x35\x68\xfb\x0d\x9c\x30\x88\x6d\x9d\xdb\x5c\x62\xee\x8e\x5a\x76\x14\x33\x50\xba\x52\x32\x76\xb6\xd7\x57\x08\x5e\x90\x02\x3c\x80\x16\x69\x18\x1e\x4e\xf0\xd7\x22\xce\xa9\x17\x80\x6f\x62\x2b\xee\x0d\xbd\x4a\xd2\xf4\xb7\xc9"
		"\xfa\xeb\x61\xe8\x98\xf7\x6c\x0f\x8a\x02\x3a\x5d\x76\x9d\x89\x87\xe8\x80\xe7\xa2\xbd\xdd\xd2\x7b\x2e\xe4\xdd\xfe\x71\xf2\xa4\xbe\x42\x3f\x90\xba\x2a\xfb\x1b\xd2\x56\x63\x8a\x15\x23\xb5\x6c\x5f\x1b\x4d\xe6\xd7\x39\xab\x5d\xf2\x32\xff\x22\x97\x52\xc2\xf3\x42\x23\x3c\xe7\x9c\x11\xa7\x51\x90\xf4\xc0\x1f\x66\xfb\x1a\x6f\x3a\x12\x8a\x06\x60\xa6\x6c\x48\x0f\xbe\x50\xef\xc8\x99\x12\x63\x58\xfc\x5a\xf4\xb3\x4e\xfb\x8b\xce\x15\x44\x82\xd2\xf5\xb9\x29\x46\xa8\x62\xd5\x05\x18\xbf\x51\x08\xcc\x5d\x31\x72\x4b\xca\xc0\x6b"
		"\xc1\x5e\x83\xad\x5d\x30\x86\x90\x93\x2a\xc7\xc7\x1e\xa8\x8d\xe4\x3b\x97\xa8\x0e\x93\x5a\xae\xed\xbf\x67\x65\xfe\xdf\x49\xe4\x57\xdd\x4e\x31\xf6\x37\xf2\xfc\x59\xff\xcf\x51\x2d\xf0\xc3\xfe\xdb\x1a\x7a\x07\xa0\x7f\xda\x55\x47\xef\x8e\x01\xaa\x19\x89\x63\xfb\x61\xf7\xe5\xf8\x68\x56\x8b\xfe\x6e\xf0\x2e\x3d\x29\x51\x1e\x57\xea\x94\x26\xf8\x6c\x64\x80\xb4\x4f\xab\x59\x5f\x59\x80\xd4\xa5\xb0\xa0\xf1\x66\x21\x02\x7c\xc3\x02\x8e\x71\xf0\xb3\x6c\x2c\x4a\xcc\x29\x3a\x02\xe1\xa5\x7d\xd8\x8c\x7e\x33\xae\x85\x6a\x90\xd0"
		"\x6f\xc2\x96\xd0\xcf\xd4\x9f\xb3\x2a\x6c\x28\x9f\xe1\xd7\x55\x64\x96\xbe\xb5\x04\xaa\x36\xeb\x9c\xf4\x70\x7b\xbf\x3f\xf3\xaf\x4f\x15\x74\xb9\xa3\x48\x06\xc2\xf5\x73\x7c\x4f\x27\x74\x7d\xa0\xec\x45\x3a\xb7\xe4\x71\x04\xd0\xcd\x12\x13\xab\x33\xdc\xb3\x5e\x26\xa0\x36\x88\xc3\x72\x1a\x77\x01\x9f\x7f\xf4\x2f\x56\x0a\x92\x9a\x5f\x13\x36\x1a\x2d\x62\xe8\xfe\x56\xd9\x38\x37\x3c\xe4\x9a\x86\x69\xeb\x79\x7c\x79\xe3\x6c\xc7\x1d\xaa\x5c\x77\xc2\x99\xf2\x31\xa0\xe9\xd8\xc1\xe1\x4d\x83\x8e\xf5\xb7\xe3\x9f\xe6\x73\xd6\xa8"
		"\xee\x14\xa5\x36\x11\xe6\xa7\x5a\xdb\x5e\x43\x16\xcc\xcc\x89\xf2\x30\x2e\x65\xc4\x43\x1f\xbf\xab\xfc\xd0\x55\x6d\xfe\xb8\xd2\x87\xea\x55\x3a\xf8\xe9\x44\x07\x3b\x76\x12\x1f\xbf\xcf\xb1\x27\x97\x0e\xb4\x80\x96\xd8\xbe\x82\xc0\x32\x37\x77\x60\x8f\x7f\x25\xaa\x8b\x53\xc6\x72\x35\xbb\x55\x62\xba\xc7\xcf\x76\x73\x2c\xa1\xc7\x6e\x64\xba\xd6\x41\x73\x11\x8e\xcd\xf1\x39\xc9\xfb\xf4\x3c\x96\xf4\x54\x32\xa4\xfa\xc1\x20\x16\xfb\xc7\xec\xe5\x12\x4c\xb0\xca\xc6\x90\x3e\xd0\x15\x91\xe8\x58\xc3\x4b\x8c\x26\xd0\xea\x0b\x09"
		"\x0c\x38\xd5\x64\x13\xba\x38\x5f\xdf\x05\xb0\xaa\x63\x0c\xcf\x15\xce\x08\x0a\x4c\xe7\xb7\x9e\xd3\xef\xa5\x65\xb2\x54\xe2\x55\xb0\x0e\x40\x66\x89\x64\x5e\x3a\x18\x98\xd1\x08\x7a\xef\x89\x5b\xd3\xee\xef\x63\xb7\x85\xb9\x6c\x67\x27\x8f\x46\x21\x9a\x48\xbd\x21\x77\xaa\x09\x85\x97\xbf\xef\x5d\xc8\x7c\x51\xf1\xf7\xe4\x1a\xb7\xde\xe7\x40\x42\x2a\x4c\x6e\x2d\xca\xa0\xb6\xd7\xc9\xc8\x89\x45\xf2\x00\x17\x02\x5e\xde\xde\xc4\x7c\xd2\xdf\xe1\x12\x8f\xbb\xc9\x23\xe2\x4a\x04\xbe\x8d\x7f\xb0\x01\xca\x50\x7f\x99\x3c\x5b\x57"
		"\x7d\xb0\xf2\xaf\x9f\x0c\x9b\xa1\x9f\xcb\x34\x67\x55\x9f\x42\x8c\xb8\x04\xf4\x13\x3e\x2b\xb8\x5b\x56\xd9\xba\x36\xc3\x83\x40\x04\xed\xfc\x83\xa3\xa6\x8f\xd2\xff\xc9\x3e\xf9\x50\x03\xae\xfa\x0a\x34\xd4\x27\xe9\xf7\x29\x0d\x0f\x4e\x2b\x57\xa3\xd8\xdc\x92\x75\x56\x21\xf1\xb5\x8f\x5d\xff\xfc\x58\x17\x1a\x8c\x31\x00\x0e\xb4\xaf\x05\x7f\x7d\x61\x65\x89\xd1\x97\xeb\x5b\x5c\x59\xe5\x45\x32\x04\xee\xf8\x1c\xb9\x99\x81\xfd\x81\x4f\x9a\xd6\xab\xb9\x19\x19\x69\x29\x73\xb5\x08\x8c\x76\x5a\xd8\x61\xba\x78\x96\xad\x66\xf0"
		"\x53\xf4\x07\x44\xc0\xd5\xc4\xd3\xfd\xd6\x55\x16\xaf\xc6\x88\x87\xba\x6e\x50\x83\x6e\x16\x72\x99\xdb\x25\x89\x76\xe3\xc7\x6d\xb4\x68\xcb\x65\x39\x9b\xc5\x08\x31\x77\x2b\x88\x20\xa8\xdc\x30\xe8\xd1\x77\x7e\xd5\xaa\x98\x73\xf2\xc7\xf1\x5c\x83\x17\xe7\x36\xa1\x9a\xb8\x88\x9c\x05\xbd\xd1\xd5\x04\x4f\x74\x42\xb9\x7e\x51\x3a\x4f\x56\x7d\x09\xf7\x43\x98\xa6\x49\x6b\x85\x4c\x13\x9a\xed\x9a\x5a\x23\x57\x8f\xfa\x89\x5d\xf3\x64\xd4\x6d\xc3\x34\x15\x8e\xf3\xd6\xfe\x4c\xda\xcd\xf3\x4b\x4b\x50\x4e\xee\x27\xe7\x63\xcb\x50"
		"\x7f\x71\x0c\xea\x12\x73\xc5\xbc\x75\x0e\x09\x8d\x31\x49\xdc\x20\x97\x78\x5c\xb8\x3a\x66\xcf\x91\x4b\x25\x44\x40\x0c\x52\xc4\x03\xea\x08\x8f\x17\x4a\x1d\x04\x31\x9c\xa6\xd9\x30\x40\x16\x01\xd2\xd1\xbe\x7a\xae\x93\x47\x80\x0d\xc3\x19\xd1\x64\xa1\x8d\xc3\x7a\x67\x79\xd5\xa5\x1c\x16\x2a\x27\x43\x47\x63\x79\xaa\xb2\x60\xd7\x1b\x56\x32\x3f\x82\x3f\xe1\x29\x9c\xd7\x23\x0a\x3d\xee\x7f\x11\x82\xb6\x86\xcf\xad\xde\x41\x3a\xa2\x8b\x08\x6a\x8b\xf3\x82\x86\xc3\xff\x8b\x4a\xd0\x33\x39\xf4\xf1\x6f\x63\xb4\x1a\xda\xca\xd7"
		"\x8d\xf0\x56\xb8\x77\x19\x0d\x06\xa6\x2c\xdc\x37\x7c\xc5\xe9\xc4\xf5\x03\xf0\x9e\x66\x5f\x4e\x16\x53\xf7\x60\xc1\x20\x15\xfe\xc9\xe1\xf0\x61\x5c\x87\xb5\xb0\x81\xd9\x9f\x65\xe0\x2b\x4f\x20\xad\x9b\xbd\x9d\x21\x99\x39\xeb\xfd\xcc\xa3\x68\x62\xfa\xb6\x72\xb3\x5c\x0b\xdc\x17\x7c\x33\x4b\x32\x2e\xb8\x6a\x8f\x52\xf5\x18\xa2\x16\x01\x26\xbb\xbd\x4e\xf7\x44\x3f\x54\xb6\x11\x38\x84\x95\xf8\x25\x3e\xf7\xb3\x4e\x61\x8f\xce\xf2\xd8\xc6\x71\xa5\x2a\x50\x5b\x36\xf5\x7e\x67\x70\xc8\x52\x36\xcb\x5e\x6d\xf5\xf2\x8a\x68\x80"
		"\xcf\x77\xeb\x92\x58\x6b\x02\x8a\xa3\x60\xef\x65\x0f\x12\x28\xb4\x92\xf8\x01\xa8\xd8\xa3\x8c\x34\x89\x06\xbb\xb3\x62\xa5\x9b\x2b\x43\x77\x9e\x1b\x3f\x38\xb7\x99\x87\x0b\x24\xfe\xcf\x9c\xab\x0e\x85\x82\x83\x00\x34\x5f\xb3\x41\x93\xf9\x3b\xbe\x04\xc7\x34\x63\xc1\x1b\x86\x7b\xb6\x02\x74\x15\x39\x7b\x83\xbb\x19\xc8\xca\x82\x9e\x1e\xa3\x08\xbd\x9e\x51\x91\x5a\xab\x3c\x5a\xa2\x88\x01\x84\xe4\xaa\x2f\xb8\xe1\x5b\xbe\x8b\xac\xa3\x87\x81\xe8\x88\x23\x00\x31\x9b\x9f\xc0\x80\xad\x0c\xf0\x22\x2d\x8a\x7f\x9c\xf8\xaf\xe7"
		"\x96\xe1\x4e\xe5\x42\x7b\x4c\x4f\xa2\xd7\x8a\x0b\x9a\x78\xf2\x92\x5e\x99\xe8\xe2\x9e\xc8\x08\x95\x51\x13\x3e\xd1\xc5\xa3\xd8\x24\xf3\xd0\x0f\x0a\x56\x75\x74\xb6\x88\x92\xa8\xb6\x8b\xb4\x35\x11\xb2\x92\x12\x46\x94\x92\x6b\x62\x95\x94\xfe\xd6\xf6\xa3\xe5\x0c\xff\x1b\x0d\x76\x10\xf3\x07\x68\x87\x8a\x2a\x64\xe3\xc5\xca\xa0\xcc\x9b\xd0\x53\x47\x67\xe7\x50\x3c\x43\xc8\x39\x42\x2f\x34\x61\x78\xa6\x63\x5d\x41\x3a\x06\x94\x20\xec\xa9\xf2\x86\x18\x19\x0d\xd0\x87\xc6\x93\x49\xc1\xb3\x8c\x17\x6c\x4d\x83\x49\xe7\xad\x1f"
		"\x7c\x4f\x08\xb4\xf4\xb4\x61\x68\x07\x8b\x4c\xcc\x80\x94\xca\x83\x9b\x02\x36\x7a\x0d\xa7\xf0\x96\x71\xbd\x28\x21\x0e\x1e\xde\x30\xdc\x4f\x99\xf2\x79\x51\x95\x93\xe0\x59\x7e\xab\xa3\x9d\xc6\xf6\x52\x4c\xe3\x18\xf2\x3a\x8a\x95\x82\x51\x57\x8b\x4d\x87\x97\x73\x7d\xcc\x2a\x08\x7c\x0c\x90\x7e\xd2\xfe\xa5\x84\xae\x99\x40\x07\x32\x74\x6a\x26\x26\x4d\x17\xc0\x2a\xc2\x2b\xf5\x2c\x3e\xb0\xba\xcf\xbe\x73\x92\xdf\x50\x81\xdd\x42\x5f\x23\xde\xef\xde\xe5\x39\xbe\x15\xd2\x6b\x18\xb0\x46\x7d\x95\x35\xc7\x9e\xc8\x50\x4e\x3e"
		"\xba\xe6\x63\x6d\x7b\xf7\xc0\x9d\xc0\x5e\x4c\x7b\x04\x27\x8a\x63\xa9\x9d\x11\x1f\x7d\x5b\x75\x3e\x23\xbe\x4a\x45\x10\x0b\x2f\xdf\x96\x61\xba\xc0\x83\xab\x7f\x7b\xb4\x7b\x2d\xbc\xd3\x9f\xd7\x38\xf8\xa0\xa4\x4b\x3d\xbb\x49\x5b\x1e\xee\x7f\xd4\xae\x87\x09\x27\xfb\x98\xb9\x19\xd1\xe8\x5f\xed\x40\x17\x45\x4c\xcd\xbf\xad\x16\x74\x5f\x01\xed\x0c\xa8\xe0\x24\xd8\x2b\xeb\x40\xa6\x0e\x43\x52\x4f\x30\x09\xcd\xc6\x9b\x90\x0b\xa4\x00\xe1\xae\x06\xb9\x18\x93\xbe\x62\x1d\xed\x6b\xc1\x76\xa1\x49\xa8\x18\x18\x60\x08\x2d\xbd"
		"\xc1\x0a\x4b\xe0\xba\x80\x65\x8c\x2a\xa8\x89\x8a\xc3\x3d\xb7\xde\x1f\x16\x67\xad\xbb\xa7\x34\x95\xcb\xde\x7e\x7b\x9c\xad\xf8\xa3\x4c\xcf\x47\x63\xda\xaa\x3f\xd6\x44\x1d\x0f\xb8\x28\x0e\x9c\x1c\xc4\x9e\xaf\xd3\x97\x31\x5d\xd4\x02\xe4\xb3\x36\x53\x2e\xe2\xe7\xcb\x4b\xce\xfb\x92\x8f\xe1\xda\xe9\x6d\xe0\x35\x41\x20\x32\xcd\x31\x5c\xf0\xe7\xe5\x3b\x6e\x9b\xfb\x41\xff\x7d\x7a\x0d\xa5\x29\xa8\xac\xc2\xe9\x44\x41\xb3\x4a\xae\xc5\x4d\x03\xda\xef\x46\x59\x64\x29\xf8\x8b\xf2\x7b\xd2\xd5\x54\xcd\x48\xd8\x47\xde\x3e\xdc"
		"\xb2\x72\x79\xb4\x07\xa6\x72\x92\x1e\x3d\x35\x3b\xff\x52\x00\xac\x3f\x3c\x8b\x27\xb7\xdf\x95\xee\xab\xb9\xc7\x0f\xbf\x79\x92\xd3\x01\xa2\xdb\x1e\x65\x56\x0b\x39\xd4\xb1\x01\x80\x80\xaa\xae\x79\xf5\xfc\x09\xe7\xba\x00\xf2\x93\xfa\x6b\x5d\xea\xbf\x59\x09\xaf\x7a\x72\x00\x4d\x55\xbf\x0e\xeb\x25\xbf\x82\x32\xf8\xce\x36\xf8\x96\x7d\x81\x21\x72\x00\xa4\x5b\x60\x8c\xfd\xd9\x76\x3a\x11\x21\x48\x0d\x6c\x47\x76\x4c\x8b\xb9\xe4\x8f\x7b\xb3\x45\xec\x9e\x78\x93\x7b\x8b\x86\xfc\xf0\x0e\xaf\x47\x4a\xd0\xa4\xc8\x62\x8c\x21"
		"\xea\x1f\xc3\x1b\x4c\xb0\xe2\x69\x93\xd5\x70\xf4\x0e\xf3\x5c\x41\x3e\xf7\x6e\x9a\x51\x33\xff\x88\x16\x26\xd0\x8d\x0d\x8c\x82\x64\x4d\x3c\xef\x1a\x30\xc8\xf8\x60\x92\x54\x2d\xd0\x18\x80\x59\x4e\xfd\x09\x1f\x89\x9f\x29\x62\x40\x48\x37\x5c\x13\x29\x2e\x75\x02\x08\x6d\x8f\xcc\x9b\x48\x01\xb1\x16\xf1\xa1\xa9\xd9\xfb\x80\x3a\x02\x10\x76\x0f\xb4\x28\x03\x95\xb3\x6c\x62\x66\xcb\xb0\xb1\x39\x16\x73\x60\xb5\x64\xbd\xd0\x3f\x28\x36\xe6\x14\x48\x2b\xa4\x3d\x35\xce\x4f\x5a\x94\xbd\x5d\x05\x86\x7e\x5b\xd7\x80\x47\xbc\x10"
		"\xb3\x5e\x3b\x20\xf1\x04\x91\x6f\xd5\x35\xdd\x37\x15\xb9\xeb\x88\xeb\x60\x24\xee\x99\xd9\xd6\xb9\x7e\x9b\xa5\x5d\x5f\x7a\x60\xee\x6b\x62\x1b\x48\x86\x3e\x5a\x56\x98\x96\xe4\x5a\xe1\xa6\x54\xeb\xf5\x57\x0f\x75\xf6\xad\x34\x79\x28\x4e\xc8\x94\x09\x57\xbf\x8d\xe9\x29\xb7\x7d\xe4\x13\xf7\x8e\xe0\xe6\x77\x54\x5b\xbf\x1f\x67\xfb\x48\x8d\x58\x17\xd9\x55\x7c\xf1\xf9\x5d\x60\x16\x62\x2a\x6a\xe6\x16\xc9\x46\xe1\xa0\x55\xeb\xb0\x2a\x7d\xd6\x8a\x8d\x93\x83\xcd\x4f\xd8\xe9\x63\x83\x0c\xf1\x78\x67\x60\x0a\x67\xbd\xe8\x60"
		"\x79\x5d\x6e\x7b\x37\x51\x3f\x53\x5d\x8c\x58\xb8\xba\x37\x9a\x01\x67\xdf\x0a\xbe\xa9\x94\x43\x12\x6c\x50\xd9\xa2\xcd\xf1\xc0\xe5\xf1\x3b\x32\xe1\x33\x78\x10\x40\x37\x33\xef\x71\xce\xc6\x98\x6c\x67\x3d\x70\xe1\x81\xe8\x3b\xce\xd9\x13\xe4\xac\xa3\xb6\xa0\x8c\xd4\xb0\x0e\xf9\x7a\xd4\xc6\xe3\xd0\xc4\x22\xa1\x03\x45\x5a\x59\x9d\x53\xad\xb1\x91\x03\x1e\xc4\xe0\xbf\x11\x22\x90\xe1\xf0\x53\x3d\x4b\x28\xa5\xae\xba\xb9\x18\x61\x95\x64\xac\x83\x6b\xad\xd5\x8e\x13\x40\x72\xcf\x36\x99\x29\x69\xfd\x0a\x0f\xc1\xf0\x58\xd5"
		"\x05\xb6\x3f\xd3\x24\xc8\x80\xcd\x8b\xe2\xde\x0b\x98\x8e\xc0\xb0\x7f\x4d\x5d\x29\x23\x89\xa8\xf6\xc8\xd8\x2e\xce\xbc\x4e\xbb\x3a\x9a\x9b\x02\xc2\x00\x16\x82\x50\x2a\x1c\xf3\x65\xd4\x3b\xd3\x6d\x60\xe8\xaf\x40\x7f\x19\x87\x05\x46\x2e\x03\x0d\x87\xf3\xe7\xaa\x1e\x0f\xa2\xdf\x39\x7f\x1c\x7d\xc5\x4b\x35\x1f\xd0\x56\x08\x87\x66\x24\x6e\x38\xd2\xfa\x5b\x83\x82\x90\x0e\x1b\xdb\x71\x5e\x3f\xce\xe5\x2d\x0a\x52\x42\xf1\xd3\x51\x5c\x90\xed\xf2\xff\xb5\x98\x0e\xf0\xf9\x19\x7a\x5c\xea\x4c\xdc\x94\xa4\x14\x1d\xa6\x4a\x6f"
		"\x35\xc9\x7e\x3c\x12\xe9\x28\xe7\xce\x05\x21\xf8\xe9\x73\x9f\x91\xc0\x54\xbb\x10\x27\x70\x5c\x62\xd9\x00\x12\xb5\x32\xb3\x09\x10\x30\x5a\x73\x59\x61\xec\xf2\xb1\x8c\xef\xa9\x84\xda\xb5\xa6\xe2\x2a\x1f\xc0\x78\x37\xa8\xad\x4d\x41\x2f\xcb\x33\x56\xa8\x0e\xab\x17\x3e\x6d\x18\x43\x5b\xd3\x06\x7e\x49\xb8\x3a\x90\x2c\x8c\xf4\x65\x17\xb5\xf9\xf2\x28\xd4\x28\xce\xc3\x52\x97\xce\xfa\xa3\x2d\xea\x9e\xbd\x9c\x5d\x50\xd2\xca\xb8\x54\x56\x48\xf3\xc1\xc2\x14\x1d\xe7\x5b\x25\xf6\x76\x12\x50\x5b\x47\xb8\x1d\xd5\x1b\xf2\xb7"
		"\x8c\x49\x9f\x12\xfe\x5a\xc9\x9f\x3d\xb6\x5c\xd3\x32\xb2\x9a\x69\x6c\x88\x6f\x05\x6c\x2e\x1c\x50\xc2\x2c\x62\xb6\x0a\xff\x7b\xf0\x8d\x5b\xe6\xd0\xb0\x57\x3d\x0f\xc4\x2e\xe5\x13\xc9\x50\x7a\xf3\x9e\xd6\xad\xa4\xa4\x0b\x4a\x0a\x89\x79\xbf\x3e\x1e\x5c\x9e\x59\xcf\x25\x0e\xd4\x4a\x0c\x7c\x02\x7e\xdd\x20\x5c\x33\x3b\xce\x49\x9f\x16\xaa\x4a\x62\x05\x9c\xd0\xec\x12\xf9\x78\x08\x19\x3a\x55\x6f\x00\x10\x58\x6f\x17\xac\x04\x90\x2a\xb3\x6d\x56\xfc\xee\x46\xd9\xbc\x9d\x1b\x54\x50\xf9\x1f\xc1\x8d\xb0\xc6\x48\x46\xba\x7f"
		"\x5b\xf7\x23\x4a\x74\xee\xa7\x15\x10\x7d\xd8\xd8\x30\x20\x75\x31\x67\x7a\x8d\xda\x0f\x87\x56\xa5\x4a\x08\x20\x0a\xed\x5f\x64\xe9\x63\xe8\x3f\xdc\xdf\xa2\x2b\x7f\x26\xf0\x17\xbd\x75\x40\xe8\xb6\xca\x1d\xf1\x98\x1d\xcd\x68\xed\x84\x49\xbc\xfb\xe5\xcf\x3f\x08\xf5\x32\xab\x97\xa8\x7c\xc4\xc6\xb4\x27\x0b\x91\x13\xdf\x20\x8c\xe1\x02\xe8\xe8\xe9\xc5\xb2\x8c\x46\x0b\x14\x5e\x68\x30\xb9\x30\x64\x65\x36\x16\xda\x25\x9f\xa9\x62\x26\xb0\x91\x1b\x00\x4e\xbc\xf4\x27\x4b\x2f\x8c\x51\xaa\xe9\x23\x4d\x1f\x4f\x58\x1d\xc6\xca"
		"\x84\x43\xd0\xc1\x06\x8f\x8d\x43\x50\xaf\x70\x94\x71\x41\x86\x76\x45\x88\xbe\xce\x37\x91\x13\x1b\x82\x98\xa9\xcd\x4d\xaa\x19\x7a\x86\x03\x45\x4a\xfc\x2d\xee\x97\xab\xd4\x85\x81\xf7\x9b\xe9\x5a\xe7\x94\x90\x6d\x2c\x18\x2d\x43\x2b\x16\x5d\xdd\xd7\xec\x87\x0d\xc4\xf4\x70\xca\x46\x60\x61\xeb\x7c\x06\x60\x07\x14\xee\xf4\xbf\xd1\x73\xb7\x3f\xce\x28\xfd\x0e\xe9\x80\xa2\x8a\x6a\x97\x22\x45\x32\x3c\x33\x32\x53\x0d\x1a\x62\x42\xb7\x6d\x85\x95\x3d\x9f\xf9\xee\xc7\x9d\xec\x19\xa0\xf2\xab\x9b\x3a\x9f\xe9\x7b\x6f\x3c\x45"
		"\xf1\x92\x6a\xcb\x0a\x08\xba\xb9\x5b\x03\xec\xa4\x23\x7c\x5b\x74\x69\xd9\x25\xc0\xa3\x01\xfa\x1d\xa5\xae\x02\x5a\xd2\x90\x85\x41\xa7\xef\x0a\x79\xe7\xaa\x39\xbc\x60\x8f\x4b\x86\xaa\xe3\x5c\xb8\x27\xf0\x62\xdd\x77\xfd\x79\x40\x9d\x51\x73\x54\xc4\x6d\xf7\x7d\xec\x84\x02\x6b\x01\xad\x7c\x0d\xc1\xf6\xd0\xd0\x25\xa1\xd3\x34\x73\xf3\x7c\xd7\x4e\xfc\x50\x91\x70\x79\x4e\xd9\x29\x95\xa9\x31\x64\x7c\xa7\x08\x8a\x29\x11\xa8\xcd\xfe\x94\x87\x93\xd1\x70\x53\x00\xf4\xa0\xc4\xb9\x37\xd2\xff\xd8\xf8\xb0\xf6\x11\x82\x4e\xc9"
		"\xce\xcb\xaf\x97\xeb\xc1\x0f\x92\x7d\x9f\x3e\x60\x61\xd4\x6b\x4c\xfd\xa2\xd1\x92\x06\x28\x8b\x2b\xa2\x09\xe6\xdd\xbf\xbf\x73\xc5\x6d\xf8\x07\x81\x23\x77\x9c\x67\x67\xab\xe2\x90\xd9\x40\xe4\x71\x6a\x34\x90\x73\x09\x81\xa5\x51\x1e\xc1\xe6\x22\x8e\x88\xaa\x7c\x4e\xaa\xc3\x9f\x7f\x6c\x9f\x25\x97\x72\xe0\x3f\x17\x72\x33\x51\x00\xc8\x38\x51\x99\x51\xed\x6f\x34\xd7\x04\xa6\xe5\x9f\x4c\x26\x37\xd4\xe8\xbe\xab\xed\x44\xfe\xe7\xe4\x6e\xb9\x9f\x2f\x6a\x11\x51\x44\x07\x8b\x36\x21\xf6\x0a\x80\x2e\x2f\xdd\x4c\x48\xb5\xbf"
		"\x5f\xd6\x3f\xd1\x1f\xdc\xf4\x88\x93\xdf\x44\x1f\x71\x5c\xe7\x41\x0c\xf1\xed\xca\x18\x54\x6b\xcb\xad\x28\xeb\x95\x9b\x54\x28\xa6\x22\x7b\xc8\xca\x1d\x47\xc4\xd7\xbb\xc8\x8d\x0d\x5f\x43\xe1\x98\x39\xe1\x89\x07\xb2\x65\xc3\x14\x76\x34\x2c\x9c\x4a\x51\x94\xf0\x60\x12\x34\xa7\x38\xd7\xc3\x52\x7c\xd8\xf1\x82\xd5\x85\x92\xe8\x32\x14\x3b\x3b\x50\xde\xbb\x60\x2b\x09\xd0\x5b\x35\x3d\xe8\x24\xc4\x0f\x2a\x29\x5c\x2c\x29\xbb\x65\xb3\xde\x2d\x4b\x0c\x87\x8b\xa7\xfe\xb3\x1f\x13\xde\x37\xfb\x37\x9b\x1f\xb9\x39\xb3\xf6\x40"
		"\x68\xd8\xb6\x67\xf9\xd7\x40\xeb\xa5\x7a\x52\x6b\xd6\x0b\xef\x2e\x4f\xde\xff\x0b\xf2\xe3\x68\xb1\x13\xd8\xb4\x4b\x8b\x09\x8e\x13\x89\x73\x2f\xa9\x91\xe4\x60\x98\x44\x54\xcc\xfc\xa2\x34\xfc\x75\x0b\xec\xd8\xf5\x1a\x1e\xe3\x92\x65\xdc\x5b\x5f\xa4\x35\xd8\xfa\x68\x80\x75\x54\xda\x9a\xb7\x8d\x63\x52\x64\xa5\x59\xaf\x4b\xfb\xd7\x16\x82\xc6\x9f\xc2\x61\x38\x77\x86\x0d\xe0\xf8\xc6\xf4\x49\x65\x66\xdf\x61\x04\xd2\xfa\x42\x5b\xc5\xb6\xb3\xe3\x76\x6f\xae\x0c\x0f\xbb\x69\xf7\x57\xa3\xd9\x77\x39\xbf\xfa\x5d\x15\x36\x40"
		"\x2d\x77\x8a\x78\xd4\x34\xb5\xa2\x8e\x57\xc0\x1b\x8d\x8b\xff\x29\xba\x37\x67\xaf\x82\x57\x0e\x03\x97\xb8\x2c\xf2\xb8\xde\xa2\x77\xc1\xc1\x6f\x87\x8a\xd3\x61\x5e\x31\x25\x75\x7e\x7b\x7a\x01\x33\x07\x9b\xde\x2f\x13\xa1\x64\xa7\xea\xb0\x2d\x2b\x44\xfa\x06\xcd\x14\xac\xeb\x9f\x59\x6c\xbf\x4f\xa1\x52\x40\x92\xb2\x74\x68\x46\x68\xce\x28\xb2\x24\xa2\x82\x6f\x12\xc1\x9a\x0e\xbf\xfa\xbf\x7a\x72\x41\x1b\x98\x63\x7a\x3f\xd1\x1a\xb7\x23\x24\x19\x36\x6a\x3e\x04\xd1\x4c\xe7\xe8\xe9\x13\x5d\x57\xfb\xc1\xa7\x6f\xbc\xf8\x00"
		"\x13\xaa\xb1\xe0\xee\x02\x97\xda\x6a\x24\x6c\x61\xc2\xfc\x6e\xb0\xa0\x9d\x25\x8b\x3d\xf5\x77\x4c\x3b\x39\x62\xee\x98\x98\xd9\x2c\xb2\xeb\x0c\x2a\x47\x75\x41\xb3\x68\x20\xbd\x5a\xac\x27\x8e\x97\x91\x23\xe4\x10\x46\x39\xbc\xa0\xd3\xeb\x00\xab\x4e\x39\xf7\x83\x4b\x09\x54\xd3\x6a\x81\xac\x49\x33\x5b\x57\x99\xf2\x01\x0e\x7a\xfd\x81\x1b\xc6\x7e\x38\x02\x84\x81\x8a\x6b\xa7\x6f\x3d\xc9\x91\xf6\xe1\xc9\xe1\xae\x18\xe0\x8c\x7a\xb8\xe2\xd6\xc8\xf0\x1b\x0d\x8d\xbc\x14\xec\x87\xcc\x4e\xa7\x85\x84\xa1\xae\x79\xfe\xfb\x15"
		"\xca\x25\x7e\xf1\x78\xe7\x8b\xf9\xcf\x1f\x6f\xdd\x5f\xb5\x71\x52\xd5\xc4\x43\xbb\x41\xb0\xa0\x8d\x15\xd0\xe1\xb7\xcb\xae\x68\x4d\xed\x1a\x75\x8d\xd8\x33\xec\x15\x41\xbc\xe2\x51\xce\xaa\xcd\x7c\x22\x03\xb8\x35\x87\x03\x35\x8a\x1d\xe3\xc9\xa7\x60\x42\x21\x42\x92\x68\x16\xd2\x6c\x0d\xc3\xb5\x02\x80\xf3\x99\x76\x90\x43\xa2\xd8\xf4\xb0\x47\xfa\xf5\x1d\x0c\x80\x5e\x23\xd6\xa0\xd0\x10\x1c\xeb\xb2\xf6\x4f\x81\xe3\x6a\xe9\x88\x74\xa3\x19\x6b\x33\xe5\xf0\x17\x75\x65\xda\x75\x8f\xda\x6a\x2a\x7c\xb3\x30\x5d\xc6\x0a\xb5"
		"\xe9\x9a\x76\x2c\x1d\xe6\x2b\xee\x84\x16\xed\x63\x90\x67\x69\x6f\x5b\xf7\xfe\x41\x30\xc7\xb3\xd6\x67\x1c\xd0\x1c\xb4\xc2\xb7\xb3\x25\x6d\x9f\x08\x6d\xc6\xe0\x1f\xf1\x57\x94\x12\xdc\x45\x2b\x43\x12\xf3\xa8\xc6\x10\xc8\xa1\x75\x42\xdc\xca\x8a\xf6\x6a\xcb\xea\x55\x55\xe8\x06\x5a\x04\x46\x1d\x59\x81\xb2\x2d\x64\xf3\x48\x2b\x95\x8f\x1d\x84\x1a\x89\xbc\x5a\xf9\x3b\xe8\x60\x5f\x58\x5a\xdd\x11\x0b\xb0\x75\x3d\x30\xf2\xc6\xf9\x58\x73\xe7\xfc\x99\x42\xf8\xc1\xe6\xea\x62\x19\xbf\x63\x9e\x85\xd1\x75\x00\xa1\xac\xf2\xb5"
		"\xa2\xf0\x22\x48\x97\xe7\xe0\x5f\x21\xdb\x46\x9a\x45\x6e\x33\xb9\xb2\x66\x12\x7b\x68\x47\xe7\x92\xf9\x43\x12\xfc\xca\xee\x94\xb3\x0b\x6d\xeb\x53\x9f\x8e\x0f\x61\x7b\x07\xfe\x7e\x75\xee\xd3\x9f\xb5\xbf\x6a\xcc\x32\x57\xab\xcb\x9a\xd4\xf5\x73\x3d\x01\xc0\xeb\xd9\xc3\x0b\xc0\x0f\xa3\xd9\x0b\x5c\x78\x73\x9f\xee\x21\x52\x40\x92\x89\x02\x47\x7c\xda\x72\xd9\x89\x57\xfd\xa9\xce\x36\x1c\xf1\x55\x0f\x49\x41\xc3\x8f\xf1\x79\x78\x4c\xf2\x3b\x3c\x35\x66\xc1\x04\x32\xbe\xa0\x2d\x40\x09\x47\x52\xcb\xfc\xec\xb5\x03\xb4\x6e"
		"\xe2\x4e\x75\x58\x4f\x8f\x7f\x64\x74\xa7\x8f\xfc\xf0\xe3\x95\x57\x5e\x0d\xbd\x09\x3d\x47\xa0\x5a\x75\xe0\x03\xee\xa7\x63\x25\xce\x9e\x4e\xbc\xdf\x9f\x8c\xb0\x25\xa7\x1e\x57\x63\xb5\x30\x48\xbd\xcb\x3e\xa6\xac\xdd\x3e\x18\x0a\x87\xf3\xfb\x3d\xe4\xd9\xfd\x3c\x98\xef\x86\xcd\xd8\x67\xbb\x21\x07\xc7\xc3\xd8\xd6\x63\x06\x47\x70\x82\x1c\x07\xe6\xe7\x2c\xd7\x8c\x01\x7b\xa4\xb5\xbc\xa4\x3c\x98\xf7\x5c\x2c\xaa\x88\xe3\xfb\x1b\x8e\x78\x71\xb9\x84\x1e\x2c\x4e\xc6\xf9\x07\xb5\x89\x0f\xca\x50\xb9\x87\x67\x30\x8c\x4e\x26"
		"\xf0\xd5\xd0\xa5\x7d\xeb\xcf\xea\x36\xe0\xc1\x0f\x05\x1b\x8c\x65\x85\x65\x31\x31\xcc\x7b\x61\xff\x4c\x83\x9e\x5f\x7b\x4d\x3a\xb6\xfb\x23\x4a\xde\x53\x19\x91\xfa\x70\x3c\xb6\xfd\x29\xee\xd7\xd8\xd6\xc4\xb1\xc5\x74\xe6\xed\xf7\x64\xb5\x66\x7e\x7b\x7c\xf0\x32\x06\xf0\x56\xa0\xa0\x6c\x78\x32\x25\xf4\x9e\x1c\xe7\xaf\x84\xfd\x7b\x56\x38\xb8\x23\x31\xe0\x9f\x33\x7b\x4d\x3e\xe6\xb8\xb9\x22\x4a\x19\xd3\xd8\x62\xea\xbc\xd6\x7b\xed\xb5\x6d\xab\x51\x31\x2f\xbc\x7f\xce\xbc\x27\xb0\x2e\x78\x92\x81\xc8\xe4\x0b\x72\xe2\x4c"
		"\xde\xd2\xf0\xdc\x1a\x72\xa0\x14\x58\xf8\x1f\xa5\x6a\x7a\x94\x54\xda\x73\x53\x42\xf2\x27\x3c\x60\x13\xb2\x7b\x2b\xad\xac\x33\x8c\xd1\x5b\xa8\x8a\x8b\x78\x6f\x79\xe9\xbd\x14\x0a\x54\xf7\xa2\x68\x97\x0d\x59\x6d\xd5\xe0\xbe\x0e\x74\x03\x39\x1b\x29\x09\xf3\x2d\xfa\xfe\x36\x29\x6b\x97\xc8\xd8\xc5\xb4\xbf\x4f\x44\x7f\xf8\x5c\xa6\x57\x3f\xd9\x00\x5c\x60\x85\x7b\x97\x83\xba\x26\x1b\x96\x5c\x39\xce\x87\x10\xa7\x9c\x46\x71\xd9\x95\x1f\xb1\x2b\x60\xa8\x11\x13\x7d\x3b\x53\xb6\xd0\x8b\xa7\x7e\xcb\x77\xcb\x87\xcf\xd6\xf2"
		"\x5a\x2c\xd6\xa9\xf5\x46\x88\x19\x77\x3e\x3e\x0f\xf6\x5b\xe5\x90\xdd\xc5\x23\x27\x45\xb2\x19\x7e\x87\x33\x2d\xec\x91\x50\x83\x66\x31\xc0\x34\xf9\x49\x21\xc0\xf5\xe4\x0f\x64\xdc\x00\xc0\x4f\xbb\x5e\xc0\xe0\x9d\x7e\xa6\xd3\x23\xb9\x7f\x10\x0d\x42\x00\x81\xfb\x28\xe9\x5d\x7c\xec\xc3\xf3\xe3\x14\x55\xed\xb9\x89\x76\x57\xad\x4e\x86\xe1\x5e\xc1\xa2\x94\x0d\x6b\x89\xfe\x61\xae\x3d\x9b\x8a\x82\x91\xa5\x28\xcf\x2b\x04\xf7\xa3\x5d\x29\xfb\xa7\x1e\x33\xfb\x2e\x81\x1b\x02\x80\x43\xf7\x08\x3a\x24\x7d\x54\x00\x52\x8a\x73"
		"\xe8\xab\x32\x0f\xfd\xbb\x26\xba\xf4\x55\xba\xfc\xd4\x09\x55\x22\x84\xf8\x6f\x67\xb8\x2f\x21\x8b\x9d\xa7\x66\x54\x94\xff\xb8\xa8\x47\x18\xb8\x05\x03\x83\x94\x37\xc6\xf0\x3c\xe0\x07\x30\x86\xb5\x79\xf6\x2c\x2c\xb0\x12\xd6\x8d\x71\xe0\xa5\xc0\x7d\x64\xcf\x7a\x15\x36\xd6\xd5\xa9\xfb\x3d\xf2\x67\x62\x8f\xd3\xf6\xaa\x32\x20\x9a\x81\xb5\x88\x9a\xd3\x52\x30\xb0\x12\xec\xd5\x8b\xed\xdc\x9a\x32\x2e\xd8\x44\x11\xed\xe9\x20\x5f\xf6\xe1\x2f\xe2\xe7\x86\x95\xe6\x61\xc1\x32\x60\x2c\x7d\x48\x26\x69\x78\x58\xb4\x6c\xfb\x07"
		"\xa5\xbb\xc2\x2a\x68\xf7\x13\xc1\x43\x9f\x9b\x07\xc9\x2c\xb5\x1f\xa4\x77\x6c\x90\x02\x53\x37\x54\x11\xae\x72\xe0\xf6\x1d\xea\x8d\x74\xd3\xef\x14\xbe\xeb\x19\x87\x52\x4b\x60\x48\xfe\x7c\x41\x33\xaa\x67\x56\x2b\x7d\x44\xaa\x90\x59\x9e\x8e\xbb\x2f\x01\xe0\xa0\x04\xea\xfc\x5f\x6c\x2a\xc5\x40\x6a\x5d\x52\x6e\x04\x94\x2e\xe4\x86\x90\xb3\x52\x70\x0a\xca\xc5\x65\xaf\x54\xd2\x4f\xe5\x29\x1d\x17\x25\xc6\xff\x37\xed\x82\x09\xe0\xac\x59\xd1\xbe\x22\xfb\xb4\x4b\xfe\xeb\xb1\xed\x8d\x43\x61\x37\x7c\xc2\x3d\x79\x35\xe3\x14"
		"\xab\xd2\x84\x48\xcf\xa8\x27\xe2\x10\x7a\x74\x73\x4f\x4a\x34\x71\x28\x78\x38\x22\x60\xc4\xc9\x87\xf5\x49\xe0\x0d\x67\x2e\xd9\xed\xbc\xf8\x0c\x0d\x66\xc7\x93\xb4\xe4\x41\x17\x6b\x93\x9b\x32\x10\x12\x02\xeb\x39\x83\x55\xcf\xd9\xf0\xfe\xaf\xb5\x3f\xb8\xd5\x70\x68\xd7\xe5\x4a\xca\xc0\x3c\x30\x2c\x62\x50\xdc\x79\xa1\x9d\x0b\x1d\x20\x8f\x29\x1b\x7a\xa4\xac\xc0\x8f\x84\xac\xfb\x18\x2e\xa0\x33\x91\xf9\x9a\xdf\x61\xd4\xb4\xe5\xb2\x81\xda\x4c\xf4\xac\x69\x40\xca\xe3\xf8\x4f\xa5\xc4\x2a\xa5\x0e\x4b\xbc\xc1\x8e\x72\xb7"
		"\xa8\xc3\x64\xd8\xa5\x05\xa7\xf2\xbe\x0b\x3c\xe5\x0c\xb2\x49\x63\xa8\xc3\xb9\xe5\x95\xa8\x77\xdb\xea\x5c\xf2\xd6\xa5\x5f\xc7\xe3\x4c\xb5\xe8\x32\x13\x02\xa6\xa2\xe1\x9c\xbb\xab\xff\x30\xff\x21\x0c\xed\x93\x50\xb4\xec\x27\x3b\xcd\xcc\xf5\x33\xb0\x66\xb5\x28\xe5\xe1\xaf\xc0\xc9\xd2\xbb\x11\x27\x16\xdf\x8b\x01\x46\x1d\x53\x69\x9d\x3f\xea\x73\xb1\xf1\x56\x68\xb0\x12\x29\x55\x65\x79\x82\x33\xf0\x74\x90\x81\xd7\xf0\x2d\x8f\x97\xac\xfe\xd0\x9b\xcb\xba\x42\xeb\x92\xce\xf9\x24\xa0\x60\x36\x75\xaf\xba\xed\x77\x72\x5c"
		"\xde\x91\x0a\x7a\x63\xf7\x88\x6f\xae\x94\xb0\x76\x4e\x5e\x77\xa7\xb8\xbf\xda\xc3\x0a\xe1\xac\xdc\xbd\xd0\xc9\xc5\x9c\x35\xd9\xf2\xcd\x30\x56\x80\xc3\x57\x6c\x4f\x1c\x4f\x79\x4f\xaa\x2b\x9c\xaf\xe3\xed\x9e\xcd\x29\xc9\x53\xd5\xac\x6c\xf8\xec\xff\xb4\xa6\xe0\xbc\xae\x27\x11\x29\xe8\x64\x57\x23\x4e\x9a\x74\xde\x72\x0e\xf8\x9a\x89\xfe\x4d\xcc\x91\x42\xd4\x7e\xfa\x23\x9b\xc0\x48\x3c\xbe\xa5\x4b\x07\xe1\x5c\xc1\x40\x41\xc6\xc7\x5c\xfe\xd0\x08\xe5\x22\x99\x6a\x37\xd5\x98\x39\x7f\x28\x27\x98\xcd\x63\x47\xbc\x19\x12"
		"\x01\xaf\x94\xb1\x61\xd1\xe9\x77\x5a\x6c\xec\xc8\x0d\x38\x3d\xba\xcb\x97\xf5\x40\x42\x7f\xb7\x41\xe7\xab\xa8\xc2\x04\x8b\x7a\xbd\x50\x9a\xec\xfe\x6e\xb3\x7c\x0f\x77\x34\xb5\xac\xce\x79\xef\x00\xa9\xd3\xea\xaa\xb5\xed\xdf\x1b\x4d\xb3\xbf\x33\xba\x31\xb4\x85\x27\x74\x47\x85\x89\xa4\xf8\x15\x7f\x47\x90\x20\xc3\xfd\xe3\x6c\xb3\x58\x07\x0a\x90\x99\xc2\xb6\x9b\xe9\x61\x3c\x12\xed\x06\xe7\xc4\x2c\x74\xcc\x14\xe8\xe2\xd7\x71\x25\x78\x78\xe2\xf6\x63\xc3\xd5\x4c\x15\x3d\x9a\x40\x87\xb2\xc4\x0e\x73\x2d\xc9\x50\x31\x86"
		"\x8a\x59\x07\xb8\x3d\x21\x98\x08\x92\xea\xdb\x94\xbc\x24\x3a\x84\x4a\xf0\x9d\xf5\x0b\x3c\x0f\x3f\x5b\x11\x48\x49\x2a\x6d\x38\xc5\xdb\x1f\x43\x62\xdd\xff\xeb\x19\xc4\x48\x00\x12\xbc\x0c\x46\x9b\xf1\xde\x6c\xa9\xd6\x15\x8c\xdc\x1a\x46\xf3\xd2\x6a\xdd\x9b\xe2\xfd\xba\xad\xd4\x80\x3a\xd5\x10\xef\x41\x41\xea\x6f\x17\x7b\x31\x02\x83\xee\xfb\x92\x00\x47\x48\x0b\x56\xbd\xae\xdb\x40\x3c\x15\x89\x4d\x75\x3e\xde\x70\xdc\x17\xdd\x0a\xde\x03\xd7\xdb\x73\x62\x52\x85\xfc\x1d\x04\x09\xca\x71\xd0\x75\x47\xbe\x1a\xcc\x21\x9e"
		"\xad\x91\x51\xd3\xcc\xa2\x61\xee\xfe\xf2\x9c\xa4\x96\xe6\xa0\x6d\x47\x16\xe0\x8a\x89\x8c\x93\xa5\xcc\xeb\x11\x1b\x1b\x6c\x93\xf2\x47\x14\xee\x50\x0a\x3e\xdf\x23\x99\x0f\xdb\x7f\x1e\xcc\xac\xb1\x97\xaa\x76\xb1\xed\xf3\x44\xea\xbd\xb6\x8d\x5f\x6a\x9e\x95\x2c\xa2\x94\x14\x84\x5c\xda\x59\xc1\xd3\x56\x5d\x14\xce\x14\x04\x06\x01\x86\x4d\x35\xb9\x57\x3c\x13\xe8\xca\x75\xaa\x04\x9d\xb2\xd8\xfc\x18\x74\x7c\x29\x64\x34\x49\xad\xbb\xb3\x37\xef\xd9\x6e\xaa\xfa\x96\xc8\x61\x79\x47\xda\x0d\x25\xea\xeb\x69\x10\x86\xba\xc0"
		"\xbe\xdb\x22\xfe\x5a\x14\xf3\xc1\x45\xc2\x44\xae\x4a\x98\x5c\x52\xf0\xfc\x3a\x85\x93\xae\xb2\x59\xa6\xbd\x08\x98\x72\xd3\xe2\x0b\x61\xef\xd2\x7f\xa2\x93\x25\xb8\x18\x7c\x80\xeb\x2d\x83\x6a\x9e\xb5\xe6\x68\x0a\xcf\xcd\x09\xdd\x1c\xcc\xcb\xa9\x61\x8d\xdb\x1e\x3a\xf2\x35\x1e\x41\xf3\xd7\xef\x4c\x4f\x6e\xb3\x0d\x3f\xb5\x4e\x95\x67\x09\x66\x03\x66\x20\xd5\x0d\x1c\x07\x77\xb2\x7f\x86\x35\x09\x7a\x61\xdc\xdc\x70\x9e\x93\x51\xfb\xd2\x68\xfe\xc6\x90\x21\x1a\x62\x5d\x63\x13\xb0\x53\xa8\x56\x8f\x55\x1d\xeb\x22\x88\x15"
		"\xc7\x13\x2d\xbe\x9e\x65\x86\x67\x2e\xa1\xc8\x63\x1d\x1e\x65\x6f\xd8\x7c\x4d\xd5\x88\x44\xc6\x7e\xf3\xf0\x15\xe1\xab\x12\xf3\x01\x69\x3d\x24\xab\x75\xed\xd8\x7b\x7f\xb3\x5e\x24\xa1\x57\x49\xac\x2b\x10\x1b\xf1\x43\x5a\x08\x2d\xdf\xea\xae\x91\x65\x54\xd8\x44\xcc\x29\x0e\xda\x5e\xc2\x8c\xee\xf9\x2b\x5c\x19\x5e\x44\x1d\x6b\xc9\xca\x89\x3a\x98\x41\xa5\x2a\xd1\xc9\x18\x38\x39\xa7\xe6\xf6\xc6\xe7\x90\x8b\xa7\x17\x5f\xf3\x58\xce\x53\xf2\xe7\x9b\x4a\xd7\x9d\x31\x29\x1d\xf3\x09\x9d\x19\xd7\x0b\xb9\x0d\x78\xeb\xa2\x4c"
		"\x96\x99\xd9\xdc\x1f\x3c\x46\x8e\x62\x4d\xa3\xac\xdb\x1c\xef\xa3\x87\x7b\x69\x32\xc0\x7e\x6f\xc1\x3a\xbc\x76\x85\xe5\xc9\x43\x9f\x4a\xc8\x85\xc6\x80\x60\xe1\x35\xae\x05\x7d\xd5\xa4\x3c\x35\x43\xf7\xd6\xae\x6a\x7b\x3b\xbf\x8e\xf4\x7b\x39\x8e\x0d\x1e\x40\xdd\xce\x85\x9c\xbd\x9b\x09\x3b\xc7\x39\x24\x3c\x49\x56\x49\x39\x29\xa8\xef\xb6\x15\x5d\xa3\x14\x96\xe1\xab\x35\x3b\xb6\x8e\x72\x58\x58\x27\xdd\x41\x09\xbe\x2b\x2d\x29\x95\x73\x79\x26\xf3\xf9\x90\xd6\xd2\x3a\x2d\x67\x9c\x2d\x09\x01\x53\x6c\x0b\xf3\x95\x62\xc5"
		"\x48\xcd\x7b\x56\x7c\x39\x79\x88\x6d\xb6\xd6\xdc\x1f\xd6\x42\x8e\x9c\xcb\x80\x47\xfd\x87\x8d\x47\x4c\x1c\x8e\x2e\x74\xb9\xa8\x1d\x6e\x07\xd2\xeb\xd5\xba\x79\x96\x87\x99\xb7\x41\x13\x11\xb0\x7a\xdc\x6b\x09\x15\x91\x04\xf0\x84\x83\x24\x2f\x5c\x4c\x8e\x24\x09\x38\x2e\x96\x9d\xa0\x1c\x70\xe1\x5a\xc6\xf5\x5f\x97\x6d\x57\x51\xf5\x97\x8d\xea\x7d\x7e\x96\xde\xc6\x7f\xfa\xfd\x02\x95\x0b\x48\x97\x11\x2a\x27\xe3\x49\x4f\xfc\x72\xb2\xbd\x40\xbd\x2a\x42\x04\x4c\x34\xc9\xc2\x32\x85\x53\x59\xaa\x49\xc9\x83\x55\x5b\x8c\x79"
		"\xe7\xab\xbe\xca\x07\x30\x46\x13\x3d\x8c\x20\xce\xa0\xac\x00\xb3\xc3\xa8\x21\xde\x00\x74\x48\x06\xc4\xb7\x0c\xc0\x35\xb3\x6c\xc1\x22\x73\x2e\x9a\x97\xd6\xbf\xef\x7f\xe6\xe8\x17\x46\xf0\x68\x4b\x9e\x30\xaa\xf0\xae\x6d\x76\x43\xf3\x6a\x28\x6a\x19\xa8\x8a\x06\xa5\x2a\x4e\xf0\x67\xdc\x46\x16\x15\xad\x27\x9d\xcd\x95\xe5\x2d\x70\x0e\x50\x7d\x24\xc4\xa8\x90\xda\xee\xce\x33\x0b\xfd\xf7\xbb\x24\x3c\xa8\x4c\x53\x4b\x86\x6f\x72\xc9\x1a\x24\xc0\xb3\x55\xc2\x7d\xc6\x09\x5a\x15\xab\x3b\x04\xbe\xbc\x34\xfb\x58\x6c\xf0\xb6"
		"\xd1\xad\x28\xb7\xcd\x5d\x43\x19\xca\x2b\xc3\xde\x35\x5a\xe8\xe4\x22\x64\x0b\x36\x29\xd5\x27\x38\x96\xf6\x18\x96\xcc\x33\x5d\xe1\x5f\x35\x99\x7b\x94\xe9\x8e\x44\xf2\x13\x3c\xc5\x28\x90\xb3\xbc\xd1\x94\x96\x0a\x00\xbc\x1a\x8c\xc7\x79\x72\x45\xb1\x9e\xb2\xe1\x85\x68\x1f\xf1\xbd\x6f\xb4\x11\x58\xab\x49\x69\x45\x66\x59\x69\xab\x52\xad\xad\x35\xab\xb3\xee\xb6\x0b\x5b\xfa\x57\xa6\x5d\x52\x3c\x72\xe1\x4c\x08\xa2\x52\xc3\x11\x45\x66\x3b\x24\x04\x87\xec\x50\x48\x5e\xbb\xda\x55\x9f\xba\x7e\x43\x84\xfd\x5d\x2c\x19\xe5"
		"\xcc\x09\x78\xb6\x2d\x19\x7d\x77\x40\xb4\xf3\x7c\xa1\x3d\x05\x39\x10\x95\x78\x8e\x34\xb3\xea\x4f\xaa\xfa\x8c\x18\x6a\x97\xfb\xe5\x63\xb6\x46\xec\xa0\x4f\xf7\xa6\x21\x91\xfe\x0d\x95\x50\x5a\xf9\x77\x38\x9a\x55\x9f\x18\xf3\x07\x0e\xc0\x58\x02\x26\x0f\x72\x7a\xf6\x32\xfd\x8c\xbc\x3d\xe5\x72\xb9\x53\x82\x15\xb0\x7a\x9e\x4c\x9a\xa0\x12\x37\x58\x97\x8e\x1d\xf0\x5d\xbb\x95\x76\x91\xe5\x9e\x03\x7b\x65\x80\x82\xcc\xbc\x20\x2b\x52\x48\xf3\xbf\x45\x13\x60\x51\x6b\xff\xd3\xb4\xdf\xdf\xf5\xcd\x09\x25\x37\x0a\xb7\x35\xa5"
		"\x3f\x20\xdd\x33\xb6\xa5\x71\x17\x7d\x6e\xdb\x37\x01\x07\x89\x6f\x2e\x21\x19\x24\x48\x9e\x56\x63\xde\x65\x82\x3f\x66\xaa\xd5\x6f\x66\xe6\xd1\x14\x30\x89\x22\x26\xd0\xc5\x8c\x74\xdc\x79\x1c\x9a\xfe\xf5\xbf\x7f\xdf\x39\x5d\x24\x69\x40\xb8\x5f\x85\x0d\xf8\xae\x3c\x18\x48\xfc\x8c\x6f\x0a\x10\x71\x53\xcb\x64\xa1\xc1\xbc\x7a\x52\x96\x7b\xfd\xea\x09\x63\xc7\xa7\xe3\xbf\x64\x94\x92\xd2\x44\xca\x83\x0f\x3b\xa2\x7a\x8f\x9c\x93\x1c\x6f\x71\x43\xf9\x38\xe5\xe0\xc5\x83\xda\x2d\x20\x4a\x3f\xf6\x68\x15\x1a\xf3\x41\xaf\x72"
		"\xde\xfe\x32\x98\x91\xed\x3b\xb0\x01\x1c\x94\xfb\x8f\x56\xeb\xa3\x59\x59\x74\x35\x4b\x79\xf4\xda\xcd\xe8\x00\x64\xde\xd5\xfa\x9b\x3d\x83\xfa\x5b\xee\x56\x0c\xc8\x51\xe1\x55\xe6\x6d\xcb\xf0\x8e\x9a\x36\xce\x64\xa1\x27\xc0\x7a\x5b\x13\xcc\x23\x9f\xd1\xea\xb7\x5d\xa0\xf9\xaa\x90\xd6\x9c\x1a\x50\xec\x26\xfd\x84\x40\x83\xd4\x44\x8c\x33\x4f\xb7\xd7\x5d\x8c\x96\x95\xd0\x09\x57\x4d\x1d\x6e\x7d\x30\xbc\x1d\xa3\x17\x21\x74\x4b\x98\xf0\xbf\xf2\xfe\x54\x1b\x72\xe0\x7c\xbf\x71\xe5\x80\xd9\xf8\x9d\x21\x45\x6c\x88\x5d\x28"
		"\xfa\x51\xc3\xa1\x4f\x1c\x42\x1e\xb5\xa4\x1d\xbd\xea\x55\x69\x33\x0d\x12\x7d\x02\x54\x2a\x4d\xf7\xaa\xcd\x0c\xa2\x3f\x14\xd4\xbe\x31\x46\xa6\xc2\x55\x60\x28\x58\x46\x51\x91\x81\x7e\xa0\xe6\xcb\xa3\xb0\xd7\xe0\x14\xf4\x63\xd2\x05\x9d\x7a\x97\x49\x82\xcf\x3b\x4c\x14\x1d\x5e\x65\x0d\x73\x5e\x70\x78\xf0\xd3\x38\x7e\xfc\x41\xf5\xe9\xf5\x54\x2f\x9a\xb3\xe1\xd8\x30\xf5\x16\x10\xb3\x0a\x5a\xac\x2c\xe0\x53\xf9\xc0\x37\x26\xd2\x63\x89\x9b\x5f\x28\xe0\x23\x9f\xe1\xfa\x55\x9b\xba\x57\x21\x14\x72\x65\x6f\x3c\x8d\x10\xef"
		"\xa5\xc6\xa6\x26\xdf\x83\x8a\x4d\xcf\x96\xe1\xc6\x81\x52\x08\x4f\x52\x77\x75\xf0\xc5\xe6\x23\x02\x05\x4b\xf9\x3e\xf7\xc3\xdd\x7c\x50\xfc\x88\x38\x5c\x3b\x6c\x1f\x39\x19\x87\x16\xb5\x46\x0f\x45\x07\x23\x99\xf2\x99\x40\xdc\x6b\xfb\x15\x98\x58\x38\x70\x99\x28\x78\xf2\x43\xfe\xf0\xd8\x43\x73\xd1\xa2\xc4\x24\xae\xd2\xd6\x0c\x3b\xae\x84\x23\xdb\xa0\x74\x72\x9a\xc9\x67\x55\x2f\xe4\x2e\x33\x77\xce\xc5\x77\x00\x5a\x85\x89\x31\xbc\x83\x02\xd3\x19\xed\x48\xdd\x5d\x64\x31\xbe\xbb\x09\x96\x7b\xf7\x35\x89\x3e\xdc\x1a\x07"
		"\xc8\x9e\xeb\xcd\x15\xfb\x04\xc4\xba\x7d\xb8\xdf\xa1\xb1\xaa\x05\x50\xbb\x9f\x6c\x46\x59\x9f\x39\xed\xdb\x46\xc2\x20\x5a\x44\x27\x00\x8c\x8f\x7d\x8b\x52\xe3\x17\x5c\x3f\x44\xd4\x78\x41\x1e\x10\xe9\xf5\xeb\x01\x54\x6a\xd5\xd2\x19\xca\x85\x6e\xe4\x0c\xc5\x8e\xf6\xad\xc2\x4b\xe7\x78\x17\x09\x1c\xc7\xf1\x02\x8a\xe3\xf7\x99\x9c\x71\x5a\xe2\x4b\x53\x70\xf8\x17\x36\x3f\x09\x82\x15\x16\x49\xbe\x5c\x6b\xff\xff\xa7\xa9\x81\x2c\xdf\x9d\xb2\x0f\xa4\x8e\x1a\x63\xf5\x6f\x97\xa3\xb7\x79\x95\x79\x53\xee\xfd\xd6\x9c\x28\x5b"
		"\xe0\xfa\xc9\x69\xff\x01\xa8\x22\xca\x2c\x9a\xc7\x7f\x72\xaf\xa0\xf0\x0d\x41\xd4\xa7\x75\xb2\xe9\x9b\x97\x3b\x2a\x5d\xb0\x68\x57\xa1\x11\x89\x50\xbc\x37\x9f\x1f\x6c\x65\xe7\x75\xf4\x59\xb0\x0d\x15\xc6\xa6\x93\x98\x50\xc4\x5a\x8e\x18\xad\x00\x82\x34\x13\xa2\x89\x24\xac\x59\x23\x64\x79\x5b\x77\x4c\xda\x1b\x90\xfd\x27\x43\xf8\xd4\x3d\x35\xd6\xa9\x79\x89\x61\x4b\xd7\xfd\x3a\x76\xa5\x00\x38\x62\xb0\x1d\xa9\x19\x72\x4c\x60\x70\x84\x66\x2b\xa0\x8c\xea\xa1\xe4\xcd\xe2\x5a\x1c\xc0\xa2\xb0\x06\x90\xc2\x6d\xe0\x22\x7b"
		"\x1e\xd2\xfb\x65\xf2\xae\x0e\xda\x55\x4a\x21\xb5\x07\x78\xd0\xf2\xa9\x90\xf4\x9a\xac\x58\xac\xf9\x15\xf5\x18\x4e\x38\xc0\xde\x7e\xf4\xd9\xae\x55\xc6\x89\xa9\xf4\x8a\xa5\x83\x2f\xb5\xf4\xdb\x99\x2b\x10\x7b\xbc\xbb\x0b\x51\x04\xcf\xa4\x53\xf0\x67\x2f\xc7\x12\x90\x1b\xca\xb4\x1f\x9d\xfc\xbd\xb3\x8c\x69\x00\xcb\xec\x60\x97\xc0\xd0\x1b\x09\xa3\xe9\xfe\xd2\x7f\x80\x14\x53\x77\xc7\x47\x88\x9d\xf8\xf6\xf8\x26\xcc\x64\xda\x2f\xd3\x5c\xc2\x53\xa7\x81\xf4\x81\x28\x8a\x79\xb1\xd8\x97\x27\xdc\x0b\x1d\xf4\xc2\x5c\x91\x41"
		"\x56\x77\x3b\xf6\xcc\x35\xf5\xd0\x24\x76\xc8\x8e\x33\x13\x66\x80\xbc\x2e\x1a\x83\x45\x20\x95\xde\x0f\x23\x2a\xa4\x56\xf4\xeb\xba\x88\xcb\x85\x61\xb8\x49\x32\x4b\xec\x95\xd5\x3d\xc2\x0b\x4f\xad\x01\x62\x1b\xe1\xcf\x9e\x2c\xbc\x45\xa5\x99\x97\x90\xba\x6d\xc7\x42\xdf\x0b\x60\x69\x73\xd6\x7e\xe1\x23\xc7\xe4\x08\x6f\x0f\xf7\x45\x4e\x09\x8b\x0a\x06\xf2\x73\x4f\x7c\x91\x36\x65\xe1\x7b\x63\x65\xa1\x0e\x03\x16\xd7\x0c\x4a\x65\x38\xf8\x35\x06\xa6\x78\xb1\x40\x54\xc2\x42\xaf\x9a\xd1\xdf\x57\x52\x14\x6d\xaf\x18\xef\xae"
		"\xe6\x7d\x78\x8d\x00\x4f\x04\xea\xa8\xfb\xd1\xf3\x99\x45\x41\x4d\xbd\x16\x00\x89\xfb\xac\x7c\xc2\xdb\x40\x45\xe0\x25\xa1\xc7\xbc\x99\x49\xce\x8d\xc0\xdd\x6a\x97\x19\x42\x23\x93\x71\xa7\x58\xea\x80\xef\xdc\x43\x97\x2f\x33\xe4\xd6\x0a\x87\x50\x9b\x87\x9c\xbd\x02\x1b\x9f\x0e\xe9\xc3\xd3\xbd\xdf\x8c\xa7\xe4\x10\x5a\xab\x3d\x6b\x5e\xaa\x75\xab\x9c\xbf\xee\x7f\x7c\xe0\xf5\xc2\x03\x76\x26\x49\xd0\x62\xfc\xaa\xc8\x2e\x86\xd5\x2d\x74\x9d\x42\x11\x76\x36\xc7\x73\x67\x8f\xaf\xf4\x66\x4b\xa7\xb3\xfe\x33\x23\xb8\x5f\xa9"
		"\x80\x29\x3a\x06\xc8\xb8\x08\x2e\x1a\xf6\x11\xab\x5a\x17\x4c\x72\xf7\xb5\xe7\x9f\xd0\xf0\x5c\x49\xb2\xeb\xa9\x36\x70\x5f\xf0\xb5\x27\xf5\x24\x5f\xfc\x8d\xdc\x00\x9a\x32\x6f\xe1\x56\x73\x65\x5b\xa5\xa7\xb0\xc9\xa0\x6e\x1b\x63\x42\x33\x2a\x2b\x94\xf4\xe5\xce\x49\x94\x57\xdd\x33\xd5\x1e\x79\x7a\x10\x7b\x6e\x8a\x4a\x00\x49\x41\x49\xda\x52\xda\x99\xae\xe2\xf0\x73\x9c\xc8\xe2\x5d\xcd\x1a\xfd\x5f\x17\x00\x20\x54\xa0\xe1\xa6\x6f\xd8\x33\x45\xde\x0a\x95\xeb\xd6\x5d\x90\x81\xa7\xd5\x2d\xd9\x95\x9e\x44\x8d\x9e\xb8\x00"
		"\x94\x6a\xde\x94\x65\x98\xfc\xc5\x05\x02\xe0\xf7\xdf\xba\x55\xe4\x9e\x21\x58\xd2\xbb\x73\x64\xf5\x06\xfe\x22\xf4\xc4\x13\x25\x62\xf0\xf4\xdf\xb2\x42\x9d\x45\x43\x15\xf7\xb5\x12\xa7\x23\x33\x5a\x4e\x1a\xef\x88\x1e\x68\x4a\x1d\xbd\x9b\xb0\xa1\x43\xab\x3a\xf9\x2d\xe9\xf5\x9d\xb0\xe5\x1b\x94\x02\x02\x1d\x30\x36\x2e\x71\x55\xb7\xa4\x44\x68\xae\xbb\x54\x01\xd2\x92\xfb\x07\x81\xb4\x66\xb7\x7d\xd1\x96\xbf\xb3\xb5\x6a\xf3\x2a\x55\xb9\x87\xd7\xab\xb6\x49\xfa\xa9\x37\xe5\xd8\xde\x96\x0d\x2c\x2f\xcc\xdc\x27\x87\x58\xab"
		"\x8d\x80\x5b\xc7\xc7\x59\xe8\x1b\xdd\x51\x66\xc1\x2c\x9a\xdc\xe9\xd0\xdc\x9d\x65\xb9\xf6\x40\x0d\xa8\x51\x2a\x05\xd6\x51\x2c\xdb\xf3\xd1\x11\x6c\x34\xbd\xab\xa9\x09\x91\x6a\xd5\xed\x91\x05\x52\xaa\xf3\x0c\x64\x97\x10\x95\x5a\x3e\x90\x3d\x53\x42\x3c\xe2\x07\xa5\xb7\x2b\x19\xa2\xdc\x21\xd5\x77\x66\x02\x5a\x46\x3a\x5b\x62\x31\xf3\xe9\x38\xba\xd9\x82\x9b\xa1\xa3\xea\xbb\xb6\x40\x28\x1e\x87\xcc\x55\xa4\xdf\x2b\xf9\x1a\x14\xce\x22\xf8\xff\xd7\xf4\x9f\xda\xa4\xd6\x42\xe1\x31\x09\x4f\x12\x6f\x72\x36\x02\x4e\xaa\xb9"
		"\x3e\x4d\x7e\xb9\xf5\xbb\x9e\x10\x76\x61\xbc\xaf\x0b\xae\x77\xa2\xf2\x3a\xc7\xed\x0f\x62\x7b\x8e\xcc\xfd\x7d\x3f\x69\x18\xf7\x8d\x2e\x09\x55\x14\x81\xc3\x03\x23\x9d\x49\x4d\x6c\xe5\xd2\xaa\x47\x73\xb7\x0a\xdd\x7f\x31\xa1\xc7\x97\xcb\x9b\x87\x0e\x6c\x3b\xce\xbb\xb9\xe7\xf4\x20\xb3\x18\x5f\xa4\xff\xc1\x75\x3c\x10\xc5\xd6\x0e\x35\x74\xb7\xbb\x3a\x4b\xaa\xb7\xcc\x9a\x27\x94\xd9\x47\x54\x0a\xbc\xe8\x81\x99\x06\xe8\x36\x77\x9b\x02\xb1\xd7\x77\x64\x07\xa8\x1f\x34\x1d\x30\x17\x75\x8e\x88\x5f\xbf\xf1\x2e\xee\xc2\x95"
		"\x89\x40\xc8\xb6\x4e\xf0\x44\x77\x4a\xd6\xc3\x6a\x33\xda\x2a\x90\xa2\x53\x66\xbe\xa3\x50\xc4\xba\x16\x95\xee\x60\xa6\xf6\xaf\xe8\x78\xf8\xa3\xe8\x0b\x9b\xd5\x30\x6b\x8d\xc1\x82\xe7\xcc\xe2\xc0\x9d\xfd\x59\x68\x27\x1c\x79\xad\x29\x68\x46\xac\xda\xca\x76\x55\xab\xba\xcb\x87\xc8\xc5\x4d\x67\xbd\x7f\x88\xb4\xeb\xaf\x9f\xaf\x99\x10\x4b\x76\xa0\x06\x86\x84\xd2\xb3\x31\xfb\xe3\xb2\x25\xd1\x9b\xda\x18\xb8\x68\xa6\x97\x43\x6b\x33\xe2\xc2\x07\x21\x56\x08\x8d\x91\x17\x51\x06\x92\x7d\x1e\x78\x8e\x4c\x42\x76\x24\x79\xd9"
		"\xf6\x47\x6d\x3d\x09\x8f\x24\x83\xf3\xdb\xd7\xc3\xb6\xc1\x79\xe6\x1f\xc9\x46\xa0\x60\xb1\x2b\x94\x3e\xe4\x9d\xbe\xf2\x26\x19\x06\xe2\x5b\x03\x10\xdb\xc5\xae\xd9\x4c\xf3\xee\xca\x66\x82\xbd\x1c\xcb\x5c\x72\xd8\x06\xb5\x7f\x60\xe1\x34\x59\xeb\x83\x68\x84\x69\x29\x52\x23\x06\xe6\x02\x1b\x07\xe5\x4d\xde\x11\xb9\x1c\xdf\xcb\x4c\xd3\x2e\x7f\x36\xba\xf4\x21\x8d\x5c\xf7\x33\x68\x88\x80\xee\x19\xde\xd2\x99\x80\xa4\x1b\xdc\x00\x2b\x62\xda\x0f\x8d\x23\xa5\x25\x2e\xf0\xa0\x01\x8e\x30\xeb\xee\x01\xf4\x05\xa4\x8e\x4f\x7e"
		"\x65\x27\x39\x62\x4f\x17\xd7\x4f\x69\x4b\xcb\x18\x33\xb8\x8c\x89\x5d\x22\xb9\x31\x82\x72\x6a\xac\x9c\xf5\x88\xb9\xe8\x05\xad\x7d\x2d\x01\xfe\x74\xca\xd8\xb0\x10\x42\x2f\xa7\x8e\xb0\x56\x53\x17\x7c\xe7\xe8\xd0\x14\x8b\x28\x79\x80\x97\x86\x71\x16\x4b\x0f\xa8\x50\x26\xe4\xb1\xd0\x36\x7c\xb1\xd1\xfc\xc2\x48\xea\x7e\xe3\xbe\xe5\xe4\xe4\x95\x55\x53\x7a\x8a\xac\xa5\xa1\x96\xbc\x28\x77\x7f\xea\x25\x6e\x9d\x7a\xc1\x05\xce\x91\x13\x51\x1a\xd1\x68\x90\xf0\x57\xd8\xe6\x3e\xc0\x5c\x86\xcd\x45\x87\xb4\x34\x10\x2b\xab\x7e"
		"\xf3\x63\x4f\xb2\xd4\x03\x94\xbe\x4d\x66\xd4\x95\x01\x97\x60\x33\xf8\x16\xf7\x74\xb8\x2d\x9d\x86\xd9\x9f\xa1\x7b\x51\x10\xf9\x91\x44\x72\xe9\x08\xf4\x15\xdb\x60\xb1\xa1\xa9\xf5\xc8\x6a\x15\xda\xf4\x39\x28\xf5\xe0\x0d\x07\xf7\x39\x12\x7b\x02\xa7\xc5\xab\x45\x31\xb8\xee\x08\x13\x03\x8a\x14\x36\x42\xa1\x0f\xf1\xcd\x77\xb6\x12\x71\x7b\x1e\x18\x1d\x22\x32\x47\x5a\x76\xb2\xf2\x6c\x2e\x7c\x3c\x3a\xdc\x6c\xbe\xc2\x2b\x34\x05\x10\x29\xe3\xc2\x44\x43\x5f\x15\xfe\x20\xe0\xf3\xb8\x34\x0f\x31\x94\x22\xe9\x65\x6f\xd8\x96"
		"\xf8\xd5\xab\x9a\x5c\x46\x78\x0e\xef\x51\x30\xc3\xf9\x23\xe9\xc3\x92\xad\xee\x18\x87\xf0\x73\x22\x29\xe0\x2d\xf4\x04\x04\x24\x47\x8b\x4f\xe9\x2b\xb5\x09\xd7\x7e\xc1\x71\x2b\x46\x40\xde\x48\x60\x8d\xf5\xd7\x1a\x78\xa9\x8a\x93\xfe\x7f\x7b\x31\xd3\xec\xd3\x6c\x44\x07\xdd\x7d\xf7\x0d\x31\x0f\xe8\x42\xfe\x10\x86\x19\x3b\x0a\x22\x3d\xa2\xc8\xe3\x2d\x1c\x6d\x8d\x7f\xe7\x65\x9a\x97\xd4\x68\xa0\x96\x6b\xca\x61\x3b\xfe\xed\xef\x62\x92\x60\xb1\x4a\x13\x5a\xa6\x9c\x9a\x44\xc4\xc6\xea\x18\x26\xf2\x99\xb8\xc6\x46\xa8\x6d"
		"\x97\x63\xfd\x02\xcc\xa9\x45\xfc\xe6\xd7\x96\x59\x42\xb5\xfb\x69\x04\xf5\x8b\x91\x08\xdd\x61\xd2\xdb\xfd\x46\x7c\xc6\x01\xf7\x0d\xf5\xd8\x8e\xeb\x7e\x30\x4b\x04\xb9\x08\x19\xc3\x90\x0d\x0d\x5f\xba\x97\xe5\x67\x25\xf1\x4a\xaf\x0f\x79\x3d\xa0\x6c\xa4\x30\xa6\xbf\x2a\x62\xd3\xcc\xee\xa7\x7c\xca\x24\x4a\x50\x0b\xeb\x7b\xc8\x4a\x78\x91\x2e\xab\xc0\x85\x99\x6a\xaa\x0b\xad\x6a\x5c\x37\xdd\x4d\x02\x23\xc9\x93\x49\x80\x7b\x02\x9c\xe2\x33\x72\x41\x91\x1d\x7e\x47\x73\x66\xbe\xc0\x38\xac\xb5\x8c\xa1\x37\x30\x5d\x55\x51"
		"\xf2\x1c\x3c\xd1\x2b\xbb\x74\xf5\x80\x47\x04\x88\x2b\xbd\xc1\xb7\x20\x40\x59\x3c\x12\xbb\xfc\xe6\xbb\x5c\x1a\x4a\x90\x06\xf8\x3b\x36\x99\x33\x37\x20\xbd\xce\x0b\x68\xf3\x7f\xd5\xa1\x54\xba\xdf\xa3\xdb\x7f\x42\x5d\xd3\x46\x0f\x11\x6a\xea\x08\xd9\x4c\x78\xec\x82\xe6\xf5\x27\x28\x19\x7c\x1d\x5a\xdf\x6f\xec\xef\x9d\x4d\x1f\x07\xd6\xd2\xd0\x49\x89\x38\x43\x75\x86\x8b\x08\xbc\x62\xb9\x79\x18\x4f\x10\x8b\x7e\x47\x7c\xbd\xa5\xa3\x68\x28\x2f\x5a\xff\xee\x32\xf8\xac\x35\x88\x91\x23\xd0\x49\xd1\xbe\x3a\xfc\x0a\xb6\x79"
		"\x68\xda\x2c\x81\xf7\x8a\x5f\x5e\x82\xd7\xbf\xed\x6b\x44\x44\x69\xd8\xdc\xf6\x0e\x47\x06\x48\x3e\x39\xdb\x06\x78\x82\x49\x79\x5f\xbf\xab\xfe\xf7\xe9\x07\x7d\x65\x33\xb1\x62\x52\xb1\x67\x4e\x33\x29\x22\x66\x86\xd2\x71\xcc\x2c\x05\x2b\xc4\xe9\x9c\xce\x01\x2d\x37\x27\x6f\xca\x14\x76\x7e\x32\xcd\xd0\xa4\x0e\xbe\x19\x76\xfb\xbb\x2c\x56\xa9\x8c\x6f\x79\x41\xfd\xd7\xb4\x17\xf7\x53\x23\x17\x66\xc7\xb8\x21\x3e\xc3\x32\xa2\xa8\x5d\x41\xd9\x7d\xf0\x4e\x2b\x70\x23\x5f\x86\x4d\x07\x72\xf3\xcd\x1c\x01\xc3\xa3\x3a\x29\x7b"
		"\x22\xab\x8b\xe6\x72\x22\x80\xb9\x38\xd0\xa7\xf5\x02\x64\xd7\xdb\x29\x27\x24\x5c\x9c\x50\x2a\x6a\xee\x7e\xe4\x82\xb1\x01\x07\x59\x80\x43\xef\x7d\xc3\xdc\xcf\xb2\x65\x2e\xae\x78\xdc\x2d\xca\x79\x8f\xfa\x71\xd4\xaa\x39\x8d\x71\x25\x79\xa2\xf6\x76\x63\xd8\x5e\x93\xa0\x34\x57\x40\x36\x70\x4e\x2a\xd1\x56\x25\xd3\x46\xb2\x77\xe0\xda\x0c\x1b\xd3\x5f\x6b\x18\x88\x9d\xb6\x88\x61\xf1\x82\x4d\xd2\xb6\xbd\x4b\x5b\x4d\xc6\x98\x6e\x5f\xfb\x2b\xed\xd7\x6d\xce\xe7\x38\x3d\xfa\x2f\x9c\xbb\x59\xca\x2f\x52\x48\xa1\x1b\xeb\x31"
		"\x80\xba\x60\x71\x9a\x77\x70\x62\xe1\xaf\x97\x31\x91\x7c\x3b\x4d\xb7\xec\xd0\x39\x42\x61\x3e\x61\x65\x4e\x0e\x4b\x38\xd1\x3b\x20\xe4\xda\x8d\x51\x08\x8f\x73\x65\x92\x2e\x70\xcf\x47\x1f\xf6\x7c\xfe\xf5\x9a\xbd\x79\x62\x0c\x82\x26\x91\x6b\x56\x23\x74\x1a\x0c\xe5\xed\x11\x8c\xd9\x9c\xcf\x10\x45\x31\xb8\x4f\x8e\x72\x56\x73\x87\xde\x1f\x54\x38\x37\xf3\x44\x00\x52\x05\xa3\x23\x75\xcc\x2a\x01\x97\x13\x3e\x32\x75\x06\xd5\xd1\xa7\xd5\x6e\x68\xa8\xff\x8b\xdc\xc5\xb5\xb6\x9a\x7f\x7c\x0d\x8c\xd4\xc6\x7a\x89\x6d\xf1\x85"
		"\x04\xcf\x47\xb9\xf8\x6a\xf0\xe4\xc4\x7c\x6b\xf8\x8d\xf7\xf7\x3b\x96\x41\x2b\xde\xba\x49\x68\x40\x2b\x15\x4a\xf7\x3f\x50\x64\x23\xf5\x87\xc5\xd8\xf8\x9c\x05\xff\xa2\xd7\xdd\x0c\xd6\xb6\x3b\xd6\x22\x72\x39\xad\x13\xbc\xbd\xb9\xcc\x55\x5a\xb7\x8a\x02\x01\x20\x32\x31\x94\xc8\xb8\x2b\x64\xb6\xc1\x75\x94\x20\xfe\xf1\xb4\x6f\xff\x86\xce\xb0\xbf\x0e\x59\x43\x2e\x5e\x76\xa7\xcb\x4b\xf3\xd8\xef\xe9\x9d\xb3\xc5\x12\xc2\x69\x7f\x11\xd6\xdc\x65\xad\xd1\x11\xdd\xf0\x3e\x29\x41\xa1\xc2\x01\x0a\xea\xc9\x44\x1e\x74\x19\x0b"
		"\xbb\xf1\xe3\x91\x4a\x88\x7e\xb1\x58\x91\x5f\xe0\xa3\xd1\xcd\xc7\x4b\xe2\xf4\x30\x41\x33\x1d\x47\x87\x7a\xc6\x19\x8c\x81\xa9\x49\x47\x81\x3c\xbe\x55\x00\xd2\xec\xdc\x51\xfe\x07\x66\x91\xbd\xab\x76\x80\x1b\xa5\xa4\x4a\x8f\x25\x51\xb3\x31\xc4\x67\x3e\x22\x76\x55\x9a\x1d\x62\x6d\x32\xa0\xff\x46\x9c\xe6\x87\x27\x13\xd4\xd7\x24\x3b\x20\x2b\x0f\x86\x70\x06\x7d\xd5\xee\x07\x66\xf3\x07\xaa\xbd\xf9\xb1\xe2\x4d\x6a\xa0\x88\x7c\xb7\xb7\x51\x62\x50\x37\xba\xd1\xbf\xc0\x03\xe7\x53\xc5\x4d\xa0\xb1\xdb\xa8\x74\xb1\x35\x5d"
		"\xcf\x3f\x13\xd4\x9b\xd2\x13\x77\x23\xcd\x79\x09\x43\xbd\xb8\x40\x94\x1e\xbc\x5d\x55\xa9\x30\xe2\x19\x2f\x76\x70\xd8\x52\xe7\xc8\x2a\xd7\xa6\x9d\xaa\xc6\x3c\x67\x51\xcd\xce\xb1\x70\xd3\xeb\xee\xf6\x39\x5c\x5f\x00\x86\x83\x46\x6a\x70\x97\xb3\x43\x39\xb5\x32\x7d\x9a\xff\x62\xe9\x7a\xfc\xcf\x3c\xc6\x78\x3c\x49\x16\x2f\xc2\xec\xe2\x3e\xb1\x5c\x88\x99\xa2\x3f\x84\x53\x62\x0c\xca\x2d\xea\xf0\xe4\x74\x9e\x0f\x42\xe6\x8a\xdc\x30\xc6\x7f\xb0\x62\x79\x55\xd2\x3a\xab\xd3\x96\x6b\xf4\x94\x36\xe4\x03\xb6\x17\xdc\x85\xcc"
		"\xb6\xf9\x85\x6b\xd4\xb8\xad\xca\x04\x3f\xf4\xac\xe1\xcd\x69\xe6\x36\xff\xfa\x6f\x5a\x6e\x58\x83\xfa\xab\xb6\x80\x37\x40\xa2\xd4\x7f\x29\x1c\x63\xff\x05\x0f\xf2\x42\x9a\x9e\x86\x9d\x2a\xf1\xc2\xa1\xc4\xa0\x18\x1d\xd7\xbd\x1c\x09\xe5\x0f\xd6\x2c\xcc\x4c\x32\x46\x7a\xb1\x96\x56\x7b\x93\x92\xc3\x6b\x2c\x02\xc9\x73\x81\xb4\xea\x7a\x8e\x0e\x04\xe4\xff\x7e\x7b\x5d\xb5\xa2\x71\x6b\xdd\x14\x9a\xc5\xfc\xf6\x29\x10\x46\x3b\x7f\x87\x9f\x7f\x60\x70\x01\x60\xbc\x78\xea\xdc\x4a\x81\x7b\x23\xc6\x5b\x05\x52\x00\x4b\xa3\xb6"
		"\x36\x26\x6d\x0a\x79\xc8\x39\xde\xc1\xf2\x34\x38\xec\xc0\x66\x88\xf1\x90\xeb\x8d\xf4\x28\xba\x2e\x26\xb1\x59\xb4\xf8\x41\x0b\x1a\x19\xf2\xf0\xf3\xf9\xb2\x2f\xec\xbf\xcb\x29\x68\x06\x48\x2c\xc0\x8c\xd3\xbb\x57\xfd\xaf\xc8\x06\xd1\xfe\x42\x78\xf8\x50\x82\x9c\x1d\x3b\xfa\x8c\x49\x2a\xe5\xb9\x5f\xad\x79\x3d\x8c\xc7\xd1\x37\x70\x2c\x71\x16\x0a\xfe\x35\x83\xaa\xca\x96\xef\xe5\xc3\x97\xfe\x08\xac\xa0\xba\xf8\x94\x7b\x75\x5f\xa8\xa9\x5d\x4b\xf2\xea\xc4\x56\xc7\x8d\x58\x95\x45\xa4\x8d\x5a\x85\x0d\x2d\xb1\x85\x32\x8d"
		"\xdd\x38\x8b\xcf\x05\xa1\x50\x2c\xad\x4f\xe6\xe7\x30\xfc\xb9\x29\x06\xb8\x72\x90\x18\xb4\x48\x2a\xf2\x6e\x8a\x18\x56\xfc\x77\xff\xbc\xef\x43\xed\xf8\x7d\x1c\x72\x98\x6b\x35\x51\x21\x82\x47\x2d\x35\x47\xd2\x36\x8b\x66\xb9\x05\x68\x67\x95\xec\x8c\xc4\x4c\x61\x98\xf1\x20\x6f\xcb\xa7\x95\xe6\x5d\x65\xf5\xd4\x19\xe1\x67\x3f\xc6\x18\x48\x69\xaf\x8f\x9a\xfa\x4c\x51\x5e\xb8\x92\x39\x91\x5e\xe8\x2e\xb1\xd8\x6c\xac\xec\xc8\x28\x3f\xd3\x11\x26\xa4\x6b\xa5\x2a\xc6\x11\xd4\xd8\x22\xc6\xfe\x62\xde\xd7\xf7\x95\xb7\x3a\x5b"
		"\x0c\x88\x20\xc1\x1a\x07\xae\x55\x3b\x7a\x1f\x28\xd5\x74\x5e\x13\xcb\x71\x26\x60\x09\x6a\x08\xe3\xe8\xc4\x23\x23\x98\x9d\xd2\x15\xa5\x8d\x77\x8f\x94\x10\xef\x99\x29\x70\xf6\x9a\xe9\x2e\x45\x81\x28\xa0\xae\x94\xdf\xb6\xf3\x80\x09\x75\x1d\x2d\xf0\xc9\x1e\x6e\x02\xab\xfb\x7f\xb3\x27\x79\xc3\x86\x4b\xcb\xb5\xe8\x78\xd2\x1e\xd0\x93\xb5\x75\xce\x54\x6b\x13\x11\xf6\x86\xa3\x2d\x73\x9e\x46\x15\x29\x19\x77\x9d\x83\xef\x1e\x44\x46\xca\x4a\xd7\xdf\x71\x6e\x34\xe5\xdf\xc5\xd8\x74\x16\x86\xfe\x45\xa6\xe9\x5c\xfa\xa2\x99"
		"\x38\xb7\x02\xcd\x21\x77\x96\x13\x1d\x19\xe5\xf2\xef\x83\x1d\x2f\xce\xfe\x1e\x1e\xed\x23\x9d\x2f\xed\xb7\xb1\xb8\x3c\xa0\x55\x2a\x46\x1f\x1d\x98\x1e\x7b\x14\x4c\xe4\xb0\x92\x2d\xcb\x88\x63\x64\x91\xeb\xe5\x75\xa1\x75\x3d\xd0\x38\xa2\x22\x07\xb9\x70\x50\xe3\xd4\x19\x73\x8d\x44\x99\xfc\x5b\x1f\xca\xd1\x1a\x31\xc5\xb2\x2b\xbb\xbb\x87\x39\x6c\x4d\xef\x67\x25\xd6\xbc\x81\xe1\xd4\x90\x88\x7e\x0f\x8f\xed\x44\x6a\x65\x11\x92\x74\xb8\x46\xf0\xb3\x0d\xe9\xdc\xc7\xba\xb3\x44\x46\x70\x91\xbf\x5f\xa2\x83\x20\xdd\x04\x6a"
		"\x66\xb7\x25\x76\x3f\x38\x98\x09\x55\x79\x23\x13\xc3\x1e\xc3\x79\xba\xe2\x2f\x07\x53\xfb\x5c\x2f\xa7\x7c\x70\xf2\x08\x48\xaf\x9a\xf9\xc5\xa5\x3d\xc4\x5d\xa1\x56\x7c\xd9\x0e\x8f\xf5\xb3\x0c\x32\xd4\xe1\xd1\x18\x06\x17\x37\xa3\xd8\xef\x42\x24\xca\xc4\x87\x2f\x7d\x26\xe6\xe1\xc6\xa2\x42\xa9\x8e\xdc\x6b\x1d\x02\x75\xe4\xc7\x14\xd7\x48\xb2\x19\xaa\xbb\x87\x83\x1b\xff\x76\xc8\x65\x2a\xbc\x6f\x86\x58\x2d\x72\x60\x12\x3c\x30\x84\xf6\x27\x19\x4e\x48\x4b\x03\xe7\x35\x41\x5c\x47\x41\xaf\x99\x2b\xd4\x2e\x85\x8f\xf1\xdd"
		"\x58\x1d\xd4\x1e\x04\x37\xdb\x5e\xb7\x7a\x51\x82\x5c\xf4\x40\x90\x67\xf2\xdd\x48\x6a\x72\xa4\x9a\xab\x0d\x51\x2a\x67\x82\xb1\x0b\x37\x8c\x6d\x64\x29\x47\x8e\x92\x9b\xac\x59\x24\x94\x7e\x00\x68\x86\x28\x75\x66\x33\xac\xc5\xaa\xc2\x48\xd9\x75\xb5\x5a\x9c\x36\xd7\xb7\xbf\xf9\x3a\xc3\x8e\xe2\xfb\x26\x01\xcd\x5e\x33\xaf\xae\x11\xbe\x1c\x4b\x97\x5f\x11\x3a\xe4\xe4\x97\xfa\xe4\x21\x1b\x8e\x20\xcd\x44\xfa\xdf\x8e\xdb\x54\x9d\x95\x06\xa1\x46\xc2\xcb\x73\xfb\x20\xad\x71\xe1\x13\xe8\xa4\xde\x62\xb7\x7a\x43\x09\x9a\xa0"
		"\x25\x63\xa4\xb9\xd2\xf1\xda\xed\xd3\xeb\xab\xa4\x90\x9d\x2f\x44\x29\xad\x45\xb4\xd2\x56\x2e\x04\xb1\x33\x06\xec\x4f\xbc\x50\x5f\xbe\xcd\x35\x9c\x3a\xdb\xaf\x04\x00\x57\x8d\x90\xad\xd5\x67\xc3\x5c\xb0\x08\x04\xce\xea\xa4\xd5\x82\x1d\x75\xad\x07\xb8\x75\xd5\x4d\x8b\x21\xba\x4b\x22\xf0\x23\xd2\xa9\x4e\xcb\x5e\xae\xfb\x1e\x23\x27\xc3\xec\x7d\x47\xb7\x88\xd1\x93\x3e\xe0\x41\x01\xcd\x75\xbe\xca\x52\xdc\x22\xf9\xe5\x48\x48\xa8\xd8\x90\xba\x50\xe4\x1a\xde\xf3\x21\x67\x8e\x9a\xb4\xfd\xe1\x9a\xfd\x34\xd2\x8f\x66\x05"
		"\xf6\x8f\xc8\x56\xa1\xd0\x6e\xbb\xb9\x1d\x88\x3f\xf6\x27\x89\x2e\x20\x98\xeb\xa3\x6f\xcd\x00\x15\x55\xbc\xc0\x2f\x81\xff\x4d\x41\x04\x95\xae\xf8\xbb\x84\x79\x1f\xf3\x10\xbb\x21\xb0\xf6\xa8\xd1\x8a\x0e\x64\x3a\xbf\xe1\x81\x93\xd1\xd4\x17\x3d\xbe\xe0\x33\x5a\xe4\x2c\x47\x22\x22\x5f\xca\xca\x6e\x00\x4e\x2b\x5e\xfa\xa5\x70\xba\xee\x46\x1f\xa8\xcc\x48\x81\x84\x7f\x00\x1e\xf1\x4a\xd6\xb6\x5a\x35\xcf\x91\x67\x42\x60\xb7\x6c\xbd\x8d\x60\x0c\x3b\x82\xd8\x98\x11\x49\xc7\x6c\x74\xc9\xe5\xe7\xac\xe9\x8e\xbd\x75\x1b\xcb"
		"\xbb\xe8\x70\xe8\x63\x50\x38\x91\x19\x12\x85\x35\xbe\x6a\x58\x8e\x5f\x5b\xb8\x13\xe3\x63\x78\xc5\x5d\x3b\xd0\x38\x3f\xc0\x84\x6f\x46\xd3\x82\xa6\x69\x16\xd3\xaf\xb5\xfb\xfc\xd4\xa9\x52\x14\x90\x53\xd5\xf4\x71\x15\x4e\x08\xd1\xcd\x92\xed\xe2\xc9\xe1\x08\x63\x6d\xda\x3f\x9d\x19\xa4\x2e\xc9\xd5\x46\xe5\x6a\xff\xb3\x9b\x19\xe4\x4f\xad\x26\x72\x86\x4a\x88\xff\xea\x04\x72\x97\x80\x3f\x71\xac\x73\xae\x02\x52\x2a\x4b\xf5\xfd\x0b\x91\x33\xcc\x4b\xe1\x02\xbc\x05\x8f\x37\x07\x0a\xfa\x87\xe0\xb5\xb2\x8c\x42\xe6\x3b\x83"
		"\x92\xa1\x4a\xae\x6a\x54\x97\x6f\x81\xdd\xb3\x75\x91\xfd\xf7\x7e\x80\x38\xbe\x6d\x17\x74\xfe\x6b\xbe\xf9\xca\xf7\x14\xcc\x7d\x55\x8d\xfb\x1a\x12\x29\xc7\x00\xb6\xa5\xcb\x0a\xb2\xf0\x4b\x8b\x6b\xdd\xbc\x48\x59\x47\xb2\x02\x8e\x40\x2f\x7d\x5d\x5f\xe6\x30\xee\x9f\x07\xb6\xd4\xc9\xbd\x9d\xa4\x96\x6d\xc9\x7f\xd7\xbb\x2b\x79\x64\x84\x30\xd3\xfa\xe0\x4c\x82\xe5\x61\xc0\x1d\x21\x61\xb8\xa9\x19\x5b\x4b\x43\x2e\xc8\xa1\xa3\xe9\xdc\x24\xf0\x7e\x72\x8f\x5e\x81\x83\xbf\x14\x97\xc8\x40\xbe\xa8\x19\x7c\xa8\x37\xef\xdd\x8c"
		"\x58\x43\xe9\x4c\x66\x0e\x5d\xb3\xcf\x77\x8b\x94\x8f\xe0\xca\x1c\x10\x1c\x06\x95\x8f\xb1\x75\xf4\x30\x7f\x9f\xa9\x9f\xa5\x20\x5e\x25\x6b\xc0\x48\xea\x8d\x22\xb0\x3c\x73\xe5\xb9\x51\x5c\x33\xae\x6a\xb1\xfd\xfb\xd4\x84\x2e\xc9\x0a\xb4\x24\xfe\x0e\x5d\x9e\x29\xae\x95\xdd\x4d\xda\x00\xf5\x04\x52\x13\xd7\x48\xff\x9d\x68\xf8\x53\xf7\xba\xa0\xca\x86\x83\x55\x1b\x6e\xeb\x29\x7a\xc4\x7e\x57\x89\xb1\x15\x38\x5b\x07\xea\xd1\x0d\x8e\xb3\xce\xc0\xb8\x76\x06\xeb\x1d\xc1\xcd\x26\xdd\x85\x83\x20\x26\xcb\x14\xde\x6e\x25\x4d"
		"\xf1\x68\x5b\x51\x8e\xea\xb4\xac\xb6\x0c\x67\xbb\x2a\x2d\x30\x68\x2c\x6d\x32\xf0\x8a\x27\xfd\x01\x56\x76\x1c\x46\xcb\x1a\x9d\x5f\xa1\x3c\x24\xee\x68\x78\xf0\x03\x96\xfa\xaf\xa7\x92\x4e\x4f\xcd\x9f\x79\x01\xe6\xe2\x6c\xb0\xf1\xdc\xa5\x29\x0a\x26\x9e\xd9\xa8\xdd\x52\xfa\x7b\x00\xd0\x39\x88\x8c\xeb\xb3\x09\xe0\x94\x24\x8c\x04\xa6\x7c\x36\xb4\x52\xc5\x17\x5b\xb2\x81\xc3\x91\x37\xbf\xfc\x82\x2e\xbe\x28\x85\x9e\xf7\x26\xae\x40\x41\x7b\x2d\x46\xb0\x54\x47\xda\xcd\xab\x57\x56\x77\xbc\xdb\x70\x28\xce\x4b\xa5\x89\x39"
		"\x3c\x04\x67\x33\x4f\xda\xba\xee\x5e\x72\x5a\x0f\x3c\x3b\x82\xf1\xdf\xde\x46\x76\x44\xf6\xac\x11\xfb\x04\x84\x80\x8a\xe2\x4a\x33\xca\x4a\x21\xbf\x87\x37\x6e\xba\xe6\x5f\x28\x51\x3b\x49\xdd\xc2\xee\x7e\x61\xcf\x1c\x83\xdb\xf3\x87\x1a\xd6\x67\x66\xf4\xb3\x50\xb9\xed\x39\xaa\x77\xdd\x80\xfb\xf0\x58\x4b\xf6\xf0\x4b\xa9\xbb\x0c\xfa\x07\xff\x3a\xc5\x10\xfc\xd8\x91\x10\xc3\xec\x82\x8d\x6a\x01\x76\x19\xb1\x35\x47\xe7\x48\x04\x47\xc9\x3d\x8c\xc9\x67\x87\x0d\xa0\xb5\x65\x6b\x27\x72\xc9\x24\x1a\x8c\xae\xc8\x80\x1a\x4e"
		"\x61\x77\xf5\x49\xab\xd1\xe2\x90\x6d\x53\x1d\xc6\x2f\x66\xb3\x08\x7b\xbd\x10\x72\x1d\x6d\x60\x7f\x53\x39\x78\x17\x51\x4a\x76\xcf\xce\x4b\xe4\x93\xf2\xf3\xf4\xdd\x29\xd5\xcd\xb8\x0a\x14\xdf\x4f\x33\x68\x64\x56\x26\xd5\xd3\x38\xe1\x1e\x9d\x2c\x4b\xac\x01\x21\xc3\x61\xaf\xb2\x81\x14\x7f\x1b\x61\x47\x41\xea\xb5\xb4\x5b\xe9\xdb\xd7\x08\xe8\x31\xee\x91\xa7\x6a\x91\x0a\x43\x12\x02\xc3\x60\x6b\x79\x31\xa6\x79\xd5\xb8\xec\xcd\x07\x13\xa5\xa2\xbe\x99\x68\x72\xa6\x1a\xb4\x70\x12\xf5\xc8\x35\xe3\x30\xfe\xdb\x5d\x64\x5d"
		"\x9a\x37\xed\xe8\x24\xd7\x17\x6b\x93\x51\x75\xfe\x29\x26\xed\x15\xb7\x97\xb7\x6a\xc0\xda\x1d\xa2\x8d\xc5\xda\x45\xa5\xd3\x69\xcc\xbb\x48\xa8\x5d\xfb\x68\xfe\x33\xc8\x74\x19\xdb\x3b\x44\xd0\x61\x61\x40\x8a\x67\x2b\x1c\x97\x96\xf6\xed\xbd\x01\xd7\x21\x32\x34\x80\x1f\x59\xf4\xf1\xca\x8b\xdf\xcb\x1e\xd5\xc7\x26\xb1\xd0\x84\xac\x6c\xd7\xa2\x60\x73\x60\x64\x8e\x96\xc5\x90\x95\xe5\x80\x8b\x3b\xed\xc9\x3b\xf5\x67\x72\xf6\x64\xe6\x82\xcf\x7c\xc2\x21\x04\x11\xe0\xa9\x9b\xf8\x84\xdf\xe8\x7e\x6a\xae\xcf\x0d\xfc\x3e\x08"
		"\x7e\x11\x0d\x08\x26\x9d\x4d\xcc\x17\x80\x51\xb2\x02\x8c\xe3\x93\x80\x0f\x09\x02\x3b\xd5\xa8\x72\xbe\xd6\x69\x0a\x95\x84\x0c\x5e\xa8\x7b\xcc\xbd\x0d\xaa\x95\x75\x78\x87\xe8\x9e\x55\x62\xfc\x44\xbb\xa8\x5c\x48\x88\x2c\xbc\xa1\xc4\x0c\xb6\x8b\x1d\x90\x4f\xb5\x49\x07\xbb\x5d\xcd\x62\x23\x82\x6c\xf7\xd8\xb3\xe4\x89\xf0\x02\xbf\x10\x7a\xf1\x20\xa6\x59\x14\x52\x20\x71\x5b\x56\xd2\xcd\xfb\xbd\x31\xd3\x17\x68\x0e\xf7\x9d\x8c\x8b\x56\xad\x7e\x1f\x05\xa4\xa0\xa4\x96\xa5\x11\x8f\x1d\xe3\xb5\x78\x8c\xc6\x3d\x9e\xb0\x58"
		"\xb5\x71\xb6\x2b\x6b\xa4\xc5\xf7\x2a\x5c\xbd\x7a\x54\x3d\x6e\x11\x68\x67\x4a\x74\x63\x97\x7d\x41\x10\x85\x5d\x8e\x58\xde\x11\x68\x94\xfc\x7f\xb9\x96\x28\xc1\xb8\x4d\x19\xd6\x80\xfa\x2b\xfb\x65\x8b\x51\x6a\x22\x5a\xa1\x62\x38\x74\x4b\xa3\x75\x3a\x74\x82\xa6\xe6\xc5\x24\xab\x04\x0f\x5e\xe2\x19\x96\x61\x76\x9b\x9c\x63\x0f\x35\x61\x4f\x19\xf3\x35\xb3\x5e\x83\x8c\x09\xf2\xe1\xd3\x46\xb2\xd6\xa6\x9d\x35\xc1\x0f\x3b\x49\x2f\xe6\x24\x39\x22\x25\xb4\x8b\x95\x57\xce\xd9\xd1\x5d\xd4\x47\x45\x07\x12\x03\x36\xd1\x0d\x0b"
		"\x14\xf9\x7d\x93\x86\x7d\x6a\xaa\x81\xa5\x29\x06\x6b\xc8\x74\xdd\x08\xab\x3a\x00\x74\x3e\xe9\x2b\x72\x36\xe6\xd2\xbb\xd6\xe8\xf3\x8b\xf7\x10\x06\x08\x60\x97\xc0\x76\x2a\x50\x2e\x75\x3d\x6f\x5f\x49\x35\xfc\x99\x2c\xc7\x7d\x85\x9c\x9c\x84\x71\xc0\xf1\x62\x20\xa8\x25\x71\x7c\x91\xd2\x66\x07\x11\x64\x8a\xd4\xd0\x52\xa6\x02\x07\x51\xb6\x45\xaa\x72\xe3\x57\x1b\x28\xb3\x36\x2d\x37\x96\xef\x75\x9e\x4f\xe5\x50\xeb\xc7\x88\xe7\x89\xee\xa2\x21\x55\x5b\x68\x75\xe0\xbe\xb7\x5c\x39\x0b\xcd\x9d\x33\x12\xda\x6e\xd2\x86\x7d"
		"\xb9\x85\x18\x05\x02\x4d\x21\x6b\x1f\x7e\xd6\x83\x90\xc7\x10\x29\x29\x54\xa6\x8e\xce\x25\x5a\x3e\x9c\x24\xc6\x69\x4d\x02\xea\x48\x09\x66\x4b\xf3\x6b\x4b\xcf\x53\x0f\x84\x26\xdf\xfe\xa5\x7b\x39\x34\x95\x31\x92\x20\xbb\xd2\xf2\xfb\x95\x8d\x02\x9a\x14\x31\x72\xbb\xd8\x85\x5d\x5f\x18\x3b\xee\x4d\x59\x59\x44\x94\x69\xc3\xd5\x47\x62\xc2\x1c\x5d\xdd\xf7\x97\x4b\xe8\x00\xb4\x3b\x83\x8d\x4a\x29\xf2\x02\xbc\x64\x7f\x4e\x8c\xdc\x10\x45\x95\xe1\x04\x64\xdc\xc5\x1b\x7e\x43\xee\x82\x61\x22\xa7\xaa\xfd\x50\xe6\x70\xa3\xa7"
		"\x25\x0f\x50\x7f\x9a\xdc\x4d\x23\xc9\x6c\x3a\x18\x1f\x7a\x62\xe7\x54\xe9\x27\x93\xed\x2e\xcb\x88\x4e\xf7\xb8\x42\x29\x8a\x64\xc9\x96\xbb\x89\xa7\x22\xeb\xbe\x29\x4e\xde\x90\x17\x1c\x78\x35\xb1\x13\x15\x41\x7d\x36\x60\xc1\x16\xec\xc6\x1e\x5d\x24\x98\xea\x42\x43\x14\xba\x21\x42\x4b\x3e\xfd\x48\x31\x3d\x48\x03\xe0\x7e\x41\x4f\xce\x96\xd1\x77\x29\xb1\xb0\x84\xe5\x19\xf1\x9a\x26\x38\x3b\x3b\xc1\x36\xef\x30\x87\x6b\x95\x31\xb1\x58\x35\x04\xd5\x05\x96\x0c\x39\xb8\x71\x19\xe7\x53\x7e\x1d\x18\x65\x06\x23\x14\xa1\xab"
		"\x58\xa5\xa7\xca\x86\x22\xa9\xc4\x73\xe5\x28\x35\x63\xf1\x27\x27\x85\xac\x7a\xbf\xb4\xdc\x09\x0a\x10\xa0\x62\x83\x43\xe2\xd7\x10\x7a\x97\xb6\x81\x78\x44\xe5\x93\x37\x5c\x08\x7c\xa7\xff\xad\xba\x63\x71\x26\xa8\xdc\x16\xd3\xaf\x5c\x14\x1d\x5f\xb5\x44\x37\x4c\x5e\xd6\xb5\x20\xea\x85\x25\x71\xe0\x56\x2a\xdc\xd3\xf8\xad\x20\xb4\x7d\x4a\x8a\x0e\xa4\xb6\xf9\x01\x39\xbd\xe7\xc1\x11\x8a\x9a\x1b\x84\x83\xdb\x51\xb2\x1e\x95\x1c\xaf\x08\x0e\xe6\x14\xf2\x68\xcb\xaf\xa4\xc9\xad\xd3\x05\xf1\xd8\xef\xfa\xc3\x90\xaa\x74\x36"
		"\xa3\xc0\xa3\x32\x23\x02\x32\x47\x6f\x8d\xf4\xc5\x2d\x1b\xa8\x4e\x4f\xd0\xd4\xdf\x8a\xa7\xde\x8c\x11\x63\x94\x67\xcb\x61\x5e\x19\xb2\xe8\xac\x4b\x1e\xeb\xdc\xb2\xbc\x2e\xa5\xb5\xf8\x46\xe2\x3a\xe2\x14\x1d\xa9\x32\x06\x7a\x98\x16\xb0\x45\x22\xd1\x4e\xc1\xc2\xda\x9a\x9b\xc7\x79\x1f\xe9\xe8\xae\xd4\x9a\x5c\x2b\xc0\x9b\x4b\x96\xfe\xf7\x22\xa1\x6b\x7a\x5a\x46\xd6\xd4\x75\xc6\xb1\x19\x02\xc3\x1c\x79\xef\xdb\x09\x8e\x48\xfc\x55\xb6\x9e\xa0\x21\x09\xe8\x78\x21\xd2\x7f\xc3\xe7\x6f\x18\x18\xad\x78\xd6\xe6\x67\x7b\x30"
		"\x46\xa6\x5a\x59\x59\xc3\xc3\xed\x67\x2f\x9a\xe7\xf8\xc6\xf0\x8a\xa6\x55\x78\x6c\x68\x92\xcf\x23\x90\xaf\xc8\x6f\x31\x38\xf4\xe5\x9b\x57\x83\x48\x2e\x43\xe3\x0b\x75\x04\x94\x8a\x8f\x01\xe7\xfc\x20\x44\x43\x47\x97\x81\x16\x44\x16\xad\x39\x53\xa1\xec\x1b\x24\xde\x81\x70\x9e\x1b\x08\xb6\xe7\x95\xc1\x46\xd7\xab\x7f\x38\x59\xce\xca\x92\xa8\x10\x67\x20\xd6\xf3\x52\x42\xf7\xb4\xd4\x4c\x45\x38\x16\x01\xc1\xeb\xe1\x1d\xfc\x7b\x87\xfa\x09\xa8\xfb\x64\x14\x61\x79\xb6\x4f\x13\xd4\x00\xa1\xa2\x35\xed\xb7\x53\x70\xc9\x36"
		"\xf5\x09\xef\xf5\xb3\x20\x12\x36\x3f\xde\xae\x77\xff\x6b\x79\xd8\xc7\xf7\x17\x8f\x3d\xfd\x76\x03\x38\xb7\x66\x45\x74\x17\x12\xb6\x20\xb5\x68\x93\x47\x42\xc5\x92\x71\xd9\xaf\x39\x33\xdc\xa8\xec\x5f\x81\x39\xed\x6b\x69\xa7\x4c\x30\x36\x3a\x46\x74\x4b\x4e\x55\x07\x51\xc6\xd8\x80\x81\x83\x08\x13\x49\x35\xc6\x1a\x9d\x21\x50\x14\x8c\x37\x65\x89\x8a\xcf\x17\xa7\x46\x6d\x9a\x5c\x9f\x39\x23\xbf\x1a\x18\x2b\x53\x2a\xb7\x31\xdc\xcd\x34\x08\xbc\x2c\x28\x4b\x26\xc0\xe1\x3b\x59\x57\x2f\x29\x3b\xa9\xbf\x99\xb7\x15\x68\x44"
		"\xe4\x28\xf5\x6e\x64\xd0\xec\xd9\x87\xb3\x57\x0a\x67\x86\xe8\x7e\xa1\x59\x21\x8b\xdf\xa6\x2a\x3d\xcd\xb7\x5c\xf4\xa5\xcc\xe2\x91\xdc\xad\x4b\xb3\xe4\x69\x6b\x37\x55\x3d\x69\x18\x70\x86\x1b\x33\xb5\x02\xdc\xe1\xc9\x8e\xf4\xe2\x9f\xe4\x28\x2b\x0f\xb8\x7a\x06\x6e\xb7\xc8\xae\xa4\x17\xdd\x8e\x83\x20\x41\x4d\xf9\xd1\x7b\xcd\x26\xf0\xbb\x6d\xef\x68\xd7\x6f\xe6\xed\x9a\x90\xd7\x25\x98\xf4\xc4\x9d\x12\xcb\x4e\x20\xb1\x70\x13\x90\x5a\x3c\xce\x13\xb5\xd8\xbd\x9a\x5c\x7d\xf9\xf1\xc0\x74\x07\x20\x86\xf1\x97\x42\xbb\x7d"
		"\xa5\x53\x74\x02\x9d\xc2\xe5\x26\x8d\x93\xa6\x6f\x14\x9c\xf0\xff\x36\x02\x8f\xca\x1c\x57\x58\x4e\x21\x4b\x5a\x3d\xfe\xef\x04\x7f\x24\xa3\xc9\xc7\x00\x4b\xf7\xb8\xde\x8f\x19\xfd\x55\x7f\xe8\x82\x8a\x2b\x9d\x71\x3d\xa5\xab\xed\xee\x12\x43\xab\x6c\xb3\x80\x94\x60\xc4\xa9\xb7\xc0\xdf\x7b\xdf\x6e\x54\xac\xb6\x69\x20\xb8\x9f\x4f\x2d\xa3\x7b\x59\x7a\x60\xa3\xfd\x31\x87\xd3\x41\xde\x4c\xd9\x0b\x7f\x71\x30\x38\xb0\x27\xa4\x30\x26\xf2\x12\x05\x84\xee\x90\x6b\x27\xb6\xdc\xa7\x13\xda\x34\x7d\x0c\x49\xad\x7b\x2a\x84\x5a"
		"\xda\xe2\xc4\xd7\x7a\x98\xd6\x9c\xf7\x8d\xbe\x0d\x87\x7a\x13\x04\xfa\xb5\xec\xd2\x33\x32\x3a\x0d\xe7\x0a\x18\xe2\xa2\x5c\xda\x14\x30\xf9\x2c\x32\x85\x1a\x6e\x2a\x8f\x60\x13\xa1\x55\xfd\xf4\x93\x1d\xa2\xca\x67\x40\x20\x11\xcb\x88\x7b\xa6\xfc\xdf\xd1\xef\x58\x51\xf7\x76\x78\x4f\x0f\xfe\xb2\xd5\xa4\xdf\x88\x75\xa8\xcc\x31\xac\x7d\xb2\x08\x5b\xe6\x92\x4d\x3e\x68\x0e\x81\xb0\x00\x97\x20\xea\x41\x2a\xc6\xd6\x46\x68\x05\xd4\x40\x58\x72\x67\x9b\xcd\xe5\x9a\x65\xfa\x18\xf2\x6a\xa5\x95\x26\xf7\x68\x69\xcd\xa4\x1f\x45"
		"\x75\x45\xf8\xc6\xd9\x19\x83\xa4\xcf\xaf\xd0\x11\x50\x23\x71\x5d\xd7\xb4\x04\x2e\xb7\xef\x6a\xe5\x7f\x66\xc7\x35\xfc\x5b\x81\xc7\x8a\xe8\xe7\x03\x35\x73\x17\xd5\xd6\x48\x01\x44\xf1\xa3\xe2\x5b\x12\xa2\x1e\xa0\x24\xb9\x86\x9d\x4d\x34\xb3\xb5\xde\xca\x2a\xe5\x82\x0f\x92\x62\x88\x15\x47\x9b\x78\xc6\x5a\xae\x18\xdd\xea\xf8\x21\xd5\xde\x5e\x5d\x0b\x33\xfe\xd1\x61\xeb\x6f\xde\xdd\xea\xa0\x55\x5e\x90\xc9\xd8\x4a\xcd\x90\x4e\x43\xf4\xa9\x59\x79\x69\x2c\x63\xd1\x8c\xbb\x4b\xa9\x33\x98\x6e\x13\x0a\x1f\x13\xa2\x3d\x62"
		"\x56\xb6\x22\xc5\x36\x9a\x39\x2a\x21\x22\x2e\xc8\x41\xbc\x02\x9d\xd3\xbb\x81\x7b\xc8\xa7\xe6\x12\xa4\x41\x44\xc4\x95\x68\xa5\xbe\x68\x79\x15\x64\xdd\x3e\xc9\x23\x42\x92\x6b\x23\xf4\x1c\x9d\x4e\x99\x4f\xb1\x53\x12\xbb\x4d\x6d\x67\x00\x04\x9e\x5e\x64\x58\xe0\xa5\x45\x3c\x9f\x23\x62\x84\x57\x45\x0e\xc0\x80\x82\xc2\x5c\xc9\x5f\x1c\x8a\x1a\x22\xca\xf7\x62\x8d\x26\xaf\x71\x84\xcd\x20\xbe\xfe\x42\x10\x64\xea\x30\xbb\xfd\xc4\x74\x85\x52\xf0\x25\x9d\x82\x5a\x17\xf1\xa8\x88\xba\x8c\x99\x78\x01\xcb\xe2\x5a\xb6\xbc\xa2"
		"\x2f\x42\x6e\x3a\xcc\x11\xeb\x60\x95\x51\xd9\xe0\xe1\xe1\x56\x52\x2b\x1e\x7e\x6b\x50\x63\x12\xde\xcc\xc8\xd2\x00\xad\x7e\x99\x42\xd7\xb9\xfe\x8a\xde\x38\x3c\xcb\x7e\xd6\xb0\x13\xff\x3c\x66\x89\x0b\x0e\x62\x44\x68\x1f\x1a\xb2\xdf\x46\xe2\x87\x26\x5d\xf8\x73\x6c\x95\x23\x01\xaf\xbe\x55\x58\x60\x7a\x7c\x75\x93\xba\x52\xe3\x85\x7f\x89\x37\x69\xcb\x85\x21\xda\x74\xef\xcb\xc3\x66\x89\x44\x10\x39\x7c\x31\x5e\xd3\x73\x80\x78\xdf\x1f\x8e\x6e\x83\x2c\x39\x5d\x09\x39\x90\x7f\x8d\x60\x3b\xef\x96\x70\xcf\xf2\xad\xe5\x6e"
		"\x16\x8b\xe0\x3e\x3c\x15\x20\xcc\xf0\x18\x51\x01\x19\xc1\x27\xdf\x4a\xc8\x13\x44\x4d\x8a\x72\x37\x40\xd7\x7d\x4b\x7c\x28\x03\x69\xd3\x1c\x27\x4e\x84\x92\xa9\x14\x7a\x9d\xf5\x45\x10\x9d\xba\x2f\x5d\x7a\xec\x72\x17\x62\x49\x46\xe7\x89\xe9\xf0\xdc\x70\x69\x63\x59\x37\xf9\xc0\x06\x6e\xd8\xb4\xcb\x05\x3d\x4d\x13\xe3\x32\x0d\x87\xf6\xce\xad\x69\xe1\xc1\x5a\x16\x76\x0e\x29\x48\x55\x00\x5f\x35\x3e\x8e\x93\x47\x70\xf1\x92\x8c\x1b\x78\x7b\x92\x83\xb1\xbe\x81\xf9\x3b\x41\x16\x24\x7e\xd7\x69\xce\xb6\xcf\x2a\xa8\x66\xde"
		"\x54\x3d\x6f\x6c\x8d\xe7\x2c\xf2\xfa\x33\x0e\x2e\x37\x62\x74\xe4\x69\x3a\xa6\x4f\x05\x20\x9c\xef\x2d\x6e\x6d\xf7\x69\x4b\xa0\xab\xd9\x8b\x4b\x60\xe9\x91\x88\xb1\xf8\xdb\x4d\x29\xe6\xec\x7e\xaf\x3a\xbd\x1d\x85\x8c\xca\x5c\x21\x93\x60\x72\xb0\xc5\x15\x2b\x67\x11\x0a\x25\x98\xdc\xfa\x69\x84\xab\x7b\xed\xdc\x3c\x00\xf5\x73\x02\xf1\xb0\xb7\x6b\x54\x03\x35\x59\x0b\x6f\x06\xf2\x19\xf2\xaa\x76\x91\x4e\x37\x4d\x91\xc5\x68\x92\xd4\x30\xa5\xf7\x71\x9c\x86\xf6\xa0\x19\xc9\x1c\xad\xb3\xb3\xa2\x9e\xfa\x64\xef\xe7\xbe\x79"
		"\xd8\x58\x67\x22\x50\xd2\x9e\x84\xd2\x68\xe2\x91\xcc\xbe\x1c\x9c\xfa\xde\xbe\xbd\x66\x6f\xe0\xaf\x6f\x5f\x61\x21\x65\x18\x93\xe3\x6d\x6f\x36\x4f\xb7\x3d\x61\x8c\x62\xd4\x67\xd3\x2a\xee\x1d\xbd\x3c\x7b\xda\x08\x92\x32\x39\xc4\xad\x69\x2d\x23\x35\xc3\xc5\x43\xba\xff\xfe\x0a\x48\x3f\x05\x02\x6c\x7b\x13\x69\xe4\x64\xa1\x05\xed\x91\x92\x76\xe0\xfd\x2a\x98\xe1\xb3\x00\x57\x70\xef\x03\xc4\xdc\x82\xc8\xf8\xc6\xc4\xa0\xb0\x36\x74\x45\x70\xbb\xcf\x67\xc2\xb3\xfc\x13\x94\x7d\x96\x9a\xc1\x69\xa2\x7c\x10\xf4\x90\xc6\xfb"
		"\x2b\xc3\x30\x6f\x34\xa8\x24\xb9\x29\xa3\xc7\x7f\xc4\x56\xf4\x89\xd7\x78\x69\x5f\x04\xc6\x37\x38\x7c\x8a\x80\x05\x0f\x84\xd0\x69\xcf\x33\x8c\xe5\xdc\x5d\x82\x3b\x1a\x45\xd8\xf3\x57\x77\x79\xf5\xc8\xa3\x32\x75\xd5\x85\x2c\x5e\x24\x53\x0f\x39\xcf\xb8\x2b\xa3\xc1\x4c\xb6\x98\x3a\x6f\xf6\x3a\x92\x84\x1d\xb1\x2d\x09\xf2\xd4\xbd\x79\x8e\xf1\xe2\x66\x53\xb8\xb5\x75\xda\x33\x54\x5f\x4f\xc8\xa2\x50\xc7\x8c\x74\xdd\x2d\x88\x75\x98\x43\x0d\x03\xd9\x08\x58\x88\x48\x23\xce\x32\xd4\x20\x5a\x5f\xf9\xb0\x92\x32\x49\x76\x78"
		"\x21\x18\x6a\x3b\x2a\xbe\xce\xaf\x44\x70\x4f\xf4\x08\x1a\x69\xb7\xa5\x7b\xee\x83\xb0\x8d\x31\x00\xd3\x20\x4b\xff\x6f\x7c\x44\x75\x2a\x15\x0c\xc2\x19\xfb\xa0\xf5\x37\xf9\x83\x94\xc9\xf1\x93\x16\x79\x5a\x0f\xbb\xf1\x28\xcf\xd1\x5e\xb6\xb4\x41\x13\xab\xac\x7a\x9a\x08\xba\x9b\xef\x5d\x9b\xeb\x73\xd7\xab\x38\x1d\x9e\x46\xbd\x5e\x43\x3e\x52\x68\x4d\x4a\xdb\x12\x58\xd2\xa4\xdb\x82\xbd\x4b\x35\x93\x1a\x8f\x4a\x83\xf3\xf5\x27\xb6\xea\xee\x84\x8b\x70\x2c\x4c\x11\xa3\x0f\xd4\x2b\x26\x32\x84\x1a\xfa\x73\xca\xea\x01\xbb"
		"\x3b\xac\x67\x19\x9e\xb4\xfa\x23\x59\xf1\x84\x1a\x95\x3b\xe6\x64\xc8\x14\xf0\xb5\x16\x0d\xbc\x88\x41\x7b\x49\x6b\x93\x5b\x54\x21\x7c\x61\x2e\x92\x0b\xd2\x39\x46\x21\xd3\x6f\xe0\x17\x36\x24\xb3\x0d\x32\x71\x43\x43\x61\xef\xff\xd8\xbf\x4a\x97\x9a\x53\xd6\xe5\x6f\xc2\x98\xdb\xee\xe0\xdf\x94\x6b\xab\x5a\x99\x0e\x9d\x01\xb2\x88\xf6\x64\x2f\x56\x61\x81\x83\x48\xd2\x5a\xb4\xe8\x34\x93\x77\x98\x65\x69\x40\xca\x63\xc9\xd9\x64\x04\xb7\xe9\x25\xe1\xe6\x2f\x69\x56\xb9\xdd\xdd\xfd\x07\x64\xac\x04\x50\xcd\x57\xb2\x99\xbb"
		"\x67\x64\x52\x3a\x5c\x6e\x21\x0f\x32\xba\x35\xdb\xe4\xc5\x22\xb4\x40\x6d\x5c\x1f\x31\x39\x8e\xe5\x0f\xc0\x78\x0b\x12\x7e\x16\x23\xee\x8c\x12\xfa\x66\x28\x6c\x33\xee\x67\xbf\x2d\xc6\xf9\x5e\xe4\xb0\xf5\x68\xf5\x7c\x3d\x54\x51\x31\x43\xe4\x62\xc2\x49\x00\xad\x71\xcb\x92\x91\x7c\xd5\x24\x7c\xcd\x20\x9f\x0c\xdd\x47\x7e\xba\x04\xc5\xdb\x3e\xac\xee\x71\x85\x12\x39\x1f\xea\x95\x7c\x6a\x74\xcf\x9d\xbb\xdf\xf4\x5c\xaf\x6c\xb2\x40\xfb\x47\xa0\xfb\xe8\xb3\xa2\x94\x35\x96\xad\xe4\x53\x3b\x24\x68\xfd\x1f\xf4\xfa\xf1\x5c"
		"\x35\xe6\x22\x80\x74\x1e\x6e\x93\x7b\x13\x50\x69\x25\x46\x13\xdd\x26\x67\x55\xd0\x8d\x83\xed\x86\x9a\x60\x38\x0e\x1f\x12\x44\x93\x72\x9f\xd2\x5b\x90\x86\x06\x0b\x21\x71\xb4\x86\x65\x55\x5f\xd2\x11\x04\x12\x9b\x17\x47\xdf\x3b\x65\x9f\x5f\x84\x0d\x92\x04\xea\x7f\xa5\x00\x41\xc0\x90\x15\xf4\xff\x58\xe3\x0a\xe6\xca\xe2\x6c\x4e\x4d\x35\x83\x03\x37\xa9\x0a\xef\x0e\x04\x8d\xa9\x4d\x55\x77\xc9\x41\x4b\x63\xe0\x44\x94\x24\x81\x7c\x05\x6c\xb0\xa2\x36\xd2\x85\xb6\x7a\x90\x81\xa3\xf7\x2d\x26\xf0\xff\xd5\xda\x5e\xa7\x89"
		"\xf0\xaa\x60\xed\x36\xb6\xef\x92\xa9\x9a\x22\x9e\x0c\x78\xb4\xec\x04\xa8\x1e\xf6\x86\x57\xc3\xe5\xa8\xbc\x95\x1b\x6d\x90\xa0\x45\xe3\xb3\x8e\xda\x7f\xec\xf8\xf3\x2b\x2f\x95\xbb\x13\xb1\x5f\x48\x86\x83\xd3\x5f\xf5\x7e\x46\x98\x19\x9f\x63\x38\xb4\x4b\x2c\x02\xe4\x72\x8c\xb6\x4c\x0e\x8f\x0d\x3b\x63\x77\x19\xcb\xff\xeb\xdf\xad\x2e\x91\x36\xe3\xf0\x42\xe5\x33\x4f\x94\xfd\xb3\x5d\x66\x14\x8a\x83\x7a\x33\x3c\xc9\xb2\xf4\x52\x8c\x31\xc0\x01\x2b\x7a\x7a\x8b\xca\x4c\x1f\x1b\xe4\x3d\x0f\xbe\xf5\x62\xe8\x9a\xb5\x61\x69"
		"\xc2\xc9\x95\xee\x9d\x17\xc0\xbb\xeb\x62\x6c\x21\xf1\xd7\x94\x28\x94\x96\x20\x55\x41\x9d\x54\x5b\xda\x1c\xe3\xd3\x60\xce\x12\x39\xd2\x62\xb8\x5e\xea\xe8\x78\x75\xe9\xf2\x61\xee\x64\x3e\xd1\x0c\xea\xf9\x39\x46\x7b\xd3\x7e\x0b\x03\x2b\x49\x85\xe2\xaa\x1f\x22\x33\xbc\x7b\x3d\x9b\xcd\x53\xa3\xd1\x61\x85\x6f\x26\x46\x18\x4c\x1e\xb9\xe7\x86\x88\xcc\xe2\x5f\xb3\x65\xcc\xcb\x2d\x20\x88\xc9\x24\xfd\x00\xa3\xb0\x1e\xec\x3a\x36\xf5\xc3\x34\xa7\x0f\x25\x2f\x02\xd6\x45\xed\xd5\x78\xfa\xbf\xe0\xf1\xa1\x05\x24\x23\xac\xd8"
		"\x20\x5b\x2f\x9c\x73\x01\x67\x17\x74\xc9\x09\xde\x40\x05\x46\x77\x04\x6b\x51\x96\x96\x65\xc7\x3c\x41\x9f\xb5\x46\x21\x90\x2c\xea\x9d\xed\x14\xd6\x26\xef\xc7\xf6\x2f\x69\xb5\x0e\x13\x0f\x69\xfb\x70\x46\x6b\x1f\x62\x35\x4e\xee\x6b\xce\x96\x38\x67\x88\x92\x47\x25\x06\x15\xdc\x14\xd5\x24\x36\xb5\xf4\x0b\xad\xc0\x9f\xc6\x39\x83\x9d\x49\x90\xc9\x2a\x6b\xf4\x34\x63\xfe\xb9\x59\x13\xf5\xe4\x72\xb0\x05\xc2\xad\x6a\x4d\xc6\x82\xec\x65\x23\xa2\xa9\x22\x42\xc6\xa2\x3e\x26\x11\x30\x51\x1d\xcc\xf9\xf4\xa1\x9c\xb4\x2c\x2d"
		"\xe2\x49\x53\xb1\x20\x50\x72\x22\x32\xc9\xce\x5e\xbd\xa3\xd4\x70\x7a\x8c\x09\x2e\x4c\x56\x28\xb2\xa9\x8e\x27\x9a\xd2\xad\xe5\x29\xfc\xfb\xfc\x06\x08\x09\xc8\x14\x40\x53\xdf\x52\x74\xcc\xdf\xd3\xcb\x45\xa3\x65\x5c\x5b\xd9\xff\xf2\x54\x4d\x3e\x8a\x49\x56\x82\x48\x2c\x82\xf5\x11\x15\xe4\x69\xcb\xb4\xe6\xf6\x5b\xdc\x04\xc8\xe7\x69\x4a\x9d\x6a\x5b\xae\x12\xc0\xd0\xd0\xf4\x8a\x48\x4b\xa5\xc8\x6e\x8e\x0a\x1d\x51\xf4\x9e\xc8\x12\xc2\xc8\x2d\x85\x3a\x49\xe1\x96\xb2\xa7\x29\xea\x27\xdd\xea\xa2\xe6\x01\x1b\x1b\xbe\x7e"
		"\xe3\xdd\x8e\x33\xf3\xd5\xe2\x52\x1c\x23\xaa\x4c\x95\x58\xb6\x09\x7b\xca\xb3\x27\x7f\x73\x2f\x9f\xcc\x4c\xa7\x2a\x57\x6d\xe0\xef\x5b\x10\xa7\xe0\x45\xff\x33\xc9\xb9\x65\x9b\x3e\x22\x74\x83\x31\x2b\xfe\x09\xa0\x27\xc9\x3e\xbd\x34\x2f\x3d\x4b\xa8\x50\xc1\x83\x39\x44\xc6\x64\xe4\xd0\x3a\xcc\x0f\x51\x99\xd2\x40\xe5\x5b\x21\xba\x84\x10\x79\xc5\x3e\x03\xc7\x6a\xdb\x49\x70\xd5\xb7\xa5\x50\xa2\xc2\xc7\xc9\x91\xbf\x9e\x23\x9d\x98\x7e\xb0\x1e\x39\x54\x43\x6e\x58\xab\x7b\x0d\x52\x53\x75\x5d\x89\x07\x5f\x77\x19\x3f\x34"
		"\xc2\xad\xf0\xfb\x61\x4f\xac\x9b\xe5\x3b\x29\xf7\xf2\x03\x86\x64\x73\x4c\x5c\xd3\xec\x1e\xf8\xca\x70\x54\x44\x3b\x48\xea\x83\x22\x04\x88\x22\x43\x45\xf4\x5c\x5c\xad\x92\xf0\x80\x16\x03\xde\x18\x40\xcf\xfe\xa9\x8d\xf2\x60\x0b\x3b\x79\xcc\x79\x61\xa4\x9d\x3b\xb3\x38\x58\x0a\xbe\x2c\xe3\xce\xa9\x90\x7d\x5d\x0c\x70\x59\xd2\x45\x1c\xf1\x47\x4f\x1b\x4a\x0f\xff\x66\x8c\x0b\xac\xbf\xcf\x69\xf7\x20\x8e\x4a\x80\x85\x69\xee\x5b\x97\x9f\xfd\x76\xf5\x20\xd3\xb8\x5e\x93\xe4\xa3\xdb\x40\xd6\xc2\x85\x75\xf5\x82\x42\x17\x37"
		"\xb0\x20\x09\xf7\xd1\x61\x69\x66\x6a\xdd\xaa\x0c\x59\x9a\xc2\xa8\xbf\x42\xad\x66\xdf\x61\x73\x5f\xc7\xf5\x3c\xa4\x6c\xa6\xde\x90\xd9\x85\x50\x3e\xbf\xe8\xbe\xf3\x2d\xc2\x3a\x45\x87\x5e\x2a\xdc\xcb\x99\x2c\x74\x19\x1d\x0d\xc7\x05\x9f\x86\xbb\x11\x98\xc8\x8b\x6e\xd7\x2d\x39\x58\x16\xb2\x67\x11\x6f\x41\x64\xc4\xb0\xc3\x3e\x6d\x5a\x59\x36\x31\x56\xbb\x55\xaf\x6b\x52\xa9\x12\xbb\x64\x61\x2f\x18\xc8\x09\x4d\x5e\x3b\x31\xf4\x14\x94\xc3\xed\x89\xf9\x33\x70\x4f\x06\x6d\x7a\x6e\x34\x70\x4a\x3e\xd2\xa7\x0d\x26\x34\xe4"
		"\xbc\xfc\x5e\xd2\x70\x67\x7c\x91\x4f\x5a\xd3\xb2\x4a\x46\x67\x68\xcd\x7f\x61\xa5\x5e\xe6\x0b\xd2\x2e\xd8\xa5\xc5\x20\x17\x87\xa7\x21\xf0\x12\x03\x32\x12\x91\xd7\x86\x2f\xba\x9d\xd3\xba\x20\x7f\x76\x5d\xd1\x18\x39\x45\xaa\x3d\xee\xed\x58\x9f\x17\xe7\xe5\x4e\x23\xd2\x76\x24\x7b\xd2\xee\x35\xe9\x1c\x43\xe2\x92\xac\x2e\x61\x9b\x4b\x4d\x30\xad\xa5\xfa\x70\x4a\x5c\x5a\x86\xba\xd0\x48\xdc\x79\x56\xd7\x7e\xaf\xfb\x34\x24\x3b\xa0\x66\x0b\xeb\xdc\xc1\x33\x97\x64\x79\x75\xd8\x36\xe8\xfe\xbc\x18\x9a\x90\xcb\x6d\x93\x4c"
		"\x2d\xc5\x41\x84\x01\x1a\x4e\xc2\x9b\xe3\xd5\x13\xd4\xbd\xfb\x76\x48\x8b\x32\xb1\x73\xd4\x82\x23\x57\xf3\x2a\x0a\x5c\xee\x25\x23\xae\xfe\x80\xc6\x4d\xa8\x00\x90\x0d\x81\xb1\x0a\x35\xff\xfc\xd2\xb9\xe9\xbe\x33\xb7\xfd\x01\xfe\x8e\x65\x56\xf0\x2e\x12\x48\xdb\xda\xcc\x0d\xe7\x30\xc5\xd1\xcc\x31\xa0\x2b\xec\xb6\x5b\xb7\xbe\x79\x28\x32\x15\xe4\x4c\x11\x57\x95\x6f\xac\x95\x7b\x24\x4b\x08\xb2\x7b\x40\x16\xcc\x66\x86\xf2\x35\x12\xbf\x53\x29\x15\xe1\x34\x71\xc6\xe9\xf4\xde\xfb\x90\x94\x76\x55\xcd\x57\xc7\xf6\xf9\xad"
		"\x26\x4c\x8c\xed\x65\xce\xcc\x58\xd9\x75\xf3\xf4\x1b\x8f\xd5\x8a\xff\xac\xda\xd0\x93\xdf\xd9\x4f\xa6\xd9\xb9\xce\x13\xd8\x0a\x98\x8d\x89\x19\x92\x9d\x2d\x7c\xb8\xed\x83\xb4\xa0\xf3\x25\x1b\x04\xf4\xe6\x05\x63\x07\x6b\xfb\xf8\x37\xa1\xe9\x63\xc4\xee\xaf\x69\xa0\x3f\x6f\x62\x8d\x30\x06\x61\x6e\x0c\xbf\x52\xc6\xc0\x91\x98\x29\xe6\xbb\x8d\xfe\x97\xf9\xa7\x64\xb0\xd4\x33\xeb\x3a\x7c\x91\x94\x38\x68\x3f\xaf\x65\x5b\x7f\xc6\x5c\xbf\x81\xf1\xda\x9d\x29\x07\x13\x69\x8f\x78\x89\x20\xe6\x38\x45\xef\x34\xcc\x1d\x69\x5b"
		"\xb3\x2c\x9b\xb7\x35\x17\xd6\x73\x08\x1b\xe3\xeb\x53\xde\x27\x4d\xc4\x12\x02\xe8\x0d\xfc\x82\x0b\x30\x5b\xeb\xb1\xcb\xda\xd6\x16\xb9\xd6\xd1\x8d\xfc\x85\xd5\x9d\x31\x38\x07\x1b\xaf\xb2\x06\x23\x34\xdb\x56\x21\x8a\xd2\x3c\x8b\x4e\x35\xe9\x41\xe3\xf5\xe8\x92\x58\x31\xb6\x50\x7b\xa0\xba\xca\x05\x20\x4a\x00\x83\x73\xc6\x87\x81\x45\xff\xf4\xc9\x25\x47\x72\x70\x99\x9e\x37\xc5\xe5\xdd\xf9\x2a\xab\x69\xfc\x3d\x8b\x72\x06\xfc\x57\xca\xfa\xdb\x1a\x19\x19\x60\x0a\x1f\xd6\x06\xa8\x1b\xef\x92\x09\x53\x7f\x29\x1e\x64\xd5"
		"\x35\x61\xde\x46\xff\xc7\x6f\xfb\x1b\x5e\x21\x3d\x2b\x2a\x9d\x39\xf2\x48\x68\x29\x04\x98\xcf\x92\x27\x2b\x3e\x9a\xd0\x44\xae\x84\xfa\x15\x0c\xac\xbe\x31\x19\x00\xa8\xd2\x4d\x12\x15\xf8\x90\x2c\xde\xa9\x5c\xc5\x2b\x1a\xde\x13\x3d\x30\x26\xcb\x84\xeb\x34\xf4\x92\xa7\xb3\x77\x77\xa6\x1e\x1b\x4a\x86\x18\x8b\xf8\x45\x56\x58\xcb\xf6\xf0\x81\xb9\x3c\x78\x35\x35\x5e\x80\xc8\x0f\x9f\x7b\xb4\x51\xd6\xe1\xcc\x63\x9c\x9b\x54\xf9\x4e\xbf\xde\xc3\x3d\x75\xbb\x82\x5b\xf5\x22\xd9\x6e\xf0\x3e\x4a\x1c\xc0\x56\x01\xbe\x39\xaa"
		"\x13\x1a\xe2\xff\x02\x47\x46\x1b\xc1\xd1\x35\x91\xe6\x98\xf0\xd8\xf2\x5b\xc4\xd5\xba\xbe\x73\x67\x68\x59\x71\x18\xba\x17\x3a\xf2\x1d\x6d\xaf\xef\x52\x88\x25\x7e\x1f\x39\xfb\xdf\x0e\x9f\x0a\x16\x62\xa5\x37\xb9\xc1\xda\x8d\xea\x87\x92\x7a\x38\x88\xe4\xc3\x77\x34\x40\xf6\x32\x66\xff\x41\x75\x81\x54\x68\xed\xed\xbc\xc2\xdb\xc0\xc9\x5c\xd3\xe9\xda\x40\x2d\x63\x7c\x2b\xcb\xf3\x26\x01\xfd\x64\x89\x40\x90\x19\xc0\x0d\x17\xa8\xb8\x9a\xa0\xae\xd0\x28\xd4\x61\x0c\xb0\xcf\xa5\xd0\x30\xea\x3d\x14\x7d\x9d\xaa\xf7\xcd\xe2"
		"\xf4\x71\x1c\x24\xd6\xfe\x47\x6d\xff\xc7\x19\x4d\x3a\x2b\xfc\xc8\x6c\x5f\x2f\xf1\xb0\xeb\xa2\xed\xd2\xcf\x38\x94\x60\xcd\x7c\x5b\x86\xc2\x48\x12\x81\xa5\x2b\x81\x83\x4e\x5c\x1c\xda\x2b\xa0\x7e\xf4\x14\x5f\x64\x5d\x67\x52\x57\x69\x55\x7e\x76\xa4\xf7\x81\xfa\x10\xe0\x5c\x50\xaf\x89\xbe\xd2\x87\x8f\x7f\x74\x60\x46\x93\xd5\xe7\xfe\xf2\x27\x10\xe5\x44\x40\x0e\xf3\x12\x0d\xa4\x69\x12\xea\x98\x2f\x4d\xab\x07\x9b\x83\xa1\xbd\xd8\x27\x83\xe7\x6b\x9b\x83\x45\x82\x46\x05\x3d\xaf\x1b\x96\x6e\x9b\x63\xd9\x04\xa8\x6c\x28"
		"\x6f\x0c\xbb\x41\xd9\xc3\xa6\x82\xf6\x20\x91\xd7\xb3\x95\x6c\x23\xd2\xdc\x82\xb9\x60\x83\x0a\xf9\x64\xab\x33\x02\xb6\x65\x11\x39\x1a\xa3\x01\x72\xa6\xdd\x81\xed\x4e\x75\xe3\x36\xd4\x96\x9e\x41\x4b\x1f\xec\xce\x3e\xdb\x9c\x62\x90\x34\x2b\xe6\x0b\x07\xbb\x97\x6c\x2a\x13\x93\x83\x4c\xb8\x87\xf1\xe1\x86\xe9\xd3\x93\xa7\x6c\x57\x2f\x37\x0c\xc0\xba\xe6\x9d\x15\xb3\x4d\x10\xa9\x3c\x8b\x34\xf5\xd9\x7d\xf1\xac\x61\x1b\xb0\xd1\x6a\x49\x6d\x59\x35\x8a\xe7\xc6\x75\x9b\x2a\x1a\x58\x35\x60\x4b\xf9\x18\x57\x39\xe4\xc3\x93"
		"\xf2\x96\xb8\x80\x7d\x88\xae\x8d\x9a\x82\xc6\x0a\x79\xc3\x70\x38\x38\xb1\x0e\x79\xc3\x85\x87\xe0\x19\xf0\xfa\xf3\xd3\x8f\x1a\xef\x8c\xb0\xb5\xca\xc7\xd3\x01\xa5\x9a\x24\xaa\x6c\x41\xf4\x77\xbf\xcd\x8a\x8d\x53\xef\x29\x5f\x96\x4b\x15\xc5\xde\xc3\x09\x7c\xbb\x81\xe1\xdb\xb0\x7f\x04\x36\x1e\x88\x61\x07\x0c\x7a\x56\xbe\x0d\x71\x02\x8f\x97\xb9\xdb\xff\x49\x6e\x87\xf9\xe4\xa6\x46\x44\xfe\x08\xb6\xcf\x9c\x98\x4b\xec\x2e\x70\xa2\xd6\xe0\xc0\x30\xa7\xee\xd3\x3e\xe0\x0a\xaa\x8f\xf4\x4f\xc0\x42\x4a\x2c\xd4\xe3\x89\x8b"
		"\x36\x2f\x00\x47\x7a\x55\x46\xb0\xae\x1a\x7c\xfe\xe4\x15\x15\x93\xc1\x72\x37\xf8\xe9\xde\x03\x3b\xd7\x50\xa0\x44\x8c\x17\x40\x05\x5c\x18\x8c\x89\x0f\x05\x87\xb0\x3f\xbf\x88\x37\x02\xba\x8d\x4a\xfa\xff\x75\x1b\xae\x18\x49\x21\xa8\x3b\xee\xb8\xe3\x62\x3e\x36\x8e\x62\x92\xfc\xd2\xfa\x5f\x8b\x4f\x85\xa0\x51\x04\x52\x44\x33\xc5\xf1\xd1\x5f\xee\xb4\xa8\x20\xc9\xe5\x20\x53\x37\xf7\x31\x34\xa2\x3b\xbc\x0b\x1b\xe9\xaa\x97\xd5\x3b\xb0\xd9\xd5\xd8\xe3\x41\x1c\x31\x85\xe4\xfb\xa3\x40\x5e\xb2\xa0\xb3\xa8\xe2\x85\x3c\x82"
		"\xd7\x0d\x0c\x7c\xf0\x94\xd2\x0e\x6d\xb6\xa0\x1f\xba\x5a\x39\x7b\xc6\xf9\xbd\x36\xb9\x87\x26\xa2\x04\x6f\xb9\x81\x23\x0f\x88\xd7\x8a\xfa\xb3\xf3\xd7\x76\x4e\x73\xf6\xfc\x3d\x3a\x2d\xd3\x26\xde\x0b\x18\x0a\x00\x23\x7b\x65\x11\x9e\x35\x5f\x12\xda\xfb\xfb\xe2\x27\x92\x6e\xa4\x92\x90\xf1\x62\x80\x1a\xca\xef\x70\x1c\x95\x7e\xf1\x69\x68\x5c\x56\x98\x77\x83\xbd\x73\x7c\xdb\x62\x7f\xcb\xfa\x9a\xb8\x58\x71\x46\x21\xc5\xa4\x49\xc4\xc1\x3d\xca\x1d\x17\xea\xff\xff\xd8\x1b\x0b\xc4\x60\x09\xcb\x9c\x13\x65\x66\xb6\x6f\x87"
		"\xe8\x78\x29\x94\x2b\x32\x17\xef\x96\xaa\xd1\xcd\x53\xa2\xd4\x0f\x74\x4d\xa4\x34\x88\xb1\xcc\x06\x7a\x43\xea\xca\xdc\xc7\x0f\xba\x85\x23\xf7\xd8\x75\x04\x04\x4e\x84\x62\xbb\x76\x63\x9a\x18\xce\x36\x34\xef\x76\xd4\x84\x2b\xfd\x86\x8b\x58\x51\xb0\x2b\xb9\x0d\x34\x24\x26\x92\x3b\x7c\xdb\xaa\x78\x5a\xcd\x79\xd6\x89\x44\x01\x37\x52\x2e\x78\x92\x73\x25\x71\xe7\xbf\x43\xd2\xbd\xef\xd4\xd9\x0f\x93\x91\x6f\x09\xa4\xe9\x72\xba\x75\xb2\x85\x7c\x1c\xf5\x65\x8b\x3d\xd3\xbb\xe9\x8a\x81\xb9\x69\xca\x1c\x6d\x0c\xeb\x13\x17"
		"\x24\x89\x84\x31\x6a\xe1\x92\xac\x3c\xa3\x28\x05\xe3\x35\x49\xa3\xe1\x70\xea\xdc\xa6\x31\xec\xbc\xa6\x56\x19\xf8\x9f\xbb\x1a\xf3\x60\x36\x60\x60\x02\xcf\xac\x0f\xfe\xfb\x75\x30\xf8\x4b\xcd\xce\xd0\x6b\xbc\xde\xc3\xd7\x71\xbb\x08\x76\x3a\xc3\xe9\x61\x0a\x46\xe7\xa9\xa0\xe1\x8b\x4d\x16\xfe\xf2\xb3\xa8\xd6\x75\x9a\x56\x8e\x98\x7d\xf9\xe9\xd3\x20\x7d\xcb\x88\x3c\x3d\xf3\xb9\x0a\x20\xa4\x69\x30\x5f\x61\xdf\x47\x2e\xc3\xf1\x5e\xb9\x4b\x3b\xc7\xe7\xbb\x0b\x97\x63\x59\xef\x6b\xf9\x9a\x60\xab\x5c\xbd\x63\x43\xb1\xa3"
		"\x00\xed\x7c\x16\x08\x22\xd9\x9a\x5a\xd3\xc1\x7c\x61\xc4\x4d\xfb\xa7\x67\xd5\x1a\xf0\x3d\xf1\xfe\x72\x4b\x9f\x82\xc0\x1f\x72\xd2\xe7\x1b\x77\xfe\x82\xa5\xcf\x1e\x9c\xbf\xe3\xa8\xba\x84\x2e\xab\x7c\x66\x10\x03\x0c\x9a\x58\xe3\x42\x9f\xc2\x6b\x29\x25\x0b\xf7\x12\x6f\xaa\xe8\x08\xd8\xf5\xaa\x74\xac\x32\x49\x75\xdf\xb2\x2b\x64\x20\xd4\x02\x94\xbb\xba\xa8\xa8\x3d\xb9\x83\xdf\x86\xb9\xdc\x77\xae\xbd\x25\xa4\xb3\xc3\xd5\x34\x9e\xa0\xfa\x4d\xcf\x8c\x3a\x31\x13\xb0\xc7\xfc\x17\xfa\xd5\x80\xa0\x38\xd9\x8a\x51\x7b\x0c"
		"\x8e\x77\xb4\x7e\x34\x0d\x84\xf6\x8c\xdf\x04\x44\x5e\xd3\x4a\xf1\xaa\x1a\xbc\xb9\xfe\x54\x24\x90\x0d\x95\x7d\x90\xe0\xee\xb6\x12\x1f\x36\x5d\x5a\x0d\x55\x73\xa3\xc2\x4a\xb1\xb8\xbe\xa0\x70\x53\x25\xa8\xe9\xb8\x87\xc4\x51\x04\xd4\xe9\x98\xaa\x8f\xa6\x66\xca\x30\xf7\xe6\xfe\x03\xc3\x02\x5f\x71\xee\xcb\xd2\xec\x32\x4e\xca\x70\x36\xbc\x39\xfb\x9a\xae\x7a\x94\xfc\xd2\x8c\x60\x64\x9e\x5f\x65\xc3\x51\x3a\x73\xfd\x55\x2d\x9c\x58\xd8\x28\xeb\x35\x74\x8b\xdf\xe1\xa8\x5a\x33\x54\xb4\xd3\xa3\x73\x9e\x1b\xe4\xcf\x1b\x0c"
		"\x5c\x0d\x9f\x97\xd8\xac\x85\x70\x9f\x2e\x24\xeb\xe9\xbc\xf8\x7b\x9b\x5f\x9c\xf2\x93\xd7\x3e\x8c\x94\xa7\x90\xd2\x40\xb3\x51\x21\xce\x22\xab\x25\xcd\xfe\xcd\x3c\xfc\x6c\xb6\x25\x88\xf0\x37\x0c\x15\x29\x13\x54\x73\x1a\x51\xc7\x99\x95\x8c\x5a\xc3\x92\xd1\x70\x51\x87\xa8\xfa\x3f\xa1\x1f\x33\x85\xaf\x40\xdc\xdf\xf0\x36\x5b\x39\xf4\x5f\x9e\x6c\x76\x11\x71\x06\x1e\x9e\x5c\xeb\xc8\x6e\x21\x83\xc6\x22\x35\x11\xcb\xac\xdf\x58\x2c\xea\xa7\x5a\xf0\x1b\xc5\x46\xa6\x50\x15\x71\x44\xfe\x8a\x41\x08\x5b\x11\x86\x6b\x00\xde"
		"\x73\x1c\xc1\xef\xaf\x97\x67\x6e\x6d\x2c\x1f\x71\xc2\x24\x5d\x1a\x02\xf6\x03\xa1\x90\x39\x8a\x5b\xe3\x0d\x51\xe8\x08\x32\x20\xf3\x50\x2e\x43\x6f\xc3\xde\x49\x07\xff\x51\xfa\xdf\x86\xe9\xc2\xf8\x07\xf3\x03\xa8\x6a\x03\x91\x75\x7d\x1f\xc9\xb0\x28\x48\xbf\xb2\xcb\x8a\x4c\x25\xf0\x05\xbe\xbd\xdb\x90\x99\xa1\x14\x6a\x03\x9c\x69\xbc\x37\xee\xdf\x70\x26\x1e\x28\xca\x71\x9e\xc8\x21\x2d\x58\xb5\xa6\x10\x7e\xb9\x1a\xe0\x64\xce\x20\xc6\xc0\x67\xa3\x71\x97\x4b\x62\x74\x86\xfc\xc0\xf3\xae\xc3\x00\x9d\x9b\x0a\xd4\xd4\x2c"
		"\xe9\xc7\x13\x6d\x95\x42\x61\xa2\x85\x4e\xa1\xb8\x09\xc7\xeb\xb0\xdd\x73\x2d\xb5\x3a\xae\xd3\x0c\xc5\x25\x59\xf3\x5e\x4a\x45\x9e\x14\xb1\x40\x02\x12\x42\x5c\x13\x1e\x0f\x1b\x41\x7f\x93\xbe\xf9\x55\xe1\x77\x34\xa8\x0e\x25\x73\x21\x87\x3d\x06\x1c\xf4\x8b\x81\x65\x35\x0f\x40\x1f\xf1\x11\x66\xb8\xe9\xf1\xe0\x22\x22\x52\xaa\x23\xb8\xa4\x5c\xc9\x53\x0b\x3a\x8c\xb8\x6b\x03\xb9\x49\xa6\xaa\x6e\x55\xbd\x8f\xeb\x8e\x1c\x6e\x2f\x8e\x68\xb4\xc8\x05\x5b\x29\x6d\x51\x81\xfd\x0e\x06\xba\x1f\x97\x3d\xb5\x1c\xfd\x5f\xc8\x35"
		"\xb3\x4d\x6f\x24\x22\x4a\xee\x81\xc5\x4f\xef\x8b\x25\xb4\xe1\xd0\x7a\x6f\xb8\xb4\x39\x03\xf8\x97\x5d\x08\x14\x7c\x32\xe4\xc4\xf3\x60\x9d\xf9\x98\x4f\x07\x2d\x57\x20\x98\xc1\xec\xe1\xf4\x61\x23\x2b\xae\x33\x28\x10\xf3\x95\xe9\xa2\xaa\x11\xfe\x16\x3d\x1c\x5d\x2a\x50\x70\xcb\x47\x22\xc2\xa3\x54\x59\xed\xd1\x6b\x01\x57\x20\x75\x67\xd3\x51\x5f\xe2\x6b\x5c\x63\xc6\x9a\x4c\xe8\x0b\x3c\x9c\xe1\x8b\xf6\x0d\x8c\x10\xb7\xb8\x2e\x1a\x73\x8b\x7c\x6f\x63\xd9\xf2\xda\x5a\x30\xd4\xf0\xd1\xdf\x65\x68\x0f\x16\x11\x38\xc9\xf1"
		"\x9b\x04\xcb\x9b\x46\x0a\x2c\xfe\xbd\x62\x73\x79\x2d\x36\x7a\x93\x9f\xd7\x9c\x3e\x93\x66\xd7\x0a\xd5\xd3\x12\x63\x64\xc6\x51\x7c\xf6\x5e\x58\x57\x01\x33\xe1\x9c\x1c\x7e\x38\xbb\x2c\x9d\xbb\x4d\xc7\x86\x09\xb6\x22\x2f\xdd\x98\x2c\x40\x7a\x31\xc6\xcf\x28\x16\xa4\xd8\x20\x57\x90\x01\xc1\x7f\xcf\x44\xa2\x80\x01\x4c\x68\xe6\x14\x91\x98\x9c\x8b\xff\x0a\x2f\x81\x51\xea\x70\xd5\x33\x71\x9f\xce\x3c\x5f\x46\xed\x2a\x5e\x2e\x4e\x28\x5f\x3c\x20\xdf\x88\x09\xb6\x62\x89\x76\x6b\x6b\x98\x06\x01\xaf\x0f\xe9\xd5\x0d\x4d\x53"
		"\x18\xd2\x77\xc6\xcb\xd1\x41\x8c\x9b\xb9\xfe\xdb\x19\x3c\x8d\x51\x67\x63\xb5\x69\xd8\xad\x8a\x2b\x7a\x95\x87\x75\x5e\xce\xb2\xd5\x71\xec\x26\x91\xee\x70\x50\x96\xcc\x29\x88\x12\xe6\x07\x00\x2e\x1e\xb9\x36\xed\xb0\x35\x9b\x6f\x01\x9a\x66\x3b\xd8\x5d\x52\xc2\xf5\xc7\x5c\x8c\xa8\x2d\x85\x6b\xe6\xdc\x56\x9f\x88\xfc\x45\x66\xc1\x8a\x24\x6f\x4d\xc4\xb1\x24\xc8\x4c\xb6\x75\x03\x31\xc5\xe1\xf7\x06\x73\xae\x02\x4d\x1c\xda\x79\x23\x9c\x7f\x3b\x99\x30\xab\xdd\x1d\xde\xc3\x15\xa0\x53\xcd\xcb\x5a\xde\x2e\x9e\x77\x9e\x30"
		"\xa2\x7f\xb5\x67\x2b\x3d\xd5\x6e\xe7\xd5\x3c\x42\x82\x5a\xce\xf8\xb3\x70\xc2\x14\xd2\x44\x13\xec\x4f\x6e\xa0\xfd\x7a\x08\x1b\x9a\x46\xd6\x1a\xae\xf1\x60\x46\x29\x31\x70\x5e\xb5\xb3\x33\xde\xc8\xb3\xf7\x54\x4c\x1d\x8e\xba\x0f\xd2\x6b\x8b\x2d\x52\x07\x0e\x6b\x9a\x52\x45\x2b\xe8\x97\x10\x7e\xdc\x32\xda\x87\x05\x20\x39\x32\xa7\xb0\x00\x52\xf9\x0a\x61\xa4\x06\x3d\x52\x2c\xc6\x4e\x69\xd3\x01\x3d\x00\x7b\xe6\xa8\xf6\x45\x7f\xbd\x38\x9b\x7f\xed\xab\x76\xe3\x81\x44\x45\x8f\x8e\xe4\xae\x82\x06\x5b\x03\xe3\x2c\x73\x8d"
		"\x5a\x47\x21\xc5\x1a\xcb\x73\x8c\xf9\x1f\x0e\x65\x46\x5c\xd7\xbf\x62\x09\x76\x5a\x8c\xd7\x6b\x22\x95\x87\x4d\xbc\x9b\xc1\x9d\xf7\xb2\x41\x25\xf2\x4e\xcf\xa5\x3b\xff\x0b\x62\x1e\x96\xb7\xea\xde\xd6\x68\x90\x49\xda\xa8\x50\xb6\xe5\x9a\x9b\x77\xa8\x77\x92\x36\x13\xbe\x17\x16\x42\x50\x90\x50\xae\xa3\x80\xfc\x0d\x82\xf2\x30\x43\xee\x6f\xac\xd4\xa7\x77\xb3\x38\x5b\xb6\xd1\x6f\xfa\x27\xe5\xac\x1f\x74\x84\x3f\x0a\x41\xce\x4b\xe0\xd0\x5f\x1a\x6a\xda\x11\x39\x21\xc6\xb0\xd9\x89\xfb\x96\x22\xe7\x9b\xfe\x2a\xcd\x9e\xca"
		"\x71\xfa\xf9\x53\x8a\x57\x65\xb2\xbf\x49\x97\xf3\x91\x64\xf5\x46\xd6\x02\x9c\xeb\xd3\x4b\xc7\x7c\xff\x5c\x34\xe6\x2e\xa1\x83\x2d\x48\x62\xcc\xd9\xc1\x36\x56\xb0\xfd\xcb\xd7\x2a\xa1\x03\x91\xe8\x85\x01\x3a\xb5\x09\x76\xc9\xd7\xe5\xd4\x78\x3d\x9d\xc8\x9b\x0c\xf4\xa1\x2e\x9b\x95\xe7\x5f\xae\xd3\x5a\xe5\xb8\xf8\xdb\xc3\xe1\xfc\x93\x8a\x92\xab\x20\x6c\xac\x18\xb3\x46\x5f\xb6\x24\x2b\x0b\x2c\xe4\xac\xd8\x2f\xb3\xe6\xf1\x25\x74\x0e\x32\x4f\x9c\x6e\x75\x20\x9d\xef\x37\xe2\xf7\x39\xb4\x17\x01\x83\x58\x03\x8a\x08\x12"
		"\xf1\xa2\xb5\xa0\x3a\xab\xb3\x3c\xd6\xb3\x7d\x3a\xbe\x49\x35\x1a\x7e\x70\x7d\x8c\x44\x41\x12\x28\xd4\xa3\x8c\xce\x88\xac\xe6\xdb\x18\xb7\xe7\x13\x44\x18\x2c\xfa\xf3\xb3\x3d\x47\xc4\x11\xb3\x97\x57\xc6\x46\xf3\x64\x30\x76\x1d\x2d\x7e\xb9\x84\x8f\x4a\x84\x5c\x5c\x76\x38\xb8\xad\xe9\xe8\x40\x83\x86\xda\x34\x2d\x5d\xd5\x13\xab\x65\xbd\x8d\x90\xac\x0f\x83\x53\x52\xe1\xcc\x68\x46\xd5\x55\xb2\x9c\x81\x65\xb4\x85\x43\xf4\x51\x8d\x25\x06\xc5\x40\x31\x20\xb3\x32\x2b\xd0\x22\x9b\xe4\xc4\x45\x8f\xca\xea\x1f\xce\xd4\x24"
		"\x6a\xc3\x87\x76\x81\x0a\x80\x7c\xd0\xa4\xb5\x9d\x8b\xb5\x8d\xda\xf7\xa0\x9d\x34\x65\xae\xf9\x73\x32\x95\x4a\xd1\xe8\xe7\xed\xc3\x12\x11\x8e\xf7\x99\x36\x65\xe7\xdc\x10\x4f\x38\x79\xe0\x4b\x10\xd1\x69\xc3\xd0\xad\x0b\x51\x46\xce\x24\x4e\x0b\x3a\xe6\xcc\x20\x25\x70\x61\x10\x25\x7f\xb1\xa0\xeb\x43\x19\xe7\xf4\x3e\xfd\x51\x8f\x7a\xd8\x80\xcf\xb6\xa4\x16\x22\x8a\x36\xb2\xe9\x34\xd7\xd3\x64\x33\xe7\x06\x9b\xd3\xf5\x10\xb5\xf5\x7f\x1f\xc9\x9e\x5e\x15\x87\xa3\x10\xff\x3a\xf7\x1a\xfc\x17\x87\xc3\x85\xc1\x9a\x39\x55"
		"\x48\xfa\x50\xe9\xf8\x00\xf2\x44\xdd\x60\x4e\xc3\xe1\x68\xc9\x87\xe7\x0c\x99\xd8\xeb\x88\x06\xf3\xe5\x79\x13\x71\xd2\x3c\x7f\xcc\x61\x03\xcd\x0d\x9f\x15\xa4\xbd\xf4\xae\xa1\x6a\x9c\xe4\x9f\x01\x5b\x5c\x4d\x01\x10\x7c\x14\xf8\xf3\xa1\x12\x2a\x99\x74\x84\x66\x83\xee\xb7\xb4\xd5\x77\x11\x9c\x0d\x34\xb8\xc5\x41\x8c\x1e\x65\xe2\xa4\xda\x87\x40\x95\x13\xdd\x4a\x05\x31\xc8\x41\x22\x06\x9d\x6e\x17\xe1\xe7\xc9\xf3\x18\xcf\x4c\x5a\xa0\x90\xd8\xc8\x6d\xc7\xa9\xf6\x09\x5a\x1c\xc5\x10\xd5\xfc\x33\x9b\x12\xa7\x67\xe7\x3d"
		"\x8f\x68\x4f\x4c\xce\xb5\x9c\x4b\x40\xfb\x3e\x9c\xf0\x45\x8d\xd7\x1c\x72\x98\x90\xd4\x25\xd8\x00\xc9\x3a\x27\xcb\x5d\xdf\x2b\x95\x9f\x12\x96\xfe\xbd\xf0\x5a\x35\x6d\xdb\xf4\x32\xdc\x41\x55\x07\x20\x5a\xa1\x76\xc2\x64\xb1\x0e\xe7\x30\xdb\x2e\xdd\x74\xcc\x19\xdc\x4f\xe3\x15\x2b\x38\x5a\x55\xf3\x91\x64\x20\x79\x70\xb2\x94\x92\x1b\x10\x54\xeb\x74\xb0\x78\x47\x35\x06\x73\xb9\x8b\x3e\x23\xf5\xf2\x56\x1f\x3c\xa8\x99\xd8\xa6\x7b\x3b\xec\x99\x68\xa4\xe4\xc1\xf4\x10\x4a\x27\x58\xde\x25\x7a\xbc\x6d\xc0\x49\x1d\x90\xb2"
		"\x29\xef\x88\xd5\x83\x49\x7e\xc2\x03\x1a\xd7\x14\xf8\x7a\xde\x2b\xf4\x18\xd6\xfc\xc4\x1e\x31\x06\xa7\xa4\x56\x81\xa3\x7f\x03\x6d\x47\x81\x32\xbc\xa6\x90\xf0\x48\x41\xf9\x61\x06\x26\xbb\x4c\xa8\x08\x51\x37\x3f\xc7\x68\xf4\xd9\xea\x41\xe0\x6f\xa9\xbf\x3d\xb0\x7b\x33\xfd\x7e\xaa\x02\x25\x15\x82\xad\xb6\x89\x01\x4c\x03\xc2\x73\x2b\x50\x5d\x77\x65\x1a\xd5\x0e\xd6\x45\x5f\x88\x3a\xe3\xc3\xfd\xa8\xa0\xa3\xb6\x65\x4c\x2b\x7d\x10\x30\x54\x20\x1a\x3c\xcd\xb1\xf3\xf2\x9c\xfd\xf0\xbd\x86\x65\xe8\x6b\x43\x36\x51\x19\x99"
		"\x66\x80\xe3\xe0\xba\xb9\x51\x44\x11\x37\xdf\x39\xce\xba\x77\xa5\x5c\x0e\x07\x08\x78\x52\x73\x7c\xa6\x55\x1d\x30\x3d\x35\xd9\x5c\xae\x24\x0c\x95\xa0\xf6\xb5\x13\x6b\xf9\x49\x77\x7a\x96\xb1\x1b\x89\x7a\xc4\x76\x4c\x4e\x55\x2c\x52\x06\x90\x1f\xcb\xa2\x49\x30\x79\x35\xbb\x96\xda\xd1\x69\xc0\xe1\x55\x53\x24\x19\x24\xfc\x0e\x42\xff\x97\x41\xc5\xae\x77\x93\x1b\xec\xd6\x9b\x35\xfe\xa7\xaa\x17\xe1\x9b\xb5\xd2\x18\x1c\x54\x00\xe6\xba\xbd\x1d\x65\x72\xfc\x5e\xa6\xee\x6b\x68\x32\xff\xf7\xac\xe9\x74\x98\xfe\x43\x4e\xe3"
		"\x57\x91\x31\x87\xce\x35\xc5\x44\x51\xba\xa6\x03\x6f\xcc\xc0\xb9\x91\x83\xf5\x00\x19\xc9\xe4\x7d\xaf\xbc\xde\x59\x62\xf8\xcf\x57\xde\x4e\xfc\x25\xa2\xf2\x3a\xc6\x23\x19\x04\x41\xe9\x6a\x17\x12\x0a\x08\x08\xc5\xcf\x0b\xf0\x3e\x95\x08\x39\x68\x0f\x9f\x24\x09\x7b\x5a\x78\xf0\xc5\x4c\x27\x02\x3f\x8e\x93\x13\x18\x93\xaa\xa6\x68\x72\x73\xf1\xc6\x23\x13\xdc\xb0\x03\xd8\xb1\xb1\xb7\x47\x63\xe6\x31\x62\xde\x13\xb8\x1d\x9a\x85\x54\x6e\x09\x84\xdb\x2c\x24\x9a\x6f\x2f\x45\x5f\xde\x18\x78\x7e\xd2\xd8\x84\x06\xb9\x9a\x97"
		"\x70\xf4\xae\xf7\x2e\x37\xcc\x18\x69\xc4\xe8\x8c\x57\xc9\xfe\x71\x4e\xdb\x3c\x88\x0b\xe0\x0a\x0c\x1e\x83\xf3\xc0\x63\xd5\xb4\x45\x94\x73\xed\x35\xba\xc0\x8e\xff\xe8\x8b\x0e\xd7\xb9\xf4\xa5\xf0\xe7\x4f\xa3\xb9\x8b\x32\xac\x26\x18\x2f\xde\x8b\x25\x45\x78\x0f\x99\x7e\x9a\xb2\xe2\x31\x65\x5a\x11\xcc\xad\xff\x8c\x46\xd2\xe8\x0b\x7e\xc3\xc2\x84\x95\xfd\x6f\x77\x59\x07\xa5\x26\x77\x69\xa7\x9e\x47\x47\x83\xbf\x57\xeb\x52\x54\x2d\x4b\xb6\x7f\x83\xdf\x81\x86\x23\xa5\x6f\xa9\xdb\x04\x65\x5a\xa9\xa2\x3a\xcd\xc3\xa8\xe1"
		"\x9a\xfa\xa3\x28\x7c\x2e\xa7\xe0\x5d\xeb\xba\xab\x2c\x86\x1c\xa7\x8a\xf0\x84\x5d\xa8\x41\xe5\xed\xe3\xea\x7a\xd4\x60\x99\x47\x09\x17\xfb\x11\xfa\x31\x0e\xbf\xd1\xa1\xff\x77\x23\x46\x7d\x2b\x2e\x0a\x12\x2d\xa6\xa9\xac\x0d\x4b\xbb\x64\x14\x9b\xba\x72\x49\x49\xef\xbe\xe8\x75\x82\x3e\x18\x6e\xef\xa5\xb1\x45\x83\x9a\xf4\x45\x89\x0b\x58\x62\xb4\x11\x71\x14\x94\x16\x27\xee\x9d\x66\x3b\x30\xfc\xeb\x18\x24\x0a\x1d\x5d\xbb\x35\x8c\x1c\x7c\x0b\x16\xe5\x61\x2d\x34\x59\x1f\x3d\x7b\x1a\x37\xca\xe6\xe5\x60\xde\x45\xf0\x45"
		"\xf4\x7a\x0f\xce\x33\x37\x74\x6d\xc7\x97\xd6\x2d\xce\x74\x6e\x37\xea\xf0\xe4\x6c\x61\x34\x5e\x15\xca\x0c\x73\x05\x46\x48\x35\x8b\x18\x72\x21\x5e\x8f\x3b\xdf\x43\xd3\x8e\x2e\xa2\x2a\x93\xc2\x38\x32\x58\x51\xc2\x70\xaa\xeb\x5f\x0e\x18\x36\x03\x8f\xf0\x5a\x53\x0f\x28\xf2\x21\x1f\x96\x04\xe6\xe6\xaa\x05\x50\x80\x82\xe5\xa1\x84\x84\x7c\x3a\x93\x73\x7e\x21\xa9\x92\x4c\x04\x77\xab\x3d\xb2\x59\x46\x2e\xde\x2f\xc1\x6b\x82\xfe\xaf\x7a\x98\xfe\x0f\x55\xe3\xd4\xf2\x4b\x4a\x12\x11\x47\xd3\x76\x02\x93\xd1\xa2\xa9\xd6\xf4"
		"\x3b\xdc\x08\xc3\x2a\xcc\x2b\x82\x9e\x20\x67\x85\x07\x6f\x75\xca\xba\xa0\x85\x02\xd3\x6f\xe9\x9b\x40\x28\x5f\x44\x5e\xd5\xfa\xc9\x09\x3b\xd7\xb3\x38\x9f\x01\x89\xf3\xe4\x15\x15\x03\x5a\xd4\x7b\x6c\xbc\xf4\xf2\x03\x82\xe4\x2a\x26\x68\x78\x6b\x9f\x59\xd8\x21\x0c\x7c\xd6\xd0\x00\xe7\xd1\x9f\xec\x2c\x7c\xe1\x79\x99\xc9\xf1\x57\x7f\xae\xe1\x87\x4a\x01\x64\x94\xe3\xc3\x48\x7c\x8c\x53\x19\xe2\x53\x90\x39\xee\xae\x40\xe6\xb8\x9b\x49\x99\xcc\xc6\x63\x00\xad\xf0\x60\x95\x40\xe0\x97\x25\x9f\xcf\xd1\x46\x62\x98\x43\x66"
		"\x2b\x0f\x62\xea\x80\x2c\xb1\x4c\x0c\x2a\x69\x4c\xe0\x42\x54\x2f\x52\x12\x2e\x29\x02\x63\x2d\x1c\x3f\xd2\xca\x3b\xc1\x76\xd8\xde\x54\x3a\xf5\xea\x83\xd8\xa5\xf4\xd1\x72\xaa\xff\x69\xd5\x9a\x9d\xd2\xa7\xa4\x3e\x26\x54\x52\xa6\x6c\xfd\xb3\x65\x4d\xfe\x74\xbe\x3e\x36\xa1\xeb\xb1\x70\x40\xe2\xc9\x5e\xc7\x57\x9b\xa5\xcd\xa1\xd5\x09\x2a\x74\x8c\x42\xea\x71\x1a\x29\x8a\xd1\x74\x2b\x9c\xb9\x74\x96\x6f\x07\x36\xb2\xaa\xf0\xa4\xa1\x4e\xf8\x62\x17\x1f\x23\xef\x2d\xb3\xa6\xf4\x14\x48\xf7\x68\x99\xd8\x6f\xd8\xaf\xc8\x81"
		"\x73\x74\x8a\x0b\x90\x42\xb9\x7c\x42\xd5\x73\xd0\xce\x29\x6f\xf4\xd4\x1c\xf0\xb4\x22\x2a\x4a\xb2\xc9\x90\xfc\xee\x68\x3e\xbe\x94\x76\x1c\x4c\x65\xfc\x0d\xee\x6f\x7a\x28\xbb\xf4\xd3\x46\xd8\xde\x35\xba\xf4\x30\x57\x50\xb4\x90\x72\x4b\x1d\x60\x41\xae\xfd\xce\xf2\x99\x53\x62\xde\xf7\x67\xf2\xf6\x4e\x16\x60\xed\x9b\x7e\x6b\xdf\x2f\xa4\x20\x5a\x80\x69\xfd\x68\x12\xcc\x62\x04\x4d\x90\x06\x13\xff\x80\xeb\x8e\x8f\xe5\xb1\xee\xb1\x80\xb7\xea\x83\xe5\x1b\x81\x59\x3b\xaf\xf3\x5c\xc9\x35\x2b\xf0\xdc\x50\x09\x50\xe7\x60"
		"\xe7\x76\x26\x9b\xe2\x01\x7e\x12\x70\x2e\x3f\x25\xb9\xe8\x7e\x16\xba\x7e\x4c\xd0\xc2\xc5\xd8\x19\x25\xc8\xe7\x2a\x9b\x3c\xcb\xe2\x13\x55\x38\x56\xb4\xbd\x82\x47\x62\xa1\xa6\xe8\x88\xb7\x11\x1d\x1b\x6a\x98\x97\x2c\xcb\x59\xc0\x58\x2e\x91\x6e\x26\x91\xf5\x97\xb0\xea\xe8\xd8\x89\xda\xd3\x3a\xda\x55\xd7\xac\x4e\x4a\x3f\xd6\xcd\xfa\xfa\xe5\xec\x10\xe1\x4c\x0e\x6a\x61\xfd\xc0\x17\x36\x6e\xe5\x3e\x64\x33\x56\x29\x81\x3f\xd4\x9b\xbf\x80\x7d\xb6\xa7\x2f\x1a\xb6\xeb\x42\x58\xf1\x71\x32\xed\x42\xb2\x3a\x3b\xb5\x50\x22"
		"\xb2\xb6\x0c\xa9\x4f\xbe\x85\xa7\x10\x4c\xb4\x50\x85\xb3\xed\x61\x0a\x8a\x65\xce\x20\xca\x20\xe9\xc4\xf2\xea\x85\x69\x6a\x37\xa6\x30\x1c\xfc\xa1\x81\xcd\x76\x6c\x31\xe8\x0a\xfa\x3e\xe1\xfc\x55\x38\x4a\xed\x88\xef\xbd\xb9\xff\xcd\x99\xc4\xe0\x24\x6c\xa0\xaa\xd9\x75\x7a\x70\x27\x7c\xf2\x41\x2e\x31\xd9\x01\x5b\x41\x8a\xd0\xdf\xba\x68\xc7\x22\x17\xb1\x03\x73\xe6\xa1\x77\xb9\x43\x9c\x63\x0c\xae\xfd\x48\x73\xcd\x9b\x64\x72\x3f\x97\x5e\x86\x09\xc3\xf2\xf3\x53\x5a\x89\x1c\x58\x2c\x77\xfa\x3f\xe3\x01\x63\xe1\x4c\xbf"
		"\x7f\x1e\xdb\x29\xef\x39\x0d\x52\x67\x10\x0f\x52\xe5\x0e\x6c\x0d\x56\x3f\x03\x51\xbf\x04\x3e\x88\x70\x86\xb6\x60\x21\x2f\xc1\x16\x15\x63\xa8\xe2\xbc\xf0\x1a\x3c\xf9\x49\xdf\xa7\xed\xd4\x37\xda\xf3\xa2\x2c\x12\x1e\xe8\x91\xdc\xaa\x45\xd9\x4d\x8f\x4a\x2c\x31\x84\x2d\x8d\x2f\x8b\x3f\xd8\xe0\x36\x44\xfb\x88\xe9\x57\xe3\xb1\xc4\x7f\xe2\x88\xd5\xc0\xcb\xc0\x9d\x55\x92\x3c\x85\xb8\xc5\x91\x0b\x72\xbf\xa8\x97\xe2\xec\x1c\xef\x25\x75\x1b\x3f\xa5\x7e\xf9\x47\x96\xca\x62\xc8\x21\x89\xc6\xd7\x9d\xee\x35\xc8\x75\x18\x91"
		"\x20\xd2\xaa\x23\xb5\xdc\xb6\x01\x6b\xba\x12\x76\xe1\x73\xcd\xb9\x69\x22\xb9\xf4\xab\xa1\xe6\xdc\x22\xd6\xb8\xf5\xba\xb9\xc1\xe9\x80\x63\x74\xab\xaa\x1b\x47\x64\x71\x7d\x3d\xca\x82\x46\x0a\x93\x57\xde\x3f\xf1\x60\x5f\x0e\x37\x79\x45\xf8\x4b\x05\xd8\xf8\x43\x4a\x3e\xd9\x25\xb9\xe7\x9c\x52\x96\x63\x3b\x13\x02\xb3\xb1\xf9\x3d\xe2\x97\xe1\x96\x8b\xec\x00\xdd\x0b\x6a\xa1\x26\xb9\x8f\xfd\x4e\x5f\x6f\xe3\x3f\x64\x95\x31\xe9\x2b\x7f\x57\x42\x85\xd3\xee\x0f\x5e\x6e\x9e\x4e\x73\x4f\x1d\x07\x5e\x80\x0b\x76\x41\xbd\x96"
		"\x36\xae\x5a\x25\xdf\x3f\x8f\xab\xdb\x7e\xf1\x9c\xea\xd7\xb3\x17\xe3\xe8\xf9\xfc\x33\x66\xbb\x47\x46\xdb\x83\x8b\x92\xf6\x29\xbb\x06\xd9\x1e\xb3\xfe\x58\xe7\xce\x11\x68\x1d\xbd\xa4\x03\x2f\x63\x65\xce\xf3\x34\x26\xa6\xe6\xc5\x53\xe9\x74\xa5\x3a\x3a\x07\x93\x1b\x1f\x78\x18\xd6\xdd\x34\xb4\xae\xe3\xc6\x29\xfb\x5a\x5e\xe4\x47\xab\xbe\x25\x7b\xc4\x69\x51\x09\x3a\x99\x9f\x3a\x90\x4f\x47\xe9\x83\xd6\xfc\xb4\x32\x59\xa2\x06\x2f\xf2\x72\xb7\xc4\x2a\xeb\x17\x3e\xbb\xe0\x85\xbe\xc3\xf5\x1f\xb4\x61\x27\x88\x1d\xd4\x8d"
		"\x9e\x3f\x0b\x37\x50\x40\x84\x7e\xc7\x38\x9f\xa0\xb7\xab\xf6\x41\x9b\xbf\xb7\x46\x70\x4a\x6c\x1a\xdf\x4e\x8a\xbd\x46\xb0\x28\x96\xa5\x98\x10\xee\xea\xca\x18\x71\xc9\xa0\x98\x22\x5a\x29\xac\xbc\x61\x87\x07\xdd\x25\x5d\x65\x57\x72\x99\xfb\xc2\x48\x37\x70\xf2\x02\x64\xa4\xb7\xfb\xc2\x37\xb9\xee\x35\x80\x0e\xbd\x1d\xf0\x48\x7b\x09\xcf\xf8\xd7\x03\x3d\xe1\xf2\x12\x62\x96\x8b\xb4\x47\xc3\x4a\x52\x38\x76\xbe\xea\x7c\x79\xa2\x47\xca\xab\xa5\x0a\xeb\x62\x0f\x25\x9b\xed\x03\x38\x76\x9a\xba\x22\x5c\xf8\x99\x18\xe8\x01"
		"\x62\x59\x22\xd9\xef\xc4\x61\x46\xcf\x4e\x88\x03\x80\x71\x54\x6e\x6a\x98\xe9\x89\xbb\xd5\xb5\x68\xc3\x05\xbe\x07\x9f\x14\xf3\x38\x37\xbb\x1b\xa2\x63\xce\x2b\x82\x43\x13\x63\x2a\x60\xab\xce\x68\x8a\xc2\x54\xde\xb9\xb1\x3d\xc3\xf3\x97\x35\x65\x95\xe1\xe4\x46\x58\x6b\xa9\xa3\x00\x3d\x81\x7a\xf8\x32\x85\x01\xbf\xdd\x66\x11\xd6\xd6\x03\xc7\x6b\xb2\x68\x1c\x8e\x72\x06\x14\x16\x3d\x1c\x34\xf4\x63\x03\x9d\xd1\x24\x8a\xdb\xc3\xea\x4f\x84\x1b\xa0\xf4\x66\xde\x17\x3e\xbf\xbb\x5c\xd2\xce\xd4\x08\x34\x7d\x1e\x4b\x1e\x38"
		"\xde\xd0\xc5\xec\x79\xda\x10\xd6\xcb\x08\x26\x7e\x18\x5d\xec\xf0\x1a\x81\xbe\xd5\x89\x60\xf5\xc9\x26\xbf\x3a\x99\x93\xf7\xd0\xbb\x10\xda\xc4\x9c\x13\x02\x71\xf6\x7c\x51\xbb\x5e\x65\x18\x45\x4b\xde\x89\x40\xb5\xd7\xd9\xb3\xb2\x55\x57\xad\xd6\xaf\x01\x3c\x88\xc6\x72\x02\xe3\x21\x34\x90\x9c\xd1\xdb\x0e\xe4\x9c\x43\x7b\x12\xfb\x6d\x23\x53\xa4\xdd\x31\xf7\x60\xff\xed\x4c\x05\xea\x6d\xea\x14\xb8\x1f\x49\xa2\x14\x36\x0c\x7a\x54\x44\xf8\x1c\xa8\xbe\xd5\xbc\x24\x6d\x24\xb5\x9d\xcb\x0f\x94\xa9\x6c\x6b\xe4\x99\xdc\xa0"
		"\x69\x87\x8f\xb4\x94\xd3\xfc\x99\x81\x5d\x2d\x9f\x60\xe1\x15\x7a\xc4\x37\x72\x7b\x04\xa3\x1b\xf2\x5f\xf7\x04\x16\xff\x84\x0a\x19\xc1\x88\x9a\x56\x01\xec\xd1\x0a\xeb\x0b\x44\x3f\xf7\xae\xe4\x1f\xce\x7a\x72\x54\x2f\x55\x80\x5b\x03\x94\x6d\x2b\x61\x06\x60\xb9\x55\x9c\x59\x05\x52\xf5\x9a\xb3\x55\x41\x36\x08\xad\x58\xd8\xb2\x50\xf4\x4f\x2e\x93\x66\xce\xf7\x1c\x7c\xf2\x25\x8f\x7f\x7e\xbc\x91\x37\x73\xa4\x32\x09\x08\x01\x17\x66\xd3\xc7\x65\x3d\xf0\xdb\x2c\x6d\x0f\x9a\x43\xb1\xa9\x31\x08\xfd\x25\x2f\x44\xad\x6d\x19"
		"\x72\x21\x10\x3b\x61\xda\x25\x90\x27\x6d\x7c\x64\x4c\xc2\x27\xbd\x81\x6d\x72\x5f\x63\x9f\xb3\x42\x5d\xfc\x92\xc5\xb4\x00\x85\x75\x06\xa4\x74\xd5\x8d\x8a\xd8\x96\xab\x68\x08\xfc\xfe\x71\xdf\x97\x81\x8c\x6a\xd9\x0f\x0d\x22\x67\xe3\x90\xb0\x6c\x05\x09\x1f\x27\xe0\x3c\x7c\x0c\x06\xd4\x7c\x6b\xad\x65\xb9\xe0\x26\xe4\xd0\xf8\x32\x59\x2b\x3e\x61\x0f\xe8\x5f\x37\x31\x2a\xeb\xb7\x0a\x8b\x54\xb7\x7c\xe7\x38\x3e\xfa\x11\x55\xc2\x39\x58\xba\x06\xb6\xa2\x12\x79\x72\x28\xdf\x52\x0d\xa5\xa3\x5e\x55\x8b\x3a\x7b\x9e\x44\xbe"
		"\x3d\xde\x56\xed\x08\x77\xfe\x27\x3e\x5b\xfa\xad\x56\x51\x33\x28\xcf\xe7\xb1\x48\x57\x9a\xdd\x88\x7b\x2b\xe4\xd4\xd4\x7d\x2a\x9d\x17\x62\x64\xcf\x1c\xe9\xde\xf3\x2d\xf2\x88\x60\x0e\x10\x4e\xba\xc3\x4e\x32\xdb\xac\xc7\x26\x78\xd0\xb8\x47\x63\x23\x3f\x88\x33\x45\xe6\xc8\xcf\x36\x91\xd7\xe7\x62\x70\x7d\x61\x9f\xf5\xc3\x76\xd6\x28\x03\x8f\x48\x8e\x42\xf3\x2e\x40\x2e\x09\x47\x0e\x5b\x13\x5b\xbb\x14\x3d\xcd\xf5\xd1\xde\x00\x28\xd1\xc7\x8c\x3c\x7e\xe9\xbb\x08\x18\xae\xb5\x47\x88\x10\x37\x30\x0b\x07\x2f\xbc\x10\xe3"
		"\xd6\xc4\x93\x38\x97\x78\xfb\x06\xaa\x81\x1d\xf1\x45\xe5\x78\xa2\x92\xc1\xde\x82\x69\x0a\x3f\xa6\x33\x2e\xa5\xd4\x43\x7f\x68\x1b\x97\x7a\xb4\x40\x36\x65\xd0\x09\x04\x52\xa9\x15\x65\x92\x38\x47\x73\x1c\xfc\x0b\x47\xaf\x20\xb9\xe9\x0f\xaa\x7c\x7f\x00\x7f\x00\x76\x05\xfb\xcf\x75\x9d\xe6\x2b\xc6\x7a\x0a\xe5\x05\x62\x8e\x32\x96\x3e\x0b\x2c\xe2\x30\xb1\xee\xce\x07\x5e\xfb\xb6\x66\xb4\xb8\x56\xc4\xad\x60\xa2\xd8\x2f\xd6\xbe\xb8\x8d\xdc\xb1\x27\xb8\x85\xb4\xf6\x4e\xaa\x41\x48\xa2\x54\x9b\x1c\xaf\x14\x6c\x72\x62\xf5"
		"\x0c\x75\xe4\x83\x44\x7b\x03\xa9\xaf\x73\xa6\x0c\x3a\xf8\xa4\xc7\xed\x11\xf8\x10\x97\x51\x6e\x77\x8f\x9f\xf5\x4e\x46\x23\xb7\x16\x17\xec\xd2\xda\x38\x5e\x77\x7d\xd5\xbf\x38\x4d\xe4\xed\x94\x47\x33\x26\x7b\x9d\x44\x1c\xe6\x92\x7d\x5b\x84\xf9\xb5\x73\xd5\xe6\x92\xed\xe0\x54\x45\xdd\xb1\x3a\x1e\xfb\xe9\x58\xbb\x91\x0e\xf8\x7e\xac\x4c\x73\x58\x7e\xb5\x5c\xd3\x45\x39\xe6\xba\x3a\xa9\x75\x4b\xed\xaf\xb4\xd0\x02\x36\x68\xc3\xc1\x31\x09\x7c\x49\xc9\x07\x9f\x02\x2c\xc6\x42\x37\x86\xad\x0a\x18\x12\x40\x05\x7e\x4c\x18"
		"\xfb\x58\x18\x51\x46\xfe\x0f\x74\x8d\x2b\x91\x5e\x1b\xe9\xec\xc0\xa8\x12\x9d\xe6\xcf\xf1\x8b\x6c\xbc\x05\xe9\x5b\xe0\x91\xfb\x8e\x33\xbe\x02\x26\x59\x8d\x09\x59\xf1\x06\x7b\x3a\x2e\x46\x4b\x08\x1a\x8c\x4f\x10\xdf\x60\xcd\x96\xe4\x83\x95\xb4\xbd\x1d\xe8\xac\x16\x0f\x0a\xe9\x27\xbd\x24\xc9\xc3\x09\x0e\x70\xd8\x41\x2b\x87\xc7\x6a\xbf\x60\x00\xed\x23\x97\x39\x50\xa0\xa1\x5c\xfe\x49\xee\xe8\xbc\xe3\xbc\x9f\x3c\xed\x27\x5f\x88\xc9\x63\x45\x1f\xd1\x67\x54\x9b\x99\x80\x01\x1a\x5e\xe6\xd5\x6f\x9e\x69\xb8\x82\x28\x9c"
		"\x5b\xa9\x81\x9d\x31\xdb\xb2\xbd\xd6\x80\x99\x63\x10\xe1\xb9\xb9\x06\x4d\xcf\xd6\xfc\x59\x57\xf2\x86\x22\x75\x4a\x30\x24\x59\xd5\x06\xc6\xec\x70\xd3\x23\xcc\x19\xf1\x42\xda\xa9\x98\xd4\x58\xc5\x2f\x14\xae\xe9\xc3\x8a\x53\xc7\xe5\x79\x8f\xab\xf8\x87\x8b\x22\x49\xe4\x3f\xd7\x7a\xf2\x37\x04\xdf\xc9\xfb\xbd\xe7\xa9\xdc\x10\xba\xdf\xa4\x12\x58\x5f\x05\xf7\x9f\x30\x30\xc9\x3e\x17\xec\x76\xdb\x5a\x14\x0d\x48\x89\xc9\x17\x67\x12\x26\x1b\xb0\x81\x3d\x2f\x2e\x32\xa7\xaa\x0b\x0c\x6b\x40\x3d\xa4\xf4\x7e\x4a\xb2\x43\x29"
		"\x63\xc8\x8a\xb3\x51\x92\x44\x04\xab\xe1\x15\xee\xb3\x30\x34\x0b\x8b\xd0\xf8\x4b\x8c\x5d\x12\xbf\x70\x5d\x9b\x61\x37\x14\xaf\x1b\x9e\xbf\x6a\x8e\x70\x58\xd7\x36\xfe\xa9\xf5\x98\x42\x7e\x0a\x18\x9c\xfe\xfe\x25\x10\x76\xdd\x13\x27\xea\x62\x0a\x40\xed\x21\x4f\x1d\x40\xe5\x52\x27\xb8\x1a\xdb\x34\x5a\x1a\x38\x4b\xeb\xd2\x66\x94\xff\x1e\xab\x04\x43\x57\xe2\xfd\xc5\x9b\xe2\x63\xae\x82\xbc\x9c\xd5\x91\x2f\x26\x1d\x47\x47\xd6\xee\xd8\x58\x2c\x46\x57\x7b\x71\x41\x80\x48\x26\x51\x47\x93\x66\xff\xdb\x8c\xc5\xa6\x73\x0f"
		"\xcf\xf4\xfc\x78\x8f\x17\x37\xd1\x4a\x6e\xea\xfe\xfd\x28\xca\x83\xf9\xc7\x87\xf3\xfc\x53\xcb\xc2\x1d\x91\xe4\x43\xf1\xad\x2f\xb8\x5e\xee\x6a\x72\xcd\xc7\x90\xe7\x49\xa3\xc6\x4b\xa9\x77\xed\x59\x3f\x54\xf5\xe3\x0c\x3d\x9a\x0e\x4b\xf1\xc8\x51\xb3\xff\x11\x84\x36\x7a\x85\x19\x44\x29\x3f\xa6\xb3\x68\xd7\x04\xaf\x14\x64\x9d\x61\xae\x4c\x58\xe5\x86\x64\xad\x8c\x37\x9f\x65\xdf\x4b\xc8\x9b\x83\x10\xbf\xcd\x83\x06\x97\xc9\x38\x8f\x53\x3d\x6e\xf0\x03\x8a\x46\x5a\xe9\x5b\xfe\x2f\xcd\x14\x22\xc5\xee\x16\xde\xc0\xaf\x3a"
		"\xef\xc9\xe3\xec\x6a\x40\xde\xb3\xb8\x81\x58\x2d\xba\xe8\x9d\x16\xa1\xf3\x83\x25\xae\x15\xe6\xaa\x2f\x53\xbb\x5d\x2a\xd0\x57\x3e\x58\x50\x49\xc0\x48\x78\x99\x4b\xf3\x36\xc9\x79\x0b\x12\x6b\xd4\xb8\x40\xe9\xe7\xab\x41\x05\x58\x93\xc6\x9c\x23\x91\x0a\x32\x14\xe3\xcb\x82\xf6\x23\x17\x5d\x10\xb1\x9a\xef\x67\x6d\xd5\x7a\xe0\x59\x9b\x3f\xba\xdc\x26\x4b\x7b\x82\xdb\x2a\x7e\x98\x96\x18\xf7\x50\xa5\xb5\xd1\x78\x0f\x57\x57\x4f\xd8\x52\xc4\xf6\x9d\xd4\x86\xa9\x21\xe4\x3d\x1d\x6a\x3e\xb6\x97\xfc\x3d\xa5\x49\x1c\x0c\xf6"
		"\xbb\x51\x41\x89\xac\x0b\x20\x31\xc1\x4e\xb2\x83\x01\xab\xe6\xfe\xae\xd0\x66\xc0\xfc\xa9\x93\x06\xbf\xa1\xc1\x1b\x38\xa4\xe8\x29\xba\x89\xc7\xbd\x6c\xa0\xb1\xb9\x75\x4d\x87\x7f\x8a\xef\x8e\x92\x7d\x21\x4f\xd4\x88\x89\x82\x41\xfe\x17\x3b\x11\x46\xd7\x4d\x2a\xe6\x89\x2b\x94\x9c\x3d\xf6\xdc\x96\x0e\x02\x9f\x3e\x3b\x7b\xce\x93\xae\x8a\xbd\x93\x26\xf3\x0d\x6f\xe3\xea\xd7\xc5\xdd\x63\xed\x3f\x33\x1e\x5f\xef\x65\x91\xb5\xd8\xb5\x02\x59\x48\xa6\xec\xb6\x6b\x8a\xf1\xa1\xa0\xa9\x06\xd7\x96\x3a\xef\xf1\x27\x8f\x32\x61"
		"\xcc\x5b\x3d\x16\x02\xd8\x68\xcd\x51\x2c\xe4\x21\x2b\x69\x40\x47\xef\x2f\xd3\x69\xbd\x01\xe6\xaf\xad\x5e\xf7\xf6\x31\x9f\x51\x32\xc8\x11\x00\x4d\x47\x90\x6a\xc7\xfa\x21\x0b\x71\xed\x85\x2d\xc6\x77\xaa\x83\x68\x23\x9a\xb8\xad\x69\x58\xcd\xf0\x7f\xf2\x23\x9f\xdd\x7c\x0e\x70\xfa\x9b\x22\xcb\x15\x3d\x82\x85\x5b\xe8\x35\xc4\xbf\x0c\x15\x8e\xcb\x7b\xf0\xf9\x3b\x2f\x73\x78\x5f\x35\x70\xd4\xbf\xf5\xb2\xa2\xfa\x1f\x4b\xb4\x8c\x46\x64\x14\x01\xb0\xb7\x24\x4a\xfd\xf2\x26\x65\xb2\x0c\x54\xf4\xfa\x66\x6b\xe0\x1f\x62\xee"
		"\x52\xaa\xbd\x83\xf7\x80\x4b\x55\x36\x03\xde\xb6\x28\xed\x06\x26\x85\xb1\xf1\x31\xaa\xd0\xfa\xb4\x29\x28\xbd\x88\xe7\xc7\x71\x11\x51\x81\xea\x29\xdd\x9d\xfe\x85\x9c\x7d\x79\x34\xf7\xd5\xdf\xdf\x68\x68\x60\xfb\x8c\x0c\xb3\x7e\x76\x89\x06\x2d\xbf\x7a\x6d\xa8\x3b\xeb\xaa\x71\x18\x92\x7f\xd8\x52\xed\x39\xd5\x0f\xde\x9f\xb9\x1d\x73\xed\xc0\x8f\x1b\x9f\xf7\x21\xc5\x40\x53\xd0\xe7\x1c\xd5\x94\x06\x5e\xd0\x03\x3a\xb8\xf5\x33\x7f\xa6\x86\x19\x03\xf2\xf6\xf3\x37\x71\xb3\x13\xe6\x7f\x6b\x48\xb6\x96\x3d\xc1\xe8\x49\x3e"
		"\x36\x48\x86\x0e\x23\x44\xd7\xc1\x17\x3f\x69\x01\xdd\x39\x41\xfb\x2b\x9b\xab\x2a\x0c\x09\x93\xf3\x5c\x05\xb6\x80\x45\xc1\xb3\x8c\x96\xf7\xb8\x50\xd6\x7a\xba\x47\x52\x8d\x05\xa2\xdd\x82\x41\x1c\xab\x6b\x8a\x39\xbb\x17\xac\xef\x28\x90\xdf\xee\x46\x59\x0c\xb1\x3d\xf1\x61\xc7\xbc\xff\x90\x1c\xe2\x14\x90\x70\x1a\x40\xbd\x7a\xe0\x8c\xa2\x79\x62\x22\xd9\x3b\x07\x21\x43\x8a\x6d\x88\x0c\xe7\x30\xc9\x6a\xa9\xa4\x5a\x12\x3d\x1d\xb9\x8a\xa7\x6d\x9a\x91\xf7\x6d\x31\x76\x95\xf5\xe2\x80\x35\x1b\x60\xe7\x16\x92\x75\x87\x8d"
		"\xac\xc5\xd9\xcb\x6e\xc2\x55\xc4\x7e\xaa\x72\xe9\x28\x21\xb3\xee\x99\x5b\x02\x34\x36\xbd\xc5\x07\x68\x29\xa4\x7f\x07\x98\x67\x73\xf2\x88\x10\xc3\xde\x93\x8c\x66\xcb\x56\x7f\x9b\xcb\x5f\xc8\x1d\x61\x4b\xce\x02\x81\x65\x14\x5c\xb7\x23\xe8\x88\xed\x67\x16\xfc\x6b\x73\x8b\xe6\x3f\x19\x5b\xa2\xc0\x7e\xd6\xdf\x2d\xa5\xf4\x26\x33\x0d\x0e\x46\x1f\xfa\xc0\xc0\xd3\x10\xf6\x4c\xaf\x18\x79\xca\x9f\x65\x0d\xb0\xd5\xc9\xbd\x0d\xf8\x93\x50\x72\x72\x81\x12\x6d\x68\xc4\x81\x45\x44\x84\x06\x3d\xab\x76\xf2\x18\xa7\x75\x46\x63"
		"\xde\x72\x7a\x4c\x53\xe8\x35\x24\x8b\x07\xbe\x24\xb2\x2a\x19\x63\xa9\xd2\xdf\x43\x97\x95\x36\xe4\xec\x64\x99\x01\x02\xf6\x12\x91\x5c\x86\xe4\xb4\xce\x5e\x09\x8b\x2e\x4c\x34\x0c\xc0\x54\xe3\x9d\xa5\x83\xcf\xda\x09\x93\x20\x60\x69\xfa\x47\x4c\xcd\x25\xb1\x16\x3f\xac\x93\x43\x4d\x0f\x0a\xd1\x5f\x1f\x07\x65\x9e\x64\x4d\x16\x2d\xe5\xf3\xdd\x54\xe3\xac\xf8\x26\x89\x44\xcc\x6a\x0f\xde\x55\x9a\x7c\x53\x99\xeb\x56\x16\x5e\x94\xa5\x6c\x19\x5a\xf5\x0f\xb5\x72\x5f\x24\x9d\xce\xca\x09\x18\x75\xa2\x37\xed\xd4\xc6\x80\x2b"
		"\x27\x8c\x73\x7e\xa1\x4e\x8b\xa9\x94\x10\x48\x13\xf3\x6f\xb6\x9a\x1b\x10\xb9\x97\x38\x4c\x95\x29\x73\xeb\xc8\x58\x45\x89\x30\x46\x51\xea\xb8\xed\x6e\xb3\xa6\x49\x98\x9e\xcc\x40\xc1\x16\x44\x91\xae\x0f\x0d\x23\x77\x0d\x5f\xfe\x68\xc7\x1d\x4b\x52\x28\x40\x0d\x4c\xbf\x34\xed\xd4\x60\x7d\x2b\x1d\xe4\x2b\x2f\x36\x61\x4f\x01\xc8\x88\x5a\x38\x40\x29\xff\x58\x86\xd9\x24\x96\x58\xc5\x95\x59\x27\x34\x62\x47\xba\xa9\x6b\x80\x99\x89\x3a\x73\x37\x4c\x5e\xf3\xf3\x1b\xa9\xef\xff\xe7\x20\xad\x3d\x22\x70\xea\xfb\xf6\x39\x46"
		"\xb3\xff\xdd\xee\xfc\x49\x05\x75\x3e\x1a\x61\xc1\xd7\x5a\x38\xb9\x16\x05\x05\x64\x39\x22\x41\xb4\xfd\x44\x09\x59\xd9\x89\x9b\xcd\x96\x25\x8a\x01\x3f\x67\x1b\xe8\x2e\x82\x98\x8c\x4e\xc4\x6a\xb2\x5a\x7b\x88\x30\xc4\xe8\xd8\xcf\x6e\xdd\xc8\xb5\x1a\x8d\xff\x29\xe8\x2c\xd7\xdf\xb4\x72\x59\x46\xb5\xa9\x50\x11\x56\x27\x2f\x49\xcb\x65\x4f\x3f\x37\x0e\x36\xb5\x59\xce\xee\x1d\x7e\x8e\x26\xc7\x3f\xf1\x0b\xa1\x34\x40\x9f\xc7\xb5\x01\x0c\xc1\x65\xba\x33\x64\xfa\x9d\x37\xf6\x28\x22\x30\xda\x82\x65\xb5\xb0\x4c\xc2\xab\xa7"
		"\x92\x07\xcf\x2b\x72\x74\xbb\x28\xdc\x0d\xa5\x10\x1e\x1f\x3a\xa7\xd0\x97\x66\x26\xdc\x0c\xbb\x38\x8d\xf5\x17\x2a\xe1\xe2\xd2\xf7\x17\x2e\xb6\x5a\x6e\x15\x36\xa0\x05\xf6\xb4\x40\x9d\x20\x81\x8f\xc8\x53\xa8\xd6\xbc\x26\x8e\xe3\x76\x41\xfc\xc8\x7c\x0f\x3f\x9d\x36\x4e\xc1\x53\x6b\xe7\x7c\xe2\xcf\xe3\x5c\x18\x12\x1d\x63\x18\x43\x09\x47\xb0\x12\xc7\xce\xf6\x94\x99\x39\x0b\x68\xc2\x8e\x5d\xbe\x7b\xaa\x1e\x89\x7d\x11\x0a\x69\xf5\x84\x27\x95\x50\xcc\x6c\xe5\x25\x0d\xfd\x1e\x8a\xc7\xa8\xab\xf9\xf1\x4d\x0f\xb1\xcb\x5c"
		"\xc0\x68\x23\x3a\xad\x4d\x67\xfa\xb7\xce\x25\x7f\x3f\x17\xdc\x47\xac\x7c\x7e\x7c\xe7\x6e\xb3\xff\x7b\x12\x8e\xb3\x19\xbe\x65\x5b\x99\x18\x4c\xe2\xfc\x01\xa5\xa7\xbc\x3b\x09\x5f\xa8\xbd\xa4\x36\x6b\xdc\x2e\xb7\x72\xac\x39\x65\xe8\x3f\x44\xc4\x65\x98\xc9\xbb\x91\x28\xb2\xb0\x3b\xb3\x21\x80\x27\x28\x10\xd3\x50\xc9\xa5\xbd\x8b\x26\x27\xbe\x60\x79\x02\x97\x0c\x76\xa9\x24\xe1\x2d\x88\x13\x1e\xeb\x03\xd5\xcc\xe0\x91\x6e\x29\x39\xc9\x31\x78\x04\x1c\xaf\xfe\x73\x81\xb5\x6c\xc0\x69\xc7\x8a\x49\xe7\x90\xce\x44\x77\x01"
		"\xf1\xb1\x65\xb8\x4f\xb0\x10\x9f\x39\x96\x53\x64\xa3\xe9\x90\x4f\x94\x3f\x90\x80\x07\x81\x69\x70\x64\x4a\x44\xc2\x18\x8a\xec\x5a\x07\x4d\x56\x6e\xf4\xc6\x3b\x51\xab\xa6\x93\x1f\x1b\x4f\x10\x13\x5a\xd0\x7d\xe0\xca\xe6\x69\xab\xb4\xc6\x31\xec\x5e\xdd\xa7\x0a\x0f\xae\x27\x68\x65\xa0\xea\x25\x07\x95\x58\x43\x57\x84\x05\x86\x8e\xaa\x4b\x71\xe0\xf2\xe9\xf7\xad\x2c\x5e\xb8\x9e\x06\xd8\xb7\x2d\x8a\x2a\xff\x56\x3c\xe9\xfe\x08\x10\xa9\x2c\xa3\xf6\x78\x3f\xff\x1a\x1d\x48\xe5\x9a\x7e\x80\x88\x6e\x3c\x44\x3f\xad\xdc\xc1"
		"\xc6\x89\x24\xc5\xe3\x4c\xd0\x58\xe8\x80\x0e\x89\x97\xa1\x22\x2e\x40\x9e\xb1\x25\xbc\x6c\xb5\xf8\xdc\x46\x39\x1a\x9c\x7a\xa1\x76\x71\x12\x38\x89\x83\x9b\x7a\x98\x65\xc0\xed\xbc\x88\x10\x71\x78\xac\xf1\x7f\xe0\xcf\xb6\x3d\x59\xcf\x59\x14\x17\xa6\x92\x57\x13\x0e\x49\x4b\x50\xa6\xf1\x6a\xa6\xf1\x38\x98\xb6\xb7\xa3\xcc\x52\x3e\x26\x9b\x19\x6d\xca\xeb\xc2\xa5\x4e\x50\xac\x0a\x3b\xf9\xf5\x60\xed\xe5\x48\xaf\xf4\x6e\x4b\xb5\x12\x74\xba\x59\x4e\xc1\x5f\xac\x21\xf0\x41\x0f\x66\xb2\x79\x23\x53\x3b\xd3\x9a\xd4\xf8\x50"
		"\xca\x43\x0f\xa8\xba\x55\x05\x12\x60\xec\x54\xbe\x48\x2a\x5c\x11\xd2\xfc\x5e\xd7\xda\xd4\x9c\x52\x4f\x93\xa1\xaa\x8f\xd8\x70\xca\x89\x58\x69\x5e\xdf\xd0\x96\x49\x28\x25\xe0\x3d\xdc\xb8\xb2\x26\xd5\xd4\x13\xb4\x6d\x2e\x2d\xa9\xbc\xdd\x29\x25\xc0\x13\x4c\x6b\x94\x55\xd7\x7a\x20\xb1\x9e\x2d\xe1\x5f\xe3\x70\x8f\xad\xd5\x9a\x16\x56\x8e\xee\x2d\x39\xb8\xfc\xee\xf9\x67\x40\xb0\xa9\xc2\x4e\x7e\x3a\x22\xe1\xc5\xf1\x8b\x91\xd6\x44\xbd\xec\xb7\x79\x5b\xbe\x3f\x95\x90\x66\x55\x04\x4f\xd2\x3e\xab\xb8\xa2\x0f\x28\x90\x7c"
		"\x16\x99\x4a\x67\x1d\x98\x6f\x32\x31\x35\x04\x88\xb5\x62\xd9\x51\xff\xfd\xde\x52\xbd\x91\x48\x0b\x61\x33\x9a\xdf\xca\x53\x53\x08\xc6\xcc\x91\x04\x39\xcc\xad\x8c\x0a\xb7\x39\xd6\xf8\xd8\x0e\xeb\x00\x8a\x77\xa5\x40\x07\xe4\x48\x94\x16\xaf\xe2\x4d\x04\x9d\x88\x5c\xfe\x00\x94\x90\xbe\xf5\xf7\x82\xc5\x26\x65\x52\xe9\x59\x03\xd4\xd6\x37\xfd\x66\x20\x7a\x2e\x43\x6a\xdb\x62\x16\xc6\x8d\xb0\x95\xe8\x11\x69\xa8\xcf\x8d\xdc\x93\x74\xb3\x49\x41\xca\x79\x0e\x1a\xf4\x91\x0e\x84\x20\xac\xd2\xad\xcd\x4f\x7f\xfb\xfd\x7e\x73"
		"\xd8\x4d\x58\xc1\x20\xe3\xf3\xc9\xc6\x52\x1d\x4b\xeb\x52\x6c\x5f\xb1\xa0\x8e\xe3\xac\x26\x01\x93\xb0\x8e\x75\x2c\x0a\xf3\x8b\x49\x8b\x50\xf2\xfe\xf4\x1a\xcf\xdc\xe0\xdb\x06\x47\xdc\x05\x3d\xdf\x95\x2b\x45\xd4\xa2\xa0\xfd\xbd\xeb\xeb\x3f\x6c\x58\xa8\xda\x09\x3e\xac\x60\x87\xb5\x8f\x7e\x52\x4e\x60\x93\xb6\xe2\x31\xd2\x15\xb4\xea\xdc\xf8\xd6\x9e\xc2\x95\x7d\x94\x5b\x1f\x0c\xa0\xbb\xa4\xdf\xfc\xf5\xcc\x5e\x02\xa6\x31\xe4\x94\x02\x7f\x48\xfe\x53\x2b\x48\x68\xad\x4d\xc0\xb3\x2a\xdb\xc2\x57\x34\xd1\x4f\xe5\xba\x62"
		"\x90\xf8\xcc\x1a\xe8\xef\x80\x4d\x9c\xd0\x45\x1c\xff\xc2\x80\x94\x31\x8d\x57\x39\x31\xff\x77\x1b\x4d\x69\x87\xed\x2c\x33\x0f\x04\xb1\xaa\xd1\x31\xee\x92\x5e\xaf\x19\xab\x02\x66\xf4\xef\xcb\x04\xf1\xf7\xf1\xbc\xd5\x40\x5f\x77\x1b\xc3\xba\xb3\xcb\xa9\x71\x2e\x43\x5d\xe9\xfe\xea\x31\x37\x22\xb7\x72\xaa\xee\x61\x6c\xd5\x2e\xcd\x32\x55\x2e\x79\x26\x5f\x29\x4e\x75\xf7\x2b\xfe\x25\x19\x35\x17\xc4\x3c\xdf\x3a\xf6\x45\x52\x05\x97\x6d\xdb\x46\xa4\x62\x4f\x5c\xae\x9e\x33\x0f\x40\x53\xcd\x1c\xed\x7a\x48\x12\xe6\xca\x0f"
		"\x70\x37\x7c\x5b\x4d\x34\x1d\xb5\x18\xeb\xd0\xfb\xa4\xfa\x58\x07\x73\x5a\xad\x6d\x7e\xac\xc0\x25\xe7\x88\x0f\x34\x1d\x7d\x34\x8c\xb5\xe3\x07\x99\x92\x73\xda\xdf\xf2\xf4\x55\x1b\x4e\xb3\x63\x17\xfb\x98\x1e\x31\x39\x6b\x86\xa4\x26\xe8\xf0\x7e\xc7\x8f\x62\xef\x4c\x8f\x4a\x71\x27\xc4\x4f\x11\xca\xf8\x9d\x2e\xf8\xb2\x29\xb3\xef\x46\x00\x29\xf4\x98\x8e\xe5\x40\xb4\x9d\x83\xdb\xa4\xaa\x0e\xf6\xc1\xd2\xc5\x4f\x69\xd7\x43\x57\x72\xaa\xf7\x39\x3c\x85\xd4\xe8\x22\x8b\x95\x12\x69\x30\xb2\x3b\x70\xd3\xe0\x3a\xf6\xca\x51"
		"\x8c\xfb\x42\x98\xcd\x01\x88\x5d\x75\x9a\x61\x61\xf3\x6a\x9b\xf1\x74\x3d\xfa\x79\xad\xb7\x60\x51\x6b\x41\x2b\x8c\x6d\xa3\x80\x8e\x54\x93\x3e\x82\xe9\x12\x6d\x53\x52\x0b\xc0\x39\xc2\x4e\x5b\x5b\xc1\xe8\x4f\x52\x43\x23\xa9\xe0\x80\xbd\x2e\x01\xa6\x58\x26\x43\x84\x34\xe9\x49\xaf\x8c\xfd\x35\x34\x89\x31\x17\xf9\x7f\x3e\x15\xa4\xb9\xb4\xf2\x2a\x47\x4e\x5e\x75\xcd\xb7\xf9\x9d\x86\x4a\x23\x8c\x73\x7c\xd6\x82\x77\x0d\x69\x70\x5f\xb1\x25\x8e\xf1\x29\xbb\x35\x15\x26\xd7\xe0\xca\xfb\x40\x76\x8a\xc8\x1e\x87\x6c\x38\xbf"
		"\xab\x22\x03\xea\xd3\x9e\xfd\x55\x19\x21\x86\x56\x2b\x87\x62\x9b\xf8\xcb\x68\x92\xa3\xf2\x13\x3a\x1b\x47\x8b\x8c\x83\xe5\xfb\xef\x66\x97\xd9\x7b\x6c\xb8\xb5\xef\xa9\xce\x81\x27\x4e\x6a\x03\x5c\x67\xbe\x1d\xb1\xd8\xc9\xc9\x78\xdd\x67\x48\x49\x23\xd2\x9a\x3f\xaa\x66\xe1\x63\x4b\x82\x95\xaf\x8f\x24\xe4\x17\xeb\xad\x04\x14\xd4\xb3\x94\xbb\x23\x6f\x2a\xea\xcf\x99\x52\x4e\x0a\xed\xc1\x42\x98\x41\x5f\xf5\x80\x55\x5d\xcf\xc6\xea\xc7\x8f\x78\xbb\x63\x7c\x0a\x02\x3e\x10\x24\x08\xf1\x95\x74\xd8\x05\xc4\xad\x2c\xfe\x89"
		"\xf0\x2a\xc0\x83\xbb\xe3\x97\x58\xc7\x8f\x74\x21\x63\x07\xbb\x4a\x85\xea\x09\xad\x01\x17\x78\x38\x31\x1c\x4c\xda\x08\xd0\x8b\x7f\xf2\xc8\x4a\x4f\x8e\x53\x89\x0a\x5d\x1a\x41\x1f\xf4\xcd\xbb\xc6\xfb\xa0\x59\x3c\xe9\xde\x10\x46\xb0\x94\xb3\x8b\x47\xba\x71\xa3\x80\x23\x14\x75\xe9\xbd\xe3\xc6\x85\x1b\x27\x37\xe5\x7e\x5c\x78\x84\x88\xfc\x0b\xa3\x62\x1b\xc6\x5f\x73\x0e\xb2\x43\x82\x4b\x93\x11\x78\x20\x64\x8b\x80\xc1\x9d\xc9\x30\x39\xc5\x28\x2a\xb0\xbc\x85\xcd\x98\x91\x03\x3c\xe0\x7b\xe6\xe2\x7e\x6c\x45\x91\x62\xeb"
		"\x2f\x63\x6a\xfb\x7b\xf4\x0f\x46\xca\x41\x1d\xbb\x01\xdc\x77\x7b\xff\x9e\x7e\x5c\x4b\xff\xc7\x14\xc5\xfd\x5e\xaf\x81\x57\xbf\x88\x7b\x81\x1b\xd9\x2f\xe0\x86\x31\xf5\x30\xe9\x63\x29\xc3\xd5\x5a\xc6\xb1\xff\xef\x11\x21\x10\x97\xf1\x40\xa0\x81\x33\x06\xa9\xbe\x5c\x35\x19\x97\x46\x7c\x51\xf0\x3d\xc1\x00\x15\xf9\x2c\xbf\x6d\x5f\xe9\xfb\x2f\xcb\x98\x81\x7e\x4f\xd4\x30\x50\xa0\x2a\x5f\x14\xa9\xc1\xb3\x77\xa1\xb8\xd5\x32\x6b\xfd\x95\x6c\x6f\xf9\x52\x63\xd7\xbb\x88\xa2\x55\x34\xde\x11\x2a\x51\xf8\x01\x14\x8f\x38\x06"
		"\x8a\x8a\xc5\x75\xba\x1f\xb2\x26\x43\xf9\xf5\x7a\x9b\x61\x34\x3e\x8d\x94\xee\x70\xc3\xa5\xea\xce\x76\x70\xf7\x70\x8f\x01\x5f\xa3\x31\xcd\x7b\x2b\x4d\x9f\xf4\x51\xac\xca\x3e\x85\x89\x72\xee\x15\x30\x54\xc4\x70\x01\x5a\x43\xd9\xa2\xa3\x32\x28\x14\x10\x6e\x64\xd9\x79\xd3\xf5\xb2\x56\xa1\x77\xe7\x13\x57\xad\x84\x11\x44\x18\xd8\x2c\xaa\x62\x6f\x79\x2f\x06\x51\x73\x57\x83\xbc\xba\x95\xd0\xe4\xb9\x1d\x6c\x32\xc1\x8c\x95\x6a\x5b\x10\x58\x1d\x74\x9b\x56\x85\x66\x6f\xec\x1e\x2b\x1e\xca\x05\xe8\x7e\xa2\xf5\x10\x6e\x54"
		"\x7b\x26\xbe\x66\x2c\x53\x30\x4a\xb1\xa9\x9f\xc9\x5f\x77\x66\xe8\x10\x49\x28\x27\xe7\x40\x72\x34\xb3\xac\x8d\xb5\x73\x83\xd3\x75\x21\x12\x55\x15\x46\x42\x22\x6c\x1d\x83\x13\x22\xcc\x94\x76\x17\xe4\x38\xd2\xc9\x90\x1e\x16\x51\x77\xff\x7d\x58\x38\x90\xaa\x21\x3b\xc8\x75\x1b\xb7\xc0\xca\x1c\x36\x56\x99\xd0\xbf\x39\xb3\xa3\x3a\xa9\x2a\x7d\xc8\x16\xd1\x9c\xf9\x91\x90\x1e\x71\xdc\x5f\x4b\xfd\xf9\x78\x11\x11\x02\x72\x21\x9c\x7f\x0d\x1f\x25\x27\xe7\x50\x3a\x10\x7b\xab\xaf\xb0\x71\x4a\x65\x1e\x0b\xbf\xd1\x25\x34\xe3"
		"\xb0\x17\x2f\x08\x3f\x1b\xe2\xcc\xda\x5b\x01\x06\x58\x53\xe1\x22\x04\x5c\xd2\x35\x65\x52\x74\xab\x4a\xce\x34\xf5\x95\x3e\x14\xdd\xed\xd6\xad\x1d\x90\xb0\x3e\xfc\xac\x6a\x35\xbf\x3d\xf4\xec\x39\x7d\x52\x70\x41\x40\xa3\x4a\xc1\x78\xbc\xc1\x8c\x18\x37\xa5\xaa\x32\xae\x8c\x14\xd9\x2c\xa2\xac\xf4\x4f\xfc\xfd\x15\xcd\x8f\x28\x78\x87\x3c\x67\x43\xec\x7b\xee\xc0\xd4\x60\xa7\xb4\xe5\x4b\x19\x61\xa9\xc1\xb8\x3a\x5f\xa7\xc1\x87\xed\xe2\xbc\x90\xe8\x55\x32\x98\x40\x94\xcf\xb1\xf9\x3e\x98\x58\x32\x5e\xa7\xb0\x77\xfc\xf3"
		"\xcd\x6a\x52\xb6\x5d\xc7\xfc\x13\xfd\xc2\xdd\xfc\x2f\x33\x2a\x11\xec\x6d\xec\xdd\x69\xbe\x2b\xa7\xfb\x00\x69\x60\xea\xdc\x3b\x66\x51\x2e\x2a\xba\xf5\x2e\xa7\xcc\xe6\x9d\xd1\xb9\xee\x9d\x32\x42\xd7\xa7\xca\x64\xc6\x96\xfb\xc0\xb7\xde\x2b\x64\x15\x6b\xa0\x7f\x4e\xf9\xad\x4a\x86\x34\x73\xea\xe8\xfc\xca\x86\x2c\xdf\x75\x36\x2f\xc7\x35\x09\x18\xdc\xfc\xba\x51\xd6\x53\x2c\xdc\xee\xc2\xc1\xef\x53\x57\x25\x6c\x48\x61\x86\xb2\x60\xb0\x9a\xb5\x3a\x93\x17\x5d\x3c\xca\x5b\xb0\x49\x5e\x12\xf9\xee\x24\x20\x42\xbd\xab\x1c"
		"\xea\x45\x94\x04\xbd\x64\x76\xb8\xf3\xad\xd0\x7f\xa5\xbb\xb9\x42\xce\x69\xfb\x78\xf2\x70\xee\x18\x8f\x2a\x47\xfe\xa8\xa0\x6b\x25\xfc\xb5\x9f\x77\xfa\xc8\x25\x61\x5d\xff\xed\x84\x8c\xdb\xc5\xb4\x28\xee\x55\xbe\x8e\x0b\x95\x96\x61\x00\x86\xe5\x8e\xb1\xcc\xcd\xd3\x0e\xa3\x6c\x5d\x7b\x62\xe8\x59\x9d\xeb\xb3\x23\xe7\x3d\xbe\x63\xe3\x3a\x27\x74\x3e\xb9\xc2\x2a\x78\xf7\x70\x3e\x5d\x6a\xf7\x64\xcf\xbf\x25\x40\xd9\x4e\x19\xc7\x14\xa5\x25\x74\xdc\xcd\xa9\x09\x3c\xee\x3f\xae\xb2\xed\x7f\x90\x66\xde\xfe\x64\x76\xe2\x8a"
		"\x0b\x6c\x1b\x5a\x2b\xfb\x78\xc8\x17\x76\x75\xbd\x4b\x7d\xd7\x05\xb3\xd2\x5f\xc9\x3f\x15\x69\x81\x17\x32\xf0\xf7\x7b\xbd\x9a\x17\x7e\x4d\x65\xf6\xf3\x90\xf2\x49\x23\xce\x51\x60\x16\x8a\x7d\x42\xdb\x7d\x1b\xd4\xf1\x12\xbd\x9a\xc4\x90\x20\xdc\x2c\x48\x56\xc7\x58\xfe\xca\xdc\x26\x65\xf1\x0d\xb7\x34\xa1\x89\x08\xae\xaf\x43\xe3\x31\x90\x96\xc5\x00\x11\x09\x3e\x80\x8a\x00\x75\x36\x39\x73\xe0\x32\xe9\x80\xb3\x21\x3b\xfd\xa8\xb5\xff\x4b\x51\xab\x69\xe5\xbf\xfc\x10\xba\xe2\x46\x81\x9e\xc8\x22\x3c\x0b\xbc\xb9\x2a\x7a"
		"\x66\x9a\x10\x9a\xd2\xaa\x13\x7f\x8e\xff\x31\x36\xa7\xcd\xb9\xbf\xc5\xa1\xd1\x5e\x72\x6f\xe5\xb7\x02\x27\x32\xb7\x8d\x19\x82\x56\x6e\x26\x6e\x05\xce\x1a\x0b\xf8\x74\x1c\x1d\xb0\xd3\x7e\x8a\x18\x19\x7d\xb1\x79\xac\x2b\x90\xde\xe5\xd0\x98\x70\x06\x85\x6e\xa7\x4f\x08\xa8\x21\x12\x47\x66\xd5\xdc\x5e\x0f\x1c\xad\xe2\x3b\x86\x6a\x16\x13\xf4\x0d\xc4\xcf\x01\xeb\x12\x8e\x3b\x92\x4a\x94\x7c\xff\xa5\xc0\xe2\xe4\xc3\xa3\x57\x8a\x48\x67\x83\x69\x49\x44\xc1\x62\x02\xaa\x74\x7c\xa0\xff\x9b\xc1\x81\xd2\x9b\xf9\x96\xcb\x85"
		"\xf3\xcc\x39\x01\xb2\x6f\x0c\x4f\xfe\xe9\x13\xbc\x9a\x3d\xf9\x4e\xcf\xb6\x3a\xba\x34\xc0\xef\x9b\x70\x6c\x4a\x20\xd1\x41\x57\xf8\x1c\xc0\xa5\x17\x9b\x4f\x75\xb4\x22\xc7\x76\x73\x24\x84\x7c\xe7\x83\x3b\x1b\xec\x07\xb9\xc1\xfb\x77\x50\x9d\xc9\xc5\xec\x14\x9c\x22\x52\xdf\x17\xe5\xb3\xff\x2d\xeb\x59\x46\x79\x90\x69\x7e\x5a\x82\x7a\xbf\x23\x6e\xf6\x1e\x53\x17\x41\xa5\xd6\x75\x69\x83\x0d\x91\x34\x5c\x4a\xb0\x93\x56\x3f\x40\xe2\x01\x9d\xdf\x15\x02\x0c\x83\x45\xf6\x8a\x76\xf7\x10\xaa\x43\xcb\x7c\x3d\x1a\xca\xa1\x3f"
		"\x7f\xe9\x63\x43\x79\x2f\x69\x31\xe6\x1f\x42\x46\x27\x2f\x3b\x0e\xba\x5a\x2d\x10\x20\x41\x44\x32\x66\xe1\x4a\x97\x52\xb5\x74\x6f\xde\x7a\x1c\x5f\x63\xa8\xd5\x3c\xf6\xe2\x5f\x65\xf9\x5e\x6f\x2d\x36\xe4\xb8\x2f\x85\x09\xc8\xe0\x7a\x7c\x06\x02\x93\x05\x89\x4e\x19\x99\x33\x5d\xfb\x07\xb7\xe7\x32\xab\xd6\xe3\xc9\xb3\x20\x16\x8f\xce\x48\x06\x51\x8e\x44\x77\x64\x55\x29\x68\x80\xa4\xf0\x78\x17\xd4\x92\xc7\xda\x15\xd7\xe4\x3c\x71\x1d\x1f\x00\x41\x68\x00\x27\x1f\x52\xac\xf0\x64\x5d\x23\xac\xa4\xbe\xde\x05\xa1\x5a\x6c"
		"\x09\xc0\x96\x6b\x7d\x54\x2f\xd6\x0e\x18\x00\xcf\xd4\x60\x56\x3b\x90\xce\xe5\xbe\xd1\x8d\xc1\xb6\x73\x61\xb3\x51\x36\x2b\xd7\xe2\xe4\x21\xd7\x07\xc7\x6f\x30\x77\xa6\x4c\xef\xca\xba\xda\xdc\x83\xda\xa4\xe8\xdf\xb2\x16\x7b\xe2\xe0\x61\x0e\x47\x46\x2a\x13\xfd\xbc\x2d\x79\xe8\x3c\x88\xb6\x18\x9a\xa6\x18\x82\xc9\xc3\x59\x62\x73\x43\x1d\x43\xcf\x3a\x36\x21\x4f\x22\x6e\x51\xc0\xc3\xea\xca\x27\x26\xb7\xda\x52\xa3\x96\x4c\x74\xfa\x68\x8d\x35\x25\x06\xca\xce\xb4\xb0\x2b\x25\x88\xed\x30\xc3\x17\xd7\xa8\x36\x0c\xc5\xf7"
		"\xba\x72\x35\x57\xfc\x98\x7f\x8e\x70\xe5\x16\xc4\x4d\x42\xc6\x0a\x24\x04\x03\x0f\x0e\xcf\x37\xdc\x23\x4f\x60\xea\xbf\xbf\x0c\xaf\xd0\xe3\x7e\xe9\x66\x3a\x83\xe8\xe7\x11\x85\x98\xa8\xeb\x87\x6f\xd3\xf5\x94\x70\x28\xbe\x2d\x0a\x10\x8e\x78\xf0\xad\x91\x29\x7f\x09\xf4\x29\x0a\xde\x56\x91\x21\x71\x6a\x75\x13\x73\xe9\xd7\x32\x5a\xc3\x7e\xa9\xd1\x09\x81\x04\x96\xfe\x20\x4b\x41\xcc\x5a\x40\x29\x3c\x2d\x19\xef\x10\x49\x30\x59\xc9\xae\xa1\xc9\xe8\x97\x54\x0f\x19\x4c\xde\xb9\x7f\x33\xc3\x9c\xc6\xa3\x2c\x87\xd1\x5a\xe9"
		"\x0d\xc6\x20\xa3\x71\x7a\x88\x2b\xe9\x21\x91\xae\xb5\x2c\x4f\x4a\xb9\xd4\x98\x31\x1e\xe8\xb1\xf2\x29\x51\x11\x35\x65\x63\x40\x43\x5c\xbd\x02\x98\xbf\x8b\xaf\x82\x1e\xa1\x3e\x05\x8b\x65\x5d\x2a\x05\x1a\x3e\x32\xe4\x34\x39\xcb\xe7\xed\x85\xd9\x15\x2d\x51\x41\x34\x1b\xbf\x02\x35\x7d\x95\x77\x47\xdf\x9c\x79\x1f\x0c\xb3\x56\xe9\xdc\x8e\x28\x97\x53\xba\xee\x3c\x31\x68\x04\x44\xab\x85\x10\x4d\x76\x9d\xf9\x07\x25\x48\xbb\x9c\xc3\x11\x94\xe0\xbd\x33\x28\xab\x94\xda\x65\x1d\x54\x60\x2d\xba\xa0\xc4\xcc\x24\xa4\x90\x30"
		"\xc6\x38\xed\xc6\x5b\xc1\x85\x5b\x1c\xca\x25\xf9\x7a\x04\xe2\xe3\x9d\x68\x04\x38\x22\xe4\x8e\xf8\x1e\x00\xf1\x44\x8c\x66\xf5\x55\x87\x0f\x63\xcd\xe4\x82\x2d\xfe\x26\xde\x2b\x95\xe8\x42\xcf\xbc\x34\x23\x7d\x92\x22\x52\xf3\x38\xb4\x27\x00\x5f\xef\x80\x3d\x45\xb6\x83\x1d\xb6\xec\x4f\x49\xab\xa5\x5a\xef\x79\x11\x55\xe0\x85\x8b\x5b\x11\x4a\x9d\x6b\xe7\xa8\xbf\x6a\xc2\xbc\x11\x49\x4d\x0e\x26\x8f\x5c\x27\x6d\x95\x73\xf3\x3d\xa2\x61\xce\xcf\x5c\x82\x1d\x20\xa8\x9b\xa4\x4c\x92\x3f\x95\xda\x2e\xb6\xa6\xdf\xdf\xa6\x06"
		"\xb7\x66\x4d\xfc\x83\xd9\x47\xe2\x6a\xc6\x2a\x90\x05\x57\x97\x59\xe4\xa8\xbb\xd5\xf8\x69\x0e\xb9\x70\x09\x73\x43\xd3\x26\x2a\x54\xb5\x30\xaf\x8c\xd8\xae\xd5\x84\x01\x56\x02\xeb\xcd\xe1\x36\x2f\xf5\xb0\x03\x44\xf0\x92\x5b\x0a\x5f\x9c\x3f\xf6\x79\xac\x4b\x45\x5e\xc3\x7d\xe5\xfc\x7c\xed\xff\xff\x91\xbe\x6c\xd5\x74\xa3\x93\x8d\x3d\x39\x50\x91\xe7\x82\x99\xc5\xe3\x73\xa1\x44\x9a\x70\x0c\xf4\x3f\xd7\x3d\xad\x2c\xa7\x74\x62\x47\xa9\x70\xb0\x8a\xec\x9a\xe2\xc1\x1a\xf3\x3f\xb3\x92\xac\x94\x6c\x5f\xed\x50\x58\x10\x82"
		"\x69\x67\xd2\x67\xea\xb8\xc0\xed\xb7\xf7\x16\xf1\x73\x13\x9e\x1f\xc1\x8f\x85\xcc\xac\x08\x31\xb6\x6c\xa9\x95\x81\x4f\x49\x9a\x5f\xda\x18\x53\xab\xc3\x02\xed\x7f\x33\x43\xc5\x93\xad\x55\x10\x97\xb8\xec\xbc\x98\xd4\x23\x65\x20\xb1\x16\xb7\x68\xc4\xc5\x70\x8e\xd1\xf0\xcc\x4c\x23\xfe\x1f\x68\x5e\xfe\xe7\xe9\xba\xbf\xf7\x14\x71\xeb\xd6\xba\x64\xe4\x07\xbb\x73\x53\xb2\x70\x4c\xc4\xe0\x74\x68\x82\x7f\x3c\x61\x97\xc5\xa8\x78\xb5\xe4\x74\x55\x0b\x81\x6a\xeb\x93\xdb\x3c\xad\x1f\xbb\x3c\xef\xef\x1b\xa8\x9b\x69\xc4\x81"
		"\x2f\xf0\x7a\xa6\xa2\x63\x8a\xf2\xbd\x80\x7a\x5a\x4f\xb6\x6a\x16\x24\x95\xd1\x21\x0d\x32\x29\x59\xba\x8a\x3f\x85\x4c\xfd\xbf\x5b\x08\xdb\x7d\xc6\xb5\x8d\x33\xee\x3d\xac\x76\x7d\xb9\x86\xbc\x42\x0f\x05\xe5\xbd\x16\xaa\x86\x10\xc5\x18\xb4\xf2\x1b\xa9\x19\x06\x9a\xec\x1d\xed\x08\xc5\x77\xad\x49\xcc\xca\x66\x00\x33\xc9\xcf\x50\xd0\x6a\x10\x83\x71\x2d\x59\x45\x45\x8c\xe2\x92\x60\x84\x72\x1b\xd6\xe0\x33\xd7\xc9\xdb\x0a\x3b\x92\xa7\x24\x02\xb6\x73\x93\x80\xa7\x4f\x9c\xfd\x2e\xaa\x55\x4b\x8c\xf0\x30\x4d\x14\xf1\x97"
		"\xeb\xb8\x98\x2b\x78\x55\x56\x0e\x7f\x77\x93\x47\x8c\xf1\x1a\x94\xbe\xfa\xb3\x5c\xf3\x6f\x64\x0f\xae\x87\xe1\x00\x51\xd0\xb9\x1b\x00\x28\x22\x64\x2d\x00\x42\x86\x90\x6e\xe6\x33\x63\x14\xcb\xae\xfd\x6e\x5c\x84\x71\xd5\x92\x04\x78\x1f\x9d\x84\xff\xeb\x03\xd2\x8a\x01\xb8\xf8\x61\x68\xe7\x5f\x5c\x65\x39\x0a\xfe\x6b\x57\xae\x47\xce\xf1\x2d\x56\xe0\x15\x59\xb4\xac\xd5\x3f\xb4\x23\x3d\x5d\x41\x03\xf9\x6d\xe9\x5d\x1a\xc1\x83\xe6\xaa\x3a\xf8\x8c\x4e\xfd\x11\xe8\x1b\xb8\x6b\x18\x6a\x29\x8d\x44\x7c\x25\x33\x24\xf0\x94"
		"\x45\x75\xd8\x7a\x99\x43\x6e\x86\x64\x8a\x11\xf3\xec\x1c\x4a\x18\xe7\xee\x6d\xbb\xc4\x6e\x62\x5c\x4b\x49\x63\xd8\x86\xed\x46\x32\xa5\x3b\xa0\x57\xc2\xc9\x66\xf0\xa5\x92\x15\x1f\xdc\xaf\x24\xda\xb1\x8b\x74\xc4\x58\x46\xa8\x0a\x2c\xb8\xea\x3b\xe0\xf4\x41\x47\xc2\xc2\x76\xc2\x9d\xba\x82\x06\x50\x26\x9a\x09\x32\x3f\xa3\x91\x7e\xe6\x7d\xff\xf7\x15\x68\xa4\xdc\xe4\xf8\x50\xf6\xad\x55\xc6\x09\x85\x0f\xb5\x24\x29\x42\x28\x33\x4f\x39\x08\x9f\xbb\xc4\x31\xd1\x6d\x01\x0d\xe6\x44\x78\x7e\x43\xbb\x49\xf7\xc0\xf3\xb5\x80"
		"\xfd\x7f\xba\x41\xe0\xe1\x1f\x62\xd9\x38\xa5\xdf\x3a\x63\xbb\x42\x74\x59\x62\xf9\x8d\x8d\x55\x6d\x4c\xc9\x9b\xe0\xb8\xee\x66\x38\x26\xe8\x3a\x35\xe8\xb4\x92\x73\x61\x2a\xcb\x35\x81\x7b\xc1\x32\x29\xea\xc2\x4a\x38\x94\xb4\xa7\xa2\x61\x57\x57\x06\x6e\xd9\x3a\x71\x47\x16\xb9\x9c\xbc\xf9\x08\x54\x6c\x6b\x1c\xe2\xdc\x96\x5e\xc9\xfc\x69\x99\x50\x0e\x1e\x7a\x36\x7e\x26\x55\xab\xc8\x1d\x6a\x52\x8a\xd6\x72\x3c\x12\xd7\xbc\xa2\xcf\x07\x77\xf7\x41\xd2\xd2\x6a\xe2\x5d\x0d\x68\xf0\x6e\x3f\x39\x26\x4f\x08\x0a\x9d\x8d\x1b"
		"\x16\x21\x28\xb9\x62\xb4\x64\x63\x90\xbb\x55\xae\x92\x13\x38\x15\x34\xaa\xec\x36\x54\x55\xd6\x49\x07\x2d\xd1\x9d\x7a\x7e\xfb\xe3\x8b\x2f\x85\x9e\xce\xd4\xbe\xc8\x19\xfa\xaa\x6b\xba\xb3\x2a\x90\x50\x95\xd3\x02\xbb\xde\x91\x71\xd7\x5e\xf5\x69\x5a\x64\x3f\x92\xf3\x88\xc9\xd1\xba\x27\x87\x53\x69\x19\x4a\x6d\x09\xf5\x53\xa3\x10\xea\xc5\x46\xfc\xb7\x95\x04\xa6\x85\xb6\x86\xe5\xad\x8b\x1f\x62\xea\xca\xea\xd4\x21\xce\xcb\x02\xbb\x7a\xd5\xbb\x0f\x78\x28\xe9\xb4\xc6\x62\xcc\x00\x21\xbc\x11\xe3\x7b\x0e\x03\x1a\x62\x0a"
		"\x1b\x26\x73\xb5\x3a\x18\xb5\xb2\xa8\x8d\xd1\x45\xf9\x18\x81\xa6\x52\xac\xe5\xf6\x29\xe0\x2a\x3b\xc1\xe8\x2b\x0f\x12\x7a\x9b\xb8\xc0\x72\xca\xaf\xb1\xf9\xd9\x9c\xcb\xdb\x14\x3e\x21\x3d\x47\x41\x5b\x53\x30\x69\x52\x51\x1b\x6a\xc8\x53\x72\x0f\x1f\x4d\x89\x92\x28\xee\x84\xb4\x31\x93\x3f\x94\x4b\xae\xd9\x05\x19\x6e\x93\x6f\x20\x18\xb1\x73\xbc\xc8\x6a\xd3\x3b\xc5\x42\xb1\x6b\xfb\xcc\xfc\x07\x0c\xc0\x87\x72\x59\x94\x4c\xec\x52\x01\x4c\x60\x39\x4e\xb2\xb2\x5b\xaf\x7c\xaf\x8f\x62\x86\x80\xcf\x77\xe0\x03\xa2\x49\x58"
		"\x26\xf5\xb2\x96\xed\xd5\x51\x20\xd2\x02\xfa\x58\x2f\xa7\xb0\x66\x05\xd5\x5b\xe6\x1d\x38\x2c\xd3\x54\xde\x0f\xb2\x8c\x4d\x74\x99\x93\xbb\x78\x93\xeb\x38\xb9\xd2\xd1\x4e\x9d\x19\x44\x6a\x9f\xf4\xed\x2b\x07\xe9\x27\x57\x21\xc9\x40\xff\x6b\x8e\x3b\x25\xb4\x2d\xe8\x30\x05\xdb\x5c\xb0\x22\x1a\xbb\x5b\x62\x0a\xb6\x44\xf9\x3b\x8e\xd6\x68\xe5\xff\x3c\xd6\x62\x01\xb4\xc2\xc0\x54\xaa\x55\xb8\x7e\x71\xd1\x73\x82\x99\x18\x7a\x0e\x13\xa9\x6f\xf3\x4c\xfc\x5a\x0b\x2b\x9a\xf5\xbb\x7d\x19\xef\x6a\xc2\x53\x04\x77\x8f\xb2\xe8"
		"\xbd\xbe\xec\xf0\x91\x6b\x2f\x35\x77\x17\x9c\x07\x79\xdb\x2f\xc9\x79\xfc\x2c\x4a\x3c\x3f\x5b\x7a\xa1\xbf\x5c\x34\x82\x10\x06\x41\xf3\x50\x9a\x4a\x23\x75\xf8\xd0\x4c\x9b\x9f\x05\xb9\x73\x75\xe0\x78\x5a\x94\xfb\x0c\x6f\x2e\x81\x3c\xa9\x28\xe4\x67\x27\x3c\x50\xaf\x3d\x7d\xa0\xea\x56\x23\xb9\x96\x18\xdb\x0d\x88\x22\xf9\x28\x3c\x96\xf2\xf2\xb3\xee\xa1\x94\x7b\x23\x81\x1e\x40\xcb\x1d\xa6\x90\x78\x7a\x68\x3f\x79\xe1\x86\xb8\xa7\xfd\xab\xa3\x94\xf0\xc7\x71\x84\x54\xb1\xeb\xb6\xcc\xd1\x0a\x60\x6f\x7f\xdb\x14\xfc\x45"
		"\xb9\x35\x03\x06\xe5\x2e\xb4\xf8\x0a\x18\xdd\x7b\x22\xd0\x3e\x94\xd9\xa0\x91\x35\x6c\x3d\x1f\xf9\x3d\xbf\x55\xa8\x17\x99\xa0\x2f\x86\xb7\xf4\x25\x18\x25\xe4\x4d\xe4\x03\x0c\x80\x53\x19\xde\x55\x49\x14\x12\x94\xb7\x8a\x04\xcc\x79\xf5\x4f\x07\xb5\x96\x6c\xda\x3e\x22\x3c\x21\x81\xde\xa4\x6f\xe5\x67\xa0\x5c\xf3\x38\x28\x2a\x21\x82\x3b\x73\x5e\xe1\x3c\x5d\x0e\xa9\xde\x4b\xf3\xf3\x08\xd4\xa2\x9b\x6e\x39\x34\xe9\xba\x89\xcf\x5a\x71\x79\x46\x42\x8e\x61\x69\x14\x41\xf3\x16\xd0\x8a\x81\x8e\x26\xd1\x3e\xb1\xc3\x91\x9c"
		"\xff\x54\xe1\x40\xe9\x45\xaa\x95\xcc\x67\x45\xaf\x1c\x1d\x75\xc6\x25\x90\xaa\xe8\x54\x40\x4c\xf7\x8b\xfc\x08\xea\xed\x4a\x69\xdf\x23\x31\x4b\xf4\x9b\xca\x40\x4c\x4b\x78\xc7\x83\x97\xe1\xca\x97\x8d\xc3\x1e\x4b\x7a\x8a\x59\xa8\x53\xa0\xd0\x09\x7a\x33\xc7\x84\x60\xa4\x67\xa6\x09\xba\x6a\xea\x79\x3c\xe2\x08\x92\xdf\x0a\xcc\xd5\xcb\xd9\x25\x40\x6f\x6d\x19\x01\x0f\x60\xa2\xfb\x98\x03\x51\x64\x13\x97\xb2\x3d\xa1\xb2\xef\x99\x31\xe7\x9c\xd2\xd7\x56\x8e\x27\xa3\x4c\xe8\x3e\xb1\xf0\x1e\x63\x7b\x4f\xea\xe3\x04\x9c\x06"
		"\x9b\x37\x85\x44\xe8\x1d\x31\x83\xa5\x36\x3c\xee\x1d\x6e\x57\x28\x09\xb0\xd1\x17\x57\x39\x19\xbe\x05\xfe\xf5\x79\x8a\x72\x92\xaf\xda\xba\x3c\xd0\xdd\x14\x45\xa6\x34\xad\x42\x87\x16\x2c\xc2\xca\x2f\x75\xad\x58\xfd\x47\xbc\x3d\xe9\x78\x57\x7b\x48\x83\xb2\xee\x2e\x42\x77\xa8\x4a\xfd\xd9\x83\xd5\xc0\xf0\x12\x66\xeb\x58\x48\xec\x44\xb8\xdc\xbd\xd9\xec\xea\xd5\xf7\x54\xf5\x16\xa4\x85\x64\x4e\xc3\xf6\xef\xa3\xd8\xdf\x28\x70\x65\x65\x20\xee\xcd\xcc\xdc\x9e\xd7\xdb\x75\x5c\xab\x06\xa1\xfe\x39\xcb\x65\xf1\x4a\x3f\xcc"
		"\xbc\x67\x0f\xaf\x3d\x3f\xee\x95\xa9\xbd\xca\x6a\x17\x6e\xd6\xd0\x47\xcc\xdc\xd4\x32\x38\x9a\x73\xf4\x92\x75\xf2\x9d\x7d\x56\x99\xb4\x3f\x7a\xec\xdc\xac\x36\x0d\x52\x09\xa0\xd3\xad\x75\x08\x21\x87\xfd\xf8\x15\x36\x23\x1d\x0c\x69\xfe\x8c\x0a\xb4\xbb\x8a\x73\xb5\xaf\x3c\xfc\xa5\x6a\xfd\x03\xf9\x0e\xae\xbc\xb1\x96\x82\xfb\x06\x69\x8c\x26\x1c\xfd\xac\xdf\xe2\x85\xdf\x35\x20\xfb\x70\x17\xe2\x41\xf2\x82\x33\xad\x8a\xc9\xbb\xa5\xad\x86\xb5\x1a\x2c\x70\xa8\xcc\xaf\x39\x48\xe5\x09\x3a\x5e\x54\xa6\x15\x31\x4f\x18\x4d"
		"\x54\x24\xc6\xb0\xac\x64\x44\x3e\x0a\xf7\x97\xe7\xa6\xe2\xb3\x26\x0f\x9a\xfe\x3f\x47\xe2\x3f\xdf\x7e\x85\x07\xe3\xa0\x4c\x8b\xc5\x34\x73\x3c\x52\x7e\xfd\xa5\xfc\xdb\xfd\x1f\x6a\x8f\x88\xc9\x68\x53\xea\x57\xf8\xbd\x42\xda\x26\x03\xe2\xba\xe2\xb9\x5c\xff\x8e\xff\x16\x26\x84\xd2\x5f\x4d\xec\xf3\xc9\xe7\x86\x48\x1c\x8e\x9f\x9c\x0a\x34\x47\xf2\x78\xff\xe5\x69\x3c\xe7\x0d\xe8\x88\x0b\x4d\xcf\x5d\xea\xb4\xb3\x17\x70\x74\x0e\x5b\xd5\xbd\xe4\xe9\xac\x30\x7f\x78\x50\xb9\xf8\x9c\xfa\xe4\x54\xc3\xfe\xc9\x4b\x4b\x20\x2b"
		"\x73\x1b\xa9\xab\xe9\x6d\xa7\xf2\x09\x24\xaf\xbf\xc9\x13\xae\x6b\xcd\x8a\x8d\xa1\x5c\x59\x17\xaa\x36\xcf\xda\x03\x73\x3f\xd0\xab\x96\x9a\x11\x71\xe8\x18\xc6\xd5\xe5\x2b\xce\x71\x03\x4d\xbd\xab\x11\x56\x4d\xcb\x26\x0b\xb1\xb1\xf2\xf6\x59\xeb\x2f\x03\x51\xef\x59\xe1\x03\x68\xcd\x07\xbf\x53\x15\xb0\x4f\xc9\xff\x53\xb9\x3a\xd3\xd9\x03\x7e\x7d\xa1\x45\x91\x06\x23\x0a\x33\x0a\xab\xb4\xd6\xf0\xc1\x9a\x15\xe9\xe3\xdb\x28\x6f\xf7\xec\x66\xf6\xc6\xf5\x1e\x6d\x05\x21\x5a\x6f\xe3\x1a\xa2\x78\xc5\x34\xe2\xe5\x4d\x52\xda"
		"\xfb\x1a\x9d\x3a\x2c\x34\x6c\x65\xe1\xaa\xc5\x0b\xcc\xc9\x6c\x0c\x51\x3c\x14\xb5\x8c\x3c\xf2\x40\x40\x1e\x02\x0b\xc8\xa2\xc3\x74\x99\xda\x7d\x04\x07\x5e\x24\xe4\xed\xc9\x19\xfe\xdb\x2d\x49\x5d\x48\xb3\x76\x93\xf9\x22\x00\xc2\x55\x03\xa0\x52\x8e\xd9\x94\x29\x9a\x13\xcb\x6c\x07\xd1\x71\x16\x0a\x61\x9c\x9f\x9f\x11\x16\x83\x60\x59\xef\x0e\x93\xc2\x42\x1c\x31\x94\x57\xfe\x4f\x59\x26\x0d\xf3\x1f\x21\xe6\x9a\xb2\x96\x0a\x3c\x07\x55\xb8\x03\x63\x54\x60\x92\x05\xc7\xb0\x60\x66\x2a\xa0\x00\xdd\x5c\x30\x8f\x91\x78\x5c"
		"\x9a\xb2\x3d\x7a\x16\xd8\x4a\x2f\x1d\x01\xff\x00\x23\x19\x35\x1b\xce\x15\x78\xda\x9f\xc5\x2e\x59\xc7\xf6\x01\x36\xf9\x22\x82\x77\x29\x91\x71\x86\x86\x73\xd0\xd9\x99\x7e\x38\xa5\x55\xc6\x50\xe2\x31\x50\x5c\x5d\x9c\x9a\x54\x1a\x2d\xec\x7f\x81\x81\xd3\x18\x58\xeb\xf9\x6f\x2e\x7b\xad\x18\x10\x70\x08\x19\xcb\xc0\x8d\x58\xf7\x80\x53\x3c\xb4\x68\xf0\x0f\x6c\xc2\x32\x44\x69\xa1\x63\xf1\x54\x29\xb0\x1e\x88\x0b\x79\x63\x5a\xda\x4b\x5c\x51\x5d\x5a\x2b\x63\x79\x40\x7a\xde\x4a\x07\x95\xb0\xdd\x58\xdb\xb4\x0a\x59\xfd\x5b"
		"\xc2\xa9\x8f\xc5\xff\x58\xd4\x27\xfb\x61\x14\x56\xf8\x54\x81\x95\x16\x5e\x07\x72\x21\x19\xa0\xd1\x77\x5f\xa9\xa4\x6e\x5b\xd1\x45\x5b\x0f\x27\x18\xed\x1a\x72\x82\x8c\xed\x04\x47\xf0\x17\xae\x87\xc8\xce\x55\x27\x01\xed\xa5\xfd\x66\x5e\x40\x12\x8f\x07\xc4\x5e\x4c\x6f\x44\x20\x9e\x3f\x94\x40\x93\x50\xed\x83\x1c\xf1\xbf\x7f\x72\x25\x10\xf0\x16\x53\xc0\x96\x53\xbe\x94\x08\x6f\xf9\xd6\x7d\x44\xbb\x74\xcc\x52\x94\xe5\x28\x49\xe7\x06\x8f\x06\x7e\x11\x23\x82\x18\x3d\x40\xab\x72\xd7\xdd\xa2\x06\xbb\xe4\xf7\xa0\x39\xb1"
		"\xb4\x85\x97\x92\x83\x95\xb8\x98\x18\x98\xa9\x34\x85\xf7\x3c\xe5\xaf\x58\x4c\x4e\xdc\x9e\x03\x8c\x50\x8c\x71\x69\x17\xd6\x69\x98\x8d\xb2\xc2\x25\x40\x3f\x52\x19\x6c\xfe\x91\xdd\x24\xf3\x12\xaa\xc7\x64\xff\xe6\xe5\x21\xb3\x2f\x5b\xaf\x74\xec\xba\xaa\x0f\xce\xf1\xb5\x11\x2d\x72\x4d\x3b\x4b\x00\xfb\x3b\x1a\xb2\xcc\x22\x05\x3f\x5a\xef\x8a\xd3\x4d\x0c\x69\x4b\xb7\xe1\x3e\x25\x90\x60\xd3\x21\x19\xe5\x27\xb1\x2b\x82\x3f\x52\xca\xd7\x48\x15\xa4\x23\x61\x19\x3e\xc8\x96\x5e\xca\x77\x07\x18\x85\x0a\x75\x5f\xff\x55\x64"
		"\x33\x46\x63\xc1\xbd\xa7\xd5\xeb\xe0\x38\x2c\xd6\xc1\x44\x20\x59\x89\x6c\xac\x92\x1b\x94\xf6\x78\x3d\xb2\x7f\x20\x33\x2f\x5f\x75\xf7\x5b\xd8\x18\xd2\x45\xc4\x32\xe7\x6d\xaf\xa6\x2c\x9e\x4c\x8e\xb9\xc9\xc4\x40\x52\x51\x9c\x80\xb0\x56\x49\x2f\x5d\x6c\xba\xb6\x98\x49\xd7\xb7\xda\x0d\xee\x13\xcf\xe9\x3c\xb9\xd9\x18\xda\x47\x2b\xd0\xf1\xa7\x2d\x84\xa1\x9a\x0f\xf1\x6b\x44\x2e\xec\xbd\x6f\x0b\xb5\xb5\x5f\x7e\x9e\x8d\x5a\x11\xb6\xc6\xfc\x5b\xfa\x8f\x49\x93\xa5\xf0\x6e\x9b\xc1\x3b\xd1\xb6\xd1\xd8\xfe\xd7\xc9\x83\x7a"
		"\x35\xd8\xa4\x19\x28\xde\x5f\x62\xee\x22\xc4\x33\xa3\xcb\x8a\xe4\x27\x7f\x4f\x51\x6d\x5d\x61\x79\x7d\x49\x12\x42\x50\x58\x26\x81\xc9\xc1\x8d\xa9\xea\x8f\xce\x8e\xbd\x8f\xed\x7e\x48\xbf\xd2\x3d\x14\xaf\x16\x6e\x1e\x97\x7a\x8e\xd8\x42\x52\x1f\x1e\x09\xab\x92\xbf\x22\xb1\x24\xf2\xba\x03\x02\x8c\x2b\x68\x54\xd9\x7d\xc8\x07\xd5\x57\x11\x28\xd9\x5d\x65\x36\xc7\xc6\x1d\xf4\x47\xda\x44\x9d\x19\xa1\xb6\xf3\x3c\xd3\x28\x3e\x72\x53\xd5\x67\x67\x2a\xcc\xd4\xd1\x15\xb7\x68\x18\x23\xad\x9c\x5b\xbe\xb6\x88\x11\xc1\xcd\x6c"
		"\x6a\x7c\x7d\xe2\xfa\x5d\x08\x4a\x10\x12\x7b\x27\x84\x38\xfa\xc7\x5c\x15\xca\xfe\xdb\x19\x2e\xd2\x15\x8e\x4e\xa0\xe3\x1d\x63\x93\xdb\x8c\x5a\xc8\x76\x2c\x29\x4b\x8e\x3b\x05\xed\x9a\x38\xc6\xa6\xd8\x7e\x08\x77\x3d\x8a\x5e\x7c\x24\xb8\x48\xcf\x5e\x13\x44\x94\x20\xb9\x7b\x9e\x3e\x72\x53\x55\x62\xfc\x89\x16\xb5\xac\x12\x45\xb1\x4c\xff\x95\x3e\x0c\xe0\xda\x39\xed\x34\x3a\x98\x2e\x52\x78\xb5\xab\x66\xf3\xa6\x6e\xb4\xb4\x38\x66\x29\x60\x1a\x64\x74\xbe\x41\xa4\x1a\x15\x6b\x6a\x5b\xcb\x50\x82\x5e\xad\x7a\x99\xca\xdd"
		"\xec\xb3\x17\x59\xce\xd0\x6e\xfc\x96\x85\x49\x9e\x65\x81\x4b\x52\xed\xf3\xb9\x0e\x5c\x22\xcb\xec\x4a\x90\x61\xb8\x4e\x86\xd6\x5e\xcd\x7b\x3a\xa2\x6c\x8f\x3f\xca\x67\xac\x69\xc0\x5a\x6b\x4e\xc6\xcc\xc5\x0e\x97\x91\x11\x23\x93\x77\x83\x1e\xa3\xd7\xbb\x15\xe8\xae\x7d\xcd\x77\xca\x7c\x8d\x22\x47\xcf\x8e\x24\x00\x0c\x48\x50\x99\x9d\xe5\x53\x91\x73\x6c\x2c\x03\x9a\xff\x41\x50\xbd\x9e\x22\x81\xd3\x51\xf6\x9c\x97\xdc\xc8\x2f\x0d\x9a\xa3\x4d\x04\xf4\x74\xc1\x98\x02\x36\xb7\x8c\x65\x74\x11\x57\x32\xa5\x4a\x2b\xeb\xc2"
		"\x5f\x50\x36\x44\x9e\x85\x5e\x93\x3a\xc9\xe7\xb3\xa9\xe7\xa6\x42\xa7\x2b\x34\x45\x55\x3f\x1a\x82\x73\x01\x63\xd5\xae\x3c\x00\x7d\x36\x1f\x5e\x97\x53\x80\xb4\xc4\x76\xfa\x98\x09\xd0\xa1\x7c\x39\x99\xd1\xf4\xe7\x1d\xcb\xde\xb8\x58\xb1\xc2\x4f\x09\xb6\xd5\x01\x81\x24\xfd\x3b\x10\x57\x7e\x74\x83\x43\xc3\x29\xe2\x2d\x6f\xd1\xb6\x18\x52\xc7\xcc\xdb\x41\xbd\x89\xc0\xcd\xb6\x76\x73\xde\x10\x01\xe7\xef\x1c\x92\xf7\xfb\x0f\xa3\x2e\x0a\x80\x24\x31\x15\xbd\x72\x9b\xe3\xe4\x66\xd5\x7d\xf6\x72\x55\x36\xb7\xb1\x44\x4c\xc4"
		"\x9d\x5d\xdd\xa4\xa5\x33\xe3\x6a\x3e\x68\xca\xcd\xd9\xec\xde\x9e\x7f\x5b\x33\x18\x0f\xc2\x0f\x0f\x87\x67\x03\xa8\xbb\x31\x13\x7c\x7d\x3c\xfe\xf9\x8e\x2b\x27\xc3\xbf\xaf\xa0\xbc\xbc\xdb\x23\xd7\x3d\x51\xe8\x14\x2b\xb2\x92\x5a\xdf\x0d\x4d\x0c\xd7\xf4\x1d\x6a\x4e\xa5\x04\x92\x44\xba\x51\x66\x9d\xe3\xa7\x87\x3d\x13\x17\x49\xe2\x78\xde\x70\xf0\xde\xeb\x9e\x0c\x25\xfd\xe0\xc0\x61\x6b\x35\xe6\x16\xcc\x05\xb1\x16\x0e\xd0\x1c\x87\x8e\xab\x18\xf6\xb3\x57\x34\x49\xf2\x01\x6a\x59\x9f\x81\x4c\xb5\x42\x7e\x14\x30\x47\x4c"
		"\x37\x99\xce\xa6\x0a\x85\x28\x53\x92\x0b\xc3\x0c\xee\x72\xa8\x70\x31\x8a\xc2\x10\xf8\x7c\xfe\xb7\xb3\xdb\xe0\x7f\x14\x5f\xb9\x30\xf0\x8f\x6b\x9b\x32\x87\x31\x10\xb3\x8f\x16\xe4\x5f\x71\x7f\x8e\x5c\x97\x6d\x35\x83\x9a\x0b\x22\xb8\x96\xb2\x18\xee\xd9\x43\x0a\xa5\x59\xb9\x6f\xa9\xa5\x1c\x65\x06\x66\xa8\xb0\x49\x4e\x48\x89\x50\x32\xb0\x3f\x34\x95\x54\x89\x13\x40\xeb\xcf\x7b\x09\x12\xad\x2a\x88\x83\x17\x15\x9b\xdb\x73\x7f\xd7\x05\x46\x32\xfb\xbb\x64\xfd\x6b\xdd\x49\x2f\x21\x63\x98\xf6\xb8\xd7\x46\x92\x89\xff\x2a"
		"\x45\xd6\x0f\x91\x60\x1e\xb8\x0c\xa3\x7a\xd4\x65\xdf\xfe\x0b\xa5\xdf\xad\xd5\x76\x04\x43\xf8\x8f\x4e\x12\xf1\x9c\x03\x68\xa4\xeb\xa4\x36\x01\x00\xbe\xbb\x9d\x3e\xf3\x1e\xb7\xfc\x99\x43\x33\x01\xc4\x36\x01\xe4\xcd\xa8\xf0\x00\xd0\x3a\x7d\xca\x22\x5b\x53\x7b\xc3\xbf\xfb\xa4\xdc\x69\x90\xb9\x0b\x7e\xe3\x81\xa5\xa5\x06\x58\xa7\x7a\xe7\x98\x59\xa1\xaf\xa2\xac\xe3\x5e\x3d\x38\xb3\x1b\xbe\x91\xaf\xfa\xdb\xd8\xd2\xc3\xc2\x07\x40\xf6\x6d\xd5\x9f\x7a\x44\x75\xda\x8f\x19\xf3\x26\x11\x02\xa0\x9d\x05\xf7\xf0\x59\x7a\x2d"
		"\x74\x0b\xc2\x1a\x1b\xa1\xb2\x2a\x93\x5b\xdf\x8c\x06\xe5\xc9\xaf\xd1\xa5\x3a\xd3\x37\x7f\x1b\xf0\xc8\x4b\xfd\x47\xde\x1d\x22\x85\x5d\x43\xa4\xe0\x64\xb0\x5c\x03\xc8\x76\xb9\x97\xd4\x3a\xb1\x0c\x26\xbf\x2b\x69\x11\x71\x4d\x3a\x24\xcb\x81\x61\xe7\xd3\xff\x3c\x85\x2b\x93\xd2\x6a\x36\xc5\x82\x79\x65\x7b\xb2\xe4\x18\x2e\x9c\x32\xbe\x38\x1c\x5d\xa2\x88\xd4\xcf\x3b\x55\x4e\xc2\xb0\xad\xf6\x04\x20\x56\x8a\x52\x95\x1a\x95\x96\x36\x45\xac\xcc\xea\x37\x87\x36\x15\x89\xa4\x37\x51\x53\x49\x81\x5a\xe6\x74\x24\x07\xdd\x44"
		"\x80\xbc\xad\xeb\x6e\x91\x1e\x82\x82\x6e\xcc\x4c\xe5\x93\x21\x52\x43\x8a\x13\xed\xa8\x62\xe2\x56\x8b\x79\xca\xaf\x21\x41\x52\x28\x4e\x5a\x22\xd6\x51\xe7\x88\x96\x39\x12\x4d\xd0\x9f\x74\x30\x29\x4e\x6a\xab\x66\xae\x5f\xc9\x9c\xd9\xbc\x57\x06\xcf\x1a\xc8\x90\x2e\xa6\xd1\x7e\x2b\xf1\xfe\x98\x17\xae\x92\x9b\xb8\xb2\x64\x41\x88\xa4\xdc\x2a\x61\x4e\x45\x29\x2e\x82\x69\x1d\x20\xe4\x23\x02\xc9\x19\xba\xe5\x9c\xc1\x52\x96\x6b\x09\x62\x7e\x16\xc3\xf3\x68\xec\xdd\x25\xd1\xf1\x33\x3e\x91\x2d\x09\xa0\x8d\x39\x66\x54\xba"
		"\x01\x38\x20\xac\x07\xa2\x05\x12\xd6\x4c\x70\x97\x46\x7f\x95\xa4\x98\x94\xc9\x20\xe0\xb1\xf4\xf8\x69\xe5\x53\x48\x51\x6b\xc2\x18\xca\x53\x05\x15\xe9\x6a\x0b\xc7\xe1\x69\xae\xfd\x80\x13\xdc\xe4\xf4\x98\xa1\x37\xc3\x11\x55\xb9\xcc\xd3\x0d\xe8\xc0\xe2\x42\x82\xea\xe3\xa3\xf4\x3d\x0f\x93\x10\x82\xf9\x36\x45\x88\x0c\xc3\xf3\xc6\x8a\x69\x54\x94\x65\xbc\xa8\x2b\x3c\x30\xa0\x7d\x24\xea\x3a\xbc\x24\x59\x45\x3a\xbe\x8b\xfd\x52\x6a\xf6\x00\xe9\xfa\x48\x08\x19\x54\x6a\xee\x17\x96\x64\x8c\xc5\xc0\x5f\xdd\x8b\xaa\x06\xb3"
		"\x2e\x5f\xd7\x31\x8d\x9c\x94\xd2\xad\xec\x9f\x48\xdf\xba\x4d\xf2\x80\x7b\xf5\x8f\xdf\xa7\x25\xfc\x2b\xab\x2b\xc0\xe3\xb9\x7a\x47\x17\x2e\x78\xe4\xe7\xee\x16\x5b\xdf\xa4\xec\xbb\xb5\xc6\x45\xeb\x86\x61\x61\xaf\xc3\xb8\x5e\x27\xe0\xad\x3b\xff\xd7\x61\xcf\x4d\xdd\xc6\x71\x9b\xf1\x10\x03\x00\x93\xe9\x0a\xfe\x6e\x5e\xc8\x70\x07\xbd\xa2\x6c\x69\xee\xe0\xb9\x5c\xa1\x05\xd0\x12\x0c\x96\x20\x2a\xd4\x9e\x90\x61\x64\xe5\x43\xea\xb2\x79\x9d\x31\xbe\xc8\x32\xd6\x30\x6e\xe7\x7b\x02\x94\xd3\xb9\x6f\xc1\x9b\xec\x9d\xf9\x19"
		"\x1f\x93\x99\x1a\xfd\x22\xb0\x2b\xf8\xfd\x3c\x84\x6a\x4c\x76\x03\x92\x10\x48\xe6\x10\xca\x61\x79\x81\x70\xd6\x3b\x2a\xab\x37\x20\x26\xb0\x0c\x1e\xfa\x59\x75\x74\x7d\xe4\x67\xa5\x16\x2e\x72\xfd\x80\x62\xa2\x1b\xbd\xae\x03\xad\x61\x4c\x76\x21\x4e\x2e\x91\xa0\xdf\x16\x7f\x18\x17\x52\x78\xa5\xef\x97\x21\xe7\x55\x66\x9c\x3c\xc3\xb1\x77\xd6\x91\x2b\xab\x30\x73\x5b\x20\x70\x96\xc2\x46\xc6\x7b\xe3\xd0\xc5\x70\x84\x08\x2c\x61\x5f\x8d\xd8\xf4\xa8\x0b\x35\x62\x86\x3b\x9b\x22\x64\x1b\xd1\xbb\x26\x3b\x73\x42\x90\x4d\xf0"
		"\x6c\x7b\x1f\x7f\xd9\x21\x7f\x12\x21\x8e\xf1\x69\x98\x10\xb9\xeb\x99\x88\x64\x75\x1c\xb0\x99\x8f\x0b\x49\x42\xe8\x4d\x4d\xae\xc4\xdf\xec\x11\x12\xba\x92\xd1\xa9\x18\x64\xc8\x90\xa7\x26\xcb\x14\xd7\x5f\xfe\x50\xeb\xa3\xc9\xb7\xd3\xf3\x15\xec\x42\x72\xc4\x17\x0b\x97\xcd\x4c\xf6\xdd\xc3\x4d\xbd\x58\x95\x69\xe5\xca\x8d\x60\x36\x28\x8c\x2f\xfc\xcc\x45\x46\x00\x94\x64\xba\x75\xd8\xfc\x43\xb2\x5d\xbe\xdb\x3a\xbd\x9d\xbb\x9b\x71\x10\xf3\x8f\xe8\x67\x06\x79\xe1\x35\xa7\xc2\xb6\x2c\xeb\x5e\x46\x79\xde\xd4\xf8\xff\x4d"
		"\x12\xdb\x2c\xdd\xcd\xa9\xdc\xab\xc0\x4e\x51\x39\x31\x9b\x82\xf3\x13\x3e\xd2\x20\xe0\xe3\xfe\xf8\xc9\x54\x49\xc8\xad\x29\x63\x9b\xd5\x8a\x0a\xd7\x7b\x05\xdf\x26\x5f\x19\xc1\x40\x8a\xb3\x4a\xfc\xf1\x33\xf4\x29\xd2\xc5\x61\xa1\x4f\xbc\xbc\x00\x92\xda\xee\xc7\x64\x0f\xd3\x40\x14\xea\xee\x1a\xf8\x94\x3d\xb8\xa1\x79\x02\xae\xc5\x16\x0e\x5a\xba\x3c\x99\xc1\x79\x99\x0c\x14\x77\xce\x5c\x5c\xee\x32\xc7\x74\x5d\x93\xe2\x40\x6d\xe1\xb6\x68\xdc\x5b\xab\xee\x58\x6d\xb5\x98\x86\xae\x30\x3c\x4c\xb2\xdb\xab\xd7\x26\x5a\xdf"
		"\xdc\x98\xf4\xf9\x68\xb3\x37\xbe\xea\x78\x98\xd2\x08\x9d\x1c\x2d\xa7\x98\x9e\xe2\xe0\x87\xf9\xdf\xaf\x14\x22\x51\x93\x66\x56\x4f\xbb\xeb\xdc\x25\x71\x11\xe2\xbf\x0d\x60\x13\x17\xe2\x47\x84\xaa\x88\xf8\x61\x6c\x2a\xff\x95\x33\xdd\x96\x46\xdb\xb3\x8b\xb4\x5b\xfd\x4f\xba\xe1\x78\xd6\x97\x64\xf4\x49\xa2\x29\x4c\x43\xfe\x80\x40\x21\x2d\xc5\xbf\x7b\x29\x82\x0f\x5c\x1f\x01\x23\x26\x17\x2d\x98\x53\xca\xde\xf2\xdb\x87\x75\x28\x0a\xdc\xc9\xb6\x42\xcd\xc4\x45\xfa\x11\xc1\xd7\x87\x93\x3f\x3e\x09\xcf\x7f\xa5\x27\xe8\x6b"
		"\xd2\x7f\x6f\x8d\x33\x3f\x78\x19\x51\x3d\x04\xd6\x5a\x85\xf7\x7e\x47\x8d\xa2\x9b\xdd\x73\x51\xf4\x4c\xbd\xa4\x1f\x40\x2f\x23\x16\x3d\xe3\x42\x12\x63\x46\x95\x83\xd8\xeb\x57\x2c\xa5\x5e\x65\x91\xa5\x97\x2b\xb6\xe7\x5e\x70\xfb\x07\x10\xc1\x31\xe0\x08\x5a\x9a\xc7\x37\x3c\x2f\xf8\x69\x21\xee\xa3\xeb\x4d\xe2\x04\xfc\xf7\x73\x6b\x44\x32\x0f\xd5\x08\x87\x4b\xbb\xd9\x59\x2e\xa0\x62\x92\xfc\x65\x5e\x6f\x9c\x9b\x0b\xc4\xb8\xc0\x14\x18\xf0\xed\x41\x8b\x83\x09\xbc\x00\x81\x21\x30\xd4\xdb\xc3\x77\xc0\x79\x40\xa7\xf4\xf2"
		"\x1a\xb6\x96\x65\x0a\x58\xc0\xc7\xbc\x38\x5f\x37\xf6\xa7\x86\xda\x0e\x40\xbf\xe1\x39\xfd\x94\x67\x8a\xed\x22\x82\x66\xfe\x64\xc0\x17\x72\x8f\xf1\x6d\x6a\xfd\x2b\x8b\xac\xa0\x28\x06\x65\x29\xe3\x38\x35\x97\x32\x82\x21\x53\xb2\x3e\x5e\x47\x31\x2d\xbe\x4b\xfb\x3b\x61\x2e\x59\x44\xbd\x16\x5e\x9f\x4b\x25\xab\x65\xf3\x8f\xcd\xc2\xbf\xa7\x54\x7f\xfe\x54\xe1\x1d\xc9\x41\xf7\xe5\xe9\x90\x96\x98\x55\x10\x79\xc0\x73\xe4\x87\xcc\xee\xac\xf6\x9f\x6b\xa0\xb9\xf1\x33\x37\xcf\x44\x39\x4a\x29\x4a\x12\x15\xd4\x5f\x87\xda\x9a"
		"\x60\x44\x7a\x82\x37\x48\x9f\x5b\xb8\x3d\xd1\x1b\x2e\xe0\xfc\x70\x1d\x02\x5e\xb9\xf9\x03\x40\x25\x2d\x1a\x26\x6e\x8e\x91\xfe\xee\x57\xbb\x63\x6c\xce\xa9\xb6\x38\x6c\x92\x08\xb8\x5e\x48\x91\x83\x40\xad\x14\x5a\x6c\x4b\xe3\x0b\xbe\xab\xee\x76\x95\xfe\x1c\xba\xba\x4a\x64\xed\xeb\xb8\x14\x7f\x19\x8a\x51\xe0\x43\x97\x88\xd0\x2c\x33\x89\xd2\xfd\x2d\x33\x36\xf7\xe6\x79\x0e\x0c\xfe\x93\x13\x1e\xec\xe8\x7b\x13\xe6\xa8\x03\x34\x2b\x89\x00\xf1\x47\x0f\x07\x45\x03\x7a\x7b\xd9\x9f\xe6\x0d\xe7\x5c\xc7\xc2\xb6\x5a\x7d\x72"
		"\x5c\xfc\xfe\x93\x63\x11\x00\x57\x8d\x6a\x15\xf6\x05\xe9\xdd\xd9\x4e\xc6\xb9\x67\x26\x0e\xe2\x52\x7a\x81\x4b\x88\x4c\xe4\xff\x5b\xa8\x19\xea\xc2\xeb\x7b\xa3\x75\xc5\x9b\x5e\xcf\x1c\x1d\xd8\xf3\xef\xef\x2e\x86\x3d\xa9\x63\x5a\x22\x4c\x83\xba\x8a\x82\xdc\x14\x2c\xa2\xb2\x2e\x07\x1a\xe2\x41\x26\x2e\x18\xfc\x89\x4c\xac\x2d\xda\xc2\xe9\x73\xe4\xe5\x6a\x9d\x7c\x42\x6d\xf4\x28\x53\x41\x69\x6b\xf3\x76\x1f\x35\x0c\x01\xcb\x17\x73\x17\x15\x8f\x96\x57\x5c\x6d\xcc\x33\x0f\x1a\x2a\x6a\x1b\x00\x9c\x8e\x03\xfd\x67\x78\x70"
		"\x1c\xe8\x00\x76\x28\xc1\x2d\x8c\xd8\x3f\xf5\xd1\x8c\x4e\x4a\xb5\x4e\xee\x40\xcb\x97\xfb\xfc\xb8\xbf\xd3\xb4\x5b\x52\x90\x50\x3a\x15\x7b\x44\x31\x2d\x58\x48\xfb\x1a\xa4\x1c\x87\x29\xdc\x91\xbf\x99\x81\x3f\xad\xca\x79\xb1\xc8\xea\x7e\xf3\x2a\xe2\xcc\x69\x48\xda\x04\x99\x27\x1f\x2b\xa2\x24\x20\xe4\x61\x0e\x19\x53\x34\x57\x3d\xba\x57\x35\x9f\xdc\x84\xb4\x8a\xc8\xf1\x29\x79\xb3\xf6\x8c\xb2\xf7\xf3\x8e\x0d\xee\x0f\xc9\xe0\xac\x16\xbb\x2b\x24\x90\x37\xab\xd2\x9b\xee\x08\xb9\x1d\xa3\x81\x8a\x50\x68\x99\xde\x52\xe0"
		"\x1a\xbb\x61\x2d\xf8\x35\x8f\x0c\x8b\x23\x0c\xde\xfe\x70\xd7\xa0\x5b\x03\xac\x99\x13\xe9\x5f\x98\x27\x13\x20\x56\xa0\xb4\x08\xf1\xc0\xfb\x41\xd8\x80\x2b\x18\x22\x06\x50\xdf\x07\x89\xcf\xaf\x6d\x78\x42\x09\xeb\xff\x12\x7c\x01\xdf\xde\xe8\x69\x81\x85\xee\xa6\xae\x0f\x0a\x04\xe6\xf9\x1d\x70\x30\x44\x96\xf2\x81\x41\xd0\x3d\x41\xb3\x2c\x9e\x02\x78\x03\x2a\x2b\x6f\x0e\x3a\x42\xd6\xc6\x66\xde\xfb\xe1\x7e\x73\x51\x46\x3a\xbe\xbe\xed\xdd\xae\x8a\xcc\x7b\x80\x6f\x2a\x25\xab\x97\x3e\x2f\xdd\xd1\x55\xa4\x49\xb3\xa1\x69"
		"\x9c\xb2\x56\xbf\xc5\xf3\xd0\x90\x87\x89\xce\x1b\x72\xdb\x62\xf0\x76\xe3\x5e\xa0\xb6\x80\x82\x15\x34\x93\xa4\xa2\x67\xd0\x00\x36\xaa\x50\x33\xe9\x0c\xc2\x47\xeb\xf7\x16\x5f\xce\xdd\x49\x22\x94\x77\xad\x04\x0e\x99\x39\xa5\xc3\xc7\xea\x95\x16\x72\x9f\x53\x12\xd8\xa3\x9e\x6a\x81\xb7\x3c\xb1\x87\x3c\x4d\x72\x9f\x4a\xc2\xeb\x80\x0d\xfa\x6d\xc4\xba\x1d\xe3\xd5\x94\xd3\x59\x87\x00\x0e\x2c\x47\xdf\x17\x15\xc8\xa8\xe6\xfd\xb9\x73\x62\x9f\x08\xef\x11\x58\x3b\xd9\xba\xc8\x9b\x6b\xbc\x05\xe8\x6e\x5f\xda\x0f\x03\x2a\x35"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries1), 0x1000);

	const char emptyEntries2[] =
	{
		"\x78\x77\x35\x0a\x74\x8d\xaf\xe6\x44\x9d\xd8\x20\x4b\xa5\x3a\x3d\xf4\xda\x73\x83\x45\xc5\x43\xbe\x47\x87\x88\xfb\x80\x92\x64\x29\x79\xe3\xbd\xca\xb3\x0f\x3b\x19\x17\xf5\x9f\x78\x47\xf1\x46\x3d\x55\xd3\x18\xae\x63\xfc\x5a\x03\x69\xfe\x4b\x97\x9f\x5d\xd8\xa6\xde\xfd\xcc\x0f\xc6\xc3\x83\xce\x23\x67\xa2\x41\x27\x70\x40\xbe\x42\x1a\x95\x13\x14\xa5\x98\x66\x9a\x8d\x9a\x93\x87\x93\xa8\x49\x16\x75\xce\xa2\xca\xd2\x2b\x71\xc4\x28\x5d\xf2\xfa\x63\xee\xd5\x5e\x59\xc0\x32\x6d\x93\xd8\x0e\x2c\xc9\x10\xa5\x9e\x89\xdc\x6f"
		"\xe6\xf4\x35\x3f\x2a\x17\xf6\xe8\xba\xec\x05\x49\x72\x69\xac\xc2\x1e\xb2\x7e\x66\x06\x51\x09\x81\x6d\xb1\x8d\x1f\x38\xea\x35\xac\x8a\x74\x67\xa1\x6e\xc2\x5a\x49\x0b\x25\xce\xab\x5d\x2d\x52\x00\xee\x89\x04\x5f\xb6\xd2\x98\x74\x5d\x44\x71\xda\xf3\xa7\x19\x83\xb4\x4d\xd7\x97\x66\x36\x66\x96\xe2\x8a\x0f\x26\x49\xe5\xa6\x4b\xe9\x28\xdc\x54\xd9\x95\x4b\xd1\x3e\xab\x59\xd9\xeb\xd8\x4d\x7d\xa6\x69\xad\xc3\xf0\xbf\x7c\x1f\xdf\x96\x9c\x04\x5e\xc6\x76\xfd\x36\x0d\x84\x4e\xaf\x2a\xae\x78\x19\x18\x42\xb4\x57\x09\xc5\x6e"
		"\x1f\x61\x8c\x9d\x58\xd1\xf3\x80\xe5\xde\x59\x1f\xdc\x8a\x9b\x5b\x48\x60\x94\xaf\x2c\x14\x1f\xab\x3c\xc2\xc7\xe8\x7a\x7a\xba\xea\xa4\x1e\xee\x6f\xbe\x96\x07\x19\x91\x1b\x74\x5f\x01\xfb\x02\x8c\x58\x2a\x55\x31\xcb\xbb\x31\x27\x2d\x2a\xb2\x55\x10\x1e\xa6\xa1\xbe\x22\x0a\x3c\x21\xd1\x1c\x30\x25\xd2\xc8\x4c\x81\x52\x13\xa2\x80\x73\x55\x86\x26\xc1\x2d\x1d\x13\x3f\x68\x50\x77\x6e\xff\xdb\x66\x39\x83\x40\xb3\xbf\xf6\x0a\xc1\xff\xd4\x85\x88\x0a\xfd\xa9\x7f\xd3\x97\x8d\x6b\x9f\x4e\x13\x70\x05\xf6\xbb\x71\x25\xe7\x29"
		"\x0c\xdd\xa8\x21\x77\x4d\x5c\x5c\x97\x58\x2f\x90\x30\xc4\xa8\xd3\x7a\x28\x2c\xda\xe2\xd7\xd4\x21\x42\xd1\xdf\x59\x9f\x40\xe9\x89\x49\x90\x3f\x01\xf6\xd4\xdc\x91\xe2\x42\x7f\x5f\xfe\xc3\x22\xcd\x91\x06\xa1\x5b\x21\xd5\x5d\x2c\x98\xb1\x20\x00\xe4\xda\xb2\x52\x5f\xd3\x13\xca\xac\x8a\x88\x6a\x5d\xe5\x4b\xb4\x58\xa3\x59\x57\xe2\x23\x18\x4a\xff\xf1\xf9\xc8\x49\x59\x31\xc0\xb6\xf4\x3d\xcd\x74\x06\xba\x95\x49\xed\xa4\x0a\xd2\xf5\x5e\x10\xd4\x7f\x4d\x1d\xc3\x99\x61\x5b\x80\x4d\xfe\x9b\x16\x80\x82\x61\xd7\x93\x12\x0a"
		"\xab\xdd\xf6\xd8\x0b\x92\x08\x82\x7c\xfd\xb5\xd9\x16\x69\x87\x8a\x6c\x35\xf6\x95\x58\xa6\xa7\x41\x06\x63\x3c\x3e\x60\xc1\xa9\x7f\xaf\xd5\x68\xa5\xb6\x71\x99\x7b\x66\xd2\x4b\x4c\x06\x94\x5d\xff\xa6\x10\xfb\x91\xe3\xe0\x58\x17\xd3\x4a\xd7\x27\x76\xb3\x92\xc5\x8e\x73\x83\x4e\xa5\x16\xc2\x11\xb0\x11\x73\xae\x2f\x49\x05\xd7\xb6\xa8\x84\x61\x3a\xbb\xf4\x20\x42\x79\x5b\x48\x7a\x5d\x17\xc4\x63\xc8\x6e\x70\xaa\x8a\x98\xab\x7a\x29\xa9\x6c\xdf\xc4\x68\x1a\xf1\xf2\x67\xfc\xdc\x0a\xce\x67\x09\xee\xb5\x68\xc6\xef\x23\xa3"
		"\x8b\xf2\x15\x38\xa9\x98\xa5\x11\x98\x81\x9a\xb2\x04\xd7\xad\xe8\xd3\x45\x73\xb9\x29\x88\xc7\x45\x8f\xd3\x71\xdb\x7f\xb8\xee\xae\x75\x65\x6c\xc9\xb4\xeb\x15\xd8\x67\x24\xcf\x4c\x25\x41\x3f\x82\xac\x51\xe0\x80\xe7\xf2\x5f\x3a\x29\x57\xf4\x14\x03\x79\x51\x40\xd1\xd7\x61\xec\xaf\x6e\x8d\x9d\x33\x80\xc1\x9d\x1a\x97\xe2\xe5\xea\xdc\xae\xc4\x99\x5e\x48\xe8\xe5\xfd\x64\x5d\x9f\x4e\x81\xa9\xa9\xde\xda\xbc\xd5\x10\x44\x77\x6d\x95\x2b\x6f\x1a\x3a\x1d\x46\xe1\xb2\x1d\x5f\xdd\xfe\x2f\x9b\xd6\x52\x73\x3d\x15\x68\x3d\x16"
		"\xaa\x3d\xe9\x74\x24\x6d\xe0\x44\x4a\xee\x28\x1b\xfc\x6c\xce\x32\x5d\x5b\x12\xb3\x68\x9a\xa6\x90\x87\x34\x2b\x9e\x03\x09\xe8\x63\x5b\x96\x89\x1b\xe7\xc7\x3c\xc4\xd9\x5d\x3c\xc5\xca\xb8\x7a\x49\xb6\x39\x24\x8e\x4e\xef\x3b\x07\x12\x7c\xf3\x8d\x3e\x6e\xb7\xfa\x71\xb6\x1a\xac\x25\x27\x00\xc6\x6f\x4a\xec\x20\x47\x58\xb5\x18\xdb\x48\xff\x4c\x0f\x2e\x87\xc2\xd4\x3d\xdc\xf4\xbf\xa1\xb9\x76\x4d\xef\xd7\xc7\xa0\xe1\x9e\x16\x48\xde\x75\xa0\x34\x30\x76\x3c\xa5\xab\x59\x5c\x0c\x36\x1d\x3b\xd1\x2c\xc8\x1a\x78\xbe\xe5\x0d"
		"\xcb\xaa\x7d\x29\xaf\x8c\x74\xf1\xc6\x7d\x79\x65\x90\x2e\x99\x77\x2b\xef\xa9\xf5\xdd\x3e\x62\xef\x6d\xef\x2e\x66\x6b\x1c\x5c\x52\xdb\xb5\x9f\xb3\x2f\x84\x15\xaf\x19\x1e\xe2\x77\x02\x27\x08\xae\x02\x83\xa4\x7b\x51\x76\xfc\x91\x3b\x99\xb2\x2e\xf7\x24\x1b\x28\x7d\x47\x7c\xdb\x49\x22\x9c\x2a\x36\xa7\x38\xce\x44\x22\x7b\xbc\x8b\xc0\x5f\x66\xbd\x08\xa8\x7a\x30\x72\x47\x41\x78\xf9\x05\x4b\x71\x0d\x25\xe9\xbe\xa9\x90\xf0\xf2\xdf\x18\xe6\x7e\x0f\x1e\x2b\xfe\xe6\xfb\xb7\x65\xcc\xf8\x2e\x3b\xae\x8d\xa0\x3f\x18\x99\xdc"
		"\x8c\x1a\xfb\x1b\x20\xc9\x81\x7d\x1d\x33\x95\x05\xa5\xfc\xe6\x64\x61\xd5\x99\xe3\x30\xd4\xb3\x3e\x85\x73\x8d\xb2\xd7\xea\xcf\x4e\x0b\x1d\xc0\xca\xd2\x82\x5f\xc6\x73\x13\x44\x24\xca\xfe\x66\xa3\x55\xde\x6c\x10\x25\xe0\xff\x93\x54\x9e\xd9\x6e\xa7\x5d\xfe\x74\x67\xd5\x68\x51\x64\x8e\xfe\x12\x16\xff\xe7\x2f\x0a\x70\x11\x70\x7f\x4f\xc9\x9d\xbc\xae\xc3\xf1\x68\x60\x15\x45\x5a\xda\xa1\x57\x27\xd4\x08\x6c\x8e\xc1\xc7\x05\xce\x1c\x16\xec\xe6\x3e\xe9\xf8\xba\x43\x56\xe4\x7f\x6a\x72\x41\x67\x28\x45\x68\x64\xba\x8a\xe5"
		"\x8e\x13\x4a\xa8\xf7\xdc\x33\xc6\x24\xbc\x9f\x16\x3b\x6f\xac\x70\x03\x3c\xa2\x56\x4c\x23\x90\x9b\x98\x3c\xb5\x4c\x0d\xee\x06\x34\x00\x51\xb1\x23\x07\xa5\xc6\x7e\xc8\x37\xc4\xc2\x69\x98\xa7\x2e\x1e\x05\x00\x6c\x5a\xf5\x56\x6e\x24\xeb\xa1\x7f\x26\xa5\xe9\x0b\x73\x62\xc1\xcc\x84\xab\x9f\x8b\x15\xcf\x7f\x7c\x2c\x10\x7c\xdd\xfd\xd1\x6f\xac\x10\xd7\xc1\x35\x64\xf9\x99\xb2\x13\x2e\xd6\x0f\x92\xf8\xf2\x21\xab\x9a\x63\xa6\x55\x67\xf7\xc8\x32\xb5\xef\xf0\x67\x61\xcd\xd6\x55\xea\x32\x76\x71\xab\x01\xd4\xce\x21\xae\xb6"
		"\x99\x8f\x03\xbc\x2e\x71\x60\xc1\x71\xa9\xfd\x72\xf1\x00\x54\x5b\xfb\xe5\x71\x91\x9d\x7e\x0d\xfb\xbb\x44\xd9\x41\x53\xef\xfc\x6d\x9b\x12\x2b\x2d\xd0\xb6\x5f\x44\xd2\x03\x9e\x8f\xec\x2f\xbf\x2a\xfb\xfa\x26\xfa\xbb\x14\xf3\xd8\xef\xdf\x9a\x27\x87\xd5\x36\x42\x94\xb1\xf3\xd5\xac\x8e\x57\x00\xee\xa2\x99\x58\x76\x5c\x1f\xfd\x6d\x3d\xc0\xad\xf1\xab\x41\xf3\xbc\xac\x28\xe1\x4c\x2e\x21\xcf\x3a\x0e\xa5\x08\x18\x77\x6e\xb4\x64\x2d\xce\x5d\xc0\x12\x29\x49\xb5\x47\x94\xd0\x0a\x24\x1f\x49\x7e\xf0\x50\xcf\xab\x1e\xc1\x2b"
		"\xe7\x72\xc7\x5d\xac\x8c\xa9\xde\xc8\x65\xea\x0d\x48\x79\xb2\x8b\x00\x6d\x99\x03\x60\x4d\xa0\x8d\x4e\xc6\x76\x51\x11\x7e\x1d\x6a\x91\x0b\x21\xd8\x4d\x74\xc6\xfd\x4a\x2e\x36\x7d\xfa\xe8\x66\x5f\x57\xae\xaa\x03\x2a\x4f\xa8\xad\x05\x95\xaa\x27\xe7\x96\xd4\xaa\x8a\x1b\xd2\xf4\xdd\x03\xeb\xf4\xd5\x12\xbd\x7f\xdf\xd3\x59\x24\xac\x07\xe0\x21\x98\xe9\x3f\x4e\x3c\xa0\x9d\x29\x24\xab\x0f\xba\x47\xf3\x0f\x3b\xa0\xa8\x97\x83\x48\xd5\xb5\xbc\x0a\x66\x55\x90\xca\x0a\xa1\xe4\x32\x73\x8b\x7e\xd6\x37\x72\x19\xa5\x1a\xc7\xc7"
		"\x82\x3f\xf6\xab\x94\xa4\x98\x22\x5e\x72\x84\x8a\xa2\xf2\x6d\xd3\x10\x3b\x3c\x57\xe5\x64\xee\x0b\x11\x9a\x71\xa4\xc1\xd3\x31\x63\xaf\x9e\x92\x4c\x56\xa7\x79\xe9\xde\xb2\x78\xc1\x3c\xbb\xcc\x1f\x0a\x5e\x06\x45\x3b\xa6\x5b\x92\x17\x68\x70\x04\xe3\x69\x1d\x04\xbf\x46\xe1\x20\x4b\xd7\x44\x3d\xe1\x9e\x5f\xa9\xe7\x0a\xf6\x29\xaf\xf2\xfa\x01\x6a\x8b\xa9\x81\x5a\x05\xfd\xa2\x73\xdc\xb2\x2b\xc3\x30\x82\x77\xb6\x36\xf2\xe9\x77\x6e\xf2\xc6\x1a\xa3\x29\xb7\xe1\x41\x4f\xb3\x53\x20\xc9\x44\x92\x22\x60\x08\x03\xf3\x94\xfa"
		"\xa7\xed\xe6\xaa\x00\x35\x71\xca\x02\x68\x83\xe2\xa9\x3b\x95\x37\xb1\x47\xc1\x5d\xc0\x9f\x34\xb6\x26\xa6\x24\x0a\x0e\x6a\x03\xb6\xd3\x65\x6e\xee\x10\xb5\x9b\x93\x2c\x84\x5f\xfe\x49\x24\xd3\x31\x41\xe8\xb5\xd0\x81\x87\x4a\x0e\x95\x0f\xe3\x4c\x46\xf0\x28\x03\x2d\xcb\x42\x91\x12\x41\xf2\x86\x7f\x5d\x41\x33\xfb\x4b\x5a\x8c\x2a\x55\x2c\x8f\xfa\x49\xe4\x7b\x41\xc0\x76\x8c\x31\x99\x67\x96\x1f\xd6\xb6\xee\xfd\x08\x5a\x16\x55\xc2\x59\xd9\x46\x71\xae\x6b\xca\xb6\xb9\x6b\x88\x55\x7a\x8b\xaf\x58\x0d\x5c\x87\x47\xa6\x36"
		"\x22\x25\xf1\xb3\x67\xe4\xad\x29\x96\x99\xdc\xf6\x3b\xac\x1b\x92\xcf\x24\x62\x70\x10\x65\x80\xef\x4a\x42\x77\xb5\x34\x19\x4b\xb0\x5b\xfd\x29\x93\xd0\xc5\x27\x27\xe1\xd3\x08\x58\x7f\x1c\xf2\xa0\xa3\xd5\x85\xd7\x73\xcb\x9c\xc9\x49\x98\x6a\x13\x6c\x4b\x58\x66\x25\x9c\x04\xc5\x8f\xbf\xf3\x2a\x2e\x89\xf1\x96\x87\xf9\x2d\xab\x06\x48\xc7\x2e\xbc\xd0\x04\xae\x86\xcd\xcd\xb2\xc9\x03\x2e\x81\x5b\xeb\x8b\x1a\x51\x82\x32\xb8\x8c\x39\x21\xdd\x95\x58\x38\xa2\x2a\x7a\x27\xa2\xa1\x07\x56\xea\x34\xeb\xeb\x3a\xf7\x92\xae\x04"
		"\x72\xce\x1c\x3d\xe1\x9c\x82\x05\xd6\x7a\x7e\x54\x49\xdf\x19\xd5\xd0\x6b\xbf\xfc\x16\xb0\x79\xea\xbe\xef\xca\xde\x9f\xe4\x06\xb7\x7b\x90\x7d\xcf\x77\x4b\x33\x14\x08\xfc\x77\x75\xd3\x80\x4b\xa1\x8e\x50\x64\xca\x94\x6f\xb8\x12\xc5\xe0\x0e\x1b\x45\x3a\x10\xc3\x9e\x2f\x58\xf6\x25\x81\x1a\xac\x94\x87\x51\xed\x88\xc6\x27\xdd\xe8\xd8\xae\x6b\xf1\xf2\x1d\x8f\x98\x55\x1a\x4b\x03\xa5\x31\xd3\x22\x0b\x85\x73\xc3\xf0\x16\xc3\x27\xd7\x24\x9f\x90\x4e\xd6\x88\xf7\xf6\xa6\xc4\x25\x27\x47\x35\xbf\xc5\xca\x4d\xf8\x89\x6f\xa0"
		"\xd4\xbd\xb3\xb0\x75\xcb\xab\xa2\x4c\x83\x49\x97\xfd\x90\x8d\x44\x6f\x76\x61\x0a\x79\x6b\x56\xa7\x1d\xd5\xf2\x31\xdb\x41\xd9\x64\x2d\xa2\xad\x38\x90\x48\xb9\x17\x22\x68\xee\x55\x68\x0a\x59\x68\x42\x35\x3a\xa4\x96\x4f\x67\x72\x65\x65\xb7\xfe\xd7\x36\x2c\xfb\x61\x54\xff\x8f\x11\xf3\x24\x00\x7d\x62\x5b\xf1\x54\x3d\x86\x63\xf8\xf6\x52\x28\xc1\xed\x73\xa8\x78\xa5\x63\xea\xc6\x27\x91\x3e\xa3\xd1\x8c\x8f\x39\x13\x84\x93\x0c\x30\xc7\x18\x98\x67\xec\xec\xe2\x84\xa9\x9b\xdb\xfc\xa1\x6e\x93\xed\x16\x5d\x32\x01\x57\x77"
		"\xe0\xe0\x39\x25\x41\x26\xf8\x3d\x21\x2c\xce\xfe\xa1\x69\x3c\xf3\x65\x4b\x64\x23\x84\x29\x1e\xde\xe4\x99\x78\xae\x1f\x48\x2d\x35\x6a\xfb\xf4\xc1\xc2\x78\xb4\xbd\x50\x1c\x93\xe3\xee\xdb\x02\x2f\xa3\x45\x91\x7d\x82\x6e\x92\x9d\x50\xa8\x1e\x50\xc4\x0b\x8e\x3e\x8e\xa8\x14\xb8\x54\xfd\x22\xcb\x23\x23\x19\x26\x5c\x5a\x20\x1f\x2b\x29\x41\xc4\x89\xff\x02\x17\xa7\x01\x4f\x47\x83\x01\xd6\xf9\xf7\xf1\x36\x8f\x04\xf1\x7e\xa1\x56\x41\x2c\x60\xe9\x65\xbe\x33\x28\x0f\x2c\xcc\x29\x3b\x4a\x95\x81\xa0\x75\xe9\xec\xc9\x6e\xc7"
		"\x9b\x8a\x2e\x51\x1b\xc7\xf7\x9f\x6b\x43\x25\x41\x1d\x6e\x88\xd3\xeb\xb1\x2b\xdb\x0d\x47\xf8\x14\x6b\xab\xd8\xde\x3c\x9f\x6c\x1b\xfa\xec\xb2\x91\x6e\x1c\x93\x81\x40\x86\x05\xac\x5d\xf1\x5c\xef\x19\xa1\x24\xee\x9f\x67\xb4\x58\xdc\xfe\xbb\x62\xde\x22\x40\x23\x18\x8c\xfa\x9a\x44\xcf\xf4\xeb\xb1\x4f\xda\x7c\x86\xde\xbb\x14\xc8\xa2\x7e\xb8\xe3\x8f\x8f\xe4\xd2\xea\xd4\x9e\x7f\xb1\x61\x6e\x61\xa1\x5f\x22\x82\x37\xc1\x70\xe1\x65\x69\x96\x2c\xef\x8c\x7b\x7f\x09\xcc\x02\x72\x50\xe2\x25\x87\x6c\x6d\xe0\xe6\x18\x35\x7f"
		"\x65\x6f\xd2\x50\x96\x4e\x5e\x58\x00\xec\x49\x7e\x61\x94\xb1\xf9\x39\xb8\xbb\xa2\xf2\x6f\xf8\x09\xd3\x5d\x72\x51\xff\xb3\x06\xf2\xff\x36\xc1\xb4\x2c\xdd\x10\x9d\x6e\x48\xc0\x2c\x6e\xdc\xa9\x80\xa8\x39\x2c\x84\x63\x8c\x12\xfd\x45\xe9\x20\x6e\x00\xd6\x3b\x34\x74\xad\x4c\xb5\x96\xe0\x32\x42\xe3\x02\x79\x3c\x12\x1d\x22\xe7\xab\x94\x1f\xeb\xa8\xaa\x6a\x53\x99\xcf\x51\xfe\x3e\xf3\xca\xaa\xc0\xca\x4d\x22\xcd\x1d\x29\x07\xaa\xff\x32\x88\x39\x3d\xf6\x5f\xc0\xa3\xb1\x63\x42\xcc\xe6\x15\x85\xa6\xf0\xc0\x62\x36\xe8\x4c"
		"\x08\x3c\xa5\xfd\xf6\x08\x73\xcc\x88\xb0\xf6\x67\xa7\x85\xde\x84\x67\x47\xfa\x01\x15\x49\x8d\x0a\xee\xe3\x6c\x46\xc2\xb7\xc4\x78\x9c\x6a\x01\xd4\xda\x39\x9d\x4e\x81\xbb\x3a\x99\xad\xcd\x36\x24\x3c\x90\xd0\xa3\x47\xe4\x58\x96\xc5\x41\x48\xe5\xeb\xf7\x99\xca\x8c\x14\xd3\x5e\xd0\x2e\x81\x06\x94\x4b\x4e\x2c\x41\xbb\xc6\x93\x65\xd2\x5a\x7f\x10\x91\x27\xb2\x7c\xc3\x6e\xae\xe0\x0b\x4b\x74\x98\x09\xcd\x74\xf6\xb3\x8f\x8b\x76\x57\x7d\x09\x9e\xc6\xfd\x27\x52\xa2\x3c\x53\xe1\x0d\xcc\xc1\x7d\x68\x95\xc3\x87\x08\x2d\x11"
		"\x80\xdb\x6d\xf5\x54\xbc\x8c\xe9\xc5\xfd\x38\x10\xb8\x7c\x1d\x69\x42\x79\x65\x9a\xbe\xa3\x0a\xed\x9a\x4a\x85\x4e\xfc\x99\x10\xca\xfe\xc6\xb2\x3d\x68\x04\xe5\xe0\x37\xd5\x0f\x5c\x69\xa6\x57\x12\xe3\xf7\x60\x14\x2b\x75\x5d\x8a\xe5\x5a\xb1\xdb\x77\x66\xd0\xe6\xc3\xd1\xcd\x05\x1b\xee\x2e\xb1\x98\xdd\x81\xfc\x48\xb5\xe8\xa5\x48\x49\x27\x8b\x3f\x19\x10\x51\x01\xc0\xa9\x6f\xf3\x0f\x57\xda\xa6\x6e\x2f\xb0\x45\x5a\xe3\xaf\x4a\x77\x7a\xd4\x25\x57\x3a\x13\x4b\xe0\x29\x4a\xab\x26\xdf\x4b\x48\x0e\x19\x1e\x9e\xef\xc6\x11"
		"\x34\x0f\x77\xc9\x00\x94\x7d\xe2\xda\x90\xd2\x9a\xc4\x12\xac\x33\x41\xb5\x03\x6b\x96\x8f\xe5\x75\xf6\xbf\xd2\x7e\x47\x02\x3b\x09\x31\xa7\xa2\xa1\x8d\xc3\xb1\xd8\xff\x58\xe1\x9e\xf3\x89\x2c\x80\x53\x54\x08\x9f\xef\x91\x64\x6f\x74\x70\x70\x53\x13\xc4\x54\x1d\x56\x6c\x53\x43\xfa\x45\xf5\x4b\x1d\x83\x81\x83\x3e\xeb\xa2\x5c\xa7\xcb\x4d\x2a\x60\x00\xd9\xfe\x6b\x5e\xf2\x7d\x74\x48\xaa\x0b\x99\x14\xf7\x88\x63\x0f\xb4\x4d\xb5\x4b\xd4\x1e\x87\x0a\xbc\xb6\x79\x9b\x69\x88\xb4\x06\xe0\xa4\x6c\x07\x30\x9c\x3a\x0f\xa9\x04"
		"\x65\xb7\x12\x4e\xc7\x6b\x89\x68\x01\xf8\x92\x20\x9b\x37\x00\xe6\x81\xd7\x97\x78\xeb\x69\x8e\xaa\x64\x32\xde\x7c\x68\x46\x9b\x95\x85\x2f\x6b\x83\xe0\x8b\xe7\x3a\x1d\x3a\x94\xcf\x34\x7f\xf7\x1a\x21\x7e\x73\x1e\x85\xa9\x3a\x98\x63\x2c\x04\x87\x63\xb7\xb0\xa5\xff\xe2\xe7\xcd\xcb\xe1\xb8\xc5\xb0\x84\x45\x60\x81\x0b\xfd\x24\xdb\x1b\x0b\x83\x5d\xf9\x3d\xc3\xd7\x98\x2e\x71\x4b\x95\x06\xb9\x40\x2b\xc8\xdc\x38\xe3\xb9\x86\x4f\xd8\x57\xcf\xa2\x68\x72\x0a\x0e\x36\x83\x25\x73\xb0\xed\x3f\x35\x9b\xe5\x77\x02\x94\x98\x4d"
		"\x2f\xbf\x2d\x3f\x5c\x50\x13\x68\xec\xce\x52\x10\x1a\x2d\x7a\x66\x30\x4f\xe8\x48\xa7\xe8\x75\x3a\x67\xe2\x6d\xd4\x10\x7b\xfb\x81\x4b\x45\x52\x64\xd1\x63\x23\x08\xa2\xea\xd2\xb1\xe1\xa0\x93\xe3\x92\xfa\x4a\x24\xfa\x52\xe8\xc0\xaf\x54\x4b\x5d\x83\xea\x08\xf6\x4a\xcb\xe3\x5c\x92\xd6\x5a\x2a\x74\x75\xd8\xec\xb4\xa3\xb1\x82\x48\xf2\x23\x11\x6d\xd2\xeb\xbd\x7a\xee\x36\xaf\xcb\x5a\x86\xac\xc3\x54\x36\xe7\xfa\x0d\xe3\x2a\xb8\xb2\xb7\xc6\x77\xfa\x4d\x0b\xf9\x6f\x4d\x38\xe8\xe4\xd0\x95\xd2\x00\x48\xe2\xce\xe2\x27\x00"
		"\x36\x3a\xec\x70\x09\x1c\xd1\x49\x5a\x3c\xcc\x5f\x5e\xd2\x5f\x9d\x82\x4d\x78\xd3\x21\xd1\x12\xa5\x44\xfb\x68\x18\xaf\xe1\xf1\x92\x85\x40\x10\x7c\x9d\x2c\x31\x69\x0e\x41\xca\x81\xc4\x86\x57\x18\x97\xb3\xe2\xf3\x7d\xb8\x19\x56\x10\xde\xe8\xb7\xbe\xf7\x29\x2e\xe1\x17\x7c\xd0\x87\x0a\x76\xe2\xa3\x7d\x2c\x9a\xdf\x39\xdd\xad\x93\x18\x2c\x68\x28\xe6\xd0\x8a\x23\x60\xbb\xe7\x94\x06\x8b\x54\x25\x98\x0f\x8d\xf9\x8b\x58\xeb\x63\x96\x11\x6e\x94\x62\xa7\x48\xd9\xfc\xe1\x20\x94\xb4\xcc\xa9\xb6\x0a\x0b\x8c\x6a\xd1\x74\xbf"
		"\x01\xbe\xd5\x55\x96\x42\x56\x48\x5b\x13\xf4\xcd\x33\xec\x39\x24\x2f\x67\x8c\x5e\xbe\xab\xe9\x9a\x8f\x85\xf7\xb4\x53\xa4\xb5\x16\x0b\x33\xb7\xe3\x34\x25\xd4\xdc\x9a\xce\xd9\xba\x64\x4a\x0b\xbb\xfe\xd2\x09\xdd\x2d\xd4\xea\xba\x0f\x66\x75\x4a\x2e\xc9\x85\xd0\xdf\x1b\x5d\xe9\x76\x8e\xc9\x65\x9a\x83\x0d\x01\xe9\x2a\x64\x08\x4f\xb3\xc5\xbc\xa6\x10\x01\x83\x81\x1d\x37\x7d\x6a\xd2\x2e\xb7\xfd\xb3\x0e\xd1\x33\x80\x4a\xb2\xa5\x3f\xce\x74\x51\xab\xd6\x5d\x26\x8e\x72\x0e\xc0\xb6\xc1\x4b\x6a\xc4\xdb\xbd\x2c\x4b\x6f\xc6"
		"\x58\x9e\x52\x4f\xc8\x31\xb0\x80\x99\x14\xd2\x51\xea\x36\xfb\x18\xfa\xdf\x5e\x9d\xcd\xb8\x3a\x16\xe3\x01\xf4\xf4\x75\x0b\x93\x7c\x82\x72\x77\xb7\x01\x1d\xcd\x85\x75\x2d\x45\xb2\x69\x89\x13\x6e\x39\x71\x0d\xa6\xe4\xb7\xe7\xbf\xa5\x23\xf1\xab\x1e\xa3\x60\x8e\x30\x67\x9a\xfb\x69\x99\x18\xcb\x6c\x3d\xb2\xd4\x9a\x64\x94\x3c\xc2\x8c\x1c\xad\x1e\x1d\x87\x10\x1a\xd5\xe4\xdd\xe7\x2f\x92\x14\x35\x84\x4b\x28\x87\x9f\xcf\xc3\x22\x96\xe5\xf1\x48\x64\x68\xa5\x96\x4c\x2e\x02\x9a\x67\x3e\xce\x23\x5f\x2c\xba\xf9\x2c\x1f\x0a"
		"\x11\x0d\xbc\x43\x61\x04\x4b\x14\xd8\x8e\xa6\x49\x85\xc2\xef\xc9\x93\xe5\x58\x77\x1f\x45\x72\x9d\xe0\x9d\xaf\x1d\xd5\xe9\xe7\xb7\x28\x4a\xa1\xac\x90\x18\x1c\x4f\x4d\xcc\x2c\x65\xb4\x82\xa8\x70\xe4\x26\x63\x31\xc6\x9f\x0d\x16\x0f\x5c\x99\x92\x5b\x6e\x1c\x5d\x0e\x0e\x87\xc7\x5d\xbd\x25\x73\x65\xc5\x6c\xac\xe3\xd8\xbe\x78\xd5\x43\xa5\x0a\x59\xdf\x89\xa7\x87\xf4\x6a\x62\xa2\x66\x38\xec\xa4\xd3\x9b\xc1\xd3\x5d\x56\x3f\xb1\x53\xb0\xd5\xd2\x3c\xcc\xc1\xfb\x6b\xd8\x58\x29\x00\x3b\x11\x3a\x36\x9b\x1b\x77\xbc\x99\x4a"
		"\x4c\x10\x0f\x4f\xd9\x80\xad\xf4\xe0\x9c\xd7\xcd\x26\x77\x92\x3d\xdc\x3d\x76\xf1\x43\x34\xb5\xd3\xe7\xc9\xac\xe3\x22\x35\x5f\xc9\x0e\x88\xbc\xa0\x90\xe1\x70\xa7\x2c\x11\x80\x67\x34\x7b\x2f\xbb\xb2\xf4\x85\xbd\x4c\xd8\x0f\xeb\xfa\x44\xa6\x4a\x9e\x08\xb0\x4a\x9b\xc2\x4c\xdb\x09\x81\x1c\x3e\x69\x9a\xf9\xa7\x97\xf5\xc8\x1d\x38\x89\x40\x88\x36\xb6\x72\xe2\x7f\x9d\xb5\x26\xf0\x9d\x95\xa3\xc5\x23\x9c\xf9\x40\x14\x5d\xfa\x4b\xe7\x7c\xe6\x9d\x37\x74\x56\x51\xf9\x0c\x23\xda\x2b\x63\xd6\xe7\xba\x94\x24\xee\xc2\xb0\x3b"
		"\x67\x62\xde\xd1\x64\x2b\x25\xf8\x8e\x81\x8f\xd6\x74\xa7\xf9\x9a\x0b\x79\x6e\x94\x66\x5f\xcc\xab\xbb\x53\xf9\x95\xe9\xaf\x91\x5b\xa6\x1c\xc1\x66\x3c\xdd\xbc\xb5\xae\xc9\xb3\x8c\x52\x69\x4b\x07\x8a\x09\xc0\x84\x9a\x12\xea\xf5\xc2\xe4\x66\xbc\x79\x8f\x47\xe1\xa6\xa5\xb4\xe3\x05\xb2\x67\x1c\xaa\xa5\x58\xb6\x36\x32\xe6\xed\xaa\x06\xb7\xf2\x4d\x8a\xc5\x2b\xdc\x11\xf8\xac\x1c\x70\x19\x5b\x95\x89\x9d\xb9\x8b\x66\xa5\x26\x20\x58\xfa\xb5\x4b\x1f\xbc\xfd\x7c\xe8\x6f\xbf\xd2\x21\xe9\x60\xf8\x24\xaa\x2b\xff\x3e\xfa\xc4"
		"\xb7\x93\xcf\x17\xf8\x5d\xd4\x08\x9e\x97\xd4\x0e\x46\x04\xe8\xf6\xd5\xaa\x3c\x35\xa0\xf5\x24\x6e\xe3\x83\x7f\x09\x61\xd3\x75\xde\x3e\xe1\x7a\xbf\x25\xb0\xc7\x3f\x92\x3b\x0b\x56\x34\xe5\x19\x73\x81\x11\x1e\x89\x5e\xad\x4e\x3a\x7e\x36\x23\xd0\xe3\x65\x14\x36\xde\x29\x1b\x51\x8d\x3c\x63\xad\xdf\x0b\x64\x29\xe4\xbb\xe5\xfb\x41\x1a\x71\x8e\x77\x01\x37\x9b\x78\x93\x81\x00\x69\xe7\x0f\xd3\x4c\x37\xb3\x75\x54\x55\x4b\xad\xe2\x88\xed\xe6\xfd\xfc\xf4\x12\xd5\x34\xc7\x01\x27\xcc\x3d\x6b\x8d\x56\x49\x8c\x88\xb8\xbc\xd7"
		"\xb5\x48\xc8\xa2\x41\xfb\x64\x28\xb9\x23\x24\x26\xa4\xc6\x41\xfe\x2a\x54\xd9\x4a\x5d\xac\xfd\x88\x8f\x97\xe0\xa4\x0e\xab\xc1\xeb\x9b\xfd\x91\xda\xdc\x0a\x70\x00\xc7\xc9\x20\x48\xa0\x29\x15\xb4\x4c\x3d\x29\x23\xae\x1c\x9d\x94\xf9\x9a\xa8\x7a\xfa\xda\x19\x8c\x6b\xe2\x0e\x16\x25\x02\x69\xd6\x91\xd1\xc0\xde\x1c\x80\x74\x13\xc9\x98\x03\xbc\x6e\x86\x63\x48\x69\x4f\x42\x51\x5d\xc4\x0c\x63\x7f\xd7\xf0\xf9\x04\x16\xb0\x9e\xeb\x40\x39\xc2\x99\x57\x7d\xb6\xe4\x05\x9b\x1b\xef\x63\x16\x9e\x8e\xa8\xfa\x45\x1d\xcc\x92\x3b"
		"\x59\xef\x58\x82\x1c\xb0\xee\x67\xf4\x99\x2b\x7b\xe3\x00\x22\x53\x62\x15\x8c\xdb\x08\xf2\x9e\x80\x74\x4c\xfb\x9f\x75\xbb\x88\xbc\x24\x2a\x5c\x7c\x59\xe4\xc6\xe1\x73\xd6\xed\x0c\x4d\x52\xd5\xc8\x78\x5e\x26\xf1\x96\xf9\x45\xb4\x12\x49\xb8\x5e\xc1\x97\x71\x35\x01\x4a\x21\x36\x7f\x03\x46\xb5\xcd\x25\x55\x40\xff\x38\x41\x71\x5d\x65\xf5\x51\x84\x17\x2e\x71\x33\x40\x4f\x71\x20\xec\xd4\x62\x59\x4d\x38\xc5\x79\x10\x98\xcc\x1a\x6f\xce\x04\xcf\x26\xd9\x9f\x9f\xb3\x47\xf1\xe3\xee\x16\x0d\xbd\x8a\x78\x27\x42\xd8\x1f\x77"
		"\x24\x27\xbd\xbf\xb9\xc8\x7f\x01\x3c\xb3\xe3\xa6\x1d\x51\xc6\x56\xc0\xb2\x82\x46\xec\xe8\xdd\xcf\x4b\xd8\xf0\xc3\x2d\xe5\x55\x9f\xf1\x7d\xed\x64\x9f\x60\x3f\xea\x72\x56\x7c\x91\x4e\xb4\xce\x29\xbe\x24\xc0\x4e\x0e\x80\x5c\x1b\x5e\x4d\xe4\x3a\xe3\x9e\xe3\x10\x04\x0d\x9b\xb4\xb8\xfe\x7a\x83\x88\xdf\x7b\xe8\xba\xcf\x82\x36\xdd\xdc\xc7\x02\x64\xce\xc2\x3f\x64\xf0\x1d\x39\x38\xd8\xf8\x09\x71\x6e\x35\xb1\x73\x3a\x86\x23\x34\xe3\x07\x15\x63\x85\x8c\x46\x68\xce\x20\x0a\x8d\x20\x8f\xd7\xda\xda\xe7\xc1\xcb\x1c\x7b\x21"
		"\x09\xd4\x8a\x24\x29\x14\x1f\x0e\x34\x2b\x5f\xe9\x63\xb3\x13\x6d\xa1\x81\x88\xe5\x66\x59\xb0\x12\x08\x2f\x4c\x5e\xab\x62\x36\x72\xfd\x29\xfc\x22\x93\xb8\x9a\x13\xdc\xe1\xff\xa5\x4a\x8d\xe4\x34\x78\xac\xa0\x5e\x86\xf3\x49\x9e\x2b\x4c\xf0\x10\xec\x9b\x1e\xfd\xc7\x73\x88\xe5\xb2\x0c\x16\x72\x9e\xb3\xd6\xd0\xdf\xc3\x9f\x9c\xfe\x61\xa8\xbf\xbd\x9c\xe7\x88\x88\x82\x8f\xb7\x64\x80\x21\x95\xcd\xc9\x33\xd3\xc1\xc0\x85\x23\xfb\x34\x2a\x5a\x58\xae\x1e\x0a\x0d\x86\xdb\xbd\xbd\x9b\x55\x9a\x94\x3c\x06\x1a\xa4\x7d\xf8\x20"
		"\x46\xb2\x22\x57\xc7\x23\x74\x8e\x54\x3a\x02\x52\xdd\x55\x88\xa1\xe1\x4e\x7b\xb4\xed\x56\x30\x2c\x5f\xa7\x2d\x98\xd5\x1e\xed\x13\x56\x7b\x1d\x4c\x89\xe3\x23\xc7\x7f\x3a\x77\x7f\x7a\xfd\x37\xb5\xc8\xd2\x15\x90\x93\x0e\xf9\x17\x98\x65\x95\x93\x08\x7f\x76\x13\x80\x62\xcc\x5c\xd1\x09\x69\x41\xdc\x51\xcf\x31\x4d\x6c\x5c\xd0\x4b\x4a\x2d\xdd\xdd\xf2\x95\x33\x3e\x57\x85\x5b\x77\x33\xc0\x3b\xdd\x0d\xae\x9f\x3e\x14\xa9\x32\xd1\xda\xbe\x40\x94\xc8\x81\xce\x09\x72\x16\xed\x82\x48\x29\x82\xb8\xff\x74\x2b\x94\xb8\xd6\x67"
		"\x32\x55\x09\x5c\x12\xbd\x76\x20\x80\x07\xa2\xfb\x4c\x5b\x2a\xbf\xbb\x61\x4e\x80\x82\x9c\xa1\x20\xcb\xb4\x68\xac\xa5\x70\x27\xd3\xf5\x5b\x2a\xe0\x41\x50\xcb\x6f\xbd\x2e\xe5\xda\x83\x8a\x26\xb1\x23\x1d\x58\xf6\xe6\xdc\x53\xec\xe8\xff\x14\xcf\x2f\x3c\x41\xe3\x5a\x91\xe3\x4a\xe1\xb7\x27\xa0\x68\x2f\x78\xf6\xf1\x22\x62\x93\xb1\xe0\x6a\x6a\x28\x21\x9d\x2c\xed\xa1\xe4\x19\x78\x76\xf9\x7b\x2f\x7f\x01\xea\xbe\x03\x6b\x2e\x96\x67\x73\x6a\x56\x56\x05\x82\xa7\x58\x33\xdd\x99\x92\x4c\xbd\x42\x92\x3e\x8a\x3e\xee\x58\x0c"
		"\xdb\xa4\xd9\x02\xd7\x0f\xb3\xef\xaa\xae\x76\x0a\x42\x9e\xd0\x6c\x15\x4f\x54\x11\xe6\xd4\x31\xb0\x73\x6b\x01\x21\x2c\xf7\xf0\xbd\x0d\x78\x2f\xb4\xdf\x16\x6d\x6b\x63\x35\x6a\x0b\x48\x7c\x3a\x16\xdc\xba\xfd\xc3\x51\x09\x7f\xe0\x4b\xdb\xb2\x69\x83\xae\x89\x88\xc6\x47\x0a\xde\xbd\xe5\x18\xf4\xfe\x57\x97\x7c\xc1\xbe\x5d\x22\x33\xa0\x57\x25\x19\x22\xb7\x65\x52\x66\xde\x97\x51\x2c\xca\xea\xea\xfc\xbd\x5e\x7a\x60\x28\xd6\x7b\x83\x16\x29\x98\xb5\x7a\x09\x9e\x44\x1c\x3f\xe3\x28\xfd\x64\x37\x24\x84\x14\x90\x01\x54\x17"
		"\x17\x79\x5c\x23\x24\xa1\x9b\x83\x4a\xc7\xe8\x48\x86\xcc\x2d\xf4\x93\xe6\xe0\xd0\x45\x61\xba\x5e\xe4\x74\xdc\x38\x35\x85\x75\x63\xf4\x0b\x8d\xaa\x27\xe2\x90\x96\xe5\x0d\x20\x24\x23\x21\xd7\x50\xcf\x94\x60\x32\xf2\xe2\xb9\xb6\x68\xe8\x16\x12\x81\x9e\xc9\x79\x7a\x37\x18\xe4\xda\x5b\x0f\xda\x70\x67\x48\xde\x17\x8e\x39\x6f\x71\x45\x21\x86\x71\x31\x9d\x1f\xcb\xd2\xb8\x5b\xe4\x83\xda\x38\xeb\x2f\x9c\x1e\xea\x3a\x2f\xc4\x5c\xf7\x2e\x57\x2b\xf9\x28\xbb\x7f\x93\xbf\xe2\xb9\x62\x66\xef\x04\x2e\xfd\x45\x32\xc9\xb1\x64"
		"\x0d\x1c\xd4\x36\x31\x8b\xcc\xee\xc6\xda\x84\x9d\x52\x16\x78\xf2\xbe\xfb\x3f\xf8\xcc\xa0\xd5\x09\x18\xc2\xbc\xcb\xe5\x42\xda\xe9\x9f\x24\xa5\x92\xba\x36\xfc\xa5\x7a\x65\xce\xce\x3b\x88\x83\x7e\xc1\x73\xf7\x30\x89\xbb\xca\xfe\x40\xbc\xfd\x66\x69\x69\x3e\xfc\x3e\xb5\xa2\x4d\x71\x59\x53\xd6\x46\xc6\x0a\x97\x3c\x5b\x86\xd8\xb5\x5f\x96\x1b\xad\x8f\xc3\x60\x9f\xb0\x94\xbd\xdb\xab\x36\x27\xc0\xd0\xd8\x31\x1a\xe6\xe1\x59\xb1\x15\x00\x1b\x39\xca\xc7\xce\xa5\x2d\x65\xa3\x96\xb1\x01\x4d\xeb\x27\x53\x33\x04\x3e\x9a\xe4"
		"\x1f\x72\xaa\xfb\xa9\x48\xc0\x2e\x28\x49\x04\xd2\xaa\xfa\x9e\xbb\xf4\x68\xc1\x5d\xab\xe6\x56\x4d\x0d\x63\x52\xf1\x95\xb0\xb7\x1b\xf8\x7e\x6d\xc6\x1c\xf3\x33\x83\x53\x92\x55\xfd\x47\xdb\xb1\x98\x25\xd2\x99\x3f\x11\x86\x10\xe7\x55\x86\xa7\xb8\x5e\x68\x6a\x2f\xf5\x11\x90\x93\xa7\x85\x9b\x9f\x60\x96\xbe\x38\x7d\x7d\x93\x08\x76\xb8\x25\x23\x45\xd2\xf9\xc6\x38\x65\xe4\xb9\x69\xf2\xdc\x2f\x42\x92\x3b\xcb\xfe\xe0\x2a\xf9\x08\xed\xe9\x54\x91\x0d\x19\x9c\xc0\xb0\xf7\xf9\xcc\xc3\xbc\x68\x5c\x6e\x7b\x6a\xab\x5f\x43\x72"
		"\xfd\xb3\x25\xa9\x0e\xf0\x89\x2d\xde\xe2\x9b\x42\x4b\x5e\x32\x44\x95\x44\x37\x39\xd2\x4f\xfb\xc8\x3f\xf3\xb1\xd2\xa2\x39\xd9\x8c\xf9\x8f\x2d\x27\xd9\x2f\x60\xd9\x38\x83\x92\xb7\x35\xe5\xcb\x73\x07\x18\xce\x00\x17\xca\x8d\xf6\x48\x26\xdd\xfd\x15\x36\x59\x0a\x13\xc7\xa6\x37\xdb\x87\x29\xbd\xf2\x42\x75\x39\x9a\xf9\xce\xd2\xc7\x4a\x4c\xba\x79\xf4\xfe\x53\x63\x1b\x15\x21\x19\x24\x5b\x5e\xe0\x56\x96\xe1\xf9\xd5\x67\xdb\xd2\x57\x99\xa2\xf1\xa3\x5b\xa2\xd5\xeb\xdf\x7c\xd9\xb9\x75\x5a\xe7\xd8\x7c\xb3\x10\x0d\x24\x3c"
		"\x29\x53\x96\xc0\x50\x03\xa8\xff\xf0\xf3\x86\x77\xb2\x33\xac\xed\x2d\x9c\xec\x88\x66\xe5\x6f\xb5\x32\x51\xb5\xb1\xaa\x61\xd1\xb4\x84\x5a\xa1\x1f\x1a\x7a\xe6\xa9\xcf\x52\xe0\x85\x9d\xd0\x3d\x8a\x6f\xe4\x5b\x80\x1b\xf2\x08\x57\xb7\x6d\xdc\xcb\x6a\x14\x60\xa8\x76\xdb\x89\xc4\x28\xc9\x2b\xa5\xc0\x09\x8e\x7d\x35\x93\xe1\xde\xdd\xba\x8d\x3c\xe8\xe9\xe1\xd0\x18\x9c\xd9\x2a\x49\x98\x7a\xed\xa2\xea\xe4\x6d\xac\x93\x3d\x01\x7a\x7b\xa5\x31\x16\xa1\xc6\x82\xd2\xad\xca\xd6\x0d\x88\x3d\x38\xf9\xef\x10\x9f\x39\x45\xe1\x38"
		"\x8f\x4a\x95\xe3\xfd\x28\xa5\x9d\xf7\x55\x9c\x24\x40\x30\xc9\x47\x1b\xa5\x3f\x70\x1a\x87\xb6\x04\x6b\x9a\x21\x28\x2f\x40\xce\xe5\x06\xfc\xbc\x8b\xdb\xc8\xd6\xdc\x85\x3e\xca\x38\xac\x31\xdf\xe5\xd6\xde\xcf\x8e\x27\x29\x23\xaa\x10\x16\x9c\x6d\x0a\x74\xa4\x29\xae\x35\xce\x3b\x5e\x90\xfc\xec\x4d\x5a\x2e\xe4\xfa\x6b\xe2\xdc\x57\xa4\x56\x6e\x09\xe5\x4c\x60\x6c\x10\xef\xa9\x5c\x32\x1b\x35\xde\x77\xa1\x88\xe4\xca\x97\x2b\x70\xaa\x07\xef\xf7\xa7\xe1\x93\x17\x29\x16\x1f\x25\x59\xf1\x50\x08\x84\x72\x7c\x45\x58\x97\x0d"
		"\x03\x32\x32\xa9\x04\x11\x73\x50\x23\x49\xcb\x7f\x67\x26\x4f\xbf\xa5\xdf\x12\x1c\x5b\xca\xa1\x49\x33\x28\x19\x14\x97\xbe\x19\x83\x57\x3c\xf5\x12\xec\xd5\x44\x21\x40\x71\x30\xc5\x32\xf0\x97\x02\x2e\xa6\xa8\x68\xb0\xfe\x13\x9b\x27\xbf\x9b\xda\x02\xb4\x36\x06\xae\xed\x0a\x09\xd1\x96\x23\x57\x68\x45\x4b\x64\x8f\x96\xa2\x9f\xd6\x8d\x23\x80\xeb\xbb\x05\xca\xdf\xe8\x72\x9b\x5f\xa0\xac\xe3\xb0\x5b\x9e\xd6\x78\x6a\x2e\x52\xc4\x43\xc7\x62\x51\xd3\x4c\xd6\x18\x2c\x17\xd2\xa3\x5c\xf5\x83\xd5\xf8\x95\xda\x02\xe8\x2f\x06"
		"\xbb\xda\x14\x60\x86\x71\x89\xc9\x93\x2b\x14\xdb\x83\x4d\x0e\x04\x51\xf2\x97\xb8\xb7\x5a\xb7\xc7\xce\x69\x8c\x0b\x38\x45\x65\xcf\x21\x94\x77\xd4\x25\xf1\x36\x13\x6b\x1c\x81\xf3\x13\xa6\x8d\x6f\x2c\x96\x1c\x1f\xd0\xaf\x81\x7c\xd0\xdc\x47\x88\xf3\xd3\xe9\xf2\x4c\x27\xde\x48\x59\xc2\xff\xd9\x9f\x7d\x11\xbd\xa1\x20\xbd\xe2\x3f\x41\xd8\x8d\x0d\xb4\x33\xcf\x28\xb7\x1b\xfc\xc7\xab\xfe\x74\x38\x9b\x18\xde\xbd\x56\x93\xb3\xd9\xb0\xb8\xcb\x14\x5e\x46\xfc\x15\x74\xd1\x96\xbe\x2a\xb8\xce\xbf\x51\x7d\x05\x93\x38\x97\x4c"
		"\x19\x37\x12\xa2\x24\x08\xe5\xfa\x6d\xcd\x00\x95\xab\x67\x4e\x09\xc7\xfa\xf2\xba\x95\x59\x45\x2a\xc2\x98\x5a\x8c\xf8\x9e\x36\x05\xde\x23\x41\x5e\xf3\xdb\x41\xc4\x23\xc6\xc0\x55\x6b\x03\xe5\x51\xc4\xf9\x69\xb0\x1c\x8e\x41\x91\xae\x6e\xfc\xad\x83\xb9\xbe\xbd\x9a\x2b\x35\x0e\xc2\xa8\x6a\x5e\x6e\x13\xc9\x3b\x2e\xe1\x8f\x9a\x8e\xf4\x9b\x98\x0d\xac\xd6\xd4\x4a\x47\x87\x08\x20\xe3\x3d\x7d\xd7\x1b\x9f\x3a\x7a\xfa\x59\xf0\x42\x28\x9a\x24\x23\xa1\xfa\x07\xa2\xe6\x72\x24\x3f\xbb\x5a\x88\x1f\x14\x37\xcb\xbb\xd3\x28\xf1"
		"\x6c\xd1\xa5\x86\x85\x5c\xd7\x26\xdd\x73\xc7\x11\xbc\xd9\x20\xb9\x81\x78\x12\x05\xff\xbc\x1c\xe3\xcd\x2c\x41\x5d\x18\x5c\x5d\xb0\x7e\xb8\x88\x7c\xe0\xb8\xea\xda\xdb\xb2\x85\xcd\xf5\xff\xf8\x99\x09\xa6\xb7\x2f\xf9\xc1\x79\x89\x1b\x52\xcb\x27\x02\xff\xa5\x38\xb1\xcd\xa6\x33\xea\x6e\x52\xc7\xc3\x99\xf9\x38\xe9\x7e\xd3\x75\xdd\x28\xfc\xee\xb7\xc5\x33\x6a\xfb\x99\xad\x63\xbc\x68\x93\x87\x83\x99\xec\x40\xdf\x21\x8f\x60\x56\xc2\x7c\xa0\x7e\x8b\xfc\x96\x24\x69\xa4\xb0\x48\x14\x19\x69\x1a\xeb\x6a\x55\x03\x97\x5c\xf3"
		"\xf2\x2e\x37\x0f\x8c\x4f\xd8\x76\x7a\xbf\xb9\x30\x16\x3c\x98\xd3\xcd\xee\x46\x8b\x8b\x86\x99\xc1\xac\xcf\x87\x70\x9b\x9f\x1d\x92\xc8\xac\xad\x82\xec\x18\x51\xcf\xe5\x2e\x34\x84\x62\x28\x61\x32\x1c\xe5\x4c\x07\x10\xc0\x39\x02\xa5\x8d\x3a\xf5\x1e\x80\x8b\xf1\x4f\x15\x92\xea\x11\x7c\x1c\x58\x29\x90\x06\x0e\x26\xae\xa4\x5b\x74\xfd\x87\xf3\x7d\xba\x2c\x27\xbd\x71\x2e\x5d\x75\xae\x86\x4c\x9a\xf2\x59\xae\x15\x9a\x1d\x11\xfe\xbe\x7f\x32\x8e\x88\x71\xa2\xec\x3b\x0a\x86\x97\x60\xa1\xa3\x6e\x01\x20\xc0\x89\xf5\xf3\xaa"
		"\x65\x07\x01\xcf\xc8\x94\x02\xb1\x5c\x0e\x80\xee\x9b\xd1\x0f\x45\x7f\x78\xa1\x13\x2d\xc5\x9e\xfa\x8d\xae\x5e\x1c\xfc\x6f\x19\x7f\xcc\x69\x23\x1f\x12\xce\x19\x6d\x29\x65\x04\x2f\xcd\x86\x4b\xfa\x64\x43\x09\x12\xba\x60\xc7\xa9\x4e\x71\x61\x4f\x46\x40\xb7\x78\xe6\x9c\x8d\xc2\x04\x76\xde\x5b\xcb\x6c\x05\xbb\x4e\xc9\xa3\x03\x89\xaa\x22\xce\x4b\xd9\x82\x39\x99\xd9\x04\x3e\x3d\x40\xfe\x07\xda\x1b\x0f\x2e\x02\xe3\x00\x9a\x3e\xa7\x3a\xe4\xcd\xe3\x07\x04\x44\xe4\x04\x09\xe3\x75\xd1\x91\x2e\x91\xf4\x40\x59\x05\xa3\xab"
		"\x57\x3b\xc1\x84\x5c\x6a\xd1\x29\x13\x10\xcf\xd6\xf8\x0b\x98\x09\x2f\x35\x51\xdf\x3c\x46\x79\x34\xb7\x27\xc4\xd4\x18\x25\x83\xcd\x90\xc6\x16\xbc\x43\xe5\x62\x11\xd2\xfb\x72\xab\xb4\xd7\x8b\x5f\xa6\xef\x04\xea\x14\x2b\x16\x83\xa8\x3a\xfa\x95\x56\xaf\x18\x15\xcd\xcd\xa6\x2d\xbd\x28\xa1\x5e\x82\xd8\x41\x3f\xe7\x14\xa9\x65\x8c\xae\x78\x93\xb9\xfa\xc1\xda\x2f\xb0\x47\xb1\xc3\xd8\x1f\x75\x6d\x77\xdf\xa9\x48\x1a\xe2\x08\x70\x41\xa9\x67\x91\x04\x73\xbd\xaa\x82\x99\xe1\x27\xc2\x29\x55\xf2\x91\x33\x4d\xaa\xd9\xa0\xd8"
		"\x8f\xcb\xdc\x48\xf1\x2f\x63\xbf\x6e\x44\xeb\x53\xce\xba\x06\xaa\xc7\xe1\xf0\xf7\xf1\xa1\x65\xda\x8f\x73\xee\x03\x87\x57\x73\x44\x75\xdb\xf3\x9d\x07\x3d\x9b\x29\xfc\x2b\x20\xc4\x13\x1c\xd6\xfa\xc7\xaf\x1c\x4f\xac\xb8\xf6\x68\x63\x73\xc1\xa2\x2d\xb1\x5e\x85\x26\x3e\x73\x4e\x6c\x6e\x20\x93\x71\x50\x89\x1b\x67\x4e\x79\x71\x4a\x49\xc9\x66\xdd\x5b\x9c\x83\xd8\x8a\xfd\x2b\xa6\x62\x5e\xbc\xa9\x65\xd7\x8f\x91\xf4\x7d\x28\x3d\x87\x0d\x26\xae\xc5\xea\x68\x3c\x7e\x49\xb2\x16\x79\x98\x74\xbc\x37\xb4\xd4\x03\xa3\x52\x47"
		"\x19\x5e\x55\xed\xa8\x27\xa8\x0b\xf0\x63\x5e\x09\x1b\x9e\xa1\x32\x4a\x11\x34\x8a\x57\x62\x76\x9f\x40\x1a\x08\x0f\xc1\x8a\x55\xd5\xa0\xf5\xf1\xaf\xca\xbb\x6e\xe1\x5d\x88\xad\x1e\xd9\x4d\x24\xe3\x19\xd0\x03\xf7\xe3\xd6\x48\xca\xbc\xb9\x43\xd9\xc1\xe6\x9c\x8d\xb4\x93\x8c\x2f\x27\x63\x2c\x63\x5f\xca\x79\xed\x32\x73\xf2\xea\x01\xdf\x3a\x6b\x6f\x0d\x81\x1e\xe0\xa9\x8f\xd9\x58\x60\x57\x26\xcf\x4e\x27\xa1\x4d\xb1\x7d\x38\xc5\x44\x81\x73\x3e\x2f\x93\x41\xd5\x8c\xdf\xbd\x2b\x52\x9c\xca\x36\xb7\xaa\xb7\x92\x8b\x7c\xff"
		"\xf7\x28\xa4\x2a\x11\x59\x28\x1c\x9c\xea\x6a\x69\x01\x96\xe7\x3f\x20\xdb\x90\xab\x57\xa7\xd8\x28\x59\xc1\x12\x2f\x22\x6a\xde\x83\xfb\x5d\x17\x5a\xab\x86\xa2\x2c\x6b\x91\xad\x82\xe2\x1c\x0b\x48\xb5\xf0\xeb\x06\x1e\xb7\x2c\x7f\xc2\x36\x1a\xe5\x0a\x3e\x23\x08\x86\x9b\x9f\x0f\x2a\xfd\x03\x95\xc8\x84\x32\xf3\xb8\x7c\x38\xf1\x56\x9b\xff\x08\x31\x80\x91\x29\x6f\x13\xce\x05\x21\xb1\xb8\x0b\x02\x4b\x4d\xd5\x78\xda\x60\x97\xb7\x04\x16\x10\x03\x40\x6b\xca\x65\xfc\x75\x78\x98\xf0\xf8\xd1\xd9\x82\xb3\x99\xb9\x0d\x7d\xd6"
		"\xa0\x0a\xc4\xa4\x9b\x53\x96\x8c\x05\x55\x48\x95\xe6\x61\x82\x1c\x72\xa2\x6f\xc5\x6c\xf5\x82\xd2\x91\xbb\xba\x5b\xd6\xce\xdd\x7f\x36\xf2\xfd\xf3\x78\x7b\xa1\xb8\x9a\x08\x74\x66\xad\x46\xb7\x3d\x5b\x1c\x8e\x8c\xbb\x1f\x16\xab\x13\xfa\xe6\xd9\xda\x78\xc9\x73\x65\x5c\xd2\x29\xdd\xc1\x6c\x37\xcf\xad\x14\x00\x1b\xee\x28\xb4\xf1\xb4\x80\xe0\x85\x42\x04\x1f\x2d\x61\x08\xbd\x86\x77\x45\x20\x7a\x68\x77\x93\xe8\x31\xbb\xd4\xb5\x5e\x56\xf2\xe6\x3d\xbf\xfe\x52\x09\xe5\xe9\x04\x6d\x85\x01\x45\x4f\xc5\x63\xa8\xcd\x65\xec"
		"\x1f\xba\x8d\x46\x64\xed\xf5\xbc\xa9\xd0\x01\xc3\x4a\x79\x4f\xe5\x94\x3b\xb5\xee\x60\x5a\x6c\x57\x1f\xb5\xf7\xcd\xa9\xfe\x24\x56\x3e\x83\xb8\xf8\x28\xd7\xdc\x9e\x19\x7c\x20\xde\xef\x78\xe2\x39\x53\x81\x67\x4d\x49\x3c\x24\x9e\x78\x46\xb1\x95\x23\x6e\x4c\x35\xc6\x27\xb3\x81\xc4\x56\x3c\x18\x38\x47\x4a\x29\x6c\x1b\x96\x03\x9f\x24\xbe\x93\x05\xfb\xca\x01\xf0\x26\x95\x83\x80\x66\x1a\xc9\x85\xb2\x24\x71\xff\x61\x4e\xf1\xdd\x6e\xf9\x2d\x42\x9c\xd8\x87\x21\x8c\xd0\xaa\x54\x8c\xcd\x18\x38\xbe\x1a\xc6\xf1\x1a\x95\x66"
		"\xe7\xe1\x53\xec\x94\xcc\x91\x46\xb1\x3d\xab\xf5\x18\xdf\x83\x17\x40\x1a\x47\xc8\xef\xbb\xc9\x48\x1b\x7e\x63\x4d\x37\x67\x6a\x4d\xfe\x11\x76\xd4\x4e\x21\x6f\xf3\xce\x1a\x4a\x0b\xcd\x0e\x86\xff\x5c\xd1\x8b\x94\x89\x2e\x8b\xcd\x1c\xb5\x86\x66\x28\x15\x0a\xae\x44\x4d\xcb\xb2\x4b\xca\x01\xb7\xba\x7f\xcb\x6b\x5c\xaf\x2e\xe3\x5d\xe9\xe9\x34\x24\x2d\x05\x73\x51\x92\xbe\xc5\x89\x33\x59\x3a\x9c\xd3\xe3\xfc\xed\xbd\x0c\xac\xc4\x96\x9a\x12\x78\x35\x5d\x6c\x64\xc3\x06\x59\xfc\x56\xd4\xd8\x23\xd0\x4f\x3f\x02\x87\x71\x6c"
		"\x42\x16\x47\x77\x7a\x30\xae\x1b\x69\xbf\xd1\x0f\x48\xa8\xac\xe1\x3c\x56\x3d\xcb\xff\x2f\xc9\x88\x1f\xbc\xad\x3c\xc0\x84\x0c\xbd\x59\xf0\x57\xa1\x92\x72\x7f\x39\xd1\xb1\xfc\xc3\x95\x57\xcd\xf5\xb8\x4f\xfc\xd8\x70\xff\x07\x15\x2e\x29\x87\xeb\x96\x9d\xd2\x3b\x37\x63\xfc\x02\xf5\x3e\x9c\x26\x60\xe7\x5e\xcb\x11\xc5\xd6\x7d\x41\x4e\xea\x13\x12\x35\x2c\x2c\x24\xa5\xef\x44\x5a\xbb\x57\xf6\xb4\x9d\xe3\xa1\x29\xd0\xe9\xf7\xf2\xc3\x65\x78\x9e\x1f\x74\xcd\x69\x74\x8d\x03\xa7\x8c\x0c\x35\x9a\xef\x54\x60\x6b\xa6\xe2\x36"
		"\xba\xe9\xa3\x5b\x21\x3b\x61\x2c\xd0\x73\xcc\xfd\x29\x4a\xe1\x65\x5e\x90\x4d\xb9\x90\x28\x83\x10\x51\x16\xea\xd4\x68\xfe\x1a\x16\x90\xf2\xa1\xad\xf5\x6f\x96\x8b\xa5\x61\x9d\xce\xac\x5b\x5d\xdc\x57\x41\xbb\xd6\x6c\xd3\x7d\x5c\xcc\xd5\x6a\x61\x0c\x4b\xb4\xb4\x9f\xfd\x21\x40\xe8\x82\x6e\xfe\xbf\xad\x4e\xfe\xeb\x16\xe2\x93\x3e\xc9\xef\x10\xd3\xd1\xd4\x2a\x0b\x9e\xce\xe8\xbd\xd6\x5b\x1d\xa9\x21\x75\x71\xa6\xb9\xff\x20\xf8\xe1\x02\xb7\xf1\x53\x7a\x90\x3b\xe6\x33\xec\x6e\x64\x26\x65\x12\x16\x6e\x0f\xfa\xe8\xc9\xec"
		"\xab\x1f\x99\x43\x6e\xb2\x86\xeb\x00\x9b\x0c\x7e\x4d\x7d\x52\x39\xd5\x7f\xce\x3b\x77\x78\x08\x69\x79\x55\xfa\xfb\x8f\x7e\xab\xca\x55\xc2\xa0\xb2\x0f\x0a\x92\x1a\xd1\xde\x39\xf1\x87\x67\x78\xa1\x66\xf8\x0c\x68\xaf\xcc\xe5\x34\xc1\xa3\xf3\x9e\x1c\x91\x0a\x5c\x40\xd3\x45\xa2\x86\x19\x4a\x24\x4b\x82\x41\x10\xca\xd7\x91\xb1\x22\x36\xc1\x3b\x18\x57\x94\xef\xb3\x7b\x81\x58\x5a\x80\xae\xa5\xbf\x1e\x55\x27\x2f\xcd\xd7\x40\xd4\xd2\xa9\xe3\xa8\x54\x1c\xbe\x6a\x5c\x74\x4d\x77\xa8\x55\xe5\x43\xf0\x0e\x88\x7b\x90\x57\xc4"
		"\xfe\xc5\xdd\x59\x74\x83\x56\xe6\xf5\x45\xdb\xce\x54\xe4\x3a\xa7\x62\x99\xb3\x09\xb5\xa5\x97\x42\x56\x0e\xf2\xc4\xeb\xae\xc4\xea\xac\x93\xd9\x8a\x97\xc7\x25\x69\x7d\xf2\x4a\xc5\x1e\x7d\xba\xac\x38\xad\x3f\x4f\x14\x55\xbe\xf5\xb1\x59\xec\x39\xde\xaf\x29\x14\x9c\xe4\x8b\x91\x87\xb9\x5f\xa2\xce\xf5\x33\x67\xe5\xa5\xe5\x1b\xcf\xde\x32\xf3\x0a\x7d\x0c\x19\x85\x48\x88\xf8\xa3\x40\x94\x52\xd5\xe2\xda\x59\x74\x1d\x53\xe6\xef\xc0\x8f\xea\xf3\x5e\x1d\x3b\xf7\x0d\x1f\x31\xad\x33\xed\x96\xce\xb8\x0c\x5c\xca\x33\xe0\x63"
		"\x16\x2c\x15\xbf\x27\xc0\xc8\x67\xc9\x00\x8d\xc5\xb6\x1a\x61\x42\x03\xac\x69\xfa\x91\x1e\x9f\x0c\x6e\x26\x87\xa1\x65\x14\x56\x5e\x73\x09\x4f\x49\x83\x47\xff\x82\x4f\xc1\x9b\x70\xb1\xbf\x16\x48\xd1\x40\x65\x45\xd4\x67\x31\x72\xc7\x73\xf8\xc5\x0d\x47\xdb\xc9\x23\x74\xb0\xef\x48\x1c\x7c\x16\xd3\x13\xdb\x76\x23\x5b\x2a\xed\x9b\xcf\x04\xf4\x5c\x4f\xa4\x61\x78\x17\xdb\x46\x76\xb8\x6b\xfb\x17\x38\x6b\x53\x62\x0c\x98\x88\xe6\x3d\x83\xa8\xae\xe3\x50\x8b\x2d\xb1\x5e\x06\x86\x90\xf7\x84\x55\xea\xa6\x69\x0b\x96\xb1\x69"
		"\x8c\x89\x06\xfc\x70\xac\x32\x7e\x45\xc0\x04\xe8\x46\x7a\xa9\x6b\x8f\x6d\x5c\xf3\xe2\x75\x7a\x0d\x65\x1c\x68\x88\x00\x9b\x5e\x28\xa6\x0a\x7b\xd5\xe8\xf4\x7f\x1a\xaf\x7f\x8a\x29\xba\xcc\xca\x27\xb3\x88\x86\x2f\xb5\x5a\xdf\x99\x02\xc6\xa2\x71\x3f\x93\x0b\xb0\x0a\x4b\xb1\xcd\x37\x16\x53\xc4\x4d\xd6\x01\xcb\xde\x40\x74\x35\xa9\xea\x14\x8f\x52\xb9\xa3\x70\x4d\x68\xd8\xf6\x61\xee\xfb\xf2\x2c\x79\x7e\x0a\x79\x2c\x4e\xde\x2f\x41\x6b\xc6\xaa\x74\x25\x65\x7d\xb4\x62\x3e\x00\xa6\xd9\x5b\x8a\xe6\xcb\x9d\xa7\xae\x58\x73"
		"\xd8\xdc\xb9\xf2\x2f\x75\xda\xe7\x2d\x9b\x94\x99\x8b\x92\x08\x68\x6b\xd1\xa0\x5b\x6d\x5a\x12\x5f\x4d\x29\x89\x53\x7c\xaf\x9b\x99\xba\x82\x0a\xc5\x80\xe0\x52\x6c\xce\x3a\x5c\x1c\xa1\x65\x56\x8e\x59\x55\x1b\x9b\x5d\xe0\x35\x43\x65\xb7\x61\x23\x78\xdf\x92\xe9\x25\x97\x6a\x5f\xc0\x65\xb3\x58\xbd\x67\x08\x60\x41\x8f\x2d\x0e\x16\x6e\xed\x9f\x58\x6c\xc7\x68\x3a\x73\xea\x5a\xc8\xf2\x74\xe5\xbd\x9e\x81\x50\x72\xd9\x99\x18\x87\xba\x28\x23\x10\x4a\x51\xbc\x39\x35\xaa\x83\x6e\xee\x87\xdd\xb3\xb3\x26\xb4\xf9\x47\x1d\xb3"
		"\x41\x06\x23\xc5\x5e\x60\x3d\x1c\xdb\x62\xca\x7a\x96\xf3\xe5\xde\xbc\x5b\x14\x6e\x7b\xe4\x0a\x24\x80\xda\xce\x2a\x3c\xa2\xc8\x33\x7e\xf1\xba\x91\x3f\x0e\x36\xdf\xe3\xaf\x4d\x27\xcf\x43\xbc\xda\x59\xed\xf0\x6b\x7a\x1a\x48\x70\x15\x43\xa2\xa7\x24\x81\xb1\xe0\xdf\xe1\x92\xa7\x18\xf7\x8b\x5a\x99\xf6\x81\x1e\x32\x77\x18\x7c\xd6\x58\x8d\x30\x6e\xc2\xfa\x3e\xa9\x46\xd8\x60\x66\x6e\x34\xb9\x25\x63\x72\x49\x53\x26\xcb\x33\x24\x49\x01\x50\x6f\x97\x21\x03\xb4\xb1\x7a\x79\x44\x8b\x76\x4e\x62\x35\xe0\x8a\xb2\x0b\x80\x59"
		"\x78\x85\x5e\x42\xa5\xfa\x10\xe4\xec\x2f\xa9\xd5\x8c\x19\xd3\xeb\xae\x93\x30\xf9\xe8\xe4\x8f\x3f\xeb\xe3\x17\x41\xab\x0f\xa2\x90\x16\x3b\x02\x99\xea\xd2\x79\x0f\xb2\xa1\x79\x9a\x53\x42\x01\x49\xaf\x54\x6f\xf9\x68\xab\xce\x04\x2c\x31\x15\x3d\x89\x13\xc2\x69\xa9\xd3\xd1\x58\xf6\x86\x53\x72\x70\x01\x2a\x99\x5f\x8e\xaf\xff\x6e\xc5\x86\x31\x29\x8f\x23\x29\x64\x5e\x14\x4a\xb3\x02\x6c\xe3\x8b\x08\x75\x15\xec\xa3\x4c\x95\x9e\x48\xbe\xbd\xff\x1a\xb3\xa2\xd5\x1d\xe6\x3b\x66\xc1\x16\xdb\x45\x28\x61\x29\x5e\x7a\x50\x79"
		"\xc6\xae\x52\x30\x5d\x72\xd1\xbc\x9d\xc2\x05\x54\x9f\x4d\xb7\xe4\x25\x7c\x82\xa4\x75\xeb\x69\x8a\xd7\xe2\x4e\xb8\xe2\x64\x8f\x09\xb6\x3e\xd9\xe5\x48\x91\x44\xff\x9b\xd0\x63\x64\x6b\x47\xdb\x3e\xb4\xa4\x5f\x65\x6d\x1f\x25\x6f\xe9\xab\xac\xb4\xf6\xe7\x38\x8a\xda\x6c\x0b\x2d\x4f\xfa\xa1\xaf\x85\xad\x1f\x0f\xcf\x06\x33\xb9\x19\x9a\xbb\x77\x7c\xb5\xce\xfb\x42\xeb\x6b\x27\xfd\x32\x61\x93\x3e\xa6\x58\xec\xfd\xdb\x81\x69\x30\x4b\xcf\x94\xf9\xd4\x3f\x4c\x5c\xf4\x20\x70\xb8\x31\x48\x27\xae\xca\x3b\x75\x6c\x55\x92\x75"
		"\x09\x45\x58\x61\xb9\xcd\x54\x09\x4d\x6b\xdc\x6b\xe8\x81\x45\x90\x50\xe4\x6a\x43\x6d\xa2\x1b\x7d\x53\x48\xad\x0d\x3f\x59\x72\x43\xd2\x2e\x04\x78\x9b\x96\x7e\xcb\x99\x41\x0d\x58\xbd\x19\xc0\x06\x39\x97\x40\x7e\x3b\xc3\xd4\xf1\x2a\x50\xed\xb7\x7e\xaf\x21\x53\x38\x68\x73\x7d\xc0\x29\xf2\xe1\x76\x03\x7a\x7e\xd4\xe8\x6f\x39\x23\xec\x4c\xab\x6a\x05\xad\xbb\xf0\xfc\xcd\x85\x15\x58\x7f\x26\x08\xba\x68\xbf\x9a\xe1\xec\xa9\x64\x2a\x3c\x5e\x4d\x52\x7d\xcd\x66\xa0\x8a\x53\x11\xb6\x1e\x52\xb7\x5e\xda\x6f\x49\x66\xb2\xe5"
		"\x5c\xff\xdb\xc0\x2c\x88\xd2\xbf\x4e\xa8\x2b\x59\x4b\xea\xf8\x21\x2f\x75\x3c\x15\xbc\x18\x46\xdf\xbf\x6c\x1f\x76\x74\x2b\x7d\x49\x24\xb2\x02\x0b\x95\xfd\x27\x7c\xbd\x90\x81\x4f\xbe\xc6\x6e\x1c\x49\x09\x11\x11\xb7\xd2\xdf\xff\xb2\xeb\x1d\xea\x3c\x7d\x4c\x75\x84\x96\x01\x94\x37\xce\xeb\x47\xcb\x4b\x4d\x3a\xa2\xf9\x6a\x62\x4e\xa4\x3e\xca\xfa\xb7\x02\x8c\xa1\x47\x2d\x5b\xa1\x5b\xfc\x3a\xfc\x2c\x74\x60\x35\x72\x33\x54\x68\xcb\xae\x16\xac\x5e\xdc\x59\x23\x8c\xaf\x2a\xc3\xe3\x31\x3b\xa8\x9c\xae\x85\xc6\xf7\x79\xe9"
		"\xbc\xea\x00\xdd\xf9\xe5\x30\xce\xf3\x95\xa2\x16\xda\x63\x76\xec\xf6\x7f\xb0\x71\x24\xa8\x60\x8f\xa6\xb8\xd1\xda\x82\x2b\xbf\x40\x16\x48\x5d\x89\xa8\x80\x31\x77\xd9\x3f\xa7\x3e\xad\x73\xbd\x36\x23\x04\x27\xdf\xa7\x5e\x21\x89\x27\xc2\x48\x97\x30\x79\x37\xf1\x2e\x70\xdd\xc8\x77\x27\x42\x98\x94\x5d\xeb\x2a\xf1\xae\xd1\xa5\x58\x0c\xb3\x17\x4d\xb8\x1b\x79\xe6\x91\xc2\x4a\x43\xd3\x17\xd8\x42\xda\xd6\x1a\xba\xa8\xdf\x5e\xf6\x2f\xf3\xc5\xc5\x97\xe6\xa0\xbf\x35\x3c\x4f\xb7\x09\x68\x8c\x79\x10\x28\x59\xf2\x9e\x80\xf1"
		"\x1e\x29\x54\x90\x8c\xc1\x36\x9e\x66\x63\xab\x12\xab\x1e\x93\x46\x3b\x03\xb5\x7e\xb3\x1d\xd1\x5f\x17\x2d\xe8\x75\x56\x03\xd1\x1d\x61\x84\xce\x49\x7f\x40\x44\x8f\x23\x73\x79\xa1\x39\x8d\x4b\x1e\xc4\x71\xb0\xa5\x48\x95\x9a\x9f\xa6\xa3\x88\xac\x29\x41\xc5\x89\x2f\x6a\xff\x50\x71\x52\xcd\x75\x57\xdf\x07\x98\x15\xb8\x33\x12\x8e\x91\x5a\x9d\x75\x62\x64\xfe\x45\x78\x65\x9d\xd7\xb3\x31\x37\x3e\xc2\xae\x4d\x35\x8d\x24\xdf\xc5\xea\xaa\xed\x6d\x25\xf8\xaa\xcb\x46\x91\xbb\xa8\x25\xa8\xbc\xa7\x16\xfc\xa4\x29\x70\x64\xa2"
		"\x7a\x3d\xb4\x31\xe0\xc5\xd9\xe7\xb6\x36\x2a\x99\x0d\xb7\x73\x56\xb2\xf3\x79\xcf\xfa\x91\x89\x75\xb8\x42\x8e\x84\x30\xc6\xc8\x93\x0b\x01\x47\x7f\xa1\x96\x48\xc6\x90\x70\x7f\x15\xb0\x14\x9b\x4c\x12\x49\x72\xea\x51\x93\xbe\xae\x10\x10\x77\xc4\xc0\x5d\x49\x58\x01\x5d\xce\xf8\xb3\x89\x38\x8e\x25\xca\xbe\x7b\xd6\xda\xf6\x6c\xb6\x41\xb9\x48\x12\x8c\x02\x78\x3e\xad\x5d\x0c\xe2\xda\x03\xb0\x9b\x9a\xdf\xea\x83\xc7\x0c\x67\xb0\xbf\xf8\x5f\x3b\x1b\xa4\xd4\x88\x0c\x20\x41\xcf\xce\xe1\x99\x9e\x26\x10\x27\x87\xf6\x54\x93"
		"\x71\xc9\xed\xb3\x9a\xaa\x91\xc2\x87\xfb\xd8\x0b\xee\x91\x4f\x87\x32\x20\xb4\xfb\x82\xf0\x86\xd9\xad\x2c\x98\xdb\x33\x6b\xc1\x59\x57\x4e\x58\xee\xce\xd0\x57\x74\xde\x61\xfd\xc8\x19\x3c\x26\x3b\x32\x9b\x46\xcb\xc3\x5c\x5e\x2c\xbf\xf3\x5b\x23\xab\xed\x87\xd7\xb8\xfe\x5a\x45\xe3\x5c\x8f\x4d\xea\xad\xc5\xc0\xde\x17\x21\xf6\xfb\x89\x70\x02\xba\x82\x1c\xaa\x5f\x87\x31\xa3\xe3\x73\xb5\xb1\x7c\xa4\x7a\xea\xb4\x89\x4c\x59\x47\x36\x9f\x70\x83\xac\x17\xbe\xcb\xb2\xea\xef\x14\x1e\x27\x68\xee\x0b\xec\x18\x92\x6a\x77\x1f"
		"\x97\xf0\x46\xd6\xf6\x1e\x2d\x3d\x5f\xb2\x89\xee\xa0\xd4\x2b\xa8\x56\xa5\x55\x39\xae\xf8\x37\x27\xf2\x80\xaa\xf1\x1b\x77\x4c\xaa\x56\x9e\xd2\x95\x61\xf3\x65\x35\x8d\x84\xd3\x95\xbc\xf5\xab\x2b\xba\x61\xd9\x78\x52\xf1\x54\x70\x7e\x7f\x3e\xb0\x06\x59\xfd\x13\x5d\xfa\xd0\x64\x9b\x62\x4f\x0f\xe9\x67\xbd\x92\x54\xca\x49\x7e\xab\x23\x84\x12\xe2\x87\xc8\x66\xe7\x1d\x6a\xb1\x00\xa1\x39\x15\x3d\x19\x24\xde\x81\x88\x0f\x9e\x2b\x15\x1c\x58\xe6\xe3\x7a\x57\xfc\x73\x95\x0e\xd1\x8c\x75\xf3\xd5\x79\xe2\x57\x7d\x2a\x0a\xdf"
		"\xe0\xc0\xdd\xd9\x59\x9c\x85\xdb\x79\x68\xb5\xfe\x5e\x06\x3c\x1c\xd6\x37\xbb\x62\xb0\x23\x92\x89\xd2\x95\xb2\x3c\x68\x36\x68\xb6\x87\x39\xe8\xf0\x43\x2e\x03\x33\x08\x78\xd4\xbe\x80\x5e\x48\x64\xe2\xce\x93\x1e\x83\xb3\x54\x73\xb9\x13\x67\x3d\x71\x60\xe6\x27\x88\xc0\x86\xa8\xdd\x85\x8b\xb3\xe6\x80\x60\xc2\xa6\x36\x9a\xd0\x40\x74\x41\x50\xd2\xd1\xbc\x63\x41\x6a\x36\xd8\xa3\xd1\xdf\x76\xa4\x72\x34\x29\x64\xfd\x42\x61\x68\x6c\x42\x00\x86\xb8\x2c\xd2\x23\xcf\x70\x4e\xeb\x71\xc0\xd0\xe8\x31\x67\x70\xff\x61\xc0\x55"
		"\x80\x64\x95\xa4\xb4\xe2\xbd\x78\xa3\x2f\xf0\x58\x19\xbb\x6b\xad\xf9\x59\xf6\x8c\x9a\xbc\xf3\x84\x8f\xdf\xd5\x02\xbe\xbe\x40\xf8\x9d\x4b\x6b\xba\x08\xb8\x88\xba\xf4\x8b\xe0\x4f\x7b\x9b\x98\xa1\xff\xa6\x94\x09\xcb\x42\x5d\x48\xc0\xbb\x7d\x89\x25\x02\xde\x4a\xe0\x5c\xbe\xa1\x4c\xae\x29\xd6\x6f\x04\x53\x46\xbe\xe3\x05\x80\x26\xa0\x1f\x48\x71\xae\x2f\xd7\xe6\x21\x55\xe6\xdb\x87\x34\xe9\x3a\x5a\xd4\xf3\xc1\x62\x64\x66\x04\xe7\xde\xc1\xd3\x01\xec\x0c\x03\x8f\xa7\x1d\x76\x00\x30\x00\x72\x1d\x5f\x08\xd0\x3e\xff\x51"
		"\x19\xac\xdc\x2b\xaf\x9f\x74\xe2\x3b\x9d\xc3\xea\x8f\xf7\xd8\xbf\xb0\x6e\x41\x15\xd0\x76\x80\x06\x80\x33\x1b\x58\x61\xfd\xd5\x42\x7e\x5c\x1b\x2a\x66\x8e\x26\x20\x45\xba\xd7\xc6\x7e\x31\xfe\xe2\xec\xe8\x12\x2f\x19\x39\xb2\x74\xbc\x62\xa6\x0f\x63\x57\x56\x7c\x9f\xd9\x03\xae\xaf\xde\x46\x58\x9b\x95\xc8\xce\x88\xe7\x14\xb8\x7e\x4a\x77\x68\x32\x65\xef\x1d\x48\xfb\x3b\x59\x15\x53\xb0\xc8\x9e\x66\x99\x68\xf2\xfc\x4a\x80\x58\xcf\xe3\xd8\x6c\x5c\x47\x20\x46\x53\x6d\x38\xe2\x13\x84\x0b\x23\xdf\x95\x09\x4f\x16\x67\x6e"
		"\xfa\x4e\x2d\xf0\x76\x74\xe7\x2d\x5d\xb1\xed\x4c\x80\x56\x18\x9c\x9b\x97\xb2\x8b\x5d\xd6\x69\x93\x5a\x91\x60\x8b\xed\x9c\xcb\xc0\x6f\x9b\xfc\xc4\x2c\x4f\x63\x4e\xfc\x60\x50\x01\xf6\xf6\xa8\x21\x49\x0f\x37\xc6\x1c\xe8\x32\x71\x14\x82\x99\x83\xda\xc6\x36\xf4\xbf\x17\x82\xeb\xd3\xeb\xcf\x3f\x23\x34\x8f\x86\xb6\x71\x6f\x01\x47\x6f\x7b\xe6\xc2\x85\x47\xf6\x05\x59\xbd\x2f\xe0\xf0\x31\xd3\xaf\xd5\x68\xf1\xbf\x85\xd4\x12\x4a\xae\xb6\xaa\x6b\x3b\x9d\x3b\x20\xbf\x8b\xdb\xee\x2f\xce\x45\xcc\x6f\x1a\x6f\xa9\xef\x68\xe3"
		"\xfb\x5c\xe7\x9a\x37\xcb\xf4\x27\xa3\x88\x25\x0f\xf6\xf4\x91\xb5\xc2\xc6\x80\x9f\xf7\x9a\x91\xd1\x15\x6f\x93\x80\x20\x13\x11\x9a\xc9\x57\x87\x42\xa7\xbe\xc9\xee\x2e\x9d\xad\x9e\x7d\xc5\x7b\xa3\x88\x68\x5a\xa8\xec\xe2\x60\x3c\x4f\x18\x4c\xca\x29\x64\xde\x5e\xef\x44\x50\x08\x60\xb9\xba\x1a\x89\x64\x70\x1e\xc5\x46\xf3\xde\x1e\xfa\xbc\xb4\xad\x23\x8a\x78\x92\x9b\xe2\x60\x7e\xa9\xcd\xe2\xd3\xaf\x04\x78\xd3\xd3\xcd\xe3\x41\x86\x78\x16\x38\xf5\xe5\x6f\x56\x0f\x3b\x66\xc8\xd5\xb3\xd9\xa2\xb1\x29\x4a\x0b\x07\xc5\xe8"
		"\xb4\x8f\x17\x2c\xc5\x09\x0d\x7c\x95\x2f\x39\xaa\x0c\x99\xc7\x7f\xa2\x83\xa7\x80\x67\xa0\xac\xca\xdc\x8a\x69\xdc\x15\x33\xa2\x95\xa7\xd8\x9c\x94\x66\xbc\xd9\xc2\xfc\xb3\x6a\x78\x59\x04\x3c\x45\x56\xc7\xd3\x6f\xd5\x42\xdc\x61\x70\xfc\xe6\x9f\x0a\x39\xa7\xe0\x3b\xd2\x2f\x89\xbb\x66\x5e\xf0\xb7\xde\xfd\xd7\xbf\xd6\xb4\xc1\x2c\x07\x54\x97\x6d\x91\xe6\x0d\xff\x6c\x8b\x57\x78\x76\x92\xc7\x03\x19\x43\x80\xf5\x63\x68\x41\xdc\x0d\x79\x0b\x9b\x7d\x52\x03\xe0\xfc\x60\x52\xee\x46\xb3\x90\xb0\xde\x8d\x82\xcc\x26\xdf\xd6"
		"\x88\xe3\xc3\x9b\x40\xdc\x0c\x92\x68\x97\x9a\xba\xa0\x5f\x58\x4f\x73\xc6\xa0\x2e\x9b\xb8\x26\xf9\xcc\x74\x75\x46\xa0\x76\xa4\x38\x78\x2e\xb9\x20\x2a\x09\xd9\x22\x9e\x8a\x03\x3a\xa4\x7d\x60\x7e\x4f\x94\xb2\x7e\xab\x03\x06\x35\x5a\x8a\x4c\x76\x12\xc1\x1f\x6c\xe7\x45\x40\xdd\xec\xd2\x49\xf6\xc5\xc1\xa8\x9c\x99\x47\xbc\xf5\x9d\xdb\x91\x57\xf1\xc2\xcd\xdd\x8d\x09\x43\xee\x78\x15\x8e\x08\x0f\x84\x22\xcb\xe8\xf2\x77\x9c\x92\x1f\x47\x41\x2c\x09\x18\x13\x9d\xa5\xaf\x7b\xbc\x24\xaa\x02\x69\xe2\x27\x0b\xee\x17\xb9\x4a"
		"\xaa\x07\x00\x3c\x10\xbd\x81\x74\xa9\x9d\x18\xee\x40\x81\x1e\xd6\xc0\xe1\xff\xb5\xc7\xec\xe5\x1e\x5d\x33\x01\x5c\x7a\xf1\x9e\x83\x90\xd7\xfe\xf5\x7f\xa2\x3b\xfe\xde\x45\xa8\x3f\xe7\xb4\x11\x97\xed\x1a\xb7\x02\x34\xa3\x87\x09\x19\x0e\x0e\x98\xb1\x75\x7f\xd9\xcc\xcf\x2a\xb0\xb2\xce\xd3\x73\xc8\x53\x0c\x19\x06\x83\xaf\x24\x39\xdd\x8b\x9d\x65\x62\x9e\x72\x65\x3b\xe0\x27\xe0\xf9\x0d\x0a\x0c\x33\x30\x47\x1a\x88\xc1\x04\x4f\xa2\xa3\x96\x31\xc5\x2c\x6e\x46\x34\x23\x34\xc3\x5d\x79\xe5\x46\xaa\xec\xfc\xf1\x81\x7f\x1f"
		"\x6b\x58\xa2\xf9\x4d\x3a\x5c\x58\x79\x6c\xf5\x97\xf8\x83\xce\x4d\x10\xc7\xc8\x4d\x19\x89\x61\xa0\x2c\x6e\xfc\xe1\xef\xd1\x28\x43\x22\xbe\x26\x5e\xb0\x19\x19\x2c\xf7\x57\x05\x9a\x96\xb9\xe7\x6e\x42\xd3\x8a\x27\xb9\x76\xc8\x76\x9f\x87\x1e\xfa\xa8\xe1\x48\x20\x05\xe4\xe8\x6f\x12\x5c\xbf\x32\x88\xe3\xe0\x4f\xff\x7d\x3b\x0a\x8b\x12\x28\xee\xc5\xaa\x2b\x9f\x1b\xd0\xa1\x6a\xd8\xc3\x57\x3a\x76\xf6\x06\xd2\xc6\x11\xe4\x6b\xa3\x59\x44\xa5\x3c\x83\x15\xe1\x7c\x90\xdc\xbe\x57\x0c\x47\x1a\x97\x3d\xe8\x8f\xe6\xfc\x67\x41"
		"\xed\xfc\xfd\xc7\x9a\x1c\xd7\x75\xcc\x60\x65\x54\x84\xc2\xd1\x27\xd0\xd4\x88\x28\x24\x96\xe9\xb0\x8e\x43\x58\x01\xc3\x4c\xb2\xdf\xd4\xa6\xe9\x41\x1d\xf5\x99\x05\x7d\xe4\x84\x2e\x67\x3d\x9a\xfd\xad\xf2\x99\x50\x1d\x0e\x6e\xc3\x77\x51\xaa\xce\x98\xf7\x02\x74\xdf\x98\x4e\x63\xc9\xf0\xf5\xbe\x17\x06\x97\x59\x4d\x42\x53\x82\x80\xeb\xdf\xda\xe8\x79\x9f\x93\xb4\x9d\x6d\xe0\x41\xdd\xe2\xb6\x64\x83\x46\x7e\xc9\xeb\x0b\xb7\x69\x73\xcd\xec\xee\x95\xef\x14\x6a\x95\x4f\x6d\x2c\x61\x7b\x1b\xc9\x95\xaf\x18\x79\x73\xec\x5e"
		"\x6d\x59\xa4\xe3\x79\x67\xab\xc5\xb7\x31\x90\xf7\xa9\x27\x62\x89\x6f\x02\xdf\x4e\xb6\xc6\x20\x6f\x55\x37\xe0\x49\x29\xd2\xde\x75\xc0\x4b\xe3\xcd\x2c\x9d\x5d\x7e\x7a\xbf\xa2\x9a\x3e\x10\x51\xb9\x9d\x3d\x91\xb0\xd0\x39\x7e\x71\x12\x78\x86\x7c\xcb\x4f\x3f\x86\xff\x25\x64\x88\x38\x59\x6c\x0c\x0d\xb9\x0d\xfb\x21\x9c\x14\x9d\xf9\xb8\x03\x51\x5d\x1c\xdd\x17\xa2\x1d\x74\xd8\x92\x67\x76\x96\x22\xd2\x27\x20\x42\x23\xaf\x1c\x0e\x78\x8c\xcb\x9f\x50\x41\x80\x5a\x36\x69\xfa\x7a\x5f\xc0\xe1\xfd\xda\x05\xe6\xc2\x7c\x5f\x67"
		"\x3b\x36\x01\xcf\xba\x63\x54\xd5\xcd\x81\x45\x96\xa7\x83\x86\x24\xd8\x0a\x20\x10\xe4\x59\xb0\x07\xac\xc8\x2b\x97\xfc\xd4\xd2\x21\xaf\xdd\xca\x43\xca\x6d\xcc\x07\x63\x88\x40\x12\x83\x99\xd8\x4a\xd1\x61\x90\x9c\xa9\x5b\x26\x47\xd5\x1b\xdc\x43\xb4\xa8\x52\x18\xc1\x4e\x5c\x9a\x2e\xd2\x3f\x37\x05\x82\xdd\x7f\xfa\xed\xaf\x77\x90\x78\xab\x48\xa6\x12\x23\xa3\xb4\x55\x14\x4e\xa0\x00\xfa\x4f\x14\xe4\xca\x97\x7b\xdc\x1c\x98\x03\x0a\xf6\x63\x68\x77\x92\xc8\xae\xf5\x3b\xab\x36\xe7\x13\x46\xc8\xbd\xac\xc1\xc2\x33\xe8\x2f"
		"\x76\x97\xd1\x1c\xcb\x57\x41\x34\x78\xc4\x10\x58\x4c\x27\x11\x35\x67\xfe\x1d\xb7\xa2\x47\x0c\xb5\xdb\x8e\x45\xd8\x85\x16\x56\xf0\xf8\x19\x10\xcc\x4e\xa7\xce\x89\x6b\x17\x10\x4d\xfa\x5a\xd0\x33\x64\x33\x70\xea\x54\x67\x1b\xf9\xea\x6e\x4f\xd8\x68\xc3\x81\xe9\xb9\x6d\xae\x15\x92\xbe\x0d\xf6\xfc\xd3\xe5\x9b\x14\x52\xd7\xd0\x92\xfd\x4b\x72\xcc\x66\x6b\x6d\xa2\x7b\xf2\x94\x56\x73\x32\xb0\xcf\x5c\x78\x1f\xc5\x24\x39\xff\x85\x1d\xa2\x56\xdb\x1c\xf8\x16\x8b\xfc\x75\x2b\x1f\x4f\xf7\xee\x9c\xdd\x04\x82\xe9\xa3\x79\x2b"
		"\xeb\xf3\x47\x8a\xe6\x37\xb6\x47\x22\xb3\x29\x5b\x4a\x2d\x34\x4f\x54\xef\xa8\xa6\xfd\xb6\x1d\xbc\xfe\x53\x03\x92\xae\x7d\x1f\x2a\x78\xb7\xaf\x51\x2e\xe4\x32\x1b\x70\xa5\x02\x06\x6f\x10\x0c\x01\x6c\xd2\x01\x80\x0e\xa3\x9d\xdc\xc1\x07\x31\x9b\x7c\xb7\x6a\xc2\xf1\xca\xe4\x6f\x31\x80\x15\x24\xf0\x93\x86\x2d\x24\x38\xc8\x7d\x8b\xde\x74\xe2\x80\xb2\x49\xd1\x79\xcb\xef\x81\xe2\x3b\xe0\x60\xc0\x35\x45\x79\x9a\xb5\x89\x02\xbd\x94\x4c\xdc\xd0\x9e\xb4\x57\xa9\x4a\xd7\x5d\x76\x27\xb5\xb4\xeb\x53\xaa\x0e\x41\x4e\x46\x89"
		"\x68\xb0\xc8\xcc\x76\xe7\x01\x6d\x44\x21\xa1\xfe\x51\x75\x22\xbc\xba\x7b\x44\xb5\xb2\x05\xab\x63\xf0\xcb\x19\x3b\xeb\x7c\xca\xe7\x36\x0c\xaf\x51\x04\xeb\xfe\x8b\x5d\xb7\x79\xfe\x27\x36\x78\x82\x34\x25\xe5\x08\x13\x7f\x67\x97\x80\x04\x5e\xeb\xbd\xa8\x1f\x38\x5f\x6e\xaf\x6f\x91\x21\xf8\x59\xad\x9b\x33\xa0\x0d\x11\x9b\xd0\x91\xce\x00\xdb\x97\xaa\xf8\xa8\x29\x8d\x85\x69\x08\xd5\x23\x03\xe3\xdc\x42\x62\x97\xd9\xb9\x3d\xb6\x47\xbe\x65\x2a\x9d\x07\x3c\x64\x8d\x80\x67\x8b\xb2\x03\x99\xf4\x06\x80\x93\xc8\x55\x0f\x3d"
		"\x0f\x24\xcb\x3d\x1d\x6d\x92\x2f\xb8\x79\xb2\x0e\x9a\x8d\xde\xd0\x37\x9c\x44\x93\xd5\x32\xe9\xb9\x9f\xe2\x13\x03\xfa\x12\xf8\x6f\x1c\xe7\x5e\x1d\x78\x1c\xb7\x53\xf4\x4d\xe4\x66\xf6\x94\xeb\x1e\x54\xcc\x82\xbd\x0a\xd8\x6d\x63\x67\x9f\xe1\xfb\x08\x6f\x61\xe2\x7f\xe9\x0e\x65\x72\x0f\xf1\x70\x1c\xc2\x78\x21\xf9\x2a\xf5\x5e\x5e\x94\x1f\x6a\x23\x34\xa8\xd1\xa7\x28\x01\x12\x03\xba\x30\xb6\x0a\x2b\x93\x9f\xee\x87\x76\x2c\x99\x0b\xd6\x1a\x16\xa4\xca\xa0\x81\x83\x46\xa1\x65\x37\x44\x1e\xb5\xe5\xe7\xbf\x79\xf4\x2f\xf7"
		"\xb8\xf0\x98\xe7\x74\x27\x23\x83\x24\x1a\x94\x71\x30\xe6\x40\xb9\xc1\x1e\x79\xa8\xba\x87\xa2\x63\x5c\xf8\x14\x70\x7e\xa7\x92\x4a\x7a\xf5\x23\x83\xa5\x0e\xa7\x91\x73\xf5\x5a\xab\x76\xa0\xe6\xa9\x12\x96\x0b\x4b\x20\x03\x7d\xcb\xb7\x78\xe6\xaf\x86\x95\xfe\x74\xe3\x0b\xb4\x2f\x04\x42\xab\xd1\x54\xa1\x6b\xe8\x98\xa4\xda\x27\x82\x08\xb6\xf9\x79\x2b\xc7\xc1\x1b\x36\x34\xb9\xa4\x80\x19\x4f\xbf\xfe\xbe\x11\x38\x7b\xa4\x42\xde\xc1\x53\xa6\x8e\xe6\xd9\xa6\x94\xf4\x27\x89\x07\xc8\xa4\xf6\xc2\x64\x03\x42\x33\x7c\x63\xd0"
		"\x56\x55\x0a\xc2\x51\x76\x0f\x86\x95\x58\x7d\x3b\xdc\x6e\xbc\xff\xb4\x20\x5c\x87\xae\x31\x4e\x9e\xaa\x1e\x00\x70\x92\x03\xab\x34\x9b\xcd\x7b\x8d\xe8\x86\x6b\x35\xed\xcb\xfb\x98\xb5\xa8\xc0\x6a\xcb\x9d\x2a\x79\xf6\x67\x40\x1d\x1c\xcf\xe3\x72\xe6\x94\xc1\xfb\x35\xe1\xbd\xfb\xfe\x33\x11\x46\x62\x00\x92\x7e\x59\x1d\x72\x77\x36\xce\x10\x55\x26\x5f\xa3\xce\x68\x9f\x9f\xb9\x50\xad\xf1\xa8\xc8\x80\x0b\xf3\x99\xe2\xc9\x14\xf4\x85\xc1\xb9\x19\x4e\xfd\x23\xfd\x9f\xfc\xda\x9d\xf1\xbf\xfe\x14\xed\xa3\xfe\x6e\x9a\xa0\x85"
		"\x93\x59\x54\xc7\x72\x79\xeb\x30\x83\x54\x92\xa7\x50\xbb\xb3\xcd\x48\x26\x38\x07\x4f\xae\xac\x95\x4c\x24\x66\xa5\xc9\x1a\x95\x45\xc3\xaa\x83\x13\x03\xa6\x78\x43\xa0\x0c\x7f\x00\x47\x33\xcf\x71\x0d\x58\xdf\x38\x35\xeb\x78\x63\xe0\x7e\x75\x22\x1b\x5c\x3f\x7e\xfa\xd3\xe1\x8f\x38\x27\x78\xb2\xed\x02\x66\x6a\x67\xd9\xcf\xa0\xae\xbb\x3d\x64\xee\x7e\x94\x4d\x3a\x85\xfe\x0e\x46\x66\x3a\x56\xb3\x42\x00\xb9\x8b\x55\x24\xaf\x7e\x20\x67\xa8\xb6\x88\x00\x51\xa9\x6e\x9d\x92\xa5\xf8\xa1\x00\xce\x0e\x2a\xaf\x04\x7c\x5d\x29"
		"\xcf\x67\xdc\xa6\xf7\x2f\x25\x80\x2c\xca\xc3\x5c\x9f\x13\x53\xd1\x61\x99\x90\xf1\x66\x4c\x28\xee\xc7\xae\x97\x79\x6d\x98\x2f\x53\xd1\xab\xa2\xc9\x58\x32\x94\x12\xe4\xb0\xac\x5c\x9f\xe3\x37\xd1\x97\xd0\xb5\x80\xb3\xf1\x3f\x34\x41\xcf\xae\x68\x3b\xd7\x99\x14\x6e\x85\x98\xe5\xec\x37\x4b\x7d\x54\x3b\x93\xc9\x9b\x99\x7a\x7c\xc3\x47\x50\xc5\x65\x2f\x1c\x1c\x09\xe3\x22\x74\x37\xbc\x69\xb4\x73\xc6\x2c\xb0\xce\x8c\xb1\x0d\x98\x1f\x37\x05\xc3\xfb\x9b\xcf\x81\x99\x6a\x47\x73\xa3\xed\x45\x25\xa8\x0c\xac\x10\x00\x4a\xb7"
		"\x88\xeb\x2c\xad\xbc\x9a\x49\xa0\x6b\xee\x56\x99\xb1\x9d\x3d\x97\x9b\xed\xaa\x3f\xaa\xf3\x85\x6b\xfa\xd5\x44\xa5\x78\x0a\xf7\x89\x92\xaf\x1b\x9f\x2a\xf3\xbb\x98\xd5\xde\xe8\x70\xeb\x5d\xd6\xaa\x4d\xdb\x93\x9c\xd3\xb6\x76\x0f\x76\x18\xd5\xe9\x8a\x54\x1f\xd1\x11\x43\x48\x17\x15\xe9\xa4\x05\x1f\xcd\x60\x35\xf2\xfc\x79\x80\xf0\x9a\x98\xe2\xcf\x23\x07\x5a\x03\x97\x42\xf9\x37\x06\x15\xe8\xf6\xe5\xdc\x37\xf5\x4a\x33\xc4\x99\xbc\x35\x07\xdb\x4d\xf9\xdc\xfc\x5e\x19\x66\xa0\x4b\xd7\xcb\xac\xdd\x5c\x42\xec\x41\xe9\x93"
		"\x70\x83\x27\x1a\x77\x04\x91\x01\xef\x7c\xe2\x03\xe4\x68\xa9\x07\xc5\x95\x9e\x25\x36\x89\x68\x52\x11\xa6\x02\x2f\x2c\x30\x52\x62\x45\x80\xb6\x32\x6f\xae\xab\x91\x48\xf1\x91\xdb\xc3\x4d\x2f\x8e\x0d\x32\xb3\x31\x84\x73\x7e\x73\x5e\x45\xf9\x14\xaf\x92\x2f\x98\x10\xd5\x81\x79\xbb\x82\x60\x54\xa8\x2b\x3f\xba\xb6\xc8\x9c\xaa\xa4\x1d\x17\x1f\xe3\xc6\x98\x8c\xa5\x37\x8e\xda\x4a\xa9\x0e\x2e\x43\xb1\x26\x77\x64\x15\xed\x08\x5c\x3c\x8e\xcc\xf7\x2f\xa1\x0e\x30\x7b\x0c\xb9\xc9\x06\x7c\x8b\x2f\xa5\x74\x91\xee\xfb\xf8\x4a"
		"\x70\x7a\x37\x62\xb8\x43\x32\x5f\x2a\xfe\x29\xd4\x91\xef\x68\xea\x7d\x42\x57\x55\x79\xb7\x15\xdf\x6c\xc2\xf1\x7e\xac\xc2\x80\x2c\xa8\x67\xd2\x6f\x5c\xee\x2c\x2f\x8f\xa5\x63\x3d\xc6\x42\x30\x5b\xe4\x0c\x73\x61\x57\x1b\x35\xf1\x53\xb9\xf7\x8f\x03\x13\xb0\x1a\x19\x16\x36\xd7\xe6\x4c\xeb\xb3\x62\x3d\x95\xbc\xec\xf3\x64\xa7\x7e\x3d\x39\x7b\x5c\x80\x37\x93\x6c\x42\x85\xc6\xb3\x2a\x9d\x29\x59\xf2\x86\x70\x8c\x51\xed\x2f\x0b\xdc\x26\x8a\x73\xab\xbc\xbf\x6c\xd2\x98\x7a\xcd\xab\xd6\x95\xd4\x54\x20\x11\x13\x6f\xd3\xe1"
		"\x25\x3f\xe2\x7f\x34\x67\x15\xf0\x92\x5e\x96\x7b\xef\x02\x14\x87\x2a\x63\xfc\xba\x4f\x2e\x61\x3e\xad\x6a\xe9\xb8\x94\xb4\x97\xc7\x18\x09\x4f\x45\xf9\x5a\x96\x26\xa0\x4a\xfe\x9a\x08\xf0\x47\x7a\x25\xdb\x0b\x58\x54\xd3\x24\xaf\xc8\x12\x9a\x53\x3d\x05\x7f\x60\x7d\x7e\xed\x15\x2c\xb3\xa0\x0a\x05\x24\x15\x90\x83\xff\xb6\x31\x90\xd6\x19\x85\xa2\xe1\x31\x3d\x68\x52\x99\x02\xd3\xc2\x9a\x78\x1f\x2b\x7e\xed\xe0\x64\x1a\x10\xbf\x9f\x31\x5a\x40\x13\x24\xfa\x8a\x92\x72\x48\x7a\x8d\x32\xc4\x52\x34\x14\x35\x65\xc9\x43\x43"
		"\xc1\xc3\xd5\x03\x59\x6d\x85\xf9\xe6\x61\x02\x1f\xd2\x9c\x3b\x40\xa5\x92\x33\x6c\x08\x23\x57\xfa\x70\x82\x21\x0a\x51\x2d\x1c\x9b\x9d\x8e\xf9\x52\x41\x08\xae\xf2\x06\x74\xf3\xf1\x61\x3e\xed\x0a\x5e\x89\xe4\x0e\xa4\x4c\x08\x09\x9f\xb8\x6b\x21\x64\xde\x87\x46\x50\x9c\x62\x85\x6f\x04\x26\xb0\x98\x74\x20\x19\x10\x86\xf4\x8b\x23\xe9\x25\x5d\x58\x88\xa3\x33\x6d\x80\x95\xd8\x3d\x19\x1d\x72\x9f\x3f\x71\xa4\xa6\xf3\xbe\xd5\xa5\xa0\x7b\x2f\xdf\xb9\x65\x76\x9e\x1c\x7f\x24\xdb\x57\x7f\x90\x1b\xab\xdf\x97\x83\xdf\x6b\xc1"
		"\x86\x6f\x5b\xb8\xba\x9d\x9d\x01\xd7\xd1\xbc\x0e\x15\x78\x8a\xb6\xde\xd2\xa8\xbe\x03\xa8\x63\x3f\xb6\xea\xfd\xb5\x2b\x9f\xf8\x8c\x76\x32\x3f\xc0\x13\x6f\xcd\x4a\xd2\x37\x91\x92\x03\x8d\x88\x92\x3d\xf6\x7d\x62\x7b\xb4\x52\x65\xca\x9d\x80\xc0\x52\x34\x0e\x55\x51\x19\x49\xff\x4e\x21\xe6\x05\xb6\xb0\x4c\xf6\x89\x9e\x8b\x31\x36\x29\x22\x3e\xc9\xda\xc8\xb7\x18\x59\x26\x2c\xc7\xc7\x33\x09\x7e\x62\x7c\x9c\x68\xa3\x8f\x13\x80\x45\x33\x1a\xa2\x12\x97\x0b\xad\x38\x7b\x8c\x01\xd8\x45\x63\x37\xa8\x5e\x9f\xae\x1c\x3d\x83"
		"\x8b\x92\xbe\x08\x1c\xc2\x15\x34\x0f\xd5\xde\x24\x0f\x80\x18\xeb\xba\x0a\x98\xe6\xcb\x57\xf3\x7e\x58\x22\xdd\xa9\x94\x4b\x25\x7c\x3d\x0e\x7e\x05\x07\x40\x3c\x4e\x21\xca\x94\x35\x1b\xfe\x35\x2d\xa9\x2c\xc7\x37\xf9\xdb\xae\xef\x78\xdf\xfd\x89\x63\x2e\x7a\x1e\x5c\x1d\xba\xdb\x93\xc4\x4b\xd5\x7f\x45\x4b\x7c\x85\x67\x93\x36\x7d\xba\x21\xcc\x6c\x22\x66\x18\xf0\x8a\x6d\xad\x3d\x48\x5e\xb4\xb9\x7b\x0a\xce\xc9\xe5\x80\xef\xfb\xe3\x45\x10\xdb\xd3\xcb\x27\xe4\xd6\x22\xe2\xbf\x38\x20\x53\x1f\xec\x59\x5c\xf6\x50\x60\xca"
		"\x28\x9c\x88\x7d\x82\x3c\x88\x9d\xad\x59\x90\x8b\x1a\xf4\xf5\xc7\xd5\x7d\xd4\x89\x80\xb1\x9d\x6c\x46\x17\x9c\x2b\x1e\xdf\xb4\x42\xd8\x79\x4e\xf5\x3e\x22\x21\x2b\x5c\x29\x45\x93\xbe\x01\x8d\xc9\x46\x69\x80\x71\xa7\x23\xd5\x0a\xe1\xbf\x0b\x8c\x97\x1e\x6a\x37\xef\xa0\x1e\x2a\xff\xb0\x96\xc0\xd4\x25\x7c\xdd\xdc\x18\x35\x98\x4a\x1d\x75\xb4\x5e\x6f\x9a\x46\x8f\x4e\xe9\x9d\x61\x31\xd0\x4a\x6b\x0d\x11\xee\x35\x60\x53\xc8\xb8\xef\xac\x59\xb2\x39\xbe\x4c\xee\xb5\x82\x4a\x1f\xcb\x1d\xad\x00\x35\x4b\xae\x4d\x4a\x95\x39"
		"\xac\x8c\x2b\xd5\x8b\x28\xa9\xf4\x4a\xf2\x4b\xc7\xb5\x5d\xbd\x9d\x39\xff\xa4\xc8\x35\x5d\x79\xdc\x83\x6a\xf1\x4f\x60\x44\xcf\xd2\x3a\x15\x56\x8a\x67\x54\xb2\x88\x35\x9e\x5e\x40\x88\xf9\x65\x4d\xa1\x11\x54\x48\x90\xa2\x56\xad\xba\x79\x32\x50\x41\x5f\x18\xd9\xeb\xa4\x3c\x48\x8a\xd7\x26\xb6\x8e\x33\x72\x80\xac\xce\xae\xbf\x8d\x8b\x0b\x08\x23\x69\x98\x64\xb6\xe8\x58\xcc\x1c\x5d\xb8\x1a\x87\x39\x36\x25\x7c\xee\x08\x30\x8d\x75\x0e\xeb\x8b\x03\x5a\xc2\xa2\x72\x2b\x6f\xd4\x59\x8b\x4f\x6a\x76\x5a\xd9\x6e\x4b\xad\x52"
		"\x69\xc0\xc1\xea\x94\x0e\x9c\xd1\x02\x80\xd3\xea\x54\x08\xe2\xf6\x1c\x5c\x36\xd8\x80\x0b\xdf\x5d\x2f\x7b\x0c\xc0\xcd\x21\xd7\x53\xa6\x5d\xb6\xb1\xed\xd2\xd3\xae\x07\xb6\x64\x86\x12\xe6\x20\x93\x4b\xee\x91\xc5\xd3\xf9\x35\xd9\xf7\x6f\x23\xd0\x80\xba\x52\x63\xe6\x6b\x90\x25\x02\xc7\xaa\xab\x22\x36\xb6\x1a\x95\x0e\x04\x76\xaa\x23\xe0\x87\xf2\xb5\x0f\x3a\x15\x44\xea\xd3\x03\x9c\x8b\x68\x64\x15\xdb\x89\x77\xa9\x10\xd5\xc7\x16\x3b\xeb\xee\x0e\x96\x7e\x3b\xf2\x46\x5a\xf5\x9d\x7c\x50\x61\xf1\x33\x61\x9d\x58\x19\x40"
		"\xb7\x55\xf3\x5a\x68\x2a\x62\x89\x8c\x05\x1d\xf3\x1e\xf1\xd2\x78\x7a\x13\x39\x27\x2c\xfb\x4f\x52\x2c\x85\xb6\xa7\xa9\x42\x0a\x55\x2d\xba\x70\x20\x96\x27\xc8\xb5\x83\x1d\xdc\x33\xec\xc3\x4e\xc5\x40\x8e\x56\x67\xb2\x8c\xfa\xb0\x94\x9f\xb7\xeb\xbe\x39\xbc\x55\x8c\x2d\x2e\x14\x45\xfd\x89\x6e\x52\x90\x48\xb4\xd2\xbc\x31\x04\x14\x13\x7b\x62\x7b\x4e\x4f\x65\xd7\x98\x5e\xee\x3b\x17\xeb\xf2\x3e\xf8\x00\x48\x3b\x96\xe1\x93\x6b\xf7\xd2\xfe\xce\x3d\xcf\xff\x9f\xcb\x5b\x97\x72\x17\xd3\xb7\xe1\xe2\xe1\xde\x71\x76\x18\xe7"
		"\x5b\xe1\x5a\x82\x9e\x39\x56\x62\xdc\x20\x13\x62\xde\x41\x37\xca\xed\xd4\xe1\x00\xe7\x98\xf7\x94\x16\xcf\x25\x9f\x7f\x03\x2e\xe0\x67\x74\x69\x66\x20\x04\xce\x1b\x82\x7e\x42\xba\xdc\x8c\x4e\x7b\x6d\x8c\xb3\x06\x8f\x36\x81\xf1\x27\x19\x54\x0b\xbb\xc2\xcf\xec\x23\x6a\x8b\x5a\xe7\x38\xa8\x24\xf7\x90\x03\xf2\xa6\xb8\x25\xae\xbf\x62\xca\x86\x11\xd0\x79\x93\xa8\x6f\x64\xc9\x8b\xb6\xc0\xdd\xf4\x15\xf3\x1a\x43\x1d\x05\x19\x82\x2b\xfa\xe2\x24\x4b\xf1\x76\x71\x54\xea\xe8\x24\x71\x14\x6b\xa1\x0d\xfa\x46\xf9\x57\xac\xe1"
		"\x8b\xe6\x3a\xec\x87\xa3\x82\x87\xf1\x24\x78\xe4\xc4\x85\x5e\x4a\x41\xb1\x88\x1c\x29\x28\x50\x31\x0a\xe7\x92\x39\xe0\xda\xc4\xf4\xf0\x59\x62\xe6\x11\x22\x38\x74\xae\x7c\xfb\x50\xeb\x3d\xc6\xb7\x10\xbc\x46\x65\x66\x6c\xdf\x4b\x2a\xd2\x9d\x52\xda\x6f\x12\xfd\xa7\xb1\x92\xd0\xc7\x89\x4e\x8f\x19\x70\x9e\x0f\x74\x4b\xd8\x68\xe9\xb0\x8d\x15\xe2\x55\xb8\x61\xbd\xd9\x20\x88\x17\x14\xd9\xdc\x64\x87\x31\xab\xd2\x8f\x02\xae\x99\x30\xc1\xe0\x5b\x71\x0c\xbb\x47\xd1\x36\xaa\xf5\x8a\x78\x69\xed\xf2\x08\x2a\x9a\x4b\x92\x50"
		"\x96\xf2\xce\x1b\xb9\x51\x04\x37\x33\xac\xfe\x79\xfb\x6b\x6a\x0a\xe1\x92\xe7\xab\xfe\x9b\x3c\x14\x82\x22\xef\x7c\x79\xf8\xfa\x12\x62\x0d\xfe\xdd\x55\xd8\xe5\xd9\x30\x3f\x98\x46\x43\x8a\x67\x28\xb1\xbf\xf3\x4a\xa5\xf4\x7c\x57\x7a\x75\x4a\x10\x4d\xc0\x8c\x80\x3f\xe0\x6e\x26\x53\x4f\x0d\x0e\x51\x8a\xd9\xda\x16\x9f\xff\x56\xf4\xdd\xdc\x6e\x94\xb9\xe6\x66\xe4\x10\xae\xf1\xf5\x3a\x06\x2f\x40\x72\x0c\xe3\x89\xf4\x49\x1b\x88\x03\x5c\x5b\x08\x84\xdc\x3a\xee\x60\x5c\x4c\x8e\x94\xd8\x86\x6f\xbb\x26\x4a\xdd\x1e\x8a\x75"
		"\x6a\xf0\x70\x8a\x5f\x6c\xa7\xfc\xb5\x20\xfd\x06\x9a\x67\x2b\xa5\x80\x1d\xf4\x0c\x2f\x07\x57\x34\xa4\x43\xc5\x0f\x34\x7e\xaa\xfd\x5a\x63\x33\x03\x1e\x1b\x12\xf2\xba\x03\x6d\x98\xda\x68\xed\xee\x95\x6a\x71\xa9\x5c\x1f\xc8\x4f\xc5\xee\xe3\xcf\xa8\x75\xb5\x97\x22\x85\x4b\x23\xc6\xf7\x67\x55\xbd\xcd\x1d\x80\xc9\x43\xc9\x9e\x25\xeb\x3d\xcf\x63\xca\xbb\xc6\xa2\xbe\x82\x0b\x4b\x07\xda\xb5\xa6\x99\x50\x70\x91\x25\xe2\xcb\x99\x1a\x44\xcf\x61\xe1\x30\x0e\x54\x85\xe9\x00\x14\x6a\x4e\xfc\x6f\x98\x01\x3a\xba\xf7\x5a\x38"
		"\x56\xab\xb1\x6f\x82\x60\x5c\x15\x48\xcd\x08\x0d\x31\xbd\x6b\x56\x6f\xa6\x0f\x23\x1f\x68\x88\x49\xed\x82\x65\x1a\x75\xd2\x2d\x18\x7a\xfb\xbb\xda\x84\xbb\x31\xf0\xa6\xff\x16\x27\xef\xca\x36\x30\xd3\xff\x6a\x32\x6b\x5e\x06\x7a\x3b\xa9\xda\x16\x73\xef\x2f\xf0\xda\x48\xe2\xaf\x62\x02\x4a\x8b\x64\x37\x81\x1e\x18\xe9\x28\x32\x23\xac\xb2\x1d\xf2\x4a\x97\x75\xd0\x4c\x92\x4a\xd8\x04\x82\x96\x36\x61\x8a\x71\x4d\x7f\x96\xa3\x46\xc6\x9e\x81\xdd\x35\x0f\x85\x1c\x11\x35\xd1\xc9\xa5\xb7\x6d\xcc\xc4\x42\x10\xa4\x3c\x0b\xa2"
		"\xff\x80\x71\x1d\x51\x4b\x6f\xef\xc0\x92\xc3\x14\xc7\x72\xf7\x0e\x1c\x30\xa6\xfe\x69\xc6\x4c\x38\x3a\xd0\xe4\x3f\xdd\xd5\x1d\x36\x91\xd3\xda\xe2\x6b\xf1\x2b\x48\x0f\x80\x5a\x34\x25\xfd\x15\xf3\xab\x64\x94\xbb\x2f\xcd\xe6\xa0\x5f\x64\xdf\x81\x1f\x4b\xba\x99\xa9\xbe\x80\x7a\xee\x99\xfa\xae\x37\xa5\x38\x45\x60\xec\x9a\x84\x77\xbf\xb7\x1e\x5c\xc1\x2e\x41\xbe\xe7\x7f\x20\x45\x3d\x06\xb3\x37\x57\xcc\xa9\x68\xa8\xf6\x6a\x68\x9a\xdf\x6b\xd1\xaa\x93\xe7\xa6\x1e\x18\xff\xe9\xab\x9d\xc9\x53\xd0\x53\xa1\x59\x7a\xcc\x89"
		"\x5e\xa1\x62\x1b\xc5\xb1\xf1\x69\x11\x39\xaa\x78\x5d\xc7\x0b\xf7\xdf\x75\xfb\xfa\xa2\x6c\x42\x25\xfa\xfe\x47\x04\xbe\x27\x7c\xb0\x9e\x9d\x6b\xf1\x1b\xd2\xf4\x10\x4a\x0a\x80\xf9\x5b\xf5\xfb\xb8\x5b\x3e\xfa\x32\xe2\xfd\x34\x0a\x51\x85\x65\x8e\x57\x2f\x6f\x31\xaf\xf7\xca\x0f\xf8\xb4\xa1\xac\x43\xfc\xf3\xe1\x0b\xc3\x23\x0f\xc8\xb8\x02\x19\x14\x39\xaf\x31\xc4\xa4\xea\xe6\x29\x40\xb2\x9a\xd6\xe5\x44\x89\x26\x39\xe4\x36\x90\x9e\x10\xd1\xaf\x7c\xb7\xcb\x06\x55\x3d\x6c\x90\xc3\xbd\xe3\xa0\x57\x22\xea\xd5\x13\x87\x1a"
		"\x9a\x09\x0f\xa1\x72\x27\x9c\x6f\xa2\x1b\xde\x06\xae\x72\x8f\xa5\x31\x1d\x17\x1f\x23\xfa\x46\x9f\xa8\x2d\xcf\x2d\x6d\x3a\x39\x0d\xb5\xdf\xd3\x76\xe0\x57\xe8\x5a\x40\x3b\xc7\xd4\xfe\x32\x7c\x2d\xb4\x10\x1a\x66\x11\xe9\xb1\x0f\xc5\x74\x46\xe8\xcb\xf2\x8d\xd5\x76\x48\x47\xc1\x9c\x35\x81\xe2\x0c\xf0\xa9\xf9\xb4\x82\x80\xa5\x21\x0f\x49\xc7\xb5\xf7\xb9\x9d\x44\xf5\xce\x96\x53\xb1\x29\x8e\x48\x30\x79\xcc\x35\x04\x3a\x6b\xc3\xaa\xc4\x3e\x40\x4a\x27\x8d\x5f\x3d\x66\x38\x80\xff\x7a\xb9\x12\xe4\x9a\xb1\x86\x48\xe1\x2b"
		"\x56\xbf\xdc\x93\xe0\x33\xa0\x90\x29\x62\x49\x57\x85\x80\x7a\x00\x86\x3c\x5e\x65\x5d\x0c\x7f\x25\x82\x1e\xed\xf3\xc6\xcb\x2b\x77\x74\xd8\x5e\xfa\xfb\xfb\x4d\xec\xee\x81\x07\xca\x29\x41\xd7\xe6\x2b\x5e\x9e\x69\x27\xa7\x21\xa9\x3f\xc7\x14\x01\x3a\xe8\xd4\xe9\x7c\x34\xb3\xaf\x1e\xaf\xe9\xc6\x56\xf7\xbe\xc0\xf0\xd7\x33\xc1\x4e\x55\x31\xa9\x6c\x57\x86\x81\x0c\xb6\x33\xb3\xed\x95\xcc\x53\x37\x53\x44\xfa\xa3\xa7\xb0\x1f\x0c\x0e\xe6\xd2\xea\xdb\x4a\x1c\xe1\x4e\x74\x78\xac\xb2\xa8\xc3\x84\x1c\x2e\x6f\x0f\xa4\xa8\xf8"
		"\x08\xde\x45\x3c\x79\x16\x5c\x58\x5d\x48\xc6\x16\x4a\xb6\x88\xe8\x21\x4b\x4c\x0d\x07\xe3\x4e\xf1\x5e\xbf\x3f\xfa\x70\x9d\x5a\x40\x15\x8a\x62\xa2\xad\xb4\x67\x2a\x2d\x6b\x25\x43\x45\x5a\x60\x5c\x25\x10\x67\x52\x66\xc7\xac\x44\xde\x3d\xea\x2b\xb5\xfa\x81\x6d\x95\x61\x70\x91\x80\x0c\x93\xde\x42\x88\x2d\xad\xf3\x8f\x8a\x58\x61\x07\x3e\x9c\x2f\xcf\x99\x76\x23\xc0\xeb\xa3\x6c\xdb\x8b\x6d\x38\xeb\xfb\xa3\xac\xa7\x63\x84\xa9\x42\x11\x9c\x84\x19\x83\x70\xe3\x85\xcf\x09\x56\x9e\x6a\xce\x82\x06\xe3\xf5\x5f\xee\xb7\xd0"
		"\x5b\xf0\x1a\x56\x31\xdc\xee\xf3\x5a\x53\x2f\x87\xac\x75\x6f\xe1\x89\x1c\x13\x0d\x99\x30\x00\xda\xee\x7e\xdb\xf1\x88\xb5\xb9\xf1\xd6\xce\xe6\x63\x5e\xd2\x4a\x8e\xf1\xe6\x21\x4a\x4f\x8f\x3b\x6a\x35\xa8\x2a\x81\x13\x12\xa0\x01\xd9\x97\xd8\xa9\x29\xba\xcb\x8c\x59\x3a\x53\x69\x4b\x79\x76\xfb\xb1\xd9\xbc\xaa\x91\xd7\xf2\xb2\xdc\xab\x97\x8e\xff\x18\x2d\x89\xe0\x16\xa4\x76\xb0\x52\xbf\xed\xbc\xd0\x64\xaf\x15\x58\x0c\x34\xba\xd6\x9d\x95\x1a\xe7\x9a\x45\x44\x9f\x7c\x27\x2d\x8e\xed\x86\x43\x10\x71\xdb\xd7\x05\xef\x18"
		"\x9f\xa0\x99\x09\x79\x05\x17\x6b\x16\x48\xe5\x0e\x35\x4f\xac\x02\x83\x79\x64\xa3\x97\x80\xbf\x57\xad\x3c\x7e\xf5\x0b\x9b\x39\xa7\x2e\x11\xf9\x6c\x7d\x9f\xcd\x8a\xa3\x94\xc6\xc4\x67\x51\x34\x62\x1f\xb2\x2f\x00\xcd\x00\x4c\x7d\xba\xab\x8c\x5c\xe1\xef\x3a\xe3\x1c\xb2\x9b\x15\xd3\x9b\xb9\x67\x6d\x85\x59\xed\xae\xb0\x55\x3e\x31\xd7\x32\xbb\xa9\x4e\x53\x96\xb3\xa2\x30\xac\x9c\x17\x1a\xa1\x0c\x41\x8b\xd3\xde\xd0\xac\x4a\x7c\xe0\xa2\x6a\x1c\x9a\x53\x2d\x2f\x7e\x88\x19\x53\x6a\x24\x51\xea\x7f\x33\xa6\x5a\xc2\x61\xb4"
		"\x44\x8a\x40\xf8\xc4\xcf\xe4\x80\x66\x8b\xbf\x8d\xfb\xd7\xd6\x56\xad\x8c\xb5\x2d\x4d\x9e\x73\xc9\xab\xc0\x16\xf5\x36\x79\x32\xc1\xa5\xd0\xcb\xff\xc1\x09\xf9\x56\x8e\x90\x96\x63\xbc\xc1\xc4\xca\xbb\xdc\x0d\x17\x6a\x44\x3f\xbf\xfb\x61\xf5\xb0\x2e\xd2\x06\xf1\x3e\x8b\xc3\x2f\x77\xfb\x1f\x80\x82\xad\x74\x12\x33\x47\xb2\xc3\x61\x83\x9c\x89\x89\xe4\xda\x8c\x55\x25\xad\xcd\xca\xdf\x60\x03\x87\xe8\x94\x1e\x3e\x33\x7d\x7e\xa7\xa6\x55\xc3\x67\x7c\x57\x8e\x25\x83\xae\xe9\x34\x80\x5c\xb8\xf0\x83\xc1\x2f\xd9\x56\x30\xda"
		"\x40\x8f\x44\xf7\xc6\x16\xaf\xbe\x98\xf3\x9c\x7a\xf8\xa0\x8e\x11\x0b\xca\x69\xeb\x66\xe4\x45\xc9\xf2\x45\x74\xb1\x54\xa3\x77\xc7\x0a\x11\xa8\x0b\x92\xec\x44\x8a\x78\xf1\xa5\x74\xf6\x86\x92\xd4\x2d\xda\x93\xa4\xa4\x75\x2b\x0a\x7c\xd2\xb5\x3a\x5c\xff\x16\xd5\x12\x69\x9c\x05\xb5\xe3\x3b\x59\x47\x0f\xf0\xdc\xbb\x79\x20\x3e\xbb\x38\xa0\x95\x57\x2f\x04\x05\xbf\x52\x7c\x67\x6a\xb6\x60\x43\xd7\x76\x83\x70\x75\xc9\xd9\xb8\xff\x5a\xa1\x58\x2a\xbd\x25\x51\xef\x5c\x28\x07\xac\x1c\xd7\x30\x63\x2d\x4d\xdb\x19\x0f\x60\xff"
		"\xdf\x89\xd9\xe4\x45\x2e\x2a\x9b\x49\xd8\xa9\x2a\xe7\xb8\x4b\xce\x7d\x31\xb1\x00\xac\x0e\xbb\x8a\xfa\x76\xc1\x99\xaa\xe6\x48\x9a\x94\xf7\x5c\x8d\xdf\x0a\xde\x51\x1a\x34\x03\x1e\x79\xfd\x15\x6c\xc5\xd1\x48\x77\xaf\x7a\x17\x4f\xab\x93\xcc\xa3\xeb\x96\x52\xd2\x7b\xff\x96\x3f\xb4\xa3\xbd\x58\x8e\x20\xbc\x51\xa5\x8c\xc2\xd7\x9f\xa9\x9e\x6d\x99\x84\xf5\x96\x2b\x69\x5a\x87\xdb\x0d\x91\xb8\xa8\xe2\xb0\xcd\x16\x20\xa9\x11\x8b\xf8\x3a\xf4\x95\xda\xba\x13\xbf\x2f\x7a\xd9\xeb\x43\xd7\x12\x72\x78\x6c\x3d\xff\x56\xbf\x7d"
		"\x3d\xd1\x04\xcc\xf3\x98\xe6\x79\x07\x9e\x39\xc7\xeb\x2f\xe6\x88\x0a\xa1\xdd\xe6\x33\x89\x85\xc4\x7e\xde\x41\x75\xfc\x1e\xde\x16\xc7\xd1\x7f\xd7\xc5\x5d\x52\x43\x41\x1f\xa4\x2a\x1a\x8a\x3f\x60\x17\x03\x5e\x28\xa2\xe7\x06\x9c\x35\x89\xcc\xc0\xf7\xea\x03\x57\xbb\xea\x53\x3e\x43\xea\x82\x76\xa5\xf8\x3e\x5b\xfd\xaa\xa1\x63\xe3\x0e\xdf\x92\x3b\xcd\xa1\x78\xd4\x65\x76\xba\x5a\x25\x05\x29\x08\x31\x57\x21\x66\xbf\x1f\x35\xb9\xd4\x3f\x81\x74\x51\xa8\x37\xcd\xa2\xfa\xed\xf5\xaa\xe3\xc8\xc0\x65\x16\xda\x10\x59\xaa\xfc"
		"\x0e\xd4\x4c\x3b\x69\xd1\x46\xe8\x19\xaf\x1f\x57\x35\xf4\x8b\xba\xf6\xb3\x0e\x10\xb0\x16\x67\xde\x0d\xa3\xce\xe2\x7f\xd0\x85\x7a\xb1\x0c\xb7\x7c\x0d\x56\xfe\x32\x73\xad\xee\xc3\x5e\x74\xf0\xe6\x03\xe2\x54\x42\xd9\x5d\x69\x74\x79\xdf\x3f\xa4\x82\x88\xcb\xfa\x98\x84\x1f\x07\x1b\xc7\x8f\x5d\xcc\xf5\x2d\x8a\xfb\x3c\x87\x0f\x6c\xbc\x2f\x88\x41\x18\xe2\xd0\x37\x23\x27\x6a\x98\x23\x5c\x1c\x17\xa6\x69\x96\xf4\x70\xbd\x99\x03\xd7\x9a\xd6\x14\xe3\xcb\x82\xb9\x4e\xda\xdb\x2c\x1d\x79\x57\x24\x74\xc7\xf9\x88\xce\x58\x01"
		"\x84\x4f\x84\x0f\x25\x4f\xfa\xe7\x8e\x29\x50\x09\x9d\xc6\xb7\xc8\x55\xf4\x07\x9f\xf9\x37\xe2\x69\xcd\xc6\x9e\x0e\xb6\x00\x53\xa7\x94\xb3\xe9\xfb\x62\xc5\xfb\xeb\x65\xff\x95\x8a\x4c\x3a\x2b\xe8\xf1\x2f\xf0\x63\xae\xa7\xf3\xdb\x8a\x6d\xb3\xef\x72\xda\xac\xa8\xdd\x5b\x73\x3d\x7b\x42\x36\x99\x42\xaa\x5f\x7b\x76\x3c\x70\x45\x61\x2d\xb5\x99\x38\x5f\x45\xac\xd8\xc2\xf1\x08\x8b\xff\x86\xc0\xfc\x18\x56\x87\xb7\x40\x73\x78\x59\x8e\xc4\x8c\x10\xcf\x5b\x1a\x26\x53\x3b\x28\x04\x52\x14\xd2\xb7\x46\xf8\x93\x53\xc6\x2c\x5e"
		"\x80\x03\x6a\xc6\x98\x7a\x4d\xb1\x88\xdc\xf0\x4a\xa5\x8e\x79\x57\xdf\xca\x65\x3c\x47\xd0\xe0\xba\x84\x58\x12\x87\x1d\x5e\x8d\xc6\xa0\x0a\x04\xf9\xd7\x60\x04\x8f\x9b\x0e\xe5\x68\xdf\xd3\x04\x73\x58\x0b\xc7\x22\x60\x72\x0c\xdc\x69\x09\xfb\xd5\x62\x4d\xd6\x20\x6e\x72\x79\x8e\xf4\x78\x13\x27\x8e\x81\xba\xe1\xd5\xda\x59\x3f\x2a\xd4\x32\xa7\xd9\xed\x79\xda\xc5\xe7\x6f\x58\x1f\xc6\x13\xbf\xe4\x59\x41\xbb\x2f\x12\x3c\xce\xa9\x8b\x84\xdd\x92\xc4\xb2\x16\x09\x4f\xd5\x1b\xb6\xa8\x10\x1c\x48\x9d\x4f\x96\x30\xef\xe7\xf0"
		"\x70\x07\x9e\xf0\xae\x52\x62\xc9\x0b\xce\x4e\x13\xaa\x0e\x30\xf4\x8c\xae\xdd\x9f\x44\xcb\x8b\x0e\x18\x96\x50\x69\x9d\xf0\xc6\x7c\x86\xc3\xcb\x99\x12\xd3\x68\xc4\x5e\x1a\x70\xae\x98\xfb\xec\x27\xaa\xa1\x01\x76\xf2\x33\x7e\xeb\x29\xde\xca\xb9\x47\xb9\x46\x09\xaa\x20\xc3\xc3\xb1\xa7\x32\xea\xdb\xe2\xd8\xae\x8f\x6d\xfe\xc0\x2c\x51\xc6\x2b\x73\x69\x73\x24\x69\x2a\xae\x33\x0f\xd5\xbf\xc4\x3c\xb7\xc8\xf2\x1f\x35\xbf\x66\xc1\x73\xce\x36\xeb\x84\xc0\xe3\x87\x13\x59\xfa\x70\x74\xdd\xee\xc5\x5d\x36\x94\x84\x5f\xee\x1f"
		"\x11\xee\x3c\x38\x37\x7e\xa8\x21\x9f\x46\x8b\x7c\x06\x8c\xbb\x9a\x4c\x5e\x34\x42\x31\x9a\x34\x58\x41\x90\x61\x04\x8a\xfb\xd0\x74\xf3\x61\x30\xe9\xb3\x6a\x65\x5e\xaa\x63\xaf\x11\xab\x0e\x07\x0b\xa4\x53\xb2\xe1\x61\x98\x72\xfa\x21\x85\x28\x9a\xff\xb9\x6d\x71\x11\x1b\xe6\x7b\x42\xb9\x57\x40\x7f\x6f\x26\xbd\xf0\xdf\x6d\x6c\x05\x76\xb3\x9f\xe3\x86\x93\x8c\xaf\xd6\x1d\xd3\xa3\x2a\xb0\x7f\x77\x93\x83\x69\xfb\xe7\xb7\x3a\x6a\xd7\xd1\xeb\x00\x47\xca\xf8\xd9\x33\xe7\xd3\x29\x19\x0b\x6c\x5b\xfc\xd2\xb2\x2f\x5b\x33\x75"
		"\x3e\x04\x98\xcd\x14\x50\x07\x54\x16\xbf\xc1\x4a\x28\xd5\xf9\x40\x96\x13\x8a\xc7\x3b\x64\xe7\x4b\x93\x9b\x76\x20\xb7\x43\x21\x8f\x45\xea\x61\x15\x6a\xf5\xa2\x4c\x4d\xf4\x0c\x5b\x37\xdf\xf2\x3f\xa4\xbb\x8e\x40\x22\xd2\x92\xe9\xb5\xc8\x40\xb8\xed\xc9\x3d\x78\x3b\xa6\x8a\xf2\xe7\xcc\xce\xad\x57\xd6\x07\x45\x0c\xd9\x34\x62\x8a\x70\xed\xd7\x42\xed\x42\xab\x62\x7a\x1b\x09\x76\x21\x22\x3b\xea\x51\x48\x97\x5b\xe3\x43\xb2\xc5\x8e\x05\x97\x9b\x4c\xcb\x50\x22\xc1\x77\xe9\x1c\x00\x6f\x36\xd6\xa3\xc6\x3b\xbe\x17\x76\x5d"
		"\x33\xd0\xcf\x4f\x7d\xf3\x3a\x5e\xb6\x12\x3c\x63\xab\x72\x75\x96\x35\x88\x1c\x51\x10\xc2\xef\x07\xe6\x91\x09\xa0\x67\xd2\x5b\xb8\x0c\x81\x88\xde\x48\x6d\x73\x4b\x96\x01\xd6\x16\x0e\xb5\x63\xd5\x65\xf2\xbd\xf8\x1d\x34\xd5\x55\xa7\xe6\x18\xe1\xa1\xdc\x98\x5a\x01\x40\x7c\x69\xcc\xdf\xf9\x04\xf6\x16\x32\x1f\x1d\x2d\x55\x5b\xae\xea\x09\x08\x40\xff\x20\x24\x21\x9e\x44\x95\xdc\x7a\xd3\x61\x1d\xa4\x97\xd8\x0a\x04\x10\xfb\x92\xf7\xbf\x2d\x85\xb4\x28\x5d\xff\x2c\x40\xdb\x26\x61\xd9\xda\x5b\x55\x9f\x7a\xcc\x9f\x36\xc2"
		"\xc3\x55\xc2\x45\xf7\x8c\xe6\x10\x9e\x5a\xf6\x32\x92\xe6\x49\x0c\xa4\x55\x16\x6b\x0b\x59\xd6\x41\x56\x58\xd3\xf1\x4a\x0e\x06\x79\x32\xc2\xe7\x7e\xb6\xa5\x50\x97\xe0\x44\xf5\x68\x46\x5b\xbc\x2e\xaf\x6e\xab\x9a\x7f\x6a\x45\x4b\x6d\xad\x14\xbf\x45\x48\xcb\xa0\xb5\x8b\x43\xa7\x44\x6e\x41\xea\x6d\xe9\xbc\x69\x5e\x7a\xbf\x8b\xdb\x34\x7e\xaf\x33\xb8\xff\x6d\x3b\xa0\xc2\xa1\x1b\xa3\x87\x1f\x5b\x52\x92\xd4\x5b\xa9\x6f\xf0\x70\xcd\x86\x07\xc0\xb4\xb3\x61\xc9\x40\xa0\x65\x97\xce\x96\xf2\x40\x21\x42\x3b\x13\x8c\x04\x44"
		"\x50\x89\xca\xfe\x99\xb0\x50\x8a\xac\x3e\x4f\x62\x88\xb4\x8c\x7b\xf4\x43\x7f\x00\xee\x31\xdf\xe7\xc1\x47\x32\x0d\x2a\xb4\x0b\xf0\x24\x1b\xd2\xca\x1b\x55\x0b\x6c\xe8\x95\x7f\x47\x62\xad\xd4\x84\xa4\x65\xad\xb1\xa3\x88\x8d\xac\x68\x65\xa6\xd8\x93\xea\x37\x99\x73\x70\x7d\x42\x4b\xf4\x6d\x1a\x4f\xb4\xa3\x5e\xd6\xdb\x73\x5d\xa2\x03\xa0\xd1\xb4\x2e\x7a\xbf\xa1\x11\x2d\x29\xa8\x52\x48\x17\x80\xe0\xcd\x72\xff\x28\xb8\xb4\xfd\x1c\x1a\x64\x3c\x0e\xc8\x93\x78\xce\xa4\x7e\xb0\xb6\x97\x0e\x1d\x3f\xce\xf6\x2e\xd7\x4b\x4a"
		"\x67\x9c\x89\xc1\xec\x2b\xc7\xe7\xcf\x79\x44\x74\x45\x9e\xf2\x1d\xd7\xd2\x6f\x88\xbd\x26\x50\xd6\x21\x40\x67\xe1\xf7\x24\xe6\x3f\xb7\x4c\x31\x05\xe3\x67\x53\xa3\xeb\xf9\xa7\x68\x4d\x3d\x39\x17\x3b\x0a\x86\x06\x28\xde\x48\xeb\xa8\xc7\x8e\x32\xfe\x76\xe0\x6c\xf9\x76\x11\x51\xe4\xeb\xc0\xf0\xeb\x78\xba\x58\xa8\x24\x99\x30\xfd\x90\x33\x13\x26\x31\x20\xe0\xec\xe1\x08\x67\x54\x82\xab\xcb\x51\x79\x51\xfc\xe8\x8c\xf1\x8e\x64\xba\x20\xe9\xd5\xb6\x8d\xf6\xd6\x29\x2a\xa1\x72\x42\xa6\xfd\x42\x98\xb2\x3d\x0b\x54\xea\xe5"
		"\xb7\xb4\xd3\x85\x44\x49\x41\xb0\x35\x2e\xd4\x78\x80\x72\x4b\xa5\xf9\x93\x94\xcf\x7e\xad\x04\x8a\xd0\xda\xfe\x37\xc4\x95\x46\x1a\x50\x97\xbe\x37\x3c\x18\x71\xe0\xf1\xbf\x6d\xe0\x44\xe8\x9e\x74\xee\x70\x1a\x17\x42\x15\x82\x6c\xe5\x39\x47\x74\x4e\xe2\x86\xc1\xbb\xd4\xb0\x49\x12\x8f\x51\xc6\x8c\x1f\x6c\xf7\x66\xc0\x9f\x9c\x2f\x63\x36\x04\x81\x56\x30\xfd\x6d\xb0\x4c\xcf\xe6\xa1\x20\xa8\x72\xe7\x93\x4d\x94\xfc\xba\x60\x7f\xdf\xdf\x7f\x6c\x01\x3a\x3c\xe9\x78\x7c\xc9\x77\x3e\xb9\x55\x37\xbc\x9a\x07\x98\xd0\xc2\x33"
		"\xed\xbe\x4c\xf3\x3c\x59\xfe\x93\x3b\x3d\x85\x9e\xdb\xf7\x02\x88\xe6\x61\xcc\xc2\xe1\xc2\x48\x03\x92\x6c\x74\xee\xd7\xc0\x64\xe8\xcd\xc4\xdb\xe9\xfa\xfd\x64\x0d\xaa\x7d\x8c\xd2\x54\x3a\x6d\xe3\xd8\x79\xea\x7f\xbb\x15\xa7\xcf\xe7\x6f\x27\x12\x98\x96\x75\xd5\x21\xb9\xb8\x7b\x51\x40\x14\x92\x6f\x0c\x39\xd1\x6c\x5e\x38\x7a\xd2\x3e\x44\xf9\x75\x6a\x8e\xb0\xa4\x66\xcb\xf9\x57\x8b\x0f\x05\x29\xd5\x09\x18\xa6\x52\x7e\x1e\x8f\xed\x89\x0d\x7e\x65\x0a\x93\x7b\x7d\xb2\x00\x38\xe9\xf7\xaa\xa2\x5b\x0e\x61\x84\x6b\x57\xbb"
		"\x85\x00\x2f\xce\xde\xa8\xa9\x16\x5a\x35\x28\x7f\x83\x0f\x69\x7e\xf8\xce\xf3\xf1\x3e\x7c\xfd\x12\x51\x59\x3d\xd2\x37\xe2\x42\x0f\xa2\x24\x4f\xe9\xe7\xc4\x61\x89\xea\xc0\x40\x8f\xe6\x68\x15\x70\xbf\xbf\x5b\x2f\x0a\x9b\x99\x6e\x26\x85\xb2\x30\xc3\x55\xb6\x0a\x4a\xf3\x6f\xa3\xe8\xfc\xdb\x88\xc3\x7f\x78\x6c\x65\xd7\x9c\x1f\x37\xc8\xee\x32\x4d\x5d\x9e\x8f\xcb\xa9\x56\x0c\xf8\x86\xd3\x7d\x6a\x0c\x07\xd7\xd8\x58\x69\xc9\xbb\x31\x73\x48\x26\x45\x37\x50\x0a\x63\x1e\xe7\xd0\xae\x7b\x63\xe8\x1e\x82\xb3\x51\x60\x3a\x04"
		"\x13\x3f\x14\x3b\x82\x7d\xe5\x69\xd7\x41\x31\x87\xf3\xbb\x83\x56\xd3\x4c\x4c\xae\xd8\xa5\xa7\xdf\x68\x31\x9a\xa4\xd4\xd6\x3e\x57\xcc\x24\xf6\x9d\x49\xb3\xa1\xca\x32\x07\x00\x82\x0b\xff\xbe\x08\xd4\xf9\xeb\x11\xa5\x18\x1c\x30\xf4\xee\xd8\xe1\xf1\xfc\x6e\x65\x95\x2e\xeb\x7d\xc7\x6f\xae\xd2\x13\x35\x02\xb7\x21\xf4\xcd\x8d\x85\xe0\x96\xef\x1a\xb9\x0f\x18\x34\x9f\x98\x28\xc5\x19\x0f\x9c\x47\x64\x80\x1d\x5e\x5e\xab\x52\x46\xef\x53\x0c\x90\x3f\xe1\x74\x82\x35\x68\xb2\x9e\x12\x85\x92\xa2\xc9\xab\xe1\x53\x97\xfb\x81"
		"\x2e\x46\xc2\x75\xf2\xa2\x7a\x2a\xca\x5a\xe7\x92\x1e\x70\x26\xdf\xd0\x4f\x31\xfa\x30\x63\xd0\xa7\x4c\x2b\x72\x3d\x99\xd9\x85\x60\xa5\x18\x3f\x2a\xfa\x29\xef\xe8\x6e\x09\x3f\xcf\xae\x2e\xd6\x7d\x4f\xc4\xfa\x92\xd2\x34\x4b\xc0\x46\x5c\x49\x24\xfe\x8f\xd7\xf2\x71\x4f\xa3\x28\x41\x7f\x1c\x86\x4a\x93\xf7\x4f\x7a\x03\x4a\x43\xe2\x86\x3a\x10\x28\x62\x17\x81\x80\xe0\x4d\xe6\xf9\x18\x0d\x75\x23\x3e\x19\x1b\xd8\xf5\x5a\xdc\x0b\xea\x5a\x26\xc8\xe4\x3a\x22\x9a\xdc\x0b\x8f\xff\x79\xa1\x1c\x6f\xcc\x8b\x09\xdb\x95\xdb\x8e"
		"\x05\xbc\x75\x13\xd1\x6f\xd9\x87\x7b\x38\x75\xc3\x3c\x07\xe2\x55\x9b\xe6\xce\x4b\xa4\x14\x01\x1c\x8c\x4e\xc1\x2f\xdc\x28\x37\x82\x9c\x93\x19\xa9\x11\xaa\xd1\x43\x11\xe9\x6b\x3a\xd0\xa4\x72\x2f\x8b\xef\xcf\x2b\xe7\x92\x29\x37\xa1\x05\x55\x62\xda\xa3\x12\xe8\x95\xb8\xa4\xd2\xe5\x7b\x08\x42\x3f\xcf\x0d\x46\x29\x35\xf9\x0e\x61\x68\x9d\x19\x99\x6f\xa0\xbe\xc6\xda\xec\x5e\xa3\xbd\x24\x71\xb3\x29\xc1\xd7\x6a\x2c\x14\x50\x28\x8d\xaf\xd2\xed\xdb\xb2\x89\xab\x2b\x08\xc1\x37\x8d\x56\xa8\x7b\xc7\x92\x22\xda\x75\x93\xdf"
		"\x9c\x25\xb3\xd6\x1c\xbb\x86\x9a\xe8\x7b\x40\x81\xb2\x79\xe2\x4b\x9d\x8f\x7e\x67\x51\xed\x2b\x69\x56\xbc\xdb\x14\xbc\x08\x4a\x39\x43\x69\xbb\xa0\x3a\x77\xba\x3c\x6b\x99\xb6\x99\xdf\xe7\x25\xe6\x65\xcf\x2d\x37\xc5\x75\xe4\x82\x5f\xea\x33\xaf\x95\x53\x58\x69\xe2\x7b\x4b\x9c\x1d\xe6\x54\xc9\x45\xbb\x5e\x91\x43\x54\xc3\x9b\x61\xba\x24\x46\x76\x99\x48\x69\x9e\x4b\xd5\x9b\x41\x2c\xde\x13\xa0\x2e\xa1\xee\x18\xdd\xb4\x58\x35\x82\x21\x51\x1e\x24\xe7\x1d\x7d\x29\xae\xf1\xf4\x1c\xb5\xc3\x39\x4f\x75\xe9\x93\xf5\xe4\xe1"
		"\xc9\xcb\x0d\xc3\x5e\x79\x34\xc6\x0b\x65\xb5\x71\x9e\x31\x68\x0f\xc8\xfa\xe6\x57\x6f\x7a\x1e\x7c\xe1\x9a\xf0\x5d\x42\x92\xea\x82\x7c\x09\x1a\xf2\x9d\xcb\x19\x77\x04\x8c\x1d\x56\x0b\x45\x7c\x5f\x76\x40\xcb\x5f\x41\x06\x0f\x26\xeb\xb9\xa7\xdf\x7f\xf7\xa7\xb1\x81\x1d\x90\xc5\xcb\x50\xc8\x09\x64\x44\xdd\xa7\xd0\xe5\x32\x82\xa8\x09\xa5\x5c\xf0\xb4\xb3\xa2\xe3\x7a\x5b\x1c\x84\x92\x8d\xce\x5f\xda\x39\x74\x9e\xd8\xbe\xb6\x89\x19\x33\x22\x37\x78\xb6\xf6\x34\xec\x6c\x2f\x80\xeb\xb8\xe2\x16\xda\xfb\xc4\x03\xf3\x2c\x8b"
		"\x27\xa0\xe0\x34\x24\xca\x1b\x58\xae\x16\x91\x3c\xfa\x6b\xd4\x0e\x87\x67\x79\xae\xe7\x3d\x1d\xd5\x16\x9a\xd3\x81\x3d\x7b\x98\x30\xe1\xdc\xb4\x62\x05\x1e\x97\xf7\x6a\x3f\x69\x95\x99\x6a\xd9\xcc\x02\x3b\xc5\xca\x6e\x02\x85\x8b\x5f\xb2\x12\xbc\x4e\x6f\x85\x61\xae\x0a\xf7\x6a\x73\xda\x65\x21\x94\xdb\x2b\x72\xa9\x17\x1c\x5a\x84\xaf\x69\x7b\xdb\xac\xba\x64\x27\x05\x53\xce\x54\x4d\x0e\x78\xc4\xce\x83\x4a\x9c\xd6\x8a\x29\x3f\x6d\xe8\x82\xc5\x40\x56\x03\xf3\x31\x22\x0f\xe5\xe4\x6f\xe3\x68\xbc\x35\x93\x7f\x9d\x27\x8d"
		"\x40\x7b\x52\xb7\x88\xe8\xa9\x22\x73\x35\x5d\xd5\x25\x95\xa4\x28\xcb\x61\xd0\xcc\x68\x2f\x4d\x68\x60\x74\x55\x3a\xba\x77\xbf\x73\x1a\xed\xd1\x99\x56\x5c\x36\x95\x8c\xac\x36\xa6\x6b\xbb\x8b\x14\x0d\x60\x84\x74\x8f\x08\x73\x33\xe9\xaf\xd9\x6b\xdf\xfe\x32\x3b\x46\x85\xd9\x61\xf8\x1b\x10\xad\xcd\x22\x64\xb9\x16\xf2\xc1\x41\x58\x84\xdb\x91\x3e\x67\xfc\x03\x1a\x98\x33\xae\x40\xe0\xd1\x84\x7d\x16\xe3\x62\xaf\x0a\x2e\x56\xd0\xd4\xe2\x68\x39\xf9\x0a\x9b\xaf\xb5\x4a\xea\xeb\xa5\x37\x44\xc7\x89\xaf\x4e\x57\xc7\x82\xc2"
		"\xd1\xd3\xd7\x5a\xe4\x63\xc1\x41\x9e\x58\xe5\x82\x78\x06\x40\x9d\x7d\xf3\xef\xc1\xf2\xb9\x9a\xcc\x59\x79\x6c\x17\xe5\x61\x61\xad\x76\x28\x91\xa9\xcb\xf9\xac\xb9\x7d\x83\x26\x4b\xb7\x18\x5e\x79\xd7\xbb\x77\xa2\x1d\x08\xc7\x88\xc7\xb0\xe4\xae\x99\xf5\x77\x6f\x4a\x1d\x1e\xeb\x04\x81\x6f\xc2\xc5\x4f\x43\x1d\x8a\xd7\x6c\x09\x31\x47\xf8\xef\xbb\x13\x3b\x64\x44\x91\xce\x49\x93\x9d\x10\x62\xf4\x12\x3a\x9f\x86\x6c\xf5\xd6\xc8\x1a\xff\x21\xe9\x63\x53\x1b\xc8\x67\x54\x32\x84\x2f\xf2\x66\xc8\x4c\x45\xc9\x9a\x77\xc0\x48"
		"\x7c\x94\x77\x02\xa0\x29\xe4\xdf\x51\x94\xe9\x0e\x5f\x11\x88\xd7\x62\xa5\xe6\x48\x9f\x23\xe5\xba\x7f\x95\xaa\x0c\x4a\x2a\x0c\x8d\x7e\xd7\xa0\xa1\xc9\xc2\xad\xb9\x31\xb9\xf6\xa0\xe9\x06\xfc\x0d\x34\xa8\x45\x7e\x1d\xbc\x7d\x48\xf5\xa5\x8d\x87\xf2\xd9\xb2\xd0\xc6\x2c\x95\x7c\x15\xd5\x52\x2f\x37\x93\xc2\x01\x70\xf8\x7c\x4e\x81\x37\x6b\xf1\x02\x7d\xd0\xc8\xc3\xa0\x55\x1a\x1d\xfd\xe2\x5b\x9d\xf2\x89\x1d\xbf\x40\xa5\x56\xff\x4a\xf2\x54\xdc\x84\x42\x96\x38\x54\xc0\x24\x72\x90\x47\xaf\x07\xa3\xe6\xa0\xd9\xe8\x26\x69"
		"\x92\x1d\xe7\xbc\xcf\x0f\x3c\xed\xaa\x5a\xbd\x19\x43\x15\xd4\x17\x93\xa1\x82\x43\x4d\x72\xac\x28\x7c\xb0\x25\x21\x10\xb6\xae\xf2\x4b\xce\x9c\x01\xb3\xb6\xe1\x42\x72\x46\xc4\x38\x70\x1b\xb3\x64\x1d\xea\x77\xaa\xcb\xf9\x83\xc9\x74\x34\x8b\x96\xe9\x88\x34\xee\x29\xec\xa9\xc1\xad\xe3\x4b\x95\xc9\x74\xd1\x63\xc4\x63\x46\xa3\xfb\xbf\x01\x36\xfb\x8e\x38\xcd\xf5\xf3\x48\xfc\xce\xb4\x1b\xe2\x03\xfe\x0f\x2c\x80\x78\x0b\x34\xd8\x7f\x0b\xdf\xe5\xf2\xfa\x53\xf4\x4f\xca\xb9\xc9\xbd\xde\x74\xe4\x6f\xdc\xd0\x44\x81\xe9\xb0"
		"\x10\xaa\xea\x74\x91\xc1\xf5\xb3\x67\xad\xb6\x08\x79\xe6\x18\xd1\x14\x06\x73\x1a\xf7\xb3\xc7\xf8\x0a\xc4\xd1\xb1\xe7\xa2\x52\xcb\xbf\x8d\xd4\xcd\x53\x08\xd8\x0f\xe9\x84\xb4\xb0\x62\x62\xe9\xd6\xea\x11\x94\xb5\x72\x5d\xe4\x49\x59\xd3\xbc\xd3\x35\x17\xcb\x29\x30\x98\xdb\x69\x38\x80\xab\x13\x77\x13\xac\x85\xa8\x6b\x5f\x6c\xff\xaa\x19\x7f\xff\xf2\x23\x57\x98\xb6\x5c\x86\xa3\xbd\x2d\xde\xf8\xf9\x24\xa8\xcd\x48\xad\x7f\xf8\x2f\x97\x42\xc5\x88\xca\x28\x1d\xa7\x6e\xda\x65\x72\x38\x07\xb2\x02\xc3\x80\x83\xc4\xc0\x05"
		"\x0f\xa5\x69\x12\xbb\x8f\x5b\xfd\x85\x23\xd5\xb8\xaf\xe9\x49\x3d\x7a\xda\x0f\x32\xb1\xce\xfa\x8a\x69\x64\x2c\x4e\xaa\xca\x47\xef\xbd\xb4\x81\xa4\xa8\xb7\x13\x44\x1f\x46\x96\x3e\x92\x46\x63\xd3\x10\x98\x99\x5a\x5d\xaa\x94\xdd\x6f\x41\xa9\x3c\x16\xbc\x2e\xe7\xb4\xc6\x9c\x89\xed\x3a\x94\x74\x44\x77\x56\x36\x31\xf0\xb7\x55\x4f\xf2\x41\xcd\x84\x15\xc8\xf1\x46\x24\x7c\x90\x79\x2a\x0e\x3c\x50\xf9\x2e\xbd\xd7\xe4\xa2\x47\x03\x3b\xc4\x1f\xe1\x06\xa7\xe1\x93\x37\xa0\x0e\xf0\x36\xb7\xbb\x50\x16\x4d\xc7\x76\x29\x22\x37"
		"\x84\x76\x8d\x8b\x1a\x8e\xf2\xc7\x39\x85\x5a\x72\xdd\x49\x00\xe7\x83\x55\x72\x76\xe3\x78\x9f\x23\xdf\xc3\xd1\x52\x9f\x94\xba\x6b\x25\xfd\x99\x03\xc4\x17\xd1\xb5\xcc\xf2\xe3\x66\xb4\x0e\xe9\x3f\xc8\xdc\x22\x38\x91\x80\x90\x62\x76\xf3\x31\xba\xf2\x60\xcf\xba\xa0\x04\x61\xc8\x00\x36\xe1\xf6\x20\x21\xbe\x0c\x06\xfa\xa1\x11\x7f\x00\xe4\x7d\xa1\xc2\x3b\xc4\x8b\xa4\x2b\xf8\x08\xf0\xa6\x67\xd5\x00\x77\xa8\x73\x6e\x3a\x94\xf4\xcf\xd4\x6c\x0d\x4b\xf8\x8d\x73\x27\x52\xaf\xc1\x20\x82\x73\x12\x48\x43\x14\xf9\x13\xc2\x57"
		"\x66\xdc\xfc\x79\xf2\x38\xa3\xd4\x0d\xcc\xd5\xd6\xde\x39\x59\x4b\xd6\x66\xfb\x0c\x7c\x03\xe7\x57\x9d\x62\xb0\xda\x15\xcb\xc9\x39\xe3\x44\x94\x8c\x10\xcc\x5a\xa3\x04\x0f\x29\x26\xf0\x2e\x87\xa4\x2a\x54\xd3\xae\xea\x39\xd9\x73\x97\xae\x76\xd0\xd3\x41\x83\x8e\xd5\x8f\x71\x4d\xdf\x21\xf2\xad\xef\xa7\x76\xe4\x24\x7d\x81\x03\x71\x1a\xb1\xf8\x62\x9c\xc6\x11\x69\x03\x4a\x51\x66\x75\xc7\x0a\xdf\x9e\xbe\x09\x5f\x5e\xf6\x2f\xf5\xff\x53\x27\xb8\xa1\x16\x18\x9c\xfa\x3f\x79\x86\x81\x50\x71\x45\xea\xa1\xd0\x04\x6a\x14\x8a"
		"\x81\xee\x99\xee\x3f\x18\xb5\xdc\x75\x17\x16\x62\x01\x43\xe4\xf8\xa4\xda\x0e\xbf\xfc\xde\xe0\xab\xc5\xf5\xd9\x0a\x1f\x1c\x78\xc8\x77\x0b\x72\x65\x66\x66\x12\x4c\x15\x80\x84\x62\xcb\x11\x0f\xfc\x1e\xe1\x54\x8e\x3e\x81\xd0\xdb\xb8\x68\xe9\xb0\xaf\x94\x99\x18\xfc\x7e\xbb\x40\x62\xea\xe5\x41\x72\x8e\xfa\xb4\x6b\x7f\xc3\xa8\xd1\xe6\x8a\xdd\xff\x75\xf2\x19\x8e\xd5\x69\x2e\xfa\xc2\x17\xb0\xff\xad\x1f\x19\x9f\xc7\xaf\x55\xf5\xfd\x67\xa7\xac\x37\x16\x17\xfe\x4d\x8a\xdd\x9d\x92\x20\x68\x7a\xfe\xa7\x31\xb6\x6c\x39\x68"
		"\xb6\x93\x47\xf5\xa2\x59\xb2\xef\xf2\xdc\x2a\xd2\x86\x1c\xd7\x7d\xcf\x8b\xb1\x27\xd6\x5b\x47\x3f\x27\x30\xaa\x26\xfd\xa2\x7b\x3b\x05\x8d\x53\x58\xca\x7a\x44\x1a\xb4\x53\x0a\xaf\xc5\x00\xb2\xe2\xc7\xbe\x24\x3f\x9d\x8e\x6b\x5c\xa8\x66\xb1\x51\x43\x7c\xbe\xd9\x4d\xab\xd7\x88\xc0\x8f\xc9\x6b\xca\x54\x8a\x7d\xd1\xec\xf4\xed\xdb\xee\xcf\x3e\xdb\xef\x76\xbc\x02\x70\x82\x8e\xa8\x2c\x14\xcc\x36\x4e\x2d\x21\xf6\xc4\xcb\xc5\x40\xfc\xc9\xf6\x02\xa4\x31\xb0\xcd\x27\xa8\x9c\x29\xd6\x03\x0b\xab\x34\x13\x53\xce\x10\xac\x9a"
		"\xfc\x75\x03\x67\xb9\x60\x3e\x1e\x98\xe3\xe0\x7c\x08\x8b\x6f\xa4\x45\x3f\x24\xd5\x37\xe4\x2c\x9e\xd1\x38\x09\x7f\xad\xe3\xd8\x26\x4c\x79\x02\x42\x96\xd1\x4c\xff\xec\x3b\x40\xc5\xfd\x40\x52\x58\xb4\x8e\xd4\x73\x7c\xfd\x15\x9a\xf8\xaf\x87\xec\x65\x69\xf2\x1f\xf3\x50\xeb\xfc\xd4\x14\x84\xab\x73\x19\x71\xb0\xab\x13\x92\xff\xca\x52\x70\x64\xf6\x65\x99\x30\xdf\x0e\x87\x4b\x28\x61\x92\x59\x95\x3e\x82\x58\x9a\xc1\x92\x77\x75\x68\xda\x4e\xeb\x71\x36\xe0\xf0\x62\x36\x57\x35\x18\xa8\x6f\x69\xaf\xcf\x6e\xb4\x3f\xb0\x79"
		"\xb0\x7c\x93\xc7\x20\xc0\x70\x22\xba\x94\x29\xa0\x66\x79\x02\xe2\xde\x5d\x94\x23\x77\xaa\x02\x73\x0d\xf9\x3f\x16\xc5\xd4\x13\x26\x8e\x6d\xb7\x82\x3f\xb2\x58\x91\x1e\xcc\x0c\xbb\x41\x40\x52\x5e\x56\x82\x12\x4c\xcd\x30\x53\xb2\xe7\x30\x0e\x00\xa8\x3b\x0a\x66\xf1\x86\x51\x20\x2e\x85\xda\xa5\xd4\xcf\x3d\x10\xf9\xaf\x5e\xe6\x18\xbb\xa3\x6b\x09\xe8\xce\x60\x0c\xdd\xae\xb8\x99\xad\x99\xf4\x2a\xfb\x3b\xd0\x06\x79\xf1\xbe\xa5\x40\x04\xa4\x4c\x9d\xce\xbe\xc7\xf8\xf6\x7f\x6c\x31\x55\x3c\x97\xbf\x25\x13\xd3\x2d\x4c\x68"
		"\xa7\xd5\x5f\xcc\xd5\xe6\x7f\x32\xd8\x44\x30\x92\xf7\x7d\xec\x18\x93\x5f\xfc\xce\xa3\xd3\xf5\x47\x93\x47\xf6\xb3\xb7\x90\x75\x2b\xc3\xad\x09\x63\xc8\x43\x63\xf4\x1b\x00\xf6\x63\x14\xc5\x20\xb8\x88\x49\xa3\xd0\x23\x6d\x7d\xab\x48\x76\xcc\x5c\x37\x1d\xc9\x9c\xdc\xbf\x01\xfa\x9e\x9a\x95\x70\xdf\x06\xd1\x46\x96\x86\x34\x4b\x60\x18\x43\x52\x40\x01\xf5\x41\x2b\x65\xcc\x75\xca\x38\x71\xf4\x10\xbc\xd2\xd7\xcb\x93\x21\x12\xbf\x29\xcc\xe8\x2a\xd5\xbc\xa4\x1f\xfe\x42\xec\xd8\x41\xf4\x4f\xc3\x95\xc5\xd0\x0f\x28\xea\xcb"
		"\x22\x62\xde\x82\x27\xef\xe6\x22\x19\x5c\x74\x00\xc0\xda\x00\x84\xc5\xd8\x90\x76\x03\x96\x4c\xb4\xbc\x01\x3c\x0b\xfe\xfb\x64\x42\x9a\xa2\x38\x0b\x82\x23\x44\x51\x3c\x11\x91\x9d\x31\x9f\x28\x99\x87\x24\xd0\x06\x01\x1d\x35\x64\x42\x8f\xca\x2c\xbb\x77\x3a\xef\x9f\x3b\x9c\x69\x14\xb1\x22\x5d\x30\xbc\x1f\xbb\xba\xad\xe8\xc7\xd9\x4a\xf7\xf7\xba\xe1\x15\x41\x1f\xca\x7f\x42\xff\x0e\x33\x54\x5d\x44\xbb\x3e\xcd\xc3\xcf\x87\xf9\x7f\xa9\xde\x0a\x57\xa6\xfc\xa9\xb9\x8c\xb7\x78\xc7\x75\xfc\x88\x5a\x8b\xf3\xa2\x4e\x90\x85"
		"\x96\xc4\x1b\xaa\x1c\x5f\x70\x0a\xc8\x20\x73\x0a\x91\x55\xdc\x90\x54\x2d\x99\xd3\xa1\x88\xc9\x60\x20\x87\x25\x09\x60\xc1\xe2\x87\x1b\x8b\x86\x64\x6d\xfe\x1e\x56\x87\x7b\xc3\xb0\x3b\x17\x36\x80\x17\x00\x87\xce\x8f\x1b\xe8\x11\xaf\x5c\x6e\xc9\xa4\x0f\x78\x22\x9f\xc2\x2e\x44\xd7\x56\xe2\x13\xd5\x37\x27\x0a\x33\xc5\xcf\x27\x43\x58\x6c\xba\x69\x63\x6a\xe8\x07\x07\xae\x22\x89\x63\xb7\xde\xbc\x9d\x76\x3f\x73\x5c\xf5\x9e\x0c\xae\x74\xae\x7b\x58\x2f\x3c\xb5\x6b\xc1\x83\x0f\xe3\x86\x81\xe9\xd9\x13\x66\x75\xba\xe4\x31"
		"\xbc\x95\x46\x33\x96\xbb\x72\x4c\xc7\x09\xc2\x87\x45\xc3\x27\x1a\x9c\x41\x55\x96\xe0\x4c\x6b\x3f\x9f\x41\x81\x49\x22\x53\xe3\x1a\xc9\xd7\x14\xbe\x94\xfb\x40\xed\xd9\x07\xda\x5c\xa8\xbf\x91\x72\x09\x4b\xd5\x44\x11\x87\xe6\x20\x5f\x86\xfd\x0e\xf4\xdf\xad\xc9\xcd\x3e\xe2\xb2\xd5\x77\x4a\xe9\x2e\x3c\x24\xb3\xca\xe0\x32\x1b\x4b\xe0\x17\x6b\x02\x84\x5a\x05\x47\x36\x5e\x22\x9e\x04\xc1\x2f\x5c\xe2\x39\xef\xbe\x99\xc8\x8d\x68\xa2\x51\xf4\xa3\x67\x80\xd8\x70\xf0\x2f\xd7\xba\x4c\x81\xa4\x7a\xdd\xa2\x8e\x48\x3b\xdc\x8c"
		"\xe9\xb2\x10\x9e\xe0\x2c\xc0\xf5\x38\x53\xe4\x68\xa1\x56\x36\x9f\x97\xbc\x52\xcb\xf4\xbf\xf7\xbe\x2c\x8e\xba\x07\x62\xb0\xec\x4e\x3a\x67\xbf\x03\xbb\xdf\xe5\x25\x3b\x6a\x5b\x55\xec\x0e\x25\xd8\x5e\x39\x59\x95\xaa\xd3\xc5\xb3\x51\xcc\xe0\x70\xc0\xa1\xf4\x96\x98\x04\xcd\x3a\x3e\x07\x38\x91\x08\x59\xfe\xfa\xa2\xd2\x45\x25\x45\x86\x90\x45\x10\xc7\xb5\x75\x6f\x57\xec\xb3\x3b\x8a\x85\x04\x3e\xb3\x3e\x3c\x14\x80\xc9\x94\x59\xcc\x12\x88\x4b\xb5\x50\xd9\xed\xbf\xd1\x7a\x39\xc7\x77\x13\xdd\x3a\x9b\x5c\xeb\x62\x6b\x21"
		"\x18\x1c\x12\xa7\x6e\x2b\x14\x18\x8a\x0b\x3b\x58\xa4\x34\x0b\x01\x09\xc3\xe7\x19\x0a\x4a\xbd\xfe\x53\x9a\xf2\x5f\xd9\x18\x3e\x4e\x93\x87\x41\xd7\x17\xc3\x99\xf2\x0c\x1a\x86\xae\x49\xa6\x8e\xee\x1b\x29\xe3\x3f\x90\x0d\xbd\x68\x7f\x68\x01\x4d\x0d\x33\xf2\x7b\xb6\x53\xea\x26\xd3\x37\x7b\x2d\xfa\x26\x5d\xaa\x43\x48\x02\x0c\x70\xcc\xd2\x8b\x86\xfd\xab\xc3\x13\xb0\x10\xe6\x7f\x23\xa0\x6e\xf6\x3c\x6d\x6f\xf9\xed\x69\x46\x51\x8b\x55\x66\x32\xb9\xf0\xa7\x75\xc6\x18\xec\x66\x7d\x57\x0e\x6a\xa2\x1b\x7f\x92\xed\x15\x6e"
		"\x24\xd5\x45\x3d\xb1\xb4\xca\x3a\x8e\x3c\xc7\x49\x74\x36\xfa\xb8\xb0\xb9\xed\x99\x76\xc4\x3c\xa2\x9a\x1f\x1f\x63\x32\x46\xe0\x6c\x7b\x33\xde\x27\x37\x72\x0d\x0a\x48\xd7\x5b\x22\xd2\x37\xf1\x72\xc3\xe3\xa5\x5f\x42\x4a\xc8\x14\xa6\x6d\x6e\x10\x52\xe5\xc6\x52\x3a\xa6\x53\xdf\xe2\xc5\xfb\x86\xf9\x87\x83\x4e\xdd\x15\xc2\x68\x96\xf4\x0d\x09\x47\x3b\xf1\x6d\xdd\xb3\xce\x82\x65\xc5\xcc\x76\xe7\x25\x97\xa6\x4a\x3c\x72\x45\x6a\x1f\xbd\x8f\xe6\x23\x09\xdd\xa6\x1f\xfa\x6a\xde\x34\xa0\x28\xed\x95\x8b\x44\x04\x03\xb9\x8b"
		"\x37\x97\x89\x5b\x33\xd7\xa6\x63\x29\x08\x74\x76\xeb\x4e\x3b\x23\x47\xf1\xa6\xff\xd7\x8e\x38\xa3\x3a\x0b\x0b\xd1\xeb\x82\xc9\xa2\xb1\x29\xd9\xd8\x20\x0b\x93\x78\x5b\xff\x24\x1a\x7a\x2a\x2d\x68\x6d\x4e\x2b\xf0\x30\xe8\xee\xc5\x04\x18\x8b\x28\x05\x2c\x54\xf5\xb7\xa3\x8b\xed\x2a\x19\x4a\x7f\x78\xaa\x7b\x95\x09\x5d\x56\x5f\x3f\x96\x9f\xa6\x5e\xa1\xaa\x70\x21\xbd\x8f\x32\x93\x98\x05\x95\xb9\x6e\x73\x21\x35\x1f\xd3\xd1\x90\x61\x26\xf6\xc8\x51\xdd\xb7\xaf\xca\x9a\xbb\x17\xa1\x7f\xa1\x13\x80\xc6\x3b\x21\x28\x4b\x39"
		"\xe7\xa5\xb7\x0a\xcc\xed\x87\x9b\x4d\x15\xaa\xb7\x75\x74\xd6\x3e\xd0\x16\x2f\x83\x4b\x7d\x0d\xee\x21\x79\x57\x86\xba\x6a\x45\xdc\xa0\x06\x02\xde\xfe\x5b\x3f\xe0\xfc\x63\x29\xc2\x41\x05\x9f\x82\x47\xde\x61\x25\x6e\x7e\xef\x50\x1d\x85\x89\xb0\x49\x75\x43\xd5\xba\x30\x38\x7b\x06\xe8\x0a\x3f\x22\xa3\x20\xff\x92\xaa\xc0\x59\x32\x0a\x3a\x7f\x24\xc6\x6a\xcf\x1f\x97\x3e\x76\xd9\x25\x4e\xdd\x9d\x42\xe4\xfe\x97\xc6\x1c\x2e\xe9\x85\xb6\x1c\x54\x7f\xa1\xe3\x1a\xe9\x2c\xba\x54\x96\x10\x5c\x24\x15\x4f\x82\x9b\x2a\x4f\x1f"
		"\xd2\x33\xba\xc2\x21\xd4\xe3\x80\x22\x36\x57\x1a\x6e\x72\xf3\x7c\x73\xe6\x04\xc1\xde\x32\x6e\xa2\x43\xcf\x62\x60\xdb\xd1\xcf\x50\x5e\x2f\x31\x9f\x15\x62\xb5\xe8\xb7\xb6\x2f\xc4\x6a\x82\xb5\xdc\x3e\xe5\x46\x1d\xca\x3a\x6f\x3a\x1a\x0c\xdb\x0a\x91\x9d\x4a\xa0\x55\xc4\xb1\xf3\xbd\xb1\xbf\x1d\x0e\xe5\x38\x97\xf0\xd1\xfa\x67\x6e\x31\x44\xaa\xb1\x8b\x5f\x6f\x02\xe5\x66\x99\x9a\x9d\x52\x66\x96\x1b\x54\x22\x38\xda\x44\x6e\xa8\x9d\x86\x83\xd3\xf4\xc6\x5c\x7a\x69\x8a\x06\xd3\xf2\xe8\xf1\x9e\x77\x96\x6d\x0b\x42\xed\x57"
		"\x1c\xc1\x07\x5c\xb9\x3b\x3d\x42\x1b\x78\x91\x20\x12\x3e\xc9\x26\x70\x72\x35\x35\xed\x33\x02\x17\x49\x2b\x65\xca\x50\xed\xd0\x02\x74\xcd\xe4\x40\x1d\xe8\x15\x1f\x1b\xd5\x5a\x98\xf5\x9d\x1f\xe8\xb3\xba\xc9\x4f\xe7\x8d\x93\xe4\x38\x23\x72\x88\xbc\x18\xbd\x01\x7f\x09\x5d\x2c\x37\xc7\xae\xce\x5f\x05\x2f\xd6\x06\x7d\x30\x06\x8e\xd5\x3d\x9f\x7b\xe7\xff\x1d\xaf\xf4\xe8\x20\xb3\xf0\x43\x4c\x66\xcf\xad\xac\x79\xfc\x9a\xb2\xa6\xe7\xa1\x7d\x30\x24\x6d\x10\x99\x85\x66\x57\x09\xd4\xba\x49\x11\x4d\xd5\xc9\x8a\x91\x69\x27"
		"\x42\x41\x91\xca\xe9\xdd\xdd\xd4\xf6\xb9\x4c\x50\x4d\x2d\x1f\x74\xe7\x9e\xc4\x5d\x6a\xb8\x60\x42\x98\x98\x3e\xe2\x7d\xe7\xf8\x8d\xed\xa8\x49\x25\x49\xae\xe2\xad\x03\x80\x89\x14\xf3\x24\x1d\xdd\x5c\x21\xde\xbc\xd9\xb0\x17\x8f\xe4\x5c\xcb\xce\xe7\xcb\x67\x6e\x19\xae\xd6\xe3\x6b\xc1\xe2\x56\xa5\x27\x45\x00\xdc\x3f\xa2\x19\x6b\xed\x3a\xe8\x01\x86\xbf\x2f\xfa\x2a\xdd\x2f\x0f\x2b\x4a\xf0\x4f\xb1\xb3\x10\x60\x27\xc1\x82\xc5\x82\xc0\x66\xd7\x1c\x99\xa2\x65\x9d\x26\x02\x86\x1a\xda\x5a\xe4\x2e\x7a\x02\x54\xc4\x49\xf7"
		"\x87\x49\x25\x71\x16\xe0\xce\x24\x7a\x46\xc5\x26\x05\x56\x65\x72\xad\xc7\xcb\xef\x72\x01\xe7\x3d\x2b\xc9\x2e\xfd\x7f\x85\x9f\x48\xc9\x02\xbf\xc3\xc5\x38\xd9\xa5\xa8\x76\x7c\x81\x60\x3b\x26\x29\x93\xfb\x92\x3f\x74\x20\xfd\xad\x72\x7c\x48\x63\x18\x74\x1c\x5e\x4a\xcb\xcd\x69\x5f\x06\x24\xb3\xb2\x75\x96\x61\xf7\x5d\xcb\x8c\x57\xb3\xb4\x76\x1d\x1d\x42\x61\x87\x04\xce\xa3\x1f\x93\x0c\x88\x9b\xff\x56\x0b\x86\xc3\x9b\x15\x38\x48\xba\x1c\xda\x2d\x9d\x52\x04\x44\xc2\x58\xfc\x72\xfe\x0e\xb5\x80\xbb\x61\x03\x1c\xdf\x3b"
		"\x15\x08\xe9\x78\x5a\xf4\xe9\x78\x97\xb1\xa4\x14\x07\x47\x07\xc4\xd6\xd9\x88\xf4\xd2\xce\xcd\x42\x55\x6f\x2c\x73\xe2\x20\xba\xbe\x75\x3a\xc4\x49\x72\x40\x1d\x8c\xab\x6f\x3a\x72\xfd\x3d\xf0\x4f\x37\x39\x4b\xa5\x35\x6d\x8e\x7b\x0c\x00\xcd\xcb\x7f\x75\x66\x10\xe3\x7d\x15\x96\x52\xef\xcb\x05\xae\x5d\x73\x35\x83\x66\x12\x22\xad\xe2\x4a\x87\x19\xc5\xb1\x26\xf7\xf3\x13\x1a\xd8\xe0\xd8\xfe\xa8\xb8\xb8\x9d\x8a\x37\xe2\x0d\xeb\x61\xdd\x81\xb2\x99\xe7\xab\x21\x2f\x98\x01\x4b\xa9\xfe\x2b\xf8\x8e\x1a\x7d\x9d\xaf\x2e\xd5"
		"\xb6\xb6\xbb\xfe\x9e\x96\x31\x4e\x5e\xeb\x00\x3c\x9f\x46\x4d\x6f\xe1\x49\x66\x85\x1c\x84\x8d\x63\x82\x8c\xf2\x5a\x79\x86\x3e\x6a\xee\xf5\x3d\x8a\x86\x0a\x59\xeb\xaf\xb6\x04\x33\xa0\x64\x33\xd5\x83\xb8\xf6\x86\x56\xa5\xc0\x6d\xb1\x52\x5d\x92\xb0\xee\x99\xcc\x8f\x28\x49\xab\xfc\xb0\xe6\x6e\x2b\x41\xb9\x73\x92\x9c\xa4\xd6\xe1\x2a\x76\x8f\xcd\xd6\x70\x3d\x92\x41\xa3\x21\xc9\x0a\x92\x73\x09\x10\x98\x7b\xa6\x55\x7a\xd6\xc8\x29\x6d\xd9\x0e\x41\xa8\x86\x1b\x01\x34\xcc\xd3\x49\xbd\x41\x42\x24\x78\x9e\xac\xb2\xe3\xc4"
		"\x1f\x66\x97\xe9\x79\xe5\x3d\x43\xca\x54\xb4\xaf\x8c\xd0\x39\xaf\xe9\x5f\xf6\xb2\xc4\xe7\x94\x8b\xbc\x67\x5c\x14\x6c\x68\x56\x30\x8f\x87\xdf\x94\x14\xe5\x3a\x6c\xaf\xca\x24\x00\x5f\x4d\x96\x95\x84\x50\x71\x96\x36\x92\x20\xa9\xe9\xea\x55\x78\x61\x4f\x2e\x25\xab\xcc\xbc\x6f\xf7\x22\x84\xdc\x09\x20\x74\x82\xde\x2a\x1b\x73\x1b\xe0\xc9\x1c\x5b\x45\x23\x8d\x25\x92\xa7\x3d\x76\x3c\x16\x43\x24\x76\x08\x47\x6e\xaa\xc3\x15\xad\x6f\x65\x79\x62\x6a\xb3\xae\xfc\xa2\x29\xf2\x90\x48\x73\x57\x06\x2f\xc3\x44\xc8\x9e\x14\xc0"
		"\x00\x02\x42\xf5\x17\xb0\x75\xd8\x8a\x2f\x79\x21\x4e\x94\x94\xa0\xa0\xc6\x56\xa0\x22\x64\xd8\xae\x5f\xf3\xfd\x15\x37\x56\x1d\x7b\x08\x2c\xa1\x58\xa7\x0d\x8e\xe9\xda\xa2\xb5\x70\xf5\xe2\x50\x1e\x77\x16\xd8\xe9\xb4\x4f\x58\x08\x94\xdb\xdd\x84\x01\x12\x87\xe9\x9f\xf9\x9d\x16\x3b\x03\xac\xe2\x8f\x94\x24\xad\xbe\x9e\xdf\x0f\x2e\x97\xfb\xe1\x69\xe1\x02\x2f\x8f\x15\xd7\x62\xd3\x23\x97\xe3\x06\x46\x81\x4a\x89\xc0\x90\x02\xaa\x60\x3c\x0e\x4a\x16\xd8\xa2\x99\xb3\xec\x72\x98\xa8\x28\x89\x6e\x92\xd8\x0f\xfa\x26\xf5\x59"
		"\x29\xd2\xbf\xba\x64\xb4\xec\xba\x25\x6f\x7f\x61\x9b\xc9\x8f\x3d\xf0\x23\x30\x53\x4a\x1f\x1e\xc0\x7c\xe8\xbb\x12\xc5\x2b\xac\x14\x88\x98\x74\xdc\x38\x1a\xba\x84\x23\xe0\x75\x83\x9d\x96\xd5\x7a\x4d\x77\x5e\x3c\x6f\x7b\x95\x64\x57\x1c\x28\xb7\x54\x3a\x30\x33\x56\xa3\x7c\x1c\xeb\x64\x73\x55\xc8\x4a\x72\xe3\x93\xeb\x4c\x7c\x7d\x2d\x6d\x95\xf3\x95\x36\x39\xf8\x2f\x19\x8e\xa5\x09\x68\x17\xe0\xd7\x41\xab\xb8\xe2\x73\x77\x41\x6e\xbd\x8c\x20\x58\xfd\x03\xbe\x94\x6b\x92\x62\x2a\xdc\xe6\x1f\x6c\x8b\x60\x6f\xb3\x3c\x8c"
		"\x6e\x42\xce\xe0\x95\x7c\xf2\xa9\x99\xe8\xcb\x1e\x5f\xbd\x27\xcd\x0e\xdf\xdb\x53\x84\x23\xf5\x31\x6e\x77\x11\x64\xd1\xb6\xe9\x58\xa4\x6a\xea\x7c\x1b\x6f\xbf\x0f\xb4\x86\x06\x2f\x0d\x84\x5c\xa7\xc8\x6f\x9a\x61\x8d\x79\x0b\x74\x23\x15\xb8\xd8\xb6\x4d\x24\xec\x68\x17\x45\xc6\xc7\x3e\x0a\xee\xf8\xe2\xf7\x90\x64\xeb\x02\xd4\xca\x86\x22\x9d\x60\x67\xaf\xcb\x44\x2e\x08\x09\x47\x6f\xea\x6d\x75\xb2\x2c\x00\x5d\x43\x8d\xfd\x73\x48\x44\x2e\xa8\x38\xc7\xa1\x96\x51\x79\x49\x2d\x08\x39\x2f\x6a\xaf\xb8\x83\x1c\x31\x9a\xb7"
		"\x4f\x52\xad\x6e\x11\x29\x44\x05\xe9\xfa\x50\x59\xbc\xc1\x76\xf1\xcf\x2b\xf2\xeb\x90\x29\x7c\x1f\x03\x1d\xb9\xe3\x46\x35\xc1\x6c\x34\xc2\x6a\x01\x7b\xa9\x60\x12\x90\x8f\xa3\x8c\x1e\xb7\xc2\xd6\x78\x8d\x14\xc1\x10\xe4\x3d\x81\x54\x53\xda\x7d\x89\x9f\x47\x8d\xa7\xaf\xaf\x22\x1d\x60\xe4\x77\xca\xee\x9d\xee\xea\xa8\x24\xa4\xc0\x96\xfb\xe3\x92\x42\x81\x19\x0a\x8e\xa9\x96\xa2\xa2\x20\x03\x2f\xaa\x61\x51\x0b\x6f\x8f\xe6\xf9\xbf\xca\xcc\x36\xa4\x77\x12\xf4\x70\x36\x3b\xed\x31\xad\x51\x2d\x5d\x21\x15\x31\x62\x9e\xf8"
		"\x67\xa0\x02\x31\xd8\x24\x31\xcc\x52\x4d\xef\xc1\xca\x12\xe4\xdd\x67\x5b\xa5\x21\x31\xdc\x3a\xeb\xc5\xd1\x7d\xa0\xde\x52\x98\xd2\x6c\xd4\x18\xb8\x01\x2d\x60\x41\xa3\x26\x74\xf9\x27\x10\x26\x88\xc2\x3c\x3f\x03\x32\xab\xf3\x08\x60\x65\x12\xcb\x5c\xdd\x79\x69\x57\x6b\x64\x0c\x29\x8c\x8a\x20\x15\xba\x92\x69\x57\x6a\x76\x3e\x87\x25\xdf\xd0\x00\x19\xdc\x9f\xeb\xf5\x23\x4f\x3a\xc2\x94\xca\x6b\x94\xcf\xa0\xc2\x40\xee\x22\x52\xe3\xcf\x63\x94\xfc\x44\x58\x84\x86\xff\x8e\x39\x06\x18\x4c\x82\xb8\x3e\x8b\xf3\x8c\x04\x31"
		"\xb4\xae\xbd\xd4\x65\x66\x7f\xee\x83\x85\x2e\xf6\x51\x26\x01\x8d\xe4\x4c\xf2\xec\x5d\x8e\x57\x33\x8f\x6a\x10\x4c\x89\x8d\x0f\x9e\x02\xed\x56\x4d\x9f\x07\xa7\x86\x11\x4c\x63\xee\x34\xe2\xa9\x0b\x7e\x5b\xac\xf3\xbd\xdf\x5c\xc1\x6a\x73\x60\xcc\x13\x41\xd3\xce\x75\x8b\x10\x59\x9e\xeb\x3e\xb7\xbc\xc2\xb7\x21\xa7\x24\x56\x8c\x74\x28\x2e\x2e\x26\xb7\x2e\x87\x85\xba\x28\x4d\xfa\x4e\x70\xc2\x26\x21\xba\xe8\x2f\xcd\x34\x35\x5e\x8f\xb4\xe3\x52\xf7\xce\xb9\x6d\x2a\xeb\x5c\x95\xf6\xa2\xa3\xb7\x04\x7d\xaf\x68\x2a\x03\x34"
		"\xa7\x86\x87\xbb\xd3\xba\x6e\x76\x4e\xf2\xf8\x43\x00\xa6\x6a\xd4\x0a\x37\xb2\x71\x82\x1b\x8e\xcf\xc2\x94\xca\xbe\xd8\xd1\x25\x43\xb4\xe2\x20\x27\x45\x4c\x16\x7e\x76\x04\x8b\xc3\x4b\x02\x63\x80\x19\x80\x79\xf1\x66\x1c\x0d\xee\x28\xfa\x50\x25\x41\x56\x13\x3e\x5b\xc5\x02\x8a\x30\x59\x27\x3f\x79\xbd\x0a\x63\x91\x86\xe3\x4b\xee\x1e\xf7\x57\x40\x0a\x85\x1a\x14\xec\x1f\xc9\x43\x1d\x12\xb0\xac\xd3\x7e\x28\x38\xed\x63\x2f\xea\x92\xf6\xd0\x29\x45\x5b\x0d\xe2\x51\xbd\xd0\xde\x7a\x75\xc5\xc0\xae\x67\x77\xc3\xde\xee\x9f"
		"\x77\xa1\x03\x6f\x49\x26\x83\x9c\x21\x93\x67\x53\x83\x2d\x09\x75\x11\x85\x14\x8d\x32\x30\x26\xcc\x47\xab\x68\x01\x2b\xe9\x86\x00\x34\x2c\x64\x21\xda\x77\x56\x93\xde\x25\x6f\x65\x9c\xe5\x51\x29\xc3\x69\xfc\xb1\x0f\xd5\xca\xf9\x07\x08\xb9\x61\xcb\xae\x94\xde\xce\xfb\x90\xcc\xcb\x7e\xea\x8c\x22\x7a\xc4\x91\xaf\xd3\xed\xfb\xc8\x57\xc7\xf6\x81\xe1\xc4\x01\x61\x98\x7a\x06\xaf\x13\x32\xf0\xf3\x1a\x9f\xbf\xaf\x80\x55\x4c\xaa\x7d\x6d\x77\x50\x54\x4d\x65\x7f\x46\x8d\x15\x23\x1b\x70\x5f\xd4\x9d\x5c\xf1\x01\x96\xb6\xfe"
		"\x8a\xac\x25\xf6\x8c\xd7\xd0\xf4\x0d\x56\x79\xe8\x55\x46\x72\x60\x3f\x6e\x01\x47\x86\x28\x66\x96\x08\x47\xe6\xfa\xbb\x38\xbd\x82\x80\xd2\x68\x36\x4e\xc8\x36\xc3\xb2\x6b\xfb\xc5\x79\x7a\xc0\x4c\xbc\xc1\x3f\xb5\x6c\x30\xa3\x7c\x2b\x86\x1f\x12\x2d\x68\x61\x83\x4e\x71\x18\xa8\xbb\x65\x83\xa9\xa8\xda\xc2\x01\x48\xbb\x4f\x6a\x55\xfb\x76\x55\x1e\xba\xa4\xad\x60\xd5\x6a\xde\xaa\x53\x75\xfd\x96\x48\x17\x90\xe1\x43\x23\xb6\xed\x5c\x0a\xf1\x1f\xbf\xbe\x12\x56\x79\xb5\xc5\x25\x37\x58\x49\xfd\x18\x34\xd8\xf1\x16\x1d\x10"
		"\x32\x27\xa3\x4d\xac\xde\x85\x1a\xe7\xf3\x07\xee\x72\xbf\x6b\x15\x7a\x2e\x69\x34\xa5\x4b\xbe\x90\xd6\xc2\x2e\x47\x46\xaa\x4b\x6d\x2d\x01\x9f\x74\x71\x7b\xd0\x8a\xe8\x87\xf8\xc2\x5a\x27\xda\x94\x25\xcc\x82\x85\x2c\xf7\xce\x36\x84\x27\xea\x96\xf3\xd6\x80\xab\x59\x0d\x66\xa9\xa1\x83\x2f\xa8\xdb\x74\x5b\xdf\xc5\x6a\x4d\xa6\x1a\xa1\x0a\x58\x8e\x85\xb0\xde\x1b\x71\x13\x47\x5b\x62\x00\x20\xa2\x97\x16\x2b\x44\xca\xeb\xcc\x91\xe6\x34\xd9\xc9\xa5\x2e\xa3\x36\x93\x0a\x55\x49\xdb\x79\x37\xf0\x1c\x23\x58\x91\xdc\xe5\x66"
		"\xc8\x59\x70\x9b\x3a\x18\x22\xa2\x90\xf8\xa2\x3a\x5a\x94\x6a\x7c\xfb\xf7\x1f\xf9\x78\xcd\xe9\xe3\x05\x0f\x4a\x44\xf5\x43\xe0\xb1\xb6\x2d\xf2\xf8\x0c\x81\x82\xfa\xdc\x97\x0c\x72\x38\x8e\x47\x39\x32\x69\xc2\xba\x30\x7b\x89\x0a\x48\xaa\xd9\xf6\x33\xd7\x20\xfe\x25\xa2\x2e\xd9\x72\xda\x7b\xb7\x05\x66\x34\xe4\x23\xe1\x73\xb4\xf7\xa3\xa7\xa2\xe4\xbe\xae\xe6\x69\x76\x9a\x17\xec\x45\x64\x1f\x85\xf4\x8d\xe7\x97\xe0\x22\xb0\xa5\x56\xcc\xaa\xd1\xb7\xb6\xb6\x50\x71\x33\xe9\x7a\xc8\x50\x9c\xf1\xad\xc4\xd8\xd5\xea\x87\xbf"
		"\xbb\xd2\xd5\x10\x73\xfc\x28\xf7\xc5\x6b\x87\x41\x40\xd3\x65\xc1\x43\xad\x68\x44\x35\x05\x4d\x47\x24\x2c\x25\x46\x84\x2d\x9a\xd9\xf5\x1d\x34\x62\x6c\xdf\x29\x56\x4f\xde\x6c\xf6\xfb\x4d\xea\x8c\x96\x87\x70\xfe\x6f\x4e\x3e\x68\xfe\x5d\xed\x7f\x5d\xdc\x91\x0f\xdf\xb2\x7c\x7d\x3f\x29\x00\x82\x1a\xcb\x0d\x0f\x7f\x42\x75\xcf\x25\x8c\xc1\xf1\xd2\x8c\x55\xbf\xa5\x9f\xa2\x01\xa9\xfa\x4b\x69\xef\x99\x6c\xf3\x6f\x8f\x0b\x11\xe1\x4d\x44\x83\x60\x6c\xdf\x00\xf8\x14\xa4\x44\x04\xbd\x9e\xb1\xf5\xe6\x03\x7f\x76\xc6\xbc\xb5"
		"\x4b\x2b\xe3\x04\x70\xb2\x14\x70\x38\x2d\xb7\x6e\x47\x7c\xcb\xae\x57\x04\x1c\x24\x48\x04\x5a\x63\xaf\x9c\xd0\x9f\xd0\xc0\x41\x49\x5e\xc9\xb4\xd5\xc4\xa8\x1f\x84\x5b\xf9\x68\x68\xad\x69\x0d\x83\x10\xce\xa1\xb8\x77\x17\x18\x1a\xd2\x4f\xaf\x84\x6d\xc8\x51\x3f\x37\x99\x39\x59\xc8\xd8\xa4\x65\xec\xe9\x43\x5c\x9c\xb2\x4f\x6a\x22\xd2\x9d\xd6\xbd\x1e\xa1\x72\x34\xe9\x52\x4d\xff\x1a\x2e\xbf\x44\x3a\x1b\x78\xd3\xad\x95\x82\xce\x82\x25\x09\xab\xe8\xba\x14\x44\x10\x7d\xff\xb8\x7d\xb3\xf6\x3d\x43\xa2\x7a\x40\xd5\xd2\x7a"
		"\x17\x19\x3e\x69\xfe\xe9\xb1\xd4\xa5\x59\xca\xb3\x6a\x01\x91\x41\x85\x5c\xe7\x08\x29\xad\x41\x93\x9d\xd7\xa3\x5f\x3e\xbc\x9c\x37\xf3\xe4\x4c\x03\x7e\x95\x9a\xf8\xe7\x04\x5e\xd3\x5e\xbd\xd0\xf4\x84\x28\x6b\xc8\x3d\xf5\x11\x55\xcf\x47\xe2\x6e\xa7\x8f\x08\x75\x2e\xe5\x1a\xbf\xd7\xfe\x67\x27\x22\x2e\xdd\x66\xe1\x5b\x5a\x7c\x54\x52\x6e\xe5\x4a\xee\xb1\x0c\x56\x20\xca\x4c\xea\x23\x5f\x4e\x85\x2f\xa6\xbd\x98\x4b\x46\x33\x13\x7f\x39\x7f\x2c\x6d\x47\x06\x01\x2c\x75\xf2\x9f\xe2\x58\xc9\xa6\x32\x92\xd3\xa6\xa9\x10\x5c"
		"\x37\x6c\x6d\x58\x6e\x61\x9e\xcb\xd6\x13\x66\xba\xc7\x1f\xd7\x18\xb7\x14\x89\x53\xfb\x8a\x20\xca\x5e\x1d\xf9\x57\xb9\xf3\x7b\x03\x52\xd3\xda\x65\xfb\x49\x57\x58\x03\x4d\xda\x83\x42\xd0\x08\xd5\xa3\xef\x8e\x1b\x69\x54\xb5\xae\xd3\x7a\xba\x23\x50\x58\x83\x2a\xf0\xa4\x98\xd4\x6a\x4b\xe7\x1e\x8d\x78\x35\xa7\xb0\x40\xd7\x83\x2a\x1a\x70\xe2\x48\x48\x42\xa7\x1b\x85\xd1\x26\x53\xdd\x7c\xaf\x6d\xc2\x9c\x83\x79\xfe\xc7\x67\xaf\xc3\x08\x53\xd7\x0c\x92\xeb\x69\xc6\x8e\x44\x76\x0d\xef\x2f\xa5\x5f\xdc\x00\x19\x3d\xf2\x8b"
		"\xc0\xd0\xa6\x8b\xf9\xa1\x6b\xdf\xfe\xaa\xdb\x8c\xad\x64\xce\x99\x27\x71\x68\xb9\x8f\x59\x64\x2f\x5c\x61\xf0\xa4\xf1\x1a\x21\x6d\x7a\xdd\xf1\xcd\xf5\x0a\x31\xe3\x58\xdf\x98\xab\xbe\x35\x30\x32\x68\x62\x52\x18\xf6\x55\x41\x21\x7f\xd7\xe5\x10\x8a\x71\xf8\xd5\xa8\x1d\x67\x3a\x51\x1f\xb0\xb2\xd1\x49\xb4\x51\x43\xe2\xc1\xd9\x7a\xe5\xec\x92\x58\x2a\x4d\x32\x3e\x51\xfb\x0d\x03\xc5\xf5\x3f\x89\x1a\xc8\x38\x87\x83\x78\x52\x14\xe8\xa8\xc4\x1a\x05\x6b\x01\x17\x0c\xca\x7b\x51\xa4\x28\x92\xd7\xa8\x4f\xaa\xfe\x36\x3d\xdb"
		"\x90\xa0\x91\xb9\x94\xa5\x7c\x36\xa5\x20\x01\xf1\x0e\x66\x54\x95\xe3\xf8\x6e\x36\x80\x97\x5a\x79\x4e\x38\x9a\xc1\xc1\x0d\x18\x32\x1f\x22\x0d\xc8\x7a\xa2\x34\x2d\x20\x22\x8a\xd8\x7b\xdb\xb0\xe7\x6b\xaa\x8e\x8f\x97\x3c\x2f\xe3\x3c\x38\xa7\x6e\x74\xe3\xa4\x84\xc1\x79\xcf\x87\x2f\xb1\xd2\x86\x6e\xec\x46\x4e\x90\xc5\x94\x34\x15\xcd\x0d\xfb\x51\xeb\xe2\x21\x8e\xcb\x5e\x6a\xef\x90\x8b\x74\x79\x58\x77\x41\x4c\x35\x6b\x93\x62\xbf\x61\x17\xbe\x24\x27\xc2\xb6\x8e\x30\x9a\xb4\x2e\xa8\x15\x7b\x6c\x1a\xdb\x59\xd8\x04\x9f"
		"\xc3\xae\x95\x1d\xe3\xdf\x82\x11\x2a\x32\x17\x3c\x4a\x40\xad\x8f\xa0\x19\x67\x99\x50\xa8\x1a\x7a\xe1\xaa\x34\xbf\x7c\x5a\xca\xbe\x37\x6e\x75\x38\x02\xf0\x14\xc3\x89\x84\x16\x9a\xc6\x45\x16\x34\x8b\x75\x34\xc5\xbf\xd5\x80\x53\xa3\x85\xec\x68\x96\x22\xc1\x93\xc2\x9d\x36\xcf\x17\x05\x03\xca\x7a\xa2\xec\xb1\x7a\xf1\x93\x79\x42\x18\x1b\x39\x84\xe4\x71\x0d\xdc\x17\x53\xd1\xc0\x21\x7a\x20\xbe\x52\xc6\x05\xe5\x95\xf7\x5c\xf1\xa5\xec\x60\x86\x3a\xc7\x7e\xa1\x50\xe1\x3f\x5a\xe8\xe3\x84\xfc\x49\x50\xf6\x29\xfb\x89\x4c"
		"\x77\x57\x04\x74\x45\xbf\x04\x07\xb8\x09\x21\x03\x5b\x94\xd2\x1b\xb3\x26\x35\x17\xb0\x8e\x16\xe4\xfb\x60\x7f\x43\x5e\x3a\x10\x7d\xca\xe0\xfb\xcc\xbd\x24\x3f\xfa\x57\x18\xd1\x8a\x88\xba\xe4\xae\xf6\x41\xae\x84\x91\x1c\x60\xf6\x20\x3d\x91\x4d\xa3\x3f\x49\x3f\x2e\xde\x9b\x17\xaf\xb3\x28\xe3\x96\xc8\x90\xd1\xa0\x98\x23\x4d\xe7\xcc\xad\xee\x74\x27\x2c\xbe\x63\xfe\x50\x4c\x11\xfe\xc4\xb6\x34\x95\x15\x8f\xe3\x0c\x63\xd9\x63\x7e\xab\x6f\x5e\xef\x12\xd0\x84\xef\x87\x5c\xd5\x2c\x09\xe4\x69\x5b\xc6\xcc\xec\x93\x4e\x17"
		"\x2e\xf6\x27\x94\x11\xb4\x7b\x6b\x2b\x4e\x4d\xdd\x70\x40\xce\x0f\xce\x2c\x52\xb0\xb0\x65\x1e\x9c\x8e\x60\x68\xf2\xd6\x68\x7b\x61\x08\xce\x0a\xa0\xa6\xa2\xcf\x8f\x00\x0f\xa1\x99\xe5\xd7\xf7\xeb\xe9\xb4\x77\x97\x78\x88\xcf\xe8\x5b\x9b\x57\x9b\xb7\xae\xd8\x91\x10\x1c\xe7\xc9\x47\x9f\x67\x0f\x46\x91\xc1\x99\x43\x8f\x8d\x71\xc4\x7b\xb6\xd2\x9b\x3a\x73\x42\x51\x43\x28\x5c\xdd\x80\x51\xd8\x64\xb6\xa2\x9f\x61\x61\xba\x21\x31\x38\x38\x42\xb3\x23\x17\xa9\x61\x5f\x69\x0c\x3a\xd5\xc7\x37\x6f\xab\x22\x04\x6b\x69\xa3\x2f"
		"\xd0\x8f\xf9\xa8\xa2\xce\x90\xef\xe2\x99\x4d\x1c\x5d\xf6\x5b\x9f\x0f\xd6\x53\x97\xde\xdc\x11\x86\x06\xec\x0a\x02\x2a\xf9\xde\x5d\xf3\xe0\x6e\xa1\xdc\xb1\x4f\x81\xb3\x68\x9d\x24\x32\x9c\xd8\x9d\x5e\x99\x9d\x89\xc8\x88\x9e\x9a\x3f\xc8\xd3\xe9\xba\xf5\xdf\x14\x0a\x8a\x48\xcc\xd5\xd2\x94\x78\xfa\xd2\x14\x0b\x4d\x2b\x27\x2e\x92\x86\x4c\x30\x2e\x13\xa9\xf3\x31\xbf\x30\x98\x51\x4b\xf9\x48\x12\x92\x66\xe5\x57\xc6\x90\x29\xb3\x5a\x71\xdc\xaa\x8a\xfd\x76\xe3\xa2\xa8\xfb\xdb\xef\xa0\x89\x7a\xa3\x1a\xb3\xeb\xb6\xf0\xb6"
		"\x2e\x2d\x64\x0e\x22\x3e\x2c\x5e\x74\x88\x5c\xae\xad\xf3\x42\xa7\xa4\xa3\x03\xaa\x8e\xe6\x03\x97\x97\x1b\xcd\x62\xf2\xb0\x48\xbc\x8d\xd1\x28\xcc\x6b\x27\x2a\x14\x23\x50\x47\x54\x41\x2a\x42\x13\x4d\x96\xaf\xa9\xbc\x81\xfd\x32\xfc\x2c\xec\x45\x44\xd6\x1c\xa4\x40\x46\xa9\xd2\x8c\x5d\xa9\xd8\xbe\x1c\x10\xec\x74\x44\x68\x53\xb5\x44\xec\x00\x6d\x2b\x00\x9a\x91\x81\x6f\x9a\x12\xbd\xbf\x30\x1e\x29\x9d\xdc\xa5\xa1\xaa\xe2\x69\x8c\xa6\x7e\xca\x9d\x8c\x06\x2c\x6f\xba\xf8\x55\x55\xd3\xc4\xe8\xb5\x34\xaf\x1a\xfb\x33\xa1"
		"\x0e\x67\x41\xbd\x6f\x16\x6f\xce\x7e\xa1\x6c\xd2\x07\x65\xbc\x94\xbf\xb9\x8e\xc0\x89\xd8\x90\x4e\x3f\x9d\x46\xaf\xad\x54\x78\xd9\x90\x66\x47\xf1\x63\xec\x21\xf7\x4f\x56\x41\x5a\x43\x47\x4d\x9e\xa1\x7b\x2b\x33\xcf\x07\x6a\x9b\x3f\x5c\xa6\xc5\xcf\x13\x6d\x56\xd7\x42\x6d\xa5\x1f\x5c\xba\x48\xbe\x33\x30\x5a\xdd\x7f\xd8\x8d\xb2\xf4\x88\x76\x55\x8d\x22\xdc\x1d\xbd\x0c\x63\x3c\xf9\xa3\x3d\xd8\xfa\xa5\x96\x8f\x61\xf8\x9f\xb3\x4a\x82\xdf\x15\xc0\x3a\xff\x7d\xc2\x72\x52\xba\x3f\xc1\x14\x94\xd3\x29\x22\xc0\xb5\x50\x2c"
		"\x27\xed\x39\x8e\x71\xd6\x5e\x0b\x58\x21\x13\x27\x21\x64\xcc\xd3\x18\xef\x96\x64\xb7\x90\xfa\x8d\x92\x08\x40\x3b\x06\x6e\xf2\x85\xe0\xda\xd6\x33\xa1\x8e\xe6\xf2\xe6\x72\xaf\xcb\x01\xd7\x8c\x13\xbc\x9c\x2e\x5b\xe4\x88\xd6\xc2\x77\x87\x22\x96\x7c\xb7\x44\x27\xfb\x70\xba\x08\xc1\xd9\x34\x7e\x22\xcb\xa9\x51\x3f\x24\x94\x69\xf8\x39\xb3\x31\x8f\xad\xe4\x11\xb0\x41\x6d\xc1\xe4\x23\x10\x3d\x88\x1e\x9d\x24\xfc\x5e\xc3\x0e\x68\xab\xb1\x42\x3c\x41\x1c\x1f\x94\x23\x24\xff\x9d\xc9\x3f\xd7\x4f\x18\x31\x22\x7a\x0e\x0a\x6d"
		"\x51\xeb\xf9\xf4\xb6\x4e\x33\x84\xf8\x57\xc8\x00\xc2\x80\xd7\x9f\x93\xeb\xf7\xc1\xa4\xcd\xb8\x7f\x1b\x2d\x5a\x2c\xee\xa7\xa7\x33\xcb\x67\x19\xd2\xeb\x32\xd8\xa4\x56\x0c\x73\xdb\xfa\x4b\xaa\x27\x03\x61\x52\x35\x65\xef\x14\x9e\x77\x5a\x5e\x1e\x03\xee\x2a\x27\x04\xc1\xa9\x6d\x1e\x62\x02\x08\xef\x0f\x98\x7c\x15\x3b\x56\x2f\x3e\x48\xf6\xea\x48\xdf\xad\x14\x9a\x81\x3e\x5c\x85\xa3\x5a\xb6\x72\xb8\x30\x44\x08\xf4\x8c\x97\xdd\x5a\x0c\xb5\xc0\x5a\xa7\xe9\x45\x4c\x0f\x40\xa4\x98\xec\x09\xf6\x9e\xad\xdd\xd3\xef\x70\x1b"
		"\xef\xf9\x3e\x59\x97\xed\xe4\x4c\x26\x57\xde\xf2\xaa\x47\xc7\x29\xca\x85\xb5\x95\xe2\x02\x5a\x0f\x01\x8e\x05\x5e\x45\x5b\x4b\xaa\xb7\x15\xa2\x6a\x6f\x75\x67\x95\xb7\x7e\x3c\xb4\x58\x3d\x01\xdd\x42\xf3\x08\xc1\x19\x4c\xaf\xd2\xee\x0c\xd6\x2d\x0a\x86\x63\xe7\x09\xa1\xa5\xaa\xce\xaa\x21\xaf\xb0\x66\xfc\xce\xa9\xc7\xe0\xf9\x71\x66\x76\xbe\x2a\xb8\x40\xaf\x1c\x85\x59\x67\xa6\xb3\xf4\xbf\x3a\x8e\x2e\x40\xdb\xec\x7b\x83\x46\x18\x67\x87\x8a\xa1\x57\x5e\x22\x8c\x27\x1f\xad\xc0\x1d\xe8\xe2\x10\x94\xc7\xe3\x28\x30\x0b"
		"\x89\x9c\x3b\xeb\xed\x16\xaa\x4c\xdd\xf5\x4c\x5d\xa6\x18\xc6\x5b\xbd\xa5\x1c\xeb\x8a\x19\x87\xcc\x9b\x40\x7e\x2c\x3f\xd1\xf7\x60\x4a\x22\x25\x7a\xce\xda\x4f\x33\x9e\xbe\x21\xc4\x8c\x7f\x7d\x2c\xff\x1c\x0d\x75\x0c\xb5\x15\x17\xa1\xf9\xc9\xba\x29\x21\xfc\x03\xba\xbf\x31\xb4\x70\x42\x10\xc9\xb4\x1f\x88\x8b\x3e\xdc\x9f\x86\x1a\xc2\x9c\xc7\x83\x2b\x5a\xae\x5f\x0f\xd6\x39\x88\x01\x2f\x48\x26\x33\x34\x2f\x28\xf7\x43\x8c\x9e\x4a\x80\x79\x77\x5f\x2f\x66\xfe\xb2\x01\x63\xcc\x6a\xa1\x3f\x58\xe4\x15\xf5\x1d\x9a\x20\x9b"
		"\xfd\x4a\x6a\xd2\x73\xdb\xa1\x01\xcb\xe3\xa2\x01\x01\xb3\x04\x3a\xba\x3b\x48\x50\xda\x7d\xcd\x19\xfd\xe8\x1d\xb2\x92\xd1\x12\xe3\xca\xa6\xba\xef\x69\x5f\x93\x21\xbc\xe8\x8c\x9b\x3e\x6f\xb5\xcc\x16\x8d\xe9\xdc\x23\xaa\x8b\x23\x55\x77\xde\xf9\xab\xc3\xa6\x88\xe1\xe5\xe8\xa2\x19\xb8\x61\x3b\x6f\x35\x43\xd1\x76\x8c\x91\x52\xc1\xfb\x48\xd1\x76\x58\x98\x52\x74\xc2\x74\x67\x8a\xbb\x96\x64\x8d\x03\x2f\xff\xa9\x5c\x7d\xef\x54\x6d\x8f\x4b\xaa\x29\x2e\xc8\xa1\xfa\x18\x4b\xc5\x7f\x39\x1e\x9c\x23\xef\x86\xee\x41\xd3\x4d"
		"\xf5\xcf\x5e\x76\x22\xdf\xc1\x50\x26\x5a\x33\xb5\x20\x11\xec\x9b\xd2\x66\xfd\x60\x13\x23\xfc\x0e\x3e\x91\x5d\x0b\xfa\x3c\xff\xcc\xd1\x64\xcd\x95\xb5\xc6\x8c\x56\xf8\xbf\x6d\x55\x23\x28\x38\x95\xdb\x29\x48\xa5\x37\x02\x92\x3e\x6a\x97\x17\x2e\x18\xb5\x40\x2e\xa1\x26\x98\x8e\x41\x9b\x70\xa7\x02\x43\xa1\x2e\x61\xeb\x8f\x3d\xb3\x4e\x10\x18\x0a\xa6\xf8\xc0\x32\x66\x0d\x7b\x18\x1a\x74\x9f\x66\xe9\x3e\xa3\x62\x67\x7a\xbc\xa5\xb8\x34\x41\x17\x5a\xc0\xbc\x5b\xd0\x09\x7f\xb3\xe9\x36\x69\xea\xfa\x6b\x74\x36\x14\xd4\x77"
		"\xb6\x46\xbe\xc8\xf5\x05\x5b\x85\x15\x91\x11\xa8\x5e\xe0\x6d\xab\x6a\x78\x73\x82\x1e\x85\x7d\x5f\x93\x63\xc7\xe4\xbc\xc0\x0e\x83\x22\x7b\xa2\x01\x63\x9a\x68\x03\x52\x17\x7f\x5c\x21\xbc\x0e\xf0\x15\x92\x51\x03\x16\x4b\x98\x63\x05\x27\x58\xdb\xd5\x58\x0e\x98\x72\xdd\xc2\xd6\xd6\x53\x08\x6a\x91\xac\x24\xb2\xe2\x75\x30\xe2\x27\x90\xec\x00\xca\x7e\x11\x09\xdf\x9a\xfa\x7b\x7b\x96\x45\xda\x16\x15\xdd\x17\xd2\xe5\x20\xac\xce\xa1\x8c\x70\xbb\x03\xf1\x4f\x4d\xe7\x4f\x0e\xc8\x03\xd4\xda\xc2\x37\x59\xed\x50\x7b\xcd\x99"
		"\x97\x99\xae\x19\xfe\xa8\xeb\x40\x04\xbf\xd5\x38\x31\xbb\x96\x83\x3c\xa8\x5e\x56\x0f\x79\x97\xd8\x0d\xd0\x71\xcb\x96\x29\x70\x9f\x5d\x14\x7f\xa5\x08\x07\x82\xd5\x67\xd3\x2c\xd8\xc9\x96\x8a\xaf\x5f\x25\x31\x62\xcb\xeb\x8e\xb9\xb9\x7a\x32\xf1\x58\xea\x9a\xbc\x90\xcd\x38\x53\x6e\xd3\x19\xce\xd4\xa7\xcf\x8b\x83\xf0\x35\x44\xe0\x2e\xb7\xdd\x67\xe0\x60\x31\x67\xca\x8c\xb7\xa6\x7a\x66\x1a\x9a\xcf\x81\xba\x47\x3a\xae\x04\x82\xf3\x5e\x6b\x99\x8a\xbb\x56\x9e\xeb\x38\xca\x83\xc3\x4c\x6a\x71\x65\xee\x37\x80\x50\x31\x53"
		"\x70\x81\x9d\x13\xfa\x28\x72\xb8\x4c\x41\x0c\xdc\x2c\x57\x29\xce\x05\x02\xbe\x38\x2a\x7d\x1a\x83\x03\x48\x7b\x16\xc2\xf2\x1d\xc1\x35\xc4\xf8\x45\xa5\x08\xdb\x98\xb7\xd2\xc0\x2b\xef\x56\x15\x50\x35\xc8\xf2\x13\x05\x4c\x24\xab\xda\x34\x5c\xdc\x4d\x91\xeb\x8a\x20\xb5\xa9\xe6\xd8\xd7\xa7\xf0\x09\x51\x4d\xa9\x36\x5f\x21\x20\x0b\x8b\x92\xf3\x25\x93\xa9\xda\x34\xf0\x20\xa4\x9d\x2a\xdb\xb0\x52\xd0\x75\x9b\xbf\xff\x31\x82\x89\x73\x17\xa7\x28\xab\x98\x49\x5a\x49\x8e\x52\xdd\x88\xa8\xbf\x4f\x7c\xe6\x4c\xf0\x91\xc6\x9b"
		"\xf1\x43\x5b\x4f\xc4\xde\xeb\x57\xff\x05\x85\xef\x9d\xb9\x23\x5d\xdf\xaa\xb2\x48\x34\x74\x3e\x9d\x32\x1f\xf1\x3f\xae\x18\xf1\x7f\xdb\xa5\x2e\xb7\x8f\xff\x5e\xe9\x7e\x4f\x15\x32\x79\xa6\x31\xb5\x5f\x17\x6e\xf3\xf8\x63\xb6\x67\xc3\xd7\x60\x1d\xef\xdb\x1e\xa4\x73\xa7\x75\xb8\x39\x68\x3d\x01\x39\x25\x91\xdd\xa8\xbe\xef\x70\xd7\x74\x87\xa8\x23\xb0\x2b\x7f\x8e\x60\x02\x3b\x02\x90\x58\x1f\xff\x3b\x90\x30\x6e\x28\xfe\x3e\xbf\x22\x79\xe7\x69\xe1\x2d\x38\x95\x25\xae\xe3\x81\x29\x1e\xd3\xb1\xb0\x5d\x65\x3e\x46\xa0\x0a"
		"\xe3\xa5\x20\x25\x57\x44\x15\x6f\xe6\x27\x30\xd9\xc0\x3c\xc3\x7c\x39\x08\xa8\xf0\xd3\x93\xde\x50\x35\x91\xef\xd0\x5b\x16\x9d\x0d\x99\x07\x9a\xd6\x6b\x80\xff\x99\x0f\x69\xe4\x68\x23\x6f\xe8\x8c\x08\xdc\x9c\xdc\xd7\x02\x42\xa4\xc2\x88\xb6\x37\x3d\xb7\xb0\x32\x13\xc4\xa5\xf3\x26\x1a\x89\x9d\x80\x2d\xc7\xf9\x4f\x40\x2d\x75\x4c\xd3\x2c\x36\x9b\x1b\xc9\xe3\xdb\x41\xfe\xa7\xf4\xf4\x86\xf3\x7d\xf7\x46\x96\x56\xf4\xf5\xa3\x3c\x8a\x35\xc2\xce\x3e\x02\x70\x97\xbc\x60\xc9\x7f\x93\xd1\x1a\xa1\x10\x1b\xa8\x5f\x0b\x65\x8a"
		"\x1d\x65\x77\x04\xbf\xdb\x4e\x77\xd0\xe2\x0c\x3c\xbc\x0d\x7a\x24\xc6\x39\xce\x8f\x56\x23\x85\x3b\xe5\xe6\x1b\xef\xd7\x9e\x46\x34\x30\xf3\x87\x94\x99\xa7\x4d\x9a\x80\x57\xb6\xa3\xa7\x23\x77\x33\xee\x30\x87\x35\x45\xdc\x0d\x9b\xfa\x74\x0b\x34\xb9\xf3\xc8\xaa\x5d\x37\xdd\xbe\xd9\xf0\x90\xfc\xe6\xf3\xe4\x66\x92\x25\x72\xee\x77\x40\xe9\x4c\x15\x67\x89\x9e\x01\x6e\x8b\xd6\xa9\x7f\x0b\xa7\xef\x37\xf2\x2f\x59\xcd\x98\xf4\x0e\x06\x64\x0d\xd8\xbf\xef\xac\xcb\x69\xd5\x23\xb0\x2c\xde\x3c\x49\x35\x64\xb5\x3a\x77\x69\xa1"
		"\x5d\x00\x99\xbb\x05\x14\x98\x03\x83\xe0\x50\x89\x20\x37\xb0\x0a\x79\x3c\xc1\x1c\xb3\x70\xd8\x1a\x4d\x80\x6c\x18\x1f\x3d\xd7\x84\x50\x5f\xc1\x05\x3c\x5f\x68\x92\xa3\x67\x17\x59\x4f\x06\x1c\x2c\x11\x30\x5b\x88\x7d\x4d\x4c\xe2\x4f\x7c\x23\x48\x96\xeb\xe1\x51\x33\x11\x52\x6f\x96\x7e\x84\xc5\x56\x5a\x49\xc0\x31\xd3\x20\xd4\xfe\x55\xd2\x8e\xb8\xee\x76\xce\x3d\x4c\x27\x34\x96\x7d\x82\x71\x81\x65\xba\x93\x7d\x10\x18\x96\xc4\xaf\x08\x29\x48\x89\xf9\x5e\x22\x70\x95\x73\xe4\x20\xa7\x8a\xf0\x86\x1c\xbd\x50\x9f\x29\x00"
		"\xef\x7e\x4d\xf7\x11\x77\x6f\xf8\x54\xbd\xb7\x6e\x62\xa1\xf5\x52\x71\xc7\x3c\xde\x56\xc3\x14\x37\x12\xb3\x40\xdf\x43\xf3\xb8\x23\xc9\xa3\xb0\x99\x34\x0b\x62\x81\x85\xa6\x8d\x38\x1a\x05\x94\x8f\x42\x29\x2e\x68\xc8\x1f\xc3\x08\x5f\x08\x07\x07\x09\xd8\x26\xc4\x6e\x82\x44\x14\x5e\x71\x07\x38\xdf\xb2\xf1\x88\x7b\x9f\x06\x18\xbf\x4d\x4f\xea\xbc\x7f\x57\x69\x0c\x1a\x0c\x41\x04\x29\x8d\xf0\xc6\xd0\x99\x5c\x07\xbb\x78\x0b\x40\x00\x4f\xa6\x7c\x77\x74\xa5\x6b\xda\x2b\x86\xa5\x22\xf2\x79\xea\x8f\xe3\xf1\x25\xea\x88\x4d"
		"\x3b\x3d\xf9\x91\x0f\x7a\xf3\xe1\x2a\x8e\xbc\x59\xb8\x33\x59\x81\xbc\xa0\x50\x89\x0c\xcd\xe6\xd8\xea\xc5\x96\x27\x46\xb9\x72\x87\x2c\x3a\xb7\x64\x94\x60\xc8\x44\xf4\x7d\x14\xac\x7a\x89\x6d\x88\x2c\x2f\xa3\xd9\x6b\x65\xb3\x2b\x8a\x57\x62\x3e\xee\x80\xc1\xd1\x74\x34\x33\x7d\x94\xf6\x77\xd2\xb6\x05\xa5\x2b\xa1\xfc\x9f\x52\x30\x29\x7c\x48\xcf\x76\x1d\xe2\x55\x35\x8c\x23\xcd\xa5\xa3\x21\xea\x09\xab\x3b\xcd\x71\xf4\xa3\x51\xfe\x1f\xd3\xac\xea\x9e\x98\xf4\xb9\x23\x6a\xc2\x19\xba\x56\x4d\x39\x9e\x6a\xc8\x37\xe5\xf8"
		"\xae\x74\x9e\xac\x85\xb2\x1e\xf4\xd1\x78\x69\x85\x82\xaf\x4c\xfd\xf2\x32\x60\x1f\xc9\x3c\x39\x15\x52\x90\xb6\x5e\xec\x6e\x81\x38\x6c\x82\x4b\x2d\x8d\x0e\xf9\x0b\xfa\x11\x22\xce\x63\xf7\x8b\x13\x2b\xd9\x5c\xa6\xe0\x1e\xfc\x1b\xce\xed\xe2\xc5\xd6\x24\x6f\xc8\x94\x79\xb3\xa2\x8e\xe2\xfd\x7a\x06\x9a\x38\xea\x8c\xda\xed\x61\xe4\x69\x12\x84\x78\xa6\x4b\xfe\xb5\x39\x0e\x19\x48\x07\x57\x42\x1b\xa3\x0b\x65\x7e\xf6\x0d\x67\xe1\xed\x5f\x20\x07\xf0\xd6\x8d\x2a\xfb\xa3\xf1\xe1\xbb\xe2\x4a\xf6\xd8\xbe\xc1\xde\xa6\x68\xa6"
		"\xae\x49\xb8\x03\xed\x84\xcd\x09\x91\x18\x5c\xf9\x17\x04\x0c\xbf\x05\xd2\x04\x01\x91\xf9\xb8\x03\x8b\xf9\x1b\x59\xa8\xa9\x0b\x73\xad\xff\x22\xb2\x3d\x2a\xa8\x0b\xa5\x7b\xd3\xad\x08\x95\x90\x91\xfb\x7f\x00\x32\xb9\x11\xfd\x71\xf5\x33\x4d\x2b\xfc\x95\xf4\xd0\x8f\x4b\xee\xe5\x00\x2f\x16\xf7\xc5\xf1\x58\x58\x9e\x11\x97\x38\xcf\xa6\xa6\x00\x20\xd9\xbe\x65\x36\xc5\xeb\x19\x09\x9c\xbd\xac\x80\x6b\xc3\xa1\x02\x2f\xd5\x3e\x08\x0f\xce\x87\x9e\xbb\x60\xcb\x38\x5f\xb6\xf0\x7f\xbb\x45\xf6\x91\x88\xaa\x6b\x98\x13\x0a\xe8"
		"\x18\xa2\x5d\x1e\x39\x21\x4d\x5b\xb2\xc9\x21\x9f\xdb\x94\x0e\x8c\xaf\xd5\x92\x42\x41\x03\x70\x62\x5f\xb4\xc0\x46\x2f\x47\x21\xfe\x29\x6b\xaa\x96\x8b\x41\x67\x92\xd4\xea\xa4\xa4\x11\x27\x53\xfd\x3f\x0a\x8d\x0e\x8c\x4c\xdb\xa4\xc3\xd0\x31\x7b\x8d\x3f\xb4\xc8\x1b\xbb\xb9\xbf\x10\x6b\xd0\xc3\xbe\x67\x1c\x9e\x03\x34\xbf\xad\xa6\x26\x1b\xe1\x07\x6a\x04\x82\x71\x60\x9c\xd9\x47\xa9\x28\x2d\xda\x4d\xe6\xfc\x93\x2f\x77\xa3\x09\xfc\x0e\x24\xa1\x30\x03\x4c\x0b\xac\x45\x62\x6a\x26\xe7\x09\x97\x1d\x60\x4b\x79\x61\x26\xcb"
		"\x66\x1d\xba\x70\xb5\x32\x58\x2f\x65\x27\xcd\xfd\x79\x28\x57\x42\x4e\xd6\xd3\xb4\xac\x80\xd0\x91\xc4\x4f\xe3\xc9\xd9\x6f\xb4\xd6\x3f\xaf\xb7\xfb\x91\xc5\x33\x02\x00\xee\xd7\x47\xa1\x70\xa5\x45\x09\x1e\x34\x80\xcd\xa1\x7e\xfc\xa7\xd5\x4a\xda\x35\x20\x01\x0e\x2e\x50\x1d\x42\xfd\xb3\x61\x3e\x61\x6d\x6d\xa1\xd9\xa3\xc4\x45\x2b\x40\xde\x11\x5b\x0c\x7b\x16\x6d\xf8\x8b\x19\x58\xd9\x6f\x3d\xa8\xed\xe5\x45\x32\x5b\x9d\x2d\xbb\xdd\xb1\x39\x30\x47\x84\x12\xe2\x4d\xa9\x60\xad\x0d\x3c\xe9\xc4\xea\xcb\x0b\xae\x98\xcb\x29"
		"\x1a\xc9\x7e\x6b\xc2\x41\x47\x3b\xa8\xb1\x97\x6b\x8c\xc3\x10\x3b\xbd\xaf\x1a\x4a\x05\x63\x89\xa4\xfb\xff\x11\xcc\x9e\x9d\xa2\x6f\x1b\x7e\x38\x27\x3c\x91\x15\x0a\x23\x0a\x3d\x68\xa4\x26\x98\x77\x2a\x14\x5e\xc1\x20\xaf\xfa\xc9\xcd\xc7\xa3\x0b\x8f\xc0\xf3\xfb\x05\x67\x7f\x33\x87\xee\x49\x1f\x90\xbf\xef\x63\x36\x20\xbe\x0f\x4e\xa1\x9a\x49\x7f\x55\x71\xac\x7b\xae\xfd\x33\x79\x3d\xd5\x83\x47\x68\xc3\x70\x34\x5a\x50\xda\x5a\x40\x79\x2b\x9c\x3c\x70\x83\x04\xc9\xbf\xcc\x54\x7c\x33\xf7\x04\xd8\x41\xe7\x55\xfe\x75\x02"
		"\xf7\xb5\xca\x9f\x5f\xab\xb7\xd8\x50\xfb\x05\xda\x5b\xeb\xf2\xb5\x51\xac\xaf\x6a\x4d\x08\x52\x5b\x2e\x87\xaf\x4d\xd5\x2c\xbf\x69\x44\x4c\xf6\x40\xd4\xd5\x78\x22\x9a\x96\x87\x2d\x5a\xb6\x82\xbd\x65\x5b\x72\xc7\x7c\x3a\xac\xf9\x48\x06\x9a\x1d\xad\xef\xa2\x82\xb2\x83\xd9\xa8\xd1\x78\x76\xc8\xd3\x5c\x3d\xe8\x94\x16\xa1\x0d\xbb\xa9\x57\xa6\x7c\xa9\x7e\xa5\xb9\x55\x5a\x6d\x60\x0f\x09\x13\x08\x55\x66\x85\xb5\x6b\x11\x88\x36\x95\xf7\x92\x57\x15\xe9\xa5\x4d\xf3\xd4\xd2\xfd\x19\x41\xaf\x93\x61\xb9\x56\xfc\x35\x1b\xd0"
		"\x7f\x9e\x23\xad\xd7\x02\x29\x2f\xa4\x23\xf0\x48\x72\x57\x65\x46\x62\x5f\x38\x2f\x4f\xd3\xdd\xef\xcf\x66\xc7\x6b\x5d\xef\xd9\xab\x8e\xb6\x06\x31\xb5\x43\xc7\x1b\x17\xd1\xf4\x73\x36\xb4\xee\x26\xba\x71\xd9\x43\x7d\x73\xf4\xc4\x0c\xed\x2c\x73\x6d\x69\x8b\xe5\x37\xca\xc9\xf5\x40\x44\x18\xc8\xca\x4e\x1a\x0f\x38\x18\x82\x58\x74\x23\xef\xa8\xfe\x46\x11\xde\x76\x8e\x51\x21\x71\xca\x35\x3b\x32\xa6\x3a\x14\xb2\x93\x01\x0f\x61\xc4\x1a\x07\x14\xf3\x56\x93\xe7\xbc\x34\x59\x21\x90\x86\x7e\x4b\xaa\x0b\xf4\xbe\xc6\xc5\xe1"
		"\x1f\x94\x0b\xe9\x73\xf0\x7b\x44\x6d\xaa\x09\xb0\x78\x62\xa3\x70\xe8\xc9\x54\x05\xb5\xe2\xa2\x39\x1b\x8f\x4b\x3f\x31\x67\xa4\x4c\x10\x1e\xf2\xb7\xf9\x8d\x30\x26\x08\xbc\x50\xb8\x76\xfd\x5c\x05\xd6\x05\xec\x52\xbc\x94\xb0\xcb\x37\x89\xf2\xbc\x69\xa6\x82\x3e\xd3\x8b\x28\x4e\xa0\xca\x11\x50\xad\x3a\x3b\x10\xc0\xf6\x72\x6e\x85\x39\x86\x54\xdd\xde\xe8\xec\x53\x0c\x1a\x88\x97\x8a\x03\xbb\x27\x67\x3a\xc0\x32\x4e\x0e\xc8\xe5\x3d\x0d\x32\x7c\x89\xff\x21\x91\x88\xbf\xb9\xb5\x76\xa4\x90\xfb\x8a\xf8\x6a\x7e\x27\x8d\x73"
		"\xdb\x8f\x8e\x16\x7c\x2e\x08\x21\x2a\x68\xc4\xfc\xe6\x64\x2c\x28\x25\x83\x12\x51\xcb\x72\xc4\x9c\xd2\xbd\xd9\x95\x40\xd1\x72\x2e\xf3\x2f\x06\x0f\xe1\x05\x65\x51\x48\xa5\x80\x9e\x7f\xf8\xf7\x9d\x2a\x34\x22\xd4\xd8\x6e\xc6\xa8\x82\xe5\x5f\xc1\x95\x20\x0f\x20\xd1\x9d\xc9\x7e\xd3\xcf\x87\xfc\x60\x8d\x2e\x69\x9b\x81\xce\x36\xee\x66\x6c\xec\x4b\x32\x86\xdb\xd4\xb7\xbb\x39\x0d\x24\xc7\xbb\xe0\xe2\x2d\xdd\x9d\x01\x8c\x8b\x05\x88\xbf\x21\x98\x1d\x77\x18\x03\x1a\x8e\x2d\xa4\x21\x20\xb3\x97\xd4\xa4\x62\x94\x7a\xb1\x32"
		"\x2f\xbe\x01\x49\xd7\xe0\x56\x0a\x6f\x63\x46\x24\x54\xa8\x33\x3a\xda\xfb\xdd\x8f\x81\x80\x2a\xd6\x84\x4b\xd7\xb1\x3f\x27\xf1\x46\x29\xe9\x81\xdc\x19\xdd\xac\xfa\x35\x8b\x47\x48\x6c\x35\xff\xed\xfc\x60\x99\x66\x96\xcf\x00\x5c\xdf\xd4\xd6\x7d\xfb\xc6\x26\x6e\x57\x11\xff\x3e\xf7\x8f\xe4\x7c\x42\x50\x5b\x51\xfc\x22\xbb\x69\x78\x63\xb8\xb9\x79\x14\x42\x5a\xa6\xef\x99\xed\xa0\x3b\x84\x5f\xc2\xc0\xc7\x33\x03\x6c\xff\xb0\xae\xac\xc0\xec\x99\x34\xee\xee\x9a\xde\x2a\x8c\xfd\xf1\xc7\xb0\x89\x98\x3d\x16\xcc\x00\x83\xf2"
		"\x93\x90\x43\x71\xfb\xa4\x42\x9d\xd8\x30\xe5\x93\x5f\x62\x49\xab\xeb\xbd\xd2\x1f\x61\x99\x3a\x84\xa3\xaf\x6a\x63\x8e\x79\x3c\x7e\x58\x68\x4e\xbe\x40\x2e\xd3\xe4\xf4\xb7\xfa\x4a\x6c\x1c\x02\x51\x4f\x6c\xfe\xbc\xd0\xed\x90\xd6\xbf\xbf\xb7\xcc\x65\xe3\x8c\x9c\xb6\x2e\xbb\x5c\x63\xd6\x63\x4d\x80\xbb\xd9\xb5\x41\x69\xd7\x1d\xce\xee\x86\x99\x47\xab\x91\xc3\xfc\x07\x3b\xcf\x63\x64\xb8\xc6\x6c\xbc\x3d\xe8\xe1\x98\xbd\xa4\xbd\xf8\x3b\x92\xd9\x18\x00\x05\x35\xc2\x77\x7d\xa9\xce\x6b\xac\x15\x07\x56\x68\x24\x0c\x53\x29"
		"\x7e\x50\x0d\xdb\x8f\xd1\x31\x56\xcf\x10\x5d\x63\x51\x74\x1b\x5e\x65\xc1\x4b\x2c\x7c\xb7\x7e\xf1\xb7\xc5\x48\xf1\x91\x87\x21\xfc\x35\xad\x61\x57\xde\xea\x57\x69\xaa\xd4\xb8\x5d\x3d\x0e\x37\xd2\x26\xfc\xa9\xdc\xe0\x8d\x7a\xa6\xf1\x37\x37\x70\x39\x51\x70\x4c\xaf\x92\xc4\x9d\x85\xad\x2d\x6d\xa1\x0d\x29\x38\x01\x84\xea\x6c\x27\x9d\x83\xcc\x67\xd3\xe4\x1d\xd9\x75\xe9\x53\xfb\x0f\xaf\xbc\x66\xa4\x3b\x83\x60\x3a\xd5\x00\x2a\xeb\x37\x0a\x1d\x16\x1d\x7b\xb8\x92\xf6\xec\xbf\xfa\x39\x76\x17\x17\x2a\xfd\xd7\x20\x34\xf9"
		"\x9b\x1b\x26\x63\x75\x96\x0b\xbf\x5f\xba\x72\x90\x06\xa9\x23\xdd\x2a\x3a\x32\xaf\xe8\x04\xc5\x08\x0a\x75\x71\xf0\x22\xf7\x23\x65\x5d\xad\x27\x69\xb3\x84\x3e\xa6\x78\x28\x74\x13\xdc\xed\xd3\xd0\xb6\x93\xca\xa8\x1e\xd9\xe8\xe3\xd4\x70\xec\x0b\x33\x87\x71\x1d\x7c\x2f\x2d\x81\xae\x2b\x30\xb6\x73\x9f\x5e\xcb\x19\xfa\x3d\xd7\x94\x3c\x31\xb1\xdb\x8c\x58\xfd\x9c\x41\x03\x0a\xba\x82\x8d\x6d\x0a\xa1\xa6\x99\x8f\xa9\x5a\x8b\x59\xfa\xf6\x61\x48\x06\x06\xbd\xe3\xa5\xc0\x23\x2d\x2f\xc6\x04\x82\x96\x59\x18\x73\x92\xd0\xbc"
		"\x54\x80\x49\x78\x47\x16\x90\xb3\x19\x81\x60\xdd\x67\xfa\x75\x24\x8e\xc5\x73\x21\xca\xf6\x80\xbe\xfe\x1b\x94\x4c\x83\x79\x26\x68\x3c\xf0\xc8\xa4\xb4\x3f\xa3\x39\x85\xed\x74\x5c\x22\xc0\xd9\xa9\x32\xee\xdb\x48\x4d\xc2\x59\xe3\xe3\x90\x93\xe5\x3c\x08\x33\x20\xb5\x5c\x93\xf2\x99\x74\xd5\x6b\x65\x9f\x99\x23\x75\xcc\x82\x58\x6e\xf8\x17\x1c\xcb\x5a\x17\xcf\x56\xcb\x18\xc2\x6e\x1f\xa2\x60\x46\xc7\x42\x1c\x95\x76\xf7\x25\x48\x52\x75\xc3\x97\xd3\xf6\x12\x8a\xe3\x0d\xe7\xb3\xb2\xb8\x8f\xa2\x82\xa3\xb3\x23\x50\x70\xd2"
		"\x6a\xa5\xa1\x13\x14\x78\xd2\x06\x6b\xb2\x9c\xd2\x23\xb0\xda\x1a\x7b\x4e\x4a\x05\x87\x29\x59\xf5\xfe\xc5\x6f\x81\x5c\x23\x75\x8d\x1e\xd7\xf1\x12\x0a\xe3\x86\x7f\x55\x39\x57\x01\x2a\xbd\x6c\x45\x41\x8c\x3f\x44\x05\xde\xe9\xbe\xcd\x21\x07\x15\xb4\xd1\xe9\x45\x8f\xcf\x15\xad\x10\x32\xfb\xdc\x75\x04\x20\xec\xc1\x06\x45\x57\xa6\x1e\x95\x9b\x84\x99\x85\x99\xa0\xec\xac\xa7\x3f\x0c\x95\xa5\x4e\x64\xab\x8c\xdc\xb0\x23\xfc\x43\x2f\xac\x8a\x66\x1a\x1a\x73\x50\xb0\xeb\xb0\xc6\xf0\x4f\x61\x54\x8f\x0c\x08\xf9\xcb\x48\x0b"
		"\x43\x7a\x68\xb9\x61\x38\xfa\x6b\x99\x76\x06\x75\x8d\x9d\x10\xd0\xe9\xe5\xcd\xb9\x54\x3a\xf8\xca\x2b\x33\xec\x6f\xba\xe6\x25\x50\xa8\xbd\x0a\x34\x7f\x46\x74\x8c\x96\xa0\x3d\x0d\xbb\xe9\x7a\xa6\xe4\x88\x6f\x5e\x57\xe7\xd8\x4d\xfc\x73\x32\xc6\x44\x3b\x4b\xf2\xdb\x91\x76\x80\x05\x96\x6b\x44\xad\x30\xf8\x34\x39\xdd\x44\xa7\x21\x18\x6d\xa2\x00\x26\x1b\xce\x6f\xf9\x01\x8b\x7b\x72\x76\x0e\x73\x95\xa0\x47\x73\x23\x69\x70\xad\x60\xa0\x4b\x37\xdd\x84\x53\x9f\x13\xdd\xc4\xc3\xbf\xb3\xe7\x1c\x43\xf7\x61\x96\x3a\x66\x5c"
		"\x88\xc1\x80\xcb\x0f\x22\x56\x20\xc1\xcb\x5f\xe7\x16\x8c\xbc\x41\x51\xa6\xec\x3c\x1f\xd7\x47\x20\xfd\x5c\xd2\x34\x38\xb3\x6a\x42"
	};
	dict.addEmptyEntries(reinterpret_cast<const uint64*>(emptyEntries2), 0xdf4);

	const char parameterData[] =
	{
		"\x78\xda\xad\x5d\xbd\x9f\xe3\x48\x6e\x2d\xa2\x48\x8a\x52\xab\x67\xb4\xb3\xba\xbb\xf6\x5d\xff\xec\x0e\x3a\xe8\x60\x82\x09\x36\x98\xc0\xc1\x06\x0e\x36\x70\xb0\x81\x83\x0b\x1c\x5c\xe8\xd0\xff\x7f\x62\x93\x12\x8b\x42\x3d\x3c\xa0\x38\x6b\x4f\x32\x2d\x8a\xe2\x67\x55\x01\x78\x78\x78\x48\xe9\x7f\xfe\x27\xcd\xff\xfa\xed\x7f\x91\xf3\xfa\xf7\x94\xba\xb4\xfe\x2d\xd3\xf6\x7f\x97\x2e\x29\xa7\xeb\xb6\xff\xb2\x8f\xcc\xdb\xc6\x75\x5b\x57\x8e\x55\x7e\xb3\x1c\x33\x4d\xd5\x77\x9d\x3a\x5f\x97\xa6\xea\xef\x3c\x1f\x6f\x98\x8f\x37"
		"\x95\x73\x08\xb9\x8e\x79\xdf\xfb\x7e\x57\xf3\xf9\x90\x5e\x1f\xbf\x93\xcb\xfd\x7c\xe4\x5a\x12\xb9\x16\xfc\x7f\x39\x6f\x56\xf7\x76\xff\xfd\xfd\xfa\xf4\x33\xca\xb7\xf3\xbe\xc0\xef\xa7\xed\xf7\xec\xdc\xcb\x71\xfa\xf9\x77\xa3\xfa\xdd\x63\xdb\xeb\xbc\xe7\x5b\x7d\x4e\xb9\x56\xc7\xe9\xe7\x6d\xe3\xfa\x9c\x4e\xf3\x31\xce\xf3\x6f\x3e\xa9\xdf\x94\x67\xe9\x3d\x67\x76\x4d\x1d\xec\xbf\x9c\x77\x82\x7b\xdd\xf3\xf7\x76\xcf\x79\x3e\xc6\xfa\x0e\x1e\xef\xee\xf1\x5e\xf4\x3b\xda\xc6\x96\xbc\x54\xdf\xe1\x67\xdc\xb7\x9f\xef\xf9\x20"
		"\x1f\xfe\x6f\xd4\xf3\xaf\xef\xef\xfe\xde\x86\x32\x5e\x60\xdb\x21\xbd\xc3\xb3\xb8\xdc\xc6\xd7\xa8\xf6\xbf\xbf\x83\xeb\xfc\x6d\xfb\x1d\xea\x63\x7b\xdb\x97\x73\x9e\xd2\x87\x1a\xd3\xcb\x7b\xbe\xcc\xdb\x97\x73\xbc\xba\xd7\x73\x54\xd7\x5a\xc6\x86\xf7\xb9\x9c\xaf\x9f\xaf\x79\x5a\x7f\xfb\x34\x9f\xf3\x73\xfa\x96\x7e\x4a\xdf\xd3\xcf\xe9\x5f\xe9\xb5\x8d\xf3\x35\x9f\x6e\xfb\x7e\x4d\xcf\xe9\x97\x79\xff\x65\xdf\x5f\xd3\x9f\xd2\x6f\xe9\x2f\xe9\xdf\xcd\x9c\x59\x8e\x7f\xb8\xdd\xeb\xfd\xf8\xf6\x98\x2f\xb7\x63\x4e\xf3\x77\xcb"
		"\x31\xcf\xf3\x31\x3f\xcd\xe7\xfe\x69\x3e\xe6\x97\xf9\x98\xd7\xf4\x7b\xfd\x9b\x6e\x7d\xa6\xdd\xfb\xfc\xe9\xab\x3d\x5e\x77\x3f\xd7\xa9\xfb\x3a\x1f\xe7\x17\x78\x1f\xf7\x67\x18\xcd\x3d\x9c\xab\x7b\x3f\xf7\xeb\x7d\xd8\xb9\x7f\x71\xe7\x6b\x6b\x4e\x46\x7f\x6f\x73\xba\x9b\xb6\xff\x6f\x73\xa1\x7b\xd9\x3e\xe7\x6e\xdf\xb9\xf3\xfa\x6c\xf4\xb6\x61\xde\x76\x20\xfb\x0a\xd9\x57\xc8\x71\xf5\xf9\xa2\x75\x25\xab\x75\xa5\x8c\xe5\x6d\xed\x56\xcf\xef\x71\xff\xea\x99\xe6\xfb\x6f\xd8\xf7\xb2\xbd\xd3\xc7\xe7\x5c\xde\x4f\xb0\x6e\x84"
		"\xdf\xaf\x6b\x56\x75\x6c\xf5\x79\xb1\x2f\xe5\x7a\xd8\x31\xa6\x79\x6e\x95\xef\xf2\xfc\xbb\x83\xbc\x3c\xd6\x00\xb6\xee\xe9\xcf\x79\x7a\x3c\xf7\xe5\xbe\xf3\xfc\xac\xd8\xfa\xa6\xed\xe4\xf2\x9c\x8b\x1d\xcf\xd3\xed\x59\xeb\xdf\x48\xb4\x3e\x93\x67\xc1\xce\x95\x61\x2d\xae\xec\xac\x90\xf7\x97\xe1\xbc\xea\xfd\xdb\x39\x83\xf7\x35\xcf\x33\x75\x1d\xd5\xf6\xa4\xae\x2f\x3b\xbf\xc9\x53\xf5\xfc\x96\x79\x3f\xc9\x5b\x7d\xbc\x75\x9f\x2c\xea\x79\xb3\x6b\x5b\x9f\x5f\xef\x3c\x97\x6d\x9f\xc5\x0e\xa5\x17\x3e\x26\xe6\x35\xef\x28\xdf"
		"\xe6\xf5\xf4\xbb\xfb\xce\xa9\xad\xd4\xf7\x9b\xe0\x1c\x89\x5c\x07\xbc\x5f\x7a\x0e\x78\x17\x29\xd7\xe3\xbc\xfa\x0c\xf7\x57\xed\x23\x2f\xfc\x73\x9e\xf8\x58\x05\x3b\x2d\xec\x1d\xc3\x98\xd1\xf3\x80\xad\x09\xfa\x37\xdb\x73\x5a\xc7\xff\x98\xec\x7d\xdf\xe6\xc5\xb2\x7e\xe7\xb7\x74\x9e\xe7\xe9\x73\x99\xa7\xf9\x71\x3d\x43\x99\xa7\x6a\xff\x43\x19\x3b\xb8\x2e\xe4\x69\xf3\x0d\x3b\xed\xef\xac\xf3\xb2\x03\xdf\x52\xdb\x79\xb4\x2b\x83\xf6\x2b\xe4\x71\x4f\xc5\x66\x9e\xe4\x1b\x7d\xbe\x59\x5e\xe8\xd8\x11\xe6\x73\x11\x5f\xcc\x5b"
		"\x2f\x23\x1f\x6d\x59\x5b\x6e\xd7\x35\x3f\xc3\xa3\x5a\xeb\x96\xef\xfa\xf5\x79\x4d\xe9\x03\x62\x88\xfa\x98\x7d\xb6\xfb\xb1\x71\x73\x7f\x0e\xd7\x6a\x9d\x13\x88\x3d\xaa\xf5\x98\xcc\x21\xb3\x0e\x0a\xac\x91\x64\x7d\xc7\xd8\xa6\xc3\xf1\x01\xeb\xa0\x3e\x76\xef\xf8\xbb\xf8\xdc\xd9\xfe\xf4\xba\xc5\x5f\x1b\x71\x8e\x45\xef\x8d\x9d\xbf\x83\xb9\x37\x3a\xe3\xa9\x03\x9b\xa2\xdf\xf5\x51\x3e\xc2\xf3\x2e\xe7\x1a\x32\xec\xb7\x6e\x1f\xd7\xb9\xd5\x9c\x2b\x6a\x1c\x0d\xf2\x56\xfb\xce\x51\x7c\xa0\xb6\x4f\x24\x6e\x18\xe5\xcd\xb7\x2f"
		"\xec\x33\x19\x03\x7a\x9b\xf6\x4f\xa8\xfd\xf3\xd6\xad\xd5\x9e\xf5\xea\xf9\x8b\x8a\xb3\x1e\xeb\xc1\xab\xfa\xfd\xd9\xfe\x1d\x8d\x09\x67\x5e\x54\x76\x34\x5f\xdc\x71\x6a\x3e\xaf\xcf\xb6\x8a\x71\x98\xed\x9b\xd7\x88\x27\xf9\x6e\x8e\xd3\xcf\xcf\x7e\xb8\x7d\xbf\xc4\x03\xdf\x8c\x5f\x43\x71\x03\xe7\xbc\xfa\xfb\x2c\x8e\xff\x03\x7f\x8f\xde\x7c\x81\x77\xb7\xd9\x81\x25\x26\x82\xb1\x55\xad\x9f\xb0\x2f\x1b\xef\x47\xb1\xeb\x47\xb1\xdb\x39\xf1\xb9\xc7\x7c\x60\x8d\x7f\x3c\xcd\xe7\xfa\x54\x62\x42\xf0\xd5\x72\xb0\xb6\x74\x42\xec"
		"\x9e\xfe\x0d\x60\x42\x38\xb7\xb7\x31\x59\xdd\xd3\x1c\x37\x28\xec\xc2\x9b\x9f\xc5\x1f\x3a\xcb\xaf\xb3\x1d\xfe\xcd\xce\xfd\x3c\x55\xef\x55\xfb\x95\x9b\x7f\x20\x17\xd7\xe7\x45\xdf\x89\x8d\x5d\x36\xd7\x47\xb9\x8f\xd9\x6a\xdd\xd3\x3e\x80\xb7\xee\x93\x73\x48\xe0\xc7\xee\x39\x2f\xfa\xa4\x38\xce\x3b\xcf\x8f\xdb\x8e\x7b\xad\xc6\x33\xda\x60\xd7\xa6\x28\x1b\xef\xfa\x42\x6c\xdb\x3a\x76\xbc\xfb\x29\xef\x7f\x9c\xdf\xff\x41\xf9\x5e\xde\x18\x1d\xd4\xfb\x8b\xc6\x60\x75\xad\x81\xcf\x82\xbe\x5e\x75\x0c\xb8\x0f\x1a\x7b\xb0\xb5"
		"\x1f\xc6\x7f\x65\x43\xcb\x67\x88\x3f\x3c\xfc\xb4\x60\x1b\xa3\xbc\xba\xef\x09\xef\x3b\x7a\x0e\xfa\x3e\xbb\x04\xeb\x20\xf1\x29\x86\xc6\x33\xc4\x38\x81\x61\x3c\x7a\x1b\x62\x2e\x1a\x8f\xc1\xfd\x8c\xbd\x5f\xc7\x57\x14\x4b\x0a\x3c\xbb\x41\xe3\xb2\xd5\xb6\x05\xf7\x42\xac\xf4\xb2\xe1\x76\x47\x83\x59\x01\xde\x26\x77\x5f\xe3\xf3\x6c\xa7\x2e\xe9\x97\xf4\x45\xc5\x71\x8f\xb8\x48\xc5\xe0\xc2\xe3\x30\xb4\x93\x3a\xae\xdb\xe2\x09\xe1\xb6\xaa\x73\xff\x9e\x9f\x3d\xae\xb7\x6a\xcd\xb8\xaf\x0b\xd7\x20\xf6\xbb\x3a\xc7\x22\x31\x69"
		"\x02\x6c\x22\xd9\x75\xc2\xc3\x45\x3c\xdc\x24\xb2\x95\xad\x35\x52\x82\x39\x69\x6c\x84\xc4\x36\x00\xfd\x60\x7d\x5f\x5d\x80\xa1\x94\x63\x98\x98\x87\x9c\x4b\xff\xbd\xac\x11\x87\xf4\x83\xbe\x67\x22\x31\x76\xe3\xfe\xca\xf3\x35\xcf\x12\xb6\xe9\xb5\xa4\xdf\x35\xee\xec\xf5\xdd\x7c\x73\x95\x8f\x31\xf3\x3d\xab\xf5\x10\xaf\x29\xf3\xb8\xb1\xaf\xd6\x94\x89\xe7\x6e\x02\x3b\xbd\x2b\x67\x20\x17\x6e\x77\x00\x47\x32\x76\x26\x13\x4c\x52\x6a\x4c\x4b\xe6\xfb\x3a\x92\x98\x91\xad\xe1\xd4\x2f\xc0\xb8\x45\xdb\xf5\xed\x7a\xaf\xed\x67"
		"\xa4\xf3\x17\xf2\x4a\x63\x2d\x83\x97\x2b\x3b\x24\x72\xa1\xd8\xc4\x51\x61\xa6\x72\xc3\xdd\x5f\x6c\x4c\x02\xd7\x22\x1a\xd7\x2e\xb1\xa4\x7a\x0e\x8b\x3f\x30\x91\xcf\xcb\x73\x7c\x9a\xcf\xb7\xc5\x0a\xa9\x7e\x97\x3a\xef\x57\xd6\xf8\x61\xb5\x41\x8f\x1c\x4c\x03\x9f\x2c\xef\x3a\xbd\xb8\xfb\xf5\xdd\x8b\xf1\x81\x26\xe6\xd7\x83\x3f\x2b\x10\x73\xf5\xe8\x3b\xad\xe3\xe1\x49\xfb\x0a\x62\x7d\x95\xe5\xf3\x49\x9f\x0f\x9f\x9f\x9a\x0b\xcf\xe5\xfd\x90\xfb\x40\x9f\xe8\x81\x87\x60\xee\xf2\x61\x8b\x37\x7f\x25\xab\x3c\x93\x13\xdf\xf6"
		"\x80\xc3\x09\xae\x3d\x80\xcd\xd1\xb1\x93\x79\x1c\x7c\xb3\x19\xf9\x3e\x16\x3e\xcd\xf6\xf8\x92\x7e\xa5\x58\x38\xbb\xae\xdb\xb9\x9a\x71\xcc\xc5\xc5\xaf\x30\x3e\x12\xb9\x52\x9f\x9c\xae\x0f\xfa\x5e\xe4\xc2\xef\x0b\x30\x31\x13\x03\xa5\x07\xee\x68\x9f\x95\x1a\x7b\x79\x8d\xa3\xbb\x89\xc6\x54\xd5\x3b\x01\xff\x54\x8f\x8d\x47\x4c\xfb\x0a\xb9\x96\x25\xaf\xf8\x7a\xb3\xbf\x25\xaf\x87\xf3\x0f\x79\x03\x7e\x6e\xf6\x42\xd6\xb0\x69\xcb\x05\x6e\xdf\x75\xe7\x36\x8e\x0d\x3e\xed\x11\x6d\x0a\xcd\x17\x5b\x4c\x8a\xad\xc3\x15\xde\x59"
		"\xe6\x7e\x19\xcf\x3a\x17\xd7\x21\x77\xc2\x62\x34\x15\x9e\x53\xc6\xd2\xba\x7d\x30\x39\x46\x9e\xcf\x46\x5e\x42\xb1\xbf\x1d\xf0\x12\xf4\x71\x1f\xb9\xee\x47\x5c\xd8\xdf\x72\xbe\xf7\xed\x19\x30\xac\x81\xd9\x60\x8c\x91\xaa\x18\xed\xcc\x31\x8e\x84\xf8\x16\xf8\x6f\x09\x30\xb0\xc0\x57\xba\x5f\xf3\x9b\x3b\x7f\x4e\xf9\x5b\x7a\x9e\xd7\x85\xcf\x65\x5d\xc8\x4e\xae\x06\xd7\x9e\x1f\xf5\xc5\x1a\xb1\xa1\x3b\x3e\x01\xeb\xdb\x70\x52\x95\x43\x7c\xd2\xd7\x5f\xde\x55\xb6\xbe\x93\xc1\x3d\xc8\x71\x3d\xdf\x99\xd9\xf7\x01\x7c\xca\x03"
		"\xda\x57\x82\x71\xa3\x2d\xc3\xef\xb5\xbf\x35\x4a\x9c\x5b\x2b\xcf\xb2\xca\xa5\xea\x98\x73\xb1\x2d\x6b\x5e\x6f\xc1\xd3\x4e\xc4\x67\x74\x71\x5d\x07\xeb\x67\x39\xce\xbd\xf1\x7e\x1f\xe5\x4b\xd6\xef\xe9\x9a\x22\x30\xc7\x09\x0e\x68\xd6\x03\x96\x57\x6b\x5c\x53\x56\xfb\x0f\x24\x77\xa9\xc7\x22\xc5\x04\x01\xa3\x29\xd7\xa8\xaf\x89\x6d\xd3\x71\xef\xb2\xb6\x14\xdf\x5e\x20\x5f\xd9\x13\x9c\x81\x62\xc3\x79\x0a\xf3\xa5\x82\x5c\x89\xa4\x38\x13\x5d\xbd\x66\x74\x9d\xfd\x4e\xdb\x98\xcc\x72\xbc\x98\x3f\x22\xf1\xc6\x72\x2f\x13\xf8"
		"\x66\x95\xed\xcc\x8f\xf3\xba\x98\x5c\xa7\xce\xd5\xd5\xef\xaf\x1a\xcb\xdd\xe4\x6e\xd7\xc7\x7a\x70\x80\x5e\x2d\x97\xc4\x8b\xb5\x35\xff\xa8\xab\xed\x73\xd6\xcf\x35\xdd\xf3\x71\x59\x1d\x1b\x79\x19\x99\xc4\x28\x59\xf9\x41\x68\x5b\xd0\x76\x31\x5b\x8d\x79\xc1\xf2\x3b\xe4\xc0\x79\xe7\x31\x5c\x18\x39\xdb\xd8\x81\xcc\xe3\xea\x7d\x67\x3e\x76\x19\x9e\xa0\x7f\xa3\xdf\x39\x62\x09\x4b\x1e\x7d\x80\xf1\x63\xf2\xb1\x0e\x57\x52\x08\x8e\x5b\xaf\x4d\x67\x9e\xff\x64\xfb\x46\xf8\x05\xe4\xc0\xfb\xea\x1a\xce\xc1\xf9\xfd\x78\x3c\xc4"
		"\x6e\x71\x9e\x89\xf5\x23\x58\x6e\x72\xc4\xe7\x98\xea\x67\xcb\xde\x71\x39\x97\xce\xf3\xf4\x80\xe9\xea\xfd\x96\x35\xed\x59\xbe\xb9\xf7\x2c\xc4\x36\xea\x3c\xa6\x8b\x6b\x37\x9e\x09\xbe\xab\x1c\x3d\x23\x35\x8e\x96\x67\x3f\xac\xf9\x17\x3c\xfe\x41\x30\x87\xd9\x93\x78\xb0\xf6\xbb\x35\x76\x69\x78\x1b\xe9\xb1\x3e\x68\xbe\xc4\x01\xfc\xc9\xe2\x7f\x4d\xc0\xcd\x1c\x28\xff\xee\x8e\xc9\x9e\x00\xb3\x15\x33\xcf\x91\xdb\xd2\x9b\x6b\xf1\x72\xb2\x35\x36\x8d\x5c\x35\x7e\x6d\x31\x16\x5e\xee\xf1\xce\xeb\x7c\xae\xb8\xbe\x13\xc5\x4b"
		"\xca\xf6\xde\xf0\x93\xaf\x8d\x18\xe0\xe1\x07\x2f\xfc\xc8\x9b\x2f\x0c\x71\x99\x54\xf9\x75\xcd\xab\xae\xe3\xba\xbb\x2f\xfd\x7e\xfb\xbd\xc6\x5c\x34\x97\x2f\x03\x87\x0b\xf9\x49\xe5\xb3\x28\x9b\x9d\x4d\x7e\x17\x6c\x61\xba\x63\x30\x34\x76\x34\xb9\xad\x1a\xf3\x62\xdc\x1a\x7c\x9f\x05\x0f\x5a\xc6\x8f\xe6\x96\x16\xdc\xcb\x70\xbb\x73\x1d\x6f\x67\x15\x13\x75\x6a\xec\x0c\x80\x77\xf4\x85\x6f\x94\xe2\xbc\xd2\x03\x9f\x83\x6b\x57\xb8\x42\xed\x17\xda\x31\xd7\x9b\x71\x71\x71\xc7\x89\x9e\x17\xfa\x1d\x94\x7c\x40\xd6\x1c\x83\x6c"
		"\xf3\x7e\x65\x4d\xc3\xf8\x12\xf3\xd5\x06\x37\x30\xb1\xa1\x9a\x8f\x3b\xb8\x68\x3e\xd7\x45\x61\x30\x90\x87\x61\x58\xef\x40\xe2\x19\x41\xce\x80\xa0\xcf\xb2\xce\x6b\xc0\x4e\xab\x77\x84\xd8\xac\xdc\x9f\xe7\x24\xf5\xfd\x4f\x89\xe5\x86\x6a\x9c\x97\xd9\x72\xe4\x7a\x61\x6e\xb9\x4b\xb5\xdd\xe8\xa5\xc6\xb9\xca\xbd\x1f\x20\x56\x88\xe2\x06\xc4\x23\xa9\xad\xcf\xe0\xe3\x39\x7c\xcf\xea\x7d\x16\x3c\x20\xaf\x38\x72\xc5\x69\x7f\xd4\x3f\x74\xb9\x5e\x63\x84\x71\xdc\x08\x07\x90\xbd\x8b\x08\x87\x34\x38\x98\x83\x8d\x75\xf9\xc2\xcf"
		"\xa1\xf0\x36\xf3\x77\x3a\x13\x1f\xde\x99\xaf\xf9\x91\x7b\xf4\xe6\x41\x95\x3f\x85\x73\xf6\x88\x89\x65\x67\xcd\xc0\xeb\x93\x6b\xc8\x39\xae\x62\x02\xc0\xc5\x8e\x8a\x7b\x52\xd6\xa2\x2a\xc7\x20\x7a\x9e\xdb\xcf\x26\x56\x26\xe7\xa9\x7c\x03\x39\xdb\xf3\x25\xc2\xf7\xa9\xfc\x7a\x8b\xcb\xf7\x6e\xad\xcb\xa5\x5a\x97\xec\xe7\xb3\xcb\xb3\xb0\xeb\x72\x74\xce\x0b\x79\x2e\x75\xbd\x95\xe1\xd7\xab\x73\x1e\xe4\x5e\x03\xc1\x7e\xdf\xa7\x97\xad\x8e\xe3\xa0\x62\xef\x56\x3d\xd1\xc5\x1c\xef\x1a\x70\xf9\x83\xeb\x03\x5c\x8f\xf9\x91\x86"
		"\x07\xa9\x6b\xaf\xd4\xfa\xc9\x72\x12\x99\xd4\x65\xc9\x7a\xdf\x0c\xb3\xa8\x71\x31\x55\xf7\xc6\x72\x6a\x82\x35\x6f\x76\x4c\x3d\xb8\x03\x6f\x0e\x67\xf7\xdd\xf5\xb9\xba\xaa\x06\xe2\x65\x7e\xfe\xaf\x2e\x1e\x9d\xe9\xb8\x56\xb8\x9e\xfa\x6d\xb5\x06\x3b\xb9\xe1\x1b\x17\x22\xbf\xa7\xb3\x7c\xa5\x39\xcf\x4e\xa6\x66\xfd\x95\xce\xd5\x8b\x8a\xab\x46\x8f\xef\xa3\xd7\x87\xed\xba\x1d\xac\x90\xc4\x5a\x95\xdd\xd5\xdb\xf2\x3c\xfe\xe5\xbd\xfe\xad\xce\xc5\xad\xef\xb9\xfc\xbe\xba\x8e\x35\xd6\xce\x70\x3f\x19\xf9\x6e\xe9\x4a\x6b\x1c"
		"\x2a\x3b\x0b\x73\x7e\x00\x1f\x92\x6e\x5b\xe7\xd6\xf2\xdc\x8f\xc9\xae\x95\x23\xec\x9b\xa1\xa6\x69\xd9\x36\x90\x39\x37\x9a\xfa\x36\xaf\x86\xe9\x75\x8b\x11\x70\xad\xec\xdc\x3a\x41\x35\x8e\xe4\xad\x79\xdc\x23\xd4\x81\x99\xf7\x0d\xd8\x88\xe1\x1f\xb0\xda\x2d\xe4\xf4\x6a\x6e\xbc\x8a\x7b\x97\xb5\xe7\x94\x21\x36\x77\xe2\xfd\xc9\xc4\xe6\xf7\xf1\x72\x90\x77\xca\x57\x5e\x70\xf4\x73\xfe\x96\x3e\x17\x4e\x6b\xf5\xde\xee\x7c\x21\xe3\xdf\x41\x6c\xee\xf1\xbf\xa5\xe0\x1d\xd9\x72\x4d\x75\x3e\xeb\x69\x3e\xff\x27\xf9\xbe\x9b\xff"
		"\xa0\xf3\xf4\xad\xdc\x11\x6e\x3b\xa6\x3b\xc6\xfe\x88\x95\x58\xed\x55\xbd\xff\x59\xe5\x98\x5a\x5c\xc3\x88\x6f\x1c\xd5\x22\x64\xf0\x75\x87\x20\x3e\xf2\xe3\xe6\xc7\x67\x77\xee\x28\x5f\x55\xe3\x00\x82\x38\x80\xb6\x97\x62\xb1\x84\xcc\xea\x75\xcc\xda\xa1\xe3\xd3\x7b\xed\xa3\xae\x6f\xc4\xda\x5b\x59\xd7\x95\x69\x7d\x47\xcf\xeb\xfe\x97\xad\xae\xf3\xee\xb3\x0e\x8a\x87\xd2\x6b\x9e\x44\x3e\x43\xbe\xf2\xc5\xa9\x45\x7c\xcc\x71\xb4\x63\xfd\x56\xe7\xfa\x4e\xef\x57\x63\xed\x06\x9f\x26\xf5\xd7\xec\xba\xcf\x49\x8d\xdf\xee\xd2"
		"\xb8\x2e\xf5\x7e\x21\x36\xe8\x34\xb6\xe0\xd4\xca\xb9\x3c\x62\xf2\x99\xd5\x76\xa0\xfd\xc6\x9a\xe3\x41\x88\x8d\xd6\x3e\x09\x70\x1f\x7b\x82\x0b\x79\x39\xf6\xea\x39\x67\x9f\xdb\x50\xe1\x8f\xce\x7e\x59\x2e\xcd\x3a\xcf\x0c\x5c\x44\xcd\xfd\xf6\x6a\x9b\xd0\x4f\xc9\x52\xef\xe3\xf1\xaa\x4b\x4e\x28\xca\x53\xb1\xb8\x79\x0c\x31\x71\x82\xc5\x4a\x50\x97\x8e\x98\xa6\x83\xbf\x0c\xa6\x86\x5b\xd7\x83\xbf\xfb\x31\xb7\xdc\xb1\xd0\x63\x84\x0d\xa7\x38\x67\x66\xc6\x5f\xe3\xdd\xf7\x4e\xbd\xc0\x8d\x77\x95\x2c\xd7\x28\xab\x3c\xb5\x57"
		"\x6b\x88\xdc\x0c\x56\xbb\x56\xe7\x40\xd5\x7d\xa8\xf7\xd9\xe7\xba\x1e\x70\x74\xd6\xff\x1c\xe4\x9b\xdd\x1a\x98\x35\xbe\xa8\x7c\x4b\xb2\xad\xd8\xe4\x49\xf9\xda\x1e\x1f\x94\xd6\x9a\x44\xf3\x90\x70\x1d\xc2\x5a\x3c\x32\x56\xbd\xfc\x98\xe1\x0a\xb0\x5c\xc4\xde\x3c\x0f\xa9\x49\x43\xac\x57\xd7\x80\x3e\xf0\x5b\xcb\x33\xee\x09\xb7\x6a\x70\x30\x29\x96\x17\x19\xc8\x33\x31\xb5\xbc\xea\x3b\xaf\x16\xa1\xe2\x63\x03\xf7\x5a\xe3\x3c\x03\xe1\x8b\x0d\x8d\x5c\x19\x3d\xaf\x8a\x7d\xb0\x66\x6e\x70\xea\x26\x99\xaf\x7a\x64\x35\x93\x52"
		"\xe7\x3a\xa8\x0e\x44\x46\x0d\x84\x7b\xfd\x3f\x8b\x4b\x19\x9e\xc1\xf4\x4c\xa6\x5b\x2e\xc6\x72\xeb\x47\x93\xef\x85\x39\x14\x68\x15\x88\xc7\xa3\x97\x8b\xef\x2b\x14\x5b\x23\x2f\x61\xcd\x98\x5b\x3b\x8b\x18\x18\xf5\x4f\x26\x53\xab\x81\x31\x1d\x7e\x3f\x54\xb5\x07\x4c\x23\xe6\x11\xdf\x3c\x41\x1c\x48\xb5\x64\x48\x2c\x70\x86\xf8\x07\xf9\x20\xb4\x86\x86\xd8\x85\x72\xcc\x27\xc2\xc5\xcf\xa9\xb1\xaf\xce\xdf\x93\x71\x79\x90\xb7\x36\x47\xc7\xf0\x6d\x80\x5b\x00\xfb\x95\xf8\xa8\x73\xea\x74\x4e\x44\xd3\x25\x3b\xbc\x2d\x2f\xd6"
		"\x3a\x91\x67\xa1\xeb\xc1\xf9\x79\xed\x3b\x29\xcf\xb0\x4f\x1f\x3f\x76\x7e\x3c\xd6\xff\xe1\x3b\x66\x3b\x84\xd5\x5f\xc0\x71\xd8\xfb\xe8\x09\xa6\xd3\x7c\xc7\x6a\xfd\x9b\xa4\x5d\x63\xc7\x62\xf3\x8a\x83\x9f\x7c\x3e\x6b\xed\x53\x5c\xcd\xe7\x5e\xe5\xb8\x58\x2d\x78\xc8\xe3\xd3\x76\xce\xab\x95\x64\xb5\xf0\x78\xae\x2d\x1f\xee\xd4\xe0\xd0\xba\x46\xf2\x7d\xd2\xb9\xfb\xde\xd7\x21\xc8\x0f\x5d\x97\x51\xfb\xa7\x51\x1d\xa2\xf8\xf5\x2d\x91\xc6\x88\xe6\x57\xea\xcf\x9d\xf8\xba\x20\x29\xfb\x7c\x7c\xfe\x7e\x6d\x9c\x9e\xf3\xea\x3f"
		"\x2b\x2c\xa3\xca\x83\xe4\xc9\xd4\x01\x6c\xcf\x30\x6b\xdc\xa2\xae\x5b\x89\xb4\x4d\x6e\xbf\x5f\x7d\xad\x27\x4f\x43\x46\xa6\xb0\xbe\xa2\xa3\xb9\xd2\x82\x05\xbc\x36\xed\xab\x60\xfe\x42\xd4\x9a\xad\x62\x43\xad\xc9\x26\x04\x4b\x28\xdf\xf5\x8a\x8b\x25\x24\x57\x82\x58\x3b\x8d\xfb\xd5\xb8\xab\x9e\x11\xe6\xfa\x58\xad\x75\x5e\xf1\x0c\xb2\x8e\xba\x1a\x0d\x6b\x4d\xc5\xa2\xef\x71\x84\xdf\x6a\xce\xfe\xc6\x43\xd8\xb3\x4d\xd5\x27\x85\x9c\x55\x52\x07\x1d\xc6\x1f\xc9\x72\xc1\x4c\xfe\x23\x9d\xa1\x3e\xaf\xae\xa7\x4b\x50\xff\x18"
		"\x71\x4e\x45\xfc\xdc\x79\x96\xab\xfb\x5d\x2f\xd7\xa6\xdf\xdc\x43\xad\x46\x8f\xbe\x13\xd1\x3a\xa0\x9c\x4a\xe4\x15\xe4\x8b\x1b\xd7\xef\xd2\x28\x70\x6a\x7d\x2b\x9d\x18\x79\x81\x6b\xbf\xba\xeb\x0e\xe5\x3f\x60\x9d\x0b\x59\x6f\x34\x37\x5d\x1f\x5b\x63\x52\x4c\xc7\x41\xc0\xff\x1b\xc4\xfa\xa4\x19\xf0\xa4\x9e\xcc\x3d\x01\x7f\x73\x90\xab\xab\xd5\x60\x78\x1f\x6a\xed\xc1\x7c\xd9\x4d\x9f\x2d\xbf\xcf\x6b\xde\x57\x3a\x7e\xcc\x3a\x87\x39\x50\x5d\xf3\x8c\xb5\xc3\x52\x6f\xeb\xc5\x62\x4f\x3d\x8b\xaf\xd7\xb9\xff\x94\xbe\xdd\x74"
		"\xeb\x58\x1c\xe3\x6b\x5b\x4e\xeb\x7a\x74\x6d\xe4\x36\x3e\x62\x9c\x18\xed\x28\xf0\xfb\x39\x16\x72\xe5\xf6\x49\xe3\x9d\x64\x2d\x62\xf8\x24\xbe\xb7\x2e\xd5\xbc\x0d\x56\x43\xd8\xe7\x9a\xf3\x54\xec\xf4\x61\xc5\x7f\x9e\x08\xc7\x1e\xb9\xde\x88\xf3\x75\xce\x3a\xe9\xd6\xe1\xed\xa8\x31\x2d\x7c\x11\x6f\x5d\x11\x47\x6b\x68\x8f\xce\x46\x87\xf9\xd3\xf5\x58\x68\x93\x87\xec\xeb\xc0\x8d\x6e\x2d\x46\x1d\xd7\xf6\xce\xbe\x5b\x7e\x27\x7d\xf5\xe3\xbd\xfc\x8d\xc7\x3d\x64\xdc\x89\xa3\x45\x65\x6c\xb4\xca\x5f\x2c\xf7\x7b\x92\x77\xf7"
		"\x1a\xdc\x1a\x5d\xd8\xef\x2c\x1f\xfb\xea\x59\x9d\xfd\xa9\x36\x55\xc4\xf1\xa1\x9f\x5f\x9a\x73\x27\xba\xa6\xc9\x8b\xd7\x12\xe6\x9d\xaf\xe1\xe7\x1f\xd1\x10\xc2\x35\x96\x6d\xdb\x72\x8c\xaa\x66\x6a\x00\x9c\x81\x8d\xc3\xcd\x6f\x22\x36\x34\xaa\x7f\x1c\x9c\xf8\x0e\x63\x47\x31\x18\x0c\xf0\x61\x5b\xdc\x66\x4f\x97\x45\xd5\xb5\x79\x7c\x18\x3e\x5f\xde\x69\x0e\x9a\xdd\x13\xea\x63\xf4\x81\x5e\x68\x94\x23\x63\x3a\x17\x51\xae\x80\x72\x90\xbc\xba\x2d\xe1\x6b\x6f\xcf\xf8\x1b\xb8\x16\x3a\xf5\x4d\x4f\xe0\x2b\xeb\x73\x8c\xac\xb6"
		"\x0a\x6c\x4b\xf3\x59\x34\x74\x79\x91\x23\xf4\xd0\x38\xb2\xf3\xa8\xf7\xe6\x59\x82\x5a\x7d\x6f\x1d\x48\xb6\x5e\x96\xea\x8f\xec\xb1\x45\x3b\xb1\x24\x57\x7b\xc1\x7b\x16\xd5\x5c\x7f\xd9\xb9\x4e\xbc\x34\x63\x49\xbd\x1f\x6a\x42\x3f\x70\xd8\x17\xce\x6b\xc9\x67\xc3\x75\x1c\xa1\xd6\x38\x07\xdf\xd3\x73\xa8\xed\xc3\x86\x49\xdc\xf9\x50\x4f\xc9\xea\x75\x6a\x7f\x6f\x30\x1c\x76\x5e\x0f\x6d\xb8\x24\x72\x75\x35\x43\xad\xae\xc7\xb5\x5a\x77\xf2\xa6\x95\x6b\x39\x5b\x8f\xba\x84\x75\x3e\xa1\xed\x24\x76\xc7\xe0\x2f\x99\xc5\xff\xd7"
		"\x7d\x63\x90\x8d\x9f\xc0\x5e\x8f\xa9\xb1\x96\x17\x9e\x9b\x5c\x2b\x4d\x0f\x6a\x33\xb5\x7f\x4b\x75\x10\x26\xbf\x9e\x37\xd5\xdc\x34\xca\xd5\xdc\xb8\x52\xa0\xa5\xbd\x6e\x5f\xb8\xa6\x47\xc2\x5b\x64\xba\x74\xe5\xda\x0f\xd1\x33\x49\x5c\xcf\x15\xb5\x58\xf7\xf2\xd7\x98\x6d\x8a\x3e\x17\x8c\xf3\x09\xf2\xc4\x54\xf3\x64\xdd\x77\x59\x73\x96\x98\xe7\x33\xe3\x04\xed\xd0\xd7\x19\xd9\x1a\x08\xb5\xf8\xad\x9a\x56\xd4\x7f\x31\x7e\xeb\x72\x7d\x25\x26\xc3\xb5\x37\x13\x8d\x43\x35\x67\x91\x43\xe1\xd9\x1f\x61\x3a\x02\x11\xb7\x98\x6c"
		"\x1b\x8d\xbe\x0a\xaf\xf3\x3c\x04\xb9\x5c\x5e\x5b\x76\xe5\xba\xf1\x8a\x2f\xa6\xf9\x87\x43\xf2\x39\xe4\xa5\x6e\xf6\xce\xbb\xbc\xf3\x7b\x97\x3a\x9d\x27\xd0\x27\xe8\x5d\x4d\x84\x77\x3a\x96\x91\xf3\x58\x61\x32\x94\xdb\x6b\x6d\xa6\x8e\x43\x4e\x89\xe7\x27\x8a\x96\xc2\x36\x1e\x7e\xf0\xfb\x32\xde\x17\x0e\xdc\xe7\x9b\x2e\xfd\xbf\xfd\xd8\x7e\x91\x8f\xa2\xe2\xc4\x31\xbd\x35\xfd\xe4\x4a\xff\x53\xa6\xc0\x9e\x5b\x7e\xa6\xb7\x0e\x94\xf7\x3b\x92\x9c\xb0\xb6\xed\x52\x7a\x06\x68\x8d\x71\x12\xd3\x8d\xc9\x5f\x93\x0c\x4f\xba\x7b"
		"\x69\xe7\x0a\x59\x1e\x5b\x2e\xa1\xef\x29\xa6\x4e\xfd\x4c\x9f\xb7\xce\x97\x08\xd4\x31\x33\x6e\x91\x8e\x0b\x0e\xf2\xc8\x6b\x94\x6d\x4c\x2b\x08\x71\x07\x11\xab\xe9\xd8\x89\x5d\x4f\x44\xd5\x21\xfe\x51\xbd\x7f\xce\xa5\x9a\x8c\x06\x8a\xe6\x88\x4f\x24\xe6\xbc\xc5\xc7\xad\x1c\x2a\xe2\x4e\x30\x47\x2b\x4d\x13\xd0\xaf\x12\xc2\xcd\x3c\x69\x1b\xed\x60\xaf\x27\x27\xc7\x58\xe6\x22\xfd\x0e\xee\xcd\xd6\x51\x71\x1c\x8a\xfd\xdd\xcb\xe5\x87\x6a\x6d\x75\x6d\xac\xce\x03\x50\x5c\x8d\xd8\x3c\xcd\x61\x12\xb9\x84\x7a\xf5\xfd\x0e\xad"
		"\x8e\x21\xbd\xc5\x7c\x44\xf1\xb5\xf1\x96\x38\xee\x93\xd2\x27\x64\x3a\x1e\x66\x2e\xb0\x6b\x59\x6b\x53\xb2\xa8\x5c\x6f\xe2\xdc\x2a\xc6\x29\x8a\x74\xc0\x07\x52\xff\x5d\x78\x5f\x6c\xfb\x20\x6f\x26\x67\x72\x08\x62\x50\x31\xfc\x5e\x8b\xa5\x1b\x6e\x8c\xa8\x9c\x30\xd6\x0a\x3b\xb5\xa1\x65\xce\x2e\x73\xfe\x89\xf0\x62\x47\xd5\x13\xc5\xe3\xd0\x54\x3a\x96\x8d\x5e\x25\x7d\x7e\x21\xbd\x64\x48\x4c\x99\x6b\x5e\x32\xd6\x95\xf6\xba\xde\xc3\xe9\x83\xe4\xd5\xca\x55\x9a\x0a\x19\x9f\x35\xd1\x9a\x20\xb5\x81\x95\x46\x72\x79\x36\x6a"
		"\xbf\xc9\x3c\xcb\x73\x58\xbf\xdc\x3a\x6e\xa8\x9d\x8d\xf9\x4d\x76\x1d\x6b\x5e\xb9\xf0\xb2\x17\x2e\xf2\xa7\xb5\x7f\x0e\xad\x81\x35\xf9\xd8\x33\xd5\x93\x2e\xef\xd2\x8c\xc7\x8c\xf5\xe5\xbc\xc7\xcf\xa8\xea\x51\x7a\x47\x33\x7b\x58\xf7\x3b\x91\x9c\xc6\x32\x6e\x8f\x3a\xd6\x5e\xc7\xca\x44\x6a\xd8\x06\x92\x87\x1e\x6f\xf1\xf0\x72\x8c\x17\x5e\xbb\x98\x01\xc3\xc9\x2c\x77\xed\xf3\xf4\x25\x9f\x7d\xae\x7d\x62\xef\xb0\x9e\x9f\xb2\xc6\xeb\xa7\xc0\x26\x0f\xc4\x0e\x0f\xa4\x07\x18\x72\x2b\x22\x1f\x9b\xed\xe3\xd5\x42\x54\x3a\x12"
		"\x0e\xde\xce\x6c\xe3\xc1\xc1\x7b\x4e\xd0\x47\x6c\x4c\xc0\x87\x00\x2c\x2e\x4b\x8d\xeb\x94\x7a\x29\x1a\x43\xc2\x75\x70\x8c\x09\xea\xdf\xc0\x9e\xdb\xb1\x0c\x79\x3c\xac\x73\x17\x3f\x07\x7e\x88\x70\xb6\xfc\x88\x7b\x4f\x44\xb3\x8d\xf5\xf4\x18\x94\x5e\xfd\x79\x8d\xa3\x3b\xd4\x38\xc8\x7e\x8f\xa8\x2a\x6e\x6e\x60\x16\xac\x2f\x58\x54\x6f\xe5\xe9\xc1\xb9\x75\xfe\x1d\xd7\xb4\xd8\xe6\x54\x76\x34\xa4\x49\x0f\x92\x03\xd3\x6a\x55\x7e\x60\x39\x7e\xd6\xd7\x96\x63\x8c\x5e\x9c\xfc\x01\x8b\x1f\x9f\xe7\x77\xf1\xa9\xe8\xa0\x09\xac"
		"\x31\xd5\xb1\x5e\xfd\x6d\x3b\x70\xa1\x76\xcc\x74\xb7\x21\x55\x6e\x8c\xd5\x93\xef\xd1\xfb\x75\xb0\xf8\xe8\x59\xe8\x38\xf6\x87\x73\xa4\x04\x37\xa6\x1a\xc4\x41\x6e\xaa\xa5\x6f\x8c\x3e\x34\xc6\x0f\x91\x1f\xeb\xe9\xb8\xeb\x3c\xc4\x41\xcd\x63\x77\x7f\x27\xbf\x67\x31\x1f\xd0\x92\xdd\xbb\x6e\x60\x7e\xd6\xe4\x74\xd4\x7c\x80\xde\x52\xba\x46\x0d\x6b\x5c\xda\xb5\x36\x0f\x3e\xc5\x40\xf0\xf3\x31\xb4\x8d\x5e\x7c\x6a\x7b\xbc\x85\xf9\xae\x5c\xeb\x69\x15\xbf\xa6\xf2\xff\xf2\x03\x07\x2c\xb8\xd4\x11\xe6\x8a\xe5\x86\x39\xfa\xa5"
		"\x86\x8f\xee\xaf\x79\xc3\xca\xcd\xf0\xf5\x51\x1e\xf6\x6a\x82\xbe\x8b\xf1\xf7\x35\xdf\xad\xd2\xcf\xcc\x13\xd5\xf1\xc9\xf4\xdc\xb6\xf7\xa7\xf5\x07\x1f\x5a\xf4\x77\x5d\xdb\x5f\x8c\xdf\x74\xa0\xf5\x98\x56\xc3\xc1\xd6\xa4\xbf\x1a\x2e\xde\x91\x70\xc4\x51\x9f\xa5\x6f\x6a\xcd\x5b\x9f\xaa\xf7\x70\x4b\xe5\x47\x1f\xe1\x7a\x4c\xfe\x8a\xf4\x32\xf0\x7a\x59\xc8\x8e\xde\x71\xbd\xd4\xbe\x56\xd1\x44\xc2\x3a\xb2\x83\xf1\x5b\x00\xb3\x43\x7f\x44\x7c\xdd\x59\xb4\x7d\x43\xaa\x6b\xd0\x33\xd5\x06\xb3\xba\x06\x83\xa9\x17\x78\x3c\xc3"
		"\x33\xa9\xbd\xd0\x7d\x61\xf4\xef\x4c\xac\xba\x5e\xdb\xe4\xe6\x50\x6d\x5c\x9f\x59\xed\x77\x06\x2d\x04\xc2\x6d\x74\xd7\x66\xa9\x79\x67\x46\x63\x6c\xbb\xc6\x1a\x57\x8a\xec\x85\xeb\x3b\x28\xfe\xdb\x48\xfa\x06\xb3\x9e\x82\x5e\x5f\x47\xd6\xcf\xe4\x38\x9f\xeb\x34\x9f\xeb\x5c\xfa\xd9\x30\xfb\xcc\xb8\xf2\x88\xb3\x39\x35\x6e\x0c\x7b\x41\xdc\x57\xe4\x4c\x35\x0d\xd1\xaf\x67\xbe\xde\x40\xf9\x88\x44\x8b\x26\xbf\xec\xaa\xbf\xdd\x6a\xe8\x90\xe3\x15\xe4\x1b\x98\x2e\xba\xe9\x19\x80\x6b\x8e\xca\x3d\x77\x91\x7f\x9c\xcf\x4e\x5f"
		"\xda\xd7\x8a\x93\xfc\xd0\x87\x7c\x70\x1c\x75\xfd\x71\x55\xcf\xc6\x74\x8d\xf2\xc5\xe8\x9b\x0e\x69\x87\xfe\x1f\xea\x68\x24\x8b\xcd\x47\x75\x3b\x53\xae\xb5\xf1\x4d\x5f\x54\x81\xfa\x93\xec\xe0\xf8\x3b\x72\x94\x45\xe7\x94\x69\x6b\x33\x9c\xf6\x10\xf4\xdf\xd1\xf9\xc4\x03\xdc\x7b\x8b\x73\x11\x72\x0b\x93\xcf\xc7\x44\xed\xc8\x11\xfa\x88\x75\xa0\x5b\x8a\xb9\xc4\x32\x1e\x4f\xac\x8e\xc5\xf1\x1f\x7b\x52\x13\xc1\x6a\x5e\x28\x56\xce\x72\x8e\x62\xeb\x61\x4c\x2e\x27\xdb\xbc\xbe\x60\x1f\x08\x01\x9f\x65\xc5\x04\x0e\xfa\x7b\x52"
		"\xa3\xed\xd6\xa8\x34\xfa\x7d\x57\xb1\xbb\xd3\xa3\x95\xd6\xa8\x13\x2d\xba\x3e\xaa\x01\x66\x35\xee\x4e\x5f\xb8\x3e\xe8\x5b\x93\x40\x23\x7a\xc1\xbb\x9e\xe4\xad\xd9\x3f\xc0\xab\xb7\x8a\xae\x89\xfd\xae\x68\x66\x1e\xe1\x59\x1c\x9c\xdf\x8d\xa0\x89\x22\x4e\x2d\x56\xef\xd8\xf7\x31\xda\xc6\xf4\xc1\x72\x60\x3f\x01\x1b\x1c\x0d\xbe\x60\x7b\x17\x49\x82\x6b\x0b\x7a\x4c\x51\x4d\xbe\x8c\x9c\x73\xbf\x3e\x45\x4c\x5d\xe4\x1d\xbb\x9e\x20\xe7\x51\x30\x18\xc4\xb5\x74\x3f\xca\xa3\x7c\x35\xbc\x7c\xf4\x33\x06\xac\xf5\x22\x58\x50\x56"
		"\x3a\x20\x4f\x46\x77\xf4\x91\x0f\x7c\x26\x7a\x1b\x3d\x62\x75\x44\xa7\xb0\x5b\x6b\xc3\x47\xa2\xe1\x83\xf8\x2e\xd3\x5f\x3d\xa9\x77\x90\x49\x4d\xf0\xa6\x5f\xa2\x79\xa1\x99\xc4\x71\xd9\xd6\x06\xe8\xfe\x53\x8f\xb8\xcb\xc6\x76\xd9\xa9\x21\x3f\x80\xee\x50\x85\x6f\xaa\x9a\x1a\x3d\x66\xb2\x9c\xe9\x3a\x28\x8e\xfe\x09\x7d\xbe\x18\x93\x92\x5a\xeb\x2a\xfe\xd6\xeb\x8c\xd4\x3a\x4c\x5b\x6f\xc7\x95\xd7\x84\x5a\x5d\x26\x87\x06\xcf\x4e\xf4\x7a\x15\xf1\x50\x84\xf3\xb6\x32\xeb\x5d\xb6\xae\x2b\x93\xea\x43\xac\xd7\x01\xaa\x99\x1d"
		"\xe9\x3f\x27\xae\x41\x4c\xbf\x73\x6a\xc0\x3d\x1d\x3b\xcc\xa9\x75\x44\xfb\x3b\xfa\x6e\x64\x75\xd7\x7f\x30\xff\x9f\x01\x57\xf0\xf8\x00\x75\x7c\xff\x3e\xcf\xed\x0f\xf7\xfb\xc5\x57\xfd\x6c\x6a\x50\xf8\xda\x58\xf0\x82\xa7\x60\xbc\x62\x2d\xff\xd3\x2d\xbf\xf5\xf5\xc6\xbd\xd9\x7a\xdd\x21\x67\x09\xe6\x23\xea\x21\x0f\x80\x8b\x97\xe7\x73\x0c\x6a\x6b\xb0\x36\x30\xa7\x49\xd5\xaa\xda\xb5\xd0\xff\x6d\x8d\x4d\xf5\x6b\xff\xe1\x43\xfe\xa0\xfd\xc4\x85\x69\xc8\x10\xee\xcf\x90\x48\xde\x1b\x79\x8c\xe2\xd4\xf8\x48\xdd\x53\xaa\x07"
		"\xee\xf2\x03\x37\x53\x6b\x81\x93\xbb\x2c\x7d\xbc\x22\xff\x4b\x58\xdf\x25\xaf\x47\xc4\xea\xf3\x8d\xeb\xfa\x91\x65\x72\x7b\x61\x61\xef\x24\xa3\xfb\x92\x6d\x9e\xf3\x88\x9c\xd8\x3c\xd5\x7a\x76\x66\xfe\xbf\x1b\xad\x68\xa6\x1d\x1c\x69\xbf\x1a\x4c\xc0\xe9\x3f\x3d\x90\xbe\xd0\x91\x3e\xd9\xd0\xac\xfb\xb4\x9a\x81\xd9\xa9\x4d\x40\x9e\x93\xd6\x25\xce\xac\x7e\x94\xf4\x79\x36\xda\xcc\xf9\xe2\x6b\xb0\x64\xfb\x9e\x3a\x56\xdb\x2c\x5c\xdf\x5b\x63\x09\x26\xaf\xc8\x7a\x79\x04\xf1\xaa\xc7\x3b\x49\xf9\x02\xf1\x57\x1d\x33\x1d\xe0"
		"\x73\x9f\x54\x7f\x3d\xa2\x11\x24\x7b\x6a\x6f\xb2\xa3\xb7\xa7\xb6\x57\xb1\x58\x0e\xfa\x15\x66\xbf\x67\x6a\xa8\xc7\xd1\xe2\x1f\x11\x2e\x0c\xcb\x2f\xa3\x56\x32\x62\x70\xc8\xbd\x16\x4f\xef\x47\x69\x1d\xe4\xe4\x63\x55\x7d\xa5\xb7\x59\xfb\x6c\x13\x70\x98\x07\xb9\xc4\x7c\xf1\x7c\x21\xba\xbe\xf7\x7c\x9b\xde\x5e\xf7\x30\x2c\x38\x86\xaf\xd5\xdd\x41\xed\x80\xae\x45\x3f\xc9\x07\xd7\x76\x48\x76\x5d\xa1\x75\x9e\x0a\x37\xa0\xfd\xee\x32\xe9\x19\x42\xb5\xa7\xaf\x75\xef\x2d\x16\x4b\x65\x1b\x9b\xa1\xb6\x99\xc6\x25\xce\xc0\x07"
		"\xa7\xbd\x76\x48\x2e\x3d\x8c\xa3\x1d\x5c\xf4\x34\x9f\xe7\x29\xfd\x3a\x9f\xef\x37\xae\xd3\x29\x1f\x61\x2f\xf0\x56\xdc\x3c\xb0\x9e\x20\x84\x7f\x8a\xbe\xad\xc9\x01\x93\xd8\x41\x02\xcd\xad\x3f\xb2\x96\x0d\x3f\x90\x53\x0d\x9f\x3b\xa9\xb5\xaf\x78\xb2\x80\xa1\xdc\xc6\x34\x60\x23\x03\xe2\x54\xa8\x87\x28\x53\x5b\x17\x9d\x8c\x99\xc9\xc3\x22\x48\x7d\x3c\xf5\x19\xaa\xb5\x0c\xb5\x93\x1e\xdc\xf6\x93\xf6\x85\xf5\xfd\x43\x3f\x02\x8a\x91\x83\x3d\xec\xe5\xd2\xac\x97\xd5\x75\xa7\x5a\x4b\x2f\x9b\xb5\x33\xce\x4f\xf6\xcd\x6d\x8f"
		"\x58\x62\x40\x6d\x00\xb9\x34\xf1\x21\xe4\x69\x8e\xa0\x0f\x5f\xf4\x91\x8d\x46\x06\x1b\x57\x9e\x56\xa0\xc2\x28\x8b\xce\xee\x53\xfa\xde\xd6\x4e\x84\xdf\xec\x99\x0b\x4c\xcb\xd0\xeb\x0b\x41\xf5\x0e\xc1\x0e\x1a\x9d\x1e\x85\x85\x7a\xfa\x81\x07\x69\xf4\x8f\xcc\x16\x27\xa4\xbd\xea\xf6\xae\x0d\x60\x6f\x85\x68\x22\x66\xc5\x4b\x0f\xf5\x1e\x1b\xdc\x28\x7d\xdc\x4e\x71\xa4\xb1\x17\x5b\x88\xe9\xa5\xc9\xaf\x97\x70\xf2\x85\x22\x3e\x37\xd8\xd8\xad\xa8\xc6\x06\x7a\x7e\x75\x5b\xdc\x6d\xfb\x49\x63\x9f\x49\xf4\x0f\x74\xfc\xdf\x3b"
		"\x35\x73\x47\xf9\x70\xd7\xb3\xdb\xe7\x6c\xf5\x3c\x06\xe1\x75\x42\x43\xab\x27\xb5\xc3\xfb\xf5\xe3\x6d\xc5\xeb\x5c\xfa\x73\xcc\xdf\x7d\x82\x5e\x48\x06\x7b\x4c\x35\xff\x3b\xca\xa3\x0a\xe9\x69\x6e\xb4\x0e\xd8\x3b\x73\xb6\xe9\x9e\x66\x4c\xb7\xb5\x73\x7a\xb9\xf7\x4a\xcf\xfd\x29\xe0\xfa\xe5\xcc\xf3\xc0\x21\xee\x9e\xeb\x75\x97\xdd\x1f\xd3\x34\x33\xeb\xb7\xd4\x5c\x67\x49\x7e\xcc\x35\x24\xcb\xc1\xb7\x7f\xf7\x46\x87\xa6\xd2\xd7\x21\xb8\x7f\x6f\xf4\xcd\xa0\xaf\xac\xe0\xbc\x39\xd7\xba\x63\x95\x3e\x9e\xd5\xae\xc7\xfe\xc6"
		"\x7d\x4b\x3b\x38\x3b\x6b\x59\xa4\x03\x1e\x71\x47\x31\x5e\x86\x38\xc3\xd3\xe2\xa0\x71\x7f\xb2\x63\x54\xb6\x7a\x5c\x1e\x03\x86\x3a\x50\x4e\x9d\x03\x8e\x65\xba\xaf\x1e\x87\x99\xeb\xd5\x17\x9f\x3f\xf2\x9f\xb5\xff\xed\xc6\xc1\x62\xb9\x66\x3a\xa7\x29\xa4\xbf\xa7\xe9\xf9\x24\xd6\x36\x61\xfc\xb7\x8c\x79\xf4\xbf\x7a\xa2\xc7\xc4\x34\x9b\x99\x4e\xeb\x83\x97\xf3\x11\xea\x47\xdc\x9e\x45\xae\xfd\x8d\x1c\xe8\x0a\x32\xde\x29\xc5\xb9\x13\xc7\x84\xf4\xe7\x3e\x5d\x9a\xba\x87\x66\xcc\xad\x73\x52\x6b\xc0\xa1\x6e\x41\xb1\x29\x75"
		"\xed\x05\xf8\x9b\x02\x35\xed\xd8\x3f\x75\xbb\x0f\xae\x87\xea\x8e\x21\x27\x37\x50\xee\x1d\x7b\x9f\x98\xfa\x3e\xc4\x0e\xc1\xb7\xee\x93\xb5\xaf\x4c\x1b\x19\xfd\x25\xc3\x3f\x5a\xf9\x58\xbd\xe9\x0f\xf2\xe2\xf7\x60\xf0\x30\x42\xc2\xd9\x62\x71\x60\x9f\x39\xef\x74\x84\x35\xca\xe3\x2f\x1c\x5a\xbc\x8f\xa0\xee\x76\xaf\xc6\xa6\xb1\xf3\xac\x4f\x0b\xa9\xdf\x31\xf8\x2a\xda\x23\x0f\x8f\xd4\xb1\x96\x04\xfd\x20\x88\xe6\x86\x57\x5b\xd5\x33\x9e\x45\xe9\x0b\xe0\xd4\x64\xdf\x79\xa0\xef\x44\xa7\x57\xf3\xd3\x7a\xa5\x65\x5a\x7a\x58"
		"\x29\x7c\x1a\x7a\x29\xba\xbd\xd2\xdc\x9e\x58\xaf\x26\x3e\x2b\xba\xef\x4f\xc9\xc1\x9a\x89\xa6\xb1\x90\xb9\xee\x71\x5f\x59\x9e\xa1\x73\xfa\xbb\x0d\x01\x67\x2e\xf4\xe7\x93\xaf\xfd\x6e\xea\x1c\x61\x3e\x65\x47\xf3\xa7\x03\x2d\xc0\x28\x66\x32\x7d\x01\x14\x17\x79\xeb\x5d\x98\x5f\xab\xfc\x01\x72\xb5\x72\xbe\xb4\xeb\xb9\x9d\x39\xe5\xc5\x5b\x1e\x77\x0f\x35\x20\x59\xce\x9d\xd6\x6e\x38\xfc\xc2\x88\xdb\x8c\x9f\x4d\x6d\x57\xc4\xe5\x40\xfc\x81\xe9\x71\x36\x38\x2b\x85\x53\xef\xe9\x68\x15\x1b\x73\x4e\xdf\xd3\x27\xf9\xb5\x8e"
		"\x3d\x3d\xdb\xc0\x7a\x40\x0a\xd3\x00\x8b\xb0\xa5\x87\x1f\xde\x2b\x3d\x23\x49\xb6\xef\x0e\x5b\x1f\x7b\x82\x11\x9c\xc4\xd7\x24\xeb\x59\x4c\x4c\x72\x8b\x43\xae\x71\x85\x0d\xbf\x03\x1f\xd4\xeb\x2d\xe0\xfd\x1f\x71\x9c\xd0\xe6\x2f\xbe\x52\xa9\x73\x32\x3a\x96\xd9\x72\x44\x5d\xbd\xb4\x7c\x1f\xdb\x61\xec\xaf\x72\xb2\xa5\x7e\xe8\xc6\xb3\xcf\xf7\x7e\x35\x9f\x4b\xbf\x1a\x12\x87\x9f\xa0\x66\x7c\x92\x7b\xce\xe7\x59\xee\x75\x98\xbb\x78\x67\x30\x26\xfa\x48\x9b\x41\xf3\xf3\x1c\x2e\x9f\xd1\xcc\xc4\x5a\x6d\x87\xaf\xc6\x7c\x52"
		"\xfd\x8e\xb1\xce\xba\x4f\x6f\x61\x7e\x2d\x9a\x77\x4c\x9b\x8d\x61\x6d\x68\xc3\xaa\xbe\x11\x4c\x5f\x2e\x3f\xb4\x21\x31\xf7\xed\x7e\xde\xea\x82\xad\x9d\xa0\xf6\x4e\x74\x9c\x52\x73\x74\x3c\x1d\xda\xba\xff\xde\x47\xb3\x3e\x4b\xf7\xbc\x2e\xcf\x97\xc5\x06\x86\xc3\x0b\x3a\xc1\x2c\x37\x27\x44\xcf\x63\x08\x7a\x1c\x68\x9e\x69\x76\x34\x18\xb2\xec\xf1\x59\x09\x8f\x16\xd6\x80\x83\xd3\xd7\x1e\xe7\x93\xab\x4d\x29\x7c\x9f\x31\xd0\x25\x60\xd8\x31\xfa\x94\x2c\xc7\x13\x6a\x42\x78\x7d\x7d\x53\xd0\xfb\x31\x63\xaf\xb0\x07\x56\xdc"
		"\xa7\xb7\xb0\x06\x05\xfd\x1f\x8d\xf7\xe6\x75\x5d\x62\x38\xc3\x31\x7d\xec\xd2\x91\xa0\x7e\x55\x76\x78\xd6\x6a\x1d\x3e\x3a\xf5\xad\xd3\x8e\x58\x1a\xb7\x97\x63\x15\x8c\xb8\xe0\x8b\x68\xfb\xd9\x78\x61\xeb\xac\xa7\x0b\xe6\xf1\xbf\x43\xbb\x4e\xd6\xdc\x16\x6f\xac\xd2\x5f\x25\xbd\xb7\xc2\xfc\x06\xc9\xaf\x66\xf2\x6c\xcb\x78\x3a\x39\xbc\x7c\xd3\xeb\x45\xb8\xae\xd0\x49\x78\x4d\xa2\xb1\x29\xc2\x73\xca\x31\xc6\x3c\xff\xb6\xbb\x34\xd7\xeb\x21\x39\xf1\x3b\xe3\x29\x38\x6b\xeb\x3e\x8c\x4f\x61\x35\xc9\xc9\x15\x30\xfb\xe6\xd4"
		"\x08\x69\xac\xfc\xa4\xb9\xb1\x2c\xf7\x03\x18\x7e\xb3\xf6\x21\xf1\xfc\xd4\x01\xaf\xc9\xeb\x67\x94\x09\x3f\x0b\x7b\x7e\x7b\x7c\x01\xd2\x47\x9b\xf1\x3f\x3c\x5e\xd2\x14\xe9\xbe\x31\x1d\x38\x21\x1a\x77\x99\x63\xe3\x11\x5e\x17\xcd\x63\x6d\x7f\x0e\x9e\x8e\x1e\xcc\xbd\x61\x67\x1d\x0c\xed\xf5\xe4\xac\xad\xbb\xfa\xb0\x64\xc2\xf7\x75\xfa\x59\xeb\xfe\x99\x51\x4d\xda\x12\x03\x3d\xa7\x5f\xe7\xb5\xf3\xb7\xf4\x59\x7e\x9f\xf7\xf8\xfb\x2e\xbd\x2d\x3a\x8f\x72\x6d\x8f\x3b\xb9\x34\xf5\x90\x59\x8f\x8f\x81\x68\x10\x32\x0c\x21\x7b"
		"\x75\xeb\xe0\x17\xb8\x3c\x8e\xe4\xd8\xf8\x15\xef\x31\x35\x68\x0a\x0b\x3b\x3a\xbd\x60\x9e\x22\xcd\x20\xe0\x78\x58\xfe\x2f\xc9\xe1\xa8\x58\x2c\x8a\xe5\x72\xa0\x8d\xa1\xeb\xaa\x4e\xaa\x26\xab\xf2\xc5\xf2\xc5\xef\x2b\x1f\xf1\x25\x32\x5f\x53\x76\xf5\x70\x63\x1c\xaf\xfc\xc2\xfb\xba\x05\x39\x7b\x63\x8b\x13\xc9\xdd\x47\x75\xa4\x2b\x1e\x3b\x91\x1e\x1f\x99\xf1\x32\x1d\xfb\x4f\x75\xba\x24\xd6\x88\xf7\x70\xed\x1c\xf4\xcf\x35\x3c\x25\xb1\x3d\x19\x5b\xf9\x89\xad\x4e\x54\xeb\x06\xa1\xdd\x15\xae\x83\xc9\xf0\x48\xca\xaf\x42"
		"\x8e\x82\x97\x0f\x90\xba\x17\x52\x85\xd1\x3a\xf3\xf7\x56\xbb\xed\x8c\x4b\xca\xe3\x22\x3e\x75\xb8\xbf\xfa\x0e\x8f\x13\xf5\x4d\x34\x73\xe1\x07\xce\xb3\xeb\x1a\x48\x6c\xd2\x93\x18\xbe\x17\xe0\x42\x66\x87\xff\x27\xbc\x86\x31\x0b\xd4\x47\x49\xa3\x0e\x53\x6c\x8c\x99\x9d\xde\xdc\x88\x0f\x1e\xb4\xbf\xba\xd5\xfc\xdd\xef\x13\xfb\x91\xd3\xed\xa4\xd7\xab\xd5\x69\xb5\xfc\xed\xbc\xd5\xc1\xdb\x1e\x3d\xec\x7b\xc3\x61\x54\x98\x6f\x1f\xe9\x88\x0b\xd1\xf0\xa4\xd7\x3d\xad\xba\xce\x57\xd0\x56\xbc\xe7\xe6\x90\xc3\xca\x38\x86\x99"
		"\xd4\xd3\x1c\x8c\xfe\x19\xd4\x2d\x92\x5a\xb8\x61\x87\x36\xe0\xc1\x7d\x37\xd0\x8b\xcf\xfd\x2e\xa8\xc9\x24\xbe\xdc\xc4\x72\xa7\x5e\xfd\x71\x84\x93\x91\x5e\x7d\xe2\xf0\x69\xab\x98\x96\xe0\x3a\x2c\x4e\x73\xe7\x04\xd8\x5b\x5a\x07\xb1\xe5\x80\xde\x63\xfd\x20\xd5\x63\x92\xd9\x17\x56\x5f\xe9\xf6\x54\x50\xf8\xde\x40\xd6\x21\xad\xfd\x8a\xf7\xcb\xf2\xce\xe2\x60\xb3\x12\xf5\xb8\x48\x3c\x87\xed\xfa\x02\x0e\x4f\xcb\xd6\x97\x39\x9a\xd3\x42\xfa\x79\x80\x8d\x10\x27\x47\xca\xf4\xa6\x29\xd6\xb5\xd5\x04\xdc\x73\x1f\xcf\x6b\xad"
		"\xd4\x97\x79\x3c\xfd\x79\x5e\x47\xfe\xb2\x69\x41\xfc\xd8\xbe\x3a\x87\x10\xd6\xd5\xac\xcf\x6c\x22\x58\xc6\x81\xd4\xdf\x78\x3d\x3c\x8b\x1e\xe6\x48\x6d\xf6\xe3\xbb\x05\x83\x7a\x92\xef\xbc\xc7\x62\xb2\xb1\x81\xfe\xae\xe8\x63\x44\x9a\x55\x7e\xbf\xe6\xbe\xce\x1d\xb3\x35\x2c\x03\x3f\x44\x6b\xdd\x30\x4c\x3c\xcf\xeb\x54\x2e\xda\x8a\xbf\xd0\x7c\xd7\x56\xbb\x4e\x74\x38\x8b\x16\xe1\x19\x7b\xff\xa5\x5a\xdb\x93\xf7\xdf\x2b\x9c\xb9\x17\x93\x6f\x35\x7d\x8d\x1c\x6e\x76\x86\xfa\x7d\xea\x03\xea\x5e\x90\x52\xeb\x44\x0c\x04\x6b"
		"\xc2\xfe\xd8\xac\x57\xf2\x28\xbe\x7f\xaf\xeb\xca\x8e\x24\xb6\x35\x35\x6e\x8e\xa6\x16\x6a\x97\xdd\xe6\xb2\xd4\x3c\x0e\xec\x6d\x19\xad\x3d\x83\x40\x2f\x60\xd4\x1d\x94\x46\x2e\xc5\xe9\xb3\x86\x58\x0a\xfd\xcc\x38\x21\xa4\x27\xb0\xa9\x7f\xc1\x98\x4f\x3e\x5c\x2d\x3d\x8d\x3b\xe8\xf1\x34\x10\x2e\xdd\xa8\x6c\xe7\x92\x8f\x5b\xb0\x81\x8b\xfc\x36\xcf\x81\xdf\xe7\x27\xf2\xf7\xfa\xf7\x59\xd7\xbe\xd4\xf1\xab\xd6\x91\x17\x81\xbe\xa0\x4e\xae\x35\x5c\xdf\x98\x1e\x40\xa0\xe1\xbb\xc7\x16\x31\x0e\x49\x66\x5a\x34\x8d\x7e\xdb\xcc"
		"\xde\x62\x8f\x21\xb6\xcf\x86\x69\x04\x3d\xe1\x73\xab\xb6\x04\xfa\x2e\x3e\x78\x2e\xc0\xef\xd0\xbd\xe4\x9c\x9c\x06\xe5\xcf\x9b\x71\x79\x6e\x1f\x03\xd6\xb7\xc2\xff\x5d\xc6\xc4\x11\xea\x2e\x07\xaf\x3f\xa2\xce\x77\x2b\x3e\xba\xd1\xdf\x4b\x56\x8f\x4b\xd7\x1e\xfb\x75\xc9\xd0\xd3\x12\x72\x7e\xa8\x1d\x96\xa1\x17\x5f\xde\xf4\xef\x5e\xab\x9a\xab\x8a\xd3\x33\xcf\x8f\x3e\xcf\xf1\x43\x7e\x77\xf1\x1e\x51\x73\x58\xf7\x7b\xbd\xf7\xb8\x79\xdc\xd7\x00\x5a\x77\xfd\xca\x23\xb2\x1a\xbf\xb6\xb7\x0c\xd5\xb0\x50\xba\x92\x87\x15\xeb"
		"\xff\x3c\xdb\xe7\xcb\xec\xdb\xfd\x2c\xf7\xde\x04\x7f\x4e\xff\x3e\xfb\x1d\xbf\xa7\x7f\x4a\xff\x91\xfe\x96\xfe\x33\xfd\x73\xfa\x87\xc5\x57\x90\x37\x1d\xe9\x3f\x02\x07\xaa\xae\xa5\x23\x76\xcc\xd3\x34\x23\x7a\xb3\x6e\x9d\xa1\xf0\x1c\x94\x38\x1a\x90\xc5\x87\x5b\xfc\x9c\x13\xe6\x08\x1b\xdf\x0f\x44\xdb\x96\x62\x72\x24\x97\x53\x69\x67\x05\x18\x50\x58\x9f\xd2\xd0\xfd\x31\xb9\x6c\xa8\xe3\x08\xcf\x0d\xdc\x79\xa3\xa9\x99\x2f\x7e\xdd\x35\xd4\x63\x65\xf2\x79\x24\xb5\xeb\x61\x3e\x28\xc5\xb5\xd1\xd2\xe8\xef\xda\x37\x74\xce"
		"\x26\xd2\x3b\x60\x10\x3f\xcf\xa9\xf3\x96\x5e\x9d\x11\xfb\x8e\xc6\xbb\x64\xcc\x0f\xc2\xfb\x2e\x78\x7d\x64\x86\x40\xff\xd5\x8d\x5f\x03\x7d\x56\x0f\x27\x72\x8f\x0d\xcf\xc8\xc3\xea\xa3\x3e\x29\x7b\x78\xd2\x8c\x87\x8a\x7d\x88\x5a\x79\x50\x69\xf4\x5d\x61\xe7\x65\x6b\x4a\xde\xa1\x2f\x65\xf4\x93\x12\xf0\x24\x93\xcd\x2f\xe9\x75\xaa\x97\x76\x2f\x44\xcf\xf7\x63\x58\x66\x8b\x4b\xcc\xf9\xda\x67\xd0\x46\x05\x8d\x19\x27\x0f\x4c\xdf\xaf\xaa\xb7\xec\x58\xff\x1e\xf5\xbe\x9e\xa0\x2f\xa0\xab\x33\x81\xb8\x05\xe3\x01\x02\xc7\x39"
		"\xfc\x3d\x9b\xd3\x51\xee\x92\xf1\x47\xa4\x51\x53\x46\x7e\x67\x7a\x50\x07\x6b\x1c\xad\x59\xa9\xec\xfc\xab\xd1\x54\x43\xde\xbc\x60\x8f\x77\xac\x5d\xc1\xfe\x08\xb9\xc6\x61\x91\xd3\x40\x6b\x98\x54\x3c\xca\xea\x08\xd1\xff\xf4\xec\xe2\xd0\xea\xcf\x21\x31\xdf\x43\xf3\xf9\x4c\x5d\x3a\xc1\x95\x46\xc8\x41\x8e\x9e\x8e\x06\xd5\xf5\xb8\xf7\x48\x3d\x81\xa6\x7e\x0e\x6a\xf4\x0a\xf7\xe2\x27\xf9\xee\x5e\xfb\x73\x50\x4f\xa1\x7d\x95\xf3\xaa\xd5\xed\x71\x19\x8e\xa4\x0f\xce\x1f\xfa\x2d\x5c\xff\xee\xed\x9a\x93\x4b\xf0\xa3\x27\x58"
		"\x2b\x19\x77\xe1\x04\xcf\x7d\x22\x31\x5a\xa8\x5f\xe0\xd8\x18\xaf\xae\x8a\xf1\xdf\x2a\x6e\xd4\xaa\x2f\x3c\xa4\x36\xc7\xb1\x6f\xf5\x78\x43\xac\x33\x91\x9a\x40\xc5\x45\x31\xda\x10\x6e\xef\xc5\x3b\xee\x74\x70\x34\x7e\x8e\xa0\xd9\x6b\x72\x2a\x2a\x86\x38\xb6\xfa\x32\x92\x67\x36\x28\x3b\xd8\x01\x06\xaf\x79\x87\xa5\x8e\x0b\xf1\x4e\xd6\x57\x75\x59\xa7\x26\xec\xb9\x9e\xeb\xfa\xb0\x7b\x7d\xc5\x12\xeb\xd8\xef\xcb\x7b\xbe\xf7\x07\xfc\x9e\xbe\x14\x2e\x30\xeb\x63\x9c\xdb\x7d\x4e\x0f\xa4\x1e\xd2\xb3\xe5\x3d\xe9\xf3\xc1\x6d"
		"\xef\x35\xe6\xf6\x55\xbe\xcb\x2b\xef\x8b\x4a\xce\xb9\xf1\x5a\x15\xff\x74\x0a\x70\xee\xc5\x1e\x9f\x75\xfe\x38\x5f\x62\xfe\x8d\x58\x3d\x1c\xa6\xe7\xe0\x71\xd7\x1e\xbc\xfd\x5f\x68\xcd\xd5\xa0\xf5\xf6\x90\x33\x9e\xbc\x1e\xdd\x75\x8d\x4c\x76\x7a\xa6\xb0\xb8\xd6\x6a\xef\x3d\xf4\xc0\x4b\x2e\x65\xd4\x39\x76\x87\xdf\x9d\x1d\x2d\x9c\xc1\xa9\x3f\xa1\xeb\xae\xe3\x77\x4b\xd3\x67\xb8\x56\xf9\xcc\xa2\xbb\x85\xfd\xe6\x58\xbf\x5a\xa6\xbb\x49\xfb\xc0\x37\x7b\xb6\xf2\xbe\x57\x95\x5e\x62\xae\xf3\x19\x94\x83\x9a\x1f\x79\x86\xb3"
		"\x7a\xe6\x39\xe8\x5d\xa9\xf9\xe4\x1e\x26\x7d\xcc\x0d\x5b\x96\xf8\x3b\xd4\xbd\x16\x7e\x84\xf7\xe6\xf1\x7a\xa3\x1e\xf1\x55\x3f\x08\xf9\xb6\x2f\xde\x73\x74\x11\xb2\x83\x71\xba\x71\x50\x83\xb7\xd8\x33\xfe\xb4\x7a\xe6\x67\x12\x13\x53\x1e\x97\x58\x7d\x1c\xc4\x55\xf3\xca\x13\xae\x78\x0c\x2c\x97\x41\x8e\x3f\xc8\xc5\xd4\xa5\xbb\xfc\x32\xf0\xe5\xf6\x68\x30\xb7\x7a\x31\x46\x75\xe1\x1e\x3e\xeb\x69\x5c\x63\x3e\x92\xe9\xb8\x31\x1d\x93\x70\x6c\xc9\x47\xa8\x8d\xde\x1a\x0f\x6e\xbc\xaf\xfb\x47\x78\xfd\xa6\xf4\xfa\xaa\x30\x93"
		"\xd3\x9a\x73\x3c\x2b\x5d\xfd\x62\xe7\xc6\xa0\x67\x32\xf6\x8d\x8b\x74\xed\xd1\xf7\x30\xbe\xc4\xda\xe7\xf0\x8b\xfc\xea\xee\xb3\xe4\x11\x2f\xf2\xbd\x5a\x2f\x4c\xee\x9e\xf9\x94\x0d\x3c\xe4\x2c\x77\x5f\xc6\xe2\x90\xe4\xbb\xa0\x3f\xc4\x93\xd2\xe8\xba\xcc\xcf\xf2\xcf\xf2\xdb\x0d\xfb\xfd\x5b\xfa\x7b\xfa\x67\xf9\x47\xfa\x97\xf4\x5f\x9b\x26\x58\xd1\xe2\xcd\xd0\x77\xed\xa4\xfa\xd1\x85\x79\x3c\xd2\x93\x31\x13\x0d\xef\xc9\xe9\xf3\xca\xec\x9f\xb1\xcd\xde\xb8\x5c\xf3\xdb\xcf\xc4\x26\x97\xeb\x29\xf6\xe3\xa7\xf9\x39\x7c\x99"
		"\x9f\xc3\xcf\xf3\x73\xf8\xf3\xfc\x1c\xfe\xa9\xe0\xdf\xd8\x8f\x1e\x7b\x34\x39\x1a\x52\x2d\x5e\xb7\xd7\xaf\x7a\xeb\x1b\xbc\x5c\xd3\x3c\xc6\xbe\xa4\xdf\xd2\x9f\xe6\x6b\x7a\xd1\xd7\xe4\xe9\xb8\x3b\xda\x39\x14\x63\x0c\xea\x8d\x5a\x7c\x42\x6b\x17\x40\xcf\x43\xf5\x5a\xf9\x3c\xc7\xc2\x97\xaa\x5f\x8c\xfe\xfe\x6d\x8e\x37\x3f\x66\xdf\xfb\x1b\xfd\xfe\xbc\xd4\x7a\x40\x5e\x2b\xf2\xa7\x47\xda\x4b\x0b\x72\x51\xc8\x53\x87\xf5\x7d\x20\x75\x4a\x03\x6a\xa0\x83\xbf\x6d\xea\x7e\xf6\xd8\x7d\xc2\x51\x74\x79\x48\x50\xff\x71\x26\x1a"
		"\x11\xb8\xde\x6a\x3e\x40\xd5\x9b\x95\x1c\xcf\xb7\x7b\x75\xdf\xaf\x2e\x41\x9e\x8e\xd5\x88\x05\xf9\x37\x9b\x17\xe3\x7e\x7a\x93\xe7\xed\x68\x4c\xf6\x8e\x86\x3c\xf6\xcb\x1a\x41\x83\xac\x75\x0d\x07\x87\x67\x84\x6b\x75\x56\x35\xa2\x55\xed\xee\x3a\x7e\x4e\x50\x5f\x9c\x25\xee\x63\x66\x62\x61\x36\x1e\x1d\xbe\xf0\xc9\xe1\xa9\xb5\x78\x59\x7a\x7b\x27\x56\x3b\x9f\xf7\xa9\xbf\xd2\x9e\x43\x6e\xbf\x49\xf9\xb6\xcf\x9f\x95\x1a\xdf\xf7\x6c\x0a\xe3\x30\x79\xfe\xc7\xd1\xe3\x23\x92\x1c\x61\xa6\x35\xab\x41\xed\x5b\xd0\x7f\xa3\xf9"
		"\x3b\x7d\xef\x81\xde\xdb\x31\x3f\xe6\xf3\xcf\xf2\x6b\xac\x61\x90\x2d\xbf\x90\xf6\xe9\x63\xb9\x8f\xc8\xf7\xd9\x70\x12\xbf\x26\x65\x14\xa7\xa6\x99\xf6\xf2\x74\x6a\x9d\x91\x07\xae\xd7\x8d\x28\x6f\xe2\x3c\x3b\x0f\x8f\x7c\x06\xcd\xb5\x51\x78\x3e\x0e\x79\xea\xae\xdf\x8e\x1a\x6b\x72\x36\xfa\x56\xbd\xe9\x5f\x70\xf1\xf5\xa4\x54\x0e\xd5\xd4\xa4\x44\xf6\x21\xc8\x6b\x6d\xf1\xb5\xd7\x8f\x90\xe8\xa9\x45\x3e\x7e\xb3\xd6\x67\x4f\x5c\xc0\x7c\xb5\xc6\xf7\x19\xb5\x8c\xc4\xd7\xd1\xf0\x6a\x2c\xc2\xdc\x21\xc1\x18\xbc\xbe\x2b\x1e"
		"\xf7\x20\x13\xce\xbe\xb1\xbf\x89\xf7\x2d\xf0\x9e\x25\xe3\xcb\x0d\xa4\x47\x84\x59\x97\xa5\xee\x05\xe7\x1d\x2b\xc4\xfd\x3d\x5c\xb1\xf2\xc5\x50\xf7\xe6\xee\x47\x4f\xe9\x12\x70\x0d\xeb\xde\x61\x5d\x82\xbe\xcd\x11\x77\x24\xa8\x5f\x33\xf7\xe1\x68\x24\x65\xe2\x97\xe7\xe4\xf4\xe7\x03\x7f\xfd\xf3\xea\xaf\x87\xfb\x48\xbd\x4f\x73\x6e\x12\x4e\x46\x6e\xf0\x0e\xfe\x3f\xae\x67\x22\xbc\xb0\x3e\xf9\xba\xaa\x98\x77\xf5\xe6\x47\x88\x4d\x05\x3c\x83\xc1\xd1\x9e\x88\xf2\x7c\x26\x8f\xe5\xf8\x3c\xb4\xdf\x12\xf4\x2e\x33\x75\xf1\x3b"
		"\xf8\x06\x27\xdd\x47\x33\xb0\xe1\xbe\x2d\xf5\x35\xb0\x99\x9e\x6b\xc4\x59\xf7\x78\x1e\x6e\xbd\x7e\x6b\x7e\x7b\x1a\x29\xf4\x19\x7c\x4f\x17\xf0\x53\xaa\xf9\x1d\xc6\x0d\xba\x27\xde\x3d\xbf\x52\xf7\xe3\x20\xd8\x8a\xba\xb7\x0a\x3b\x4e\xbe\xb6\x59\xa5\xb5\x1b\xf9\x25\xb9\xd6\xeb\x31\xb9\xf4\xa0\x97\x4d\x9f\xfd\x9e\x96\x13\xd1\xfd\xc9\x32\xb9\x71\xb8\xce\xf7\x3e\x39\x58\x9a\xc7\xd3\x76\xfb\xa1\x8a\xaf\xc5\x4c\xf3\xea\x86\xc7\x6e\x73\x16\x17\xf9\x1e\xf3\x6e\xfe\x40\x6f\x1e\xc6\xc3\xab\x6c\x1e\xf0\x87\x0f\x04\x6f\x1c"
		"\xa2\x3e\x98\x0e\xbe\x8b\x7c\x55\xf4\x9f\x5a\xfd\xad\xa3\x9e\xd7\xc7\xa0\xc7\xf6\x21\x3d\xea\xa8\xce\x3f\x10\x73\x0c\x01\x86\x4f\xf5\x46\xd7\xf5\xd1\x70\xd3\x1c\x2e\xcb\xd4\xd0\xe5\x3f\x33\x2e\x03\x70\x02\x58\xcc\x72\x80\xde\x30\xd8\x3f\xac\x67\xb5\xd7\xc9\x9f\xd7\xd3\x9a\xff\xfd\x8c\x6b\xb1\xea\xdf\xd3\xf2\x61\xd1\xef\xcc\xa8\x61\xed\xe4\x4d\x3a\x67\xee\x0e\x4e\xed\x38\xc7\xe3\xaf\xfb\xf4\x62\x83\x7a\x78\xa3\x05\x2d\x9c\xab\xa0\xd7\x9b\x43\xa0\xe5\x45\xf5\xb6\x55\xad\x2f\xad\x0d\x5a\x7d\x97\x92\x27\x7d\x92"
		"\xef\xfb\xfb\x8b\x46\x71\x04\xab\xe1\x80\x9a\x68\xa6\x7b\x75\x60\x9a\x3d\x6e\x8d\x0e\x62\x33\x7d\x95\x3f\xad\x6c\x35\xf5\x1f\x5f\xfd\xde\x81\xc0\xed\xf4\xb0\x4a\x6f\x3d\x8f\xb4\x80\x5d\x7f\x38\xe2\x3d\x07\xdf\x7b\xb8\x61\x84\x27\xea\x6b\x60\xfa\x48\x23\xe3\xc3\x34\x72\x8f\xb8\xd6\x99\xb5\x15\xc7\xb3\x7e\x66\xdd\xfa\xae\xba\x97\x36\xbf\x4e\x1e\xb6\xac\xea\xe7\xec\x60\x37\x67\x07\x63\x75\x6b\xa6\x1a\x75\x88\x13\xe8\xff\x8f\x5e\xbd\x23\x89\x51\xdd\x9a\x59\xe2\xcb\x45\x3a\x4f\x11\x9e\x15\x61\xb6\x13\xf8\x15\x12"
		"\x68\x1f\x23\xbe\x39\x05\xb8\xdb\xde\xbc\x32\xe3\x8b\x16\x1e\x68\x95\x07\x26\xf8\xee\x08\xdc\xa1\xcf\x6b\xbe\xef\x67\xd5\x5f\x1b\xdf\x47\x8e\x6c\x7c\xe9\x8d\x3a\xcf\xeb\xe7\x3d\x36\xdc\xc9\x33\x61\x4f\xc9\xec\xf5\x10\xd0\x7e\x21\xf4\x11\x3d\x60\xdd\x5c\x80\x8b\xfc\x48\xae\xf7\xe8\xc4\xc7\x55\x6d\x73\x53\x23\x66\xc5\x0d\xd6\x5a\x11\x4f\x9f\xdf\xe3\xd6\x4d\x04\x87\x74\xe3\xcf\xf4\xad\xad\x73\x13\x70\x49\x99\xdf\xdd\xaa\x75\x46\xdb\x25\x06\x9f\x69\xd7\x1c\xf8\x7c\xa6\x3e\xce\x11\x04\x9a\xda\xa8\xfd\xd8\xea\x3b"
		"\xb7\xa7\xa7\xdc\x48\x74\x96\x2b\xfe\xe1\x0e\x8d\x97\xa6\x7e\x64\x43\x73\x89\xf2\x69\x1a\x3c\x0b\xba\x06\x7a\x3e\x95\xb7\xf6\x36\x72\x05\xbd\xc3\x63\x75\x6b\x19\x48\xbe\xe3\x19\xce\x37\x78\x76\x14\xae\xdd\xed\x99\x40\xfa\x28\x31\xfc\x66\x22\x75\xc1\x93\xc3\x53\x89\x74\x85\x06\xc2\xed\xea\x13\xe7\xef\x50\xfe\x7e\x54\x0b\xe2\xe5\x98\x1c\x9b\x7a\xf0\xb4\x3c\x83\xfe\x8c\x95\x2d\xcf\x44\xf3\x23\xab\x3e\xc6\xe4\xf7\x83\x70\xdd\x83\xca\xdf\x17\xe2\xff\xd3\xde\x0a\xb5\x4e\xa9\x97\xbb\xcc\x72\x69\xaf\x71\x8e\xad\x65"
		"\xfd\x55\x3c\x9e\x98\xfb\xce\xb0\x2e\x39\xf1\xf8\x0e\x7d\xfe\x9e\x70\x99\x46\xe2\x5f\x8c\x50\xd7\x1d\x71\x30\xc6\xfc\x12\x8e\xbb\x5e\x5e\x7e\xac\x4e\x0a\x72\xe1\x11\xce\xc4\x7c\xb5\x4c\xd6\xd9\x89\xc5\x58\xe9\x6d\x37\x4f\x94\xf6\xcf\x43\xec\x8a\xd5\x18\x39\xf8\x66\xc9\x6d\x9f\xd3\xc7\xae\xba\xb6\xa8\x36\xab\x85\x29\x0f\x9b\x9d\xfe\x6a\x35\x18\xe4\xb5\x99\x23\x61\xf5\x80\xe8\x9f\x19\xad\x15\x15\x2f\xfa\x3c\x13\xde\x2b\x66\x50\x7d\x6e\x58\x9e\xc3\xb3\x07\x83\xd6\x5e\x52\xdc\xdb\x83\xea\x33\x99\x99\x06\xa1\x87"
		"\x97\x79\x7a\xae\x8d\x7e\x61\x1a\x87\x8a\xea\xc4\x18\xef\xe2\x8f\xe0\xec\x45\x1f\xa2\xc6\xa9\xcf\x3b\x31\x91\xfd\xb1\x44\xbf\x97\x77\xe3\xe8\x24\xe2\x79\x4f\x55\x5f\x21\xdb\xab\xe2\x20\xba\xdf\xf6\xb4\x69\xa7\x0d\x4a\x37\x85\xf2\x30\x3d\x2e\x2f\xf3\xe1\xd2\x9b\xab\x9d\x59\xb4\x0c\xc7\xa0\xcf\xaf\xc7\x37\xd1\x7c\xf6\xea\x5a\x09\x6f\x0e\x6d\xcc\xe4\x70\x54\x0a\xe7\xc5\xf0\xe5\xd3\x1d\x07\x3a\xa8\x9a\x02\xef\xfb\x89\xc4\xdd\x6c\x3c\x6c\xf5\xf3\x62\x39\x2b\x54\x6b\x80\xe5\x9a\x1c\x9e\xeb\x04\x18\x8e\xbb\x3e\x38"
		"\x7e\xaa\xc7\x5b\x68\xe1\x01\x51\xad\x52\xa5\xdd\x9d\x2e\xa1\x3d\xc1\x77\x8f\x63\x66\x14\xbf\x5f\xce\x30\xbf\x87\x71\x7e\x0f\x07\x78\x0f\x14\x8b\x34\x76\x9e\xf7\xbb\x08\x79\x48\x0c\xf7\x13\x8e\x3b\x0e\xe2\xf4\xc9\xda\xd9\xdf\x49\xe7\x87\x98\xee\xc4\x84\x9a\x89\xc9\xf6\x39\xf4\xb4\xa3\x46\xaf\xbe\x13\x7c\x60\xc6\x53\x98\xd2\x87\xe1\x42\x9b\x7e\xc0\x4e\xff\x0e\x56\xaf\x68\xe6\xad\xd8\xeb\x9b\x88\x0f\x84\x75\xf1\x53\x43\x17\xb0\x1d\xdf\xbf\x34\x35\xe1\x35\xee\xee\xf1\x2b\x19\x77\x4e\xe3\x8c\xb4\x2e\xcb\xd4\x69"
		"\x91\x1a\x11\x8c\x69\x92\xed\xd9\xce\x38\x5c\x15\xbf\x6f\x47\x9e\x96\xe1\xd2\xc6\xcf\xce\x60\x6f\x55\x5f\xb3\x03\xea\xc6\xea\xda\x99\xec\xd4\xcb\x55\xf8\x35\xea\x18\x3e\xfa\xc2\x16\xfe\x5e\x55\xc7\xaa\x7e\x33\xb2\x7e\x84\x0c\x97\x57\xfb\x4f\x3a\xaf\xad\xc6\x6c\x57\xe9\xb6\x3c\xf4\xb4\x70\xdb\x4d\xa3\x41\xd7\x0b\x29\x6e\x3a\xfe\xf6\x34\xef\xfb\x8c\x3a\x88\xd9\xd6\xe1\x5b\x4e\xf4\x35\xd4\xb7\x62\xba\x4d\x83\xe9\xa3\x74\x75\xfd\xe9\xaa\x56\x28\xd7\xf5\xc7\x47\x98\x9b\x9a\x5f\x2c\x5a\x13\x66\xad\x61\xa8\xea\x33"
		"\x09\xc6\xaa\xf1\xad\xaa\x7e\x12\xfb\x60\x65\xdb\x83\x86\x6a\xb7\x81\xb6\x6e\x4f\x7a\xe1\x50\x3c\x46\xf7\x7d\x21\xf8\xe7\xae\x9e\x66\x5e\x5d\x51\xa0\xc3\x17\xce\x29\xd2\x23\xd2\xe4\xa4\x59\x4d\x6b\x2b\x8f\xbb\xe2\xd0\x5f\xe4\x7b\xfa\x19\x6c\xe5\xb8\x47\x27\x3d\xda\x9e\x63\x8e\x16\xf3\x79\x3b\x55\xab\xb6\x4b\x4b\xa5\x9c\x27\xc3\x18\xcf\x90\xe7\x86\xda\x49\xa3\xeb\x05\xeb\x56\x47\xea\x2b\x27\xe8\x5d\x4a\x75\x2c\xe5\xc5\xf0\x3c\x4c\xbd\x66\x54\xdb\x90\x3e\x62\xac\x21\xd7\x3d\x0e\x69\xdf\xdd\x46\x5f\xcd\xb1\xd5"
		"\x53\x4f\xf3\xce\xa5\xee\x11\xe6\xe1\x0a\xd3\x5e\xac\x53\xe7\xdc\x91\x37\xbd\x17\x7f\x20\xd7\xd1\xad\xfc\xd4\x03\xeb\x55\x14\xf8\x52\x98\xd3\xf6\xfa\x5a\x7b\xf9\xdc\x69\x87\xfd\x94\x46\x6f\xeb\xca\x8f\x71\x7a\x68\x52\xdc\x4e\xde\x9a\xf8\x39\xd7\x2c\x02\xce\xa2\xdc\xfb\xd6\x66\x52\xdf\xc3\x6a\x8d\x31\x67\xe1\xed\x73\x4e\x7e\xef\x5d\xd6\xc7\x1b\xdf\x51\xd1\x5d\x7e\x0a\xfa\xf3\x20\x4f\x80\x72\x76\x02\x5e\x1a\x6a\xdd\xe4\x1d\xbd\x13\x32\xf4\x1f\xaa\xd6\x2e\xa8\xd1\x34\x7a\xb8\x58\xcb\x11\xe8\x17\x7b\xb9\xcc\x01"
		"\xf6\x75\xb5\x90\xd1\x17\x83\x1a\x14\xc1\xb8\xd3\xe3\xf3\x3a\x3c\x0d\x0f\x4f\xde\x72\x87\x9a\x2f\xa9\x7d\xd2\x6c\x7b\x81\xf5\x81\x56\xb2\xd1\x7c\x75\x30\x41\xd4\x34\x1c\x40\x2b\xa6\xf4\xa4\x3b\x3a\xb9\x7d\x9a\xc7\x56\xeb\xf8\x81\xe8\xa2\x62\xff\xe7\x2c\xd7\x18\x5f\x21\xf5\xcb\x7d\xe2\x3a\x32\x03\xe8\x8e\xb9\x38\x4b\xe6\xe3\x76\x94\x36\x9f\x8b\xe1\x20\x2c\xbf\xd4\x25\x7b\xdd\x91\x6e\x7a\xa9\x95\x5f\x6c\xc7\x29\x7d\xb8\x75\xae\xad\x9a\x9c\x51\xac\xee\xa9\xd1\x93\x00\x0d\x6f\xc4\x66\x7e\xc4\x1e\x94\x58\xa9\xf0"
		"\xda\x7e\x96\xdf\xe6\x33\xfe\x9e\xfe\x92\xfe\x9e\xfe\x9a\xfe\x91\xfe\x26\xff\x35\xdf\xd5\x7f\xef\xe6\x96\x7a\xb9\x72\x8c\x65\x24\xf1\xe7\x59\xb6\xd3\xb5\x46\x3d\xf3\x6c\xf4\x1d\xad\x3e\x53\xcb\x86\x57\x7a\x21\x10\x3f\x7a\x3a\x08\xba\xf6\x43\x84\xac\xcf\x41\x4f\x44\xcd\x6d\x77\x7d\xe5\xf4\x4a\xfd\xe4\x4e\xe3\x58\x84\x3f\x49\x7b\x7f\x20\x4e\x24\x77\x9c\xa8\xa5\x93\x44\x39\x6c\x4a\x07\x96\xf9\x58\xb8\xaf\xa7\x85\xee\xf5\xc8\xeb\x5b\x7e\x88\x19\x43\x8f\x7b\xd3\xf8\x68\xd5\x73\xd3\x8c\x33\xf6\x77\xdd\xcf\xb8\xf0"
		"\x8f\xb6\x7e\x58\x79\xb2\x75\xe9\x30\x76\xcb\x6f\xb2\xfa\xfb\x36\x6e\xba\x6b\xf5\xb9\x5f\x3f\x0b\x8c\x65\x21\xc7\x13\x85\x5d\x77\xdd\xf4\x43\x35\xe2\x7f\x9d\xe7\xee\xbf\xc8\x3f\x9c\x38\x40\xe9\x28\x24\xe2\x33\x91\x78\xad\x3c\x67\xec\x7f\xcc\x75\x5b\x1f\x7d\x24\x0a\x8f\xf5\x98\xe2\xb5\x20\xc3\x7b\x11\x8c\xa3\x0d\x96\x16\xf3\xd1\x8b\x1d\x9a\xb0\xdf\x57\xf5\xac\x27\x73\x2c\xc4\x42\x4e\x95\x5e\x38\xc3\x5f\x20\x9f\xe9\xfc\xfe\xd3\x7c\x0d\x17\xa3\x9b\x60\x8f\x73\x00\xad\xb8\xd6\xf1\xbe\xcc\xcf\xf5\x8a\x75\xdb\xc1"
		"\x71\x8f\x90\xab\xab\xf7\xc7\xbc\xaf\xc5\x9a\xd8\x78\x65\xd7\xc8\x8e\x31\x00\x4f\x2a\xba\xb7\xe8\xf7\x87\xaa\x2e\x38\xde\xe7\xe8\x3c\x73\xb6\xdf\xa9\xe2\x63\xf5\x95\xbd\xa9\xe2\x4e\xb5\x0d\xb9\x5d\x45\x7f\xef\x49\x5f\x5f\xd6\xf3\x0d\x34\x9f\xd6\xcf\x07\xf5\x7d\x34\xae\x59\xef\x14\x8d\xcd\xa1\x6f\x71\x50\xb6\xb3\x9a\x47\x59\xf5\xba\x56\x3a\xf0\xb7\x7d\x55\x5d\x6b\xde\x8e\x3d\xa9\x75\xa9\xa7\xda\xfb\xd8\xc7\x37\xc2\x30\xfb\x54\x3f\x13\xc9\xa0\x2b\x64\x70\xe9\xb3\xea\x93\xce\x78\x90\xd7\xba\xd6\x8c\xac\xf5\x62"
		"\xf0\xd0\x0b\x8d\x55\x74\xef\x80\xe2\x63\x94\x7e\xd9\xe7\x75\xde\xfd\x34\x8f\x93\xeb\xbc\x9e\xfd\x69\xf6\xf5\xff\xaa\x74\x4e\x8a\x46\xcd\x01\xd6\xa2\xb2\xed\xe9\x76\x8c\xf7\x79\x8c\x7f\x3c\xec\xc2\x6c\x67\xa4\x9b\xed\x73\x37\xdb\xe7\x6e\xb6\xcf\xdd\x37\x33\xe6\x8a\xb6\x47\xf9\xbf\x07\x1d\x2d\xad\xe3\x8f\x1a\x0d\xb7\xb1\x9e\xef\xfa\xe3\xcf\xa8\xf5\x5d\x30\xa3\xbc\xe8\x3b\x7c\xb5\xbd\x89\x52\xd4\x2b\x68\xda\x34\xb7\xbd\x98\x6f\xdb\xde\xe9\x31\xbf\xde\x73\xe2\x5c\xb9\x89\x68\xf1\x0d\xe0\x17\x95\x9e\x6d\xb9\xd9"
		"\xff\x7c\xda\xfa\x50\x30\x2c\xf4\xe0\xf5\x23\xaa\x62\x59\xb0\x6f\xd8\x93\x02\x6b\x17\xd4\x79\x7b\xda\xc3\xe6\xb5\x7e\xce\xcc\x57\x71\x7c\xe9\xcf\xab\x06\xca\xcf\xe9\xdf\x48\xad\x96\xea\xa1\x8d\xf5\x59\xa6\x07\x61\x5d\xb3\xc5\xd6\x17\xd9\x6c\xf8\x95\xe6\x58\xbc\x7d\x4d\x7c\xe8\xf6\x2b\xb3\x35\x64\xb5\x2d\xaa\xf7\xaf\xf0\x1a\x56\xd3\x9e\x6a\xcc\xfd\x49\xe1\x64\xf8\x1e\x8b\xad\x3b\x2a\x9c\xaf\xf2\xff\x2b\x3b\xa9\x75\x5a\xc8\xda\x21\xd6\xf7\xc9\x50\xab\x33\x79\x36\xb7\xf8\x71\xeb\x75\x88\xe3\x0b\x65\x63\xcb\x3f"
		"\x76\x9e\xaf\xae\x91\xec\x4d\xbe\x72\x9d\x1b\xa0\xd5\xd7\xad\x63\x31\x9b\x39\x70\xa9\x6d\x57\xc5\x07\x78\x25\xdb\xaf\xd5\xf8\xc6\xfd\x07\xe0\x60\xec\xba\x27\x27\x7e\x2d\xbd\x31\xf0\x39\xea\xe7\xad\x71\xaa\x5e\xcd\xaf\x69\x7b\xfe\x78\xcf\x76\x9d\x39\xd1\xde\x33\x76\x6c\x4d\xb7\x7e\xc9\x5f\x1b\x73\x01\xaf\xed\xb1\xa6\x8e\xd5\xfa\x64\xf7\xeb\xd7\xfe\x07\x87\x8a\xf7\x60\xaf\xa3\xf4\x6d\x3e\x69\x6d\x4d\xb2\xb6\x5c\xe0\xbe\xa2\x31\x8c\xf6\x71\x84\xe7\xa8\xdf\xf5\x23\x57\xff\xde\xc8\x39\xc6\x3e\x67\x56\x7e\xc3\xa8"
		"\x7b\x2d\x10\xde\xcb\x73\x35\xfe\xcb\xda\xf7\x12\xfa\xc9\xf6\xba\xaf\x1b\x47\xe7\x47\xbe\xab\xfa\xb8\x67\xdb\x17\xa2\x27\xb9\x53\xc1\xfe\x8d\xd0\x97\xb2\x23\x6b\xb3\x7e\x46\xcb\xb3\xdd\xb4\xd7\x88\x1d\xda\xd6\x54\x13\xd7\xc1\x98\x2d\x73\x49\x1d\x23\xf6\xef\xf7\xac\x75\x7c\x0c\x3c\x7c\x05\xb4\x0d\x0f\x9d\xd0\x11\xf3\x4f\x99\xeb\x93\x8c\xe0\x4f\x2f\x9f\x9f\x08\x4e\x69\xf0\xb9\xd2\xd7\x43\x58\xcf\xa8\x87\x4d\x1b\x43\x3b\xf5\xe6\x8c\xd1\xda\x7f\xa2\x63\x3e\xc8\xfb\xeb\x3c\xa6\xd1\x67\x37\x7a\xef\xd6\xa6\xb0\x9e"
		"\xc4\x95\xae\x44\xeb\xdd\xc2\x6f\x4e\x45\xc3\x57\xd7\x58\x95\x18\x1a\x74\x42\xbd\x18\xc0\x8b\xab\x3d\x1c\x41\xa8\x2d\xbc\x34\xd7\x91\xcc\xf0\x99\xf5\xef\xd1\xe0\x14\x57\xdf\xc7\xcd\x8f\xfe\x3d\x26\xae\xb8\x71\xc7\xd5\x79\x73\xd4\x9b\xf5\x7e\x0c\x53\x6f\x9c\x5f\xe2\xfd\xaa\xb5\x56\xc7\x89\x75\xff\x99\xc8\x27\xca\xc6\x1f\xd6\x39\xdf\xde\xc4\x65\xf6\xf8\xcc\xa7\xbe\xac\xf8\xca\xcb\xce\xed\xc0\x47\xe9\x1c\xfd\xd7\x0a\xaf\x7c\x25\xf9\xa1\xd7\x10\x33\xca\xde\x9c\xd8\x9e\xeb\xfb\x6a\x97\x55\xcd\x64\x88\x9b\xbc\x9b"
		"\xb1\x32\x11\xcc\x16\x6b\x16\x44\xbd\xcb\xc5\xb7\x7b\x96\xaf\x75\x3f\xda\xd5\x6e\x1f\xb1\xc7\xd0\x7a\x0d\x07\xe7\x19\xe2\xf5\x1d\xd7\x3a\x8a\x05\xb7\x38\x83\xfd\xee\x09\x1e\xc7\x31\x52\xfb\x39\x43\xff\x26\xfb\xb7\xcd\xf5\xe9\xf3\xf5\x34\x8e\xea\x4d\x4f\x56\x3b\xf7\xae\x0d\xee\xd3\xa5\xea\x4b\x31\x12\xff\xcb\xd3\xa5\x70\xf9\x51\x26\x1f\x59\xf7\xf2\xac\xfb\x75\x21\x47\xaa\x7e\x6e\x3e\x5e\xba\xef\x33\xe2\xd8\xff\xb7\xfd\xaf\xc6\xc7\xc6\xed\xa3\xf2\x93\xf0\x3d\x67\x73\x3e\xef\x78\xf5\x5c\xcd\x46\xd7\xb5\xce\xe1"
		"\x68\x9e\x31\x3e\x47\xbc\x9f\x1e\x31\x0e\x79\xb1\xf3\x1f\x72\xd4\x2d\xff\x92\xe9\x42\x77\x88\x11\x90\x9e\x5e\x5d\x03\x9b\xeb\x48\x3e\xab\xdf\x30\xc6\xf7\x2a\xa7\xdf\x3b\xdc\x50\x8c\x55\xb3\xc3\xc7\xe3\xb9\x8c\xff\x05\x3f\xd4\x04\x3a"
	};
	dict.loadParameterInfo(reinterpret_cast<const uint8*>(parameterData), 0x2fba);

	const Nativizer::CompactFunctionEntry functionList[] =
	{
		{ 0xaad4fd1212b84794, &exec_aad4fd1212b84794, 0x0000086c },
		{ 0xa073c88e8d09056c, &exec_a073c88e8d09056c, 0x0000452a },
		{ 0x0fc2d51b7ced4dcd, &exec_0fc2d51b7ced4dcd, 0x00000036 },
		{ 0x9a6f6aca8d111e71, &exec_9a6f6aca8d111e71, 0x00000caf },
		{ 0xab153720dd1cc727, &exec_ab153720dd1cc727, 0x00004bc7 },
		{ 0xb6275de5e6a5b2a2, &exec_b6275de5e6a5b2a2, 0x000022e9 },
		{ 0xb5ca5e3b50243f2d, &exec_b5ca5e3b50243f2d, 0x0000003b },
		{ 0x0fb9362e2abf0f98, &exec_0fb9362e2abf0f98, 0x000002aa },
		{ 0x44d4eafc4cea295b, &exec_44d4eafc4cea295b, 0x00000206 },
		{ 0x8dfa60d6e46c56c1, &exec_8dfa60d6e46c56c1, 0x00002247 },
		{ 0x506ffe8a2af2dc33, &exec_506ffe8a2af2dc33, 0x00000001 },
		{ 0x90e21bff606f75b8, &exec_90e21bff606f75b8, 0x000039ca },
		{ 0x18b17337bb66e010, &exec_18b17337bb66e010, 0x00000000 },
		{ 0x3ef3f66e30879284, &exec_3ef3f66e30879284, 0x00001a34 },
		{ 0x2b1a547e58c7c303, &exec_2b1a547e58c7c303, 0x000012df },
		{ 0x3d530525300dc184, &exec_3d530525300dc184, 0x00000000 },
		{ 0x8af2bd8b603a1bc7, &exec_8af2bd8b603a1bc7, 0x00000d0c },
		{ 0x8ad361571146d8c0, &exec_8ad361571146d8c0, 0x0000393d },
		{ 0xd00c9677c2caea9f, &exec_d00c9677c2caea9f, 0x00000564 },
		{ 0x36053c57b9481e35, &exec_36053c57b9481e35, 0x0000100a },
		{ 0xd71bbcf07de5ed53, &exec_d71bbcf07de5ed53, 0x00001aa0 },
		{ 0x25e4f6f9d1e122e8, &exec_25e4f6f9d1e122e8, 0x00001e09 },
		{ 0x3c736488ed10d0c0, &exec_3c736488ed10d0c0, 0x00000442 },
		{ 0x0b2b9792150eb7f5, &exec_0b2b9792150eb7f5, 0x000021aa },
		{ 0x1f39a7936501c711, &exec_1f39a7936501c711, 0x0000000f },
		{ 0x1f65fad518dcce09, &exec_1f65fad518dcce09, 0x000001ff },
		{ 0x5ad1884b5bcdb345, &exec_5ad1884b5bcdb345, 0x00002a2d },
		{ 0x1ce84a1111c564c1, &exec_1ce84a1111c564c1, 0x000003f2 },
		{ 0x44bf05ea867cb349, &exec_44bf05ea867cb349, 0x0000222b },
		{ 0x166f21b7856852d8, &exec_166f21b7856852d8, 0x000047db },
		{ 0x3b7f4b3a00df8076, &exec_3b7f4b3a00df8076, 0x000002e0 },
		{ 0x89e78f66e2f08790, &exec_89e78f66e2f08790, 0x000035a6 },
		{ 0xa5502a6901fcdfee, &exec_a5502a6901fcdfee, 0x00000f32 },
		{ 0x2a3f55c56cd62752, &exec_2a3f55c56cd62752, 0x000000fb },
		{ 0xb7ee05a7973ddeff, &exec_b7ee05a7973ddeff, 0x00004743 },
		{ 0xbb144de5577fd1a8, &exec_bb144de5577fd1a8, 0x000002a7 },
		{ 0xa83271a81e51952f, &exec_a83271a81e51952f, 0x00001c7c },
		{ 0xf0a135397129a366, &exec_f0a135397129a366, 0x00000946 },
		{ 0x5a473f4401af5816, &exec_5a473f4401af5816, 0x00000003 },
		{ 0xc0ff9637e7dd080c, &exec_c0ff9637e7dd080c, 0x00000006 },
		{ 0x54701422b00581ea, &exec_54701422b00581ea, 0x000004f0 },
		{ 0x73573b1760ab70e9, &exec_73573b1760ab70e9, 0x00001342 },
		{ 0x9d2df21f5e4c50e7, &exec_9d2df21f5e4c50e7, 0x00001eee },
		{ 0xce716b14930ec7ef, &exec_ce716b14930ec7ef, 0x00000009 },
		{ 0x5f5c3a91c7179d90, &exec_5f5c3a91c7179d90, 0x00000022 },
		{ 0xbd950a61edc464b8, &exec_bd950a61edc464b8, 0x000003ce },
		{ 0x5a1f624f814256f5, &exec_5a1f624f814256f5, 0x00000716 },
		{ 0x87c05e42c90e6ce6, &exec_87c05e42c90e6ce6, 0x000012d9 },
		{ 0xe3621a04e0f96521, &exec_e3621a04e0f96521, 0x0000183a },
		{ 0xe74741698d3a1e4d, &exec_e74741698d3a1e4d, 0x00000367 },
		{ 0x27d986f2676f9c7c, &exec_27d986f2676f9c7c, 0x00004244 },
		{ 0xe048047760077cfa, &exec_e048047760077cfa, 0x00001b4f },
		{ 0xa03113d19c0795a7, &exec_a03113d19c0795a7, 0x00002b70 },
		{ 0x142169f53887c43e, &exec_142169f53887c43e, 0x000006e2 },
		{ 0xd546add72808c3c9, &exec_d546add72808c3c9, 0x0000303e },
		{ 0x671947260b44a215, &exec_671947260b44a215, 0x00000018 },
		{ 0x1f3ab7d51b2f4365, &exec_1f3ab7d51b2f4365, 0x000004d3 },
		{ 0x14bf6ff79775397b, &exec_14bf6ff79775397b, 0x00001149 },
		{ 0xfe77d8a7912e061c, &exec_fe77d8a7912e061c, 0x00000c26 },
		{ 0xae8f205957e92eb3, &exec_ae8f205957e92eb3, 0x00000149 },
		{ 0xb8da69b0cd16df54, &exec_b8da69b0cd16df54, 0x0000138c },
		{ 0x67b18d64642f6c41, &exec_67b18d64642f6c41, 0x00000bda },
		{ 0xf02a965ff2cbee08, &exec_f02a965ff2cbee08, 0x00002b78 },
		{ 0xdd3ef9bc07b0a548, &exec_dd3ef9bc07b0a548, 0x0000003e },
		{ 0x9020d1435865255e, &exec_9020d1435865255e, 0x0000000b },
		{ 0xa01b0adfd10c62d9, &exec_a01b0adfd10c62d9, 0x0000055b },
		{ 0xa6ec0d29d190e3dc, &exec_a6ec0d29d190e3dc, 0x00001365 },
		{ 0x515a0c46865b55f7, &exec_515a0c46865b55f7, 0x00000ba9 },
		{ 0x55897768f6a7f030, &exec_55897768f6a7f030, 0x00000ce0 },
		{ 0x45735eb25d18f27f, &exec_45735eb25d18f27f, 0x0000404b },
		{ 0x0ea734191cd96cd3, &exec_0ea734191cd96cd3, 0x0000061a },
		{ 0x095828b2d7cb93d7, &exec_095828b2d7cb93d7, 0x00000988 },
		{ 0xffb6d4e77c815fd5, &exec_ffb6d4e77c815fd5, 0x00000000 },
		{ 0xa836a747b0f172a6, &exec_a836a747b0f172a6, 0x000030aa },
		{ 0xf4b1c83b80063a83, &exec_f4b1c83b80063a83, 0x000000bd },
		{ 0x4b1f1c916f097608, &exec_4b1f1c916f097608, 0x00003c11 },
		{ 0xb2f13ecd8e246e1d, &exec_b2f13ecd8e246e1d, 0x000000c2 },
		{ 0xeac23548b0705589, &exec_eac23548b0705589, 0x0000411c },
		{ 0x43e9204b1cab56d3, &exec_43e9204b1cab56d3, 0x00003bfe },
		{ 0x0a47a2031e87e4f8, &exec_0a47a2031e87e4f8, 0x00000dfa },
		{ 0xbdbc269649c847ec, &exec_bdbc269649c847ec, 0x000014f7 },
		{ 0x694045c161b5b77f, &exec_694045c161b5b77f, 0x0000159d },
		{ 0xe50c364e1eb30bca, &exec_e50c364e1eb30bca, 0x00000728 },
		{ 0x8959ec5501601e5b, &exec_8959ec5501601e5b, 0x00000031 },
		{ 0x5c4c3bf472d5114c, &exec_5c4c3bf472d5114c, 0x00000df1 },
		{ 0x29157159c84e7786, &exec_29157159c84e7786, 0x000045e6 },
		{ 0x9b0d11ce5c759031, &exec_9b0d11ce5c759031, 0x0000002b },
		{ 0x8b189ab1465f29e2, &exec_8b189ab1465f29e2, 0x00000a7a },
		{ 0x09e661369f14696c, &exec_09e661369f14696c, 0x0000040e },
		{ 0xb368a2aeff272adf, &exec_b368a2aeff272adf, 0x0000434d },
		{ 0xccc67a2748363eb1, &exec_ccc67a2748363eb1, 0x0000195a },
		{ 0xf8991c6696808d30, &exec_f8991c6696808d30, 0x000000f3 },
		{ 0xdb24aecfc935dca4, &exec_db24aecfc935dca4, 0x00001f92 },
		{ 0x162e4688fbbe8255, &exec_162e4688fbbe8255, 0x00003296 },
		{ 0x278baf4fff3247d0, &exec_278baf4fff3247d0, 0x000003e0 },
		{ 0x64debe8bbf3cb9df, &exec_64debe8bbf3cb9df, 0x000042b5 },
		{ 0x3e12a94063b7ede1, &exec_3e12a94063b7ede1, 0x00002e1a },
		{ 0xa7a17687c870c525, &exec_a7a17687c870c525, 0x00001ba7 },
		{ 0xec2d5d72b5fe607e, &exec_ec2d5d72b5fe607e, 0x0000001f },
		{ 0x7dd7a0c59807c2e4, &exec_7dd7a0c59807c2e4, 0x0000002d },
		{ 0x1faa3137dcdb74e4, &exec_1faa3137dcdb74e4, 0x00003942 },
		{ 0xce45c4b414de665b, &exec_ce45c4b414de665b, 0x00000673 },
		{ 0x561684daacce1cb0, &exec_561684daacce1cb0, 0x00000014 },
		{ 0xc2ea1bda5a7a08e7, &exec_c2ea1bda5a7a08e7, 0x00003cc4 },
		{ 0x7e0f7888f365a966, &exec_7e0f7888f365a966, 0x00000039 },
		{ 0x066896ea8a782f35, &exec_066896ea8a782f35, 0x00001a24 },
		{ 0x81fcd5cf5c100c87, &exec_81fcd5cf5c100c87, 0x000032d8 },
		{ 0x4035c4cd527294f0, &exec_4035c4cd527294f0, 0x000000b3 },
		{ 0x2ff42f7252777ee1, &exec_2ff42f7252777ee1, 0x00000d38 },
		{ 0xca4d6a2ae3531b94, &exec_ca4d6a2ae3531b94, 0x000020ef },
		{ 0x540b5e74a5fbb2b3, &exec_540b5e74a5fbb2b3, 0x00001d8a },
		{ 0x532bfb5b304b473e, &exec_532bfb5b304b473e, 0x000023fa },
		{ 0x8676953e613a69bb, &exec_8676953e613a69bb, 0x000001e8 },
		{ 0xbc5ccfef1002e890, &exec_bc5ccfef1002e890, 0x00000016 },
		{ 0x20b8217dadd52840, &exec_20b8217dadd52840, 0x0000178a },
		{ 0x52e7d84d2e10ecf2, &exec_52e7d84d2e10ecf2, 0x000005c0 },
		{ 0x9fb2a27fa9b0a2a1, &exec_9fb2a27fa9b0a2a1, 0x00000973 },
		{ 0xd7e0dd54c6d0879b, &exec_d7e0dd54c6d0879b, 0x00003ec3 },
		{ 0x0e45868b3654e169, &exec_0e45868b3654e169, 0x000010ee },
		{ 0x978f2ce275dbebe1, &exec_978f2ce275dbebe1, 0x000038f2 },
		{ 0x196b74fd56092377, &exec_196b74fd56092377, 0x00001eba },
		{ 0x15c97b94b55e96d4, &exec_15c97b94b55e96d4, 0x00004b0a },
		{ 0x63bd72df57c90051, &exec_63bd72df57c90051, 0x000007ff },
		{ 0x7a73b05d25cc177e, &exec_7a73b05d25cc177e, 0x00000c52 },
		{ 0x6992951b661dac16, &exec_6992951b661dac16, 0x000001e0 },
		{ 0xbb5609e04f5402f7, &exec_bb5609e04f5402f7, 0x00000fdf },
		{ 0x521fc735625caec5, &exec_521fc735625caec5, 0x00000355 },
		{ 0x5936601c36b83241, &exec_5936601c36b83241, 0x00000218 },
		{ 0x5737ee8d6ce5d42c, &exec_5737ee8d6ce5d42c, 0x000007c0 },
		{ 0xf976436f56d7e5ed, &exec_f976436f56d7e5ed, 0x0000001b },
		{ 0x214ee06a0f70e614, &exec_214ee06a0f70e614, 0x0000385b },
		{ 0xa3c2a4035c6f2ba1, &exec_a3c2a4035c6f2ba1, 0x00000042 },
		{ 0x203422dc9f2321dc, &exec_203422dc9f2321dc, 0x0000203f },
		{ 0x7eed4d35de7af29c, &exec_7eed4d35de7af29c, 0x00003975 },
		{ 0x5958b901a5505572, &exec_5958b901a5505572, 0x00000000 },
		{ 0xd6179457a2185fc2, &exec_d6179457a2185fc2, 0x00002b1e },
		{ 0x28bb982cfd251442, &exec_28bb982cfd251442, 0x00002cd5 },
		{ 0xec01ca74ad30c5f4, &exec_ec01ca74ad30c5f4, 0x0000001d },
		{ 0xf49d254f3859ffda, &exec_f49d254f3859ffda, 0x00004581 },
		{ 0x076c77562a3e9b58, &exec_076c77562a3e9b58, 0x00003329 },
		{ 0xf393de5fbf4e99d4, &exec_f393de5fbf4e99d4, 0x00000290 },
		{ 0xc89a1971022bc130, &exec_c89a1971022bc130, 0x00003866 },
		{ 0x026ae436492d2327, &exec_026ae436492d2327, 0x00001931 },
		{ 0x6f7afc9bc24fecc7, &exec_6f7afc9bc24fecc7, 0x00003b1a },
		{ 0x1807275d0ba659d1, &exec_1807275d0ba659d1, 0x00000167 },
		{ 0xa87e23139e09f1b2, &exec_a87e23139e09f1b2, 0x00001a65 },
		{ 0x5249f2e8a5c057c1, &exec_5249f2e8a5c057c1, 0x000005f7 },
		{ 0x6dcde3b78a3ec991, &exec_6dcde3b78a3ec991, 0x00002a21 },
		{ 0x08d03310cec1ed3f, &exec_08d03310cec1ed3f, 0x00001caa },
		{ 0x1e99bb14ecac1b69, &exec_1e99bb14ecac1b69, 0x00000f1c },
		{ 0xf38eb274357817b9, &exec_f38eb274357817b9, 0x00000911 },
		{ 0xabb8905fdd9c9cd7, &exec_abb8905fdd9c9cd7, 0x00004bb1 },
		{ 0xbbba5db7f2ec0c8f, &exec_bbba5db7f2ec0c8f, 0x000006aa },
		{ 0x5f1c791bb6a7fa8f, &exec_5f1c791bb6a7fa8f, 0x00000000 },
		{ 0x01247a0006f8f856, &exec_01247a0006f8f856, 0x00000c92 },
		{ 0xe9006e8ee0e46c2e, &exec_e9006e8ee0e46c2e, 0x00003c60 },
		{ 0x67f200fcc46e86da, &exec_67f200fcc46e86da, 0x00000028 },
		{ 0xd731a252f63aaa21, &exec_d731a252f63aaa21, 0x0000173b },
		{ 0x3e20ad048102c255, &exec_3e20ad048102c255, 0x000029fc },
		{ 0x8358e23a69e1c25e, &exec_8358e23a69e1c25e, 0x000001cd },
		{ 0xb20a03a8ced90beb, &exec_b20a03a8ced90beb, 0x00003087 },
		{ 0xf646b96e53e95b0c, &exec_f646b96e53e95b0c, 0x0000098d },
		{ 0xfdc4e4d99d2df862, &exec_fdc4e4d99d2df862, 0x0000375a },
		{ 0xd8ba1867b8b952a4, &exec_d8ba1867b8b952a4, 0x0000321b },
		{ 0x762a1ab4b48f47fa, &exec_762a1ab4b48f47fa, 0x00001c06 },
		{ 0xb83c86d4d1a6a768, &exec_b83c86d4d1a6a768, 0x000025c1 },
		{ 0xffa3145b2900d4a4, &exec_ffa3145b2900d4a4, 0x0000167e },
		{ 0xf4a9e8972d6dccb2, &exec_f4a9e8972d6dccb2, 0x000007be },
		{ 0x8099b87a2f25199a, &exec_8099b87a2f25199a, 0x00000602 },
		{ 0x717e099d69b26355, &exec_717e099d69b26355, 0x000046c6 },
		{ 0x4f9b29b80fa188f2, &exec_4f9b29b80fa188f2, 0x000009bb },
		{ 0x0125a38cba262be9, &exec_0125a38cba262be9, 0x00000cb5 },
		{ 0x03c13652091b1336, &exec_03c13652091b1336, 0x00001af8 },
		{ 0x57f3bfc30007b86c, &exec_57f3bfc30007b86c, 0x000020dd },
		{ 0xcef6d456d865e388, &exec_cef6d456d865e388, 0x00001bab },
		{ 0x23967b1bcac8db77, &exec_23967b1bcac8db77, 0x00000f5d },
		{ 0xaf93f76ce119e937, &exec_af93f76ce119e937, 0x00000e7e },
		{ 0x4c6920278f9a10d8, &exec_4c6920278f9a10d8, 0x00000040 },
		{ 0xeb1741e6ea82d3cb, &exec_eb1741e6ea82d3cb, 0x0000070d },
		{ 0x638bc654e117d152, &exec_638bc654e117d152, 0x00001318 },
		{ 0x4fb75938b3a429b6, &exec_4fb75938b3a429b6, 0x00000044 },
		{ 0xe2229c4fcc0d0fff, &exec_e2229c4fcc0d0fff, 0x00000575 },
		{ 0x8002a79b143439f4, &exec_8002a79b143439f4, 0x000010c7 },
		{ 0x8b717be29cbf5bea, &exec_8b717be29cbf5bea, 0x00000d48 },
		{ 0x27bf8d5e3b0fe92d, &exec_27bf8d5e3b0fe92d, 0x000048cb },
		{ 0x9ca1e2763dc89338, &exec_9ca1e2763dc89338, 0x00000386 },
		{ 0xfd1052b4eddf8258, &exec_fd1052b4eddf8258, 0x00000dc1 },
		{ 0x99cebea1986b9aaa, &exec_99cebea1986b9aaa, 0x00002143 },
		{ 0x1eb6ceb5ad923544, &exec_1eb6ceb5ad923544, 0x00000046 },
		{ 0xcd217de43a612f3c, &exec_cd217de43a612f3c, 0x000005dc },
		{ 0x8012f2943267a4e6, &exec_8012f2943267a4e6, 0x0000018d },
		{ 0xb0fe9bb24f978319, &exec_b0fe9bb24f978319, 0x00000000 },
		{ 0x8ac13f7930b8c978, &exec_8ac13f7930b8c978, 0x0000004b },
		{ 0xfa5dea7d56f0c6d7, &exec_fa5dea7d56f0c6d7, 0x00000646 },
		{ 0xd158cd9e1ea71f59, &exec_d158cd9e1ea71f59, 0x000000ce },
		{ 0xbe8b93315f1b67a1, &exec_be8b93315f1b67a1, 0x000013d0 },
		{ 0x97c15ae7323d0b8c, &exec_97c15ae7323d0b8c, 0x00000a85 },
		{ 0x63aad2fd27bfe34a, &exec_63aad2fd27bfe34a, 0x00003b9a },
		{ 0xa4251d000cd2e6c7, &exec_a4251d000cd2e6c7, 0x000003ca },
		{ 0x113b89a5bfb42704, &exec_113b89a5bfb42704, 0x000004ae },
		{ 0x2859f63918a84e0a, &exec_2859f63918a84e0a, 0x00000be1 },
		{ 0x90523b6ceb04f37e, &exec_90523b6ceb04f37e, 0x0000004f },
		{ 0x9140d6bd17eb403e, &exec_9140d6bd17eb403e, 0x00000054 },
		{ 0xa86aebf63f5f2724, &exec_a86aebf63f5f2724, 0x000007a3 },
		{ 0xa83273c2bec86a91, &exec_a83273c2bec86a91, 0x00000056 },
		{ 0xe45810d981d7f308, &exec_e45810d981d7f308, 0x000009ce },
		{ 0x944e4559415143d7, &exec_944e4559415143d7, 0x00004a5e },
		{ 0x9edd77171e161c2d, &exec_9edd77171e161c2d, 0x000006fa },
		{ 0x892cea729e5075a4, &exec_892cea729e5075a4, 0x00004710 },
		{ 0xe49bf349e806d322, &exec_e49bf349e806d322, 0x00000fec },
		{ 0x958d971898dbc872, &exec_958d971898dbc872, 0x00000d4c },
		{ 0xa984aebe231aebdb, &exec_a984aebe231aebdb, 0x00000a5a },
		{ 0x1b9df4384d940ef3, &exec_1b9df4384d940ef3, 0x00001344 },
		{ 0xf75dc1a0dc423213, &exec_f75dc1a0dc423213, 0x0000005a },
		{ 0xdd6ee74aef2eeb6d, &exec_dd6ee74aef2eeb6d, 0x0000153f },
		{ 0xe5542bf49ff2e123, &exec_e5542bf49ff2e123, 0x000000b7 },
		{ 0xc175181f1d6e8b88, &exec_c175181f1d6e8b88, 0x00001ae0 },
		{ 0x47e08384b0e7952d, &exec_47e08384b0e7952d, 0x00001dd3 },
		{ 0x548df8d2ea0a27f7, &exec_548df8d2ea0a27f7, 0x00000349 },
		{ 0x839535cad479b22d, &exec_839535cad479b22d, 0x000004f2 },
		{ 0x87dd9f81bc742b6e, &exec_87dd9f81bc742b6e, 0x0000069f },
		{ 0x961c1db5b8c6adba, &exec_961c1db5b8c6adba, 0x000047b0 },
		{ 0xb366d9d441c481eb, &exec_b366d9d441c481eb, 0x00000244 },
		{ 0x9e1bd6afb71475e3, &exec_9e1bd6afb71475e3, 0x0000009a },
		{ 0x49c8bf2f2f7e9675, &exec_49c8bf2f2f7e9675, 0x00000dea },
		{ 0x582bf6f3ee955a6a, &exec_582bf6f3ee955a6a, 0x0000135e },
		{ 0x8cbb055c85063ac6, &exec_8cbb055c85063ac6, 0x00003e4e },
		{ 0x275275a866177824, &exec_275275a866177824, 0x00002b60 },
		{ 0x0bddb781a8f322c0, &exec_0bddb781a8f322c0, 0x000006e6 },
		{ 0xf7134306c2e44e3c, &exec_f7134306c2e44e3c, 0x00000bd0 },
		{ 0x2118d40b05ba0840, &exec_2118d40b05ba0840, 0x0000005d },
		{ 0x81671a93e07ac79b, &exec_81671a93e07ac79b, 0x0000109c },
		{ 0x564a5432d745767c, &exec_564a5432d745767c, 0x00000ffb },
		{ 0xf7a36aa68fdf6bba, &exec_f7a36aa68fdf6bba, 0x0000194b },
		{ 0x4e89900caf843ad1, &exec_4e89900caf843ad1, 0x0000261e },
		{ 0xb116ecac9fafabae, &exec_b116ecac9fafabae, 0x00000b45 },
		{ 0x23249830b7624094, &exec_23249830b7624094, 0x00000000 },
		{ 0x8fd6593a14d658ba, &exec_8fd6593a14d658ba, 0x0000024c },
		{ 0x7e58cc98530f9a48, &exec_7e58cc98530f9a48, 0x0000017d },
		{ 0x43a9cea787c79283, &exec_43a9cea787c79283, 0x00000062 },
		{ 0x8d33bb1a981e5caa, &exec_8d33bb1a981e5caa, 0x00003abb },
		{ 0xf6c1643298a66f39, &exec_f6c1643298a66f39, 0x00000341 },
		{ 0xfbfbde548c56b5da, &exec_fbfbde548c56b5da, 0x00003f5b },
		{ 0x0e6231ac13b77d58, &exec_0e6231ac13b77d58, 0x00003e41 },
		{ 0xbec55e7c3437a583, &exec_bec55e7c3437a583, 0x000008ab },
		{ 0x84c4b58b741c33c7, &exec_84c4b58b741c33c7, 0x00001380 },
		{ 0x0f5b767f9916c96f, &exec_0f5b767f9916c96f, 0x00000068 },
		{ 0x477cd77d3cd1e726, &exec_477cd77d3cd1e726, 0x000002d8 },
		{ 0xeb7d25d86f02bdeb, &exec_eb7d25d86f02bdeb, 0x000018ae },
		{ 0xa2251d6bfb7fb122, &exec_a2251d6bfb7fb122, 0x000031e4 },
		{ 0xe83e13fb520a8597, &exec_e83e13fb520a8597, 0x000009ef },
		{ 0xcde311851fb489e4, &exec_cde311851fb489e4, 0x00004b38 },
		{ 0x5861822a769f5c98, &exec_5861822a769f5c98, 0x00000158 },
		{ 0x3024c610f00f6029, &exec_3024c610f00f6029, 0x00001087 },
		{ 0xd23ee195742a3fd1, &exec_d23ee195742a3fd1, 0x00002596 },
		{ 0x52e62030545b300f, &exec_52e62030545b300f, 0x00001d87 },
		{ 0x4f6fec837cd11e42, &exec_4f6fec837cd11e42, 0x00003f33 },
		{ 0x4cdf9751f989bda6, &exec_4cdf9751f989bda6, 0x0000300a },
		{ 0x52b79cbb3c2b02cf, &exec_52b79cbb3c2b02cf, 0x00000995 },
		{ 0xa272c62024812dac, &exec_a272c62024812dac, 0x000048ce },
		{ 0x2e313576e68bcfda, &exec_2e313576e68bcfda, 0x00004508 },
		{ 0x818c3f4611946c67, &exec_818c3f4611946c67, 0x0000379c },
		{ 0x239013d4f24440a1, &exec_239013d4f24440a1, 0x000003ea },
		{ 0x3b0bc00f58500f1f, &exec_3b0bc00f58500f1f, 0x00001e21 },
		{ 0xaa282aca878d3750, &exec_aa282aca878d3750, 0x0000077e },
		{ 0xb78779bf0de9918d, &exec_b78779bf0de9918d, 0x00003dfa },
		{ 0xf90162fd93e70fab, &exec_f90162fd93e70fab, 0x00001cbf },
		{ 0x5d9b3b7387d96eb1, &exec_5d9b3b7387d96eb1, 0x00000e67 },
		{ 0x1ec28314eccec155, &exec_1ec28314eccec155, 0x00000d3e },
		{ 0xcc57b36ca16525f5, &exec_cc57b36ca16525f5, 0x0000006c },
		{ 0xc69f964f8a93fb9e, &exec_c69f964f8a93fb9e, 0x000025bc },
		{ 0xdb84ebd67a523609, &exec_db84ebd67a523609, 0x0000456a },
		{ 0xead790a9e7bc0814, &exec_ead790a9e7bc0814, 0x000000e6 },
		{ 0x186f037e144f8d9d, &exec_186f037e144f8d9d, 0x00000a5c },
		{ 0x2f08e2d504891ffb, &exec_2f08e2d504891ffb, 0x000008d9 },
		{ 0xca4acdd14260e907, &exec_ca4acdd14260e907, 0x000010ab },
		{ 0xdce3b7747ccae0dc, &exec_dce3b7747ccae0dc, 0x000005ad },
		{ 0x647517770967c080, &exec_647517770967c080, 0x0000060a },
		{ 0x65db06c32f247114, &exec_65db06c32f247114, 0x00000075 },
		{ 0xef9d712f5de6a412, &exec_ef9d712f5de6a412, 0x0000203c },
		{ 0x2338d5fdaee0e541, &exec_2338d5fdaee0e541, 0x000009b1 },
		{ 0x16be1a1e2508913c, &exec_16be1a1e2508913c, 0x000040c1 },
		{ 0xe560eb9bf4d9ba06, &exec_e560eb9bf4d9ba06, 0x000003e2 },
		{ 0x7598a6d250a024c3, &exec_7598a6d250a024c3, 0x00001c73 },
		{ 0x0f3d2d500d1aed91, &exec_0f3d2d500d1aed91, 0x00004628 },
		{ 0x499839915f194055, &exec_499839915f194055, 0x000034d8 },
		{ 0x9425600b75d9a8a2, &exec_9425600b75d9a8a2, 0x0000008d },
		{ 0xae234b9812e76d7c, &exec_ae234b9812e76d7c, 0x00000079 },
		{ 0x2440b55d85f9f274, &exec_2440b55d85f9f274, 0x000028b7 },
		{ 0xc2432c4d3afc7fd9, &exec_c2432c4d3afc7fd9, 0x00000000 },
		{ 0x693a2a55dea9099d, &exec_693a2a55dea9099d, 0x000016aa },
		{ 0x4f016986fa09a6cb, &exec_4f016986fa09a6cb, 0x0000007c },
		{ 0x7c4b3b37fde0b7c3, &exec_7c4b3b37fde0b7c3, 0x00000497 },
		{ 0x928023eca10bfda2, &exec_928023eca10bfda2, 0x00001651 },
		{ 0x48e2739be71af257, &exec_48e2739be71af257, 0x00004b14 },
		{ 0x1eeb9e25a01778bf, &exec_1eeb9e25a01778bf, 0x0000009f },
		{ 0xd71a1c5c03b1978c, &exec_d71a1c5c03b1978c, 0x0000007f },
		{ 0xb218974fe4d3046e, &exec_b218974fe4d3046e, 0x00001d0f },
		{ 0x00c037be87f00c5b, &exec_00c037be87f00c5b, 0x0000047e },
		{ 0xf8ad56cb015b7a0b, &exec_f8ad56cb015b7a0b, 0x00001772 },
		{ 0x3cd29d50066e5d6b, &exec_3cd29d50066e5d6b, 0x0000202d },
		{ 0xcb24b69b8c6c4916, &exec_cb24b69b8c6c4916, 0x00003432 },
		{ 0x450c48fc4fa972a1, &exec_450c48fc4fa972a1, 0x0000126f },
		{ 0xb491da8ef8e433a4, &exec_b491da8ef8e433a4, 0x000040d7 },
		{ 0xb1ec3173f03a71ba, &exec_b1ec3173f03a71ba, 0x00000082 },
		{ 0x43b846da5b7d9f9c, &exec_43b846da5b7d9f9c, 0x0000076b },
		{ 0x6a0c11199cfd87e4, &exec_6a0c11199cfd87e4, 0x00000ce4 },
		{ 0xf0c86b447311bd4e, &exec_f0c86b447311bd4e, 0x00001205 },
		{ 0xfea2f537098868c3, &exec_fea2f537098868c3, 0x000011ab },
		{ 0x4bd4ef9a0ab3d86f, &exec_4bd4ef9a0ab3d86f, 0x00000210 },
		{ 0x11f464f1d88a28f2, &exec_11f464f1d88a28f2, 0x00002538 },
		{ 0x5e027ec7d166c5e1, &exec_5e027ec7d166c5e1, 0x00003565 },
		{ 0x0fc5dae69413ceec, &exec_0fc5dae69413ceec, 0x000003f5 },
		{ 0xd988f41897ab7ece, &exec_d988f41897ab7ece, 0x00003fb0 },
		{ 0xd158fd46ec199444, &exec_d158fd46ec199444, 0x00000430 },
		{ 0x9d033ce11e9483a4, &exec_9d033ce11e9483a4, 0x00000a45 },
		{ 0x252cc508c4d350b7, &exec_252cc508c4d350b7, 0x00000085 },
		{ 0x1dce2fec30b6d79f, &exec_1dce2fec30b6d79f, 0x0000015e },
		{ 0xe66117833568e125, &exec_e66117833568e125, 0x00002351 },
		{ 0x52902d728bb8eaf4, &exec_52902d728bb8eaf4, 0x0000057a },
		{ 0x44cbc69464ba1d55, &exec_44cbc69464ba1d55, 0x0000008a },
		{ 0xc5131f2d2bd7be74, &exec_c5131f2d2bd7be74, 0x00000920 },
		{ 0xefa441b91e49b83b, &exec_efa441b91e49b83b, 0x00001b96 },
		{ 0xa75d4bc79dc6754f, &exec_a75d4bc79dc6754f, 0x00002987 },
		{ 0xb9bb71a7fd260efc, &exec_b9bb71a7fd260efc, 0x000001e4 },
		{ 0xf994433ca528d317, &exec_f994433ca528d317, 0x00001f85 },
		{ 0xf885006a042e5bd3, &exec_f885006a042e5bd3, 0x00001dca },
		{ 0x3322bdfc5f3fea93, &exec_3322bdfc5f3fea93, 0x00002890 },
		{ 0xa2224e2be7b62247, &exec_a2224e2be7b62247, 0x00000761 },
		{ 0xc78b23e87a01ceb1, &exec_c78b23e87a01ceb1, 0x00000097 },
		{ 0x9003a81f333a315d, &exec_9003a81f333a315d, 0x00003ed7 },
		{ 0xb754a38bdd670416, &exec_b754a38bdd670416, 0x00000090 },
		{ 0xc2f17092a234d18b, &exec_c2f17092a234d18b, 0x00001186 },
		{ 0xa0b575d562204258, &exec_a0b575d562204258, 0x00003bb2 },
		{ 0x58692adcecd79bce, &exec_58692adcecd79bce, 0x0000028d },
		{ 0x0c250d8746e6aa6c, &exec_0c250d8746e6aa6c, 0x00002cc0 },
		{ 0xb6cdf9723c79a12f, &exec_b6cdf9723c79a12f, 0x00000093 },
		{ 0x51ac9cf2299723ee, &exec_51ac9cf2299723ee, 0x0000381e },
		{ 0xaf677f6ac8af319b, &exec_af677f6ac8af319b, 0x00000594 },
		{ 0xbf0d329ed0433f6c, &exec_bf0d329ed0433f6c, 0x00000000 },
		{ 0xfd13896e199d3bf2, &exec_fd13896e199d3bf2, 0x000019e2 },
		{ 0xb1395e72691d8993, &exec_b1395e72691d8993, 0x00000d41 },
		{ 0x61bf1370a7593d42, &exec_61bf1370a7593d42, 0x00000789 },
		{ 0x67bd41b3fc23a26d, &exec_67bd41b3fc23a26d, 0x0000009c },
		{ 0x81ffd59788b56c05, &exec_81ffd59788b56c05, 0x00000653 },
		{ 0x17e750097e6bc1e1, &exec_17e750097e6bc1e1, 0x00002c08 },
		{ 0xb26372d76d83317a, &exec_b26372d76d83317a, 0x000003bb },
		{ 0xaf08e2512e525639, &exec_af08e2512e525639, 0x0000034b },
		{ 0x91c5af94b287ab2e, &exec_91c5af94b287ab2e, 0x000000a2 },
		{ 0x7470810d836eceba, &exec_7470810d836eceba, 0x00004a31 },
		{ 0x98e7086f2075a000, &exec_98e7086f2075a000, 0x00001d97 },
		{ 0x83f4887e24257229, &exec_83f4887e24257229, 0x00001e36 },
		{ 0xeeb2c6781f86fa52, &exec_eeb2c6781f86fa52, 0x00000232 },
		{ 0xbbac37619f9aab59, &exec_bbac37619f9aab59, 0x00000c3b },
		{ 0x2441ef9acc4fcae6, &exec_2441ef9acc4fcae6, 0x00004772 },
		{ 0xc713fbe528efb3e5, &exec_c713fbe528efb3e5, 0x00000927 },
		{ 0xc84e6dd84f28a7d0, &exec_c84e6dd84f28a7d0, 0x000007ac },
		{ 0xc6d2673aed6d40fc, &exec_c6d2673aed6d40fc, 0x00000000 },
		{ 0x38f4261d787ab72d, &exec_38f4261d787ab72d, 0x0000036c },
		{ 0xa0f983393694469c, &exec_a0f983393694469c, 0x000000a6 },
		{ 0xe7eca91fd43503df, &exec_e7eca91fd43503df, 0x000001d4 },
		{ 0x8bed724c0ac60b03, &exec_8bed724c0ac60b03, 0x00001b5c },
		{ 0x1e19c05e2929dfd2, &exec_1e19c05e2929dfd2, 0x0000038d },
		{ 0x3a358d797f385f1d, &exec_3a358d797f385f1d, 0x000000aa },
		{ 0x5f35d590c33baea5, &exec_5f35d590c33baea5, 0x000001a5 },
		{ 0x73ec74eb4941680b, &exec_73ec74eb4941680b, 0x000000ad },
		{ 0xda03aba11d1ede59, &exec_da03aba11d1ede59, 0x0000034d },
		{ 0x68a727a07a36b693, &exec_68a727a07a36b693, 0x00000b54 },
		{ 0xd62d46f180f13e3c, &exec_d62d46f180f13e3c, 0x00000202 },
		{ 0x854cc803bb545af4, &exec_854cc803bb545af4, 0x00000e57 },
		{ 0x5c5b3a9d2e0ae336, &exec_5c5b3a9d2e0ae336, 0x00002636 },
		{ 0xfaeb460cf7a43ab1, &exec_faeb460cf7a43ab1, 0x000001db },
		{ 0xe5ef8b08c584ebb4, &exec_e5ef8b08c584ebb4, 0x00001442 },
		{ 0xc019979569d108e0, &exec_c019979569d108e0, 0x000000ba },
		{ 0x980fd57d4f2774ec, &exec_980fd57d4f2774ec, 0x00000919 },
		{ 0x657ade972dfdd81b, &exec_657ade972dfdd81b, 0x0000243b },
		{ 0x4c27a3b5d595a6b6, &exec_4c27a3b5d595a6b6, 0x000001fc },
		{ 0x82064be8f7a0b832, &exec_82064be8f7a0b832, 0x00002783 },
		{ 0x99dbe9b6b68d56ba, &exec_99dbe9b6b68d56ba, 0x00000803 },
		{ 0xe1521bcbc5081d05, &exec_e1521bcbc5081d05, 0x00004b55 },
		{ 0xd4e31f216c40fbcc, &exec_d4e31f216c40fbcc, 0x00003b60 },
		{ 0xc8c0a87ee1391638, &exec_c8c0a87ee1391638, 0x00003a88 },
		{ 0x0ffed87218c8276a, &exec_0ffed87218c8276a, 0x000002dd },
		{ 0x21d6801640050a7a, &exec_21d6801640050a7a, 0x00000549 },
		{ 0xded2a5844029da59, &exec_ded2a5844029da59, 0x000000c8 },
		{ 0x42cb515fff2e2023, &exec_42cb515fff2e2023, 0x000002f6 },
		{ 0x87d9707b767940ed, &exec_87d9707b767940ed, 0x00000333 },
		{ 0x8ade3bb6233763dd, &exec_8ade3bb6233763dd, 0x00000000 },
		{ 0x90ca64758cee628a, &exec_90ca64758cee628a, 0x00002238 },
		{ 0x4ae79c8a5d9da9f3, &exec_4ae79c8a5d9da9f3, 0x000002f0 },
		{ 0xaf8c2a3b37124a44, &exec_af8c2a3b37124a44, 0x0000235a },
		{ 0x1845f0b1a8d6e378, &exec_1845f0b1a8d6e378, 0x00003af2 },
		{ 0xf57947f12b61de0a, &exec_f57947f12b61de0a, 0x000008a2 },
		{ 0x8f79258c8290c853, &exec_8f79258c8290c853, 0x00000a24 },
		{ 0xb522259e67dada38, &exec_b522259e67dada38, 0x00004063 },
		{ 0x03210632005ee558, &exec_03210632005ee558, 0x00002956 },
		{ 0xdbd00ae4ac73bf80, &exec_dbd00ae4ac73bf80, 0x0000012f },
		{ 0x6d1f81a6b36f5451, &exec_6d1f81a6b36f5451, 0x0000252e },
		{ 0x5f00b9f77a7a2920, &exec_5f00b9f77a7a2920, 0x0000026a },
		{ 0xdc0e22982ab07838, &exec_dc0e22982ab07838, 0x00004bad },
		{ 0xa7d2e8f057ea2cb2, &exec_a7d2e8f057ea2cb2, 0x00001458 },
		{ 0xb9282e0dd57e7605, &exec_b9282e0dd57e7605, 0x0000171d },
		{ 0x68f286523057fff8, &exec_68f286523057fff8, 0x000007e2 },
		{ 0x8351d7d37e203a7e, &exec_8351d7d37e203a7e, 0x000000d3 },
		{ 0xf116080be0b8a840, &exec_f116080be0b8a840, 0x00000e54 },
		{ 0x58ff9fea909ef547, &exec_58ff9fea909ef547, 0x00000247 },
		{ 0x0bfbb298b8a26788, &exec_0bfbb298b8a26788, 0x00004419 },
		{ 0x8e061278a40ea03f, &exec_8e061278a40ea03f, 0x00000404 },
		{ 0x931af4a7bc31209b, &exec_931af4a7bc31209b, 0x000000d9 },
		{ 0x6af9360c2609eb05, &exec_6af9360c2609eb05, 0x000002ff },
		{ 0x624b101754c5aecf, &exec_624b101754c5aecf, 0x0000030f },
		{ 0x8b2ee628f44d8911, &exec_8b2ee628f44d8911, 0x00000bc6 },
		{ 0xfa8a5c8d2da8e2a6, &exec_fa8a5c8d2da8e2a6, 0x000000df },
		{ 0x7f3103df538be599, &exec_7f3103df538be599, 0x000046f1 },
		{ 0x04507d671ae77827, &exec_04507d671ae77827, 0x000005d6 },
		{ 0xa95413967e2a9695, &exec_a95413967e2a9695, 0x000002a1 },
		{ 0x37febc0cafb9fdc3, &exec_37febc0cafb9fdc3, 0x00002093 },
		{ 0xcea8499b5db1b887, &exec_cea8499b5db1b887, 0x0000062c },
		{ 0x696cddb2101c3532, &exec_696cddb2101c3532, 0x00000e24 },
		{ 0xfb62a0c960e8c32c, &exec_fb62a0c960e8c32c, 0x00000d5a },
		{ 0x7812c500b0189591, &exec_7812c500b0189591, 0x0000193e },
		{ 0x995eea736813ab81, &exec_995eea736813ab81, 0x000021c8 },
		{ 0xba0afea422ded9ca, &exec_ba0afea422ded9ca, 0x00001ae5 },
		{ 0x8a79363f82eb58c8, &exec_8a79363f82eb58c8, 0x0000032b },
		{ 0xfbcb36adb980d3b8, &exec_fbcb36adb980d3b8, 0x00000781 },
		{ 0x3b296ee3958d9549, &exec_3b296ee3958d9549, 0x00001000 },
		{ 0x71d478e73b7ebf7f, &exec_71d478e73b7ebf7f, 0x00003221 },
		{ 0x813e811e76b47570, &exec_813e811e76b47570, 0x000009b3 },
		{ 0x42660ee6b0638700, &exec_42660ee6b0638700, 0x000003da },
		{ 0xfbc9d696c816cb51, &exec_fbc9d696c816cb51, 0x00000326 },
		{ 0x4327263981e53a0b, &exec_4327263981e53a0b, 0x00003948 },
		{ 0x5514e85937c77377, &exec_5514e85937c77377, 0x00000338 },
		{ 0x3417cb4ba36d04d7, &exec_3417cb4ba36d04d7, 0x000018dd },
		{ 0x107ba51aedae042d, &exec_107ba51aedae042d, 0x000046fa },
		{ 0xb1c77c6ae3203d67, &exec_b1c77c6ae3203d67, 0x00002fee },
		{ 0xc9630ec594e1bf25, &exec_c9630ec594e1bf25, 0x00001e29 },
		{ 0x5e803c30dcddf798, &exec_5e803c30dcddf798, 0x000011a8 },
		{ 0x60e365b46c5a6850, &exec_60e365b46c5a6850, 0x0000149f },
		{ 0x7c5e7e0c79dc765b, &exec_7c5e7e0c79dc765b, 0x0000091c },
		{ 0x0ecf5f23ee1cd538, &exec_0ecf5f23ee1cd538, 0x00000778 },
		{ 0x02d3c13cf6cad412, &exec_02d3c13cf6cad412, 0x000047ef },
		{ 0x152f79c10abc8ac2, &exec_152f79c10abc8ac2, 0x0000136a },
		{ 0x6b1a3e3793549f73, &exec_6b1a3e3793549f73, 0x00004b0d },
		{ 0x189286caf3ee54b4, &exec_189286caf3ee54b4, 0x00000249 },
		{ 0x9acafc254ade70f5, &exec_9acafc254ade70f5, 0x000002af },
		{ 0x6428be3eefca1ea5, &exec_6428be3eefca1ea5, 0x0000026e },
		{ 0x3777eb6fe2edeed1, &exec_3777eb6fe2edeed1, 0x00004a6a },
		{ 0x27a337e25311163b, &exec_27a337e25311163b, 0x00000492 },
		{ 0x176ce0f273581f7b, &exec_176ce0f273581f7b, 0x0000022e },
		{ 0x86a312757ddff7d4, &exec_86a312757ddff7d4, 0x00000aab },
		{ 0x2c3a92c22b2a977d, &exec_2c3a92c22b2a977d, 0x00002a40 },
		{ 0x0234691bbff78d1b, &exec_0234691bbff78d1b, 0x000000ec },
		{ 0x53875730df98f0b9, &exec_53875730df98f0b9, 0x00001d53 },
		{ 0x05d509bf0c1a277e, &exec_05d509bf0c1a277e, 0x00003d87 },
		{ 0x3a6a062a640cb6bd, &exec_3a6a062a640cb6bd, 0x00000f72 },
		{ 0x9c6cff0f76dc73f7, &exec_9c6cff0f76dc73f7, 0x0000027e },
		{ 0x8eb958dfa23472d2, &exec_8eb958dfa23472d2, 0x0000037d },
		{ 0xa238f35c5dd6cb09, &exec_a238f35c5dd6cb09, 0x00004b77 },
		{ 0x42298036b477f1b7, &exec_42298036b477f1b7, 0x00002cd8 },
		{ 0xf199a4c615da85a8, &exec_f199a4c615da85a8, 0x000000f7 },
		{ 0xaa7c142974b43410, &exec_aa7c142974b43410, 0x000045c2 },
		{ 0x3b9e605a33f48fea, &exec_3b9e605a33f48fea, 0x0000063e },
		{ 0x1ee014198f5c9055, &exec_1ee014198f5c9055, 0x00000e51 },
		{ 0x7851414e73ca423d, &exec_7851414e73ca423d, 0x00000908 },
		{ 0xc39c614c6cd41383, &exec_c39c614c6cd41383, 0x00003ce0 },
		{ 0x9b84134d80862525, &exec_9b84134d80862525, 0x00000b90 },
		{ 0x9f598fa7d454c275, &exec_9f598fa7d454c275, 0x00000ad0 },
		{ 0x232ca559b6f0ac24, &exec_232ca559b6f0ac24, 0x00000a13 },
		{ 0xd7ee09ed17de5493, &exec_d7ee09ed17de5493, 0x0000241c },
		{ 0x1b1c8d907c1c68ed, &exec_1b1c8d907c1c68ed, 0x0000032f },
		{ 0x221a790319376b86, &exec_221a790319376b86, 0x00001d02 },
		{ 0x04f4551fe7d3f35c, &exec_04f4551fe7d3f35c, 0x00000220 },
		{ 0x48227a3eaa4884bb, &exec_48227a3eaa4884bb, 0x0000141b },
		{ 0x0ff4bc7de2cf33bb, &exec_0ff4bc7de2cf33bb, 0x000047a9 },
		{ 0xbf16c3c81bd7f037, &exec_bf16c3c81bd7f037, 0x0000016a },
		{ 0x38ff38a0af82a1a8, &exec_38ff38a0af82a1a8, 0x00001711 },
		{ 0x7afd285ade6a7cee, &exec_7afd285ade6a7cee, 0x000020d8 },
		{ 0x830de6639e58890b, &exec_830de6639e58890b, 0x00000737 },
		{ 0xdc65485b522eeeea, &exec_dc65485b522eeeea, 0x00001d9f },
		{ 0x32e691051eb1fc98, &exec_32e691051eb1fc98, 0x000003fb },
		{ 0x777e434b052bfc70, &exec_777e434b052bfc70, 0x0000039b },
		{ 0x57b5ef0c2d9d5531, &exec_57b5ef0c2d9d5531, 0x00000000 },
		{ 0x347baf8b2fda97ca, &exec_347baf8b2fda97ca, 0x0000256a },
		{ 0x03ddb890ad564206, &exec_03ddb890ad564206, 0x00001ac8 },
		{ 0x6d42ec6c9cf6dc90, &exec_6d42ec6c9cf6dc90, 0x00004478 },
		{ 0x4c5ba0116c946899, &exec_4c5ba0116c946899, 0x00003ccf },
		{ 0x397a23210e6815f3, &exec_397a23210e6815f3, 0x00000a56 },
		{ 0x887833cd785e84bd, &exec_887833cd785e84bd, 0x000034e7 },
		{ 0x151d2bf31ebc9bbc, &exec_151d2bf31ebc9bbc, 0x000032d2 },
		{ 0x10886e629a335145, &exec_10886e629a335145, 0x00001ebe },
		{ 0x66b690b56cec46bf, &exec_66b690b56cec46bf, 0x00002ba3 },
		{ 0x54de55466e5622e7, &exec_54de55466e5622e7, 0x0000045d },
		{ 0xa48e57708948c18d, &exec_a48e57708948c18d, 0x00003a0a },
		{ 0xc2455e4f68f42225, &exec_c2455e4f68f42225, 0x00000373 },
		{ 0x8907e7335c820cb1, &exec_8907e7335c820cb1, 0x000011bd },
		{ 0x1d5c40dfafa64eaf, &exec_1d5c40dfafa64eaf, 0x0000097c },
		{ 0x1362679fe99c8eb6, &exec_1362679fe99c8eb6, 0x000003d8 },
		{ 0x57d4f77e13461144, &exec_57d4f77e13461144, 0x00001120 },
		{ 0xf8cc44e89897b10a, &exec_f8cc44e89897b10a, 0x0000014d },
		{ 0x08224c0071c92dcb, &exec_08224c0071c92dcb, 0x00002d46 },
		{ 0xdecab6b699a2608d, &exec_decab6b699a2608d, 0x0000021d },
		{ 0xe09e2799c66ee060, &exec_e09e2799c66ee060, 0x0000059e },
		{ 0x3db0c95fdfdac128, &exec_3db0c95fdfdac128, 0x000002b2 },
		{ 0x3de98df80f3f0f25, &exec_3de98df80f3f0f25, 0x00002658 },
		{ 0x4ce8a4deb786a7c7, &exec_4ce8a4deb786a7c7, 0x00000277 },
		{ 0x63a673325b344c85, &exec_63a673325b344c85, 0x00001219 },
		{ 0x93b26e2003482ac6, &exec_93b26e2003482ac6, 0x000011c1 },
		{ 0x22c0418439388ac6, &exec_22c0418439388ac6, 0x0000498b },
		{ 0x008738ca803f91ef, &exec_008738ca803f91ef, 0x00000e0d },
		{ 0xfa6ad48e1da2a132, &exec_fa6ad48e1da2a132, 0x00000106 },
		{ 0xa18eeca6e1f90de1, &exec_a18eeca6e1f90de1, 0x0000048e },
		{ 0xcf5a06bdb5ede605, &exec_cf5a06bdb5ede605, 0x00000272 },
		{ 0x19386e356fe22f1d, &exec_19386e356fe22f1d, 0x00000113 },
		{ 0x6ea6392f25e59f06, &exec_6ea6392f25e59f06, 0x00001734 },
		{ 0x947ba9896814bace, &exec_947ba9896814bace, 0x00000d50 },
		{ 0x8446fff4a0c443e3, &exec_8446fff4a0c443e3, 0x00001182 },
		{ 0x1ab69216a55c0bdb, &exec_1ab69216a55c0bdb, 0x000002ad },
		{ 0x44108cec8a0332c8, &exec_44108cec8a0332c8, 0x00001421 },
		{ 0xd1248e43964bf597, &exec_d1248e43964bf597, 0x00000db5 },
		{ 0xf45ccd5144024ab1, &exec_f45ccd5144024ab1, 0x000020e8 },
		{ 0x526d15be1bd06749, &exec_526d15be1bd06749, 0x00001df6 },
		{ 0x40a6fb1c90f20654, &exec_40a6fb1c90f20654, 0x00000228 },
		{ 0xe3032fdf1db3ca29, &exec_e3032fdf1db3ca29, 0x00000155 },
		{ 0xb01c066810953147, &exec_b01c066810953147, 0x000003f8 },
		{ 0x87d569b1936b2a85, &exec_87d569b1936b2a85, 0x00002272 },
		{ 0x7d4a72705f418c6c, &exec_7d4a72705f418c6c, 0x000024bd },
		{ 0x9915463697bf91d4, &exec_9915463697bf91d4, 0x00000acc },
		{ 0x79809547a96c4908, &exec_79809547a96c4908, 0x00001e85 },
		{ 0x165117a46d9185f0, &exec_165117a46d9185f0, 0x00001d0d },
		{ 0x3481186ba05745c1, &exec_3481186ba05745c1, 0x00000239 },
		{ 0x3c23669465553c7e, &exec_3c23669465553c7e, 0x000003dd },
		{ 0x9db8a9a75498b757, &exec_9db8a9a75498b757, 0x00001016 },
		{ 0x72532fa111745eb8, &exec_72532fa111745eb8, 0x00000557 },
		{ 0x53e9d53442ab1638, &exec_53e9d53442ab1638, 0x0000069c },
		{ 0xdefebdaff8c1162b, &exec_defebdaff8c1162b, 0x00000753 },
		{ 0x457888c90912f01f, &exec_457888c90912f01f, 0x0000466f },
		{ 0x63fe99e05605d2d9, &exec_63fe99e05605d2d9, 0x00000584 },
		{ 0xf8be47747734b5c1, &exec_f8be47747734b5c1, 0x0000382f },
		{ 0x95ada9d4d39f865d, &exec_95ada9d4d39f865d, 0x0000011b },
		{ 0xecfc1f49dfbc5db3, &exec_ecfc1f49dfbc5db3, 0x00000d80 },
		{ 0x0fbab8fe356d06dc, &exec_0fbab8fe356d06dc, 0x00002c0c },
		{ 0xc13a97ea154bdf24, &exec_c13a97ea154bdf24, 0x00000204 },
		{ 0xb04bb59496da2b12, &exec_b04bb59496da2b12, 0x00001992 },
		{ 0xffbe445b2917edec, &exec_ffbe445b2917edec, 0x000003fe },
		{ 0xdd3965e49282ca01, &exec_dd3965e49282ca01, 0x00000128 },
		{ 0x1924523d8a19c788, &exec_1924523d8a19c788, 0x00000504 },
		{ 0xe2a608b4258a55d5, &exec_e2a608b4258a55d5, 0x00000fa1 },
		{ 0xef6c836c4b0cacc6, &exec_ef6c836c4b0cacc6, 0x000004de },
		{ 0x6ed8978b8148dc28, &exec_6ed8978b8148dc28, 0x000001bb },
		{ 0x911edeb98905d990, &exec_911edeb98905d990, 0x00003dfe },
		{ 0xd4ded43a527b0b8e, &exec_d4ded43a527b0b8e, 0x00000c99 },
		{ 0x19f5936017d34271, &exec_19f5936017d34271, 0x00001d79 },
		{ 0xbfc5c6c178c67336, &exec_bfc5c6c178c67336, 0x0000414e },
		{ 0x130275f9b3e1475a, &exec_130275f9b3e1475a, 0x000023c3 },
		{ 0x3b71152352e1665d, &exec_3b71152352e1665d, 0x00002a59 },
		{ 0xbe66e135eaa80f71, &exec_be66e135eaa80f71, 0x000025a0 },
		{ 0x3156da18aee014a5, &exec_3156da18aee014a5, 0x00000000 },
		{ 0xb987bbcfcf0b9711, &exec_b987bbcfcf0b9711, 0x000010ae },
		{ 0xdee6af623f3fd902, &exec_dee6af623f3fd902, 0x000001f8 },
		{ 0xd597cf39c0eadc8e, &exec_d597cf39c0eadc8e, 0x000019f3 },
		{ 0x862a1fde08c96529, &exec_862a1fde08c96529, 0x00002492 },
		{ 0x4c442a524b23e949, &exec_4c442a524b23e949, 0x00003691 },
		{ 0xc2fb67a96dc46e60, &exec_c2fb67a96dc46e60, 0x0000128e },
		{ 0x02a7cb38515072aa, &exec_02a7cb38515072aa, 0x00003789 },
		{ 0xe3e65d1536e7fc4b, &exec_e3e65d1536e7fc4b, 0x00000ed5 },
		{ 0x44557eec6730011e, &exec_44557eec6730011e, 0x00001c39 },
		{ 0x581712c487a6ddb2, &exec_581712c487a6ddb2, 0x00000401 },
		{ 0xf02ba9dc66f0695a, &exec_f02ba9dc66f0695a, 0x00000984 },
		{ 0x4fbc54942f7b3cab, &exec_4fbc54942f7b3cab, 0x00000137 },
		{ 0x764d26f3f8aa1c07, &exec_764d26f3f8aa1c07, 0x00000170 },
		{ 0xa695d250ad7be456, &exec_a695d250ad7be456, 0x00001b91 },
		{ 0x01ce0b39efb0aac9, &exec_01ce0b39efb0aac9, 0x0000013c },
		{ 0x060460b1d7729287, &exec_060460b1d7729287, 0x0000046c },
		{ 0xbb9442e34ff306cd, &exec_bb9442e34ff306cd, 0x00000141 },
		{ 0x1fb9180d4932a861, &exec_1fb9180d4932a861, 0x00001def },
		{ 0x90f1249aa2b7258e, &exec_90f1249aa2b7258e, 0x0000029d },
		{ 0x94404a70d2e8cd47, &exec_94404a70d2e8cd47, 0x00004be6 },
		{ 0xd5d561113f7b93cf, &exec_d5d561113f7b93cf, 0x00000145 },
		{ 0xa9989ab9743a63bb, &exec_a9989ab9743a63bb, 0x00001210 },
		{ 0x60893f993d750e75, &exec_60893f993d750e75, 0x00002e00 },
		{ 0xa3e5e23ed9423a5b, &exec_a3e5e23ed9423a5b, 0x00001ea7 },
		{ 0x8228829a1e2e2cc0, &exec_8228829a1e2e2cc0, 0x000002d6 },
		{ 0x0ea45b428f9050be, &exec_0ea45b428f9050be, 0x0000086e },
		{ 0xd84d7b39678dc218, &exec_d84d7b39678dc218, 0x00002022 },
		{ 0xb7bb133ad4195fa2, &exec_b7bb133ad4195fa2, 0x00000153 },
		{ 0x0cdcaa11fa35d8d3, &exec_0cdcaa11fa35d8d3, 0x00000000 },
		{ 0xfc532059db3bd4c7, &exec_fc532059db3bd4c7, 0x00000161 },
		{ 0x316ea63562e7bbe5, &exec_316ea63562e7bbe5, 0x00000242 },
		{ 0x18317b3801726d9f, &exec_18317b3801726d9f, 0x00003a59 },
		{ 0x251bfe87894c6302, &exec_251bfe87894c6302, 0x00000164 },
		{ 0x39401a65a4f04657, &exec_39401a65a4f04657, 0x000009e6 },
		{ 0x52e90f67825cf919, &exec_52e90f67825cf919, 0x00003771 },
		{ 0x148c0fe54cabeddd, &exec_148c0fe54cabeddd, 0x0000016e },
		{ 0x0334446f5645b51f, &exec_0334446f5645b51f, 0x00001032 },
		{ 0xa28347a9efb269cc, &exec_a28347a9efb269cc, 0x0000278c },
		{ 0xaa1e0e91c0deb6fa, &exec_aa1e0e91c0deb6fa, 0x00001c61 },
		{ 0x4531c22acbc7b3b8, &exec_4531c22acbc7b3b8, 0x00000174 },
		{ 0x853c8d31f1868ad7, &exec_853c8d31f1868ad7, 0x00000daa },
		{ 0x5e2ab80daa01ba09, &exec_5e2ab80daa01ba09, 0x00000177 },
		{ 0xe165162a16c8c198, &exec_e165162a16c8c198, 0x00004155 },
		{ 0x9b8d2f6aa4eaa934, &exec_9b8d2f6aa4eaa934, 0x00000428 },
		{ 0xed8dfd51d909019b, &exec_ed8dfd51d909019b, 0x00001154 },
		{ 0x879b6cc3c5691720, &exec_879b6cc3c5691720, 0x00000b29 },
		{ 0x6dbf79553f63cac8, &exec_6dbf79553f63cac8, 0x00000182 },
		{ 0x08f6599325278376, &exec_08f6599325278376, 0x00000188 },
		{ 0x884943c14d6e4945, &exec_884943c14d6e4945, 0x00002877 },
		{ 0xce8e61fcba999559, &exec_ce8e61fcba999559, 0x00000bb7 },
		{ 0xed135a5cdd3022e1, &exec_ed135a5cdd3022e1, 0x0000028b },
		{ 0x7645cc727e5acb0e, &exec_7645cc727e5acb0e, 0x000019eb },
		{ 0xf1a4127f06a70068, &exec_f1a4127f06a70068, 0x00000d45 },
		{ 0xbb53a77ac6e75508, &exec_bb53a77ac6e75508, 0x00000193 },
		{ 0x25e3761a92dcb28e, &exec_25e3761a92dcb28e, 0x0000056b },
		{ 0xc532b91651a6b588, &exec_c532b91651a6b588, 0x00000302 },
		{ 0x679d954fa0d0e668, &exec_679d954fa0d0e668, 0x0000457b },
		{ 0x4121251d9796f26f, &exec_4121251d9796f26f, 0x00003aed },
		{ 0x8252fb7c23329b2d, &exec_8252fb7c23329b2d, 0x00002b8a },
		{ 0xa56c82f3733df7f5, &exec_a56c82f3733df7f5, 0x00002509 },
		{ 0x27fefce0896103a6, &exec_27fefce0896103a6, 0x00000f35 },
		{ 0x0b1f9a353a18c3f0, &exec_0b1f9a353a18c3f0, 0x00001354 },
		{ 0x11d780706e72178b, &exec_11d780706e72178b, 0x000017ac },
		{ 0xfb3c1c31827bd1b8, &exec_fb3c1c31827bd1b8, 0x00004631 },
		{ 0xbac25e31dd6c28f6, &exec_bac25e31dd6c28f6, 0x00002c40 },
		{ 0x98ed931ef5ec7570, &exec_98ed931ef5ec7570, 0x00000198 },
		{ 0xa957390d283fa89c, &exec_a957390d283fa89c, 0x0000019b },
		{ 0xe861a4d5df6619b9, &exec_e861a4d5df6619b9, 0x000013fd },
		{ 0x34c432b12e5e4a4c, &exec_34c432b12e5e4a4c, 0x0000201e },
		{ 0x4eaa226070c76f9b, &exec_4eaa226070c76f9b, 0x000001a0 },
		{ 0x73a70b044167fa46, &exec_73a70b044167fa46, 0x00001b51 },
		{ 0x793a7b915be5167d, &exec_793a7b915be5167d, 0x000001a8 },
		{ 0x94384b81b88ddd34, &exec_94384b81b88ddd34, 0x0000255f },
		{ 0xe0913259e022c7f4, &exec_e0913259e022c7f4, 0x000043b9 },
		{ 0x77359a2f5a7091d9, &exec_77359a2f5a7091d9, 0x000015b2 },
		{ 0x0ffb29bd73813283, &exec_0ffb29bd73813283, 0x00003ef9 },
		{ 0x3bd1f42e4dda3bac, &exec_3bd1f42e4dda3bac, 0x00001696 },
		{ 0x2556231798e1a8e8, &exec_2556231798e1a8e8, 0x000005a0 },
		{ 0x1845d30fa18dec9f, &exec_1845d30fa18dec9f, 0x000027e2 },
		{ 0x77482cd5703bdc05, &exec_77482cd5703bdc05, 0x000001aa },
		{ 0x86f61a498b35ccda, &exec_86f61a498b35ccda, 0x00001e13 },
		{ 0xee3c9a8f4d19e054, &exec_ee3c9a8f4d19e054, 0x000001ad },
		{ 0x7f5c99144191d75c, &exec_7f5c99144191d75c, 0x000007bb },
		{ 0x05bf0d6c40172942, &exec_05bf0d6c40172942, 0x00002ab3 },
		{ 0xd52802f72875e416, &exec_d52802f72875e416, 0x000043d2 },
		{ 0x1eebf46e66501785, &exec_1eebf46e66501785, 0x000007da },
		{ 0x75089a9ad7ab5fc5, &exec_75089a9ad7ab5fc5, 0x00001da8 },
		{ 0x46f1f8d7532e3070, &exec_46f1f8d7532e3070, 0x00003f2e },
		{ 0x560eff3c8373a8f0, &exec_560eff3c8373a8f0, 0x00003bf1 },
		{ 0xea4631a6486e0e2e, &exec_ea4631a6486e0e2e, 0x0000042b },
		{ 0x98c50cdddd72efb3, &exec_98c50cdddd72efb3, 0x00004874 },
		{ 0x55b991cab49350e3, &exec_55b991cab49350e3, 0x000029eb },
		{ 0xd5103bd25331500e, &exec_d5103bd25331500e, 0x00001ac1 },
		{ 0xf79d5d9bb7c8772e, &exec_f79d5d9bb7c8772e, 0x000041bb },
		{ 0xec21ca6da0fa9f73, &exec_ec21ca6da0fa9f73, 0x000007fa },
		{ 0x20b8522a3f6f6563, &exec_20b8522a3f6f6563, 0x00000462 },
		{ 0xe27c4058cff67ea9, &exec_e27c4058cff67ea9, 0x000001b0 },
		{ 0x1f5e5ca8a304ce7b, &exec_1f5e5ca8a304ce7b, 0x0000264e },
		{ 0x241786c029ed3b85, &exec_241786c029ed3b85, 0x000001b2 },
		{ 0x785ef84d48ce4230, &exec_785ef84d48ce4230, 0x00001649 },
		{ 0x16cdcbee3e0b7625, &exec_16cdcbee3e0b7625, 0x000001b6 },
		{ 0xc443aec3d6a3a354, &exec_c443aec3d6a3a354, 0x00002fc6 },
		{ 0xcab59a83de614bd7, &exec_cab59a83de614bd7, 0x000010b8 },
		{ 0x57eb4010321cfe49, &exec_57eb4010321cfe49, 0x0000107a },
		{ 0xb6972f2369e7e8e5, &exec_b6972f2369e7e8e5, 0x00002221 },
		{ 0x3a016b73161bb84a, &exec_3a016b73161bb84a, 0x00004163 },
		{ 0x8f01e1a57342fa31, &exec_8f01e1a57342fa31, 0x00000328 },
		{ 0xa13f57a39d971cbc, &exec_a13f57a39d971cbc, 0x00002a3c },
		{ 0x9ba78e69d6c38195, &exec_9ba78e69d6c38195, 0x00000253 },
		{ 0x6d9f5fca551fd79c, &exec_6d9f5fca551fd79c, 0x0000220f },
		{ 0xc51f9eebf68a2e6f, &exec_c51f9eebf68a2e6f, 0x00000ad7 },
		{ 0x2c0a3e314f5b0b5e, &exec_2c0a3e314f5b0b5e, 0x000001c1 },
		{ 0x18a4d6e68ac56ac1, &exec_18a4d6e68ac56ac1, 0x000047ff },
		{ 0xf15140edd6c2344b, &exec_f15140edd6c2344b, 0x00002a64 },
		{ 0xa19edb822f696dd2, &exec_a19edb822f696dd2, 0x000001c3 },
		{ 0xdf878b2b91b636ce, &exec_df878b2b91b636ce, 0x0000351c },
		{ 0x23c4c5a7cac900cb, &exec_23c4c5a7cac900cb, 0x00000835 },
		{ 0x8c8f9ea8dbcf6109, &exec_8c8f9ea8dbcf6109, 0x000004f5 },
		{ 0x004f8c7217cb46c6, &exec_004f8c7217cb46c6, 0x00000792 },
		{ 0x19b5d82e290a60f2, &exec_19b5d82e290a60f2, 0x000001c9 },
		{ 0x30561e5ff12761e2, &exec_30561e5ff12761e2, 0x00002075 },
		{ 0xf9d3f27bf48866fe, &exec_f9d3f27bf48866fe, 0x000035db },
		{ 0xc1fccde645a02907, &exec_c1fccde645a02907, 0x0000058d },
		{ 0x96e5d7f8b36c7e84, &exec_96e5d7f8b36c7e84, 0x00002eac },
		{ 0x91020ce27b431c3f, &exec_91020ce27b431c3f, 0x000001d1 },
		{ 0xd1d3f5321f5d5b2e, &exec_d1d3f5321f5d5b2e, 0x00004017 },
		{ 0xa6bd6157e2a6ba3b, &exec_a6bd6157e2a6ba3b, 0x0000158d },
		{ 0x7b5f4570a3820395, &exec_7b5f4570a3820395, 0x00000000 },
		{ 0xd6c7173106f3cda9, &exec_d6c7173106f3cda9, 0x0000270a },
		{ 0x772c751f3b553222, &exec_772c751f3b553222, 0x00002b9b },
		{ 0xce9b612cc767e92e, &exec_ce9b612cc767e92e, 0x00001925 },
		{ 0x7f50f990b6eabaa3, &exec_7f50f990b6eabaa3, 0x00002a39 },
		{ 0xc3a890655cfaeb90, &exec_c3a890655cfaeb90, 0x00000e61 },
		{ 0x77d2b62c88e13a66, &exec_77d2b62c88e13a66, 0x000007d0 },
		{ 0xd6f78b81c07dea86, &exec_d6f78b81c07dea86, 0x000038a9 },
		{ 0x1d1894e02b4d76ad, &exec_1d1894e02b4d76ad, 0x000005ff },
		{ 0x238cb8d96e22c71e, &exec_238cb8d96e22c71e, 0x000043b2 },
		{ 0x66d7415c296884a0, &exec_66d7415c296884a0, 0x00001e2c },
		{ 0x0b2898fc8ff63c99, &exec_0b2898fc8ff63c99, 0x000040c8 },
		{ 0xead159a3e923bdc9, &exec_ead159a3e923bdc9, 0x0000231e },
		{ 0x801e47772551d36a, &exec_801e47772551d36a, 0x000001eb },
		{ 0x4e2b3048407f88b3, &exec_4e2b3048407f88b3, 0x000001ef },
		{ 0x5b174b4ad4613ff7, &exec_5b174b4ad4613ff7, 0x00000508 },
		{ 0xd96775255a122458, &exec_d96775255a122458, 0x000010da },
		{ 0xdd1dff521db29df2, &exec_dd1dff521db29df2, 0x000001f2 },
		{ 0x05e930b1d75b793f, &exec_05e930b1d75b793f, 0x00001dbb },
		{ 0xd2cf287e40a694f4, &exec_d2cf287e40a694f4, 0x000001f5 },
		{ 0x5407801db100fdcc, &exec_5407801db100fdcc, 0x0000033e },
		{ 0x3a21343d4d54800e, &exec_3a21343d4d54800e, 0x00002080 },
		{ 0x1cc4c3e65f179d05, &exec_1cc4c3e65f179d05, 0x0000057e },
		{ 0x1670a68655e40b30, &exec_1670a68655e40b30, 0x00003a56 },
		{ 0x3cc27b9a94626a05, &exec_3cc27b9a94626a05, 0x0000230a },
		{ 0x909672816a755b4f, &exec_909672816a755b4f, 0x00001699 },
		{ 0x628075b18cc2bd01, &exec_628075b18cc2bd01, 0x00000397 },
		{ 0xc601bb6355556601, &exec_c601bb6355556601, 0x00002be7 },
		{ 0x3adc22453348fa09, &exec_3adc22453348fa09, 0x000010f9 },
		{ 0x862f6b7e29eab87b, &exec_862f6b7e29eab87b, 0x0000020a },
		{ 0xf0031786c1cdf83a, &exec_f0031786c1cdf83a, 0x00000000 },
		{ 0xe4a54de4e22f62b5, &exec_e4a54de4e22f62b5, 0x000008d4 },
		{ 0x82663011d2ed8c03, &exec_82663011d2ed8c03, 0x000013dc },
		{ 0xcd61017e3ef591f4, &exec_cd61017e3ef591f4, 0x0000020d },
		{ 0x8e45e927a56a2bfc, &exec_8e45e927a56a2bfc, 0x0000116a },
		{ 0x606a7eda314e03ed, &exec_606a7eda314e03ed, 0x00000213 },
		{ 0x4bd98335c4a94b40, &exec_4bd98335c4a94b40, 0x00004bd1 },
		{ 0xac60a4f35a999153, &exec_ac60a4f35a999153, 0x0000076f },
		{ 0x6414c216a49314d7, &exec_6414c216a49314d7, 0x00000a1c },
		{ 0x5ec4a5c6ada18db6, &exec_5ec4a5c6ada18db6, 0x0000224e },
		{ 0x1f18f3961afdd5ff, &exec_1f18f3961afdd5ff, 0x00000215 },
		{ 0x3a2ca607ec8cf891, &exec_3a2ca607ec8cf891, 0x00002d1e },
		{ 0x260b4191541b6a60, &exec_260b4191541b6a60, 0x000032fa },
		{ 0xce68d88b1c44b2e5, &exec_ce68d88b1c44b2e5, 0x000023e9 },
		{ 0x89914264008981e4, &exec_89914264008981e4, 0x00002ca7 },
		{ 0x5c10bb9d67ca2f5c, &exec_5c10bb9d67ca2f5c, 0x00000501 },
		{ 0x20271c365aca32ed, &exec_20271c365aca32ed, 0x00000c75 },
		{ 0xd50114ad286e9ac5, &exec_d50114ad286e9ac5, 0x0000021a },
		{ 0x59bd4fa284757dc1, &exec_59bd4fa284757dc1, 0x00000222 },
		{ 0x726edc8eafc67ff6, &exec_726edc8eafc67ff6, 0x00003044 },
		{ 0x448b9d2854ebaf95, &exec_448b9d2854ebaf95, 0x00003875 },
		{ 0x79c16b17a9a261fd, &exec_79c16b17a9a261fd, 0x00000225 },
		{ 0xc354ac19bb6cb5f1, &exec_c354ac19bb6cb5f1, 0x000006c7 },
		{ 0x6332a1c677f8ba47, &exec_6332a1c677f8ba47, 0x000042d9 },
		{ 0x1209ebf9bfe5fdb2, &exec_1209ebf9bfe5fdb2, 0x00000261 },
		{ 0xb4364a114e684b24, &exec_b4364a114e684b24, 0x00004732 },
		{ 0xa87ff1951b37a20e, &exec_a87ff1951b37a20e, 0x0000022c },
		{ 0x9f1ed49bb79301b2, &exec_9f1ed49bb79301b2, 0x0000043c },
		{ 0xe920cc3ec7f06231, &exec_e920cc3ec7f06231, 0x00001c27 },
		{ 0x56ac2799c42abcf7, &exec_56ac2799c42abcf7, 0x00001f24 },
		{ 0xaed22abada8ccc65, &exec_aed22abada8ccc65, 0x0000046e },
		{ 0x794d6549ca0461c2, &exec_794d6549ca0461c2, 0x00000391 },
		{ 0x4c0259d79c8a972c, &exec_4c0259d79c8a972c, 0x00002652 },
		{ 0xc099785b8aedc4c9, &exec_c099785b8aedc4c9, 0x0000218e },
		{ 0x0509e8eac4902e97, &exec_0509e8eac4902e97, 0x00000ee0 },
		{ 0xf920834ded8f7aa4, &exec_f920834ded8f7aa4, 0x00000235 },
		{ 0x22a35f56589a0072, &exec_22a35f56589a0072, 0x0000194e },
		{ 0x6fafd5d7658b1261, &exec_6fafd5d7658b1261, 0x000015dc },
		{ 0xd6d905bfe3785b1e, &exec_d6d905bfe3785b1e, 0x0000023b },
		{ 0xe60ac06d2883886c, &exec_e60ac06d2883886c, 0x00000255 },
		{ 0xf9a041875a62adaa, &exec_f9a041875a62adaa, 0x00000240 },
		{ 0x78dc7fa5505072b6, &exec_78dc7fa5505072b6, 0x0000115e },
		{ 0xb5085999299ba7d8, &exec_b5085999299ba7d8, 0x0000211e },
		{ 0x9f627a849f095ac7, &exec_9f627a849f095ac7, 0x000038cd },
		{ 0xaf355457625b5514, &exec_af355457625b5514, 0x0000030b },
		{ 0xc6feef42e915c7b5, &exec_c6feef42e915c7b5, 0x00003490 },
		{ 0xeb3ea5b044ab1fcb, &exec_eb3ea5b044ab1fcb, 0x00002a0c },
		{ 0x5a8d2fe2fe683b03, &exec_5a8d2fe2fe683b03, 0x000037ed },
		{ 0x0dfe19fd1e560fd4, &exec_0dfe19fd1e560fd4, 0x000005e7 },
		{ 0xf79ace3c9d924772, &exec_f79ace3c9d924772, 0x00000c38 },
		{ 0x1a34b9f9ecf08b8e, &exec_1a34b9f9ecf08b8e, 0x0000176a },
		{ 0x5e7af72164bc19cb, &exec_5e7af72164bc19cb, 0x00000250 },
		{ 0xf7ae0f6e3f0d55cb, &exec_f7ae0f6e3f0d55cb, 0x00000861 },
		{ 0xb5c54891c3094cab, &exec_b5c54891c3094cab, 0x0000156c },
		{ 0xda8ca2f89bb81a0c, &exec_da8ca2f89bb81a0c, 0x00002e70 },
		{ 0x1230c0e2a476ff44, &exec_1230c0e2a476ff44, 0x000008d0 },
		{ 0x020246c17d0fda56, &exec_020246c17d0fda56, 0x0000382b },
		{ 0x0967f78458e1ddf8, &exec_0967f78458e1ddf8, 0x00000f8a },
		{ 0xb7293ca8f3164912, &exec_b7293ca8f3164912, 0x00000259 },
		{ 0x2db0fb5eecf8a73d, &exec_2db0fb5eecf8a73d, 0x0000422f },
		{ 0x11c1c0429521ee5c, &exec_11c1c0429521ee5c, 0x00000527 },
		{ 0x70f44609d58be91c, &exec_70f44609d58be91c, 0x00000265 },
		{ 0xfae4da03a4ae1257, &exec_fae4da03a4ae1257, 0x00000267 },
		{ 0xd4f9050f669f124a, &exec_d4f9050f669f124a, 0x00000937 },
		{ 0x272e689d706eed23, &exec_272e689d706eed23, 0x00003373 },
		{ 0x6a3342b34fd7f0ad, &exec_6a3342b34fd7f0ad, 0x00001524 },
		{ 0x5fe75f31ab8eba9f, &exec_5fe75f31ab8eba9f, 0x00004227 },
		{ 0xdab38e3f1001cd32, &exec_dab38e3f1001cd32, 0x00000275 },
		{ 0x135610c3b05879cb, &exec_135610c3b05879cb, 0x000026dc },
		{ 0xf098358d458fde71, &exec_f098358d458fde71, 0x0000027a },
		{ 0xd1145a2104e1d854, &exec_d1145a2104e1d854, 0x00000000 },
		{ 0x1d11c8e02b47b05b, &exec_1d11c8e02b47b05b, 0x00000280 },
		{ 0x6742b1a8a234665a, &exec_6742b1a8a234665a, 0x00000283 },
		{ 0x0e761a2e9c46b331, &exec_0e761a2e9c46b331, 0x0000306f },
		{ 0xc10bac08e96216a9, &exec_c10bac08e96216a9, 0x00000287 },
		{ 0xb38aaa158caedaa5, &exec_b38aaa158caedaa5, 0x00000e7a },
		{ 0x96c8e2c55634f41a, &exec_96c8e2c55634f41a, 0x00003e74 },
		{ 0x0d43a788eb9aa284, &exec_0d43a788eb9aa284, 0x00001efc },
		{ 0xc12bcb48f0c6e053, &exec_c12bcb48f0c6e053, 0x00000294 },
		{ 0x1adb19614e0ae1b8, &exec_1adb19614e0ae1b8, 0x0000089e },
		{ 0x9c69990f76d990ce, &exec_9c69990f76d990ce, 0x00000298 },
		{ 0xbea066b413b24d63, &exec_bea066b413b24d63, 0x0000029a },
		{ 0xb9eb28581ee45e72, &exec_b9eb28581ee45e72, 0x000003c1 },
		{ 0x9ca847dc82dadb1e, &exec_9ca847dc82dadb1e, 0x000007ef },
		{ 0x6c8fa1560252ff28, &exec_6c8fa1560252ff28, 0x00000ff2 },
		{ 0xee99d89424aba6bb, &exec_ee99d89424aba6bb, 0x000002a5 },
		{ 0x240266c24d6a2e3e, &exec_240266c24d6a2e3e, 0x000004e3 },
		{ 0xc02833101a8df348, &exec_c02833101a8df348, 0x00002286 },
		{ 0x8179a633b6c4d9b5, &exec_8179a633b6c4d9b5, 0x0000141d },
		{ 0x42803ac843395573, &exec_42803ac843395573, 0x0000088b },
		{ 0xefb8a12f5dfdbd5a, &exec_efb8a12f5dfdbd5a, 0x0000042d },
		{ 0x267db5a22cdf0c73, &exec_267db5a22cdf0c73, 0x0000195d },
		{ 0x15454bf917374f86, &exec_15454bf917374f86, 0x000046a3 },
		{ 0x0b93a2a46e6bcf0f, &exec_0b93a2a46e6bcf0f, 0x000008a7 },
		{ 0x178f7d77552be336, &exec_178f7d77552be336, 0x000006f7 },
		{ 0x982d945a4bbee8f5, &exec_982d945a4bbee8f5, 0x000002b4 },
		{ 0x83778ca18dbaf54d, &exec_83778ca18dbaf54d, 0x00000c2a },
		{ 0x45ec987afbbe392c, &exec_45ec987afbbe392c, 0x000002b8 },
		{ 0x66912bfca979c9a2, &exec_66912bfca979c9a2, 0x00000599 },
		{ 0x99b877ce6702cb9d, &exec_99b877ce6702cb9d, 0x000002bc },
		{ 0x5ec6b9170071f296, &exec_5ec6b9170071f296, 0x00000adb },
		{ 0x985db3ac71183c52, &exec_985db3ac71183c52, 0x00002f96 },
		{ 0x6f2f05704cbc3c48, &exec_6f2f05704cbc3c48, 0x000029e8 },
		{ 0xe9f22ef2a0d9e841, &exec_e9f22ef2a0d9e841, 0x00000703 },
		{ 0x5730489c4d969466, &exec_5730489c4d969466, 0x0000081d },
		{ 0x6d282f3fe21b1c51, &exec_6d282f3fe21b1c51, 0x000010b5 },
		{ 0x86474ea5b479cc82, &exec_86474ea5b479cc82, 0x00002d4c },
		{ 0x79c239b300e8329a, &exec_79c239b300e8329a, 0x00000ea8 },
		{ 0x62bfec8a747cae3c, &exec_62bfec8a747cae3c, 0x00002f81 },
		{ 0xc99d8b4244e1c881, &exec_c99d8b4244e1c881, 0x000002be },
		{ 0xa18fda52e9439c91, &exec_a18fda52e9439c91, 0x00000a89 },
		{ 0x68f53825fb54bb08, &exec_68f53825fb54bb08, 0x0000068e },
		{ 0x4e32d5b2c4a7c406, &exec_4e32d5b2c4a7c406, 0x00004592 },
		{ 0xca33e623613fc7e1, &exec_ca33e623613fc7e1, 0x0000309f },
		{ 0x52191e2377367059, &exec_52191e2377367059, 0x000022be },
		{ 0xfa5c7c0203079604, &exec_fa5c7c0203079604, 0x000033c4 },
		{ 0x7db221834c8e34b1, &exec_7db221834c8e34b1, 0x000002c5 },
		{ 0x1e8ebd80549a10af, &exec_1e8ebd80549a10af, 0x00001f4a },
		{ 0xdcbe7a2bd57a5ab2, &exec_dcbe7a2bd57a5ab2, 0x00003ac3 },
		{ 0x65d7a32dcd1a14fe, &exec_65d7a32dcd1a14fe, 0x000040fe },
		{ 0x3f3f11fdb008b473, &exec_3f3f11fdb008b473, 0x00000a07 },
		{ 0x1bfcfd9cfcce78af, &exec_1bfcfd9cfcce78af, 0x00001c14 },
		{ 0xfd835ef4287ed097, &exec_fd835ef4287ed097, 0x00003812 },
		{ 0x149867eff589e893, &exec_149867eff589e893, 0x000002ca },
		{ 0x24d5b69f5c8eeb25, &exec_24d5b69f5c8eeb25, 0x00004769 },
		{ 0xc041f3da57af4fdf, &exec_c041f3da57af4fdf, 0x0000305a },
		{ 0x3a616619c56fb604, &exec_3a616619c56fb604, 0x000002cf },
		{ 0x76c13d4f227e9085, &exec_76c13d4f227e9085, 0x00000436 },
		{ 0xc32a584b187c8339, &exec_c32a584b187c8339, 0x00001e6b },
		{ 0x110031c272669cde, &exec_110031c272669cde, 0x000002d3 },
		{ 0xbadf443a9c836d68, &exec_badf443a9c836d68, 0x00000360 },
		{ 0xbc9eb76b47def27a, &exec_bc9eb76b47def27a, 0x00000706 },
		{ 0x0fa9e0871d9d87ab, &exec_0fa9e0871d9d87ab, 0x000027b5 },
		{ 0x612dc8ca0674dd0c, &exec_612dc8ca0674dd0c, 0x000002db },
		{ 0xa080304e2167dc94, &exec_a080304e2167dc94, 0x00001450 },
		{ 0xa84ec66d56070af4, &exec_a84ec66d56070af4, 0x00004b33 },
		{ 0xbbe16fd4c25f15e9, &exec_bbe16fd4c25f15e9, 0x000045c0 },
		{ 0x15abd2c6cb5408a5, &exec_15abd2c6cb5408a5, 0x000002e3 },
		{ 0x05f93a7b54cd00b5, &exec_05f93a7b54cd00b5, 0x00000307 },
		{ 0x962a9270bfc4600c, &exec_962a9270bfc4600c, 0x00004a85 },
		{ 0xc82ff10fd52ba12b, &exec_c82ff10fd52ba12b, 0x0000075e },
		{ 0x6ca980ed3fdac098, &exec_6ca980ed3fdac098, 0x00000380 },
		{ 0x07f57ae0817d73f2, &exec_07f57ae0817d73f2, 0x0000132c },
		{ 0x7808bcf94068a15b, &exec_7808bcf94068a15b, 0x0000421e },
		{ 0xbc0992f8f9a2d118, &exec_bc0992f8f9a2d118, 0x00002db8 },
		{ 0xcb832a71d2e2e4b8, &exec_cb832a71d2e2e4b8, 0x000011d6 },
		{ 0x520d44c700be0c6b, &exec_520d44c700be0c6b, 0x000002e9 },
		{ 0x58b83fa302a48e1f, &exec_58b83fa302a48e1f, 0x00000e13 },
		{ 0x1028e368c77aadbd, &exec_1028e368c77aadbd, 0x00000e30 },
		{ 0x567a316620ba3f7a, &exec_567a316620ba3f7a, 0x00000566 },
		{ 0x4b71d5d2a44e22b9, &exec_4b71d5d2a44e22b9, 0x00002eb1 },
		{ 0x28c030b66571a20e, &exec_28c030b66571a20e, 0x000002f2 },
		{ 0x892d9426673aa639, &exec_892d9426673aa639, 0x00002dd3 },
		{ 0xde551ea1112346be, &exec_de551ea1112346be, 0x00000c34 },
		{ 0x0703a9b30abd512b, &exec_0703a9b30abd512b, 0x00003b3e },
		{ 0x14b468e738533417, &exec_14b468e738533417, 0x0000117d },
		{ 0xc299170c2036c3d2, &exec_c299170c2036c3d2, 0x00004136 },
		{ 0x196b27a1e2e93557, &exec_196b27a1e2e93557, 0x00003189 },
		{ 0x63777813e8b0e95d, &exec_63777813e8b0e95d, 0x00000418 },
		{ 0xe638bb638f184e00, &exec_e638bb638f184e00, 0x000012d6 },
		{ 0xe27100dae45fd2e7, &exec_e27100dae45fd2e7, 0x000002f9 },
		{ 0xe99025776563ad72, &exec_e99025776563ad72, 0x000035f3 },
		{ 0xc710c739013c7967, &exec_c710c739013c7967, 0x000002fc },
		{ 0x4f3b3b403046903a, &exec_4f3b3b403046903a, 0x000009bd },
		{ 0xe822e3fb51f36c4f, &exec_e822e3fb51f36c4f, 0x00001f35 },
		{ 0xccbd727d82ed538f, &exec_ccbd727d82ed538f, 0x0000211a },
		{ 0x098006ab061d00aa, &exec_098006ab061d00aa, 0x000003b5 },
		{ 0xc038d78becc9b26f, &exec_c038d78becc9b26f, 0x00004242 },
		{ 0x43ded8edfea808a8, &exec_43ded8edfea808a8, 0x000017d1 },
		{ 0xb045b1790a97a5d4, &exec_b045b1790a97a5d4, 0x0000110e },
		{ 0xd13149d6a5945ee3, &exec_d13149d6a5945ee3, 0x00000bd4 },
		{ 0x5e01ac1f3e13f0e0, &exec_5e01ac1f3e13f0e0, 0x000004a7 },
		{ 0xf45e3b25cee0ab40, &exec_f45e3b25cee0ab40, 0x00001f2e },
		{ 0xe81478bb7904859e, &exec_e81478bb7904859e, 0x00002f0d },
		{ 0xf88a92cb53989dc8, &exec_f88a92cb53989dc8, 0x00000821 },
		{ 0xf7f0768c4c6fccb1, &exec_f7f0768c4c6fccb1, 0x00001f6d },
		{ 0x9c62cd0f76d3ca7c, &exec_9c62cd0f76d3ca7c, 0x00000b16 },
		{ 0x0f2d5c9e36f49764, &exec_0f2d5c9e36f49764, 0x000005ed },
		{ 0x08e6895ef7722247, &exec_08e6895ef7722247, 0x00001c64 },
		{ 0xb7407dbc3e904ccf, &exec_b7407dbc3e904ccf, 0x00000cbd },
		{ 0x4b65da007a7167f3, &exec_4b65da007a7167f3, 0x000007f1 },
		{ 0x548fca831cdcf3dd, &exec_548fca831cdcf3dd, 0x00000da6 },
		{ 0xeb2e8f1d86d3bf0b, &exec_eb2e8f1d86d3bf0b, 0x00002a6a },
		{ 0x24c93cddd8d53e93, &exec_24c93cddd8d53e93, 0x00000c22 },
		{ 0xe9bd5c60d2f5095a, &exec_e9bd5c60d2f5095a, 0x00000316 },
		{ 0x8f529cad6f50e18e, &exec_8f529cad6f50e18e, 0x00000a73 },
		{ 0xdcde6f235b3b3bac, &exec_dcde6f235b3b3bac, 0x00000c10 },
		{ 0xa4277e24f53dbc20, &exec_a4277e24f53dbc20, 0x00001e9d },
		{ 0x55f496a0648d79be, &exec_55f496a0648d79be, 0x000004aa },
		{ 0xcb40f092ff8c2960, &exec_cb40f092ff8c2960, 0x0000031c },
		{ 0x36a66b7c0673769c, &exec_36a66b7c0673769c, 0x0000033b },
		{ 0x8848c5fb0689f08f, &exec_8848c5fb0689f08f, 0x000010e2 },
		{ 0xcb5f9e27207d6138, &exec_cb5f9e27207d6138, 0x00000320 },
		{ 0xa7407466dfd6c8aa, &exec_a7407466dfd6c8aa, 0x000034b3 },
		{ 0x3c931edbb87bd362, &exec_3c931edbb87bd362, 0x00000352 },
		{ 0xb0e419359b1fdcb4, &exec_b0e419359b1fdcb4, 0x00000000 },
		{ 0xd68ca7384feb78ad, &exec_d68ca7384feb78ad, 0x000030a7 },
		{ 0xe6b0c95a4a33ebc9, &exec_e6b0c95a4a33ebc9, 0x00001678 },
		{ 0xdb89eb7f17e3df52, &exec_db89eb7f17e3df52, 0x00000335 },
		{ 0xcb7e3780ade50f0a, &exec_cb7e3780ade50f0a, 0x00000f61 },
		{ 0x11e897d6c27744ae, &exec_11e897d6c27744ae, 0x000008dd },
		{ 0xb4e7fe5f1a3f9195, &exec_b4e7fe5f1a3f9195, 0x00001497 },
		{ 0xd0836bd24b95231c, &exec_d0836bd24b95231c, 0x00001904 },
		{ 0x61e6913320744a22, &exec_61e6913320744a22, 0x000003c6 },
		{ 0xe541d3625775334d, &exec_e541d3625775334d, 0x00001e51 },
		{ 0x8b5b817fb3f9742b, &exec_8b5b817fb3f9742b, 0x000024fc },
		{ 0xc58b0b438c65ebe3, &exec_c58b0b438c65ebe3, 0x000006d2 },
		{ 0x7b079a687ee566d2, &exec_7b079a687ee566d2, 0x00000345 },
		{ 0x5fb464c74505edc3, &exec_5fb464c74505edc3, 0x000043ec },
		{ 0xf9187e459e1b1a74, &exec_f9187e459e1b1a74, 0x00002346 },
		{ 0x850d8f09d2baa7f4, &exec_850d8f09d2baa7f4, 0x00000384 },
		{ 0xf944e3c1330bb680, &exec_f944e3c1330bb680, 0x00000cf3 },
		{ 0xcae45fcd028612ef, &exec_cae45fcd028612ef, 0x00001395 },
		{ 0xb7c03a7ada4d4c96, &exec_b7c03a7ada4d4c96, 0x00001fc8 },
		{ 0x51a1be449e122db1, &exec_51a1be449e122db1, 0x00001255 },
		{ 0xdebf217540bc8223, &exec_debf217540bc8223, 0x00001c5c },
		{ 0xc30cf3b30fabf22a, &exec_c30cf3b30fabf22a, 0x000029f1 },
		{ 0xb25cacd3a826ef3f, &exec_b25cacd3a826ef3f, 0x0000282a },
		{ 0x4d6ac61464297c65, &exec_4d6ac61464297c65, 0x00000358 },
		{ 0xa6cfa28634c08f5c, &exec_a6cfa28634c08f5c, 0x000009c8 },
		{ 0x6360ac5921caa0fd, &exec_6360ac5921caa0fd, 0x0000035b },
		{ 0x28c1dcd8d6b3b5e3, &exec_28c1dcd8d6b3b5e3, 0x00001987 },
		{ 0xdb0d6a30d923d75d, &exec_db0d6a30d923d75d, 0x00002c58 },
		{ 0x82d3e958b18d43df, &exec_82d3e958b18d43df, 0x00001936 },
		{ 0x4faf98905a4912e5, &exec_4faf98905a4912e5, 0x00002201 },
		{ 0xa17b048d75d2b0fb, &exec_a17b048d75d2b0fb, 0x0000035e },
		{ 0x30e979c6d5a1c3e4, &exec_30e979c6d5a1c3e4, 0x00002014 },
		{ 0x43f4628be2311631, &exec_43f4628be2311631, 0x00004611 },
		{ 0x86539a84a155b926, &exec_86539a84a155b926, 0x00000364 },
		{ 0x3877943ba7d8b7a0, &exec_3877943ba7d8b7a0, 0x000047b3 },
		{ 0xae8b89abd79ee196, &exec_ae8b89abd79ee196, 0x00000369 },
		{ 0xbb140fb63033a720, &exec_bb140fb63033a720, 0x000047d1 },
		{ 0x4e08bf42e3b6939f, &exec_4e08bf42e3b6939f, 0x00003ff8 },
		{ 0x36259ebb017c8750, &exec_36259ebb017c8750, 0x00000469 },
		{ 0x20d7f80771dd86e0, &exec_20d7f80771dd86e0, 0x0000116d },
		{ 0x2357ccd0f3fb7bd1, &exec_2357ccd0f3fb7bd1, 0x0000090f },
		{ 0x68d4dfc8b7cdd136, &exec_68d4dfc8b7cdd136, 0x0000036f },
		{ 0x666448cee6ed82ad, &exec_666448cee6ed82ad, 0x000016d1 },
		{ 0x92bd7a7c29768cb8, &exec_92bd7a7c29768cb8, 0x00004bdc },
		{ 0x336683150ec972f2, &exec_336683150ec972f2, 0x0000134f },
		{ 0xdad2abde9210f124, &exec_dad2abde9210f124, 0x00000376 },
		{ 0x119e5d1ffb9de9b1, &exec_119e5d1ffb9de9b1, 0x00000fcf },
		{ 0x75a535be64e46dd9, &exec_75a535be64e46dd9, 0x00000379 },
		{ 0x4b34ab76bc87e5d6, &exec_4b34ab76bc87e5d6, 0x00000691 },
		{ 0xeabc4ab1234c36ee, &exec_eabc4ab1234c36ee, 0x000024c2 },
		{ 0xc95e80832d6fd3c7, &exec_c95e80832d6fd3c7, 0x00000cf6 },
		{ 0x313221fce8746535, &exec_313221fce8746535, 0x00000ab0 },
		{ 0x3aca7d037d96e707, &exec_3aca7d037d96e707, 0x0000060f },
		{ 0x5821ef55d9991b49, &exec_5821ef55d9991b49, 0x000048c3 },
		{ 0x5d882b4bba722541, &exec_5d882b4bba722541, 0x000047d6 },
		{ 0x11d95eb6d29567f5, &exec_11d95eb6d29567f5, 0x0000038a },
		{ 0x2190e8f602116dff, &exec_2190e8f602116dff, 0x0000050d },
		{ 0xf2f949aaf6189d6c, &exec_f2f949aaf6189d6c, 0x00000a76 },
		{ 0x7859acb84cec0901, &exec_7859acb84cec0901, 0x0000347b },
		{ 0x8ae240e432ce9a74, &exec_8ae240e432ce9a74, 0x00000452 },
		{ 0xfd25b6bff3248daf, &exec_fd25b6bff3248daf, 0x00002fb6 },
		{ 0x4a6870eddbe39a71, &exec_4a6870eddbe39a71, 0x00001969 },
		{ 0x02e335479b1c57e7, &exec_02e335479b1c57e7, 0x000018e2 },
		{ 0x816e7f20017678be, &exec_816e7f20017678be, 0x00000ac6 },
		{ 0x496c812fb7ca828d, &exec_496c812fb7ca828d, 0x000003a1 },
		{ 0x7eb4cce698e8b2c6, &exec_7eb4cce698e8b2c6, 0x000030a3 },
		{ 0x402a14a371fc48a6, &exec_402a14a371fc48a6, 0x000003a6 },
		{ 0x0e892b428f793776, &exec_0e892b428f793776, 0x000003a8 },
		{ 0xa2c0658eee16a719, &exec_a2c0658eee16a719, 0x000003ab },
		{ 0xa3adb1164d9c82d4, &exec_a3adb1164d9c82d4, 0x000006fc },
		{ 0x1bab9a6d0d2acd4b, &exec_1bab9a6d0d2acd4b, 0x0000163e },
		{ 0x65d2e47778405939, &exec_65d2e47778405939, 0x000006f3 },
		{ 0x35e517287cd7591b, &exec_35e517287cd7591b, 0x000003ae },
		{ 0xfb1de40a6449fb9b, &exec_fb1de40a6449fb9b, 0x00001cfc },
		{ 0xb5661499d7f0803b, &exec_b5661499d7f0803b, 0x00001a97 },
		{ 0xbd79da61edad4b70, &exec_bd79da61edad4b70, 0x000003d3 },
		{ 0xa996b20967107758, &exec_a996b20967107758, 0x00002581 },
		{ 0x971397ad82557c15, &exec_971397ad82557c15, 0x00000b72 },
		{ 0x3b788e86345881a3, &exec_3b788e86345881a3, 0x00000c43 },
		{ 0xc3ea48a88694b0f0, &exec_c3ea48a88694b0f0, 0x000003e6 },
		{ 0x8107fefe328a0df4, &exec_8107fefe328a0df4, 0x0000323c },
		{ 0xba3761ae4edfd14d, &exec_ba3761ae4edfd14d, 0x00001a09 },
		{ 0x68c422090673d051, &exec_68c422090673d051, 0x000031fd },
		{ 0xec03d2fef667cdca, &exec_ec03d2fef667cdca, 0x00000748 },
		{ 0x5a0deaac9bf3302c, &exec_5a0deaac9bf3302c, 0x00001eb8 },
		{ 0xb68ff546053d72e3, &exec_b68ff546053d72e3, 0x000003ed },
		{ 0xe5ab8e83e83c2ab7, &exec_e5ab8e83e83c2ab7, 0x000012a9 },
		{ 0xe983b150475711b4, &exec_e983b150475711b4, 0x00000407 },
		{ 0x8c91017095ccc7d4, &exec_8c91017095ccc7d4, 0x000028a5 },
		{ 0xb9c6d1a35804f18e, &exec_b9c6d1a35804f18e, 0x00003857 },
		{ 0xe3db335102e03ade, &exec_e3db335102e03ade, 0x0000064d },
		{ 0x3d0eade094ae7818, &exec_3d0eade094ae7818, 0x0000040a },
		{ 0xb69e634163fee080, &exec_b69e634163fee080, 0x00003844 },
		{ 0xa8ae905e594dc57d, &exec_a8ae905e594dc57d, 0x00002ea7 },
		{ 0xe19ee5cede408d7f, &exec_e19ee5cede408d7f, 0x00000412 },
		{ 0xb1e804d13819c77c, &exec_b1e804d13819c77c, 0x00000b6c },
		{ 0xd7ed8c55f3b8d03c, &exec_d7ed8c55f3b8d03c, 0x000009b9 },
		{ 0xd5d11ca1be15c2db, &exec_d5d11ca1be15c2db, 0x00000420 },
		{ 0xefda31114d6e4aaf, &exec_efda31114d6e4aaf, 0x0000259b },
		{ 0x3daca95379879b6d, &exec_3daca95379879b6d, 0x000004c5 },
		{ 0xc9ab6e65e854cb79, &exec_c9ab6e65e854cb79, 0x0000173e },
		{ 0x5c0e4cfeca1778de, &exec_5c0e4cfeca1778de, 0x000022a7 },
		{ 0xdcc887747cb3c794, &exec_dcc887747cb3c794, 0x000007f7 },
		{ 0x975dd6dcd37eeef8, &exec_975dd6dcd37eeef8, 0x00001d92 },
		{ 0xab22dd88687be759, &exec_ab22dd88687be759, 0x00003132 },
		{ 0xfb42bc79ec55fc86, &exec_fb42bc79ec55fc86, 0x0000052f },
		{ 0xc54863c78d41e8e8, &exec_c54863c78d41e8e8, 0x0000374e },
		{ 0xf83bf99cf56457a9, &exec_f83bf99cf56457a9, 0x0000358f },
		{ 0x8ca63b707a0a3202, &exec_8ca63b707a0a3202, 0x00000438 },
		{ 0x0f5f02983dfb8ca9, &exec_0f5f02983dfb8ca9, 0x00004453 },
		{ 0x2a579f8f45e45854, &exec_2a579f8f45e45854, 0x0000043f },
		{ 0xe42e9d41f1e485e2, &exec_e42e9d41f1e485e2, 0x00003f2a },
		{ 0x26d0e9e685426331, &exec_26d0e9e685426331, 0x00001020 },
		{ 0x0113ea504c35dbf5, &exec_0113ea504c35dbf5, 0x00000669 },
		{ 0xf33eaf5247710792, &exec_f33eaf5247710792, 0x000015e9 },
		{ 0x8bb0722efbc8c83e, &exec_8bb0722efbc8c83e, 0x00000571 },
		{ 0x8885ac2c5fb668bf, &exec_8885ac2c5fb668bf, 0x000007c9 },
		{ 0x510c485f7b5950f9, &exec_510c485f7b5950f9, 0x00000445 },
		{ 0x59103b1f73c3cc47, &exec_59103b1f73c3cc47, 0x00002b6e },
		{ 0x18c25631fc57648e, &exec_18c25631fc57648e, 0x00000db1 },
		{ 0x68e4b099168c8ff6, &exec_68e4b099168c8ff6, 0x00000449 },
		{ 0x7f91dd3912a64381, &exec_7f91dd3912a64381, 0x0000044c },
		{ 0x8be500aa7f385bbf, &exec_8be500aa7f385bbf, 0x00000457 },
		{ 0x56525009e17f7a1e, &exec_56525009e17f7a1e, 0x000005b5 },
		{ 0x2290fa306bb7663f, &exec_2290fa306bb7663f, 0x00001669 },
		{ 0x3e1fb4faa2cce859, &exec_3e1fb4faa2cce859, 0x00001c59 },
		{ 0x3a0eadd965c82e8f, &exec_3a0eadd965c82e8f, 0x0000113a },
		{ 0x3942f1f7426ef8aa, &exec_3942f1f7426ef8aa, 0x0000101a },
		{ 0x577b4fb4dad5fb0e, &exec_577b4fb4dad5fb0e, 0x00001340 },
		{ 0x18e62fd8a7092bb9, &exec_18e62fd8a7092bb9, 0x00001417 },
		{ 0x96d11d203aa27034, &exec_96d11d203aa27034, 0x000006ae },
		{ 0xc18b4d59a1eab56d, &exec_c18b4d59a1eab56d, 0x00000eb7 },
		{ 0xb3e399b24563ca68, &exec_b3e399b24563ca68, 0x00000465 },
		{ 0xdb4633d1f5980845, &exec_db4633d1f5980845, 0x00000000 },
		{ 0xcfad776e1d656841, &exec_cfad776e1d656841, 0x00001be8 },
		{ 0xd1bf12253acdbdf3, &exec_d1bf12253acdbdf3, 0x000006ba },
		{ 0xe296e28a28b73414, &exec_e296e28a28b73414, 0x00000846 },
		{ 0xabc7d583567aee77, &exec_abc7d583567aee77, 0x00000740 },
		{ 0xce60f4b414f57fa3, &exec_ce60f4b414f57fa3, 0x000011ae },
		{ 0x22652f96a51e4f59, &exec_22652f96a51e4f59, 0x00000e27 },
		{ 0xecf15d12b0f42bbc, &exec_ecf15d12b0f42bbc, 0x00000978 },
		{ 0xc02a0424bdcecb15, &exec_c02a0424bdcecb15, 0x00002bdb },
		{ 0x2735d15672b45622, &exec_2735d15672b45622, 0x00000471 },
		{ 0x1226fdb3ace481f3, &exec_1226fdb3ace481f3, 0x00000478 },
		{ 0x9db039891ba70a17, &exec_9db039891ba70a17, 0x000041e7 },
		{ 0x806433cff844863a, &exec_806433cff844863a, 0x0000047b },
		{ 0x7e23bc43ff951cdb, &exec_7e23bc43ff951cdb, 0x00000480 },
		{ 0x6772be94f703f838, &exec_6772be94f703f838, 0x00000d3b },
		{ 0x02e6d1030c0fa33d, &exec_02e6d1030c0fa33d, 0x00003b33 },
		{ 0xd2759436e2ba1018, &exec_d2759436e2ba1018, 0x00000483 },
		{ 0x7179071a71fcc051, &exec_7179071a71fcc051, 0x0000214b },
		{ 0xab7ba7cd4c266d8f, &exec_ab7ba7cd4c266d8f, 0x00000488 },
		{ 0xf1a94765729a0035, &exec_f1a94765729a0035, 0x0000097f },
		{ 0x68808ba3d14a7b8c, &exec_68808ba3d14a7b8c, 0x0000048b },
		{ 0x3bb79e74e524a2e3, &exec_3bb79e74e524a2e3, 0x000008fb },
		{ 0xc72ec87909f459bc, &exec_c72ec87909f459bc, 0x0000084b },
		{ 0xad32857904412af6, &exec_ad32857904412af6, 0x00003473 },
		{ 0x227fb6096e5a9ea2, &exec_227fb6096e5a9ea2, 0x000007b8 },
		{ 0x0d70da692da2bf50, &exec_0d70da692da2bf50, 0x00000abd },
		{ 0xba8b58884f9dd58b, &exec_ba8b58884f9dd58b, 0x00000852 },
		{ 0x1829ee42eb32f093, &exec_1829ee42eb32f093, 0x0000049b },
		{ 0x3a8b7744cdc57205, &exec_3a8b7744cdc57205, 0x00004050 },
		{ 0xca0f4e38b1572bd3, &exec_ca0f4e38b1572bd3, 0x00003a8d },
		{ 0xc46c772b65fb0305, &exec_c46c772b65fb0305, 0x000029b0 },
		{ 0x06b464d59c555a2e, &exec_06b464d59c555a2e, 0x000022aa },
		{ 0xf743198ea2d4e886, &exec_f743198ea2d4e886, 0x000013c5 },
		{ 0xf2352f71016fabb9, &exec_f2352f71016fabb9, 0x00002388 },
		{ 0x4e53c028a83440a2, &exec_4e53c028a83440a2, 0x0000049d },
		{ 0xf42b0aa71858bcea, &exec_f42b0aa71858bcea, 0x00004544 },
		{ 0x718243e8d316f285, &exec_718243e8d316f285, 0x000004ac },
		{ 0x1a92082581a357e7, &exec_1a92082581a357e7, 0x000004b0 },
		{ 0x93ff66d8e2b23275, &exec_93ff66d8e2b23275, 0x000019d7 },
		{ 0x427edbd278567eb3, &exec_427edbd278567eb3, 0x000014ad },
		{ 0xd0180d99603d4a84, &exec_d0180d99603d4a84, 0x000004b2 },
		{ 0x99a9ae02df89e560, &exec_99a9ae02df89e560, 0x0000145c },
		{ 0xa6206dbf6d4ae224, &exec_a6206dbf6d4ae224, 0x00000b50 },
		{ 0xb6d84d008bc79dfa, &exec_b6d84d008bc79dfa, 0x0000130b },
		{ 0xf993e2c950b61dc4, &exec_f993e2c950b61dc4, 0x00000eed },
		{ 0xc32442f42fe35230, &exec_c32442f42fe35230, 0x00001299 },
		{ 0x442c82d356b8e609, &exec_442c82d356b8e609, 0x0000499a },
		{ 0x3ffcfbef2f8ba5e2, &exec_3ffcfbef2f8ba5e2, 0x000004b5 },
		{ 0x01a097f09a4caf99, &exec_01a097f09a4caf99, 0x00002d02 },
		{ 0xd62a70f167ab9655, &exec_d62a70f167ab9655, 0x00002d50 },
		{ 0xdeaf35f6664b12ef, &exec_deaf35f6664b12ef, 0x000004b9 },
		{ 0x13d332bedc8b49ec, &exec_13d332bedc8b49ec, 0x00002763 },
		{ 0xfe747d60a2cbc8dc, &exec_fe747d60a2cbc8dc, 0x00004886 },
		{ 0xe9493ad665f4c304, &exec_e9493ad665f4c304, 0x000004bd },
		{ 0x6ac201f1221a355e, &exec_6ac201f1221a355e, 0x00001483 },
		{ 0xaa7eca22555fa170, &exec_aa7eca22555fa170, 0x000004c1 },
		{ 0xce8c9b149325e137, &exec_ce8c9b149325e137, 0x000019fb },
		{ 0x93c48e8fbaec0863, &exec_93c48e8fbaec0863, 0x000004cb },
		{ 0x25c8461a92c59946, &exec_25c8461a92c59946, 0x000004d0 },
		{ 0x6e54e4f6318abc2a, &exec_6e54e4f6318abc2a, 0x0000140a },
		{ 0xad99257880de99af, &exec_ad99257880de99af, 0x00004799 },
		{ 0x0a367d04d20748f1, &exec_0a367d04d20748f1, 0x00002043 },
		{ 0xe35d6b9613088afa, &exec_e35d6b9613088afa, 0x000004d6 },
		{ 0x055c39f57eaae46e, &exec_055c39f57eaae46e, 0x00000637 },
		{ 0x9730ddaad5f5f68c, &exec_9730ddaad5f5f68c, 0x000004da },
		{ 0x80d5dac38729924d, &exec_80d5dac38729924d, 0x000004e0 },
		{ 0xee10c93b5f2576cc, &exec_ee10c93b5f2576cc, 0x0000470e },
		{ 0xc7cb92f88b80895e, &exec_c7cb92f88b80895e, 0x000008cc },
		{ 0x173e5c9aed425d43, &exec_173e5c9aed425d43, 0x000007c4 },
		{ 0x70cb571e5744677b, &exec_70cb571e5744677b, 0x0000424f },
		{ 0x0a59572dc1d86040, &exec_0a59572dc1d86040, 0x00001ddc },
		{ 0x5d81c04b5c85acb2, &exec_5d81c04b5c85acb2, 0x000004e9 },
		{ 0x1c97a03b944ee211, &exec_1c97a03b944ee211, 0x000004ec },
		{ 0x5c680410073294ce, &exec_5c680410073294ce, 0x000004ee },
		{ 0x642359ab7a2a0a33, &exec_642359ab7a2a0a33, 0x000004f9 },
		{ 0x1e208ec808e114a5, &exec_1e208ec808e114a5, 0x000004fd },
		{ 0xfb8109f2b1829c5f, &exec_fb8109f2b1829c5f, 0x000049ac },
		{ 0x5ad42679c09f9967, &exec_5ad42679c09f9967, 0x000022d6 },
		{ 0xce585da656f83269, &exec_ce585da656f83269, 0x000008c8 },
		{ 0x071ccedf28bc6ec4, &exec_071ccedf28bc6ec4, 0x00000742 },
		{ 0x87a8098cc6f7f0a8, &exec_87a8098cc6f7f0a8, 0x00000d93 },
		{ 0x2ece8a4f24dede3e, &exec_2ece8a4f24dede3e, 0x00003ee3 },
		{ 0x56f5dc5536c3911e, &exec_56f5dc5536c3911e, 0x00000512 },
		{ 0x586ed1f35493f2b5, &exec_586ed1f35493f2b5, 0x00001074 },
		{ 0xb69b2ad2a0eea227, &exec_b69b2ad2a0eea227, 0x00000f40 },
		{ 0xb95a13d0aa3b19f4, &exec_b95a13d0aa3b19f4, 0x00000d17 },
		{ 0x22b33148df1d26ae, &exec_22b33148df1d26ae, 0x00000517 },
		{ 0xdfef88008b622fda, &exec_dfef88008b622fda, 0x00002504 },
		{ 0xa733e4b1393f6bb4, &exec_a733e4b1393f6bb4, 0x0000100d },
		{ 0x95f02644d544fb47, &exec_95f02644d544fb47, 0x00002478 },
		{ 0xb360067f6af983b6, &exec_b360067f6af983b6, 0x0000346b },
		{ 0x21b65887a97975bd, &exec_21b65887a97975bd, 0x0000051d },
		{ 0xf826e6768ea3536d, &exec_f826e6768ea3536d, 0x00000524 },
		{ 0xd0e1f39a0eb55ce1, &exec_d0e1f39a0eb55ce1, 0x00000529 },
		{ 0xdcc0f3b172817d5b, &exec_dcc0f3b172817d5b, 0x0000409a },
		{ 0xaa35d596a53e1cd4, &exec_aa35d596a53e1cd4, 0x0000052d },
		{ 0xa7f1920642361c1b, &exec_a7f1920642361c1b, 0x00001ced },
		{ 0x40bad60eb4ed220b, &exec_40bad60eb4ed220b, 0x00003202 },
		{ 0xdfed20d43071f43a, &exec_dfed20d43071f43a, 0x0000342e },
		{ 0x0ca6177b16bb678b, &exec_0ca6177b16bb678b, 0x00003507 },
		{ 0x71f17afe9c530c78, &exec_71f17afe9c530c78, 0x00001859 },
		{ 0x1c490b3e6768d773, &exec_1c490b3e6768d773, 0x00000533 },
		{ 0x1e0792c262116b35, &exec_1e0792c262116b35, 0x00000538 },
		{ 0x3d6a03bf9e0d0616, &exec_3d6a03bf9e0d0616, 0x0000053c },
		{ 0x8a7aa6fec91e17f7, &exec_8a7aa6fec91e17f7, 0x00000540 },
		{ 0xad2d1afc8e4c1365, &exec_ad2d1afc8e4c1365, 0x00003ed0 },
		{ 0x32c68ff07a32b88b, &exec_32c68ff07a32b88b, 0x00000544 },
		{ 0xd3f24a4eacf4b7c3, &exec_d3f24a4eacf4b7c3, 0x000045e8 },
		{ 0x87d84bb3cec0435d, &exec_87d84bb3cec0435d, 0x0000054b },
		{ 0xf4c8ad52d60c7e56, &exec_f4c8ad52d60c7e56, 0x0000054d },
		{ 0x5953ad97cff509a4, &exec_5953ad97cff509a4, 0x00001b1b },
		{ 0x2d2bb82e3cfbc9ef, &exec_2d2bb82e3cfbc9ef, 0x00001a9c },
		{ 0xb7d0d0c2ca4b17d7, &exec_b7d0d0c2ca4b17d7, 0x00000552 },
		{ 0x37c00d851684b4d1, &exec_37c00d851684b4d1, 0x00001e0e },
		{ 0x1077b6c417741741, &exec_1077b6c417741741, 0x00002194 },
		{ 0x16c203fc64bad39e, &exec_16c203fc64bad39e, 0x00000560 },
		{ 0x1248b3cb284a5ef0, &exec_1248b3cb284a5ef0, 0x00000622 },
		{ 0x84ea4f929ae6e805, &exec_84ea4f929ae6e805, 0x00000fa4 },
		{ 0x86d93c0493757f7e, &exec_86d93c0493757f7e, 0x00003ebc },
		{ 0xcf21a61a64c6042e, &exec_cf21a61a64c6042e, 0x00000c6d },
		{ 0x68b4ec121a29e45a, &exec_68b4ec121a29e45a, 0x0000139b },
		{ 0x79e67c53acf1ece6, &exec_79e67c53acf1ece6, 0x0000056e },
		{ 0x609e006c838c395e, &exec_609e006c838c395e, 0x00004af9 },
		{ 0x90a1a0d06ac97b45, &exec_90a1a0d06ac97b45, 0x000018ef },
		{ 0x835f847c4e4dc37a, &exec_835f847c4e4dc37a, 0x00000000 },
		{ 0x8664d75dd55477ba, &exec_8664d75dd55477ba, 0x00003118 },
		{ 0xfa0f6cbfe871f153, &exec_fa0f6cbfe871f153, 0x00000e47 },
		{ 0x563f9b020b7491bf, &exec_563f9b020b7491bf, 0x00000b83 },
		{ 0x160ec12feed78df9, &exec_160ec12feed78df9, 0x00000617 },
		{ 0xc8274d2d2956f20d, &exec_c8274d2d2956f20d, 0x0000210b },
		{ 0xb72afcde1deab629, &exec_b72afcde1deab629, 0x00001db4 },
		{ 0x74d48bd4e225c031, &exec_74d48bd4e225c031, 0x00002724 },
		{ 0x7d5f86df31cd7ba1, &exec_7d5f86df31cd7ba1, 0x00000581 },
		{ 0x28d92de62eef51e1, &exec_28d92de62eef51e1, 0x00000589 },
		{ 0xc287fdb71328439e, &exec_c287fdb71328439e, 0x000014bd },
		{ 0x5c0ae6feca1495b5, &exec_5c0ae6feca1495b5, 0x00000591 },
		{ 0x9f0f177245b0936f, &exec_9f0f177245b0936f, 0x00000000 },
		{ 0x9a440c9efd212575, &exec_9a440c9efd212575, 0x000007ed },
		{ 0x425573b1cd3eb000, &exec_425573b1cd3eb000, 0x00000000 },
		{ 0xd1a7d90ce98504f4, &exec_d1a7d90ce98504f4, 0x00000af9 },
		{ 0x8f933f0256b98239, &exec_8f933f0256b98239, 0x00000b6e },
		{ 0x5e3c0827687eb981, &exec_5e3c0827687eb981, 0x000005d3 },
		{ 0xfbb326e95af4c77e, &exec_fbb326e95af4c77e, 0x000006d5 },
		{ 0xcc1dfc4b74c6dec8, &exec_cc1dfc4b74c6dec8, 0x000031fa },
		{ 0x617acf70bea2fc40, &exec_617acf70bea2fc40, 0x000005a3 },
		{ 0x912e7efe163b2af6, &exec_912e7efe163b2af6, 0x00001333 },
		{ 0x615aaa904bb77af8, &exec_615aaa904bb77af8, 0x000005a7 },
		{ 0x62760e44f130ed24, &exec_62760e44f130ed24, 0x000005aa },
		{ 0x0433b91405021360, &exec_0433b91405021360, 0x00000695 },
		{ 0x6d61b12de06de748, &exec_6d61b12de06de748, 0x00002f2f },
		{ 0x4ea3bff2e43eff89, &exec_4ea3bff2e43eff89, 0x000005b0 },
		{ 0x6a3d5249058642d5, &exec_6a3d5249058642d5, 0x000031bf },
		{ 0xe68433990b823ac4, &exec_e68433990b823ac4, 0x000005b3 },
		{ 0x8b51b64404c11505, &exec_8b51b64404c11505, 0x00000710 },
		{ 0xa7afd602d86731bc, &exec_a7afd602d86731bc, 0x0000207c },
		{ 0xcb5c310298bdd61a, &exec_cb5c310298bdd61a, 0x00000ff6 },
		{ 0x4cf0f28907479d3f, &exec_4cf0f28907479d3f, 0x000007eb },
		{ 0x7c75a03b03109565, &exec_7c75a03b03109565, 0x00001197 },
		{ 0xd9368f181a016842, &exec_d9368f181a016842, 0x000005ba },
		{ 0x8b873cc026c6eaf7, &exec_8b873cc026c6eaf7, 0x0000197b },
		{ 0x332e8d1fdd41605f, &exec_332e8d1fdd41605f, 0x00004953 },
		{ 0x63338c6e24130847, &exec_63338c6e24130847, 0x00000e6c },
		{ 0xd4aff603ad8b46fd, &exec_d4aff603ad8b46fd, 0x00001f98 },
		{ 0x665429fc1c4e64e2, &exec_665429fc1c4e64e2, 0x00000c1f },
		{ 0x86cb5e6fe7bca372, &exec_86cb5e6fe7bca372, 0x00000fbc },
		{ 0xdf8fc857338c6091, &exec_df8fc857338c6091, 0x000006c4 },
		{ 0x377a8ec23898c6e4, &exec_377a8ec23898c6e4, 0x0000108f },
		{ 0x024dd418128bf885, &exec_024dd418128bf885, 0x00000cfe },
		{ 0x44a5005276b67f6e, &exec_44a5005276b67f6e, 0x00000960 },
		{ 0x53ae20f597c76438, &exec_53ae20f597c76438, 0x00000000 },
		{ 0x80b9302638d275b7, &exec_80b9302638d275b7, 0x00001976 },
		{ 0x5de3b56555482683, &exec_5de3b56555482683, 0x00004037 },
		{ 0x625a9efdf84703e5, &exec_625a9efdf84703e5, 0x00004aa5 },
		{ 0x7a90c4fa01a72779, &exec_7a90c4fa01a72779, 0x00004605 },
		{ 0xaa48ff00eb7cf96f, &exec_aa48ff00eb7cf96f, 0x000005c8 },
		{ 0x5cfd482db125651b, &exec_5cfd482db125651b, 0x0000389d },
		{ 0x3ac0fd7cb43cd6fd, &exec_3ac0fd7cb43cd6fd, 0x000010f6 },
		{ 0xee53363f14691c63, &exec_ee53363f14691c63, 0x000005d9 },
		{ 0xed21ebc42ab71b9f, &exec_ed21ebc42ab71b9f, 0x00001c0f },
		{ 0x47e11be5d42554af, &exec_47e11be5d42554af, 0x000005e2 },
		{ 0x23c89df8a99b3bd2, &exec_23c89df8a99b3bd2, 0x0000224b },
		{ 0x356df67423bfcf62, &exec_356df67423bfcf62, 0x000005e4 },
		{ 0x5551c131e39a8c45, &exec_5551c131e39a8c45, 0x000029f6 },
		{ 0x9e5d4ce5d97a8adc, &exec_9e5d4ce5d97a8adc, 0x00000b0b },
		{ 0xa3cf420b1d79d383, &exec_a3cf420b1d79d383, 0x00000000 },
		{ 0xadd81c90e9ec254a, &exec_add81c90e9ec254a, 0x000005ea },
		{ 0x50f4d920df5321e9, &exec_50f4d920df5321e9, 0x000005f0 },
		{ 0x41f88871dd800fc9, &exec_41f88871dd800fc9, 0x00001ba0 },
		{ 0xb8109004d9b38e93, &exec_b8109004d9b38e93, 0x0000330c },
		{ 0xf6c0e8b934fb166b, &exec_f6c0e8b934fb166b, 0x000028c2 },
		{ 0xc1fcd58997e59ac6, &exec_c1fcd58997e59ac6, 0x000010f3 },
		{ 0xcfff21efd99f1c93, &exec_cfff21efd99f1c93, 0x00000f15 },
		{ 0x2a7eecd991f03a11, &exec_2a7eecd991f03a11, 0x000005f3 },
		{ 0x595f830370562fc7, &exec_595f830370562fc7, 0x00004a15 },
		{ 0x4bba71220f53836a, &exec_4bba71220f53836a, 0x000005f9 },
		{ 0x0ab23f6de97b0c31, &exec_0ab23f6de97b0c31, 0x00004567 },
		{ 0xa80a39c1e395b673, &exec_a80a39c1e395b673, 0x00001dcf },
		{ 0x30cd6552880a6a92, &exec_30cd6552880a6a92, 0x000021f4 },
		{ 0xda62b2da7652c9e9, &exec_da62b2da7652c9e9, 0x000005fb },
		{ 0x33c3399562dbb140, &exec_33c3399562dbb140, 0x00000839 },
		{ 0x087613b03e5a813e, &exec_087613b03e5a813e, 0x00000676 },
		{ 0x11ab7a68d7eaa6a2, &exec_11ab7a68d7eaa6a2, 0x000023d2 },
		{ 0xa6eca69c9ada5724, &exec_a6eca69c9ada5724, 0x00004473 },
		{ 0x352973c638b65826, &exec_352973c638b65826, 0x00000606 },
		{ 0x09dbdf9c974ed997, &exec_09dbdf9c974ed997, 0x00001bcf },
		{ 0x8b55711493d7dd03, &exec_8b55711493d7dd03, 0x0000177f },
		{ 0x9736dfad101a410b, &exec_9736dfad101a410b, 0x0000060c },
		{ 0x840d8b3ee8f55e48, &exec_840d8b3ee8f55e48, 0x00000f39 },
		{ 0x4c1d1842335f0355, &exec_4c1d1842335f0355, 0x0000227a },
		{ 0x903fe542dcbf90fa, &exec_903fe542dcbf90fa, 0x000035de },
		{ 0xc12fe25c7c63d04e, &exec_c12fe25c7c63d04e, 0x0000112b },
		{ 0xf454a389d3b77828, &exec_f454a389d3b77828, 0x00000612 },
		{ 0x7a382944c208d972, &exec_7a382944c208d972, 0x0000061f },
		{ 0xb616c7f98b3bd544, &exec_b616c7f98b3bd544, 0x00000724 },
		{ 0x03261d9493c57f0c, &exec_03261d9493c57f0c, 0x00000628 },
		{ 0x4acca5509301c64d, &exec_4acca5509301c64d, 0x00000a81 },
		{ 0x78d0cd97a627dd04, &exec_78d0cd97a627dd04, 0x000006b1 },
		{ 0xd2c8d2bce559f0aa, &exec_d2c8d2bce559f0aa, 0x00002546 },
		{ 0xf0f3845cd0fa17e8, &exec_f0f3845cd0fa17e8, 0x00002d38 },
		{ 0xd3a3509095a39444, &exec_d3a3509095a39444, 0x00003154 },
		{ 0x35bb62f14a8f5e6e, &exec_35bb62f14a8f5e6e, 0x00000632 },
		{ 0x584dd224bfa6dcd0, &exec_584dd224bfa6dcd0, 0x00001d1f },
		{ 0x202204b44eaa70bc, &exec_202204b44eaa70bc, 0x0000063b },
		{ 0xb94616dd4290c662, &exec_b94616dd4290c662, 0x00000642 },
		{ 0xe03b392347fb3b09, &exec_e03b392347fb3b09, 0x00003073 },
		{ 0x29f0259e42051361, &exec_29f0259e42051361, 0x00000811 },
		{ 0x258750df360e07f6, &exec_258750df360e07f6, 0x00000967 },
		{ 0xdb4f62a2355608c7, &exec_db4f62a2355608c7, 0x00000000 },
		{ 0x47fb10ece6e9d0d0, &exec_47fb10ece6e9d0d0, 0x00000648 },
		{ 0xa5b286147bdeab24, &exec_a5b286147bdeab24, 0x000008be },
		{ 0xc5f29d3253d92555, &exec_c5f29d3253d92555, 0x00000650 },
		{ 0x597a4a08ffd9272b, &exec_597a4a08ffd9272b, 0x00004223 },
		{ 0x44ac4b1e873a69ce, &exec_44ac4b1e873a69ce, 0x00003395 },
		{ 0x580c9304c69bd205, &exec_580c9304c69bd205, 0x00001d8e },
		{ 0x96501731d68fc3c3, &exec_96501731d68fc3c3, 0x00000659 },
		{ 0x9eb733b98f6b996f, &exec_9eb733b98f6b996f, 0x0000065d },
		{ 0x1c06ab226438cff9, &exec_1c06ab226438cff9, 0x00000f2a },
		{ 0x81013e0dbe15a600, &exec_81013e0dbe15a600, 0x00000660 },
		{ 0xb942e6f68ece661c, &exec_b942e6f68ece661c, 0x00000665 },
		{ 0x70f56a4fde641019, &exec_70f56a4fde641019, 0x00001a7c },
		{ 0x799efa607c492440, &exec_799efa607c492440, 0x0000095b },
		{ 0x8c90e123ae99a7e4, &exec_8c90e123ae99a7e4, 0x0000066d },
		{ 0x8f32cf4342f2799a, &exec_8f32cf4342f2799a, 0x00000671 },
		{ 0x8ae6f2a1bff1d4aa, &exec_8ae6f2a1bff1d4aa, 0x000043cb },
		{ 0xa8a72974f6a75e48, &exec_a8a72974f6a75e48, 0x0000067a },
		{ 0x7fa90bdafc40314b, &exec_7fa90bdafc40314b, 0x0000142d },
		{ 0xbd99898380702ff0, &exec_bd99898380702ff0, 0x00000f56 },
		{ 0xc440adfffaffe3e8, &exec_c440adfffaffe3e8, 0x0000067f },
		{ 0x20a3b4a805c3ed68, &exec_20a3b4a805c3ed68, 0x00002382 },
		{ 0x322b9af77ba61164, &exec_322b9af77ba61164, 0x00000684 },
		{ 0x7b9a381e6cc95535, &exec_7b9a381e6cc95535, 0x00000688 },
		{ 0x64c5f5ef04f64815, &exec_64c5f5ef04f64815, 0x0000068b },
		{ 0x377d861f7fcbd107, &exec_377d861f7fcbd107, 0x000034fc },
		{ 0x31a308e7dea4a285, &exec_31a308e7dea4a285, 0x0000134d },
		{ 0x7a83863fad19d9e7, &exec_7a83863fad19d9e7, 0x0000069a },
		{ 0x707b3eb14c5a8e65, &exec_707b3eb14c5a8e65, 0x000006a4 },
		{ 0x5d5e606a8fbdfb0f, &exec_5d5e606a8fbdfb0f, 0x000009db },
		{ 0x7e1abfa03a4afeff, &exec_7e1abfa03a4afeff, 0x000025e8 },
		{ 0x7ade06e89f862e47, &exec_7ade06e89f862e47, 0x000006b3 },
		{ 0x5c69965f2f16e99a, &exec_5c69965f2f16e99a, 0x00003e18 },
		{ 0xc5a432d990287d35, &exec_c5a432d990287d35, 0x000006b5 },
		{ 0x2f63a1842fc03578, &exec_2f63a1842fc03578, 0x000012b7 },
		{ 0xd7c6f1efb61275e5, &exec_d7c6f1efb61275e5, 0x00003793 },
		{ 0x67d0e47bf8cebd6a, &exec_67d0e47bf8cebd6a, 0x00000000 },
		{ 0xd1ffe68d77c2af44, &exec_d1ffe68d77c2af44, 0x000006c0 },
		{ 0x4d721ec09a99b567, &exec_4d721ec09a99b567, 0x000006cb },
		{ 0xa4bc096e7653d63a, &exec_a4bc096e7653d63a, 0x00003827 },
		{ 0x119be59bc9aa1fd7, &exec_119be59bc9aa1fd7, 0x00001cd8 },
		{ 0x1480de5b9a5a8f5a, &exec_1480de5b9a5a8f5a, 0x00000f1f },
		{ 0x827906f4c11c4167, &exec_827906f4c11c4167, 0x000006cd },
		{ 0x3bf3a285b187d0a0, &exec_3bf3a285b187d0a0, 0x00000000 },
		{ 0xe4aeaadfbbd69a07, &exec_e4aeaadfbbd69a07, 0x00000b04 },
		{ 0x8394d5e9ec15d48b, &exec_8394d5e9ec15d48b, 0x000006d7 },
		{ 0x5db6241baa519218, &exec_5db6241baa519218, 0x00001084 },
		{ 0x1e8fab82c34a73db, &exec_1e8fab82c34a73db, 0x00001005 },
		{ 0x69adf6ef3dcae899, &exec_69adf6ef3dcae899, 0x00001fcf },
		{ 0xd6ff742743574d93, &exec_d6ff742743574d93, 0x000006da },
		{ 0x70f38d6656dc8480, &exec_70f38d6656dc8480, 0x00001779 },
		{ 0x82a48e7af638dba6, &exec_82a48e7af638dba6, 0x000006df },
		{ 0x2f44975932f72e17, &exec_2f44975932f72e17, 0x000007cc },
		{ 0xf185d5f2631a7647, &exec_f185d5f2631a7647, 0x00002326 },
		{ 0xe7df5ec30b730503, &exec_e7df5ec30b730503, 0x000006e9 },
		{ 0x588649f81ca53015, &exec_588649f81ca53015, 0x00001f48 },
		{ 0xdcaa58163aef2ef2, &exec_dcaa58163aef2ef2, 0x00000801 },
		{ 0x4d15b1e1b4e26327, &exec_4d15b1e1b4e26327, 0x0000114c },
		{ 0xed6f16cf202bd12d, &exec_ed6f16cf202bd12d, 0x000006ef },
		{ 0x6851266919f3f6b9, &exec_6851266919f3f6b9, 0x000006fe },
		{ 0xd6b933347b17faaa, &exec_d6b933347b17faaa, 0x00000708 },
		{ 0xfbe99c462fa4ca2a, &exec_fbe99c462fa4ca2a, 0x0000071a },
		{ 0x0a1d26423d9d590f, &exec_0a1d26423d9d590f, 0x00004725 },
		{ 0x3c1ea38e04cf4867, &exec_3c1ea38e04cf4867, 0x0000071d },
		{ 0x1878a72ffa36af19, &exec_1878a72ffa36af19, 0x0000071f },
		{ 0xe2aeddb6452b2619, &exec_e2aeddb6452b2619, 0x00000733 },
		{ 0xc325c015861678c8, &exec_c325c015861678c8, 0x000021dd },
		{ 0x6e0fd2f9bea466d6, &exec_6e0fd2f9bea466d6, 0x000011cc },
		{ 0xcdcb89b9719c619e, &exec_cdcb89b9719c619e, 0x000040b5 },
		{ 0x004b8523e9f2888a, &exec_004b8523e9f2888a, 0x00000721 },
		{ 0x755feedb36abb0a0, &exec_755feedb36abb0a0, 0x00001200 },
		{ 0x95c4349e91816f3f, &exec_95c4349e91816f3f, 0x0000072c },
		{ 0xe3bfd31b7c7d5d06, &exec_e3bfd31b7c7d5d06, 0x00003185 },
		{ 0x2f71af659b056e1b, &exec_2f71af659b056e1b, 0x00004619 },
		{ 0xdc4332ea69bc2f6c, &exec_dc4332ea69bc2f6c, 0x00000894 },
		{ 0x908d024c0b79f285, &exec_908d024c0b79f285, 0x00004b7e },
		{ 0xe7813a8d06c0fcf5, &exec_e7813a8d06c0fcf5, 0x00002de1 },
		{ 0xf90b9a0e619c0e57, &exec_f90b9a0e619c0e57, 0x000034ea },
		{ 0xd692d67eb4320b1d, &exec_d692d67eb4320b1d, 0x00000739 },
		{ 0x0c69564434003351, &exec_0c69564434003351, 0x000007fd },
		{ 0x96d8132e5f7e7980, &exec_96d8132e5f7e7980, 0x00000745 },
		{ 0x9d1353a009e72e1f, &exec_9d1353a009e72e1f, 0x0000074c },
		{ 0xa113d6746e21e7d8, &exec_a113d6746e21e7d8, 0x0000074f },
		{ 0x1af47f699696c29b, &exec_1af47f699696c29b, 0x0000368a },
		{ 0x73760ae4c1e9f08f, &exec_73760ae4c1e9f08f, 0x000023b6 },
		{ 0x7c3cbd01e2bd9d2a, &exec_7c3cbd01e2bd9d2a, 0x00000758 },
		{ 0xfbbc30fe7d846bad, &exec_fbbc30fe7d846bad, 0x000027bb },
		{ 0xd540f5b13efb35b6, &exec_d540f5b13efb35b6, 0x0000075b },
		{ 0x946d8b3885511c89, &exec_946d8b3885511c89, 0x00000e41 },
		{ 0xbbe51ad4cc721ab1, &exec_bbe51ad4cc721ab1, 0x00000a3e },
		{ 0xfe4f710d29a4495e, &exec_fe4f710d29a4495e, 0x00001d24 },
		{ 0x42c01c98a4018f6c, &exec_42c01c98a4018f6c, 0x000048c0 },
		{ 0x5cc1e8e3198985d2, &exec_5cc1e8e3198985d2, 0x00002c7f },
		{ 0x064a3e9231b8993d, &exec_064a3e9231b8993d, 0x00000766 },
		{ 0x0fe04ee06cb3ba5f, &exec_0fe04ee06cb3ba5f, 0x000031d9 },
		{ 0x407eb7e21563ba2d, &exec_407eb7e21563ba2d, 0x0000239a },
		{ 0x5ca20fae05496ab4, &exec_5ca20fae05496ab4, 0x00004118 },
		{ 0x96fa2fd05387fd84, &exec_96fa2fd05387fd84, 0x00000774 },
		{ 0xa6944f5cffc34f5d, &exec_a6944f5cffc34f5d, 0x000036f5 },
		{ 0x25bdd1a905823f84, &exec_25bdd1a905823f84, 0x00000785 },
		{ 0xe4d026c7e5c54592, &exec_e4d026c7e5c54592, 0x0000236a },
		{ 0x8af4e757ed96c7c8, &exec_8af4e757ed96c7c8, 0x0000078c },
		{ 0x258746ffec5aab50, &exec_258746ffec5aab50, 0x00000790 },
		{ 0xf0f0cc0fa0b37f57, &exec_f0f0cc0fa0b37f57, 0x00000a0c },
		{ 0x83c72e8e2c3aec40, &exec_83c72e8e2c3aec40, 0x00004527 },
		{ 0x24033ef6122aa5c0, &exec_24033ef6122aa5c0, 0x000031b8 },
		{ 0xa93d6017eca79a70, &exec_a93d6017eca79a70, 0x000020c7 },
		{ 0x84224d4b0fa4be79, &exec_84224d4b0fa4be79, 0x00000795 },
		{ 0x93c965e5289d941b, &exec_93c965e5289d941b, 0x000016c7 },
		{ 0x0185d1d08749cef9, &exec_0185d1d08749cef9, 0x00000798 },
		{ 0x25d344f78da7d1f9, &exec_25d344f78da7d1f9, 0x00001b5f },
		{ 0x65c2234f8347b31d, &exec_65c2234f8347b31d, 0x0000079a },
		{ 0xd379f33af6c47114, &exec_d379f33af6c47114, 0x0000079e },
		{ 0x48bce13a0f4f6707, &exec_48bce13a0f4f6707, 0x00003db6 },
		{ 0x4af457d46f9b68b4, &exec_4af457d46f9b68b4, 0x000007a5 },
		{ 0x49d3decc6714b969, &exec_49d3decc6714b969, 0x00001adc },
		{ 0x55450db708714c48, &exec_55450db708714c48, 0x000007a9 },
		{ 0x633cf90c39809881, &exec_633cf90c39809881, 0x0000109f },
		{ 0xd083788e7b8fac1b, &exec_d083788e7b8fac1b, 0x000007af },
		{ 0x276d17ace26b3ba8, &exec_276d17ace26b3ba8, 0x00000edb },
		{ 0xfff2b9ff4f148607, &exec_fff2b9ff4f148607, 0x00000c83 },
		{ 0x515b9a040aaa571c, &exec_515b9a040aaa571c, 0x0000082f },
		{ 0x6cdd513f34f55f39, &exec_6cdd513f34f55f39, 0x00000957 },
		{ 0x51bfea437da80d05, &exec_51bfea437da80d05, 0x00001374 },
		{ 0xe042e7a570891165, &exec_e042e7a570891165, 0x000012bb },
		{ 0xee7c8ca9e4a82560, &exec_ee7c8ca9e4a82560, 0x000007d3 },
		{ 0x6f94a5d76573f919, &exec_6f94a5d76573f919, 0x000007d7 },
		{ 0xe98dc49c1f3ae493, &exec_e98dc49c1f3ae493, 0x0000119c },
		{ 0x06d8b1b656c7e01c, &exec_06d8b1b656c7e01c, 0x000007dd },
		{ 0x0d44d7a09b4d9834, &exec_0d44d7a09b4d9834, 0x00004786 },
		{ 0xf3548d4e78066474, &exec_f3548d4e78066474, 0x000007df },
		{ 0xcf865ba6bf3279f5, &exec_cf865ba6bf3279f5, 0x00000fd3 },
		{ 0x070da2c87090d01f, &exec_070da2c87090d01f, 0x000007e5 },
		{ 0xf2c896300f08953b, &exec_f2c896300f08953b, 0x00000fb8 },
		{ 0x318d5321dfc6f140, &exec_318d5321dfc6f140, 0x000007f4 },
		{ 0xf0e44c594886c738, &exec_f0e44c594886c738, 0x00002c2a },
		{ 0xf4f9ebc30f81ab63, &exec_f4f9ebc30f81ab63, 0x00002329 },
		{ 0xa1a9a5653cd9da41, &exec_a1a9a5653cd9da41, 0x00002bf0 },
		{ 0xa0fca3b4ba8bde88, &exec_a0fca3b4ba8bde88, 0x00000808 },
		{ 0xf6575081bb51c51d, &exec_f6575081bb51c51d, 0x0000080c },
		{ 0xa77b75453cf76227, &exec_a77b75453cf76227, 0x00003ddf },
		{ 0x6c99d356025ba8a3, &exec_6c99d356025ba8a3, 0x00000819 },
		{ 0xd0b774057d85f20a, &exec_d0b774057d85f20a, 0x00000e89 },
		{ 0x14138a1de7898468, &exec_14138a1de7898468, 0x00001bb5 },
		{ 0x47ab8daf3e2335b6, &exec_47ab8daf3e2335b6, 0x00000824 },
		{ 0xc6131bf33e0494b1, &exec_c6131bf33e0494b1, 0x0000213c },
		{ 0x7667b37c86bb1fb8, &exec_7667b37c86bb1fb8, 0x00004a5a },
		{ 0x8ef2350d2608d167, &exec_8ef2350d2608d167, 0x00000828 },
		{ 0x027b6fe030940036, &exec_027b6fe030940036, 0x0000082b },
		{ 0x90af34758cd74942, &exec_90af34758cd74942, 0x00000832 },
		{ 0xf6602a4426b1f61c, &exec_f6602a4426b1f61c, 0x000015d4 },
		{ 0xdb63ab0b1e7374c5, &exec_db63ab0b1e7374c5, 0x00000ae5 },
		{ 0xad3c76471e894ba1, &exec_ad3c76471e894ba1, 0x00003a81 },
		{ 0xd7ce8b16a0368872, &exec_d7ce8b16a0368872, 0x0000083f },
		{ 0x868daa2420e8f2bd, &exec_868daa2420e8f2bd, 0x000024ac },
		{ 0xcc5a73eca5d01402, &exec_cc5a73eca5d01402, 0x00000c9e },
		{ 0xb8963396a661c9ff, &exec_b8963396a661c9ff, 0x00001cb1 },
		{ 0x4f6871391468e829, &exec_4f6871391468e829, 0x00000c8a },
		{ 0xb7c2fd77a230b978, &exec_b7c2fd77a230b978, 0x00000843 },
		{ 0x76d113f3d5b0708e, &exec_76d113f3d5b0708e, 0x00004a7e },
		{ 0xf2de4add2e98b6ab, &exec_f2de4add2e98b6ab, 0x00000857 },
		{ 0x0caf5a7740718872, &exec_0caf5a7740718872, 0x0000085a },
		{ 0x5a6b17e7f23717e6, &exec_5a6b17e7f23717e6, 0x0000085e },
		{ 0x605c013ff86bac9a, &exec_605c013ff86bac9a, 0x00001311 },
		{ 0x37c642d2b8db2289, &exec_37c642d2b8db2289, 0x0000188b },
		{ 0xa2dec7b0e33c3bb5, &exec_a2dec7b0e33c3bb5, 0x00000de7 },
		{ 0xdcc98d5e1ed86bdc, &exec_dcc98d5e1ed86bdc, 0x00000fe9 },
		{ 0xe1e0d224ef791325, &exec_e1e0d224ef791325, 0x00003537 },
		{ 0x6af7766e1a9d97ca, &exec_6af7766e1a9d97ca, 0x000049a6 },
		{ 0xf634521d1dcced84, &exec_f634521d1dcced84, 0x00002f2c },
		{ 0xf378007a50b23983, &exec_f378007a50b23983, 0x00000866 },
		{ 0xce5a6c3ed442bf74, &exec_ce5a6c3ed442bf74, 0x00004170 },
		{ 0x61cd8ffd4b6e93e5, &exec_61cd8ffd4b6e93e5, 0x00000871 },
		{ 0xa9bf26482031a5e1, &exec_a9bf26482031a5e1, 0x0000185d },
		{ 0xa5abc98d7ee330a0, &exec_a5abc98d7ee330a0, 0x0000271a },
		{ 0x6ce1e73d33519ac5, &exec_6ce1e73d33519ac5, 0x00000875 },
		{ 0x8f993c5d807fc590, &exec_8f993c5d807fc590, 0x0000087a },
		{ 0x6f17ad98f8ebe471, &exec_6f17ad98f8ebe471, 0x000017c4 },
		{ 0x560e37a63912a817, &exec_560e37a63912a817, 0x00000eab },
		{ 0x4a747dc7a20b0169, &exec_4a747dc7a20b0169, 0x0000087c },
		{ 0x94c77ff71ac48eb1, &exec_94c77ff71ac48eb1, 0x000037d1 },
		{ 0x3ce038aeb2afc823, &exec_3ce038aeb2afc823, 0x00002d7f },
		{ 0x70949013e5465d89, &exec_70949013e5465d89, 0x00002e37 },
		{ 0x7d49b351ee36bd96, &exec_7d49b351ee36bd96, 0x000040f3 },
		{ 0x1b309b6e669ce695, &exec_1b309b6e669ce695, 0x00000883 },
		{ 0xb39348b96af87922, &exec_b39348b96af87922, 0x00000889 },
		{ 0xd2652014ed08dc9a, &exec_d2652014ed08dc9a, 0x00003cc0 },
		{ 0xb9461e48bb941fcd, &exec_b9461e48bb941fcd, 0x00000cec },
		{ 0x79b7f3d9e5b83ce1, &exec_79b7f3d9e5b83ce1, 0x00001565 },
		{ 0x91c5343ab853cf1c, &exec_91c5343ab853cf1c, 0x00000896 },
		{ 0xaed95c9773cac598, &exec_aed95c9773cac598, 0x000018ce },
		{ 0x0f0b3877037bf5bd, &exec_0f0b3877037bf5bd, 0x000046fd },
		{ 0x98f16f5a37f10554, &exec_98f16f5a37f10554, 0x0000088f },
		{ 0x1531e2b2c155f8f7, &exec_1531e2b2c155f8f7, 0x000017be },
		{ 0x7433de35cdacb8cc, &exec_7433de35cdacb8cc, 0x00000892 },
		{ 0xe25e6b9cb69768df, &exec_e25e6b9cb69768df, 0x00000898 },
		{ 0xa21cec943949c160, &exec_a21cec943949c160, 0x00002cf8 },
		{ 0x494ca72a54367e13, &exec_494ca72a54367e13, 0x00000fc3 },
		{ 0xca1d06ff009a5e8d, &exec_ca1d06ff009a5e8d, 0x0000089b },
		{ 0xf36b520fcc065e83, &exec_f36b520fcc065e83, 0x0000440c },
		{ 0xa46f78302fbffbba, &exec_a46f78302fbffbba, 0x0000396a },
		{ 0x9ef5e75da25515b4, &exec_9ef5e75da25515b4, 0x00001426 },
		{ 0x4f875abd1e42e23d, &exec_4f875abd1e42e23d, 0x00003e04 },
		{ 0xf4796b25cef7c488, &exec_f4796b25cef7c488, 0x000032ad },
		{ 0x7097ff1442133518, &exec_7097ff1442133518, 0x000008b0 },
		{ 0xe17caec5cf848404, &exec_e17caec5cf848404, 0x00001119 },
		{ 0x1556c389373d9e46, &exec_1556c389373d9e46, 0x000008b5 },
		{ 0xa4e366bce3eb88ab, &exec_a4e366bce3eb88ab, 0x000013ca },
		{ 0xe250e041cd60dd43, &exec_e250e041cd60dd43, 0x0000315b },
		{ 0x8d8d06a30e370581, &exec_8d8d06a30e370581, 0x00000d53 },
		{ 0x2b5e2d41b1af2210, &exec_2b5e2d41b1af2210, 0x000008c0 },
		{ 0xd156b8b60ea021eb, &exec_d156b8b60ea021eb, 0x00000cb9 },
		{ 0x3b7b06f43c5b01ca, &exec_3b7b06f43c5b01ca, 0x000008c4 },
		{ 0x996a4768c66665a5, &exec_996a4768c66665a5, 0x00000b96 },
		{ 0x4e5dfb78c150f98c, &exec_4e5dfb78c150f98c, 0x00003005 },
		{ 0x4540ee81b76b38e6, &exec_4540ee81b76b38e6, 0x00002a13 },
		{ 0xb3dcfc544f344165, &exec_b3dcfc544f344165, 0x0000435e },
		{ 0x662c0128a78e8606, &exec_662c0128a78e8606, 0x00003b43 },
		{ 0x6f8b67be5047b92c, &exec_6f8b67be5047b92c, 0x000046b6 },
		{ 0x3ba412d43f60030a, &exec_3ba412d43f60030a, 0x00000fc7 },
		{ 0x94a03ad90c9c1f05, &exec_94a03ad90c9c1f05, 0x000008e1 },
		{ 0x06b688d3ca0d21ec, &exec_06b688d3ca0d21ec, 0x00004848 },
		{ 0xa74f054dda5bd4f8, &exec_a74f054dda5bd4f8, 0x00003300 },
		{ 0x5eb62c6f0f2ed700, &exec_5eb62c6f0f2ed700, 0x00001378 },
		{ 0x76ab835d37e122f1, &exec_76ab835d37e122f1, 0x00003777 },
		{ 0x4308623da2a43317, &exec_4308623da2a43317, 0x000033c9 },
		{ 0x9d100a0bc33c70b8, &exec_9d100a0bc33c70b8, 0x0000429d },
		{ 0xb53ddc35c5ac3625, &exec_b53ddc35c5ac3625, 0x000008e5 },
		{ 0xc49a32f96e4ea12b, &exec_c49a32f96e4ea12b, 0x00003624 },
		{ 0xb3e8758c2aa74e57, &exec_b3e8758c2aa74e57, 0x000008ee },
		{ 0xd0bbb17b8ca79c24, &exec_d0bbb17b8ca79c24, 0x000008f3 },
		{ 0x8d1d83dc6c517085, &exec_8d1d83dc6c517085, 0x00004184 },
		{ 0xbacae2f5faf8972b, &exec_bacae2f5faf8972b, 0x000010d4 },
		{ 0x6c23e2800adb3762, &exec_6c23e2800adb3762, 0x000008f7 },
		{ 0x0504468377c3c432, &exec_0504468377c3c432, 0x00002485 },
		{ 0x4fcef93b6a1e0c52, &exec_4fcef93b6a1e0c52, 0x00000cd2 },
		{ 0x3214492c8382442d, &exec_3214492c8382442d, 0x00000901 },
		{ 0x4321c65cdf658485, &exec_4321c65cdf658485, 0x00004412 },
		{ 0xb08aeb66a6150647, &exec_b08aeb66a6150647, 0x0000213a },
		{ 0x03321777993be3b1, &exec_03321777993be3b1, 0x00000905 },
		{ 0x5a26e479b9a14a30, &exec_5a26e479b9a14a30, 0x00001674 },
		{ 0xe37811c43f86a77b, &exec_e37811c43f86a77b, 0x000032dd },
		{ 0x5a63e476c4693879, &exec_5a63e476c4693879, 0x000023a7 },
		{ 0x1bf1ae64872f7c19, &exec_1bf1ae64872f7c19, 0x00002741 },
		{ 0xa4e328e743dd4418, &exec_a4e328e743dd4418, 0x0000090b },
		{ 0x5417698e4ee0d539, &exec_5417698e4ee0d539, 0x0000139d },
		{ 0x9e2178b84638e510, &exec_9e2178b84638e510, 0x00002006 },
		{ 0xd5f0d4a4713d947b, &exec_d5f0d4a4713d947b, 0x00002a4e },
		{ 0xc51d180b670e8ad0, &exec_c51d180b670e8ad0, 0x00000a6f },
		{ 0x77a4c2e13698810d, &exec_77a4c2e13698810d, 0x00000914 },
		{ 0x6d34865081666f78, &exec_6d34865081666f78, 0x00000b76 },
		{ 0x2cb8ae55542a7873, &exec_2cb8ae55542a7873, 0x00001d22 },
		{ 0xdb4e5d4ba75ca9c9, &exec_db4e5d4ba75ca9c9, 0x00000bed },
		{ 0x6d52c1c97c655a3e, &exec_6d52c1c97c655a3e, 0x00000923 },
		{ 0x7bca8ab0d3e7a10e, &exec_7bca8ab0d3e7a10e, 0x0000092e },
		{ 0x47ff88f258c22cb8, &exec_47ff88f258c22cb8, 0x00001f1c },
		{ 0xba8a74ef3f3068f3, &exec_ba8a74ef3f3068f3, 0x000010d7 },
		{ 0x64911a4cc3522e03, &exec_64911a4cc3522e03, 0x00000a18 },
		{ 0xc125ef023f1cb989, &exec_c125ef023f1cb989, 0x000040de },
		{ 0x1d0b942d99e9f757, &exec_1d0b942d99e9f757, 0x00000931 },
		{ 0x6d7e78a32e374b56, &exec_6d7e78a32e374b56, 0x000033ef },
		{ 0xcb72b8f5adadf51b, &exec_cb72b8f5adadf51b, 0x00000bf8 },
		{ 0xf79d77d8dd3945ec, &exec_f79d77d8dd3945ec, 0x00001808 },
		{ 0xc733e45c6561e8e0, &exec_c733e45c6561e8e0, 0x00001326 },
		{ 0xb950e2ee456d36eb, &exec_b950e2ee456d36eb, 0x0000093c },
		{ 0x898aa48a88ae88fb, &exec_898aa48a88ae88fb, 0x00004366 },
		{ 0xdc65363f7f83aacf, &exec_dc65363f7f83aacf, 0x00003685 },
		{ 0xbd878d3da20317f1, &exec_bd878d3da20317f1, 0x000018c2 },
		{ 0xf57440cbc8a31517, &exec_f57440cbc8a31517, 0x00003d6e },
		{ 0xb0785c35cbdb1f9a, &exec_b0785c35cbdb1f9a, 0x00000940 },
		{ 0xc3874dbdc7c35987, &exec_c3874dbdc7c35987, 0x00001262 },
		{ 0xac9037e8d992e6c0, &exec_ac9037e8d992e6c0, 0x00000944 },
		{ 0x8974662907df8984, &exec_8974662907df8984, 0x00001a78 },
		{ 0x47db519a2898afe0, &exec_47db519a2898afe0, 0x00001024 },
		{ 0xa8b898fdc0d41247, &exec_a8b898fdc0d41247, 0x0000272e },
		{ 0x443adef9cb093011, &exec_443adef9cb093011, 0x00000949 },
		{ 0x88c867da69e28406, &exec_88c867da69e28406, 0x00001f08 },
		{ 0x5e7c1137cdcbb42d, &exec_5e7c1137cdcbb42d, 0x0000094e },
		{ 0xd73f2559f766b6a4, &exec_d73f2559f766b6a4, 0x00000b57 },
		{ 0xa82c14e36cfb753a, &exec_a82c14e36cfb753a, 0x00000953 },
		{ 0x4cb1c981ed4b8d79, &exec_4cb1c981ed4b8d79, 0x00001b5a },
		{ 0x432094f76ce7d1ea, &exec_432094f76ce7d1ea, 0x00003245 },
		{ 0xb63bf949ac38489b, &exec_b63bf949ac38489b, 0x00003bd0 },
		{ 0xc51262240ffc8400, &exec_c51262240ffc8400, 0x00000965 },
		{ 0xbfe3bf4dbade65f3, &exec_bfe3bf4dbade65f3, 0x0000096b },
		{ 0xf80b1b1aea8c2154, &exec_f80b1b1aea8c2154, 0x000038a3 },
		{ 0x1b24c3d0d8f8c8c1, &exec_1b24c3d0d8f8c8c1, 0x00000970 },
		{ 0xc9ea62ac379ba8a1, &exec_c9ea62ac379ba8a1, 0x00001e47 },
		{ 0xb317952ab0f31856, &exec_b317952ab0f31856, 0x00001b07 },
		{ 0x0625d2ed4006d264, &exec_0625d2ed4006d264, 0x00000982 },
		{ 0xdebc6daa534198fc, &exec_debc6daa534198fc, 0x00000c1a },
		{ 0x5926d3a7bd3c564d, &exec_5926d3a7bd3c564d, 0x00003018 },
		{ 0x4d5c7381bd615e33, &exec_4d5c7381bd615e33, 0x00003b26 },
		{ 0x8727aeb70b1b3106, &exec_8727aeb70b1b3106, 0x00003520 },
		{ 0x980874d94fffdc7a, &exec_980874d94fffdc7a, 0x00002cca },
		{ 0xf5fdf8fac3b91f60, &exec_f5fdf8fac3b91f60, 0x00000990 },
		{ 0xbe53327154c0fd8c, &exec_be53327154c0fd8c, 0x00000faa },
		{ 0x358b451090b1fbcd, &exec_358b451090b1fbcd, 0x0000099a },
		{ 0x806f362632011cd6, &exec_806f362632011cd6, 0x000028c5 },
		{ 0x631638fe374d3cc3, &exec_631638fe374d3cc3, 0x00000000 },
		{ 0xd2e4586c1bab7a35, &exec_d2e4586c1bab7a35, 0x000041f5 },
		{ 0x7eb43441abbbc7a2, &exec_7eb43441abbbc7a2, 0x000009a1 },
		{ 0xf6fff0c42c1e1551, &exec_f6fff0c42c1e1551, 0x000024e6 },
		{ 0x3f171d65c17c2a1a, &exec_3f171d65c17c2a1a, 0x000009a3 },
		{ 0xe65a2f6420704a71, &exec_e65a2f6420704a71, 0x00000df6 },
		{ 0x658ffc8d8fed4a15, &exec_658ffc8d8fed4a15, 0x00000a5f },
		{ 0x735a743338abfc0f, &exec_735a743338abfc0f, 0x000010ea },
		{ 0x90011a410e0fe061, &exec_90011a410e0fe061, 0x000009a7 },
		{ 0x38e7cbe35bcf14ff, &exec_38e7cbe35bcf14ff, 0x000009af },
		{ 0x879fb9ce7214ef42, &exec_879fb9ce7214ef42, 0x0000380c },
		{ 0xdc7092163abe1939, &exec_dc7092163abe1939, 0x00000b09 },
		{ 0x6af4c784193c4cd8, &exec_6af4c784193c4cd8, 0x000009b6 },
		{ 0x97a7bfc63050c031, &exec_97a7bfc63050c031, 0x00000b1b },
		{ 0xd2188b222a7f9eee, &exec_d2188b222a7f9eee, 0x00001e98 },
		{ 0xcc62f123b70bf43a, &exec_cc62f123b70bf43a, 0x00002835 },
		{ 0x66bbc0608c24100e, &exec_66bbc0608c24100e, 0x000009c2 },
		{ 0xfd5cf2b3499cb549, &exec_fd5cf2b3499cb549, 0x000016f8 },
		{ 0x043b3b3a4e44220b, &exec_043b3b3a4e44220b, 0x000009c4 },
		{ 0xdd44c5bd7a909a7e, &exec_dd44c5bd7a909a7e, 0x00001e7a },
		{ 0xa677559ba82e46f8, &exec_a677559ba82e46f8, 0x000043cd },
		{ 0xad06ebc01975dbe4, &exec_ad06ebc01975dbe4, 0x00003ae3 },
		{ 0xe5239886e70099e3, &exec_e5239886e70099e3, 0x000009cc },
		{ 0xd923fd2dd3bd61e9, &exec_d923fd2dd3bd61e9, 0x00000bf4 },
		{ 0xa17a6e9aeec47813, &exec_a17a6e9aeec47813, 0x0000445e },
		{ 0x04fb6cd6618c7674, &exec_04fb6cd6618c7674, 0x00003caa },
		{ 0xff2b115a2a20ad20, &exec_ff2b115a2a20ad20, 0x00003fbe },
		{ 0x968250e37009b02d, &exec_968250e37009b02d, 0x000009d1 },
		{ 0x2b62ccd0d2880dc8, &exec_2b62ccd0d2880dc8, 0x000028d7 },
		{ 0xd295c8240face4bf, &exec_d295c8240face4bf, 0x00001123 },
		{ 0xaecd46ce5dffd698, &exec_aecd46ce5dffd698, 0x000009d6 },
		{ 0xffbda0e77c872627, &exec_ffbda0e77c872627, 0x00000000 },
		{ 0x80d9d6b5b5864f85, &exec_80d9d6b5b5864f85, 0x000020c4 },
		{ 0x02f6deaf0d0e9c43, &exec_02f6deaf0d0e9c43, 0x000047a3 },
		{ 0x57601fb4dabee1c6, &exec_57601fb4dabee1c6, 0x000009e0 },
		{ 0xb10567b24f9d496b, &exec_b10567b24f9d496b, 0x00000000 },
		{ 0xbb07af0b9714458a, &exec_bb07af0b9714458a, 0x0000437f },
		{ 0x43cc056b93681a34, &exec_43cc056b93681a34, 0x000009e2 },
		{ 0x9889856e07676fb4, &exec_9889856e07676fb4, 0x000009e9 },
		{ 0x63eeafdc7117198a, &exec_63eeafdc7117198a, 0x00000be3 },
		{ 0x13889cd85b9654c4, &exec_13889cd85b9654c4, 0x000025de },
		{ 0x73dc565d998ccdf4, &exec_73dc565d998ccdf4, 0x00001aab },
		{ 0x21e19e0fcf675bb5, &exec_21e19e0fcf675bb5, 0x000013ee },
		{ 0x9291bacd3c56da09, &exec_9291bacd3c56da09, 0x00001795 },
		{ 0x050eacea39d0cebb, &exec_050eacea39d0cebb, 0x00004b11 },
		{ 0xc66880e61bc309b4, &exec_c66880e61bc309b4, 0x000009ec },
		{ 0x6eabbda879ce83ee, &exec_6eabbda879ce83ee, 0x000009f3 },
		{ 0x0f8841f03ba1e628, &exec_0f8841f03ba1e628, 0x000012a4 },
		{ 0x00f8ba504c1ec2ad, &exec_00f8ba504c1ec2ad, 0x000009f5 },
		{ 0x4dfd20a5fee134f3, &exec_4dfd20a5fee134f3, 0x000009f9 },
		{ 0xbb0cecd48c9e6f2b, &exec_bb0cecd48c9e6f2b, 0x000009fc },
		{ 0x1e87d85d6db9ff6b, &exec_1e87d85d6db9ff6b, 0x00000a01 },
		{ 0x35cc9ef5a3936759, &exec_35cc9ef5a3936759, 0x000030d5 },
		{ 0x237504230930febd, &exec_237504230930febd, 0x00000a03 },
		{ 0x5f89a339a6d28d30, &exec_5f89a339a6d28d30, 0x000014fc },
		{ 0xea33f45b4baf66ba, &exec_ea33f45b4baf66ba, 0x0000215a },
		{ 0x1f0f7dfaf1d5ad02, &exec_1f0f7dfaf1d5ad02, 0x00000a10 },
		{ 0x05f02fdff8e6eaa5, &exec_05f02fdff8e6eaa5, 0x0000447b },
		{ 0xfc877c27b857b6c2, &exec_fc877c27b857b6c2, 0x00002842 },
		{ 0x0afe9e833c43ab34, &exec_0afe9e833c43ab34, 0x000015f4 },
		{ 0x40d9406c0a3d6954, &exec_40d9406c0a3d6954, 0x00001173 },
		{ 0x74f59a3eafe5003c, &exec_74f59a3eafe5003c, 0x00000a20 },
		{ 0xd30d2a0ed02b013b, &exec_d30d2a0ed02b013b, 0x00000a26 },
		{ 0x88dee4fe77b63531, &exec_88dee4fe77b63531, 0x00000a29 },
		{ 0xc3ad2f3402463ea3, &exec_c3ad2f3402463ea3, 0x00001fbe },
		{ 0xf198f4801343acae, &exec_f198f4801343acae, 0x00000a2b },
		{ 0xff0c31fd724da0be, &exec_ff0c31fd724da0be, 0x00000a2e },
		{ 0x5e562cba95a896cc, &exec_5e562cba95a896cc, 0x000027db },
		{ 0xe5cf76b74736ff64, &exec_e5cf76b74736ff64, 0x000014c6 },
		{ 0x074c9289993145dd, &exec_074c9289993145dd, 0x00000a31 },
		{ 0x1656548f610c2b4b, &exec_1656548f610c2b4b, 0x00001bd2 },
		{ 0xefa231024c1a943a, &exec_efa231024c1a943a, 0x00000a35 },
		{ 0x37895b2bbff29451, &exec_37895b2bbff29451, 0x000032f3 },
		{ 0x19d44a943c8f2863, &exec_19d44a943c8f2863, 0x00000a37 },
		{ 0xcc8e12bf3fa5a971, &exec_cc8e12bf3fa5a971, 0x00000a3a },
		{ 0x23ddb7e90cc643f2, &exec_23ddb7e90cc643f2, 0x00002fad },
		{ 0x57563d58b4490234, &exec_57563d58b4490234, 0x00000a40 },
		{ 0xb9c77c5f78069e62, &exec_b9c77c5f78069e62, 0x00001d17 },
		{ 0xdb8eceb791b910b5, &exec_db8eceb791b910b5, 0x00001063 },
		{ 0x1a33f77b2ff53220, &exec_1a33f77b2ff53220, 0x00000a48 },
		{ 0xaef5e267e35b486c, &exec_aef5e267e35b486c, 0x000041a9 },
		{ 0x0e3219dd14e7b512, &exec_0e3219dd14e7b512, 0x00000a4d },
		{ 0xa5c96eb22508d28b, &exec_a5c96eb22508d28b, 0x00003324 },
		{ 0xa9cc00c745366f29, &exec_a9cc00c745366f29, 0x00000a52 },
		{ 0x58af4ed647d1b724, &exec_58af4ed647d1b724, 0x00000ba5 },
		{ 0x3104a9c6d5b8dd2c, &exec_3104a9c6d5b8dd2c, 0x00002c62 },
		{ 0x14eaed03d219c161, &exec_14eaed03d219c161, 0x00002434 },
		{ 0x324b9929216ed435, &exec_324b9929216ed435, 0x00000a63 },
		{ 0x7b86b9d026c78aa5, &exec_7b86b9d026c78aa5, 0x000024f0 },
		{ 0xbcf7ba7de7a60b5c, &exec_bcf7ba7de7a60b5c, 0x00000a66 },
		{ 0x5243d1f16c667303, &exec_5243d1f16c667303, 0x00000a6b },
		{ 0x8e9f5734085b4b15, &exec_8e9f5734085b4b15, 0x00000fd7 },
		{ 0xa260f19f72369113, &exec_a260f19f72369113, 0x000017a4 },
		{ 0xe0d78c157d7752aa, &exec_e0d78c157d7752aa, 0x000040a8 },
		{ 0xc370b192df9ea8d2, &exec_c370b192df9ea8d2, 0x00001137 },
		{ 0xf14c77e827d9f02b, &exec_f14c77e827d9f02b, 0x00000a7e },
		{ 0x7b68c1dabf40cee3, &exec_7b68c1dabf40cee3, 0x000011b1 },
		{ 0x95b5b356dd738b38, &exec_95b5b356dd738b38, 0x00000a8d },
		{ 0xeda92d51d9201ae3, &exec_eda92d51d9201ae3, 0x00000a90 },
		{ 0x0c6c187bd202778e, &exec_0c6c187bd202778e, 0x00000a94 },
		{ 0xc878d712703e6723, &exec_c878d712703e6723, 0x00000a97 },
		{ 0xc645a8a02ee234dd, &exec_c645a8a02ee234dd, 0x0000479e },
		{ 0xd2d24675637faefd, &exec_d2d24675637faefd, 0x00000a9a },
		{ 0xf5bbb576adea9b33, &exec_f5bbb576adea9b33, 0x00000ca2 },
		{ 0xfad4c61300a44bca, &exec_fad4c61300a44bca, 0x000011c9 },
		{ 0xaea6b9abd7b5fade, &exec_aea6b9abd7b5fade, 0x00000e4e },
		{ 0x93a1286c4d56b64b, &exec_93a1286c4d56b64b, 0x00003e61 },
		{ 0xd5f7e3d574d809d3, &exec_d5f7e3d574d809d3, 0x00001f8d },
		{ 0x4f455602dc78dba1, &exec_4f455602dc78dba1, 0x00000a9e },
		{ 0xbd90baaeb4e4021d, &exec_bd90baaeb4e4021d, 0x00000aa4 },
		{ 0x565b25da6051e1d2, &exec_565b25da6051e1d2, 0x00001e67 },
		{ 0xc7d110b4245ad062, &exec_c7d110b4245ad062, 0x00003965 },
		{ 0xd3ce51a949f66f0d, &exec_d3ce51a949f66f0d, 0x00000aa7 },
		{ 0x050b5110c915660d, &exec_050b5110c915660d, 0x00001731 },
		{ 0xd14089ce35ad0d69, &exec_d14089ce35ad0d69, 0x00000ab4 },
		{ 0x8a4a5cfbd94e57d0, &exec_8a4a5cfbd94e57d0, 0x00001666 },
		{ 0x7af8896b75564f98, &exec_7af8896b75564f98, 0x00000ab8 },
		{ 0x24d5ef71063c3f76, &exec_24d5ef71063c3f76, 0x000044ad },
		{ 0xe72139c16c78bbbf, &exec_e72139c16c78bbbf, 0x00000f9d },
		{ 0xbf62c3b7864fb68a, &exec_bf62c3b7864fb68a, 0x00000ac2 },
		{ 0x31db6891b7a37096, &exec_31db6891b7a37096, 0x00001aa6 },
		{ 0xe23a9eaf81d3100a, &exec_e23a9eaf81d3100a, 0x0000246f },
		{ 0x03dcddef2267d03d, &exec_03dcddef2267d03d, 0x00000cc0 },
		{ 0x8eae8a0fc5844310, &exec_8eae8a0fc5844310, 0x00000ae0 },
		{ 0x3a65a85222bb66c2, &exec_3a65a85222bb66c2, 0x00000ae9 },
		{ 0x03f040e80c2f5668, &exec_03f040e80c2f5668, 0x00001584 },
		{ 0x7f68b3f2a6434d0c, &exec_7f68b3f2a6434d0c, 0x00002368 },
		{ 0x99d44f69531e32d0, &exec_99d44f69531e32d0, 0x00000aec },
		{ 0xb0f361ed74afa857, &exec_b0f361ed74afa857, 0x00000af0 },
		{ 0x17b8e7abe1c3c3e0, &exec_17b8e7abe1c3c3e0, 0x0000122a },
		{ 0x6eba6c44310db238, &exec_6eba6c44310db238, 0x00000af4 },
		{ 0xbe6cb9b85de6552e, &exec_be6cb9b85de6552e, 0x00000c63 },
		{ 0xdafd1d0dd1f647fa, &exec_dafd1d0dd1f647fa, 0x000047c2 },
		{ 0x2e37fc03f01f83fb, &exec_2e37fc03f01f83fb, 0x00000afd },
		{ 0x4f7323ba1e494973, &exec_4f7323ba1e494973, 0x00000f23 },
		{ 0x63a242df57b1e709, &exec_63a242df57b1e709, 0x00001e27 },
		{ 0xf151377b87d8f3ee, &exec_f151377b87d8f3ee, 0x00004570 },
		{ 0xca486cadfdbf9a53, &exec_ca486cadfdbf9a53, 0x00004a6f },
		{ 0x947656d653723419, &exec_947656d653723419, 0x00000b0d },
		{ 0x69f74e906d13ad1d, &exec_69f74e906d13ad1d, 0x000032e3 },
		{ 0x3aaadaa7f767482f, &exec_3aaadaa7f767482f, 0x00001146 },
		{ 0x0a8b6dfd8d946cb4, &exec_0a8b6dfd8d946cb4, 0x00004b98 },
		{ 0x655d9a2000b5eb13, &exec_655d9a2000b5eb13, 0x00000b10 },
		{ 0xdfec43115b954953, &exec_dfec43115b954953, 0x00000b13 },
		{ 0x5c443ff63168fd76, &exec_5c443ff63168fd76, 0x000020bf },
		{ 0xf44112206c6a1ba3, &exec_f44112206c6a1ba3, 0x00001a3c },
		{ 0x207dbce31884acbe, &exec_207dbce31884acbe, 0x00000b18 },
		{ 0x2158c7c0bf7388a8, &exec_2158c7c0bf7388a8, 0x000047fa },
		{ 0x3c0ed285b19ee9e8, &exec_3c0ed285b19ee9e8, 0x00000000 },
		{ 0x26a3668f0ae16d42, &exec_26a3668f0ae16d42, 0x00000b1f },
		{ 0xacfb90bb5dc01ee0, &exec_acfb90bb5dc01ee0, 0x00000b23 },
		{ 0xbc36fca22e337470, &exec_bc36fca22e337470, 0x00001900 },
		{ 0x0db3bff475ea4895, &exec_0db3bff475ea4895, 0x00001390 },
		{ 0x6e851d3afb6a1656, &exec_6e851d3afb6a1656, 0x00000b2d },
		{ 0x15da68d8d8dedfde, &exec_15da68d8d8dedfde, 0x00003526 },
		{ 0xae94bba24d58f261, &exec_ae94bba24d58f261, 0x00000b35 },
		{ 0x8519b7103b0747e2, &exec_8519b7103b0747e2, 0x00000b38 },
		{ 0x7129a8ace2421900, &exec_7129a8ace2421900, 0x00003919 },
		{ 0xcc0fc590c2a64c9b, &exec_cc0fc590c2a64c9b, 0x00000b3a },
		{ 0x2609a2c2bb6afdda, &exec_2609a2c2bb6afdda, 0x00002281 },
		{ 0x3131371cd5b3e1e1, &exec_3131371cd5b3e1e1, 0x00000b3e },
		{ 0xbde4f437efeb6361, &exec_bde4f437efeb6361, 0x00000b42 },
		{ 0x0ca8928bd3daa23e, &exec_0ca8928bd3daa23e, 0x00000b47 },
		{ 0xa5597e9c4ae7b4c6, &exec_a5597e9c4ae7b4c6, 0x00000b4a },
		{ 0xadfccb5372e256ec, &exec_adfccb5372e256ec, 0x00003e09 },
		{ 0xee3ddb8aa2d532ca, &exec_ee3ddb8aa2d532ca, 0x00000bbe },
		{ 0x9e43729d005126de, &exec_9e43729d005126de, 0x00002290 },
		{ 0x6717bff7dae81c9f, &exec_6717bff7dae81c9f, 0x00001663 },
		{ 0x4f380f345554d488, &exec_4f380f345554d488, 0x0000365b },
		{ 0xcf8d6e038fa28cbf, &exec_cf8d6e038fa28cbf, 0x00000dee },
		{ 0x8f0eccd25523d153, &exec_8f0eccd25523d153, 0x00003284 },
		{ 0xf5c9d9162c902da5, &exec_f5c9d9162c902da5, 0x00002b3c },
		{ 0x784fdf3c82c789eb, &exec_784fdf3c82c789eb, 0x00000b5c },
		{ 0xb28e0b41d30e37ec, &exec_b28e0b41d30e37ec, 0x00000b63 },
		{ 0x53226f82f5e490b8, &exec_53226f82f5e490b8, 0x00000b66 },
		{ 0x60d4f4f3919d4ec4, &exec_60d4f4f3919d4ec4, 0x00002679 },
		{ 0xbacb6feb1ed513aa, &exec_bacb6feb1ed513aa, 0x00000b69 },
		{ 0x9abef02c08fe3afb, &exec_9abef02c08fe3afb, 0x00000c31 },
		{ 0x4634410fbab99fda, &exec_4634410fbab99fda, 0x000019de },
		{ 0xcf0b8f9a3bba4479, &exec_cf0b8f9a3bba4479, 0x00002bc1 },
		{ 0x32adc756fcec6b86, &exec_32adc756fcec6b86, 0x000044e3 },
		{ 0xec1b792e50b81318, &exec_ec1b792e50b81318, 0x00000b7f },
		{ 0x76aa9dd63ab2e3b5, &exec_76aa9dd63ab2e3b5, 0x00004973 },
		{ 0x37c983632b125b1d, &exec_37c983632b125b1d, 0x00002f1a },
		{ 0xa21df5bc333f67a5, &exec_a21df5bc333f67a5, 0x00001b35 },
		{ 0x4ea232a7820169aa, &exec_4ea232a7820169aa, 0x000049d6 },
		{ 0x6dd03b442c64833e, &exec_6dd03b442c64833e, 0x00000b87 },
		{ 0x0f07e258027399d7, &exec_0f07e258027399d7, 0x00000b93 },
		{ 0x6075386c83699372, &exec_6075386c83699372, 0x00000b9a },
		{ 0x4f81790e5e926835, &exec_4f81790e5e926835, 0x00004609 },
		{ 0xed31cd9437b67c8e, &exec_ed31cd9437b67c8e, 0x00000b9e },
		{ 0x30e8ae9d66f44045, &exec_30e8ae9d66f44045, 0x00000ba0 },
		{ 0x7fcbb3f047d7a349, &exec_7fcbb3f047d7a349, 0x000010d1 },
		{ 0xdee5f889c442af80, &exec_dee5f889c442af80, 0x00000ba3 },
		{ 0xfff79369dcc04841, &exec_fff79369dcc04841, 0x00000bac },
		{ 0xdc28c5f6ba6da8c7, &exec_dc28c5f6ba6da8c7, 0x00000bb0 },
		{ 0x8ee8030d260027ec, &exec_8ee8030d260027ec, 0x00000bb4 },
		{ 0xae6544e3b3ae1be0, &exec_ae6544e3b3ae1be0, 0x00000bba },
		{ 0x9643c4da146959ab, &exec_9643c4da146959ab, 0x00000000 },
		{ 0x44c6a9c9f137f85d, &exec_44c6a9c9f137f85d, 0x00000fcb },
		{ 0xc6feb4917f5d6a84, &exec_c6feb4917f5d6a84, 0x000041d6 },
		{ 0x69815c3e44ef5a1b, &exec_69815c3e44ef5a1b, 0x000015d8 },
		{ 0xaaf02d1212cf60dc, &exec_aaf02d1212cf60dc, 0x00000bcb },
		{ 0x1ab2820362e3797d, &exec_1ab2820362e3797d, 0x00001776 },
		{ 0xfafae092957b08c9, &exec_fafae092957b08c9, 0x00000bcd },
		{ 0xfe31f2e0e2ea6400, &exec_fe31f2e0e2ea6400, 0x00000bd6 },
		{ 0x1b3e530e9afc7e87, &exec_1b3e530e9afc7e87, 0x00000bdf },
		{ 0x801b7303a3b74307, &exec_801b7303a3b74307, 0x000045b0 },
		{ 0xb4c683d7e087edb1, &exec_b4c683d7e087edb1, 0x00000be6 },
		{ 0xb63abbc5b1beedd9, &exec_b63abbc5b1beedd9, 0x000030bc },
		{ 0x21367f2cd1781305, &exec_21367f2cd1781305, 0x00000be9 },
		{ 0x5aa27e417f55b5c8, &exec_5aa27e417f55b5c8, 0x00000bf1 },
		{ 0xf1eda2ffb2c0a4a3, &exec_f1eda2ffb2c0a4a3, 0x00000dd6 },
		{ 0xc47ae0b770e8267b, &exec_c47ae0b770e8267b, 0x00000dba },
		{ 0x8af29a545a790068, &exec_8af29a545a790068, 0x00000bfc },
		{ 0x0fe3a87218b10e22, &exec_0fe3a87218b10e22, 0x000016a0 },
		{ 0x14f2acdbdabb6b50, &exec_14f2acdbdabb6b50, 0x00000c00 },
		{ 0x7e4b00e3850e8d27, &exec_7e4b00e3850e8d27, 0x0000170d },
		{ 0x333b5d19138c5fd3, &exec_333b5d19138c5fd3, 0x00000f3c },
		{ 0x6198a4469023d015, &exec_6198a4469023d015, 0x00000c04 },
		{ 0xae19f7ad9095e412, &exec_ae19f7ad9095e412, 0x00000c06 },
		{ 0x80a735b62f7c979b, &exec_80a735b62f7c979b, 0x00001c19 },
		{ 0x490ca44e62cf2f7c, &exec_490ca44e62cf2f7c, 0x000013f3 },
		{ 0x04e4ef6aa20a7f19, &exec_04e4ef6aa20a7f19, 0x00000c0b },
		{ 0x73f6bbd09102e8ac, &exec_73f6bbd09102e8ac, 0x000024c5 },
		{ 0x93e5ded9a5cdf258, &exec_93e5ded9a5cdf258, 0x00001ad5 },
		{ 0x8e7e04b23ae3a843, &exec_8e7e04b23ae3a843, 0x00000c14 },
		{ 0x13a1010bdd9d6e76, &exec_13a1010bdd9d6e76, 0x00000c18 },
		{ 0x9631f834fe961e92, &exec_9631f834fe961e92, 0x00000f6f },
		{ 0x8e1e433d327bcc26, &exec_8e1e433d327bcc26, 0x000032c7 },
		{ 0x43f0981aedac7b76, &exec_43f0981aedac7b76, 0x000026d7 },
		{ 0x40a5947fa97cbb84, &exec_40a5947fa97cbb84, 0x00004b4b },
		{ 0x24178007fe2da07b, &exec_24178007fe2da07b, 0x00000c2e },
		{ 0x3e1936079d6f9bea, &exec_3e1936079d6f9bea, 0x00003466 },
		{ 0x42ee279089addd98, &exec_42ee279089addd98, 0x00002793 },
		{ 0xfd8a7c70c8cf877a, &exec_fd8a7c70c8cf877a, 0x00000c3f },
		{ 0x08804e01cdc6e7f8, &exec_08804e01cdc6e7f8, 0x00002180 },
		{ 0x51e94b8b77368ffd, &exec_51e94b8b77368ffd, 0x00002f6e },
		{ 0x5c98e4b2b8e52123, &exec_5c98e4b2b8e52123, 0x00000c45 },
		{ 0x614a6acff688e826, &exec_614a6acff688e826, 0x00000c49 },
		{ 0x9a3d3dec4c490c2e, &exec_9a3d3dec4c490c2e, 0x00000c4d },
		{ 0xf1388b816606a0dd, &exec_f1388b816606a0dd, 0x00000c56 },
		{ 0x92896c87c13212cb, &exec_92896c87c13212cb, 0x00002fa9 },
		{ 0x9dbdb69fe95f0e07, &exec_9dbdb69fe95f0e07, 0x00000c5a },
		{ 0xa397955dcaa812e6, &exec_a397955dcaa812e6, 0x000012e7 },
		{ 0x049c51fdfb36cbc6, &exec_049c51fdfb36cbc6, 0x00000c5f },
		{ 0xa2c397b0e325226d, &exec_a2c397b0e325226d, 0x00002d63 },
		{ 0x9e9d959515b39266, &exec_9e9d959515b39266, 0x00000c69 },
		{ 0xb15f5978b43e64f1, &exec_b15f5978b43e64f1, 0x00000c71 },
		{ 0x761674e755eefa1c, &exec_761674e755eefa1c, 0x000010bf },
		{ 0xbb4ab9ee2fb71675, &exec_bb4ab9ee2fb71675, 0x00000c77 },
		{ 0x5be54f297861b5f2, &exec_5be54f297861b5f2, 0x00000c7a },
		{ 0x54b22f2e0cc6790a, &exec_54b22f2e0cc6790a, 0x0000442c },
		{ 0x81621ba281ec9ee1, &exec_81621ba281ec9ee1, 0x000033b1 },
		{ 0xbe409b6daf896574, &exec_be409b6daf896574, 0x00003a29 },
		{ 0x59caea94c963ffbb, &exec_59caea94c963ffbb, 0x00000c7e },
		{ 0x061af65625008e9d, &exec_061af65625008e9d, 0x00000c95 },
		{ 0x1bd91c6e892a9343, &exec_1bd91c6e892a9343, 0x000041e3 },
		{ 0xcb94bbdcb6d02ec1, &exec_cb94bbdcb6d02ec1, 0x00000c86 },
		{ 0x80db3075a44c2b3a, &exec_80db3075a44c2b3a, 0x0000184b },
		{ 0x6a4d35d6fac4e65b, &exec_6a4d35d6fac4e65b, 0x00003636 },
		{ 0x80e0e589638283cd, &exec_80e0e589638283cd, 0x000018f4 },
		{ 0xa62e7482753eb7fb, &exec_a62e7482753eb7fb, 0x00002fa5 },
		{ 0xe37b6c44535da849, &exec_e37b6c44535da849, 0x00000f11 },
		{ 0x17a984ab35414b14, &exec_17a984ab35414b14, 0x00000c8f },
		{ 0x19dac7a976cdc328, &exec_19dac7a976cdc328, 0x000040f9 },
		{ 0x8f994c348b7b9912, &exec_8f994c348b7b9912, 0x00000c9c },
		{ 0x9ba49879ce7ebdc5, &exec_9ba49879ce7ebdc5, 0x00001133 },
		{ 0x76f4c88ec4e0f119, &exec_76f4c88ec4e0f119, 0x00001c6a },
		{ 0x416ed94adf86c2ad, &exec_416ed94adf86c2ad, 0x000017c9 },
		{ 0xe57442ed99892612, &exec_e57442ed99892612, 0x00004947 },
		{ 0xf780e4b7c083e9e0, &exec_f780e4b7c083e9e0, 0x0000226f },
		{ 0xdee3ee77309dc69e, &exec_dee3ee77309dc69e, 0x00001012 },
		{ 0x1bb8439fc736320b, &exec_1bb8439fc736320b, 0x00001305 },
		{ 0x91150785412f568f, &exec_91150785412f568f, 0x00002473 },
		{ 0xb461e1f5fa68abc7, &exec_b461e1f5fa68abc7, 0x00003f6f },
		{ 0x5ac7ae9dc6c957ab, &exec_5ac7ae9dc6c957ab, 0x00000ca8 },
		{ 0x19662c298d65680b, &exec_19662c298d65680b, 0x00000cac },
		{ 0x09dfb293dc5180f8, &exec_09dfb293dc5180f8, 0x00001164 },
		{ 0x437ed3bd59f504b9, &exec_437ed3bd59f504b9, 0x00000cb2 },
		{ 0xfc47b4a15996514b, &exec_fc47b4a15996514b, 0x0000240b },
		{ 0x6c9cc181c1102786, &exec_6c9cc181c1102786, 0x00000da2 },
		{ 0xbc06824c28141d7b, &exec_bc06824c28141d7b, 0x00000cc5 },
		{ 0xbbc230e94703ecb9, &exec_bbc230e94703ecb9, 0x00001634 },
		{ 0x9533d755290f6305, &exec_9533d755290f6305, 0x000026b0 },
		{ 0xfcb85a7da261b0e8, &exec_fcb85a7da261b0e8, 0x00000cca },
		{ 0xc69cf1c37a700489, &exec_c69cf1c37a700489, 0x00000d11 },
		{ 0xf61657f80bfab88b, &exec_f61657f80bfab88b, 0x00000ccf },
		{ 0x6be6fa313a61de83, &exec_6be6fa313a61de83, 0x00000cd6 },
		{ 0x7917015bb81f00fc, &exec_7917015bb81f00fc, 0x00000cd9 },
		{ 0x476d5d2bbafb9ba4, &exec_476d5d2bbafb9ba4, 0x00001e1d },
		{ 0x0bbcc697af2961bf, &exec_0bbcc697af2961bf, 0x00000cdc },
		{ 0x75b222119b026d8f, &exec_75b222119b026d8f, 0x00000ce8 },
		{ 0xb3be9e22e9793983, &exec_b3be9e22e9793983, 0x00001e4a },
		{ 0x38262267da2b4cb2, &exec_38262267da2b4cb2, 0x000049bc },
		{ 0xce706caa55953407, &exec_ce706caa55953407, 0x00001ce2 },
		{ 0xe22065cc343cf450, &exec_e22065cc343cf450, 0x00000cf0 },
		{ 0xbc4a2605dde69d1f, &exec_bc4a2605dde69d1f, 0x000025ce },
		{ 0xe23570e913b2fb51, &exec_e23570e913b2fb51, 0x00000cfa },
		{ 0x5f82db06bd51f9a6, &exec_5f82db06bd51f9a6, 0x00000d01 },
		{ 0xb22cef76eca49325, &exec_b22cef76eca49325, 0x00000d04 },
		{ 0xc12ea0f85611e2c8, &exec_c12ea0f85611e2c8, 0x00003eb3 },
		{ 0x1ee064dcad67fe78, &exec_1ee064dcad67fe78, 0x0000378c },
		{ 0xf916a9a138ce7a0b, &exec_f916a9a138ce7a0b, 0x00000d08 },
		{ 0xa3e8205c8f2566bb, &exec_a3e8205c8f2566bb, 0x00000dc8 },
		{ 0x5c4c48b7922be4c8, &exec_5c4c48b7922be4c8, 0x000021fc },
		{ 0x554900fea679c5fe, &exec_554900fea679c5fe, 0x00000e8f },
		{ 0xc3d95bea2e44b2b5, &exec_c3d95bea2e44b2b5, 0x0000149a },
		{ 0x5acf3ca1f047c623, &exec_5acf3ca1f047c623, 0x00002497 },
		{ 0x0b3d87f776b1f095, &exec_0b3d87f776b1f095, 0x0000280e },
		{ 0xc3f1ae1de886391a, &exec_c3f1ae1de886391a, 0x00001ae8 },
		{ 0x41a804952d545fba, &exec_41a804952d545fba, 0x00000f92 },
		{ 0x17a6a625b1271eef, &exec_17a6a625b1271eef, 0x00002b7e },
		{ 0x82229582f193bf15, &exec_82229582f193bf15, 0x00002231 },
		{ 0x114c9a26355ae265, &exec_114c9a26355ae265, 0x00000d1c },
		{ 0x614bb170eea6026f, &exec_614bb170eea6026f, 0x000016de },
		{ 0x4431a9867c884dc5, &exec_4431a9867c884dc5, 0x00000d20 },
		{ 0x2dd89d06f6c555ba, &exec_2dd89d06f6c555ba, 0x00000d24 },
		{ 0xb1e20da9c7abd132, &exec_b1e20da9c7abd132, 0x000016c3 },
		{ 0x76d70ace363a6486, &exec_76d70ace363a6486, 0x00004a99 },
		{ 0x9de3b7b1685676f3, &exec_9de3b7b1685676f3, 0x0000463f },
		{ 0x5d1739f420fb78f1, &exec_5d1739f420fb78f1, 0x000043ef },
		{ 0x55db77d6b23dfb85, &exec_55db77d6b23dfb85, 0x00000d26 },
		{ 0x837d441b0d3846e7, &exec_837d441b0d3846e7, 0x00001e44 },
		{ 0xef87112d840a661d, &exec_ef87112d840a661d, 0x00000fb3 },
		{ 0x948792e85f205b34, &exec_948792e85f205b34, 0x00003560 },
		{ 0x10f5110debe59ff0, &exec_10f5110debe59ff0, 0x00000d2b },
		{ 0x11655491988d8158, &exec_11655491988d8158, 0x00000d30 },
		{ 0x3697a11fd43da0c9, &exec_3697a11fd43da0c9, 0x00000d33 },
		{ 0x416865c78a1d4b21, &exec_416865c78a1d4b21, 0x000011d1 },
		{ 0xe15ad0cb2800237c, &exec_e15ad0cb2800237c, 0x0000209d },
		{ 0x6a1fe464bdabacda, &exec_6a1fe464bdabacda, 0x00000d57 },
		{ 0xc63f2dd47fb27ee4, &exec_c63f2dd47fb27ee4, 0x00000d5e },
		{ 0xc5c0ead5c5ff583c, &exec_c5c0ead5c5ff583c, 0x00000d62 },
		{ 0x5fd69f40db1a9554, &exec_5fd69f40db1a9554, 0x00000d66 },
		{ 0xfc82d3cd51630e41, &exec_fc82d3cd51630e41, 0x00001050 },
		{ 0x268290cd033506d7, &exec_268290cd033506d7, 0x00000d6b },
		{ 0xf566d4162c3408c6, &exec_f566d4162c3408c6, 0x000026aa },
		{ 0x7ac5e9a3885970d7, &exec_7ac5e9a3885970d7, 0x00001ee0 },
		{ 0xa4161d647cb45095, &exec_a4161d647cb45095, 0x00000d70 },
		{ 0xb00a63515f8ea635, &exec_b00a63515f8ea635, 0x00000fc0 },
		{ 0xfb6b61571726cd88, &exec_fb6b61571726cd88, 0x00000d76 },
		{ 0xf778e3e57cb7680c, &exec_f778e3e57cb7680c, 0x00002400 },
		{ 0x846154b90dabf909, &exec_846154b90dabf909, 0x00001de7 },
		{ 0x2ef3f2bebe8c0bc4, &exec_2ef3f2bebe8c0bc4, 0x000042aa },
		{ 0x26ac9b2190c29547, &exec_26ac9b2190c29547, 0x0000151e },
		{ 0xfdf263b38e0aa5e1, &exec_fdf263b38e0aa5e1, 0x00000d8a },
		{ 0x49ad5d23501990f3, &exec_49ad5d23501990f3, 0x0000480c },
		{ 0xf863ed981deda4b6, &exec_f863ed981deda4b6, 0x00000f83 },
		{ 0xb8bd0ba95ef7738d, &exec_b8bd0ba95ef7738d, 0x000018e9 },
		{ 0x0e0a6cfa9f3fbe76, &exec_0e0a6cfa9f3fbe76, 0x00000d8e },
		{ 0xa96bf18df70083ae, &exec_a96bf18df70083ae, 0x000012ae },
		{ 0xd3b365d8287098c4, &exec_d3b365d8287098c4, 0x00003b90 },
		{ 0x68c533518832baf8, &exec_68c533518832baf8, 0x00000d98 },
		{ 0x0e3d00ea56e4a1bb, &exec_0e3d00ea56e4a1bb, 0x00000d9d },
		{ 0x09d15fc1afca8e63, &exec_09d15fc1afca8e63, 0x00000d9f },
		{ 0x7060b8924eef1bca, &exec_7060b8924eef1bca, 0x00002e68 },
		{ 0x8832226f7cea5ef9, &exec_8832226f7cea5ef9, 0x00000dae },
		{ 0x761a759bf5385841, &exec_761a759bf5385841, 0x00001da4 },
		{ 0x5d7b4fc2ab168534, &exec_5d7b4fc2ab168534, 0x000045f8 },
		{ 0x60d61afe7b8607b3, &exec_60d61afe7b8607b3, 0x000014ef },
		{ 0xbc6da0cd6a788227, &exec_bc6da0cd6a788227, 0x000030ca },
		{ 0x456ac86962bd5805, &exec_456ac86962bd5805, 0x00000000 },
		{ 0x6f10929b0baee1bc, &exec_6f10929b0baee1bc, 0x00000dbd },
		{ 0x0a3b7979ee6bdb46, &exec_0a3b7979ee6bdb46, 0x00000dc4 },
		{ 0xc2987a9b35c032b5, &exec_c2987a9b35c032b5, 0x00000dcc },
		{ 0x0cecd13a62cd3e78, &exec_0cecd13a62cd3e78, 0x000016fd },
		{ 0x7bf9886b5e63e3f9, &exec_7bf9886b5e63e3f9, 0x00000dd0 },
		{ 0x2219a5c7c4d164aa, &exec_2219a5c7c4d164aa, 0x0000399c },
		{ 0x517e1bb92ba4d4ac, &exec_517e1bb92ba4d4ac, 0x00002fbd },
		{ 0xabe25c8d6d1210e3, &exec_abe25c8d6d1210e3, 0x00000f2e },
		{ 0x86f2933a62f032cb, &exec_86f2933a62f032cb, 0x00000ea0 },
		{ 0x26657029a5c2230f, &exec_26657029a5c2230f, 0x00000ddc },
		{ 0x2883ebf9a8dad9d9, &exec_2883ebf9a8dad9d9, 0x000019a2 },
		{ 0xbb288429276de22a, &exec_bb288429276de22a, 0x00001282 },
		{ 0x81268f02ed473c4e, &exec_81268f02ed473c4e, 0x00000de0 },
		{ 0xd14a9624db54f195, &exec_d14a9624db54f195, 0x00004a77 },
		{ 0xf041934ff4857aa5, &exec_f041934ff4857aa5, 0x000012b3 },
		{ 0x4d6419c8d9c02338, &exec_4d6419c8d9c02338, 0x00000dfd },
		{ 0x184b69cd8c1fba78, &exec_184b69cd8c1fba78, 0x000049b0 },
		{ 0x98896934d6debd29, &exec_98896934d6debd29, 0x00000e04 },
		{ 0x6af8b50d856356f1, &exec_6af8b50d856356f1, 0x00002265 },
		{ 0xea3686ef9d687f48, &exec_ea3686ef9d687f48, 0x00000e08 },
		{ 0x8ed488dfa24b8c1a, &exec_8ed488dfa24b8c1a, 0x00000e0a },
		{ 0xfcae715f3385685a, &exec_fcae715f3385685a, 0x00000e19 },
		{ 0xb5c9d69ea9acb30a, &exec_b5c9d69ea9acb30a, 0x00000e1f },
		{ 0x0374c4ca67176444, &exec_0374c4ca67176444, 0x000042fb },
		{ 0x88eaae37b33890e9, &exec_88eaae37b33890e9, 0x00000e2b },
		{ 0x30fb4cd80ca37e71, &exec_30fb4cd80ca37e71, 0x00000e36 },
		{ 0x38ddc0028a7b822f, &exec_38ddc0028a7b822f, 0x0000146a },
		{ 0xf5aa3217fb62019a, &exec_f5aa3217fb62019a, 0x00000e3b },
		{ 0xeec4dc6f97d8d4bc, &exec_eec4dc6f97d8d4bc, 0x00000e4a },
		{ 0x92651b3d64452c09, &exec_92651b3d64452c09, 0x00001095 },
		{ 0x4f76de350fbcb62b, &exec_4f76de350fbcb62b, 0x000010fe },
		{ 0xdb0074d0d441d67a, &exec_db0074d0d441d67a, 0x00001e5b },
		{ 0xabf48dec9a573dde, &exec_abf48dec9a573dde, 0x000019b8 },
		{ 0x06848dbbafb29ccb, &exec_06848dbbafb29ccb, 0x000019b5 },
		{ 0xf2610ae1f4f9de5d, &exec_f2610ae1f4f9de5d, 0x00000e5c },
		{ 0x64420ebe0ffdf317, &exec_64420ebe0ffdf317, 0x0000104c },
		{ 0x4d4574e41fafadbb, &exec_4d4574e41fafadbb, 0x00003e8c },
		{ 0x7e6a9be3524642f0, &exec_7e6a9be3524642f0, 0x000020bb },
		{ 0x7320b68e31482516, &exec_7320b68e31482516, 0x00000e71 },
		{ 0x905e8da1d3e0c956, &exec_905e8da1d3e0c956, 0x00000e75 },
		{ 0xfbc7369171b4a200, &exec_fbc7369171b4a200, 0x0000459a },
		{ 0x3b0eee994329cfa7, &exec_3b0eee994329cfa7, 0x00004aa0 },
		{ 0xb677e5a4d0ef3938, &exec_b677e5a4d0ef3938, 0x00000ebe },
		{ 0x11d389ac83182de5, &exec_11d389ac83182de5, 0x00000e86 },
		{ 0x2853b1978a74715c, &exec_2853b1978a74715c, 0x00000e8c },
		{ 0x52ba0ec70b8cf349, &exec_52ba0ec70b8cf349, 0x000015ee },
		{ 0xafdf3adb60d0f1f0, &exec_afdf3adb60d0f1f0, 0x000022f4 },
		{ 0x7f8716b90fafd28d, &exec_7f8716b90fafd28d, 0x00002390 },
		{ 0x7baafd8aa5231a29, &exec_7baafd8aa5231a29, 0x00000e94 },
		{ 0x283881978a5d5814, &exec_283881978a5d5814, 0x00000e9d },
		{ 0x976b22e0a069eea6, &exec_976b22e0a069eea6, 0x00000000 },
		{ 0x2a526fd50e5167ea, &exec_2a526fd50e5167ea, 0x00001bd9 },
		{ 0xb43f846266ff9205, &exec_b43f846266ff9205, 0x00000ea3 },
		{ 0xa822a64ea6bfbc58, &exec_a822a64ea6bfbc58, 0x00000ea6 },
		{ 0x4a89deb58d2464fb, &exec_4a89deb58d2464fb, 0x00000eb0 },
		{ 0x52af57df636b3ccc, &exec_52af57df636b3ccc, 0x00000ec2 },
		{ 0x234baac1f5cfe9b8, &exec_234baac1f5cfe9b8, 0x00000ec7 },
		{ 0x0236b3b51c1590c2, &exec_0236b3b51c1590c2, 0x000035b1 },
		{ 0x4ba33981d70ca347, &exec_4ba33981d70ca347, 0x00002b35 },
		{ 0x9be7c6c394f16a54, &exec_9be7c6c394f16a54, 0x0000398c },
		{ 0x55c92cd19a9409a6, &exec_55c92cd19a9409a6, 0x00002631 },
		{ 0x86e568f7b4a6ec2c, &exec_86e568f7b4a6ec2c, 0x00000ecd },
		{ 0x6c9100b522c241ba, &exec_6c9100b522c241ba, 0x00001d5b },
		{ 0xbb55d20bdf3ca0aa, &exec_bb55d20bdf3ca0aa, 0x00000ee4 },
		{ 0x72ba76f663d630ed, &exec_72ba76f663d630ed, 0x00004bc9 },
		{ 0xacb86195d0f223e8, &exec_acb86195d0f223e8, 0x00000f86 },
		{ 0xb9cb575bfa267d40, &exec_b9cb575bfa267d40, 0x00000ee7 },
		{ 0xcf0edd221965082b, &exec_cf0edd221965082b, 0x00002614 },
		{ 0x9e6db79b4873159d, &exec_9e6db79b4873159d, 0x00000ef5 },
		{ 0xeb875d381e28148c, &exec_eb875d381e28148c, 0x0000213f },
		{ 0xea90edcbeca8ea43, &exec_ea90edcbeca8ea43, 0x00000efa },
		{ 0xb86605fc7802da40, &exec_b86605fc7802da40, 0x00000f00 },
		{ 0xb7df16762a458ec0, &exec_b7df16762a458ec0, 0x00000f04 },
		{ 0x73d2836707bb3eec, &exec_73d2836707bb3eec, 0x00001111 },
		{ 0xe87493eaf8dd8cb3, &exec_e87493eaf8dd8cb3, 0x00000f09 },
		{ 0x8bc59b2df957a482, &exec_8bc59b2df957a482, 0x00001235 },
		{ 0x9938a14ae91e44a6, &exec_9938a14ae91e44a6, 0x00001954 },
		{ 0x2dd1f5e958dc9a84, &exec_2dd1f5e958dc9a84, 0x0000359c },
		{ 0xf082e7382817ec68, &exec_f082e7382817ec68, 0x00000f26 },
		{ 0x40fd17843a3141f0, &exec_40fd17843a3141f0, 0x00001db7 },
		{ 0x34a70b7c85b48b28, &exec_34a70b7c85b48b28, 0x000011ce },
		{ 0xbea4d5ff8145fb01, &exec_bea4d5ff8145fb01, 0x000021a2 },
		{ 0x63329fd6d1e4d578, &exec_63329fd6d1e4d578, 0x00001115 },
		{ 0x33feaf581893b2a7, &exec_33feaf581893b2a7, 0x00000f44 },
		{ 0x571d3c1187d5306c, &exec_571d3c1187d5306c, 0x00000f49 },
		{ 0x818047571adf7859, &exec_818047571adf7859, 0x000017fa },
		{ 0xd2ba7ac00612f958, &exec_d2ba7ac00612f958, 0x000039a7 },
		{ 0x428e434773ca8662, &exec_428e434773ca8662, 0x00000f4d },
		{ 0xa3ce1174eb2065c6, &exec_a3ce1174eb2065c6, 0x00000f52 },
		{ 0xb06ae2d6fcd2f4c3, &exec_b06ae2d6fcd2f4c3, 0x00002aa0 },
		{ 0x9a039ad255fbc578, &exec_9a039ad255fbc578, 0x00000f5a },
		{ 0x40dc66abdae84a8c, &exec_40dc66abdae84a8c, 0x00000f63 },
		{ 0x7a00dd06cf1d63bd, &exec_7a00dd06cf1d63bd, 0x00000f66 },
		{ 0xf45f0f770e3a0bc7, &exec_f45f0f770e3a0bc7, 0x00002d66 },
		{ 0x5f4e307b9f5edd57, &exec_5f4e307b9f5edd57, 0x000010c2 },
		{ 0x1474ce7d77e5d6de, &exec_1474ce7d77e5d6de, 0x00001e3f },
		{ 0x5423efd6cf455af1, &exec_5423efd6cf455af1, 0x0000136f },
		{ 0xfe8db357d07779f3, &exec_fe8db357d07779f3, 0x00004be0 },
		{ 0x16fda3edfbe83bb3, &exec_16fda3edfbe83bb3, 0x0000129e },
		{ 0xbcd2d575267df01a, &exec_bcd2d575267df01a, 0x00000f7c },
		{ 0xdfce59a177deed65, &exec_dfce59a177deed65, 0x00003bc6 },
		{ 0xd1cc7851d36c2f03, &exec_d1cc7851d36c2f03, 0x00000f81 },
		{ 0xc6e67a9008014052, &exec_c6e67a9008014052, 0x00001850 },
		{ 0x087817827e4cd5c3, &exec_087817827e4cd5c3, 0x00000f8d },
		{ 0x0dd543b58ba88013, &exec_0dd543b58ba88013, 0x00001f77 },
		{ 0xcb8af31df2fa9a53, &exec_cb8af31df2fa9a53, 0x00000f99 },
		{ 0x527555eb7a22a88d, &exec_527555eb7a22a88d, 0x00001d80 },
		{ 0xb1cc7ed67bb93e1d, &exec_b1cc7ed67bb93e1d, 0x00000f9f },
		{ 0x1fde23dae36ddbca, &exec_1fde23dae36ddbca, 0x00003f08 },
		{ 0xb35649a743cf71d7, &exec_b35649a743cf71d7, 0x00000fa6 },
		{ 0x13bc191dfed5d1d1, &exec_13bc191dfed5d1d1, 0x00000fb0 },
		{ 0x8b72ad48aa519aeb, &exec_8b72ad48aa519aeb, 0x000012e3 },
		{ 0x959a8356dd5c71f0, &exec_959a8356dd5c71f0, 0x00001107 },
		{ 0xe1370461e8a510c2, &exec_e1370461e8a510c2, 0x00000fd5 },
		{ 0x1a075ef1ed57fabb, &exec_1a075ef1ed57fabb, 0x00003670 },
		{ 0x29e35fa0b41cb6ef, &exec_29e35fa0b41cb6ef, 0x000043c4 },
		{ 0xb95350a996725348, &exec_b95350a996725348, 0x000026a4 },
		{ 0x1f6a715f506ab11a, &exec_1f6a715f506ab11a, 0x00000fda },
		{ 0x5984a79dae39372d, &exec_5984a79dae39372d, 0x0000250f },
		{ 0x32e787302c069799, &exec_32e787302c069799, 0x00000fe3 },
		{ 0xa9c5dcbc5df8cb5c, &exec_a9c5dcbc5df8cb5c, 0x00000fe6 },
		{ 0xc471959ba33c1b4d, &exec_c471959ba33c1b4d, 0x00000fef },
		{ 0xe4367b8070b19bd1, &exec_e4367b8070b19bd1, 0x00000ff9 },
		{ 0xa3349337d8ef17e7, &exec_a3349337d8ef17e7, 0x0000452e },
		{ 0x31a257c830c8b664, &exec_31a257c830c8b664, 0x00003ad1 },
		{ 0x517e64e3a5c3666e, &exec_517e64e3a5c3666e, 0x000020b0 },
		{ 0x0e6f382eb1306372, &exec_0e6f382eb1306372, 0x0000237e },
		{ 0x5b774e38f9d3a950, &exec_5b774e38f9d3a950, 0x0000144d },
		{ 0xc5c904dc71e203a1, &exec_c5c904dc71e203a1, 0x00001029 },
		{ 0x6ed112c4189cf8a6, &exec_6ed112c4189cf8a6, 0x0000102c },
		{ 0xe9d8f1456f0b2941, &exec_e9d8f1456f0b2941, 0x00001800 },
		{ 0xbb5045303ef41f1f, &exec_bb5045303ef41f1f, 0x00001037 },
		{ 0xcf92476e1d4e4ef9, &exec_cf92476e1d4e4ef9, 0x00001d39 },
		{ 0x650ba7a96faae9d8, &exec_650ba7a96faae9d8, 0x00004152 },
		{ 0xf3fec306f3949f05, &exec_f3fec306f3949f05, 0x0000103b },
		{ 0xb58e7cbbc8879aaf, &exec_b58e7cbbc8879aaf, 0x000010bc },
		{ 0x5ec596ff8f0e5e70, &exec_5ec596ff8f0e5e70, 0x0000103f },
		{ 0x30e2d59a1cb0314e, &exec_30e2d59a1cb0314e, 0x0000345b },
		{ 0x5b171ee5145a80dd, &exec_5b171ee5145a80dd, 0x00002529 },
		{ 0xf26bd3d101f83292, &exec_f26bd3d101f83292, 0x00001043 },
		{ 0x0a0ab157f6e7d107, &exec_0a0ab157f6e7d107, 0x00001db0 },
		{ 0x45ba60dfe62e97fa, &exec_45ba60dfe62e97fa, 0x000038c6 },
		{ 0xaac8357ff9cc5a4d, &exec_aac8357ff9cc5a4d, 0x00001048 },
		{ 0x76b34292c22da408, &exec_76b34292c22da408, 0x000018fb },
		{ 0x49f6410b77d73c3d, &exec_49f6410b77d73c3d, 0x000044d8 },
		{ 0x5d4ba5ed35f93e84, &exec_5d4ba5ed35f93e84, 0x00003989 },
		{ 0xb64fa32b87d38f48, &exec_b64fa32b87d38f48, 0x00001054 },
		{ 0xbcfe96017a0b45de, &exec_bcfe96017a0b45de, 0x00001ca1 },
		{ 0x5dcb11c936aa0006, &exec_5dcb11c936aa0006, 0x00001058 },
		{ 0x8364c2e1706050d3, &exec_8364c2e1706050d3, 0x00001611 },
		{ 0x2d239a2d575db278, &exec_2d239a2d575db278, 0x000037d6 },
		{ 0x81db304934ede38d, &exec_81db304934ede38d, 0x0000105d },
		{ 0xae575241bc295236, &exec_ae575241bc295236, 0x00001067 },
		{ 0x45dc696c618cfaf5, &exec_45dc696c618cfaf5, 0x0000106c },
		{ 0xa717ae90220f74fa, &exec_a717ae90220f74fa, 0x00001623 },
		{ 0x86596fa068d89e1b, &exec_86596fa068d89e1b, 0x00001070 },
		{ 0x7a0f114eb6c9d719, &exec_7a0f114eb6c9d719, 0x000011a2 },
		{ 0x5abb7ebd8d04b445, &exec_5abb7ebd8d04b445, 0x0000400b },
		{ 0xe5727033b7f5eeb1, &exec_e5727033b7f5eeb1, 0x0000107f },
		{ 0x3e1a5bc7de03c830, &exec_3e1a5bc7de03c830, 0x0000108a },
		{ 0x1c0cde6487469561, &exec_1c0cde6487469561, 0x00001099 },
		{ 0x9ef5294941a98d39, &exec_9ef5294941a98d39, 0x000010a1 },
		{ 0xb34869b2b9baaada, &exec_b34869b2b9baaada, 0x00003a1e },
		{ 0x781fc6d2102af0de, &exec_781fc6d2102af0de, 0x0000153b },
		{ 0xbeee9e2855f02f5f, &exec_beee9e2855f02f5f, 0x000010a6 },
		{ 0xf007702979f6f2d9, &exec_f007702979f6f2d9, 0x000010b2 },
		{ 0x9981097a7990bfb7, &exec_9981097a7990bfb7, 0x000010cc },
		{ 0xed79934cbccf6dd5, &exec_ed79934cbccf6dd5, 0x0000244d },
		{ 0x9b60b88c7caf66d1, &exec_9b60b88c7caf66d1, 0x00004a4f },
		{ 0xc6957f7c9215e8d3, &exec_c6957f7c9215e8d3, 0x00004706 },
		{ 0x344d06b7d51594e2, &exec_344d06b7d51594e2, 0x000010dd },
		{ 0x7ee2e0f8085aa131, &exec_7ee2e0f8085aa131, 0x00001a72 },
		{ 0x01552016c7305a3f, &exec_01552016c7305a3f, 0x00001471 },
		{ 0xd5802a8ea5ab838e, &exec_d5802a8ea5ab838e, 0x000010e6 },
		{ 0xdda0977ef2f2aea3, &exec_dda0977ef2f2aea3, 0x00001719 },
		{ 0x464f677b462f23fe, &exec_464f677b462f23fe, 0x00001103 },
		{ 0xc795b7d2612c1568, &exec_c795b7d2612c1568, 0x0000110a },
		{ 0x232b6430b76806e6, &exec_232b6430b76806e6, 0x00000000 },
		{ 0x87dad880b28c8ab8, &exec_87dad880b28c8ab8, 0x00002df9 },
		{ 0x1102890aef49adda, &exec_1102890aef49adda, 0x00003f68 },
		{ 0xb813402adb86cb34, &exec_b813402adb86cb34, 0x00003e3a },
		{ 0x6b83add780ac58ad, &exec_6b83add780ac58ad, 0x00002ad9 },
		{ 0x56360fd5a4efa7a9, &exec_56360fd5a4efa7a9, 0x0000111c },
		{ 0xc30618a2347f00d6, &exec_c30618a2347f00d6, 0x00001128 },
		{ 0x477bbe6f79a2bc40, &exec_477bbe6f79a2bc40, 0x0000112f },
		{ 0xcfbdc581f2870867, &exec_cfbdc581f2870867, 0x00001140 },
		{ 0xc1a088bfaeef18f2, &exec_c1a088bfaeef18f2, 0x00001150 },
		{ 0xcace12c04d547ecc, &exec_cace12c04d547ecc, 0x000044c1 },
		{ 0x971cde0e51f8acce, &exec_971cde0e51f8acce, 0x00001158 },
		{ 0xfef33ddc53f3e7db, &exec_fef33ddc53f3e7db, 0x0000249e },
		{ 0x68ba47602a51c04d, &exec_68ba47602a51c04d, 0x00001175 },
		{ 0xf52f2a9871b1d611, &exec_f52f2a9871b1d611, 0x00001179 },
		{ 0x4c54e8e7eadd6266, &exec_4c54e8e7eadd6266, 0x00001b83 },
		{ 0x67bceeabb6722417, &exec_67bceeabb6722417, 0x0000118b },
		{ 0xbbcd50dd5d668153, &exec_bbcd50dd5d668153, 0x0000118e },
		{ 0x5d30c86eb108d28e, &exec_5d30c86eb108d28e, 0x00001191 },
		{ 0x1f4b5cdace2745d6, &exec_1f4b5cdace2745d6, 0x0000232f },
		{ 0x56ffa6670211f5ac, &exec_56ffa6670211f5ac, 0x00002543 },
		{ 0x121961706e97da67, &exec_121961706e97da67, 0x000011b5 },
		{ 0x9506b7540844eb62, &exec_9506b7540844eb62, 0x00001de2 },
		{ 0xb16827877b8a9bd8, &exec_b16827877b8a9bd8, 0x0000260f },
		{ 0x4fe649c6e18e823d, &exec_4fe649c6e18e823d, 0x0000270f },
		{ 0x2ab24454772b7720, &exec_2ab24454772b7720, 0x00003292 },
		{ 0xa34d4da6aa3e24e6, &exec_a34d4da6aa3e24e6, 0x000011ba },
		{ 0x315753dacce3b8b0, &exec_315753dacce3b8b0, 0x000011c5 },
		{ 0xd18df8684a866e85, &exec_d18df8684a866e85, 0x00004088 },
		{ 0x79758f0444fba677, &exec_79758f0444fba677, 0x000011d9 },
		{ 0x678f9c5057ca5e1d, &exec_678f9c5057ca5e1d, 0x0000324f },
		{ 0x59e0397fed46ca06, &exec_59e0397fed46ca06, 0x00002621 },
		{ 0xeef2894c23711dfc, &exec_eef2894c23711dfc, 0x00003a69 },
		{ 0x747887cec3a03d81, &exec_747887cec3a03d81, 0x000011df },
		{ 0x8f75bf8c828de52a, &exec_8f75bf8c828de52a, 0x0000180e },
		{ 0x8906a169e1fe3019, &exec_8906a169e1fe3019, 0x000011e3 },
		{ 0x70c6ff7526eeb6ef, &exec_70c6ff7526eeb6ef, 0x000011e9 },
		{ 0xa13f92f5f84370ae, &exec_a13f92f5f84370ae, 0x000011ed },
		{ 0xfc682e4e2c973e52, &exec_fc682e4e2c973e52, 0x00002372 },
		{ 0x85f62c0a227961c9, &exec_85f62c0a227961c9, 0x000011f0 },
		{ 0x216e716d97c988ef, &exec_216e716d97c988ef, 0x000011f7 },
		{ 0x4701c703b3aa8e46, &exec_4701c703b3aa8e46, 0x000011fc },
		{ 0x9bb47cb6ff7e0744, &exec_9bb47cb6ff7e0744, 0x000011fe },
		{ 0xa314e619f1262640, &exec_a314e619f1262640, 0x00001855 },
		{ 0xf13960b841ed58cd, &exec_f13960b841ed58cd, 0x0000120b },
		{ 0x0b2f0fc40f301b21, &exec_0b2f0fc40f301b21, 0x000044da },
		{ 0xe346ea04e0e24bd9, &exec_e346ea04e0e24bd9, 0x00001216 },
		{ 0x25c2ed280aa8b196, &exec_25c2ed280aa8b196, 0x00004813 },
		{ 0xaf08bb4b1121c03b, &exec_af08bb4b1121c03b, 0x00002818 },
		{ 0x41b34db92eb1a8e7, &exec_41b34db92eb1a8e7, 0x0000121b },
		{ 0x0dec5fb270aa57f9, &exec_0dec5fb270aa57f9, 0x00004be2 },
		{ 0x521024414236c16e, &exec_521024414236c16e, 0x00001220 },
		{ 0xca5d07dfe0fd27d8, &exec_ca5d07dfe0fd27d8, 0x00001225 },
		{ 0xcd5a8b71f373eec5, &exec_cd5a8b71f373eec5, 0x00002e8a },
		{ 0xa9cfc6903d548e5b, &exec_a9cfc6903d548e5b, 0x000024d2 },
		{ 0x17c31abe877c6bf4, &exec_17c31abe877c6bf4, 0x0000122f },
		{ 0x6ed0609dc8a0be26, &exec_6ed0609dc8a0be26, 0x000025a5 },
		{ 0xb66b78cd61ca21dd, &exec_b66b78cd61ca21dd, 0x00001237 },
		{ 0x6a6889d6b6a4140f, &exec_6a6889d6b6a4140f, 0x0000123d },
		{ 0x935adcc6890a89e4, &exec_935adcc6890a89e4, 0x00001242 },
		{ 0xd5cd4840412f2400, &exec_d5cd4840412f2400, 0x00002aca },
		{ 0xf70ea39f12a70f57, &exec_f70ea39f12a70f57, 0x00001248 },
		{ 0x76d95cfa81331fe9, &exec_76d95cfa81331fe9, 0x00004a9c },
		{ 0x2296b58ff6fdd127, &exec_2296b58ff6fdd127, 0x0000124e },
		{ 0x4f97c3b80f9ea5c9, &exec_4f97c3b80f9ea5c9, 0x00001253 },
		{ 0x45f6e0bab5ecae4d, &exec_45f6e0bab5ecae4d, 0x0000125c },
		{ 0xc911f60d43656603, &exec_c911f60d43656603, 0x00004795 },
		{ 0x09410beb15d9359c, &exec_09410beb15d9359c, 0x00001268 },
		{ 0x878f057a394afb48, &exec_878f057a394afb48, 0x00001276 },
		{ 0xd5ceccf4acd31f03, &exec_d5ceccf4acd31f03, 0x00001b31 },
		{ 0xc78e3b7b4fe7c1e2, &exec_c78e3b7b4fe7c1e2, 0x00001a1e },
		{ 0xa082c70e5155051f, &exec_a082c70e5155051f, 0x0000127d },
		{ 0xe4eb56c7e5dc5eda, &exec_e4eb56c7e5dc5eda, 0x000036db },
		{ 0x428cd103f9703527, &exec_428cd103f9703527, 0x00001288 },
		{ 0xf26a4498b8450184, &exec_f26a4498b8450184, 0x00001294 },
		{ 0xa0d7ff917a52ee82, &exec_a0d7ff917a52ee82, 0x00001c54 },
		{ 0x20091f3b97c66e80, &exec_20091f3b97c66e80, 0x00001d7b },
		{ 0x8d3d11f466d8c953, &exec_8d3d11f466d8c953, 0x00001965 },
		{ 0x40e8fb4817fb0064, &exec_40e8fb4817fb0064, 0x000012b5 },
		{ 0x845152b2402e20f4, &exec_845152b2402e20f4, 0x000012bf },
		{ 0x788cd649cef84925, &exec_788cd649cef84925, 0x000012c4 },
		{ 0x4cb9fce33571d03d, &exec_4cb9fce33571d03d, 0x000012c8 },
		{ 0x68200fadc7676cda, &exec_68200fadc7676cda, 0x000012cb },
		{ 0xe7d3bbc70a04287e, &exec_e7d3bbc70a04287e, 0x000019e6 },
		{ 0xbb29d6c435e07207, &exec_bb29d6c435e07207, 0x000012cf },
		{ 0x7052d3463a85e4f3, &exec_7052d3463a85e4f3, 0x000012d3 },
		{ 0x793ac56dd9a4089a, &exec_793ac56dd9a4089a, 0x00003af7 },
		{ 0x9271f0d79ce62e5a, &exec_9271f0d79ce62e5a, 0x00004499 },
		{ 0x7aa614ed99bf5e03, &exec_7aa614ed99bf5e03, 0x00002f8b },
		{ 0x7b29d550f4190c97, &exec_7b29d550f4190c97, 0x00003f1b },
		{ 0xd9439e910b9eda2a, &exec_d9439e910b9eda2a, 0x000012eb },
		{ 0xb3bf163f4707e4f1, &exec_b3bf163f4707e4f1, 0x000012ef },
		{ 0x428aab181737487b, &exec_428aab181737487b, 0x000012f3 },
		{ 0x0b49e5ccdce6a294, &exec_0b49e5ccdce6a294, 0x000012f8 },
		{ 0x1258a726b814be21, &exec_1258a726b814be21, 0x000023b0 },
		{ 0x98c394849853bfaf, &exec_98c394849853bfaf, 0x00003952 },
		{ 0x129ca8a6a7bc4114, &exec_129ca8a6a7bc4114, 0x000012fa },
		{ 0x04ecc54e57e090b1, &exec_04ecc54e57e090b1, 0x000012fd },
		{ 0x7203c1f7971bfcd2, &exec_7203c1f7971bfcd2, 0x00001609 },
		{ 0x455d310f5832ac41, &exec_455d310f5832ac41, 0x00001d2a },
		{ 0x4e304c2592684d3f, &exec_4e304c2592684d3f, 0x00002e2c },
		{ 0xb2a3de703034bab0, &exec_b2a3de703034bab0, 0x000042e8 },
		{ 0x908caaba2f0f0ab1, &exec_908caaba2f0f0ab1, 0x000041d1 },
		{ 0xd7347a0db3e8f02f, &exec_d7347a0db3e8f02f, 0x000012ff },
		{ 0x7d2e8b30f8e67515, &exec_7d2e8b30f8e67515, 0x00001996 },
		{ 0xfc37fc131bc81371, &exec_fc37fc131bc81371, 0x00002441 },
		{ 0xb3eca63d8cb13db4, &exec_b3eca63d8cb13db4, 0x000023d6 },
		{ 0x2a2f9dd2d93feafa, &exec_2a2f9dd2d93feafa, 0x00003904 },
		{ 0x9ddace8923576e07, &exec_9ddace8923576e07, 0x00001315 },
		{ 0xbcdcf9800d6ab5f6, &exec_bcdcf9800d6ab5f6, 0x0000131c },
		{ 0x594e5b947254b3cc, &exec_594e5b947254b3cc, 0x000023cd },
		{ 0x43dfbcacac07037a, &exec_43dfbcacac07037a, 0x00001320 },
		{ 0x4760e73e0b5638f9, &exec_4760e73e0b5638f9, 0x00002685 },
		{ 0x7e828a4cb58f5e40, &exec_7e828a4cb58f5e40, 0x00001323 },
		{ 0x4a95c51c1879e25b, &exec_4a95c51c1879e25b, 0x00004819 },
		{ 0x0a2deebba60dad3e, &exec_0a2deebba60dad3e, 0x00001329 },
		{ 0xdfc2a7d39f0735af, &exec_dfc2a7d39f0735af, 0x0000268d },
		{ 0x2d20b38b6dfa1d06, &exec_2d20b38b6dfa1d06, 0x00001c02 },
		{ 0xea57665d8ef65592, &exec_ea57665d8ef65592, 0x00002787 },
		{ 0xd7f9809ce646f580, &exec_d7f9809ce646f580, 0x0000132f },
		{ 0x2710be1d1cfc46d3, &exec_2710be1d1cfc46d3, 0x000017f2 },
		{ 0xf0d5143e1631a145, &exec_f0d5143e1631a145, 0x00001337 },
		{ 0xb71385cc0c27c5c2, &exec_b71385cc0c27c5c2, 0x00003c1a },
		{ 0x9d983c77051f9b26, &exec_9d983c77051f9b26, 0x0000133c },
		{ 0x7ff870bb573a0ec1, &exec_7ff870bb573a0ec1, 0x00000000 },
		{ 0xd9ba46123ac948d6, &exec_d9ba46123ac948d6, 0x0000179a },
		{ 0xbad0c88fa8af2bf4, &exec_bad0c88fa8af2bf4, 0x0000134a },
		{ 0x03e02776d4a4763f, &exec_03e02776d4a4763f, 0x00002b57 },
		{ 0x0b91dbdb2094c227, &exec_0b91dbdb2094c227, 0x0000251a },
		{ 0xe120f764cf6e10d1, &exec_e120f764cf6e10d1, 0x00001351 },
		{ 0x3e3e0079196fbf70, &exec_3e3e0079196fbf70, 0x0000135a },
		{ 0x26173adafc179a0c, &exec_26173adafc179a0c, 0x000014ea },
		{ 0xc42cfa742ad4041e, &exec_c42cfa742ad4041e, 0x00002e7b },
		{ 0xf30dd3f9cb99369c, &exec_f30dd3f9cb99369c, 0x00001360 },
		{ 0x6397fd867575d595, &exec_6397fd867575d595, 0x00002068 },
		{ 0x1c40fb9c95bb2cad, &exec_1c40fb9c95bb2cad, 0x0000137d },
		{ 0x004d6589356dac68, &exec_004d6589356dac68, 0x00001454 },
		{ 0x00721488c361bbd6, &exec_00721488c361bbd6, 0x00001382 },
		{ 0x09dc03cd7ce904c7, &exec_09dc03cd7ce904c7, 0x00001385 },
		{ 0xabd790380ebe4d10, &exec_abd790380ebe4d10, 0x00001beb },
		{ 0x889c71b26d1d7795, &exec_889c71b26d1d7795, 0x00001389 },
		{ 0x62ede7d395517db8, &exec_62ede7d395517db8, 0x00001397 },
		{ 0x140cfc9cd6ba9072, &exec_140cfc9cd6ba9072, 0x000013a3 },
		{ 0xa8845b44daf7a265, &exec_a8845b44daf7a265, 0x0000238b },
		{ 0x94701988ccfcb631, &exec_94701988ccfcb631, 0x000013a7 },
		{ 0x516484ce1c7e0c53, &exec_516484ce1c7e0c53, 0x000013ae },
		{ 0x84ddf60f223ca3ca, &exec_84ddf60f223ca3ca, 0x000013b2 },
		{ 0x5885a6259b390e3e, &exec_5885a6259b390e3e, 0x000013b4 },
		{ 0x1e5c0a42e473b772, &exec_1e5c0a42e473b772, 0x000043a5 },
		{ 0x45ad91f81bfaaa13, &exec_45ad91f81bfaaa13, 0x0000309a },
		{ 0xfadab63ed8944349, &exec_fadab63ed8944349, 0x0000296e },
		{ 0x4a4fbd1a38474499, &exec_4a4fbd1a38474499, 0x00001b11 },
		{ 0xc3c2bf6f1ad7abfb, &exec_c3c2bf6f1ad7abfb, 0x000013b6 },
		{ 0x8c94f4cf4c784b6f, &exec_8c94f4cf4c784b6f, 0x00002865 },
		{ 0xa3788246f2ba8301, &exec_a3788246f2ba8301, 0x000013bd },
		{ 0xf73c4d8ea2cf2234, &exec_f73c4d8ea2cf2234, 0x000013c0 },
		{ 0xc911b15bfb5129a2, &exec_c911b15bfb5129a2, 0x000013c2 },
		{ 0x44ed642efb39f490, &exec_44ed642efb39f490, 0x000016f3 },
		{ 0x2f4dbd3587b4a8ad, &exec_2f4dbd3587b4a8ad, 0x000013c7 },
		{ 0x023ae4a9ad84b841, &exec_023ae4a9ad84b841, 0x000013cc },
		{ 0x0bc19e328eb07165, &exec_0bc19e328eb07165, 0x00004620 },
		{ 0xaa8059541d5d6442, &exec_aa8059541d5d6442, 0x000013d4 },
		{ 0xec804b4b90088cca, &exec_ec804b4b90088cca, 0x000013d9 },
		{ 0x25caeddaa1062d15, &exec_25caeddaa1062d15, 0x000013df },
		{ 0x0a37dc41b21f29c0, &exec_0a37dc41b21f29c0, 0x0000313d },
		{ 0x631ade8b5093e0c7, &exec_631ade8b5093e0c7, 0x000013e2 },
		{ 0x954c89bc796b11c9, &exec_954c89bc796b11c9, 0x00001bbf },
		{ 0x0f46031cbf6ecc5b, &exec_0f46031cbf6ecc5b, 0x000045d2 },
		{ 0x08e379b6ff0f9bd1, &exec_08e379b6ff0f9bd1, 0x000013e6 },
		{ 0xe24d0acf48a4956e, &exec_e24d0acf48a4956e, 0x000013ea },
		{ 0xce5e1be36248366b, &exec_ce5e1be36248366b, 0x00001ea3 },
		{ 0x2424a096d521f3ee, &exec_2424a096d521f3ee, 0x000013f5 },
		{ 0x8bad0784963d0253, &exec_8bad0784963d0253, 0x000013f8 },
		{ 0x6f56b24767b9c689, &exec_6f56b24767b9c689, 0x00003175 },
		{ 0x639fcdcd1c84b4e1, &exec_639fcdcd1c84b4e1, 0x00001400 },
		{ 0x5393ee77d6d8957f, &exec_5393ee77d6d8957f, 0x00001403 },
		{ 0x56842aa29ed8e55e, &exec_56842aa29ed8e55e, 0x00001407 },
		{ 0xc86265456557c2c8, &exec_c86265456557c2c8, 0x0000243e },
		{ 0x2887faa710355351, &exec_2887faa710355351, 0x0000140e },
		{ 0x326d7877fe615050, &exec_326d7877fe615050, 0x00002532 },
		{ 0xe85690c4f09d50b3, &exec_e85690c4f09d50b3, 0x000049fb },
		{ 0xd4ad7043d1e04fa0, &exec_d4ad7043d1e04fa0, 0x00001414 },
		{ 0x0d7633a959e13e57, &exec_0d7633a959e13e57, 0x00001423 },
		{ 0x01f78df5ad677896, &exec_01f78df5ad677896, 0x00001e6e },
		{ 0x7da51033c08c4663, &exec_7da51033c08c4663, 0x0000142a },
		{ 0x131937dc55189bb8, &exec_131937dc55189bb8, 0x00001431 },
		{ 0xe87c771b20a29659, &exec_e87c771b20a29659, 0x000045a1 },
		{ 0xae1cc17d6676275a, &exec_ae1cc17d6676275a, 0x00001433 },
		{ 0x5cdd18e319a09f1a, &exec_5cdd18e319a09f1a, 0x00001437 },
		{ 0x0c9d8b2ed72b3e4a, &exec_0c9d8b2ed72b3e4a, 0x0000143b },
		{ 0x41e322a6fa6d90bb, &exec_41e322a6fa6d90bb, 0x0000143f },
		{ 0x15e23da7773fd4b4, &exec_15e23da7773fd4b4, 0x00001446 },
		{ 0xa2ec66524b881093, &exec_a2ec66524b881093, 0x0000144a },
		{ 0x4d619d8b0f5223c1, &exec_4d619d8b0f5223c1, 0x000021d6 },
		{ 0xb0a8c5a9c455a95d, &exec_b0a8c5a9c455a95d, 0x00003bea },
		{ 0x4ae4367b0431e836, &exec_4ae4367b0431e836, 0x00001461 },
		{ 0xb31f94a857e7de7a, &exec_b31f94a857e7de7a, 0x0000167a },
		{ 0x498e463e563b62a3, &exec_498e463e563b62a3, 0x00001465 },
		{ 0x6cce40a8fc1e16c7, &exec_6cce40a8fc1e16c7, 0x00001467 },
		{ 0xc8eb58764b86585f, &exec_c8eb58764b86585f, 0x0000193b },
		{ 0x6878d40b36ef9651, &exec_6878d40b36ef9651, 0x00002b4b },
		{ 0xfda65b0dee8b7a38, &exec_fda65b0dee8b7a38, 0x0000146d },
		{ 0xf1cfc2559bf14d73, &exec_f1cfc2559bf14d73, 0x00001473 },
		{ 0x93d199ef8e8b47f7, &exec_93d199ef8e8b47f7, 0x000017ed },
		{ 0x186a87a9a0b8fd55, &exec_186a87a9a0b8fd55, 0x00001477 },
		{ 0xf0d31cee686910e8, &exec_f0d31cee686910e8, 0x00001f50 },
		{ 0x5b5541f35c4748d3, &exec_5b5541f35c4748d3, 0x0000235f },
		{ 0xb49df76b6f05f176, &exec_b49df76b6f05f176, 0x00003a71 },
		{ 0x89c36d758b910c50, &exec_89c36d758b910c50, 0x0000147a },
		{ 0xcdf87c5179cd0e08, &exec_cdf87c5179cd0e08, 0x0000147c },
		{ 0x89fdf5895b91f059, &exec_89fdf5895b91f059, 0x0000147f },
		{ 0x2c476c71176675cf, &exec_2c476c71176675cf, 0x00002205 },
		{ 0xb6c3a9b65b81dec2, &exec_b6c3a9b65b81dec2, 0x00002108 },
		{ 0x4ef2b0c71fcafaa2, &exec_4ef2b0c71fcafaa2, 0x00001489 },
		{ 0xde8837ad30af2199, &exec_de8837ad30af2199, 0x0000448f },
		{ 0x3c5dc123e57fc519, &exec_3c5dc123e57fc519, 0x0000148e },
		{ 0x4d9ebf602345a1be, &exec_4d9ebf602345a1be, 0x000029c1 },
		{ 0x0eabca046e54d11a, &exec_0eabca046e54d11a, 0x00001490 },
		{ 0xb75383c124be1123, &exec_b75383c124be1123, 0x00004b65 },
		{ 0xd8456f863b8e476d, &exec_d8456f863b8e476d, 0x000014a3 },
		{ 0x1ef73d52c946e22d, &exec_1ef73d52c946e22d, 0x0000339d },
		{ 0x463f685e4088e533, &exec_463f685e4088e533, 0x000014a8 },
		{ 0x5c28af5b29399c74, &exec_5c28af5b29399c74, 0x000028ab },
		{ 0xf9da5c42602ea13e, &exec_f9da5c42602ea13e, 0x000014b1 },
		{ 0xc82af52f970153a2, &exec_c82af52f970153a2, 0x000016e9 },
		{ 0xc03815fef0f71edd, &exec_c03815fef0f71edd, 0x000014b5 },
		{ 0x8709aad425cf7ffe, &exec_8709aad425cf7ffe, 0x000014c0 },
		{ 0x2cad6665501c5c90, &exec_2cad6665501c5c90, 0x000014c2 },
		{ 0xb7922ba2f673f94d, &exec_b7922ba2f673f94d, 0x00003214 },
		{ 0xd56a40ec58d9f5d0, &exec_d56a40ec58d9f5d0, 0x000014cb },
		{ 0x173b929065a9f1e4, &exec_173b929065a9f1e4, 0x00001980 },
		{ 0x2f84ee5e2f1cc4d9, &exec_2f84ee5e2f1cc4d9, 0x00002873 },
		{ 0x9c94257c26926e63, &exec_9c94257c26926e63, 0x000014d3 },
		{ 0x496e4440efb783f9, &exec_496e4440efb783f9, 0x000014d7 },
		{ 0xa81d647fc82d7315, &exec_a81d647fc82d7315, 0x000014dd },
		{ 0xae90b6259bdafbde, &exec_ae90b6259bdafbde, 0x000014e2 },
		{ 0x115a9f78140bf4ea, &exec_115a9f78140bf4ea, 0x000017df },
		{ 0xe9d52a0a01650d2b, &exec_e9d52a0a01650d2b, 0x000014e4 },
		{ 0x2f01b44ddd8e67b9, &exec_2f01b44ddd8e67b9, 0x000014e8 },
		{ 0xee73fc9b374e5a3f, &exec_ee73fc9b374e5a3f, 0x000014ec },
		{ 0x085319c42f926ced, &exec_085319c42f926ced, 0x00002bbb },
		{ 0x1c19c76a9b8d28dd, &exec_1c19c76a9b8d28dd, 0x000014f3 },
		{ 0x63850ed6406e7c47, &exec_63850ed6406e7c47, 0x00001500 },
		{ 0x95a59915dc6c6e05, &exec_95a59915dc6c6e05, 0x00001504 },
		{ 0xcf9a98a057a8aa5d, &exec_cf9a98a057a8aa5d, 0x00001508 },
		{ 0xc87db0de13dc7a1a, &exec_c87db0de13dc7a1a, 0x00003b76 },
		{ 0xf39199346c2f445a, &exec_f39199346c2f445a, 0x00001627 },
		{ 0xb460d034f825b953, &exec_b460d034f825b953, 0x00004b46 },
		{ 0x4f0c542343ac22b9, &exec_4f0c542343ac22b9, 0x0000245c },
		{ 0xa81e81b24a013125, &exec_a81e81b24a013125, 0x0000150a },
		{ 0x8ee055d1e45f91d6, &exec_8ee055d1e45f91d6, 0x00001510 },
		{ 0x3160ffe5d8fa7225, &exec_3160ffe5d8fa7225, 0x00001515 },
		{ 0xda07f982412b4ee1, &exec_da07f982412b4ee1, 0x0000151a },
		{ 0x4f9e8fb80fa46c1b, &exec_4f9e8fb80fa46c1b, 0x00001522 },
		{ 0xddb4e38e019c483e, &exec_ddb4e38e019c483e, 0x00001527 },
		{ 0x7733120b840f4058, &exec_7733120b840f4058, 0x0000152a },
		{ 0x173abd87f982e245, &exec_173abd87f982e245, 0x00002f45 },
		{ 0x9bf7a33f2ef24038, &exec_9bf7a33f2ef24038, 0x0000152e },
		{ 0x6e53555d770287d9, &exec_6e53555d770287d9, 0x0000183d },
		{ 0x6d66acb53c9cede7, &exec_6d66acb53c9cede7, 0x000015ba },
		{ 0x88aacc035ec6ee2e, &exec_88aacc035ec6ee2e, 0x00001533 },
		{ 0xa377cba96cd89cfe, &exec_a377cba96cd89cfe, 0x00001537 },
		{ 0xf11a618846cdefe0, &exec_f11a618846cdefe0, 0x000017b2 },
		{ 0xc3e35ac6f6779a51, &exec_c3e35ac6f6779a51, 0x00001543 },
		{ 0x7761d9862f25417b, &exec_7761d9862f25417b, 0x00001546 },
		{ 0x2101822d562c6cd0, &exec_2101822d562c6cd0, 0x0000154a },
		{ 0x521a98ed04b2dc91, &exec_521a98ed04b2dc91, 0x0000154f },
		{ 0x4c993556bb84cbaa, &exec_4c993556bb84cbaa, 0x00004a3f },
		{ 0x67cb7e2381b34f04, &exec_67cb7e2381b34f04, 0x00001553 },
		{ 0x270c08d293dbb20f, &exec_270c08d293dbb20f, 0x00001810 },
		{ 0xc31aacbda64631a9, &exec_c31aacbda64631a9, 0x00001556 },
		{ 0x8611028106bea520, &exec_8611028106bea520, 0x0000155a },
		{ 0x61b7d5c4e36096cf, &exec_61b7d5c4e36096cf, 0x00003ae1 },
		{ 0xa21fc516d6ff23fa, &exec_a21fc516d6ff23fa, 0x0000155e },
		{ 0x4cc7f5f4ac574735, &exec_4cc7f5f4ac574735, 0x00001561 },
		{ 0xe136750f284504dd, &exec_e136750f284504dd, 0x00004abd },
		{ 0x09a49c607d843db8, &exec_09a49c607d843db8, 0x00001573 },
		{ 0x78ebc7095f92e3e4, &exec_78ebc7095f92e3e4, 0x00001575 },
		{ 0x75af5824f9bb6b4d, &exec_75af5824f9bb6b4d, 0x00001847 },
		{ 0x83e44487144cfdf5, &exec_83e44487144cfdf5, 0x00001656 },
		{ 0xf90093fbcce7b642, &exec_f90093fbcce7b642, 0x0000157b },
		{ 0x24ea77b7babcebe4, &exec_24ea77b7babcebe4, 0x0000157e },
		{ 0x751e219bd75def0e, &exec_751e219bd75def0e, 0x000032be },
		{ 0xda793c154402d290, &exec_da793c154402d290, 0x00001580 },
		{ 0x9dac840ddc9bd893, &exec_9dac840ddc9bd893, 0x000039ff },
		{ 0x74fee3e95a41ad21, &exec_74fee3e95a41ad21, 0x0000229a },
		{ 0xff922b4a9eb1e8e0, &exec_ff922b4a9eb1e8e0, 0x00001ac4 },
		{ 0xce31ba5bbd08370e, &exec_ce31ba5bbd08370e, 0x00002f73 },
		{ 0xae50e50e2b4e9178, &exec_ae50e50e2b4e9178, 0x00001586 },
		{ 0xeb91b3a083afaa88, &exec_eb91b3a083afaa88, 0x00001593 },
		{ 0x041eff2cd5d63928, &exec_041eff2cd5d63928, 0x00001597 },
		{ 0xb1c8932ade47295c, &exec_b1c8932ade47295c, 0x000015a3 },
		{ 0x69ff880d975234ef, &exec_69ff880d975234ef, 0x000021f8 },
		{ 0x06b3e93a4a1ed2ef, &exec_06b3e93a4a1ed2ef, 0x000022e4 },
		{ 0xaaca8e8337ae3b7e, &exec_aaca8e8337ae3b7e, 0x000015a9 },
		{ 0x282e1308af534bfe, &exec_282e1308af534bfe, 0x000015ae },
		{ 0xe265a221a63e9333, &exec_e265a221a63e9333, 0x000015b6 },
		{ 0x80c6c889985a5d02, &exec_80c6c889985a5d02, 0x000020e2 },
		{ 0xf6c48926d6120a74, &exec_f6c48926d6120a74, 0x000015be },
		{ 0xa582a91a39dfe89d, &exec_a582a91a39dfe89d, 0x00000000 },
		{ 0x38a7ba54d479715b, &exec_38a7ba54d479715b, 0x000015c2 },
		{ 0x5cb14d4fef8aad66, &exec_5cb14d4fef8aad66, 0x000015c8 },
		{ 0x85032749f9de6aba, &exec_85032749f9de6aba, 0x000015ce },
		{ 0xa3ca840cf2c92ad2, &exec_a3ca840cf2c92ad2, 0x000015df },
		{ 0xac4934c3463a9459, &exec_ac4934c3463a9459, 0x000015e4 },
		{ 0x0f586ba56b6f9cb9, &exec_0f586ba56b6f9cb9, 0x00003422 },
		{ 0xb95f639077470455, &exec_b95f639077470455, 0x000015f9 },
		{ 0xa12427a39d800374, &exec_a12427a39d800374, 0x000015fc },
		{ 0x82d1f2b41c2476de, &exec_82d1f2b41c2476de, 0x000025e2 },
		{ 0x4e8565894b3cc730, &exec_4e8565894b3cc730, 0x000021b1 },
		{ 0x6e7f16590122bc99, &exec_6e7f16590122bc99, 0x00001600 },
		{ 0x8fe41cd34544a28b, &exec_8fe41cd34544a28b, 0x00001602 },
		{ 0x1d82d1edfaf0b093, &exec_1d82d1edfaf0b093, 0x00001604 },
		{ 0xf3d50d4315fb6ff3, &exec_f3d50d4315fb6ff3, 0x0000160c },
		{ 0xca34ffa1607dd43c, &exec_ca34ffa1607dd43c, 0x00001617 },
		{ 0x34c7d1745a2c0116, &exec_34c7d1745a2c0116, 0x0000186d },
		{ 0xc4e3d5bb59adaff1, &exec_c4e3d5bb59adaff1, 0x0000161b },
		{ 0xcbbb1a05331d1fbf, &exec_cbbb1a05331d1fbf, 0x00003edc },
		{ 0x2d451fe6e3a5ebc3, &exec_2d451fe6e3a5ebc3, 0x00003b8c },
		{ 0xaf86d1236ba7230b, &exec_af86d1236ba7230b, 0x00001620 },
		{ 0xa3c3c68eb38471fb, &exec_a3c3c68eb38471fb, 0x0000162b },
		{ 0xff44e96f44b67879, &exec_ff44e96f44b67879, 0x00004323 },
		{ 0x45f028a5e26852e4, &exec_45f028a5e26852e4, 0x00001630 },
		{ 0xbebb9224f1728dd4, &exec_bebb9224f1728dd4, 0x00001638 },
		{ 0x63db2f43c0eae86d, &exec_63db2f43c0eae86d, 0x00001641 },
		{ 0x5b7724d6f262bdce, &exec_5b7724d6f262bdce, 0x00001646 },
		{ 0x8a6f44fa5595ac58, &exec_8a6f44fa5595ac58, 0x0000164d },
		{ 0xfcca7bc59c3e4339, &exec_fcca7bc59c3e4339, 0x00001653 },
		{ 0x5a6831a453b7d33a, &exec_5a6831a453b7d33a, 0x0000165a },
		{ 0x99d1dd0b7ef16fde, &exec_99d1dd0b7ef16fde, 0x0000165d },
		{ 0xfc75f214cbe11d17, &exec_fc75f214cbe11d17, 0x0000165f },
		{ 0x87ea0e29f004df85, &exec_87ea0e29f004df85, 0x0000166f },
		{ 0x5e651ac6223716cb, &exec_5e651ac6223716cb, 0x00001681 },
		{ 0x332c8e277c058a05, &exec_332c8e277c058a05, 0x00001688 },
		{ 0x677564dea381aa6a, &exec_677564dea381aa6a, 0x0000168e },
		{ 0x7e39af121a149423, &exec_7e39af121a149423, 0x00001693 },
		{ 0x04dbef004482eb3e, &exec_04dbef004482eb3e, 0x00002418 },
		{ 0x76fab6a0573b9ac0, &exec_76fab6a0573b9ac0, 0x0000169d },
		{ 0xe9d6fef2a0c2cef9, &exec_e9d6fef2a0c2cef9, 0x000016a3 },
		{ 0x5ca6b17530352fe0, &exec_5ca6b17530352fe0, 0x00004516 },
		{ 0x75ae9f3787958e6d, &exec_75ae9f3787958e6d, 0x000016a6 },
		{ 0x78ebfd97a63ef64c, &exec_78ebfd97a63ef64c, 0x000016a8 },
		{ 0x42eabd4040b3ec2b, &exec_42eabd4040b3ec2b, 0x000016ae },
		{ 0x2cc2c3452aeadb67, &exec_2cc2c3452aeadb67, 0x0000453e },
		{ 0x7f4c9645318f5323, &exec_7f4c9645318f5323, 0x000016b2 },
		{ 0x8ce66f345b51dba2, &exec_8ce66f345b51dba2, 0x000020f9 },
		{ 0x6a733b1acf6753d8, &exec_6a733b1acf6753d8, 0x000016b6 },
		{ 0x7bf3160a2cb57567, &exec_7bf3160a2cb57567, 0x000037a6 },
		{ 0xd523ddff71f4ae4a, &exec_d523ddff71f4ae4a, 0x0000477a },
		{ 0x7924e96fcd1d29c6, &exec_7924e96fcd1d29c6, 0x000016b8 },
		{ 0x48c171febccd719e, &exec_48c171febccd719e, 0x00002a15 },
		{ 0x1dace5cad87bc1be, &exec_1dace5cad87bc1be, 0x000016bc },
		{ 0x0a57eb309f21a85b, &exec_0a57eb309f21a85b, 0x000016c0 },
		{ 0x7715e6a05752b408, &exec_7715e6a05752b408, 0x000016ca },
		{ 0x29dcc87dfa466a30, &exec_29dcc87dfa466a30, 0x000016cd },
		{ 0x2aa11276f6b4ff17, &exec_2aa11276f6b4ff17, 0x000016d5 },
		{ 0x16149abcb5df6d97, &exec_16149abcb5df6d97, 0x000016db },
		{ 0x644c1c079c971a92, &exec_644c1c079c971a92, 0x0000176e },
		{ 0x663b780bbce7177b, &exec_663b780bbce7177b, 0x000016e3 },
		{ 0x4323de0c116c5832, &exec_4323de0c116c5832, 0x000016e6 },
		{ 0xc199d3a4f0b10466, &exec_c199d3a4f0b10466, 0x000016ee },
		{ 0x48ef5ab26aa01406, &exec_48ef5ab26aa01406, 0x000031c9 },
		{ 0x0d4c140dab9a56ec, &exec_0d4c140dab9a56ec, 0x00001702 },
		{ 0x7139e0cb5b13bb83, &exec_7139e0cb5b13bb83, 0x00002146 },
		{ 0x0aca647eb403b805, &exec_0aca647eb403b805, 0x00001704 },
		{ 0xe65ece433c32d7b3, &exec_e65ece433c32d7b3, 0x0000170a },
		{ 0x3d270d21aa6a8761, &exec_3d270d21aa6a8761, 0x00001b69 },
		{ 0xd09a0bef627da8f6, &exec_d09a0bef627da8f6, 0x00001715 },
		{ 0xfad713df42be2ad9, &exec_fad713df42be2ad9, 0x00001eb4 },
		{ 0xc2f51b24363325f1, &exec_c2f51b24363325f1, 0x00001723 },
		{ 0xd8daa95c6a07ce4e, &exec_d8daa95c6a07ce4e, 0x0000172c },
		{ 0x6066391349ca8e09, &exec_6066391349ca8e09, 0x0000172e },
		{ 0x4f3716bb06a6a92d, &exec_4f3716bb06a6a92d, 0x00001738 },
		{ 0xc2bf74ba58045eb8, &exec_c2bf74ba58045eb8, 0x00001742 },
		{ 0x19373ab023cddbfa, &exec_19373ab023cddbfa, 0x00001916 },
		{ 0xf299f6c58ed22d1f, &exec_f299f6c58ed22d1f, 0x00001746 },
		{ 0xfc8e84a3369e8160, &exec_fc8e84a3369e8160, 0x00001749 },
		{ 0x6a917aa7ccd4286c, &exec_6a917aa7ccd4286c, 0x00002bd0 },
		{ 0xc160818336e2159e, &exec_c160818336e2159e, 0x00001fd9 },
		{ 0x374510e86ec579a4, &exec_374510e86ec579a4, 0x00001bf6 },
		{ 0xab379646434fe49a, &exec_ab379646434fe49a, 0x0000174e },
		{ 0x7de97b715215e09f, &exec_7de97b715215e09f, 0x00001754 },
		{ 0xd36039a9b33f6971, &exec_d36039a9b33f6971, 0x0000175c },
		{ 0x3469a8130662d7a0, &exec_3469a8130662d7a0, 0x00001760 },
		{ 0xba8e417412a0a65c, &exec_ba8e417412a0a65c, 0x00001765 },
		{ 0xaf9f1cdee65d0ef9, &exec_af9f1cdee65d0ef9, 0x00004428 },
		{ 0xa1e005f8943e42d7, &exec_a1e005f8943e42d7, 0x0000482a },
		{ 0x611228b58b3a0c47, &exec_611228b58b3a0c47, 0x00001784 },
		{ 0xadb5decd53077286, &exec_adb5decd53077286, 0x00001e03 },
		{ 0x4e9872e883842294, &exec_4e9872e883842294, 0x00004a88 },
		{ 0xc9d40b81e334356f, &exec_c9d40b81e334356f, 0x00003e32 },
		{ 0xcc6a51e280fc92c7, &exec_cc6a51e280fc92c7, 0x0000178f },
		{ 0x75ab39378792ab44, &exec_75ab39378792ab44, 0x0000179d },
		{ 0x0ddc9b4e0d597dd6, &exec_0ddc9b4e0d597dd6, 0x0000179f },
		{ 0x380b7cdeefdb7dbb, &exec_380b7cdeefdb7dbb, 0x0000344c },
		{ 0xbf1a381d5b998d60, &exec_bf1a381d5b998d60, 0x000017a9 },
		{ 0xb18422ca106eefdc, &exec_b18422ca106eefdc, 0x00001ed8 },
		{ 0xea9138eda8366b1c, &exec_ea9138eda8366b1c, 0x000030cd },
		{ 0x597ee80a29e69de8, &exec_597ee80a29e69de8, 0x00002950 },
		{ 0x3d8ca5962e0edba2, &exec_3d8ca5962e0edba2, 0x00001960 },
		{ 0x75a71b09e0c6e2c4, &exec_75a71b09e0c6e2c4, 0x000017b8 },
		{ 0x6490434f11e7dbbe, &exec_6490434f11e7dbbe, 0x000017cd },
		{ 0x79cd31bdbd21465b, &exec_79cd31bdbd21465b, 0x000027c1 },
		{ 0xbab9fd2bf797afbb, &exec_bab9fd2bf797afbb, 0x00003483 },
		{ 0x2a8a9bd903088bb4, &exec_2a8a9bd903088bb4, 0x00004b59 },
		{ 0x0edfcd84ebe64d60, &exec_0edfcd84ebe64d60, 0x000037fe },
		{ 0xa728115091db1f25, &exec_a728115091db1f25, 0x000017d4 },
		{ 0x0e0397f07ce33a0d, &exec_0e0397f07ce33a0d, 0x00001a8b },
		{ 0x9d582f6585c9bff1, &exec_9d582f6585c9bff1, 0x000017d7 },
		{ 0xeb10546079d69eb6, &exec_eb10546079d69eb6, 0x0000324c },
		{ 0xc633b86dc2c9d1ec, &exec_c633b86dc2c9d1ec, 0x000017db },
		{ 0x372cbe8a4475a70f, &exec_372cbe8a4475a70f, 0x000017e3 },
		{ 0x3e9e1c6f8cf0efa4, &exec_3e9e1c6f8cf0efa4, 0x00001f32 },
		{ 0xce91325c17e55c13, &exec_ce91325c17e55c13, 0x000018b8 },
		{ 0x9c183a46176d8430, &exec_9c183a46176d8430, 0x000017e7 },
		{ 0x79f4123099c27a47, &exec_79f4123099c27a47, 0x00001b47 },
		{ 0xc9ba5a95c58ac1fd, &exec_c9ba5a95c58ac1fd, 0x000017f0 },
		{ 0x15d71394b56a2378, &exec_15d71394b56a2378, 0x00001a62 },
		{ 0xedb15e3049b5d81b, &exec_edb15e3049b5d81b, 0x00001c30 },
		{ 0x6c031fc0dc920b70, &exec_6c031fc0dc920b70, 0x00001804 },
		{ 0xa380004ab7f1da97, &exec_a380004ab7f1da97, 0x0000180b },
		{ 0xcf1eff4272e1affd, &exec_cf1eff4272e1affd, 0x00002906 },
		{ 0xe8ec945f0652b243, &exec_e8ec945f0652b243, 0x000038b3 },
		{ 0x77d899438b6b2019, &exec_77d899438b6b2019, 0x00001815 },
		{ 0x1eac24c2e6be7717, &exec_1eac24c2e6be7717, 0x00001a4d },
		{ 0x102eb07677532fc5, &exec_102eb07677532fc5, 0x00003067 },
		{ 0x519ebc75faedface, &exec_519ebc75faedface, 0x0000181a },
		{ 0x0e225a049d4d4e61, &exec_0e225a049d4d4e61, 0x00001822 },
		{ 0x1d7655cc6e72c9ac, &exec_1d7655cc6e72c9ac, 0x00002540 },
		{ 0x0bfd756ecae0c1c9, &exec_0bfd756ecae0c1c9, 0x00001826 },
		{ 0x43968ddb4934a729, &exec_43968ddb4934a729, 0x00002425 },
		{ 0xc40228c3585339b5, &exec_c40228c3585339b5, 0x000028b3 },
		{ 0x98b9da050a1a7e42, &exec_98b9da050a1a7e42, 0x0000182b },
		{ 0xc014386ff85dfdc8, &exec_c014386ff85dfdc8, 0x00002303 },
		{ 0xad75e3982876018b, &exec_ad75e3982876018b, 0x00001830 },
		{ 0x8906578a0f6cd83e, &exec_8906578a0f6cd83e, 0x00003b39 },
		{ 0xf3d47e896ad06055, &exec_f3d47e896ad06055, 0x0000334b },
		{ 0x841a356d326e4287, &exec_841a356d326e4287, 0x00001833 },
		{ 0x614087756e29413e, &exec_614087756e29413e, 0x00002269 },
		{ 0xbdd773f816d56e4c, &exec_bdd773f816d56e4c, 0x00001836 },
		{ 0xa43cc1da35b96526, &exec_a43cc1da35b96526, 0x00001842 },
		{ 0xa1e152abcc562b70, &exec_a1e152abcc562b70, 0x00001861 },
		{ 0x829a91c933d7e3c0, &exec_829a91c933d7e3c0, 0x00001867 },
		{ 0xcf5ab3fbc259646e, &exec_cf5ab3fbc259646e, 0x0000186a },
		{ 0x34a9b16395a6dff1, &exec_34a9b16395a6dff1, 0x000028f1 },
		{ 0x70aae0a64fb365dd, &exec_70aae0a64fb365dd, 0x0000220b },
		{ 0x492e7a905f055202, &exec_492e7a905f055202, 0x0000290e },
		{ 0xda12d107479fe23f, &exec_da12d107479fe23f, 0x00001871 },
		{ 0x065ef4d73d233f3e, &exec_065ef4d73d233f3e, 0x0000187a },
		{ 0xb7e780c66f9044aa, &exec_b7e780c66f9044aa, 0x0000187e },
		{ 0x3574e69f393d1ca6, &exec_3574e69f393d1ca6, 0x00003083 },
		{ 0x5452398580afb298, &exec_5452398580afb298, 0x00001884 },
		{ 0x6043fabe4b463bf2, &exec_6043fabe4b463bf2, 0x00001f39 },
		{ 0x5108b982ed7b010b, &exec_5108b982ed7b010b, 0x00004940 },
		{ 0x6a8ec482e6915d68, &exec_6a8ec482e6915d68, 0x00001887 },
		{ 0xd68610b6e806d45e, &exec_d68610b6e806d45e, 0x0000188f },
		{ 0xb7e065a6f3faea20, &exec_b7e065a6f3faea20, 0x00001894 },
		{ 0x8e1182810c7221a3, &exec_8e1182810c7221a3, 0x00001897 },
		{ 0x749fd2141a7432b4, &exec_749fd2141a7432b4, 0x00000000 },
		{ 0xecc08346ec3a0257, &exec_ecc08346ec3a0257, 0x00003997 },
		{ 0x117c86dbc8afb773, &exec_117c86dbc8afb773, 0x0000189e },
		{ 0xc95a41efdd65570c, &exec_c95a41efdd65570c, 0x000018a6 },
		{ 0x67c4c3ec411a0b34, &exec_67c4c3ec411a0b34, 0x00001f4e },
		{ 0x68a4347abee38ff4, &exec_68a4347abee38ff4, 0x000029d9 },
		{ 0xd0676daf0577625b, &exec_d0676daf0577625b, 0x000041a5 },
		{ 0x963d7c8665f85df6, &exec_963d7c8665f85df6, 0x000018c6 },
		{ 0xc75b35023c35fac4, &exec_c75b35023c35fac4, 0x00003cf9 },
		{ 0x883ad58885285f9f, &exec_883ad58885285f9f, 0x000047b9 },
		{ 0xe90ce40c4c17830b, &exec_e90ce40c4c17830b, 0x000018c9 },
		{ 0x9773fce275c4d299, &exec_9773fce275c4d299, 0x000018d3 },
		{ 0xcaa161d9a198e730, &exec_caa161d9a198e730, 0x000018d8 },
		{ 0xf1b5c94863185e25, &exec_f1b5c94863185e25, 0x000018da },
		{ 0xea3dc5d6a4ad6504, &exec_ea3dc5d6a4ad6504, 0x000018e5 },
		{ 0xaf78be2e787e5a9b, &exec_af78be2e787e5a9b, 0x000042c8 },
		{ 0x87652146278b3946, &exec_87652146278b3946, 0x00001a86 },
		{ 0x0cebe5567cd5a3d8, &exec_0cebe5567cd5a3d8, 0x000018f9 },
		{ 0x97b0c3c3541d89b0, &exec_97b0c3c3541d89b0, 0x00001907 },
		{ 0x4dce092beef3a7bd, &exec_4dce092beef3a7bd, 0x00003ce4 },
		{ 0x4e5ef489a94d0027, &exec_4e5ef489a94d0027, 0x0000190b },
		{ 0x4d80d31f35d446f5, &exec_4d80d31f35d446f5, 0x00001910 },
		{ 0xc531f706e23bed1c, &exec_c531f706e23bed1c, 0x00001919 },
		{ 0x71453d301823a43c, &exec_71453d301823a43c, 0x0000191d },
		{ 0x45ace57a29384a84, &exec_45ace57a29384a84, 0x00001922 },
		{ 0x9b3af770ace07d58, &exec_9b3af770ace07d58, 0x0000192b },
		{ 0x9c9133cb759372a6, &exec_9c9133cb759372a6, 0x0000192e },
		{ 0x715377f7f1cc9b66, &exec_715377f7f1cc9b66, 0x00004ad8 },
		{ 0x6f1eee623f3e87dd, &exec_6f1eee623f3e87dd, 0x00001ab3 },
		{ 0x171491e5f54a5e42, &exec_171491e5f54a5e42, 0x000049e1 },
		{ 0xfe496b2985f69bdf, &exec_fe496b2985f69bdf, 0x00004bc2 },
		{ 0xa120e08ea780acea, &exec_a120e08ea780acea, 0x00001eeb },
		{ 0x20ea7bf94e08bfbf, &exec_20ea7bf94e08bfbf, 0x00001942 },
		{ 0xd0421b8c5e8bcf85, &exec_d0421b8c5e8bcf85, 0x00001945 },
		{ 0xb0ff49359b36f5fc, &exec_b0ff49359b36f5fc, 0x00000000 },
		{ 0xbb3f30a7e427bd2f, &exec_bb3f30a7e427bd2f, 0x000031c5 },
		{ 0x87400d7ca1c52601, &exec_87400d7ca1c52601, 0x000044a3 },
		{ 0xf14ba2f767ac22d9, &exec_f14ba2f767ac22d9, 0x000049b5 },
		{ 0x51263396752a89af, &exec_51263396752a89af, 0x00001948 },
		{ 0x69318f2df7514f6f, &exec_69318f2df7514f6f, 0x0000222e },
		{ 0x2616fe342f324edc, &exec_2616fe342f324edc, 0x0000198d },
		{ 0x0101515e0a1c0fe7, &exec_0101515e0a1c0fe7, 0x00001ea0 },
		{ 0xeda303f0aa2f0556, &exec_eda303f0aa2f0556, 0x00001971 },
		{ 0x2cc10318ea95a868, &exec_2cc10318ea95a868, 0x00004968 },
		{ 0x01c865d4aa25d858, &exec_01c865d4aa25d858, 0x00001d27 },
		{ 0x05b452b5c5dc7b2d, &exec_05b452b5c5dc7b2d, 0x0000198a },
		{ 0xd971777d3ca49c2e, &exec_d971777d3ca49c2e, 0x00001efa },
		{ 0x8c602cbbb35484a5, &exec_8c602cbbb35484a5, 0x0000199b },
		{ 0x4bb78f0def07340a, &exec_4bb78f0def07340a, 0x00002f65 },
		{ 0xb1d99f204b824ae8, &exec_b1d99f204b824ae8, 0x000019a8 },
		{ 0x0ef5bfa1b2a740d8, &exec_0ef5bfa1b2a740d8, 0x0000225b },
		{ 0xcb8c42b5ddaff56b, &exec_cb8c42b5ddaff56b, 0x00001b42 },
		{ 0xdda7c142fb339ba2, &exec_dda7c142fb339ba2, 0x000019ac },
		{ 0x68da0825fb3da1c0, &exec_68da0825fb3da1c0, 0x000019b2 },
		{ 0x9e7408b5b5b7198b, &exec_9e7408b5b5b7198b, 0x00003a95 },
		{ 0x76fda930c081df23, &exec_76fda930c081df23, 0x00002ee1 },
		{ 0xd3e36fa8fc32ed1f, &exec_d3e36fa8fc32ed1f, 0x000019bb },
		{ 0x95c1e81746a77d14, &exec_95c1e81746a77d14, 0x000019c0 },
		{ 0xc3be09edf1100c47, &exec_c3be09edf1100c47, 0x00002b66 },
		{ 0x2097124b32329491, &exec_2097124b32329491, 0x0000416b },
		{ 0x9d7d7c62baf24d89, &exec_9d7d7c62baf24d89, 0x000019c4 },
		{ 0x40fcd5a0343bec07, &exec_40fcd5a0343bec07, 0x00001b6f },
		{ 0x246b4720a6696b47, &exec_246b4720a6696b47, 0x000021c3 },
		{ 0x6f3a35881b7a65b9, &exec_6f3a35881b7a65b9, 0x00002555 },
		{ 0x8718c1086ef32501, &exec_8718c1086ef32501, 0x000019c9 },
		{ 0x47a9d177560169fc, &exec_47a9d177560169fc, 0x000019cd },
		{ 0x3c27dbf39b3ee8f7, &exec_3c27dbf39b3ee8f7, 0x00004765 },
		{ 0x3e77bfc386d0a366, &exec_3e77bfc386d0a366, 0x000019d2 },
		{ 0x1267a58f319e7ce5, &exec_1267a58f319e7ce5, 0x00001bff },
		{ 0x75bacf022edfa743, &exec_75bacf022edfa743, 0x000019da },
		{ 0x4708f1de3d26af78, &exec_4708f1de3d26af78, 0x00002209 },
		{ 0xf80d1856882bf370, &exec_f80d1856882bf370, 0x000033c0 },
		{ 0x22f57e3680c02dfe, &exec_22f57e3680c02dfe, 0x000019ef },
		{ 0x193d0575299571b5, &exec_193d0575299571b5, 0x000026c5 },
		{ 0xb0f43c99d950fd58, &exec_b0f43c99d950fd58, 0x000019fd },
		{ 0x9574ad4f1652f579, &exec_9574ad4f1652f579, 0x00001a01 },
		{ 0x6a89b68b526e5484, &exec_6a89b68b526e5484, 0x000034ca },
		{ 0x1e457f69b0db654d, &exec_1e457f69b0db654d, 0x00002964 },
		{ 0x6b5bb766b2508b2c, &exec_6b5bb766b2508b2c, 0x000020cd },
		{ 0x0be5a23a09aad16d, &exec_0be5a23a09aad16d, 0x00001a05 },
		{ 0x941e04bf21e40b09, &exec_941e04bf21e40b09, 0x0000242f },
		{ 0x6dbd697338b7dc51, &exec_6dbd697338b7dc51, 0x00001a0f },
		{ 0x83b5d693cc0c3a4d, &exec_83b5d693cc0c3a4d, 0x00001a13 },
		{ 0x0248e7157eae4fba, &exec_0248e7157eae4fba, 0x00001a18 },
		{ 0xe9d786ccf19eabff, &exec_e9d786ccf19eabff, 0x0000338c },
		{ 0x9bb7e2b6ff80ea6d, &exec_9bb7e2b6ff80ea6d, 0x00004a6d },
		{ 0xb19381570d74d04b, &exec_b19381570d74d04b, 0x00001a2a },
		{ 0xb3a52d350e786923, &exec_b3a52d350e786923, 0x00001ed0 },
		{ 0xcdda821090761b71, &exec_cdda821090761b71, 0x00001a2f },
		{ 0xe4b78a60d69d0f74, &exec_e4b78a60d69d0f74, 0x00001a37 },
		{ 0x8a370ac05418bf29, &exec_8a370ac05418bf29, 0x00001a40 },
		{ 0x0bf5117c7348c192, &exec_0bf5117c7348c192, 0x00001a44 },
		{ 0xc61d30215e9d5ceb, &exec_c61d30215e9d5ceb, 0x00001a49 },
		{ 0x6da1f122619d1fb9, &exec_6da1f122619d1fb9, 0x00001f9e },
		{ 0xad2b412ce37ca663, &exec_ad2b412ce37ca663, 0x00002452 },
		{ 0x84158be3eed761d0, &exec_84158be3eed761d0, 0x00001a52 },
		{ 0x479377e1da69ff5a, &exec_479377e1da69ff5a, 0x00003d25 },
		{ 0x40bc507a493c74d7, &exec_40bc507a493c74d7, 0x00001a58 },
		{ 0xdc745011679cfc5f, &exec_dc745011679cfc5f, 0x00001a5f },
		{ 0x11c5f9a98a30cff5, &exec_11c5f9a98a30cff5, 0x00001a67 },
		{ 0x6453d09c001e4d08, &exec_6453d09c001e4d08, 0x00001f16 },
		{ 0x8b55867cfcc46bdd, &exec_8b55867cfcc46bdd, 0x0000470b },
		{ 0x422c6e16f8ebb3e6, &exec_422c6e16f8ebb3e6, 0x00001a6c },
		{ 0x04a8706962ff77b1, &exec_04a8706962ff77b1, 0x0000460d },
		{ 0x555cdd6d00e2d527, &exec_555cdd6d00e2d527, 0x00004af5 },
		{ 0x73304963978fff19, &exec_73304963978fff19, 0x00001a7f },
		{ 0x3e57595029873135, &exec_3e57595029873135, 0x00000000 },
		{ 0xa512351ccae3542e, &exec_a512351ccae3542e, 0x00001a84 },
		{ 0x32a7a143b38be3c6, &exec_32a7a143b38be3c6, 0x00001a88 },
		{ 0xf49c164da4a2636d, &exec_f49c164da4a2636d, 0x000033d5 },
		{ 0x22d58d4df75db7ce, &exec_22d58d4df75db7ce, 0x00001a90 },
		{ 0x0e63cce4c9ff2525, &exec_0e63cce4c9ff2525, 0x00001a93 },
		{ 0x6bc725b2ad2b258b, &exec_6bc725b2ad2b258b, 0x00001fae },
		{ 0xb185d318ad4ff59f, &exec_b185d318ad4ff59f, 0x000048e0 },
		{ 0x2bbfa98e9928086b, &exec_2bbfa98e9928086b, 0x0000422b },
		{ 0xcdb79a6b9a95fdd1, &exec_cdb79a6b9a95fdd1, 0x00002d91 },
		{ 0xd41ed655438b0a45, &exec_d41ed655438b0a45, 0x00001aaf },
		{ 0x61bc337b2bcc50bf, &exec_61bc337b2bcc50bf, 0x0000284c },
		{ 0x3c1ad2561d57cd91, &exec_3c1ad2561d57cd91, 0x00001ab6 },
		{ 0x3577bc918e1c6882, &exec_3577bc918e1c6882, 0x00001abc },
		{ 0xd1b2936a49f6b6bd, &exec_d1b2936a49f6b6bd, 0x000034f5 },
		{ 0xdd5d35cd668164d0, &exec_dd5d35cd668164d0, 0x00001cc6 },
		{ 0xbc5a2fda9abb1ce5, &exec_bc5a2fda9abb1ce5, 0x000038ea },
		{ 0x90a1901a2ab71d20, &exec_90a1901a2ab71d20, 0x00003884 },
		{ 0x9547f89ea8192252, &exec_9547f89ea8192252, 0x000020a6 },
		{ 0xaa2e46fa6f12ce9b, &exec_aa2e46fa6f12ce9b, 0x00002174 },
		{ 0x6d5ac72d3efa97ec, &exec_6d5ac72d3efa97ec, 0x00002468 },
		{ 0xe12189056b9feab4, &exec_e12189056b9feab4, 0x00001acd },
		{ 0xa891ee4e3e4c10e8, &exec_a891ee4e3e4c10e8, 0x00001ad9 },
		{ 0x7a2769ac91eb5774, &exec_7a2769ac91eb5774, 0x00004440 },
		{ 0xbeb1a610898a116a, &exec_beb1a610898a116a, 0x00002e3e },
		{ 0x9c95dd84cf23a293, &exec_9c95dd84cf23a293, 0x00001aec },
		{ 0x2e82bd2fb648c067, &exec_2e82bd2fb648c067, 0x000022da },
		{ 0xa45d41fec75ca8be, &exec_a45d41fec75ca8be, 0x00001af0 },
		{ 0xe15274d1c077a0ef, &exec_e15274d1c077a0ef, 0x00002862 },
		{ 0xa7125d122fe3bb0d, &exec_a7125d122fe3bb0d, 0x00001af5 },
		{ 0x4754434a3bb76bd7, &exec_4754434a3bb76bd7, 0x00004192 },
		{ 0xca08cdaf93e6b9e0, &exec_ca08cdaf93e6b9e0, 0x00004682 },
		{ 0x6e3760bdc3027a17, &exec_6e3760bdc3027a17, 0x00002565 },
		{ 0x540531a8512b58f0, &exec_540531a8512b58f0, 0x00001afa },
		{ 0xea5c5691c210e70c, &exec_ea5c5691c210e70c, 0x00002da6 },
		{ 0x8190ce8688c68158, &exec_8190ce8688c68158, 0x000022de },
		{ 0x82e32a8709adb1d4, &exec_82e32a8709adb1d4, 0x0000461d },
		{ 0x35445b65591db5d4, &exec_35445b65591db5d4, 0x00001b00 },
		{ 0x4f4e79a5b18626fb, &exec_4f4e79a5b18626fb, 0x00002f62 },
		{ 0xb552743e6a1f0756, &exec_b552743e6a1f0756, 0x00001b0b },
		{ 0x680330190f99ed02, &exec_680330190f99ed02, 0x000033ce },
		{ 0xceeb0b48d6e0298e, &exec_ceeb0b48d6e0298e, 0x00001b17 },
		{ 0x74bee9f58d67dff7, &exec_74bee9f58d67dff7, 0x00003bcc },
		{ 0x82bfbe7af64ff4ee, &exec_82bfbe7af64ff4ee, 0x00001b80 },
		{ 0xb1969f9020e02c42, &exec_b1969f9020e02c42, 0x00001b1f },
		{ 0x8f5ffea53672a765, &exec_8f5ffea53672a765, 0x00001b23 },
		{ 0xb1e45e1c2fe9a173, &exec_b1e45e1c2fe9a173, 0x00004289 },
		{ 0x23b33832d3e5c6fb, &exec_23b33832d3e5c6fb, 0x000045ab },
		{ 0x0cc3832aae17b7e5, &exec_0cc3832aae17b7e5, 0x00001b26 },
		{ 0xd6ea3b74c600f267, &exec_d6ea3b74c600f267, 0x00001b2a },
		{ 0x2dfa717e91d7af9f, &exec_2dfa717e91d7af9f, 0x00001f9b },
		{ 0x1b1d288586c0f88f, &exec_1b1d288586c0f88f, 0x00001b2d },
		{ 0x554a61bed32c29ad, &exec_554a61bed32c29ad, 0x00001b3a },
		{ 0x202074e3bf781902, &exec_202074e3bf781902, 0x00001b3f },
		{ 0x12a5a8123fce39be, &exec_12a5a8123fce39be, 0x000020ff },
		{ 0xaeed669ae1f7f676, &exec_aeed669ae1f7f676, 0x00001b4c },
		{ 0xb328dd17987c387a, &exec_b328dd17987c387a, 0x00003d92 },
		{ 0x93403525d59ba983, &exec_93403525d59ba983, 0x00001b53 },
		{ 0x65d277fb6e4a00ea, &exec_65d277fb6e4a00ea, 0x00003f54 },
		{ 0x8cdb97a5a322b546, &exec_8cdb97a5a322b546, 0x00001ed4 },
		{ 0xc4c3dd390759d898, &exec_c4c3dd390759d898, 0x00001b57 },
		{ 0x1ddbadd886ed29ea, &exec_1ddbadd886ed29ea, 0x00002d5f },
		{ 0xcfbffcd799caea23, &exec_cfbffcd799caea23, 0x00002524 },
		{ 0xd276465d32b64a98, &exec_d276465d32b64a98, 0x000024b0 },
		{ 0x49240dc8361c4038, &exec_49240dc8361c4038, 0x00001b62 },
		{ 0x0110ec64afbdeb05, &exec_0110ec64afbdeb05, 0x00004659 },
		{ 0x39ca18c53f577ebf, &exec_39ca18c53f577ebf, 0x00001b74 },
		{ 0xeed1cab3201f1778, &exec_eed1cab3201f1778, 0x00001b7a },
		{ 0x6694b34fbe48dbf9, &exec_6694b34fbe48dbf9, 0x00001b87 },
		{ 0xf3aabb2f363d8b31, &exec_f3aabb2f363d8b31, 0x00001b8b },
		{ 0x48d155cdc2c269c1, &exec_48d155cdc2c269c1, 0x00001b9c },
		{ 0x98455b9f4af5eebc, &exec_98455b9f4af5eebc, 0x00001ba3 },
		{ 0x6baec4f17c431d1e, &exec_6baec4f17c431d1e, 0x00001baf },
		{ 0x64aebccfff2d221c, &exec_64aebccfff2d221c, 0x00004272 },
		{ 0xdf94b7a60e8ee344, &exec_df94b7a60e8ee344, 0x00002b72 },
		{ 0x8455326b66472234, &exec_8455326b66472234, 0x00001bb8 },
		{ 0xad9603c492c129d2, &exec_ad9603c492c129d2, 0x00004b51 },
		{ 0xacab57db62087d9b, &exec_acab57db62087d9b, 0x00001bc4 },
		{ 0xf7028c0f7fb8a139, &exec_f7028c0f7fb8a139, 0x00001bcc },
		{ 0xe9afa66c5b85d3f9, &exec_e9afa66c5b85d3f9, 0x00001bd6 },
		{ 0x3e6c4819a6bce28d, &exec_3e6c4819a6bce28d, 0x00001bdf },
		{ 0x1bc6ca6d0d41e693, &exec_1bc6ca6d0d41e693, 0x00001be5 },
		{ 0xe6e62453efc96197, &exec_e6e62453efc96197, 0x00000000 },
		{ 0x9e6345e7959cd613, &exec_9e6345e7959cd613, 0x00001bf0 },
		{ 0xc2912d352303b81a, &exec_c2912d352303b81a, 0x00001bf2 },
		{ 0x7c5969e76cf2f139, &exec_7c5969e76cf2f139, 0x00001bfa },
		{ 0x123a06f22dec9fa7, &exec_123a06f22dec9fa7, 0x00002161 },
		{ 0x087d4ccd1a823438, &exec_087d4ccd1a823438, 0x00003172 },
		{ 0xacd432ccb0c8f0ce, &exec_acd432ccb0c8f0ce, 0x00001bfc },
		{ 0xe7cfc59a5e3e7ac5, &exec_e7cfc59a5e3e7ac5, 0x0000343b },
		{ 0xbb57e33045d151f7, &exec_bb57e33045d151f7, 0x00001c0a },
		{ 0xf321390713fdce9c, &exec_f321390713fdce9c, 0x00002832 },
		{ 0x65804f3607d03e4d, &exec_65804f3607d03e4d, 0x000022b2 },
		{ 0x803ae4a49db87e9d, &exec_803ae4a49db87e9d, 0x00001c17 },
		{ 0x5cdb4aac8b00dbfe, &exec_5cdb4aac8b00dbfe, 0x00001c1d },
		{ 0x619731bbe67cfa81, &exec_619731bbe67cfa81, 0x00001c21 },
		{ 0xa63939d9c19e6306, &exec_a63939d9c19e6306, 0x00002f90 },
		{ 0x911d51c89af4c6fb, &exec_911d51c89af4c6fb, 0x00002d2b },
		{ 0x2351cac5d2b76cb8, &exec_2351cac5d2b76cb8, 0x00001c34 },
		{ 0x8b9793079535d8d7, &exec_8b9793079535d8d7, 0x00004a2b },
		{ 0x8a0a4fb377d8eeb4, &exec_8a0a4fb377d8eeb4, 0x00002e9d },
		{ 0xccfab636151912a5, &exec_ccfab636151912a5, 0x00001c3e },
		{ 0xdae544d0d42abd32, &exec_dae544d0d42abd32, 0x00001c44 },
		{ 0x2d41fc9aab5c47be, &exec_2d41fc9aab5c47be, 0x00001c48 },
		{ 0xa9ed212d3a88b6ca, &exec_a9ed212d3a88b6ca, 0x00001c4d },
		{ 0x0bed0099c2001c8a, &exec_0bed0099c2001c8a, 0x00001c77 },
		{ 0xbcd8cfa4fa591eac, &exec_bcd8cfa4fa591eac, 0x00003e24 },
		{ 0x6d333b51bc432144, &exec_6d333b51bc432144, 0x00001c81 },
		{ 0xb0803337701e5b87, &exec_b0803337701e5b87, 0x00001c86 },
		{ 0xca2bb175013c51b3, &exec_ca2bb175013c51b3, 0x00001c8b },
		{ 0xc77a87d26114fc20, &exec_c77a87d26114fc20, 0x00001c91 },
		{ 0x30f02f5bd0e75851, &exec_30f02f5bd0e75851, 0x00001c95 },
		{ 0xe38bae626727dfc5, &exec_e38bae626727dfc5, 0x00002296 },
		{ 0xafd06fb89c4e40b5, &exec_afd06fb89c4e40b5, 0x00001c9a },
		{ 0xd8799f9d68c0ed59, &exec_d8799f9d68c0ed59, 0x000036d8 },
		{ 0xba28ca9e19c8719d, &exec_ba28ca9e19c8719d, 0x00001c9d },
		{ 0x8070368040e95aec, &exec_8070368040e95aec, 0x00002d85 },
		{ 0x88f8b6fbad61970f, &exec_88f8b6fbad61970f, 0x00001ca5 },
		{ 0x56b4012be3eb045e, &exec_56b4012be3eb045e, 0x00002184 },
		{ 0xd34509a9b3285029, &exec_d34509a9b3285029, 0x00001cb6 },
		{ 0x61246b1ff21299af, &exec_61246b1ff21299af, 0x00001cba },
		{ 0xe1e7ed5954efc637, &exec_e1e7ed5954efc637, 0x00004993 },
		{ 0x8ad3cc04845d60ce, &exec_8ad3cc04845d60ce, 0x0000347f },
		{ 0xeb219e7607ce613a, &exec_eb219e7607ce613a, 0x000049c8 },
		{ 0x9eff5021cb31a7e7, &exec_9eff5021cb31a7e7, 0x00001ccd },
		{ 0x7dc4a68d7ae0b1fb, &exec_7dc4a68d7ae0b1fb, 0x000031d4 },
		{ 0xab44cf1676a47a24, &exec_ab44cf1676a47a24, 0x00001ffc },
		{ 0x60c8118e60479fbc, &exec_60c8118e60479fbc, 0x00001cd4 },
		{ 0x521af08830c25ce2, &exec_521af08830c25ce2, 0x00002a19 },
		{ 0xc173b9f1c3c0d3a0, &exec_c173b9f1c3c0d3a0, 0x00001cdb },
		{ 0x978652e0a08107ee, &exec_978652e0a08107ee, 0x00000000 },
		{ 0x352df675c5dbbb1a, &exec_352df675c5dbbb1a, 0x0000367d },
		{ 0x311a82608a6deac0, &exec_311a82608a6deac0, 0x00001cde },
		{ 0xe867a7b67c0ff7ad, &exec_e867a7b67c0ff7ad, 0x00003108 },
		{ 0xc65b3d927f9596f5, &exec_c65b3d927f9596f5, 0x00001ce5 },
		{ 0xfb3f2f7be20a6d9f, &exec_fb3f2f7be20a6d9f, 0x00001ce8 },
		{ 0x31d8dbc5dce7116a, &exec_31d8dbc5dce7116a, 0x00001cf3 },
		{ 0x0bbe38328ead8e3c, &exec_0bbe38328ead8e3c, 0x00001cf8 },
		{ 0x8e31c04d83572b49, &exec_8e31c04d83572b49, 0x000033fb },
		{ 0x7195a0a36d078d4d, &exec_7195a0a36d078d4d, 0x000045b4 },
		{ 0x9d75f767439512e9, &exec_9d75f767439512e9, 0x00002790 },
		{ 0x6e3e6cafe27ad577, &exec_6e3e6cafe27ad577, 0x00001d06 },
		{ 0xa9218e67f3df59a5, &exec_a9218e67f3df59a5, 0x00001d09 },
		{ 0x3ca07a0c83255dd6, &exec_3ca07a0c83255dd6, 0x00000000 },
		{ 0x887689a9a799a1d0, &exec_887689a9a799a1d0, 0x00001d12 },
		{ 0xc02cf0f9a32e9958, &exec_c02cf0f9a32e9958, 0x0000295f },
		{ 0xc0d1d48d13b74ed1, &exec_c0d1d48d13b74ed1, 0x00002404 },
		{ 0x160ed8f2446a1a7c, &exec_160ed8f2446a1a7c, 0x00002414 },
		{ 0x7e60e60c1076d200, &exec_7e60e60c1076d200, 0x00001d2f },
		{ 0x694e7923d2e6b151, &exec_694e7923d2e6b151, 0x00003d83 },
		{ 0x550e9d0cbd99b80b, &exec_550e9d0cbd99b80b, 0x00001d33 },
		{ 0x79c196750fbb69b3, &exec_79c196750fbb69b3, 0x00000000 },
		{ 0xd518dce80de3b1fc, &exec_d518dce80de3b1fc, 0x00001d3c },
		{ 0x74f01b2bed18abdc, &exec_74f01b2bed18abdc, 0x000028fb },
		{ 0x21b5788271825f2e, &exec_21b5788271825f2e, 0x00003192 },
		{ 0x45f6edd1c9253a41, &exec_45f6edd1c9253a41, 0x00001d44 },
		{ 0x9d5325891646a189, &exec_9d5325891646a189, 0x00001e72 },
		{ 0xb1eebaf952621eca, &exec_b1eebaf952621eca, 0x00001d4c },
		{ 0x3d3cf4c4c02c511f, &exec_3d3cf4c4c02c511f, 0x00001d55 },
		{ 0x2cfcb32e28fda70e, &exec_2cfcb32e28fda70e, 0x00001d58 },
		{ 0x7e3480c5e5920e44, &exec_7e3480c5e5920e44, 0x0000265d },
		{ 0xc94f0b2cdb880b9a, &exec_c94f0b2cdb880b9a, 0x00000000 },
		{ 0x1f1a6b7ba164966c, &exec_1f1a6b7ba164966c, 0x00001d61 },
		{ 0x5dfa89a698bd2ec0, &exec_5dfa89a698bd2ec0, 0x000037ad },
		{ 0x349f45f775825d06, &exec_349f45f775825d06, 0x00002dba },
		{ 0x78c4df115c2924e4, &exec_78c4df115c2924e4, 0x000025b8 },
		{ 0x9bce870128ac7e60, &exec_9bce870128ac7e60, 0x00001d64 },
		{ 0x792907c0f0e28076, &exec_792907c0f0e28076, 0x00001d6d },
		{ 0x5d5351bcec3ff48d, &exec_5d5351bcec3ff48d, 0x00001d75 },
		{ 0x1beb7c17394291f5, &exec_1beb7c17394291f5, 0x000025d1 },
		{ 0x39adaa8b558bad9f, &exec_39adaa8b558bad9f, 0x00001d85 },
		{ 0x781dadc6e49bb098, &exec_781dadc6e49bb098, 0x00001d94 },
		{ 0xd28be035019f32d5, &exec_d28be035019f32d5, 0x00001d9b },
		{ 0xaaf671b3a1033d8a, &exec_aaf671b3a1033d8a, 0x00001dad },
		{ 0xae3d7a7679ed7186, &exec_ae3d7a7679ed7186, 0x00001dbd },
		{ 0x89beb6b482f87d5d, &exec_89beb6b482f87d5d, 0x000035bd },
		{ 0xcd4442c5f89fa17a, &exec_cd4442c5f89fa17a, 0x00001dc4 },
		{ 0x39ff7fa21a80d0bf, &exec_39ff7fa21a80d0bf, 0x00001dd7 },
		{ 0x7339e39af3e0a887, &exec_7339e39af3e0a887, 0x00001deb },
		{ 0x5c69f3674bfc9ce9, &exec_5c69f3674bfc9ce9, 0x00003579 },
		{ 0x6d831e49b1474260, &exec_6d831e49b1474260, 0x00001dfd },
		{ 0x6d04d32350038f51, &exec_6d04d32350038f51, 0x00001e07 },
		{ 0x69fa3778de68888c, &exec_69fa3778de68888c, 0x00002c31 },
		{ 0x7b59a3e22fd9f69c, &exec_7b59a3e22fd9f69c, 0x0000234e },
		{ 0x6c55e2cee78de3b5, &exec_6c55e2cee78de3b5, 0x00001e19 },
		{ 0xfbd833a6dd2feb0f, &exec_fbd833a6dd2feb0f, 0x00001e31 },
		{ 0x0a06324f7f000f94, &exec_0a06324f7f000f94, 0x00003fa4 },
		{ 0x4c7bb3a86a5317fb, &exec_4c7bb3a86a5317fb, 0x0000340e },
		{ 0x07b24b98e8370377, &exec_07b24b98e8370377, 0x00003b21 },
		{ 0x687a8d63fe1f481b, &exec_687a8d63fe1f481b, 0x00001e5f },
		{ 0xd7a97c837ec9f52f, &exec_d7a97c837ec9f52f, 0x00002059 },
		{ 0x33c555eae4c87b6b, &exec_33c555eae4c87b6b, 0x00001e64 },
		{ 0x1288d97463595d08, &exec_1288d97463595d08, 0x00003932 },
		{ 0x283104e720c761af, &exec_283104e720c761af, 0x00002032 },
		{ 0x64c8926f14275a8a, &exec_64c8926f14275a8a, 0x00003782 },
		{ 0xe777eb75402d06b5, &exec_e777eb75402d06b5, 0x00001e77 },
		{ 0xc7ecc171472fbf85, &exec_c7ecc171472fbf85, 0x000043de },
		{ 0x556e1836b91437f7, &exec_556e1836b91437f7, 0x00001e7d },
		{ 0x6728757906159f77, &exec_6728757906159f77, 0x0000247d },
		{ 0x246a47953c99e520, &exec_246a47953c99e520, 0x00001e81 },
		{ 0xca644f70932a82e6, &exec_ca644f70932a82e6, 0x00001e89 },
		{ 0xa4a7c780038b1cfb, &exec_a4a7c780038b1cfb, 0x00001e8b },
		{ 0xbc655605ddfdb667, &exec_bc655605ddfdb667, 0x00002c78 },
		{ 0xaa078441161bc682, &exec_aa078441161bc682, 0x00001e8f },
		{ 0x158ceeacfbf2def4, &exec_158ceeacfbf2def4, 0x00001e93 },
		{ 0xa049614560d6b13e, &exec_a049614560d6b13e, 0x000041de },
		{ 0xabe41fff4836b82b, &exec_abe41fff4836b82b, 0x00002efe },
		{ 0x04b7fa34704d7b4f, &exec_04b7fa34704d7b4f, 0x00001eac },
		{ 0x4737dce3c4c3d2ed, &exec_4737dce3c4c3d2ed, 0x00001eb1 },
		{ 0x793ac6f3adcba581, &exec_793ac6f3adcba581, 0x000045c5 },
		{ 0x03ba4425c3d457e4, &exec_03ba4425c3d457e4, 0x000022c9 },
		{ 0x8892cbdf4a9cf74c, &exec_8892cbdf4a9cf74c, 0x000046ce },
		{ 0x5a25f2d689e397fd, &exec_5a25f2d689e397fd, 0x00002c3c },
		{ 0x1bda4e1d3b083fd3, &exec_1bda4e1d3b083fd3, 0x00001ec1 },
		{ 0xbd6fb0d542a54782, &exec_bd6fb0d542a54782, 0x00001ec8 },
		{ 0x887734f5c348d146, &exec_887734f5c348d146, 0x00003544 },
		{ 0x18907042d0969764, &exec_18907042d0969764, 0x000042d3 },
		{ 0x57a93417c34a63bd, &exec_57a93417c34a63bd, 0x00001edb },
		{ 0x2d603596bc575cbc, &exec_2d603596bc575cbc, 0x000026bf },
		{ 0xe4ad402d7c2da399, &exec_e4ad402d7c2da399, 0x00001ee5 },
		{ 0xa542b8b962e5ed8f, &exec_a542b8b962e5ed8f, 0x00001ef3 },
		{ 0xb89e1c2e9d599bf1, &exec_b89e1c2e9d599bf1, 0x00001f02 },
		{ 0xffe857540987a13a, &exec_ffe857540987a13a, 0x00001f88 },
		{ 0xb1545b831d6020a0, &exec_b1545b831d6020a0, 0x00001f0c },
		{ 0xf1d371e1685ae2a2, &exec_f1d371e1685ae2a2, 0x00003694 },
		{ 0x9d2e83a009fe4767, &exec_9d2e83a009fe4767, 0x00002888 },
		{ 0x2c07718e9e07aec6, &exec_2c07718e9e07aec6, 0x00001f10 },
		{ 0x907164de09de55f2, &exec_907164de09de55f2, 0x00002447 },
		{ 0x818917f8b7478f7a, &exec_818917f8b7478f7a, 0x00002d09 },
		{ 0x8dbe73af02285934, &exec_8dbe73af02285934, 0x00004257 },
		{ 0xa9dd6e2b53f2664b, &exec_a9dd6e2b53f2664b, 0x00002928 },
		{ 0xc134406df2f67328, &exec_c134406df2f67328, 0x00001f20 },
		{ 0x52e71aa36218b360, &exec_52e71aa36218b360, 0x00001f2a },
		{ 0x79d6af768d6a49ce, &exec_79d6af768d6a49ce, 0x0000438b },
		{ 0xfd651928f923bf68, &exec_fd651928f923bf68, 0x00001f3b },
		{ 0x13533f6ba79d3097, &exec_13533f6ba79d3097, 0x00000000 },
		{ 0x75fbbf27dbd762fa, &exec_75fbbf27dbd762fa, 0x00004344 },
		{ 0xbfa6f12841a96248, &exec_bfa6f12841a96248, 0x00001f41 },
		{ 0x29c3c46fd7a85af5, &exec_29c3c46fd7a85af5, 0x00001f43 },
		{ 0x60d392cb91036526, &exec_60d392cb91036526, 0x00002e20 },
		{ 0x5cfc6894cd631041, &exec_5cfc6894cd631041, 0x00001f56 },
		{ 0x79122b1c3fa4c289, &exec_79122b1c3fa4c289, 0x0000301e },
		{ 0x939ec2680d12e046, &exec_939ec2680d12e046, 0x00001f5d },
		{ 0x5d30deecaa9c3ee8, &exec_5d30deecaa9c3ee8, 0x00001f61 },
		{ 0xd843258f75391fb0, &exec_d843258f75391fb0, 0x00004754 },
		{ 0x114971ed5e11e877, &exec_114971ed5e11e877, 0x000036c1 },
		{ 0x3f5f194feded8d87, &exec_3f5f194feded8d87, 0x00001f66 },
		{ 0x9721df5077fcb539, &exec_9721df5077fcb539, 0x000023ef },
		{ 0x35375a6c23dcd0e9, &exec_35375a6c23dcd0e9, 0x000043fc },
		{ 0xe8df0e44b398f677, &exec_e8df0e44b398f677, 0x00001f72 },
		{ 0xf3313e227fbff725, &exec_f3313e227fbff725, 0x00001f7a },
		{ 0x4aa85ba763834200, &exec_4aa85ba763834200, 0x00001f80 },
		{ 0x8db89c3807929949, &exec_8db89c3807929949, 0x00001f94 },
		{ 0xb8b9600eb1b306e5, &exec_b8b9600eb1b306e5, 0x00001fa4 },
		{ 0xb84a8089028506b4, &exec_b84a8089028506b4, 0x00001fa9 },
		{ 0xe9054dc43e82a610, &exec_e9054dc43e82a610, 0x00001fb3 },
		{ 0x97309e42ad7299f6, &exec_97309e42ad7299f6, 0x00001fb6 },
		{ 0x3619d2660c430dcb, &exec_3619d2660c430dcb, 0x000030c6 },
		{ 0xb156c35c31624dc6, &exec_b156c35c31624dc6, 0x00002457 },
		{ 0xd6b9947cfced47cb, &exec_d6b9947cfced47cb, 0x00001fb9 },
		{ 0xf7e70ac524beea67, &exec_f7e70ac524beea67, 0x00001fc2 },
		{ 0x0a163e6ff0d0c576, &exec_0a163e6ff0d0c576, 0x00001fc5 },
		{ 0x596fa46618666e4b, &exec_596fa46618666e4b, 0x00001fcd },
		{ 0x91bfdf29f11436ca, &exec_91bfdf29f11436ca, 0x00001fd4 },
		{ 0xf0055ea6c6c5a5bd, &exec_f0055ea6c6c5a5bd, 0x00001fde },
		{ 0xd35d8e49e13336ac, &exec_d35d8e49e13336ac, 0x00001fe3 },
		{ 0xb17fabe288fcc77c, &exec_b17fabe288fcc77c, 0x00001fe7 },
		{ 0x6b40e440b314e263, &exec_6b40e440b314e263, 0x00001fec },
		{ 0xc9ae2fc3c1774374, &exec_c9ae2fc3c1774374, 0x00001ff1 },
		{ 0x37714e19d5ffbbff, &exec_37714e19d5ffbbff, 0x00001ff5 },
		{ 0xefb022d64941570f, &exec_efb022d64941570f, 0x00002001 },
		{ 0x632003017436e2e7, &exec_632003017436e2e7, 0x0000200b },
		{ 0x747363528f7962c3, &exec_747363528f7962c3, 0x00002010 },
		{ 0xd894cf9d68d806a1, &exec_d894cf9d68d806a1, 0x00002017 },
		{ 0xf3bf7fe4ea795b53, &exec_f3bf7fe4ea795b53, 0x0000201a },
		{ 0x72bd27f74bb96105, &exec_72bd27f74bb96105, 0x00002026 },
		{ 0x3620da45cd860d7c, &exec_3620da45cd860d7c, 0x00002028 },
		{ 0x6f167dba3b7c9fba, &exec_6f167dba3b7c9fba, 0x00002037 },
		{ 0x6080651f94e9654d, &exec_6080651f94e9654d, 0x00003add },
		{ 0xdfedb981d3e480f2, &exec_dfedb981d3e480f2, 0x00002046 },
		{ 0x71bc0007954dca1d, &exec_71bc0007954dca1d, 0x0000204c },
		{ 0x6af6c2ea2aff476e, &exec_6af6c2ea2aff476e, 0x00002052 },
		{ 0x004c1f85ee4bca09, &exec_004c1f85ee4bca09, 0x0000205e },
		{ 0xcffb0bdb2913dd61, &exec_cffb0bdb2913dd61, 0x00002062 },
		{ 0xb68f5416fa82cf9b, &exec_b68f5416fa82cf9b, 0x000029ff },
		{ 0x63dc5cf9cfaab5ee, &exec_63dc5cf9cfaab5ee, 0x00003dce },
		{ 0xb318d7a7955805b8, &exec_b318d7a7955805b8, 0x0000206e },
		{ 0x8c1485a83f81d27a, &exec_8c1485a83f81d27a, 0x00003797 },
		{ 0x7ed910c9a857b2ad, &exec_7ed910c9a857b2ad, 0x00002bec },
		{ 0xc5a418b856d01ca7, &exec_c5a418b856d01ca7, 0x00002085 },
		{ 0xd748fc2f6fe3a5ad, &exec_d748fc2f6fe3a5ad, 0x00002089 },
		{ 0xdaceb95ba84885c5, &exec_daceb95ba84885c5, 0x0000234a },
		{ 0xc3d340934feea0bb, &exec_c3d340934feea0bb, 0x0000208d },
		{ 0xae760c0cea990149, &exec_ae760c0cea990149, 0x000041b5 },
		{ 0xe6eb036d08a09cb1, &exec_e6eb036d08a09cb1, 0x00002096 },
		{ 0xf2a49a6614c44ca1, &exec_f2a49a6614c44ca1, 0x000020a1 },
		{ 0x6cd007f1c2b1bd46, &exec_6cd007f1c2b1bd46, 0x00002e3b },
		{ 0xe317cd06a78dd5ed, &exec_e317cd06a78dd5ed, 0x000020aa },
		{ 0x15b680f3cbf3088c, &exec_15b680f3cbf3088c, 0x000020b4 },
		{ 0x1baf61096f5b4cff, &exec_1baf61096f5b4cff, 0x000020ca },
		{ 0x0f3bba5ef1eeccce, &exec_0f3bba5ef1eeccce, 0x000021e1 },
		{ 0x6fc035bb2d41e22f, &exec_6fc035bb2d41e22f, 0x000020d4 },
		{ 0xe48ad5c6c0fd370f, &exec_e48ad5c6c0fd370f, 0x00002e22 },
		{ 0x3b8c3082358887b6, &exec_3b8c3082358887b6, 0x00002ba9 },
		{ 0x2fe2f70fb87fa43b, &exec_2fe2f70fb87fa43b, 0x000020f5 },
		{ 0x6ec6dfbe65820865, &exec_6ec6dfbe65820865, 0x000020fb },
		{ 0xd02504efdd4b8841, &exec_d02504efdd4b8841, 0x000031f3 },
		{ 0x61898a3c1f07aa13, &exec_61898a3c1f07aa13, 0x00002103 },
		{ 0x7f44fe765c57496f, &exec_7f44fe765c57496f, 0x00002112 },
		{ 0xd97b9be6876ff6c8, &exec_d97b9be6876ff6c8, 0x00002116 },
		{ 0x17deea19a068952c, &exec_17deea19a068952c, 0x00002125 },
		{ 0x81dcc5b05b1c9bd9, &exec_81dcc5b05b1c9bd9, 0x000036de },
		{ 0x64ea4ae443bee658, &exec_64ea4ae443bee658, 0x0000212c },
		{ 0xdaeddbde92280a6c, &exec_daeddbde92280a6c, 0x0000212f },
		{ 0x9d9a6ad89a41b650, &exec_9d9a6ad89a41b650, 0x00002132 },
		{ 0xed91682a8d7a7507, &exec_ed91682a8d7a7507, 0x000046dc },
		{ 0xe5086886e6e9809b, &exec_e5086886e6e9809b, 0x000028f5 },
		{ 0xe1f3b49ce9d480a2, &exec_e1f3b49ce9d480a2, 0x0000214e },
		{ 0x7f7a762e5d8f1268, &exec_7f7a762e5d8f1268, 0x00002154 },
		{ 0x10fd07f1a48e9116, &exec_10fd07f1a48e9116, 0x00002420 },
		{ 0x2e152e1b0311516f, &exec_2e152e1b0311516f, 0x00002164 },
		{ 0xc33ec0decc427a6c, &exec_c33ec0decc427a6c, 0x0000216c },
		{ 0xe25f16c6f41b1459, &exec_e25f16c6f41b1459, 0x00003403 },
		{ 0x35cd9955b9b943dc, &exec_35cd9955b9b943dc, 0x00002644 },
		{ 0xb6471208d7ac4796, &exec_b6471208d7ac4796, 0x00002179 },
		{ 0xe9708f65ad082b4b, &exec_e9708f65ad082b4b, 0x00002198 },
		{ 0xf17dd03da7100ff1, &exec_f17dd03da7100ff1, 0x00003b6c },
		{ 0x4798f257f139c1c7, &exec_4798f257f139c1c7, 0x0000219c },
		{ 0x02e01a9042321bda, &exec_02e01a9042321bda, 0x000040da },
		{ 0x9ef9cb4908fa3791, &exec_9ef9cb4908fa3791, 0x00003da6 },
		{ 0xcf3cd5f00cfefb3d, &exec_cf3cd5f00cfefb3d, 0x000021b9 },
		{ 0x01a101d08760e841, &exec_01a101d08760e841, 0x000021c1 },
		{ 0x5b87f1e7a5306f6b, &exec_5b87f1e7a5306f6b, 0x0000251f },
		{ 0x165d108912359770, &exec_165d108912359770, 0x000021cd },
		{ 0x68fb88293010fc55, &exec_68fb88293010fc55, 0x000021d1 },
		{ 0xfcec9241f7a237d9, &exec_fcec9241f7a237d9, 0x000021db },
		{ 0xd9c63f81bdb2c534, &exec_d9c63f81bdb2c534, 0x0000228b },
		{ 0x1acec65f108ace29, &exec_1acec65f108ace29, 0x00003d04 },
		{ 0x7e5535f2cf3d4d0a, &exec_7e5535f2cf3d4d0a, 0x000030b6 },
		{ 0x75739ed844a305d9, &exec_75739ed844a305d9, 0x000021e5 },
		{ 0x5ce376fc9ea53ff1, &exec_5ce376fc9ea53ff1, 0x000021eb },
		{ 0x08f186d1b67488ee, &exec_08f186d1b67488ee, 0x000021f0 },
		{ 0x7e84cb5f79d0e650, &exec_7e84cb5f79d0e650, 0x000026cc },
		{ 0xa38f37a461ce46b7, &exec_a38f37a461ce46b7, 0x00002213 },
		{ 0x98366b41233b81a7, &exec_98366b41233b81a7, 0x00002217 },
		{ 0x60afc1d284112fd0, &exec_60afc1d284112fd0, 0x0000221a },
		{ 0x0d80f59a5b969211, &exec_0d80f59a5b969211, 0x00002225 },
		{ 0x5ea134326b27aaa7, &exec_5ea134326b27aaa7, 0x00002234 },
		{ 0xe3e4512e6f309c76, &exec_e3e4512e6f309c76, 0x0000223b },
		{ 0x4ac2a71651d7c5dd, &exec_4ac2a71651d7c5dd, 0x00002241 },
		{ 0x39f3b4f2d8583e2a, &exec_39f3b4f2d8583e2a, 0x00002252 },
		{ 0xa5afa475e1f9fdaf, &exec_a5afa475e1f9fdaf, 0x00002257 },
		{ 0x05002db3dacd0df1, &exec_05002db3dacd0df1, 0x00003b84 },
		{ 0x3fc086c06390e692, &exec_3fc086c06390e692, 0x00002a7d },
		{ 0x9f94400d015f5333, &exec_9f94400d015f5333, 0x0000225f },
		{ 0xdd465b3bb678c5a6, &exec_dd465b3bb678c5a6, 0x0000226c },
		{ 0x5931ef6cb1050c86, &exec_5931ef6cb1050c86, 0x00002277 },
		{ 0xaa0c575bf8def321, &exec_aa0c575bf8def321, 0x0000227d },
		{ 0x58b36d9b3e5ac54e, &exec_58b36d9b3e5ac54e, 0x00002284 },
		{ 0x2ddbf358cc5c3107, &exec_2ddbf358cc5c3107, 0x00002288 },
		{ 0xa7a4440600ba86d3, &exec_a7a4440600ba86d3, 0x0000228e },
		{ 0x6aaf9fe6f59663b7, &exec_6aaf9fe6f59663b7, 0x00002f86 },
		{ 0xfe52c04c9cf86527, &exec_fe52c04c9cf86527, 0x000045ba },
		{ 0xcbe85a9d6def6bd2, &exec_cbe85a9d6def6bd2, 0x000045c7 },
		{ 0xf6dd917a55bac3e3, &exec_f6dd917a55bac3e3, 0x00002f5c },
		{ 0x8774d14ea29be2d6, &exec_8774d14ea29be2d6, 0x0000229f },
		{ 0x487ded7a3070fa59, &exec_487ded7a3070fa59, 0x000022a3 },
		{ 0xffe9e910ca78321d, &exec_ffe9e910ca78321d, 0x000024dd },
		{ 0x7b9e607e3942e0ce, &exec_7b9e607e3942e0ce, 0x000022ae },
		{ 0x6d098b6063e50e1c, &exec_6d098b6063e50e1c, 0x000022b7 },
		{ 0xeab7ba39e6973176, &exec_eab7ba39e6973176, 0x000022bb },
		{ 0x1e653aeca1faa939, &exec_1e653aeca1faa939, 0x000022c3 },
		{ 0x9d1358252b39abd9, &exec_9d1358252b39abd9, 0x00002e49 },
		{ 0x0b3e92428682f179, &exec_0b3e92428682f179, 0x000022d0 },
		{ 0xcc4dc231ecd54385, &exec_cc4dc231ecd54385, 0x000022e0 },
		{ 0x73dc4f8bb20ec210, &exec_73dc4f8bb20ec210, 0x000022e2 },
		{ 0x3dc1af8b3718f697, &exec_3dc1af8b3718f697, 0x000022ed },
		{ 0x99a113a8c9c0e971, &exec_99a113a8c9c0e971, 0x000022f2 },
		{ 0xce141fce1e96e239, &exec_ce141fce1e96e239, 0x00003f9d },
		{ 0x22e799deb8ffd320, &exec_22e799deb8ffd320, 0x000038ad },
		{ 0x39e6adf068744b30, &exec_39e6adf068744b30, 0x000022f7 },
		{ 0x6c91fc46e3799d32, &exec_6c91fc46e3799d32, 0x000022fa },
		{ 0xa40003662462c222, &exec_a40003662462c222, 0x000022fe },
		{ 0xeae3585b614574cb, &exec_eae3585b614574cb, 0x00004a0c },
		{ 0x28b4a519e11ef876, &exec_28b4a519e11ef876, 0x00002306 },
		{ 0xa187a959b7f13851, &exec_a187a959b7f13851, 0x0000230f },
		{ 0x02a1506dde0ca77f, &exec_02a1506dde0ca77f, 0x000029a6 },
		{ 0xf1e26092e1dfbb79, &exec_f1e26092e1dfbb79, 0x00002312 },
		{ 0xbf6cafc518bcd6c1, &exec_bf6cafc518bcd6c1, 0x00002317 },
		{ 0xaedecfa5c83e5a09, &exec_aedecfa5c83e5a09, 0x00004430 },
		{ 0xe6efad6ad5dc30b0, &exec_e6efad6ad5dc30b0, 0x00002321 },
		{ 0xefd26114276b9076, &exec_efd26114276b9076, 0x00003035 },
		{ 0x9e7e925660037e02, &exec_9e7e925660037e02, 0x000044bc },
		{ 0x104528c1ac0f9612, &exec_104528c1ac0f9612, 0x00002334 },
		{ 0x4092319e6f200e03, &exec_4092319e6f200e03, 0x00002338 },
		{ 0x6330f7f7e230fbdc, &exec_6330f7f7e230fbdc, 0x000029d1 },
		{ 0x59b3055d4d34aa9c, &exec_59b3055d4d34aa9c, 0x0000233d },
		{ 0x74e988f827d9694e, &exec_74e988f827d9694e, 0x00004202 },
		{ 0x1bb378252a4b4acc, &exec_1bb378252a4b4acc, 0x00002f9a },
		{ 0x7268c7a1abc4bfb8, &exec_7268c7a1abc4bfb8, 0x0000326d },
		{ 0x72638eae8072a536, &exec_72638eae8072a536, 0x00002340 },
		{ 0x302c249aef0373cf, &exec_302c249aef0373cf, 0x00002356 },
		{ 0x1ab30676a7dd5664, &exec_1ab30676a7dd5664, 0x00000000 },
		{ 0x2ba28d9c9d3dd61d, &exec_2ba28d9c9d3dd61d, 0x00002364 },
		{ 0x0397c50d6c1d0545, &exec_0397c50d6c1d0545, 0x0000236d },
		{ 0xe5c9a2debe10e5fb, &exec_e5c9a2debe10e5fb, 0x00002376 },
		{ 0xbc543117dbb35b5a, &exec_bc543117dbb35b5a, 0x00002bad },
		{ 0xd64d256f2f35ce2d, &exec_d64d256f2f35ce2d, 0x000023a0 },
		{ 0xeb9fdf862fa5a800, &exec_eb9fdf862fa5a800, 0x000023ac },
		{ 0xc377437b52275cd3, &exec_c377437b52275cd3, 0x00003ca2 },
		{ 0xb7724b41a913fcfc, &exec_b7724b41a913fcfc, 0x000023ba },
		{ 0x68e15fe74aba84b3, &exec_68e15fe74aba84b3, 0x00003c29 },
		{ 0x2506b1b450667581, &exec_2506b1b450667581, 0x000023bf },
		{ 0xb9c897e2b2dfc518, &exec_b9c897e2b2dfc518, 0x00003ba2 },
		{ 0xa577d6ac8c4571e1, &exec_a577d6ac8c4571e1, 0x000023c7 },
		{ 0x921e75e300a76f14, &exec_921e75e300a76f14, 0x0000248a },
		{ 0x57f802acabf4edf3, &exec_57f802acabf4edf3, 0x00003233 },
		{ 0x1f89824b56b010f5, &exec_1f89824b56b010f5, 0x000023cb },
		{ 0x78d3936ccee9c957, &exec_78d3936ccee9c957, 0x0000262b },
		{ 0x4f297e8c8f7d75b7, &exec_4f297e8c8f7d75b7, 0x00002701 },
		{ 0x71f776bce851b313, &exec_71f776bce851b313, 0x000023db },
		{ 0x61831df24f746df3, &exec_61831df24f746df3, 0x000045ff },
		{ 0xaf1f9c4b0050f7a4, &exec_af1f9c4b0050f7a4, 0x000023e0 },
		{ 0x1fc9f0e80fa6f846, &exec_1fc9f0e80fa6f846, 0x000023e6 },
		{ 0x6322e2dff40ac6ac, &exec_6322e2dff40ac6ac, 0x000023f5 },
		{ 0x4dda0b6ca5d86428, &exec_4dda0b6ca5d86428, 0x00002406 },
		{ 0x42484f7e46e14515, &exec_42484f7e46e14515, 0x0000240f },
		{ 0x3564320e5cc749e3, &exec_3564320e5cc749e3, 0x000035e8 },
		{ 0x266c1ab3ccad6f93, &exec_266c1ab3ccad6f93, 0x00003ffe },
		{ 0x3610a69c81eadd27, &exec_3610a69c81eadd27, 0x00002428 },
		{ 0x5d156d15394459af, &exec_5d156d15394459af, 0x00002437 },
		{ 0x196de57a5f623600, &exec_196de57a5f623600, 0x00002461 },
		{ 0x404bd7fa5f9c5ea3, &exec_404bd7fa5f9c5ea3, 0x0000246b },
		{ 0x997d97402560d4f2, &exec_997d97402560d4f2, 0x00004acb },
		{ 0x153d4232c19457f8, &exec_153d4232c19457f8, 0x0000247f },
		{ 0x90ebc0aa57f40961, &exec_90ebc0aa57f40961, 0x00004835 },
		{ 0x32ea200e12481a48, &exec_32ea200e12481a48, 0x00004375 },
		{ 0xb7f610a25eaa10dc, &exec_b7f610a25eaa10dc, 0x00002ac2 },
		{ 0xd93c95488a8ff04c, &exec_d93c95488a8ff04c, 0x000024a3 },
		{ 0x7698c0d67a090c37, &exec_7698c0d67a090c37, 0x00002c9b },
		{ 0x28b0f1f05628cc99, &exec_28b0f1f05628cc99, 0x000024a7 },
		{ 0x89a4ff3a205eb46f, &exec_89a4ff3a205eb46f, 0x00003fb6 },
		{ 0x88a0dc2c5fcd8207, &exec_88a0dc2c5fcd8207, 0x000024b6 },
		{ 0xea5479c0c62ae052, &exec_ea5479c0c62ae052, 0x00003343 },
		{ 0xc50fb8214a9f0eeb, &exec_c50fb8214a9f0eeb, 0x000024b9 },
		{ 0x99e686bb7520ed79, &exec_99e686bb7520ed79, 0x000024c9 },
		{ 0x35f63664c2e4aa2d, &exec_35f63664c2e4aa2d, 0x00004587 },
		{ 0x5558a2300e6c4172, &exec_5558a2300e6c4172, 0x000024cf },
		{ 0x5f9f24b72497d3a7, &exec_5f9f24b72497d3a7, 0x000024d9 },
		{ 0x2c37b28d89f6ba15, &exec_2c37b28d89f6ba15, 0x00003539 },
		{ 0xabac98fd86ed1d77, &exec_abac98fd86ed1d77, 0x000024e2 },
		{ 0x83bf7488c7dc4417, &exec_83bf7488c7dc4417, 0x000039bb },
		{ 0x571c8f5b7de96e9b, &exec_571c8f5b7de96e9b, 0x000024eb },
		{ 0xde987e1ec2803a82, &exec_de987e1ec2803a82, 0x000024ee },
		{ 0x2c82a84b1ce041eb, &exec_2c82a84b1ce041eb, 0x000041c8 },
		{ 0x99bceb67975a5dd4, &exec_99bceb67975a5dd4, 0x000024f6 },
		{ 0x7810df2e34ea75d0, &exec_7810df2e34ea75d0, 0x00002501 },
		{ 0x6d3f972d3ee37ea4, &exec_6d3f972d3ee37ea4, 0x00002506 },
		{ 0xfe9aad1ce0c07f78, &exec_fe9aad1ce0c07f78, 0x0000250c },
		{ 0xcb7427fc03a19057, &exec_cb7427fc03a19057, 0x00002512 },
		{ 0x974d37f5eede68d4, &exec_974d37f5eede68d4, 0x00002515 },
		{ 0x6e4d7fe592e4b13d, &exec_6e4d7fe592e4b13d, 0x00003cb3 },
		{ 0xa100d4c7fa88d7aa, &exec_a100d4c7fa88d7aa, 0x00002a29 },
		{ 0x3077085434742c6a, &exec_3077085434742c6a, 0x0000253c },
		{ 0x79ca483cc2fe0f63, &exec_79ca483cc2fe0f63, 0x0000254c },
		{ 0x6bac180bac1e9545, &exec_6bac180bac1e9545, 0x00003bdd },
		{ 0x1c7f06bb304eab7b, &exec_1c7f06bb304eab7b, 0x000036d3 },
		{ 0xabffa46d33deedc6, &exec_abffa46d33deedc6, 0x00002550 },
		{ 0x7fb8cba3a3914dff, &exec_7fb8cba3a3914dff, 0x00002d9a },
		{ 0x5b941eda673e8aeb, &exec_5b941eda673e8aeb, 0x0000255a },
		{ 0x82ad9edc86a976eb, &exec_82ad9edc86a976eb, 0x00002570 },
		{ 0x8a79e03e3efee25e, &exec_8a79e03e3efee25e, 0x00002578 },
		{ 0x4c792f23e56965fb, &exec_4c792f23e56965fb, 0x0000257d },
		{ 0x6892c98f8471789b, &exec_6892c98f8471789b, 0x00002869 },
		{ 0xadf49152e15145a3, &exec_adf49152e15145a3, 0x00002583 },
		{ 0x6ada4a533e41d1c0, &exec_6ada4a533e41d1c0, 0x00002588 },
		{ 0xcde6f866f8d5c955, &exec_cde6f866f8d5c955, 0x0000258e },
		{ 0xc027a83b7895c663, &exec_c027a83b7895c663, 0x00002591 },
		{ 0x4cfba1d9a8c6e306, &exec_4cfba1d9a8c6e306, 0x00002fb9 },
		{ 0x1df228daf049c692, &exec_1df228daf049c692, 0x000025aa },
		{ 0x01758c4430b2a22d, &exec_01758c4430b2a22d, 0x000025b0 },
		{ 0xd6229947a07aea0a, &exec_d6229947a07aea0a, 0x000025b3 },
		{ 0xb366280c70948ed5, &exec_b366280c70948ed5, 0x0000356f },
		{ 0xc8cb8d36adc733ce, &exec_c8cb8d36adc733ce, 0x00002738 },
		{ 0x37e64823d85a2789, &exec_37e64823d85a2789, 0x00004845 },
		{ 0x1ae1ae6be286bc8a, &exec_1ae1ae6be286bc8a, 0x000025c6 },
		{ 0x8253506204dc4f55, &exec_8253506204dc4f55, 0x00004b4f },
		{ 0x6e21b4e971a10683, &exec_6e21b4e971a10683, 0x000025c9 },
		{ 0x44e1d9c9f14f11a5, &exec_44e1d9c9f14f11a5, 0x0000361a },
		{ 0x1db92394fc48c90f, &exec_1db92394fc48c90f, 0x000029a2 },
		{ 0x843d7d4b0fbbd7c1, &exec_843d7d4b0fbbd7c1, 0x000025d7 },
		{ 0x21932fcfb1b39a11, &exec_21932fcfb1b39a11, 0x000025da },
		{ 0xa18d049898909852, &exec_a18d049898909852, 0x000035d5 },
		{ 0x1a3cc7b476c7ac72, &exec_1a3cc7b476c7ac72, 0x000025e5 },
		{ 0xfd09071eb836a895, &exec_fd09071eb836a895, 0x00004549 },
		{ 0xf3775fdce55781ee, &exec_f3775fdce55781ee, 0x0000406f },
		{ 0x924f3a26845e890a, &exec_924f3a26845e890a, 0x000025ec },
		{ 0x4f365bd3ca064f5d, &exec_4f365bd3ca064f5d, 0x000025ef },
		{ 0x223464a19f580195, &exec_223464a19f580195, 0x000025f3 },
		{ 0x6fc8592aabc1fa9a, &exec_6fc8592aabc1fa9a, 0x000025f7 },
		{ 0x543b76c2b1c6763b, &exec_543b76c2b1c6763b, 0x000025fc },
		{ 0xd320fe77e78dce3c, &exec_d320fe77e78dce3c, 0x00002de9 },
		{ 0x30104b8f99b96d15, &exec_30104b8f99b96d15, 0x00002600 },
		{ 0x87dd255a82fbd7f6, &exec_87dd255a82fbd7f6, 0x00002605 },
		{ 0x3ed37003692af5ba, &exec_3ed37003692af5ba, 0x0000260b },
		{ 0x39083720d57cac6f, &exec_39083720d57cac6f, 0x00002619 },
		{ 0x493141b02f507fbd, &exec_493141b02f507fbd, 0x00000000 },
		{ 0xf30f6130abc88389, &exec_f30f6130abc88389, 0x00002936 },
		{ 0x3b199341809a0ee5, &exec_3b199341809a0ee5, 0x00002625 },
		{ 0x12fde52feee93fbf, &exec_12fde52feee93fbf, 0x00003178 },
		{ 0x015ec2930a0e11e6, &exec_015ec2930a0e11e6, 0x00002639 },
		{ 0xab37050bceda52d0, &exec_ab37050bceda52d0, 0x0000263f },
		{ 0xab5a9d63b3ec4478, &exec_ab5a9d63b3ec4478, 0x0000264a },
		{ 0x2a3d11cf1ee63edf, &exec_2a3d11cf1ee63edf, 0x00002663 },
		{ 0xe54b26b8f8811b5f, &exec_e54b26b8f8811b5f, 0x0000266a },
		{ 0xbf588669877909f5, &exec_bf588669877909f5, 0x00002670 },
		{ 0x8e3f655a7a4b73a7, &exec_8e3f655a7a4b73a7, 0x0000267d },
		{ 0x15f6b663fac3f56d, &exec_15f6b663fac3f56d, 0x00002680 },
		{ 0x58af3f26aa1e7045, &exec_58af3f26aa1e7045, 0x00002683 },
		{ 0x5c6e7664d6d4646e, &exec_5c6e7664d6d4646e, 0x00002688 },
		{ 0xa4183bf589484c38, &exec_a4183bf589484c38, 0x00004385 },
		{ 0x5283f39ad5be51b3, &exec_5283f39ad5be51b3, 0x00002692 },
		{ 0x6e3f8eee2c039fdd, &exec_6e3f8eee2c039fdd, 0x000035c0 },
		{ 0x0a4ff064e08eb916, &exec_0a4ff064e08eb916, 0x00002697 },
		{ 0x34cffd863db09c05, &exec_34cffd863db09c05, 0x00004763 },
		{ 0x0bed52a69206ffb9, &exec_0bed52a69206ffb9, 0x0000269b },
		{ 0xde6e6de26da5e9ba, &exec_de6e6de26da5e9ba, 0x0000269f },
		{ 0x53ada0656dbbd6b4, &exec_53ada0656dbbd6b4, 0x000026b3 },
		{ 0x474e16bd899f6e99, &exec_474e16bd899f6e99, 0x000026ba },
		{ 0x233ae2afd655f48f, &exec_233ae2afd655f48f, 0x000041f0 },
		{ 0x29a78f86674f2e84, &exec_29a78f86674f2e84, 0x00002b8d },
		{ 0x626728d8c20f250a, &exec_626728d8c20f250a, 0x000026d0 },
		{ 0x8670b3369675d038, &exec_8670b3369675d038, 0x00002c12 },
		{ 0x97f706b4143710a9, &exec_97f706b4143710a9, 0x000026d4 },
		{ 0x00bae4df9caeaaf2, &exec_00bae4df9caeaaf2, 0x000026e1 },
		{ 0x439869a2fdd196bb, &exec_439869a2fdd196bb, 0x000026e6 },
		{ 0x9501a010250118b0, &exec_9501a010250118b0, 0x000026ea },
		{ 0x4de4504c0b8d34c1, &exec_4de4504c0b8d34c1, 0x000026ef },
		{ 0x6caa8d9cb2801012, &exec_6caa8d9cb2801012, 0x000026f3 },
		{ 0x1cf5150d116861ff, &exec_1cf5150d116861ff, 0x000026f7 },
		{ 0x3bb6c42e4dc32264, &exec_3bb6c42e4dc32264, 0x000026fe },
		{ 0x7921c9c01f5b5c82, &exec_7921c9c01f5b5c82, 0x00002715 },
		{ 0xb8ac1748c1626205, &exec_b8ac1748c1626205, 0x0000271e },
		{ 0xfa8e407e7dcd0965, &exec_fa8e407e7dcd0965, 0x00002729 },
		{ 0xf5d2748f19eea332, &exec_f5d2748f19eea332, 0x00002733 },
		{ 0x2b45345191cf7729, &exec_2b45345191cf7729, 0x0000273c },
		{ 0x51be21d8fda3de3a, &exec_51be21d8fda3de3a, 0x00002744 },
		{ 0xc8ecabccab88a525, &exec_c8ecabccab88a525, 0x00002749 },
		{ 0x99e6e69b3393eea3, &exec_99e6e69b3393eea3, 0x0000274d },
		{ 0x73f486cf08a20b9b, &exec_73f486cf08a20b9b, 0x00003971 },
		{ 0x203769fad2ee4e3c, &exec_203769fad2ee4e3c, 0x0000274f },
		{ 0xf114c981ca0a2e90, &exec_f114c981ca0a2e90, 0x00002754 },
		{ 0xf9136c3fef80eb65, &exec_f9136c3fef80eb65, 0x0000275a },
		{ 0xfede9b61a61d20bf, &exec_fede9b61a61d20bf, 0x0000275e },
		{ 0xf16aa5f263035cff, &exec_f16aa5f263035cff, 0x00002c65 },
		{ 0x20b73884d6038101, &exec_20b73884d6038101, 0x00002769 },
		{ 0xe2c4b2f86c1c7479, &exec_e2c4b2f86c1c7479, 0x0000276d },
		{ 0xeb01f14451eb1d68, &exec_eb01f14451eb1d68, 0x000031a1 },
		{ 0x2401048e6307632e, &exec_2401048e6307632e, 0x00002772 },
		{ 0xa174aa52e92c8349, &exec_a174aa52e92c8349, 0x00002777 },
		{ 0xac5d0c9103ba424e, &exec_ac5d0c9103ba424e, 0x0000277b },
		{ 0x7933db3f52a96f3c, &exec_7933db3f52a96f3c, 0x0000277d },
		{ 0xa8287302697c37ec, &exec_a8287302697c37ec, 0x00002789 },
		{ 0x94b41a6eab661255, &exec_94b41a6eab661255, 0x000036b6 },
		{ 0x5f0eb5082689242b, &exec_5f0eb5082689242b, 0x00002796 },
		{ 0x2e4989e0e0112ce8, &exec_2e4989e0e0112ce8, 0x00003b7e },
		{ 0x071f7c930cc9dfe6, &exec_071f7c930cc9dfe6, 0x00004008 },
		{ 0x8c6c3070be2f9c4b, &exec_8c6c3070be2f9c4b, 0x00002799 },
		{ 0x44fd5e179d4025a6, &exec_44fd5e179d4025a6, 0x000027a0 },
		{ 0x0229e44856361617, &exec_0229e44856361617, 0x00003f75 },
		{ 0x6774f18b46dc8861, &exec_6774f18b46dc8861, 0x000027a4 },
		{ 0xd2fdf285eb596e22, &exec_d2fdf285eb596e22, 0x000027a9 },
		{ 0x780ce6c693bcac02, &exec_780ce6c693bcac02, 0x000043c2 },
		{ 0x14210c182f08f5fe, &exec_14210c182f08f5fe, 0x000027b0 },
		{ 0x21d3da0538f95604, &exec_21d3da0538f95604, 0x000032ce },
		{ 0x0ccc591b3d63c907, &exec_0ccc591b3d63c907, 0x000034f7 },
		{ 0x9758d59f88924585, &exec_9758d59f88924585, 0x00004b6e },
		{ 0x1fcc2c4da5f0609e, &exec_1fcc2c4da5f0609e, 0x00003bbd },
		{ 0x71e355a4925337b7, &exec_71e355a4925337b7, 0x000027c9 },
		{ 0x4ecf0dac751919bd, &exec_4ecf0dac751919bd, 0x000027ce },
		{ 0x41c17c19ceee2644, &exec_41c17c19ceee2644, 0x000027d1 },
		{ 0x04b7879c3597665b, &exec_04b7879c3597665b, 0x0000449e },
		{ 0x9e056f34489852a3, &exec_9e056f34489852a3, 0x000027d6 },
		{ 0x7959b5f4c1a01c60, &exec_7959b5f4c1a01c60, 0x0000358b },
		{ 0xedb23c6dcae4ecde, &exec_edb23c6dcae4ecde, 0x00004bce },
		{ 0xf9a7cca7c4a43a8f, &exec_f9a7cca7c4a43a8f, 0x000027e6 },
		{ 0xfbec7341ae5a5b57, &exec_fbec7341ae5a5b57, 0x000027ea },
		{ 0x4fb713b0432228ed, &exec_4fb713b0432228ed, 0x000027ee },
		{ 0x4089a635b30bc192, &exec_4089a635b30bc192, 0x000027f2 },
		{ 0x165ab58ce2994acc, &exec_165ab58ce2994acc, 0x000027f7 },
		{ 0xe9c9f607ce398a9d, &exec_e9c9f607ce398a9d, 0x000027fb },
		{ 0x77f0bbd5c5948e2c, &exec_77f0bbd5c5948e2c, 0x000027fe },
		{ 0x02cbadebce55668d, &exec_02cbadebce55668d, 0x00002803 },
		{ 0xbb47f4135710913b, &exec_bb47f4135710913b, 0x00002809 },
		{ 0xbe3d6e372258eafc, &exec_be3d6e372258eafc, 0x00004044 },
		{ 0xebd91982b96a89a1, &exec_ebd91982b96a89a1, 0x00003387 },
		{ 0xbeb0409e1b412bbc, &exec_beb0409e1b412bbc, 0x00002814 },
		{ 0x16805b95c7b1d37f, &exec_16805b95c7b1d37f, 0x0000281d },
		{ 0x5b9c05502d78b834, &exec_5b9c05502d78b834, 0x00002820 },
		{ 0xd50ac10164ce2f24, &exec_d50ac10164ce2f24, 0x00002824 },
		{ 0x4f6e065106b35065, &exec_4f6e065106b35065, 0x0000299d },
		{ 0x4e7d471171d7070f, &exec_4e7d471171d7070f, 0x00002826 },
		{ 0x0cf9edca969a44db, &exec_0cf9edca969a44db, 0x00002a5f },
		{ 0xe73445a036f113d9, &exec_e73445a036f113d9, 0x00002fc1 },
		{ 0x3a231c44ebb6ea7b, &exec_3a231c44ebb6ea7b, 0x000029aa },
		{ 0xa3b53c71d8fbe6c8, &exec_a3b53c71d8fbe6c8, 0x0000282f },
		{ 0x8a4feac152fdae0e, &exec_8a4feac152fdae0e, 0x00004a64 },
		{ 0x45708d0d72409563, &exec_45708d0d72409563, 0x000042e1 },
		{ 0x515482af5ef4e1c8, &exec_515482af5ef4e1c8, 0x00002aeb },
		{ 0x8880a49b8380be0c, &exec_8880a49b8380be0c, 0x000048f0 },
		{ 0x6c0210b23cc21285, &exec_6c0210b23cc21285, 0x0000283b },
		{ 0x956a3de476f34d9d, &exec_956a3de476f34d9d, 0x0000283f },
		{ 0x63654275b95ef6ef, &exec_63654275b95ef6ef, 0x00002847 },
		{ 0x0e14e7647bd69c19, &exec_0e14e7647bd69c19, 0x00002852 },
		{ 0xc9486856649af22a, &exec_c9486856649af22a, 0x00002856 },
		{ 0x8f376cad6f39c846, &exec_8f376cad6f39c846, 0x0000285a },
		{ 0xc8bf4c0eb844540c, &exec_c8bf4c0eb844540c, 0x0000285d },
		{ 0xd7f8daf36828b0e3, &exec_d7f8daf36828b0e3, 0x00002870 },
		{ 0x2eb56f000346dd27, &exec_2eb56f000346dd27, 0x0000287e },
		{ 0x7310157c0de520a9, &exec_7310157c0de520a9, 0x00002883 },
		{ 0xb9a06a4f8dd8f75a, &exec_b9a06a4f8dd8f75a, 0x000033f5 },
		{ 0xfb6a682cb0d008f0, &exec_fb6a682cb0d008f0, 0x0000288b },
		{ 0xed0a5dff8ee3541b, &exec_ed0a5dff8ee3541b, 0x00002894 },
		{ 0x8d82a15100a9d0f3, &exec_8d82a15100a9d0f3, 0x0000289a },
		{ 0x2e07bd3205d771ea, &exec_2e07bd3205d771ea, 0x000028a3 },
		{ 0x964db5cf315c005f, &exec_964db5cf315c005f, 0x0000326a },
		{ 0xbac6c8272bdb2e9d, &exec_bac6c8272bdb2e9d, 0x000028af },
		{ 0xedf392579f0ad9b3, &exec_edf392579f0ad9b3, 0x00003c33 },
		{ 0xe89620d344a54e85, &exec_e89620d344a54e85, 0x000028bc },
		{ 0x63d77e8fce0195a5, &exec_63d77e8fce0195a5, 0x00004080 },
		{ 0xb28d04f8bbb6880e, &exec_b28d04f8bbb6880e, 0x00002c90 },
		{ 0xc82f10fe014f2cf0, &exec_c82f10fe014f2cf0, 0x000028cb },
		{ 0xc05bc6e5c4be751d, &exec_c05bc6e5c4be751d, 0x000028ce },
		{ 0xc8b0c35709fda81c, &exec_c8b0c35709fda81c, 0x000028d3 },
		{ 0x50c392eb61372465, &exec_50c392eb61372465, 0x000028da },
		{ 0xde2e518c085e59fc, &exec_de2e518c085e59fc, 0x000028df },
		{ 0x80843eb3d45e7964, &exec_80843eb3d45e7964, 0x000028e5 },
		{ 0xcfd53baf6fbe656a, &exec_cfd53baf6fbe656a, 0x000028eb },
		{ 0x9bd355bdfe6b02fc, &exec_9bd355bdfe6b02fc, 0x000028ee },
		{ 0x5ac3f2e30da0abbe, &exec_5ac3f2e30da0abbe, 0x000028f3 },
		{ 0xec32ab4d5c8d45ae, &exec_ec32ab4d5c8d45ae, 0x000028f7 },
		{ 0xc4a3e5a28aa0cd5e, &exec_c4a3e5a28aa0cd5e, 0x000028fe },
		{ 0x722ca8c6975dab0b, &exec_722ca8c6975dab0b, 0x0000290a },
		{ 0xa2ead6f660ecf2de, &exec_a2ead6f660ecf2de, 0x00002914 },
		{ 0xdb656ae3e1dbf284, &exec_db656ae3e1dbf284, 0x00002919 },
		{ 0xf73cbe51f64f06ac, &exec_f73cbe51f64f06ac, 0x0000291e },
		{ 0x34a4f1f441c79855, &exec_34a4f1f441c79855, 0x000046e0 },
		{ 0x570dfac3cec02e73, &exec_570dfac3cec02e73, 0x00003716 },
		{ 0xc304b8e82969ce93, &exec_c304b8e82969ce93, 0x000039b2 },
		{ 0xe86439ccb2fc11f8, &exec_e86439ccb2fc11f8, 0x00000000 },
		{ 0x6655c608befd90db, &exec_6655c608befd90db, 0x00003890 },
		{ 0x21a84f6f445ba6c0, &exec_21a84f6f445ba6c0, 0x0000292f },
		{ 0x191c0ab023b6c2b2, &exec_191c0ab023b6c2b2, 0x00002939 },
		{ 0x974369ca333329c0, &exec_974369ca333329c0, 0x0000293c },
		{ 0xe1f491defd5535fc, &exec_e1f491defd5535fc, 0x00002941 },
		{ 0x9ff557c0af667024, &exec_9ff557c0af667024, 0x00002944 },
		{ 0x47015c1fdfe5962e, &exec_47015c1fdfe5962e, 0x00002949 },
		{ 0xe00fc2c1b1ec08a3, &exec_e00fc2c1b1ec08a3, 0x00000000 },
		{ 0x77cb0661eac88af0, &exec_77cb0661eac88af0, 0x00002c71 },
		{ 0xba9ce42f800f198f, &exec_ba9ce42f800f198f, 0x0000295a },
		{ 0x39c8da8b55a2c6e7, &exec_39c8da8b55a2c6e7, 0x00002967 },
		{ 0x008ee1ec38e0e791, &exec_008ee1ec38e0e791, 0x00003ff1 },
		{ 0xd9a5dbdbb14a2888, &exec_d9a5dbdbb14a2888, 0x00000000 },
		{ 0xec0d126fc3bd9f84, &exec_ec0d126fc3bd9f84, 0x00002969 },
		{ 0xe20af70b614ba2cb, &exec_e20af70b614ba2cb, 0x00002972 },
		{ 0xa444b8f6ba90a970, &exec_a444b8f6ba90a970, 0x00004533 },
		{ 0x86275a280f1c4a95, &exec_86275a280f1c4a95, 0x00002978 },
		{ 0xab3b0793b49d5d3a, &exec_ab3b0793b49d5d3a, 0x0000297e },
		{ 0x2239e9846e5c9991, &exec_2239e9846e5c9991, 0x00004481 },
		{ 0x3080017530d1589b, &exec_3080017530d1589b, 0x0000327a },
		{ 0x5625408c688815e4, &exec_5625408c688815e4, 0x00002982 },
		{ 0x718067aaf810ae3e, &exec_718067aaf810ae3e, 0x0000298c },
		{ 0x08190612935e0c79, &exec_08190612935e0c79, 0x00002991 },
		{ 0xfa51d15d477ed3c0, &exec_fa51d15d477ed3c0, 0x00003281 },
		{ 0x2685da2d2befb73a, &exec_2685da2d2befb73a, 0x000045cc },
		{ 0xe9537cc639a3484e, &exec_e9537cc639a3484e, 0x00002995 },
		{ 0xf32cfc7068a18114, &exec_f32cfc7068a18114, 0x00002999 },
		{ 0xed5ced6c2d85256e, &exec_ed5ced6c2d85256e, 0x00002fd5 },
		{ 0x1624a7e174867978, &exec_1624a7e174867978, 0x000029ad },
		{ 0xe235b041cd49c3fb, &exec_e235b041cd49c3fb, 0x00003199 },
		{ 0x632b7313cf6d09f0, &exec_632b7313cf6d09f0, 0x00003747 },
		{ 0x941ae8d0a2eb08cc, &exec_941ae8d0a2eb08cc, 0x000029b6 },
		{ 0x50e234278b19cea4, &exec_50e234278b19cea4, 0x000029bc },
		{ 0x9b68d0bf1774392b, &exec_9b68d0bf1774392b, 0x00003f1e },
		{ 0x0d9be5b716810aaf, &exec_0d9be5b716810aaf, 0x00003569 },
		{ 0xa058ab5bf2bebdbb, &exec_a058ab5bf2bebdbb, 0x000029c6 },
		{ 0x795df26bb5c1e263, &exec_795df26bb5c1e263, 0x00004206 },
		{ 0x296740b9bcbd1719, &exec_296740b9bcbd1719, 0x0000413f },
		{ 0x802977b8e6a281e3, &exec_802977b8e6a281e3, 0x000029cc },
		{ 0x44706d2854d4964d, &exec_44706d2854d4964d, 0x00003a48 },
		{ 0xf78ad7af47452a77, &exec_f78ad7af47452a77, 0x000029d4 },
		{ 0xdd604858b0bb052b, &exec_dd604858b0bb052b, 0x000029dd },
		{ 0xb1705fe884f07414, &exec_b1705fe884f07414, 0x000029e1 },
		{ 0x375176012698be70, &exec_375176012698be70, 0x000029e4 },
		{ 0xb98347495ee5006d, &exec_b98347495ee5006d, 0x0000349f },
		{ 0x1ffd452f73af8e1e, &exec_1ffd452f73af8e1e, 0x000029ee },
		{ 0x5f56a625386f4de9, &exec_5f56a625386f4de9, 0x00002a03 },
		{ 0x234af4c199a8536c, &exec_234af4c199a8536c, 0x00002a0a },
		{ 0x36e48c2f930d65db, &exec_36e48c2f930d65db, 0x0000476d },
		{ 0x46733a5808e7b8e9, &exec_46733a5808e7b8e9, 0x00003896 },
		{ 0x2a79166d577f9e76, &exec_2a79166d577f9e76, 0x00002a25 },
		{ 0xa1c70d2b92ae7911, &exec_a1c70d2b92ae7911, 0x00002f34 },
		{ 0xf4f177fcc32e3a50, &exec_f4f177fcc32e3a50, 0x00002a31 },
		{ 0xc2078df577b6ec83, &exec_c2078df577b6ec83, 0x00002a35 },
		{ 0xa364e9e3e8016225, &exec_a364e9e3e8016225, 0x000036ae },
		{ 0x8e92125a0d1469ab, &exec_8e92125a0d1469ab, 0x00002a44 },
		{ 0x6f68cb4360e7236b, &exec_6f68cb4360e7236b, 0x00002a49 },
		{ 0x128f63e342cc4b49, &exec_128f63e342cc4b49, 0x000047be },
		{ 0x1a1b74d9f6c6aab0, &exec_1a1b74d9f6c6aab0, 0x00002a55 },
		{ 0x67fddf23562dfa91, &exec_67fddf23562dfa91, 0x0000454f },
		{ 0x3ec5579c6f385140, &exec_3ec5579c6f385140, 0x00002a70 },
		{ 0xd19f5928524d6120, &exec_d19f5928524d6120, 0x00002a77 },
		{ 0xd8cec82c22c158d0, &exec_d8cec82c22c158d0, 0x00002c43 },
		{ 0x6ce2ccea510a0941, &exec_6ce2ccea510a0941, 0x00002a83 },
		{ 0xada3fa5214b228c4, &exec_ada3fa5214b228c4, 0x00002b0e },
		{ 0xfbcbd0320db0fa93, &exec_fbcbd0320db0fa93, 0x00002a8a },
		{ 0xd6de37e10cc11163, &exec_d6de37e10cc11163, 0x00002a8f },
		{ 0xf0d8eeade214ae91, &exec_f0d8eeade214ae91, 0x00002a96 },
		{ 0xd7678c64166d076e, &exec_d7678c64166d076e, 0x00003eda },
		{ 0x046f40302b6ca0ea, &exec_046f40302b6ca0ea, 0x00002a9b },
		{ 0xcd8e596a45501738, &exec_cd8e596a45501738, 0x00002aa4 },
		{ 0xbb5137120e14c27c, &exec_bb5137120e14c27c, 0x00002aa9 },
		{ 0x241bf9c386fa38ad, &exec_241bf9c386fa38ad, 0x00002aad },
		{ 0xcbcacce1e114b6c3, &exec_cbcacce1e114b6c3, 0x0000478a },
		{ 0x2abff95e66800712, &exec_2abff95e66800712, 0x00002aba },
		{ 0xad3c48fb6268b3b3, &exec_ad3c48fb6268b3b3, 0x00002abe },
		{ 0x360fad5701cd3f56, &exec_360fad5701cd3f56, 0x00002ace },
		{ 0xea95b7b469f7c08d, &exec_ea95b7b469f7c08d, 0x00002ad4 },
		{ 0x840200a206d3e025, &exec_840200a206d3e025, 0x00002adf },
		{ 0x0dd39a3120e63f78, &exec_0dd39a3120e63f78, 0x00002ae4 },
		{ 0x225530801c0799ee, &exec_225530801c0799ee, 0x00002aef },
		{ 0x7320b2338023ddbe, &exec_7320b2338023ddbe, 0x00004b04 },
		{ 0x800653a62767e0fe, &exec_800653a62767e0fe, 0x00002af4 },
		{ 0x5bce43e62f1fb567, &exec_5bce43e62f1fb567, 0x00002af8 },
		{ 0x90628e5110222085, &exec_90628e5110222085, 0x000046c8 },
		{ 0x0a877fe4a6b7eed3, &exec_0a877fe4a6b7eed3, 0x00002afe },
		{ 0x5c59b91fcf60a10b, &exec_5c59b91fcf60a10b, 0x00002b01 },
		{ 0x93c2fccd1af2da54, &exec_93c2fccd1af2da54, 0x00002de5 },
		{ 0x5bd2c99981a3558b, &exec_5bd2c99981a3558b, 0x00002b05 },
		{ 0x47e669f3f94da1f1, &exec_47e669f3f94da1f1, 0x00002b0a },
		{ 0x6209e9c62576d169, &exec_6209e9c62576d169, 0x00002b13 },
		{ 0xa63a4cb274e13e0a, &exec_a63a4cb274e13e0a, 0x00002b18 },
		{ 0xe3af8e0ea6730af1, &exec_e3af8e0ea6730af1, 0x00002b1a },
		{ 0x75e725823fe3339a, &exec_75e725823fe3339a, 0x00002b25 },
		{ 0xab201aa0fa4da701, &exec_ab201aa0fa4da701, 0x000041cd },
		{ 0x17e7cf20bfedae78, &exec_17e7cf20bfedae78, 0x00002b74 },
		{ 0x0d91094ea2fee614, &exec_0d91094ea2fee614, 0x00002b2a },
		{ 0x870690a9437f77be, &exec_870690a9437f77be, 0x00002b30 },
		{ 0x092aef5035b5e898, &exec_092aef5035b5e898, 0x00002b32 },
		{ 0x8cc8591467b9e34a, &exec_8cc8591467b9e34a, 0x00002b41 },
		{ 0xda41a3c0e712fa91, &exec_da41a3c0e712fa91, 0x00002b47 },
		{ 0xee12736240920378, &exec_ee12736240920378, 0x00004b85 },
		{ 0xed79c18028924f78, &exec_ed79c18028924f78, 0x00002b4f },
		{ 0x0e12b8fb047c59c2, &exec_0e12b8fb047c59c2, 0x00002b55 },
		{ 0xbba0186ae02d729d, &exec_bba0186ae02d729d, 0x00002b5c },
		{ 0xf525d119b3b41046, &exec_f525d119b3b41046, 0x00002b6b },
		{ 0xe9bdc1456ef40ff9, &exec_e9bdc1456ef40ff9, 0x00002b82 },
		{ 0x6972af1ccd7daa1b, &exec_6972af1ccd7daa1b, 0x00002f77 },
		{ 0x1307fede7a42efe1, &exec_1307fede7a42efe1, 0x000049e9 },
		{ 0xbd18b838eb5fc35d, &exec_bd18b838eb5fc35d, 0x00002b86 },
		{ 0xe6a4dd6ab541c498, &exec_e6a4dd6ab541c498, 0x00002b90 },
		{ 0x46c8001171655c91, &exec_46c8001171655c91, 0x0000345f },
		{ 0xda8d7294db9e9cca, &exec_da8d7294db9e9cca, 0x00002b96 },
		{ 0x71bba03d008f31f3, &exec_71bba03d008f31f3, 0x00002b9f },
		{ 0x825b1f12edfabc48, &exec_825b1f12edfabc48, 0x00002ba6 },
		{ 0x1b5e467dd6ac0de4, &exec_1b5e467dd6ac0de4, 0x00002bb0 },
		{ 0xb6b9f67b9f76b762, &exec_b6b9f67b9f76b762, 0x00002bb5 },
		{ 0xac638f4bf9bd4b92, &exec_ac638f4bf9bd4b92, 0x00002bc4 },
		{ 0xaa396ec96af7e5dc, &exec_aa396ec96af7e5dc, 0x00002bca },
		{ 0x4952453b5ab21583, &exec_4952453b5ab21583, 0x00002bd4 },
		{ 0x67e178318de260ba, &exec_67e178318de260ba, 0x00002bd9 },
		{ 0x617f6d2478724fc6, &exec_617f6d2478724fc6, 0x00003abe },
		{ 0xb4ccce5f1a28784d, &exec_b4ccce5f1a28784d, 0x00002bf7 },
		{ 0xeb6720d61f2e1232, &exec_eb6720d61f2e1232, 0x00002bfa },
		{ 0xa0ae4eb03cd4b75c, &exec_a0ae4eb03cd4b75c, 0x00002bfe },
		{ 0x3a2be721502b8291, &exec_3a2be721502b8291, 0x00003497 },
		{ 0x76577ec62cff1072, &exec_76577ec62cff1072, 0x00002c04 },
		{ 0xf5b00e790ea4c54b, &exec_f5b00e790ea4c54b, 0x000039e8 },
		{ 0x7b5132a0ddc25ed7, &exec_7b5132a0ddc25ed7, 0x00004213 },
		{ 0x06023a278066c5aa, &exec_06023a278066c5aa, 0x00002c0f },
		{ 0xd30b207fb1b97f45, &exec_d30b207fb1b97f45, 0x00003c55 },
		{ 0x0503fa28cd931abf, &exec_0503fa28cd931abf, 0x00002c19 },
		{ 0x4907573d94f3de4b, &exec_4907573d94f3de4b, 0x00002c1e },
		{ 0xb2c396f41bdaa045, &exec_b2c396f41bdaa045, 0x00002c22 },
		{ 0xce02557b02cc5773, &exec_ce02557b02cc5773, 0x00002c26 },
		{ 0x9caf17b0bc0418a5, &exec_9caf17b0bc0418a5, 0x00002c2c },
		{ 0x6c67cc139c0e5cb9, &exec_6c67cc139c0e5cb9, 0x0000314b },
		{ 0xd7dba1761b787145, &exec_d7dba1761b787145, 0x00002c37 },
		{ 0x1c788c9de242eff7, &exec_1c788c9de242eff7, 0x00003785 },
		{ 0x78ae65a10b0dcc04, &exec_78ae65a10b0dcc04, 0x00002c48 },
		{ 0xb8acab149829279c, &exec_b8acab149829279c, 0x00002c4d },
		{ 0x91b85598b10bf919, &exec_91b85598b10bf919, 0x00002c52 },
		{ 0x6defdc34bc9db1ce, &exec_6defdc34bc9db1ce, 0x000040c4 },
		{ 0xc6c704efbce0f6b6, &exec_c6c704efbce0f6b6, 0x00002c5f },
		{ 0x8906a0f988ce250b, &exec_8906a0f988ce250b, 0x00002c68 },
		{ 0xbcfef16aa0eec906, &exec_bcfef16aa0eec906, 0x00002c6c },
		{ 0x5c3e56925ae83392, &exec_5c3e56925ae83392, 0x00002c75 },
		{ 0x41da817c14e69d67, &exec_41da817c14e69d67, 0x00003bf6 },
		{ 0x6a1ab80d97694e37, &exec_6a1ab80d97694e37, 0x00002c7b },
		{ 0xf76136d74c4d4b75, &exec_f76136d74c4d4b75, 0x00002c83 },
		{ 0xf4f6790337b22a0b, &exec_f4f6790337b22a0b, 0x00002c87 },
		{ 0xfbd7ac5e23f397f2, &exec_fbd7ac5e23f397f2, 0x00002c8b },
		{ 0xaae0e3585b7578f7, &exec_aae0e3585b7578f7, 0x00002c96 },
		{ 0x8a73db6bfc7b0c1f, &exec_8a73db6bfc7b0c1f, 0x00004276 },
		{ 0x76741c909eeada9b, &exec_76741c909eeada9b, 0x00002ca0 },
		{ 0x59ea8b6ab4d3632d, &exec_59ea8b6ab4d3632d, 0x00002cad },
		{ 0xce3de9ea05d7341e, &exec_ce3de9ea05d7341e, 0x00002cb3 },
		{ 0x6452c465bd543015, &exec_6452c465bd543015, 0x00002cb7 },
		{ 0xa2f897b5b7172abd, &exec_a2f897b5b7172abd, 0x00002cbc },
		{ 0x61a13b1efc1a9047, &exec_61a13b1efc1a9047, 0x00002cc5 },
		{ 0xfc659e96d6c9058e, &exec_fc659e96d6c9058e, 0x00002cd1 },
		{ 0x66b6ddcf73501661, &exec_66b6ddcf73501661, 0x00002cdb },
		{ 0xaed18706fe509901, &exec_aed18706fe509901, 0x00002ce3 },
		{ 0x90250a590b2696ce, &exec_90250a590b2696ce, 0x00002ce8 },
		{ 0x96da45b12efd4431, &exec_96da45b12efd4431, 0x00002ced },
		{ 0x9da0d02922c5794f, &exec_9da0d02922c5794f, 0x00002cf2 },
		{ 0xa2a2381d913a7355, &exec_a2a2381d913a7355, 0x00003160 },
		{ 0x427932cb983536fc, &exec_427932cb983536fc, 0x00002cfb },
		{ 0x0d983edc2ba03d86, &exec_0d983edc2ba03d86, 0x00002d0e },
		{ 0xc2e718a2f70697ff, &exec_c2e718a2f70697ff, 0x0000314f },
		{ 0x19f8bbb24b6491a5, &exec_19f8bbb24b6491a5, 0x00002d12 },
		{ 0x763768ff7263e2c7, &exec_763768ff7263e2c7, 0x00002d19 },
		{ 0xc1002109b00c0db3, &exec_c1002109b00c0db3, 0x000039ed },
		{ 0x0e35d7b16d23223a, &exec_0e35d7b16d23223a, 0x00004b22 },
		{ 0xa9e6fc0ffaec280a, &exec_a9e6fc0ffaec280a, 0x00002d25 },
		{ 0x48991d7a308813a1, &exec_48991d7a308813a1, 0x000036bd },
		{ 0xb5aa89de7c6ed2ed, &exec_b5aa89de7c6ed2ed, 0x00002d30 },
		{ 0x6d9993ba95175880, &exec_6d9993ba95175880, 0x000034c6 },
		{ 0x2a52a0243cc834c5, &exec_2a52a0243cc834c5, 0x00002d34 },
		{ 0xbe49773031d0fd26, &exec_be49773031d0fd26, 0x00002d3f },
		{ 0x0847dea405e21e00, &exec_0847dea405e21e00, 0x00002d55 },
		{ 0x54efb192fb7e35a8, &exec_54efb192fb7e35a8, 0x00002d5a },
		{ 0x1e34291bd4b0ca9f, &exec_1e34291bd4b0ca9f, 0x00002d6a },
		{ 0x339549ccedac0672, &exec_339549ccedac0672, 0x00002d6e },
		{ 0x3e15afc470184ef8, &exec_3e15afc470184ef8, 0x00002d72 },
		{ 0xa9537b6cd6473039, &exec_a9537b6cd6473039, 0x00002d76 },
		{ 0x2108e9abb7a940ca, &exec_2108e9abb7a940ca, 0x00002d7b },
		{ 0x21ef0a0539106f4c, &exec_21ef0a0539106f4c, 0x0000373a },
		{ 0xe67b6acf97dd6ac5, &exec_e67b6acf97dd6ac5, 0x000046d8 },
		{ 0x42be6f6c0f1d4df7, &exec_42be6f6c0f1d4df7, 0x00002d8b },
		{ 0x3367107975ccbb9a, &exec_3367107975ccbb9a, 0x00003317 },
		{ 0xd1dd17f42923c4a8, &exec_d1dd17f42923c4a8, 0x00002d95 },
		{ 0xae2beb6bca7ca0bb, &exec_ae2beb6bca7ca0bb, 0x00002fde },
		{ 0xe8b5515e4c7afa1d, &exec_e8b5515e4c7afa1d, 0x00002d9e },
		{ 0x8bf87baaadb4e13e, &exec_8bf87baaadb4e13e, 0x00002daf },
		{ 0xa009178782e721f9, &exec_a009178782e721f9, 0x00002db2 },
		{ 0xd5504339fad4b773, &exec_d5504339fad4b773, 0x0000417f },
		{ 0xf19a9948630144dd, &exec_f19a9948630144dd, 0x00002db5 },
		{ 0x8217d02d5ea80e29, &exec_8217d02d5ea80e29, 0x00004404 },
		{ 0x7384f981f33a9330, &exec_7384f981f33a9330, 0x00002dbf },
		{ 0x087047638e780927, &exec_087047638e780927, 0x000037b8 },
		{ 0x2b2809b692c3bdb2, &exec_2b2809b692c3bdb2, 0x00002dc3 },
		{ 0xb3bc83a1e3cc8a07, &exec_b3bc83a1e3cc8a07, 0x00003558 },
		{ 0x2931e2f16f7daa2e, &exec_2931e2f16f7daa2e, 0x00002dc8 },
		{ 0x62f219648f6d5fe5, &exec_62f219648f6d5fe5, 0x00002dcf },
		{ 0xf0b44520a6cfcb4a, &exec_f0b44520a6cfcb4a, 0x00002dd7 },
		{ 0xf38c53a4151f4fed, &exec_f38c53a4151f4fed, 0x00002ddc },
		{ 0xd768251dbde505bb, &exec_d768251dbde505bb, 0x00003c95 },
		{ 0x8afff1caaea8161d, &exec_8afff1caaea8161d, 0x00003c68 },
		{ 0xb8f1164fcd7b6bc8, &exec_b8f1164fcd7b6bc8, 0x00003122 },
		{ 0x5ade2a94917c3c19, &exec_5ade2a94917c3c19, 0x00002ded },
		{ 0x5763f3ea030aa3ff, &exec_5763f3ea030aa3ff, 0x00002df2 },
		{ 0x07e71eca9b73a9ba, &exec_07e71eca9b73a9ba, 0x00002e03 },
		{ 0x84536d13fdb51ee1, &exec_84536d13fdb51ee1, 0x00003f9f },
		{ 0x0d06d278ba17b61a, &exec_0d06d278ba17b61a, 0x00002e09 },
		{ 0x284f018f04399aa4, &exec_284f018f04399aa4, 0x00004597 },
		{ 0x9826be9d170cd7ad, &exec_9826be9d170cd7ad, 0x00002e0e },
		{ 0x28d6c82cfd3c2d8a, &exec_28d6c82cfd3c2d8a, 0x00003bee },
		{ 0x4edf193d93dfaaa8, &exec_4edf193d93dfaaa8, 0x00002e13 },
		{ 0x8094a9a53ac3b421, &exec_8094a9a53ac3b421, 0x00002e25 },
		{ 0x5cfc469c03ee6ce1, &exec_5cfc469c03ee6ce1, 0x00004af1 },
		{ 0x3d93244da49675b8, &exec_3d93244da49675b8, 0x00002e34 },
		{ 0x4d3c112f20a3bc58, &exec_4d3c112f20a3bc58, 0x000040a2 },
		{ 0x5aba173adc8b8f5b, &exec_5aba173adc8b8f5b, 0x00002e43 },
		{ 0x728845253fe17bea, &exec_728845253fe17bea, 0x00003605 },
		{ 0x746abeeb1940d0b2, &exec_746abeeb1940d0b2, 0x00002e4e },
		{ 0xbc49ebc813226262, &exec_bc49ebc813226262, 0x00004962 },
		{ 0x1daf9ab769d68d04, &exec_1daf9ab769d68d04, 0x00002e54 },
		{ 0x0cc64c21464434c5, &exec_0cc64c21464434c5, 0x00003f89 },
		{ 0xf236aa814468ec57, &exec_f236aa814468ec57, 0x00003646 },
		{ 0x464368294af11255, &exec_464368294af11255, 0x00002e59 },
		{ 0x4bf01f9a0acaf1b7, &exec_4bf01f9a0acaf1b7, 0x00002e5e },
		{ 0x68f4a07d04a7cb2b, &exec_68f4a07d04a7cb2b, 0x00002e61 },
		{ 0xc79452d92fdf777a, &exec_c79452d92fdf777a, 0x00004178 },
		{ 0xa651e8f0a1a13376, &exec_a651e8f0a1a13376, 0x00002e72 },
		{ 0xfa5f5f757bf71651, &exec_fa5f5f757bf71651, 0x00002e75 },
		{ 0xeb7683a083989140, &exec_eb7683a083989140, 0x00002e81 },
		{ 0x3e77312918a73c7e, &exec_3e77312918a73c7e, 0x00002e85 },
		{ 0x9b0703242913ecd5, &exec_9b0703242913ecd5, 0x00002e88 },
		{ 0xc52b466db0b1596a, &exec_c52b466db0b1596a, 0x00002e8e },
		{ 0x17cb1b36d2f98ade, &exec_17cb1b36d2f98ade, 0x00002e93 },
		{ 0x35210cb4f2073ff1, &exec_35210cb4f2073ff1, 0x00003094 },
		{ 0x2bb2deaacf9713ec, &exec_2bb2deaacf9713ec, 0x00002e97 },
		{ 0x1234139a37dc92fb, &exec_1234139a37dc92fb, 0x00002ea2 },
		{ 0x1d9dce772be13ed3, &exec_1d9dce772be13ed3, 0x0000343f },
		{ 0xe656d5dda41f4000, &exec_e656d5dda41f4000, 0x00003114 },
		{ 0xaffd544385776d24, &exec_affd544385776d24, 0x000035c5 },
		{ 0x116233096be1324c, &exec_116233096be1324c, 0x00003eaf },
		{ 0x723aff3cbaae38f6, &exec_723aff3cbaae38f6, 0x00003584 },
		{ 0x3ed8f07caca450f1, &exec_3ed8f07caca450f1, 0x00002eb7 },
		{ 0x83271581efec9a34, &exec_83271581efec9a34, 0x00002ec2 },
		{ 0xf7badd25d9e59cd7, &exec_f7badd25d9e59cd7, 0x00002ecd },
		{ 0x6872d29f85785632, &exec_6872d29f85785632, 0x00002ed2 },
		{ 0x6a32cf53ae364e99, &exec_6a32cf53ae364e99, 0x00002ed7 },
		{ 0xe98a440113ce774c, &exec_e98a440113ce774c, 0x00002edc },
		{ 0x67e4a1c1321693f9, &exec_67e4a1c1321693f9, 0x00002ee8 },
		{ 0x2feb3a7e1fa8ec38, &exec_2feb3a7e1fa8ec38, 0x00002eef },
		{ 0xb59b47e70a30e8da, &exec_b59b47e70a30e8da, 0x00002ef7 },
		{ 0x3eb94c6f8d0808ec, &exec_3eb94c6f8d0808ec, 0x00002f06 },
		{ 0x504aa26806bdacf7, &exec_504aa26806bdacf7, 0x00003daf },
		{ 0x7ae24283dc770179, &exec_7ae24283dc770179, 0x00002f09 },
		{ 0xb6ddd345a52c86f6, &exec_b6ddd345a52c86f6, 0x00002f12 },
		{ 0x7fe8b5fb6d5851a0, &exec_7fe8b5fb6d5851a0, 0x00002f16 },
		{ 0xc20ca2aea2e535a7, &exec_c20ca2aea2e535a7, 0x00002f1f },
		{ 0x6e9d25a884b83cda, &exec_6e9d25a884b83cda, 0x000035b7 },
		{ 0x3e71100431f2aa7e, &exec_3e71100431f2aa7e, 0x00003337 },
		{ 0xda67de9befed013d, &exec_da67de9befed013d, 0x00002f24 },
		{ 0xeb568043b894123a, &exec_eb568043b894123a, 0x00002f3b },
		{ 0xa2fb147752d6b8d8, &exec_a2fb147752d6b8d8, 0x00002f40 },
		{ 0xc09deded1e841397, &exec_c09deded1e841397, 0x0000427c },
		{ 0x2e540b23dc5d93c3, &exec_2e540b23dc5d93c3, 0x00002f4a },
		{ 0x0d9120000a960687, &exec_0d9120000a960687, 0x00003409 },
		{ 0x414cbc18a39c1b3c, &exec_414cbc18a39c1b3c, 0x00003cf6 },
		{ 0xa8af14968e469b69, &exec_a8af14968e469b69, 0x00002f50 },
		{ 0xc5b09751b4ba3f2d, &exec_c5b09751b4ba3f2d, 0x00002f56 },
		{ 0xbe76d6e9a7bc807a, &exec_be76d6e9a7bc807a, 0x0000430f },
		{ 0xd4f4277cdfc1ae69, &exec_d4f4277cdfc1ae69, 0x00002f69 },
		{ 0x1f3fb2d13409f4a5, &exec_1f3fb2d13409f4a5, 0x00002f7b },
		{ 0x73c00c899c742d68, &exec_73c00c899c742d68, 0x00003030 },
		{ 0x09bf650cc4949d7d, &exec_09bf650cc4949d7d, 0x00003307 },
		{ 0x34062969579a4984, &exec_34062969579a4984, 0x00002fa0 },
		{ 0xb1bade9c61dece61, &exec_b1bade9c61dece61, 0x000044ea },
		{ 0xa8f53d0dfa6acc4a, &exec_a8f53d0dfa6acc4a, 0x00002fb2 },
		{ 0xa9b57646705c2b7c, &exec_a9b57646705c2b7c, 0x00002fca },
		{ 0xc6b9939b68c92144, &exec_c6b9939b68c92144, 0x00002fcf },
		{ 0x2a6634d2ef0398b6, &exec_2a6634d2ef0398b6, 0x00002fd9 },
		{ 0x4722e33c311d67dc, &exec_4722e33c311d67dc, 0x000036ef },
		{ 0xb5691ec66e25bb89, &exec_b5691ec66e25bb89, 0x00002fe2 },
		{ 0x7f8cad795db7de1a, &exec_7f8cad795db7de1a, 0x00002ff3 },
		{ 0xa6a175a826c43e0e, &exec_a6a175a826c43e0e, 0x00002ff9 },
		{ 0xe93e3a30689d16b8, &exec_e93e3a30689d16b8, 0x0000391e },
		{ 0xd4be1c95006eb1a2, &exec_d4be1c95006eb1a2, 0x00002ffe },
		{ 0x02b7ee7e2c123287, &exec_02b7ee7e2c123287, 0x00003000 },
		{ 0x93e39a7c40d4c262, &exec_93e39a7c40d4c262, 0x0000300f },
		{ 0xd124c7517251b219, &exec_d124c7517251b219, 0x00003015 },
		{ 0x804a834e187d69f3, &exec_804a834e187d69f3, 0x00003021 },
		{ 0xf11cf55c33025ca2, &exec_f11cf55c33025ca2, 0x00003024 },
		{ 0x9dc87551853309da, &exec_9dc87551853309da, 0x00003028 },
		{ 0xe2649031ccb67682, &exec_e2649031ccb67682, 0x0000302c },
		{ 0x92d175430a54b138, &exec_92d175430a54b138, 0x00003039 },
		{ 0x501d786ab5c9c7e3, &exec_501d786ab5c9c7e3, 0x00003041 },
		{ 0x87736020242c6477, &exec_87736020242c6477, 0x00003047 },
		{ 0xdf486b5f59d335a3, &exec_df486b5f59d335a3, 0x0000304d },
		{ 0x128360a9fc2394a6, &exec_128360a9fc2394a6, 0x00003051 },
		{ 0x1190d8f6639a3f8c, &exec_1190d8f6639a3f8c, 0x000048ea },
		{ 0xf40befc63bd3d872, &exec_f40befc63bd3d872, 0x00003053 },
		{ 0x9cd69400083f44cc, &exec_9cd69400083f44cc, 0x0000397f },
		{ 0x09cbadc90b8f37e8, &exec_09cbadc90b8f37e8, 0x0000305e },
		{ 0x22ccbf758579f409, &exec_22ccbf758579f409, 0x00003062 },
		{ 0x42de6f54e00a3f5f, &exec_42de6f54e00a3f5f, 0x0000306c },
		{ 0xb22bb4fd04a393b7, &exec_b22bb4fd04a393b7, 0x00004b90 },
		{ 0x59c6cd538e93a9e4, &exec_59c6cd538e93a9e4, 0x00003078 },
		{ 0x6038c1f2425090b1, &exec_6038c1f2425090b1, 0x0000307f },
		{ 0xb5eef9747220dd67, &exec_b5eef9747220dd67, 0x0000308a },
		{ 0x9b3d2af4736a4416, &exec_9b3d2af4736a4416, 0x00003091 },
		{ 0x191daceeb8c785eb, &exec_191daceeb8c785eb, 0x00003098 },
		{ 0xaa728a4d61846e4f, &exec_aa728a4d61846e4f, 0x0000312a },
		{ 0x259a2bcd28968326, &exec_259a2bcd28968326, 0x000030ae },
		{ 0x39451ad60956995e, &exec_39451ad60956995e, 0x00003c5b },
		{ 0xb5cdedfb19951734, &exec_b5cdedfb19951734, 0x000030b3 },
		{ 0x58f2ce73e7cae390, &exec_58f2ce73e7cae390, 0x00003e5a },
		{ 0x2b9f5909c2a8bfdf, &exec_2b9f5909c2a8bfdf, 0x000030bf },
		{ 0x80d07c5626b2fd16, &exec_80d07c5626b2fd16, 0x000030d2 },
		{ 0x0c40da83c8e5c643, &exec_0c40da83c8e5c643, 0x000030d9 },
		{ 0x4ad5eb8d487a3eea, &exec_4ad5eb8d487a3eea, 0x00003e7e },
		{ 0x74475ab68f0eca06, &exec_74475ab68f0eca06, 0x000034d1 },
		{ 0x72e821adc47b8473, &exec_72e821adc47b8473, 0x000030de },
		{ 0xb7727ed4bf76cb63, &exec_b7727ed4bf76cb63, 0x000030ee },
		{ 0xb5be8f47540827e3, &exec_b5be8f47540827e3, 0x000030f3 },
		{ 0x0263ec2da33c8518, &exec_0263ec2da33c8518, 0x000030f7 },
		{ 0x061a6fcb330eff66, &exec_061a6fcb330eff66, 0x000030fc },
		{ 0x103b5cf76f744d9a, &exec_103b5cf76f744d9a, 0x00003551 },
		{ 0xae083c0c346d800f, &exec_ae083c0c346d800f, 0x00003102 },
		{ 0x1b8fb1b9045206c0, &exec_1b8fb1b9045206c0, 0x0000310c },
		{ 0xc8f3b6b781e30ebd, &exec_c8f3b6b781e30ebd, 0x00003110 },
		{ 0x5187dc7e6e5a09c7, &exec_5187dc7e6e5a09c7, 0x00004909 },
		{ 0xd04553e4a7672c28, &exec_d04553e4a7672c28, 0x0000311e },
		{ 0xb00bd163885888a9, &exec_b00bd163885888a9, 0x00003137 },
		{ 0x8e56ea61c9d18dcd, &exec_8e56ea61c9d18dcd, 0x0000464f },
		{ 0x552fff21b77b4f3d, &exec_552fff21b77b4f3d, 0x00003141 },
		{ 0x2c8c8ee7d0b4479f, &exec_2c8c8ee7d0b4479f, 0x00003146 },
		{ 0x91badd3d658b4c16, &exec_91badd3d658b4c16, 0x000035c3 },
		{ 0x3d5113513bc33409, &exec_3d5113513bc33409, 0x0000315d },
		{ 0xaea34c84359d07d4, &exec_aea34c84359d07d4, 0x00003162 },
		{ 0x91adee6657231f9b, &exec_91adee6657231f9b, 0x00003165 },
		{ 0x73084c96e47bc2f1, &exec_73084c96e47bc2f1, 0x0000316a },
		{ 0xc2c85a94a3cd07bb, &exec_c2c85a94a3cd07bb, 0x0000316f },
		{ 0xff70ad5a8c52394c, &exec_ff70ad5a8c52394c, 0x00004238 },
		{ 0x44bfd1e584fc711b, &exec_44bfd1e584fc711b, 0x00003ab6 },
		{ 0xe1dd6b67c389453a, &exec_e1dd6b67c389453a, 0x0000317c },
		{ 0x45e1d6e3c634452d, &exec_45e1d6e3c634452d, 0x00004b2e },
		{ 0x2da4c98c8018083b, &exec_2da4c98c8018083b, 0x00003180 },
		{ 0x2afc40734f0b8c43, &exec_2afc40734f0b8c43, 0x0000318e },
		{ 0x495e690b11ad09ff, &exec_495e690b11ad09ff, 0x00003195 },
		{ 0xdd453e5d95e481f6, &exec_dd453e5d95e481f6, 0x0000319b },
		{ 0xa6b76376fba4f7a4, &exec_a6b76376fba4f7a4, 0x0000471d },
		{ 0x24c58be903964898, &exec_24c58be903964898, 0x0000319e },
		{ 0xc3dea3941bccf3d1, &exec_c3dea3941bccf3d1, 0x000031a5 },
		{ 0x10347882cc46700d, &exec_10347882cc46700d, 0x000031aa },
		{ 0x1d0d2bb301a5bb1e, &exec_1d0d2bb301a5bb1e, 0x00004447 },
		{ 0x4a6c830aea3c9170, &exec_4a6c830aea3c9170, 0x000031b1 },
		{ 0x621df67752f71c18, &exec_621df67752f71c18, 0x000031cf },
		{ 0x18a87604262ccffb, &exec_18a87604262ccffb, 0x000031dc },
		{ 0x49b3f4c55142bc05, &exec_49b3f4c55142bc05, 0x000031e9 },
		{ 0x5e6214a5e3e888fa, &exec_5e6214a5e3e888fa, 0x000031ed },
		{ 0x2a203d6524e642e3, &exec_2a203d6524e642e3, 0x000031f0 },
		{ 0x78ea6c58dc3aba4c, &exec_78ea6c58dc3aba4c, 0x00003209 },
		{ 0xb8f2c791c9d04dbe, &exec_b8f2c791c9d04dbe, 0x000038ca },
		{ 0x494bce7fd1e38c11, &exec_494bce7fd1e38c11, 0x0000320f },
		{ 0x6abf5f75da4e5bcf, &exec_6abf5f75da4e5bcf, 0x00003224 },
		{ 0x8607369b16629570, &exec_8607369b16629570, 0x0000410f },
		{ 0x62ee02624f21c8cf, &exec_62ee02624f21c8cf, 0x00003227 },
		{ 0xfb74079fc3dd902a, &exec_fb74079fc3dd902a, 0x0000322d },
		{ 0xc1575a13794dbf3d, &exec_c1575a13794dbf3d, 0x00003355 },
		{ 0x61d0386aea0623b3, &exec_61d0386aea0623b3, 0x00003236 },
		{ 0xd5808f51df71105b, &exec_d5808f51df71105b, 0x00003241 },
		{ 0xe05d2d831e7fce8f, &exec_e05d2d831e7fce8f, 0x00003248 },
		{ 0x7a685ec344d24b5e, &exec_7a685ec344d24b5e, 0x00000000 },
		{ 0xe0c30c6131d0af1c, &exec_e0c30c6131d0af1c, 0x000045d6 },
		{ 0x1eb8d529abacd227, &exec_1eb8d529abacd227, 0x00003254 },
		{ 0xbe59b7f54d393bde, &exec_be59b7f54d393bde, 0x00003258 },
		{ 0xf0cb89d4a9987449, &exec_f0cb89d4a9987449, 0x0000325e },
		{ 0x1605d58350a071e9, &exec_1605d58350a071e9, 0x00003262 },
		{ 0x0eac5f6eae758af8, &exec_0eac5f6eae758af8, 0x00003267 },
		{ 0xf2499780c6db3ea2, &exec_f2499780c6db3ea2, 0x0000435a },
		{ 0xfe3a1db990bd6974, &exec_fe3a1db990bd6974, 0x00003742 },
		{ 0x427b53f4e3b08ab3, &exec_427b53f4e3b08ab3, 0x00003271 },
		{ 0x700bfa85657b41f4, &exec_700bfa85657b41f4, 0x00003276 },
		{ 0xaaacb73b09e7189a, &exec_aaacb73b09e7189a, 0x00003287 },
		{ 0x50bfd6b77ef7727a, &exec_50bfd6b77ef7727a, 0x0000328e },
		{ 0xbdaad521813125bb, &exec_bdaad521813125bb, 0x00003e97 },
		{ 0x7ed26cdb99b2be54, &exec_7ed26cdb99b2be54, 0x0000329c },
		{ 0x04ac66d4ff42fe49, &exec_04ac66d4ff42fe49, 0x000032a2 },
		{ 0xdea078aac4ab2e16, &exec_dea078aac4ab2e16, 0x000032a6 },
		{ 0xcb5e2aa9bdc8d250, &exec_cb5e2aa9bdc8d250, 0x000032b1 },
		{ 0x0cf51785a6dad6b7, &exec_0cf51785a6dad6b7, 0x000038ef },
		{ 0x3392bf8175beceb4, &exec_3392bf8175beceb4, 0x000032b5 },
		{ 0xc5590aaa54bb9e36, &exec_c5590aaa54bb9e36, 0x000032b9 },
		{ 0xba31b61fae199fd0, &exec_ba31b61fae199fd0, 0x000034a7 },
		{ 0x5a178de0b3a0d696, &exec_5a178de0b3a0d696, 0x000032c3 },
		{ 0xe6016de6c3ed2e46, &exec_e6016de6c3ed2e46, 0x00003df0 },
		{ 0x650e0ec6f2605661, &exec_650e0ec6f2605661, 0x000032cb },
		{ 0xfcad3c75cc6a4ae3, &exec_fcad3c75cc6a4ae3, 0x000032e8 },
		{ 0x142b58371bb6306a, &exec_142b58371bb6306a, 0x000032ee },
		{ 0xd5c3bb704f34226b, &exec_d5c3bb704f34226b, 0x000032f7 },
		{ 0x3ef980cfbed15972, &exec_3ef980cfbed15972, 0x00003302 },
		{ 0x4cc58edd5f3f80b8, &exec_4cc58edd5f3f80b8, 0x00003312 },
		{ 0xd08a52ecb495f776, &exec_d08a52ecb495f776, 0x00003c7c },
		{ 0x18c5e88c4dd727c1, &exec_18c5e88c4dd727c1, 0x0000331c },
		{ 0x3be11955c7a2516d, &exec_3be11955c7a2516d, 0x0000332d },
		{ 0x1ae2db3b412c6499, &exec_1ae2db3b412c6499, 0x00003331 },
		{ 0x30e7ca76427ab7b6, &exec_30e7ca76427ab7b6, 0x00004b2a },
		{ 0x3b7d904ef291d309, &exec_3b7d904ef291d309, 0x0000333e },
		{ 0x84f2a9711c09062a, &exec_84f2a9711c09062a, 0x0000448b },
		{ 0x32205c132a3815d1, &exec_32205c132a3815d1, 0x00003352 },
		{ 0x01469d354e0105ed, &exec_01469d354e0105ed, 0x00003dda },
		{ 0x3bddfa3a23eebdaf, &exec_3bddfa3a23eebdaf, 0x0000335d },
		{ 0xc3d9e0089b3a208c, &exec_c3d9e0089b3a208c, 0x000047ec },
		{ 0x9731316e98088787, &exec_9731316e98088787, 0x00003364 },
		{ 0x752ef9e721be3e8b, &exec_752ef9e721be3e8b, 0x0000336c },
		{ 0xc188ec48ea0a8df2, &exec_c188ec48ea0a8df2, 0x00003fec },
		{ 0x48f1744e62b81634, &exec_48f1744e62b81634, 0x000046ef },
		{ 0x6a64508ea501cd53, &exec_6a64508ea501cd53, 0x00003379 },
		{ 0x635a5367dece7648, &exec_635a5367dece7648, 0x0000337f },
		{ 0x3e440eeedbe2fad4, &exec_3e440eeedbe2fad4, 0x0000338f },
		{ 0x80c7b4aaa9a1065c, &exec_80c7b4aaa9a1065c, 0x00003399 },
		{ 0x1fa0344e4b3bd239, &exec_1fa0344e4b3bd239, 0x000033a2 },
		{ 0x03bb807da5488588, &exec_03bb807da5488588, 0x000033a8 },
		{ 0xaf770fcfa38df184, &exec_af770fcfa38df184, 0x000033ae },
		{ 0x10c824c03e8f8e0f, &exec_10c824c03e8f8e0f, 0x000033b7 },
		{ 0xf7d5f60a7ab3efbf, &exec_f7d5f60a7ab3efbf, 0x000033bb },
		{ 0x61ee75765abf6337, &exec_61ee75765abf6337, 0x000033d3 },
		{ 0xa17e1518d3a0bb10, &exec_a17e1518d3a0bb10, 0x000033d8 },
		{ 0x94c8161a13af2d99, &exec_94c8161a13af2d99, 0x000033de },
		{ 0x3f3cfcc33be00bb4, &exec_3f3cfcc33be00bb4, 0x000033e4 },
		{ 0x5841881e28dfa944, &exec_5841881e28dfa944, 0x000033ea },
		{ 0x2f5bdd7fe929184f, &exec_2f5bdd7fe929184f, 0x000033fe },
		{ 0x00842d1d7961ddf7, &exec_00842d1d7961ddf7, 0x00003406 },
		{ 0x4a7f92127efa2d9c, &exec_4a7f92127efa2d9c, 0x00003412 },
		{ 0x425380c550cc9b7d, &exec_425380c550cc9b7d, 0x00003824 },
		{ 0xa1ae0495c74138c8, &exec_a1ae0495c74138c8, 0x0000341a },
		{ 0x971d7c23cbbfa4a3, &exec_971d7c23cbbfa4a3, 0x00004721 },
		{ 0x6d2ae09187536cbb, &exec_6d2ae09187536cbb, 0x0000342b },
		{ 0xa6f258ffad854009, &exec_a6f258ffad854009, 0x00003437 },
		{ 0xcfc682a749dccc89, &exec_cfc682a749dccc89, 0x00003442 },
		{ 0x72b7ca5629f3c4e6, &exec_72b7ca5629f3c4e6, 0x00003446 },
		{ 0x8bb0ac29518ea037, &exec_8bb0ac29518ea037, 0x00003449 },
		{ 0xb27c9b42232d4266, &exec_b27c9b42232d4266, 0x0000437b },
		{ 0x092601b68cd29029, &exec_092601b68cd29029, 0x00003450 },
		{ 0xfbd93cfb84e9f4d1, &exec_fbd93cfb84e9f4d1, 0x00003456 },
		{ 0x296b6162c80da5ff, &exec_296b6162c80da5ff, 0x00003463 },
		{ 0xfe661f3319087ce0, &exec_fe661f3319087ce0, 0x00003476 },
		{ 0xb47ff97923c9dae3, &exec_b47ff97923c9dae3, 0x00003f9b },
		{ 0x0202b176b91c2c31, &exec_0202b176b91c2c31, 0x00003488 },
		{ 0xae7f5f6b4e9ac049, &exec_ae7f5f6b4e9ac049, 0x0000349b },
		{ 0xf6f256fbda6e13b1, &exec_f6f256fbda6e13b1, 0x000034a4 },
		{ 0xbe6648a5d6fd6442, &exec_be6648a5d6fd6442, 0x000034a9 },
		{ 0xf45a9852d6ead5d7, &exec_f45a9852d6ead5d7, 0x000034ad },
		{ 0x131689bacda3d423, &exec_131689bacda3d423, 0x000034bc },
		{ 0xedbf7f8dba4b4c05, &exec_edbf7f8dba4b4c05, 0x000034c1 },
		{ 0x993b8dc4fc18897b, &exec_993b8dc4fc18897b, 0x000034db },
		{ 0x8f77da82fbece342, &exec_8f77da82fbece342, 0x000034df },
		{ 0xe4fc92b6fc31ce3e, &exec_e4fc92b6fc31ce3e, 0x000034e3 },
		{ 0x9ec83f3865878889, &exec_9ec83f3865878889, 0x000034ee },
		{ 0x66269fd6b4902e1d, &exec_66269fd6b4902e1d, 0x000034f2 },
		{ 0x038e77b229081394, &exec_038e77b229081394, 0x00003502 },
		{ 0x8e62122f76c0286c, &exec_8e62122f76c0286c, 0x0000350b },
		{ 0x0f8193d3636e5a66, &exec_0f8193d3636e5a66, 0x00003511 },
		{ 0x8190e0a710eac2a9, &exec_8190e0a710eac2a9, 0x00003519 },
		{ 0x6a8a3383ce0a305b, &exec_6a8a3383ce0a305b, 0x00004714 },
		{ 0x15205b79567b0f10, &exec_15205b79567b0f10, 0x0000352c },
		{ 0xeaac3b0d45bdfb17, &exec_eaac3b0d45bdfb17, 0x00003532 },
		{ 0x0a8436fb3375891a, &exec_0a8436fb3375891a, 0x0000353c },
		{ 0x427f2b6edc1a325c, &exec_427f2b6edc1a325c, 0x00003540 },
		{ 0xb873c712ea04ae84, &exec_b873c712ea04ae84, 0x0000354b },
		{ 0x1169cd9d555b0c60, &exec_1169cd9d555b0c60, 0x00003729 },
		{ 0xddf80f0828bea5c4, &exec_ddf80f0828bea5c4, 0x00003575 },
		{ 0xbd0046d294706210, &exec_bd0046d294706210, 0x0000357d },
		{ 0xbdc5243bbf5fa5a0, &exec_bdc5243bbf5fa5a0, 0x00004465 },
		{ 0x1e7390c6fe61d785, &exec_1e7390c6fe61d785, 0x00004a11 },
		{ 0xf155e55d708c8e20, &exec_f155e55d708c8e20, 0x00003594 },
		{ 0x58c691015cf20402, &exec_58c691015cf20402, 0x00003598 },
		{ 0x613f5d3e7685bf39, &exec_613f5d3e7685bf39, 0x00004338 },
		{ 0x011d337bc78fad55, &exec_011d337bc78fad55, 0x000035a3 },
		{ 0xe2cb3404a2db8059, &exec_e2cb3404a2db8059, 0x000035aa },
		{ 0x02b38053ec2f697a, &exec_02b38053ec2f697a, 0x00003713 },
		{ 0x0f06636485d3502e, &exec_0f06636485d3502e, 0x000035ca },
		{ 0x7901786442d191de, &exec_7901786442d191de, 0x000035cf },
		{ 0xcd83a23bb213e52b, &exec_cd83a23bb213e52b, 0x000035e2 },
		{ 0x48c21b60c80ee60e, &exec_48c21b60c80ee60e, 0x000045b7 },
		{ 0x0f2315d61b0ac9ee, &exec_0f2315d61b0ac9ee, 0x000035ee },
		{ 0x50c15b57bdfa015d, &exec_50c15b57bdfa015d, 0x000035f9 },
		{ 0xace6b4ebc47b286b, &exec_ace6b4ebc47b286b, 0x0000443c },
		{ 0xaa0d1d081a2a5566, &exec_aa0d1d081a2a5566, 0x000035fe },
		{ 0x262c26f725009e68, &exec_262c26f725009e68, 0x00003ebf },
		{ 0xef593d35ba4f9362, &exec_ef593d35ba4f9362, 0x0000360b },
		{ 0x20d8cd75a284a06a, &exec_20d8cd75a284a06a, 0x000039f4 },
		{ 0xd1f3df69e05ac810, &exec_d1f3df69e05ac810, 0x00003615 },
		{ 0x1286c9d2c94c4716, &exec_1286c9d2c94c4716, 0x0000361e },
		{ 0x35d950660c07d467, &exec_35d950660c07d467, 0x00003621 },
		{ 0xbb326a59cd1e0027, &exec_bb326a59cd1e0027, 0x00003628 },
		{ 0xa98395ebebb33196, &exec_a98395ebebb33196, 0x00004299 },
		{ 0x0fb233fe5aab58e4, &exec_0fb233fe5aab58e4, 0x0000362d },
		{ 0x0d4ed9b914cbe9d0, &exec_0d4ed9b914cbe9d0, 0x0000363e },
		{ 0xe1c2a059dc7fb2b5, &exec_e1c2a059dc7fb2b5, 0x00003643 },
		{ 0x90531d47416e98bf, &exec_90531d47416e98bf, 0x00004663 },
		{ 0x0fee9fd3b241c4e3, &exec_0fee9fd3b241c4e3, 0x0000364d },
		{ 0x8c1d38f26111b338, &exec_8c1d38f26111b338, 0x00003654 },
		{ 0xe38c01df42c29d89, &exec_e38c01df42c29d89, 0x000041ae },
		{ 0x8b170a9df55f7300, &exec_8b170a9df55f7300, 0x0000365f },
		{ 0x1b903e4ed760c68c, &exec_1b903e4ed760c68c, 0x0000366d },
		{ 0xf87762e0d4ce1a37, &exec_f87762e0d4ce1a37, 0x00003678 },
		{ 0x656f9a9a6853003a, &exec_656f9a9a6853003a, 0x00003709 },
		{ 0xff1dd43adb3548c0, &exec_ff1dd43adb3548c0, 0x00003683 },
		{ 0x93e323639b874031, &exec_93e323639b874031, 0x00003699 },
		{ 0x7e96a2c8cfb6bbe5, &exec_7e96a2c8cfb6bbe5, 0x000036a1 },
		{ 0xa586a1fd34f7c388, &exec_a586a1fd34f7c388, 0x000037cc },
		{ 0xb886eeab27c96816, &exec_b886eeab27c96816, 0x000036b1 },
		{ 0x8790014ea2b2fc1e, &exec_8790014ea2b2fc1e, 0x000036b9 },
		{ 0x0e5747665d381e3b, &exec_0e5747665d381e3b, 0x00004647 },
		{ 0x0d69974b3561b785, &exec_0d69974b3561b785, 0x000042f6 },
		{ 0x35ca11ed74eb1c79, &exec_35ca11ed74eb1c79, 0x000036c6 },
		{ 0x387bdbc7d3dd5cd7, &exec_387bdbc7d3dd5cd7, 0x000036e2 },
		{ 0x7fe3b18a2c95f76e, &exec_7fe3b18a2c95f76e, 0x000036e8 },
		{ 0xddf90ed4dec637b9, &exec_ddf90ed4dec637b9, 0x000036ec },
		{ 0xa614b02df21bcf4c, &exec_a614b02df21bcf4c, 0x00003bd6 },
		{ 0xd024cd484c66c623, &exec_d024cd484c66c623, 0x000036f9 },
		{ 0x895ad12fc5b4445f, &exec_895ad12fc5b4445f, 0x00003701 },
		{ 0x694cbf2df76868b7, &exec_694cbf2df76868b7, 0x00003710 },
		{ 0x4366c6abf6f51d61, &exec_4366c6abf6f51d61, 0x00003c41 },
		{ 0x5d27c1dd393c2d83, &exec_5d27c1dd393c2d83, 0x0000371b },
		{ 0x6b1af33aaefacb47, &exec_6b1af33aaefacb47, 0x0000395d },
		{ 0x70e5835a9e9524c2, &exec_70e5835a9e9524c2, 0x00003722 },
		{ 0xf0e416903edbed7f, &exec_f0e416903edbed7f, 0x0000372d },
		{ 0x0a7a91a4f3a8a040, &exec_0a7a91a4f3a8a040, 0x00003732 },
		{ 0xdb2f0e0d7ff7f86e, &exec_db2f0e0d7ff7f86e, 0x00003737 },
		{ 0x2e678d2fb631a71f, &exec_2e678d2fb631a71f, 0x0000373e },
		{ 0xba06c06388c5673b, &exec_ba06c06388c5673b, 0x00003755 },
		{ 0x61927115ca8994d9, &exec_61927115ca8994d9, 0x00004306 },
		{ 0x1368fdabf6fc3856, &exec_1368fdabf6fc3856, 0x00003762 },
		{ 0x474005cc6de7bec5, &exec_474005cc6de7bec5, 0x00004313 },
		{ 0x881fe4157427a8e4, &exec_881fe4157427a8e4, 0x00003768 },
		{ 0x2303ba0ed9acc7b7, &exec_2303ba0ed9acc7b7, 0x00004486 },
		{ 0x9cfe44ce0ccda122, &exec_9cfe44ce0ccda122, 0x00003774 },
		{ 0xbfa45dde2f8f81f2, &exec_bfa45dde2f8f81f2, 0x0000377a },
		{ 0xfa0b65fb97062035, &exec_fa0b65fb97062035, 0x0000377f },
		{ 0x643edb4debaf4b03, &exec_643edb4debaf4b03, 0x00004535 },
		{ 0x5876d9f09b41e427, &exec_5876d9f09b41e427, 0x000037a0 },
		{ 0x6bfd30e22e324cf6, &exec_6bfd30e22e324cf6, 0x000037aa },
		{ 0x05ca182b58a39e25, &exec_05ca182b58a39e25, 0x000037b1 },
		{ 0x8cd7d99c7c5911c2, &exec_8cd7d99c7c5911c2, 0x000037bd },
		{ 0x62f7906f75b01d47, &exec_62f7906f75b01d47, 0x000037c3 },
		{ 0x415848575f35b540, &exec_415848575f35b540, 0x000037c7 },
		{ 0xfe5f5f62128c7757, &exec_fe5f5f62128c7757, 0x000037de },
		{ 0x0b1ac65fe89ddbf5, &exec_0b1ac65fe89ddbf5, 0x000037e1 },
		{ 0x2059c7adb1c5c312, &exec_2059c7adb1c5c312, 0x000037e7 },
		{ 0x2ed7ca059ee1efa9, &exec_2ed7ca059ee1efa9, 0x000037f1 },
		{ 0x3c4d0ecd4b6ffb0c, &exec_3c4d0ecd4b6ffb0c, 0x000037f5 },
		{ 0x2e5ecc937eee47e1, &exec_2e5ecc937eee47e1, 0x000037f9 },
		{ 0x2875b9b8aa08e5be, &exec_2875b9b8aa08e5be, 0x00003805 },
		{ 0xd52ce162582fe167, &exec_d52ce162582fe167, 0x00003819 },
		{ 0x475c8b7d7bb4cae4, &exec_475c8b7d7bb4cae4, 0x00003836 },
		{ 0xc900049a145eec9e, &exec_c900049a145eec9e, 0x000044ef },
		{ 0x3e3db7800b322ab2, &exec_3e3db7800b322ab2, 0x0000383d },
		{ 0x6aff399dfb238e21, &exec_6aff399dfb238e21, 0x0000384b },
		{ 0xed869c676f274070, &exec_ed869c676f274070, 0x0000384e },
		{ 0x55d63957c38424a6, &exec_55d63957c38424a6, 0x00003861 },
		{ 0x02f974a1a9edc58d, &exec_02f974a1a9edc58d, 0x0000386c },
		{ 0x7e410533333e255b, &exec_7e410533333e255b, 0x00003879 },
		{ 0xdf59acb259c36646, &exec_df59acb259c36646, 0x0000387e },
		{ 0x8f28fdd332e4d3d6, &exec_8f28fdd332e4d3d6, 0x0000388b },
		{ 0x4b3926066cea3dce, &exec_4b3926066cea3dce, 0x00004122 },
		{ 0x85e724624601a82e, &exec_85e724624601a82e, 0x00003893 },
		{ 0x3104c68a4abcde35, &exec_3104c68a4abcde35, 0x0000389a },
		{ 0x4e440023eccb62f4, &exec_4e440023eccb62f4, 0x000038b8 },
		{ 0x813835ef7981cb54, &exec_813835ef7981cb54, 0x000038be },
		{ 0x27b31da55495c83f, &exec_27b31da55495c83f, 0x000038c3 },
		{ 0xa6ac86039d7a33db, &exec_a6ac86039d7a33db, 0x000038d1 },
		{ 0x1b28ac4d2fcc5e5a, &exec_1b28ac4d2fcc5e5a, 0x000038d6 },
		{ 0xdaa826951c1f9f43, &exec_daa826951c1f9f43, 0x000038dd },
		{ 0xb52b5f9662eaad69, &exec_b52b5f9662eaad69, 0x000038e3 },
		{ 0x6881795d98862aa0, &exec_6881795d98862aa0, 0x000038f7 },
		{ 0xd4f06d9b6a17e65a, &exec_d4f06d9b6a17e65a, 0x000038f9 },
		{ 0xeda2d51666f697ad, &exec_eda2d51666f697ad, 0x000038ff },
		{ 0xdafea03c8b2f5ebe, &exec_dafea03c8b2f5ebe, 0x0000390c },
		{ 0xcc20612ac2b0df71, &exec_cc20612ac2b0df71, 0x00003914 },
		{ 0x4e445b78d88c86a1, &exec_4e445b78d88c86a1, 0x00003923 },
		{ 0xb48de10ea6a010b9, &exec_b48de10ea6a010b9, 0x0000392a },
		{ 0xbb7bf704e407c702, &exec_bb7bf704e407c702, 0x000042be },
		{ 0x9d5b433bac717ce8, &exec_9d5b433bac717ce8, 0x00003937 },
		{ 0x4e24c506593c32a6, &exec_4e24c506593c32a6, 0x00004693 },
		{ 0x3caaf94b024d6790, &exec_3caaf94b024d6790, 0x0000394c },
		{ 0x94ae025cb1fcf57c, &exec_94ae025cb1fcf57c, 0x00003957 },
		{ 0xab8c337adda5c643, &exec_ab8c337adda5c643, 0x0000395f },
		{ 0x09c23f6df6c4e200, &exec_09c23f6df6c4e200, 0x00003979 },
		{ 0x52fa536a1038442a, &exec_52fa536a1038442a, 0x00004075 },
		{ 0x03ff8431301796c7, &exec_03ff8431301796c7, 0x00003984 },
		{ 0xc58c45aa48397439, &exec_c58c45aa48397439, 0x0000432a },
		{ 0xe3a87e8af58b8752, &exec_e3a87e8af58b8752, 0x00003991 },
		{ 0x73153650f05e89d3, &exec_73153650f05e89d3, 0x000043e7 },
		{ 0x75ea7745b5d7a4a3, &exec_75ea7745b5d7a4a3, 0x000039a3 },
		{ 0x25304d53dfc9b7a1, &exec_25304d53dfc9b7a1, 0x00004ad1 },
		{ 0xb23521abe78dbb1c, &exec_b23521abe78dbb1c, 0x000039ac },
		{ 0x3076267d7db05e41, &exec_3076267d7db05e41, 0x000039c4 },
		{ 0x44a270333d56250c, &exec_44a270333d56250c, 0x000039cf },
		{ 0x10e5cc84921c4c3a, &exec_10e5cc84921c4c3a, 0x000039d6 },
		{ 0x8dbe6e14bb6d1123, &exec_8dbe6e14bb6d1123, 0x00003c3c },
		{ 0xa473eba83cb1a0b4, &exec_a473eba83cb1a0b4, 0x000039df },
		{ 0x6fa26701678d6b91, &exec_6fa26701678d6b91, 0x000039fa },
		{ 0xbce9a32ccee5309f, &exec_bce9a32ccee5309f, 0x00003a07 },
		{ 0xc42941f0d4c2c9ff, &exec_c42941f0d4c2c9ff, 0x00003a0d },
		{ 0xf752a3095d9a336f, &exec_f752a3095d9a336f, 0x00003a11 },
		{ 0xb1bed445bb79a2fb, &exec_b1bed445bb79a2fb, 0x00003a16 },
		{ 0xed62d44c520334a1, &exec_ed62d44c520334a1, 0x000041da },
		{ 0x2473a5f16bed9bbb, &exec_2473a5f16bed9bbb, 0x00003a24 },
		{ 0x56deb18f13f61de9, &exec_56deb18f13f61de9, 0x00003a2b },
		{ 0x9d7d1ed9c4425cba, &exec_9d7d1ed9c4425cba, 0x00003a30 },
		{ 0x60bfcbad3397c55e, &exec_60bfcbad3397c55e, 0x00003a37 },
		{ 0x14eb1d519f846740, &exec_14eb1d519f846740, 0x00003d7a },
		{ 0x47ed4f6fe8655ce9, &exec_47ed4f6fe8655ce9, 0x00003e29 },
		{ 0xfa5007e211310667, &exec_fa5007e211310667, 0x00003a3f },
		{ 0x00f405a4dba2bcd0, &exec_00f405a4dba2bcd0, 0x00003a4c },
		{ 0x84a6810849087f7e, &exec_84a6810849087f7e, 0x00003a51 },
		{ 0xcf11ac05704610e8, &exec_cf11ac05704610e8, 0x00004bbd },
		{ 0x7b9101290a0b6948, &exec_7b9101290a0b6948, 0x00003a5e },
		{ 0xe259f4eb5036ead2, &exec_e259f4eb5036ead2, 0x00003d54 },
		{ 0x98f8b38683dd7d0a, &exec_98f8b38683dd7d0a, 0x00003a63 },
		{ 0xfb3b7876a069e991, &exec_fb3b7876a069e991, 0x00003a6d },
		{ 0x6c8789a34855c1fc, &exec_6c8789a34855c1fc, 0x00003a78 },
		{ 0x1978d89b1f015bda, &exec_1978d89b1f015bda, 0x00003a84 },
		{ 0x051a3fbc56749250, &exec_051a3fbc56749250, 0x00003a9a },
		{ 0x7f27e1b7f169a3e7, &exec_7f27e1b7f169a3e7, 0x00003aa0 },
		{ 0x78e8f3fe67a87507, &exec_78e8f3fe67a87507, 0x00003c26 },
		{ 0x3335f7629b55494d, &exec_3335f7629b55494d, 0x00003aa4 },
		{ 0x81f4f95cca80cbf9, &exec_81f4f95cca80cbf9, 0x00003aaa },
		{ 0x4b30f061f9f91885, &exec_4b30f061f9f91885, 0x0000403d },
		{ 0xff96c30711637dbb, &exec_ff96c30711637dbb, 0x00003ab1 },
		{ 0x16e7c1a71d4551a0, &exec_16e7c1a71d4551a0, 0x00003dc7 },
		{ 0xba539cc0008204c1, &exec_ba539cc0008204c1, 0x00003c1d },
		{ 0xcc5f997231777d13, &exec_cc5f997231777d13, 0x00003ac9 },
		{ 0x1526356d7327170b, &exec_1526356d7327170b, 0x000040bc },
		{ 0x52391f80798df877, &exec_52391f80798df877, 0x00003acc },
		{ 0x46c1a6f5c121308b, &exec_46c1a6f5c121308b, 0x00003ace },
		{ 0x763b0f93ee36b826, &exec_763b0f93ee36b826, 0x0000401c },
		{ 0x2eae0b1d94e10545, &exec_2eae0b1d94e10545, 0x00003ad8 },
		{ 0x084dd057c0b9107b, &exec_084dd057c0b9107b, 0x00003ae8 },
		{ 0xb1aba8bbae68388e, &exec_b1aba8bbae68388e, 0x00003aff },
		{ 0x762c0b507917a3d3, &exec_762c0b507917a3d3, 0x00003b02 },
		{ 0x2ffb59680a471870, &exec_2ffb59680a471870, 0x00003b05 },
		{ 0x571b6dc717ca4ea7, &exec_571b6dc717ca4ea7, 0x00003b0c },
		{ 0xd6a864f53673c0f0, &exec_d6a864f53673c0f0, 0x00003b14 },
		{ 0x6a229437162b0be3, &exec_6a229437162b0be3, 0x00004919 },
		{ 0x9161cd371de4abda, &exec_9161cd371de4abda, 0x00003b29 },
		{ 0x1477a327cee54d76, &exec_1477a327cee54d76, 0x00003b2f },
		{ 0x993ad518d42390ab, &exec_993ad518d42390ab, 0x00003b4c },
		{ 0x673cd7419526a5de, &exec_673cd7419526a5de, 0x00003b53 },
		{ 0x96bd32642c62b19a, &exec_96bd32642c62b19a, 0x00003b5a },
		{ 0x60a10088b8c4415d, &exec_60a10088b8c4415d, 0x00004495 },
		{ 0x6303a31c502d8aed, &exec_6303a31c502d8aed, 0x00003b66 },
		{ 0x766b7b9f1b0fec97, &exec_766b7b9f1b0fec97, 0x00003b71 },
		{ 0x6af275d4f5ec572e, &exec_6af275d4f5ec572e, 0x00003cea },
		{ 0x2440d9daadbc8c65, &exec_2440d9daadbc8c65, 0x00003b88 },
		{ 0xc8058aee5bf4bceb, &exec_c8058aee5bf4bceb, 0x00003b96 },
		{ 0xdcf0416c3a36bdec, &exec_dcf0416c3a36bdec, 0x00003ba8 },
		{ 0x63cec7b7d2512dae, &exec_63cec7b7d2512dae, 0x0000497b },
		{ 0x8eeab934589661b7, &exec_8eeab934589661b7, 0x00003baa },
		{ 0x078dc31b13387888, &exec_078dc31b13387888, 0x00003bb5 },
		{ 0xbc5a383b75e6b76f, &exec_bc5a383b75e6b76f, 0x00003bb7 },
		{ 0x5b65348abed00bf7, &exec_5b65348abed00bf7, 0x00003bc0 },
		{ 0x5b147081d7e19ee0, &exec_5b147081d7e19ee0, 0x00003be2 },
		{ 0xae01917d665f0e12, &exec_ae01917d665f0e12, 0x00003be6 },
		{ 0xd5f9b837585f933e, &exec_d5f9b837585f933e, 0x00003f90 },
		{ 0x1ccacaf0ca9385bd, &exec_1ccacaf0ca9385bd, 0x00003c06 },
		{ 0x705526812aea0f6c, &exec_705526812aea0f6c, 0x00003c0b },
		{ 0xacec795b0bc69163, &exec_acec795b0bc69163, 0x00003c16 },
		{ 0xa1fbb8a35a09968d, &exec_a1fbb8a35a09968d, 0x000047c9 },
		{ 0x001d91ea8ae6ac55, &exec_001d91ea8ae6ac55, 0x0000475c },
		{ 0xbde771b88087e176, &exec_bde771b88087e176, 0x00003c22 },
		{ 0xbd51fbab0a9f0111, &exec_bd51fbab0a9f0111, 0x00003c2e },
		{ 0xbc6640cf94ee164c, &exec_bc6640cf94ee164c, 0x00003c37 },
		{ 0x1174f35536b61e8a, &exec_1174f35536b61e8a, 0x00003c46 },
		{ 0x35499cefa60779ee, &exec_35499cefa60779ee, 0x00003c4d },
		{ 0x95e7933336fe3b91, &exec_95e7933336fe3b91, 0x0000478f },
		{ 0xbb9d423712a745de, &exec_bb9d423712a745de, 0x00003c51 },
		{ 0x3c72c1c2e0b244e8, &exec_3c72c1c2e0b244e8, 0x00003c70 },
		{ 0x3f920874e697b778, &exec_3f920874e697b778, 0x00003c76 },
		{ 0xb5b5c2bc948dff10, &exec_b5b5c2bc948dff10, 0x00003c81 },
		{ 0x0c456994efa67d87, &exec_0c456994efa67d87, 0x00003c84 },
		{ 0x60aef64120475bef, &exec_60aef64120475bef, 0x00003c88 },
		{ 0xe415d7dd01bd91fe, &exec_e415d7dd01bd91fe, 0x00003c8e },
		{ 0x1e76ed29fa3e382f, &exec_1e76ed29fa3e382f, 0x00003c9a },
		{ 0x6cc1d0dfce09c1ce, &exec_6cc1d0dfce09c1ce, 0x00003c9e },
		{ 0xa98723fd5c459efe, &exec_a98723fd5c459efe, 0x00003ca6 },
		{ 0x0cf33c0d48680fb9, &exec_0cf33c0d48680fb9, 0x00003cbb },
		{ 0xb585bd30489fd8b8, &exec_b585bd30489fd8b8, 0x00003cc9 },
		{ 0x1879e55cc9ac923d, &exec_1879e55cc9ac923d, 0x00003cd3 },
		{ 0xfbce304484f79bd2, &exec_fbce304484f79bd2, 0x00003cdb },
		{ 0x47854d7f98aa649f, &exec_47854d7f98aa649f, 0x00003cf1 },
		{ 0x0c98a5e4b97473d8, &exec_0c98a5e4b97473d8, 0x00003cfe },
		{ 0x762122ab337ba880, &exec_762122ab337ba880, 0x00003d09 },
		{ 0x5cf62cb93bc9187d, &exec_5cf62cb93bc9187d, 0x00003d0d },
		{ 0xdc95caad32ed0bb3, &exec_dc95caad32ed0bb3, 0x00003d13 },
		{ 0x0d7aa55680d0750d, &exec_0d7aa55680d0750d, 0x00003d1a },
		{ 0xdddfca2dba50390b, &exec_dddfca2dba50390b, 0x00003d1e },
		{ 0xb42fcdb0ee2b747a, &exec_b42fcdb0ee2b747a, 0x000045a7 },
		{ 0xa4c1d16563fa22e7, &exec_a4c1d16563fa22e7, 0x000044f3 },
		{ 0xbb404e26d0e53085, &exec_bb404e26d0e53085, 0x00003d29 },
		{ 0xe9e223a848420b44, &exec_e9e223a848420b44, 0x00003d33 },
		{ 0xbee492ff50dbe17d, &exec_bee492ff50dbe17d, 0x00003d37 },
		{ 0x4574756b1dab875c, &exec_4574756b1dab875c, 0x00003d3c },
		{ 0x382c90cb0cc43c6c, &exec_382c90cb0cc43c6c, 0x00003d44 },
		{ 0x4891521be8c88d11, &exec_4891521be8c88d11, 0x00003d4b },
		{ 0x386b1c68bda6eae7, &exec_386b1c68bda6eae7, 0x00003d50 },
		{ 0x45a0ba8347d48b6e, &exec_45a0ba8347d48b6e, 0x00003d57 },
		{ 0x65bde089074f3307, &exec_65bde089074f3307, 0x00003d5e },
		{ 0xeadc50a54dbce358, &exec_eadc50a54dbce358, 0x00003d64 },
		{ 0xfccc00fc0facf642, &exec_fccc00fc0facf642, 0x00003d69 },
		{ 0x946ab3d479e53bd2, &exec_946ab3d479e53bd2, 0x00003d74 },
		{ 0xfc00a5045ed0dd72, &exec_fc00a5045ed0dd72, 0x00003ee8 },
		{ 0x31f23d8737bdb784, &exec_31f23d8737bdb784, 0x00003d80 },
		{ 0x97b095737b009c8e, &exec_97b095737b009c8e, 0x00003d8d },
		{ 0xc53fa9c58efb16f5, &exec_c53fa9c58efb16f5, 0x00003d97 },
		{ 0x025c7e44cb8512dd, &exec_025c7e44cb8512dd, 0x00003d9b },
		{ 0x46b2877166553aa2, &exec_46b2877166553aa2, 0x00003d9f },
		{ 0x2492b004c91b1be6, &exec_2492b004c91b1be6, 0x00003daa },
		{ 0x47d5dc391d0e7f5e, &exec_47d5dc391d0e7f5e, 0x00003dbc },
		{ 0x2f52fdfaa9630090, &exec_2f52fdfaa9630090, 0x00003dc0 },
		{ 0x18e414525c5dc17e, &exec_18e414525c5dc17e, 0x00003dc5 },
		{ 0x1abba9803aadd70e, &exec_1abba9803aadd70e, 0x00003dd3 },
		{ 0x36265a6aff49531c, &exec_36265a6aff49531c, 0x00003dd8 },
		{ 0xf520fe321d2aa845, &exec_f520fe321d2aa845, 0x00003de4 },
		{ 0xce7ef7afb58c116d, &exec_ce7ef7afb58c116d, 0x00003de8 },
		{ 0x7fe1103cc2876847, &exec_7fe1103cc2876847, 0x00003dec },
		{ 0x80c51bd86ac9ce08, &exec_80c51bd86ac9ce08, 0x00003df4 },
		{ 0x250bb98e90d04e4a, &exec_250bb98e90d04e4a, 0x00003e0e },
		{ 0xb4192b9f9ce98318, &exec_b4192b9f9ce98318, 0x00003e12 },
		{ 0x24cecb5231d55fef, &exec_24cecb5231d55fef, 0x00003e79 },
		{ 0xa1ab1783e77dd881, &exec_a1ab1783e77dd881, 0x00003e1f },
		{ 0xe891cea9cbd86d4a, &exec_e891cea9cbd86d4a, 0x00003e2b },
		{ 0x58652dbf0218f745, &exec_58652dbf0218f745, 0x00003e47 },
		{ 0xa65a89a17722d6a1, &exec_a65a89a17722d6a1, 0x00003e56 },
		{ 0xa7dc265448aa3063, &exec_a7dc265448aa3063, 0x00003e66 },
		{ 0xd3ea42f5d87c7a43, &exec_d3ea42f5d87c7a43, 0x00003e6a },
		{ 0xf87d04dd7d12a249, &exec_f87d04dd7d12a249, 0x00003e6f },
		{ 0xc2455814e4e90b01, &exec_c2455814e4e90b01, 0x00003e82 },
		{ 0xcbabb3cf30a396ed, &exec_cbabb3cf30a396ed, 0x00003e88 },
		{ 0xe58527357f86b6fb, &exec_e58527357f86b6fb, 0x00003e92 },
		{ 0xd46405661ea3f47d, &exec_d46405661ea3f47d, 0x0000454c },
		{ 0x127511f7f948a603, &exec_127511f7f948a603, 0x00003e9e },
		{ 0x6c1e85e2cc27b04a, &exec_6c1e85e2cc27b04a, 0x0000424a },
		{ 0x8639718eb6299aeb, &exec_8639718eb6299aeb, 0x00003ea4 },
		{ 0x73f25c87a5e2428a, &exec_73f25c87a5e2428a, 0x00003ea9 },
		{ 0xf389699a0d02b408, &exec_f389699a0d02b408, 0x0000417b },
		{ 0x0ef545177d0d3877, &exec_0ef545177d0d3877, 0x00003eb7 },
		{ 0xbf405137dcbf2110, &exec_bf405137dcbf2110, 0x0000486c },
		{ 0xe46d0c30973676e7, &exec_e46d0c30973676e7, 0x00003ec6 },
		{ 0x0f560cf89f2341e1, &exec_0f560cf89f2341e1, 0x00003ec8 },
		{ 0xdb3ed3a2013f906e, &exec_db3ed3a2013f906e, 0x00003ecc },
		{ 0xe3378d0a0d2d202a, &exec_e3378d0a0d2d202a, 0x00003ed4 },
		{ 0x1664491befa970b0, &exec_1664491befa970b0, 0x00003ee0 },
		{ 0xd8a6a57e8b7c95e8, &exec_d8a6a57e8b7c95e8, 0x00003eee },
		{ 0x875e20a525366f6c, &exec_875e20a525366f6c, 0x00003ef3 },
		{ 0xf66846d54fa15201, &exec_f66846d54fa15201, 0x0000425e },
		{ 0x24e7994525023ae9, &exec_24e7994525023ae9, 0x00003eff },
		{ 0x7471bbd86ae5a932, &exec_7471bbd86ae5a932, 0x00003f04 },
		{ 0x9937cafa7b6cece8, &exec_9937cafa7b6cece8, 0x00003f0e },
		{ 0x613b80364d317c8a, &exec_613b80364d317c8a, 0x00004624 },
		{ 0xca632b68ed6e20bf, &exec_ca632b68ed6e20bf, 0x00003f11 },
		{ 0x6f5e68bd390f4004, &exec_6f5e68bd390f4004, 0x00003f16 },
		{ 0x0f8c9670118fba2e, &exec_0f8c9670118fba2e, 0x00003f22 },
		{ 0xf20bf2a46c518a61, &exec_f20bf2a46c518a61, 0x00003f26 },
		{ 0x2d71f7c657f88797, &exec_2d71f7c657f88797, 0x00003f37 },
		{ 0x26875216b3da90c9, &exec_26875216b3da90c9, 0x00003f3a },
		{ 0x2d3e2fa1ca4c2e72, &exec_2d3e2fa1ca4c2e72, 0x00003f3e },
		{ 0x19dcc4caea206138, &exec_19dcc4caea206138, 0x00003f46 },
		{ 0x36e2527b5b224719, &exec_36e2527b5b224719, 0x00003f4a },
		{ 0xfb8b249ccc400bc6, &exec_fb8b249ccc400bc6, 0x00003f4f },
		{ 0x203d82bd339e9cee, &exec_203d82bd339e9cee, 0x00003f60 },
		{ 0x0cd9e785a6c3bd6f, &exec_0cd9e785a6c3bd6f, 0x000041c0 },
		{ 0x8dd10c6582059117, &exec_8dd10c6582059117, 0x00003f65 },
		{ 0xe986d46c3cd71be9, &exec_e986d46c3cd71be9, 0x0000409e },
		{ 0x4fbfbbdeaa550005, &exec_4fbfbbdeaa550005, 0x00003f7b },
		{ 0x6fcc4fcea84a30f3, &exec_6fcc4fcea84a30f3, 0x00003f82 },
		{ 0x1b0b37e54d564692, &exec_1b0b37e54d564692, 0x00003f95 },
		{ 0x8c6f2a7ac7753d46, &exec_8c6f2a7ac7753d46, 0x00003fa9 },
		{ 0x183d523dbf3fb645, &exec_183d523dbf3fb645, 0x00003fad },
		{ 0x974724cc35772cbb, &exec_974724cc35772cbb, 0x00003fba },
		{ 0xb2f7afd705e793a2, &exec_b2f7afd705e793a2, 0x00003fc5 },
		{ 0x72aa7ae7d2a127d7, &exec_72aa7ae7d2a127d7, 0x00003fc9 },
		{ 0x707b0d4dc07d83ea, &exec_707b0d4dc07d83ea, 0x00003fce },
		{ 0xb12fa8335c0b895b, &exec_b12fa8335c0b895b, 0x00003fd1 },
		{ 0x1bf688813a177e32, &exec_1bf688813a177e32, 0x00003fd8 },
		{ 0x41a4a3fe8644f2a5, &exec_41a4a3fe8644f2a5, 0x00003fde },
		{ 0x02a2f20bff79e581, &exec_02a2f20bff79e581, 0x00003fe5 },
		{ 0xaffa6adb60e80b38, &exec_affa6adb60e80b38, 0x00003ff5 },
		{ 0xbb88d477441b572c, &exec_bb88d477441b572c, 0x0000494e },
		{ 0xa4620883070040b2, &exec_a4620883070040b2, 0x00004003 },
		{ 0x3de329fabf8622ff, &exec_3de329fabf8622ff, 0x00004a43 },
		{ 0x8fa7349bb7cf276d, &exec_8fa7349bb7cf276d, 0x00004011 },
		{ 0xf79e364f4d3c8bf7, &exec_f79e364f4d3c8bf7, 0x00004020 },
		{ 0xf0e26ff1ea5ab540, &exec_f0e26ff1ea5ab540, 0x00004025 },
		{ 0x7bdd6c837ba6f2bb, &exec_7bdd6c837ba6f2bb, 0x0000402f },
		{ 0xf4d1c19fa9b12a13, &exec_f4d1c19fa9b12a13, 0x00004034 },
		{ 0x7691faeca38e0095, &exec_7691faeca38e0095, 0x00004055 },
		{ 0xb0ec386da3ad7005, &exec_b0ec386da3ad7005, 0x00004059 },
		{ 0x53a8bee77ba93f5e, &exec_53a8bee77ba93f5e, 0x0000405f },
		{ 0x47e9ee040633506a, &exec_47e9ee040633506a, 0x0000455a },
		{ 0x4e6a8d67746e3385, &exec_4e6a8d67746e3385, 0x00004068 },
		{ 0x5b26f83a64c3b971, &exec_5b26f83a64c3b971, 0x0000407a },
		{ 0x13b5e1c9640a79e3, &exec_13b5e1c9640a79e3, 0x00004091 },
		{ 0x9b647a8efc34cded, &exec_9b647a8efc34cded, 0x00004095 },
		{ 0x0e984874c9d9592c, &exec_0e984874c9d9592c, 0x000046e7 },
		{ 0x84ecad6494705f89, &exec_84ecad6494705f89, 0x000040a5 },
		{ 0x430a2a6c256f585c, &exec_430a2a6c256f585c, 0x000040ad },
		{ 0xbefa3c9e6ddab499, &exec_befa3c9e6ddab499, 0x000040b2 },
		{ 0x94974079204d78ab, &exec_94974079204d78ab, 0x000040b8 },
		{ 0x11d44c140ac80b35, &exec_11d44c140ac80b35, 0x000040cd },
		{ 0x3fa501c394d99471, &exec_3fa501c394d99471, 0x000040d3 },
		{ 0x0edf1a580250f3eb, &exec_0edf1a580250f3eb, 0x00004b01 },
		{ 0x974ca5ff67727b09, &exec_974ca5ff67727b09, 0x000040e2 },
		{ 0xc3f940fbe530cf82, &exec_c3f940fbe530cf82, 0x000040e6 },
		{ 0x658b6e1d39703925, &exec_658b6e1d39703925, 0x000040ea },
		{ 0x4306971166237673, &exec_4306971166237673, 0x00004103 },
		{ 0xf947b31e5aed6d20, &exec_f947b31e5aed6d20, 0x00004109 },
		{ 0x431246ceb13e327b, &exec_431246ceb13e327b, 0x00004114 },
		{ 0xf284a200dd3b3373, &exec_f284a200dd3b3373, 0x000044f9 },
		{ 0x710ba751b187f605, &exec_710ba751b187f605, 0x00004128 },
		{ 0xeae2c05d870bbc95, &exec_eae2c05d870bbc95, 0x00004130 },
		{ 0xa802b6522c8fde06, &exec_a802b6522c8fde06, 0x0000413b },
		{ 0x77abb5d83c1344ae, &exec_77abb5d83c1344ae, 0x00004adf },
		{ 0xab44ef2201d76c75, &exec_ab44ef2201d76c75, 0x00004143 },
		{ 0x781c9aef64963896, &exec_781c9aef64963896, 0x00004148 },
		{ 0xcb8d4c85feb29333, &exec_cb8d4c85feb29333, 0x00004159 },
		{ 0x9bfe8b838973e7c4, &exec_9bfe8b838973e7c4, 0x0000415d },
		{ 0xb643ab88ec1536f2, &exec_b643ab88ec1536f2, 0x00004167 },
		{ 0x75fb44e755d7e0d4, &exec_75fb44e755d7e0d4, 0x000042e5 },
		{ 0x4fef99271a52c290, &exec_4fef99271a52c290, 0x00004174 },
		{ 0x1a7bac884d45815d, &exec_1a7bac884d45815d, 0x00004188 },
		{ 0x915007d268569298, &exec_915007d268569298, 0x0000418f },
		{ 0x59e84cba0bc2dc0a, &exec_59e84cba0bc2dc0a, 0x00004196 },
		{ 0xee5046badb2f3f3b, &exec_ee5046badb2f3f3b, 0x0000419b },
		{ 0x65904b7e72a0f1fe, &exec_65904b7e72a0f1fe, 0x0000419d },
		{ 0xd06ca02270c0e6c2, &exec_d06ca02270c0e6c2, 0x000041a1 },
		{ 0xfe757120b5453a06, &exec_fe757120b5453a06, 0x000041c3 },
		{ 0xfe1e4fbd99909313, &exec_fe1e4fbd99909313, 0x00004709 },
		{ 0x5d313be2a59ec069, &exec_5d313be2a59ec069, 0x000041fc },
		{ 0x9c9e04bf702ab97e, &exec_9c9e04bf702ab97e, 0x00004208 },
		{ 0xb39360d8e1b8999b, &exec_b39360d8e1b8999b, 0x0000420d },
		{ 0x36ebed120e20fc81, &exec_36ebed120e20fc81, 0x00004217 },
		{ 0xae996075317ba57f, &exec_ae996075317ba57f, 0x00004234 },
		{ 0x0742018827fc0f0e, &exec_0742018827fc0f0e, 0x0000423c },
		{ 0xe54bc1cd737e5216, &exec_e54bc1cd737e5216, 0x00004252 },
		{ 0xaaf298fb3bfa57ce, &exec_aaf298fb3bfa57ce, 0x00004262 },
		{ 0x22f35a3f392ba8c9, &exec_22f35a3f392ba8c9, 0x00004266 },
		{ 0x93da922e252127f0, &exec_93da922e252127f0, 0x0000426d },
		{ 0xb5a82c363bff0585, &exec_b5a82c363bff0585, 0x000043aa },
		{ 0x1835efc43ef8e81f, &exec_1835efc43ef8e81f, 0x00004284 },
		{ 0x42e43c83e55675d7, &exec_42e43c83e55675d7, 0x00004882 },
		{ 0xb94e9d89e1e2686e, &exec_b94e9d89e1e2686e, 0x0000428f },
		{ 0x255d71d6177b8d92, &exec_255d71d6177b8d92, 0x00004293 },
		{ 0x59d26d496ae12ce3, &exec_59d26d496ae12ce3, 0x000042a2 },
		{ 0x9672c0a430c4a5bd, &exec_9672c0a430c4a5bd, 0x000042a7 },
		{ 0xecffcbb6d7d44cbe, &exec_ecffcbb6d7d44cbe, 0x00004735 },
		{ 0xfda97997dd2fedca, &exec_fda97997dd2fedca, 0x000042b0 },
		{ 0xbb3d551ae0c10124, &exec_bb3d551ae0c10124, 0x000042c2 },
		{ 0x58065398b1dc9adc, &exec_58065398b1dc9adc, 0x000042ce },
		{ 0x26f7ae4e181333dd, &exec_26f7ae4e181333dd, 0x000042dd },
		{ 0xbb41f1cf2df3aedd, &exec_bb41f1cf2df3aedd, 0x000042ed },
		{ 0x6e2d692e7c9bd31b, &exec_6e2d692e7c9bd31b, 0x000042f3 },
		{ 0xbcbc4314e8c9df01, &exec_bcbc4314e8c9df01, 0x000042ff },
		{ 0x1b737d8a659810cd, &exec_1b737d8a659810cd, 0x00004301 },
		{ 0x1e7dd633e98d01cf, &exec_1e7dd633e98d01cf, 0x0000430b },
		{ 0x2e53a6be85ed7ab7, &exec_2e53a6be85ed7ab7, 0x00004315 },
		{ 0xd63b7ee5fa676ad3, &exec_d63b7ee5fa676ad3, 0x00004319 },
		{ 0xe8a6a4d2320b6fc2, &exec_e8a6a4d2320b6fc2, 0x0000431f },
		{ 0xe2c2209460b257d8, &exec_e2c2209460b257d8, 0x00004328 },
		{ 0x9de6e07702f1100d, &exec_9de6e07702f1100d, 0x00004a23 },
		{ 0xb23d06bd0ea957fa, &exec_b23d06bd0ea957fa, 0x0000432e },
		{ 0xf8793c8815010282, &exec_f8793c8815010282, 0x00004333 },
		{ 0xaf5907c37f3fe7a3, &exec_af5907c37f3fe7a3, 0x0000433e },
		{ 0x98fef17f8fae935f, &exec_98fef17f8fae935f, 0x00004349 },
		{ 0x9bbab1fd373fdf17, &exec_9bbab1fd373fdf17, 0x00004353 },
		{ 0x5569bd32a0104a12, &exec_5569bd32a0104a12, 0x0000436b },
		{ 0x16c7e434eb7164b6, &exec_16c7e434eb7164b6, 0x0000436f },
		{ 0xe865007f9c4ec9ea, &exec_e865007f9c4ec9ea, 0x00004390 },
		{ 0xc0e3d834231eb22a, &exec_c0e3d834231eb22a, 0x00004394 },
		{ 0x7b8b5e55e5c51ff0, &exec_7b8b5e55e5c51ff0, 0x00004399 },
		{ 0xc00569fafcbe1f4b, &exec_c00569fafcbe1f4b, 0x0000439d },
		{ 0x6ff6c483a6788d76, &exec_6ff6c483a6788d76, 0x000043a1 },
		{ 0xa18174f2f5329036, &exec_a18174f2f5329036, 0x000043af },
		{ 0x1dae43bc15864ced, &exec_1dae43bc15864ced, 0x000043b6 },
		{ 0x75555b3f9f8033b0, &exec_75555b3f9f8033b0, 0x000043be },
		{ 0x8e769109748976c7, &exec_8e769109748976c7, 0x000043c8 },
		{ 0x761cdc659db3f279, &exec_761cdc659db3f279, 0x000043d6 },
		{ 0x6a642db8135d6918, &exec_6a642db8135d6918, 0x000043d8 },
		{ 0x9fab36ba2f01ffa1, &exec_9fab36ba2f01ffa1, 0x000043e4 },
		{ 0xf6130ace7af1ea00, &exec_f6130ace7af1ea00, 0x000043f2 },
		{ 0x79b8d9997f11561c, &exec_79b8d9997f11561c, 0x0000495c },
		{ 0x269ce4121d8dd67f, &exec_269ce4121d8dd67f, 0x00004563 },
		{ 0xc3a18ab7ead5c162, &exec_c3a18ab7ead5c162, 0x000043f7 },
		{ 0x8ea34876a0bdc6b4, &exec_8ea34876a0bdc6b4, 0x00000000 },
		{ 0xa629ea2c31b39141, &exec_a629ea2c31b39141, 0x00000000 },
		{ 0xfa3eaca22c329618, &exec_fa3eaca22c329618, 0x000043ff },
		{ 0xa9f3ce79580c0207, &exec_a9f3ce79580c0207, 0x00004408 },
		{ 0x4ee9e0d1d0512059, &exec_4ee9e0d1d0512059, 0x0000440f },
		{ 0x9a22dd546af45908, &exec_9a22dd546af45908, 0x0000441d },
		{ 0x2eb1a71dd13758e9, &exec_2eb1a71dd13758e9, 0x00004424 },
		{ 0x748d31f205d7c8e0, &exec_748d31f205d7c8e0, 0x00004434 },
		{ 0x91884971dc4f84d9, &exec_91884971dc4f84d9, 0x00004438 },
		{ 0xd21308d135cd7174, &exec_d21308d135cd7174, 0x0000444b },
		{ 0xff657d23c97eff15, &exec_ff657d23c97eff15, 0x00004459 },
		{ 0x4422f72619eb5d02, &exec_4422f72619eb5d02, 0x0000446a },
		{ 0xa60d26bd8763ea5a, &exec_a60d26bd8763ea5a, 0x0000446e },
		{ 0xfd36868741d222d6, &exec_fd36868741d222d6, 0x000044a5 },
		{ 0xe44dd42fc13011a9, &exec_e44dd42fc13011a9, 0x000044aa },
		{ 0x6d8c0c531a734f6c, &exec_6d8c0c531a734f6c, 0x000044b2 },
		{ 0x68d6cd7098561ec5, &exec_68d6cd7098561ec5, 0x000044b7 },
		{ 0xf1c9f0bcce0962bc, &exec_f1c9f0bcce0962bc, 0x000044c3 },
		{ 0x1e1f136d122c0ce7, &exec_1e1f136d122c0ce7, 0x000044c7 },
		{ 0x66631e8aa3777493, &exec_66631e8aa3777493, 0x000044c9 },
		{ 0x883862ccaa88df61, &exec_883862ccaa88df61, 0x000044cd },
		{ 0xe012f11707d73283, &exec_e012f11707d73283, 0x000044d4 },
		{ 0x5bbf80e10c63f576, &exec_5bbf80e10c63f576, 0x000044de },
		{ 0x3903105326c44e69, &exec_3903105326c44e69, 0x0000450f },
		{ 0x9cb023365050fa11, &exec_9cb023365050fa11, 0x0000451a },
		{ 0x1cc3b645a369a7d4, &exec_1cc3b645a369a7d4, 0x0000451d },
		{ 0x2c73891e5711c3da, &exec_2c73891e5711c3da, 0x00004521 },
		{ 0x0a019d5b3357fc72, &exec_0a019d5b3357fc72, 0x00004523 },
		{ 0xf94ae7292b10c900, &exec_f94ae7292b10c900, 0x0000453a },
		{ 0x9c9f2ac2eb8a22c7, &exec_9c9f2ac2eb8a22c7, 0x00004553 },
		{ 0x717258cc37bde6b1, &exec_717258cc37bde6b1, 0x0000455e },
		{ 0x7bca15d32b2f934f, &exec_7bca15d32b2f934f, 0x00004574 },
		{ 0x0769c52d86f1f538, &exec_0769c52d86f1f538, 0x00000000 },
		{ 0xc2295d2ab8b48204, &exec_c2295d2ab8b48204, 0x0000458c },
		{ 0xf9e733b4a4c83bcb, &exec_f9e733b4a4c83bcb, 0x0000459d },
		{ 0x57459e7d82cc11b4, &exec_57459e7d82cc11b4, 0x00004a73 },
		{ 0xe79ac7512add1b7a, &exec_e79ac7512add1b7a, 0x000045bd },
		{ 0x825a1c6204e215a7, &exec_825a1c6204e215a7, 0x000045ca },
		{ 0xc99986396b0dba66, &exec_c99986396b0dba66, 0x000045cf },
		{ 0xcf274d124f9919ae, &exec_cf274d124f9919ae, 0x000045da },
		{ 0x7669098c256259e9, &exec_7669098c256259e9, 0x000045dd },
		{ 0xa57d263755219bae, &exec_a57d263755219bae, 0x000045e0 },
		{ 0xf533f691c78758d7, &exec_f533f691c78758d7, 0x000045e3 },
		{ 0xb68c04859900cbfb, &exec_b68c04859900cbfb, 0x000045f5 },
		{ 0x42df5c643342f0ff, &exec_42df5c643342f0ff, 0x000045fc },
		{ 0x5f5f84850015bdf5, &exec_5f5f84850015bdf5, 0x0000462c },
		{ 0xde675a0187532b11, &exec_de675a0187532b11, 0x00004638 },
		{ 0xbddcc3d425363d19, &exec_bddcc3d425363d19, 0x0000463b },
		{ 0x3a463615e9e50095, &exec_3a463615e9e50095, 0x00004b41 },
		{ 0xbed53ab98b2cb1c4, &exec_bed53ab98b2cb1c4, 0x0000467b },
		{ 0x4188f6d25a0591ce, &exec_4188f6d25a0591ce, 0x00004689 },
		{ 0x8721a54e550974bb, &exec_8721a54e550974bb, 0x0000468c },
		{ 0x67fb141df946d40f, &exec_67fb141df946d40f, 0x0000469a },
		{ 0x6f907714409d8152, &exec_6f907714409d8152, 0x000046ac },
		{ 0x72d26e70756adcbb, &exec_72d26e70756adcbb, 0x000046c2 },
		{ 0xc12ccd2057a58050, &exec_c12ccd2057a58050, 0x000046cb },
		{ 0x0e082405d99cb2e9, &exec_0e082405d99cb2e9, 0x000046d4 },
		{ 0x7689f6fc2dbc8e06, &exec_7689f6fc2dbc8e06, 0x000046e2 },
		{ 0xa91e24369cd91b15, &exec_a91e24369cd91b15, 0x000046e9 },
		{ 0x249afbfb1f485412, &exec_249afbfb1f485412, 0x000046ed },
		{ 0x0d21ce6d0fb07589, &exec_0d21ce6d0fb07589, 0x000046f6 },
		{ 0x65cebbc6aab722dc, &exec_65cebbc6aab722dc, 0x00004701 },
		{ 0x52010271fd4f366d, &exec_52010271fd4f366d, 0x00000000 },
		{ 0xfa4b3114600f6b17, &exec_fa4b3114600f6b17, 0x00004704 },
		{ 0x915a3523064f7666, &exec_915a3523064f7666, 0x00004718 },
		{ 0xd0bc58c0d29895ad, &exec_d0bc58c0d29895ad, 0x0000472c },
		{ 0xae08e7e265a96441, &exec_ae08e7e265a96441, 0x00004739 },
		{ 0xcf86a17d8587c71a, &exec_cf86a17d8587c71a, 0x0000473d },
		{ 0x027d5bb981dd2d85, &exec_027d5bb981dd2d85, 0x0000474f },
		{ 0x65e6677a437a1784, &exec_65e6677a437a1784, 0x00004767 },
		{ 0xf05ec4a4959002dd, &exec_f05ec4a4959002dd, 0x00004781 },
		{ 0x956514acd51653c4, &exec_956514acd51653c4, 0x000047c5 },
		{ 0x8290a8e465185498, &exec_8290a8e465185498, 0x000047df },
		{ 0x42a8c504a741dcf7, &exec_42a8c504a741dcf7, 0x000047e2 },
		{ 0x89f39ac70714856f, &exec_89f39ac70714856f, 0x000047f5 },
		{ 0xa9a5de24ed748933, &exec_a9a5de24ed748933, 0x00004801 },
		{ 0x8827f366cca1847d, &exec_8827f366cca1847d, 0x00004807 },
		{ 0xf67f4d826ba24229, &exec_f67f4d826ba24229, 0x0000481e },
		{ 0x29e192d930ebd29a, &exec_29e192d930ebd29a, 0x00004825 },
		{ 0xd21d51fc9ad19607, &exec_d21d51fc9ad19607, 0x0000482e },
		{ 0x0792be47c319b4da, &exec_0792be47c319b4da, 0x00004837 },
		{ 0x8ca028c4d68cfab0, &exec_8ca028c4d68cfab0, 0x00004b1a },
		{ 0x2894cd1a504aff26, &exec_2894cd1a504aff26, 0x0000483e },
		{ 0x1e8a0e3c29fda554, &exec_1e8a0e3c29fda554, 0x0000484c },
		{ 0x5d1715aad065e31d, &exec_5d1715aad065e31d, 0x00004850 },
		{ 0x75111b688789c869, &exec_75111b688789c869, 0x00004858 },
		{ 0x74b7f7a0b9712b17, &exec_74b7f7a0b9712b17, 0x00004860 },
		{ 0xef21be35883cbfc8, &exec_ef21be35883cbfc8, 0x00004863 },
		{ 0x9fa50ca90b2cb313, &exec_9fa50ca90b2cb313, 0x0000487a },
		{ 0x6e067ffdaf744224, &exec_6e067ffdaf744224, 0x0000488b },
		{ 0x45b476d70cf2eeae, &exec_45b476d70cf2eeae, 0x00004891 },
		{ 0x45c5e05472712ae2, &exec_45c5e05472712ae2, 0x00004897 },
		{ 0xc4a38a51e58ccf45, &exec_c4a38a51e58ccf45, 0x0000489e },
		{ 0x9b196402cf62ca8d, &exec_9b196402cf62ca8d, 0x000048a1 },
		{ 0xa8ce8bfd4920031b, &exec_a8ce8bfd4920031b, 0x000048a9 },
		{ 0x0b2438f5bee469e2, &exec_0b2438f5bee469e2, 0x000048b2 },
		{ 0x3c24115b1b1fea64, &exec_3c24115b1b1fea64, 0x00004a82 },
		{ 0xb41849745925c962, &exec_b41849745925c962, 0x000048b5 },
		{ 0xe2b435f06dcb81cb, &exec_e2b435f06dcb81cb, 0x000048b9 },
		{ 0xae66c8830c651c05, &exec_ae66c8830c651c05, 0x00004a02 },
		{ 0x88201a7d3e02ff75, &exec_88201a7d3e02ff75, 0x000048d6 },
		{ 0xb36931c317429c01, &exec_b36931c317429c01, 0x000048dc },
		{ 0x13d4a3bd244581ce, &exec_13d4a3bd244581ce, 0x000048e6 },
		{ 0x55bc4cd2a20a17da, &exec_55bc4cd2a20a17da, 0x000048f9 },
		{ 0xd01ae85bc3ff537b, &exec_d01ae85bc3ff537b, 0x00004901 },
		{ 0x08d4c4a3ce4dc3d8, &exec_08d4c4a3ce4dc3d8, 0x0000490b },
		{ 0xba6a22faefdeb002, &exec_ba6a22faefdeb002, 0x00004912 },
		{ 0x45ed5eebdfe2e0d7, &exec_45ed5eebdfe2e0d7, 0x0000491f },
		{ 0xeddd0e8fd73e9f0d, &exec_eddd0e8fd73e9f0d, 0x00004926 },
		{ 0x43ae50a4278e5b55, &exec_43ae50a4278e5b55, 0x0000492d },
		{ 0x0da5efc07774e60c, &exec_0da5efc07774e60c, 0x00004934 },
		{ 0x9e829b154ce37a25, &exec_9e829b154ce37a25, 0x00004939 },
		{ 0xd7f76603523772fe, &exec_d7f76603523772fe, 0x00004958 },
		{ 0xe959878960308089, &exec_e959878960308089, 0x00004966 },
		{ 0xbc42ec22478affa9, &exec_bc42ec22478affa9, 0x00004984 },
		{ 0xda952a7f8a1a27b7, &exec_da952a7f8a1a27b7, 0x000049a0 },
		{ 0x681c11d73aeb91fb, &exec_681c11d73aeb91fb, 0x000049c1 },
		{ 0x50f40e584c8c0ae8, &exec_50f40e584c8c0ae8, 0x000049cf },
		{ 0xf75654de1a15f7c2, &exec_f75654de1a15f7c2, 0x000049dc },
		{ 0x7a77e04102758169, &exec_7a77e04102758169, 0x000049ed },
		{ 0xeddb5d352768fa07, &exec_eddb5d352768fa07, 0x000049f5 },
		{ 0x734fc1be2d5ad848, &exec_734fc1be2d5ad848, 0x00004a1d },
		{ 0xf543cc43c1be3f0a, &exec_f543cc43c1be3f0a, 0x00004a1f },
		{ 0xceb29dbf1d99c4ab, &exec_ceb29dbf1d99c4ab, 0x00004a26 },
		{ 0x1199e0a02b85b64c, &exec_1199e0a02b85b64c, 0x00004a34 },
		{ 0xe915c7842a7f71f5, &exec_e915c7842a7f71f5, 0x00004a37 },
		{ 0xad94226fae7f7a92, &exec_ad94226fae7f7a92, 0x00004a3b },
		{ 0xec33f6f381db7f89, &exec_ec33f6f381db7f89, 0x00004a48 },
		{ 0x48039b78e64e0c21, &exec_48039b78e64e0c21, 0x00004a4b },
		{ 0xd25ec667b59401d0, &exec_d25ec667b59401d0, 0x00004a54 },
		{ 0x5e343918647bcf7f, &exec_5e343918647bcf7f, 0x00004a66 },
		{ 0xbc7a136c5832578b, &exec_bc7a136c5832578b, 0x00004a7c },
		{ 0x1673a0869875a6db, &exec_1673a0869875a6db, 0x00004a8e },
		{ 0x9ac49cf3235f84f4, &exec_9ac49cf3235f84f4, 0x00004a94 },
		{ 0x8a06593b724b22ea, &exec_8a06593b724b22ea, 0x00004aaa },
		{ 0x9f0119e342d5153f, &exec_9f0119e342d5153f, 0x00004aad },
		{ 0x955818f15535315a, &exec_955818f15535315a, 0x00004ab2 },
		{ 0xa5e76738ec6472a9, &exec_a5e76738ec6472a9, 0x00004ac6 },
		{ 0xf8ec6b790c50fecb, &exec_f8ec6b790c50fecb, 0x00004ae5 },
		{ 0x99417f68c643bfb9, &exec_99417f68c643bfb9, 0x00004afd },
		{ 0xa68b3a3ab2258519, &exec_a68b3a3ab2258519, 0x00004b07 },
		{ 0xd79b6bd81926b758, &exec_d79b6bd81926b758, 0x00004b17 },
		{ 0x6ad0c3972a6a8523, &exec_6ad0c3972a6a8523, 0x00004b1e },
		{ 0x86866ca481eb938c, &exec_86866ca481eb938c, 0x00004b26 },
		{ 0x86ab4b7d5a320fea, &exec_86ab4b7d5a320fea, 0x00004b3d },
		{ 0x025383c706c07f52, &exec_025383c706c07f52, 0x00004b5d },
		{ 0xf6fe2801641e9e37, &exec_f6fe2801641e9e37, 0x00004b62 },
		{ 0x360f9bce39077285, &exec_360f9bce39077285, 0x00004b69 },
		{ 0xf6f6735ed1d62089, &exec_f6f6735ed1d62089, 0x00004b71 },
		{ 0x647586cc9b205805, &exec_647586cc9b205805, 0x00004b81 },
		{ 0xdacc6ea1992b9356, &exec_dacc6ea1992b9356, 0x00004b8b },
		{ 0x5ac2c1ae7e7f8bd8, &exec_5ac2c1ae7e7f8bd8, 0x00004b94 },
		{ 0x5ef6a213eb760234, &exec_5ef6a213eb760234, 0x00004b9a },
		{ 0xebe8147d357d6604, &exec_ebe8147d357d6604, 0x00004b9d },
		{ 0xa240a7fef01f48b7, &exec_a240a7fef01f48b7, 0x00004ba2 },
		{ 0x5c10babd1420d574, &exec_5c10babd1420d574, 0x00004ba6 },
		{ 0xef86075bb66f29af, &exec_ef86075bb66f29af, 0x00004baa },
		{ 0x4f8845a141360a84, &exec_4f8845a141360a84, 0x00004bb7 },
		{ 0x98890bffe9e721c1, &exec_98890bffe9e721c1, 0x00004bd9 },
		{ 0x70c473a0c2b4310b, &exec_70c473a0c2b4310b, 0x00004bea },
		{ 0xe03d31394de823b4, &exec_e03d31394de823b4, 0x00004bed }
	};
	dict.loadFunctions(functionList, 0x111f);
}
