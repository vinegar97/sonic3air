/*
	This script file is part of the Sonic 3 A.I.R. script software distribution.
	Copyright (C) 2017-2025 by Eukaryot

	Published under the GNU GPLv3 open source software license, see license.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
*/



#if STANDALONE

//-------------------------------------------------------//
// Game pause                                            //
//-------------------------------------------------------//

global float GamePause.visibility = 0.0f
global float GamePause.dialogVisibility = 0.0f
global float GamePause.screenshotHint = 0.0f
global u8 GamePause.selectedEntry = 0
global u8 GamePause.dialogEntry = 0
global bool GamePause.isDialogOpen = false
global bool GamePause.hasRestart = false
global bool GamePause.hasOptions = false

constant u16 GamePause.NUM_ENTRIES = 4

constant string GamePause.MENU_FONT   = "sonic3_fontC:gradient:outline(0x000000ff,1,false):shadow(1,1,0.5f,1.0f)"
constant string GamePause.DIALOG_FONT = "sonic3_fontB:gradient:outline(0x000000ff,1,false):shadow(1,1,0.5f,0.8f)"
constant string GamePause.TINY_FONT   = "oxyfont_tiny:gradient:outline(0x000000ff,1,false):shadow(1,1,0.5f,0.6f)"


//# address-hook(0x0013e4) end(0x0014e4)
function void UpdateGamePause()
{
	if (lives_counter <= 0)
	{
		global.game.paused = false
		return
	}

	// Start button pressed?
	if (control.pad1.pressed & CONTROL_START)
	{
		if (!GamePause.BeginPause())
			return

		global.game.paused = true
		global.frame_state = 0x10

		GamePause.Menu()

		Standalone.onResumeAfterPause()
		global.game.paused = false

	#if GAMEAPP
		// Fix for brief glitch in Blue Spheres special stage
		if (global.game_mode == 0x34)
			BlueSpheres.replacePlaneRendering()
	#endif
	}
}


function bool GamePause.IsValidEntry(u8 selected)
{
	if (selected == 1 && !GamePause.hasRestart)
		return false
	if (selected == 2 && !GamePause.hasOptions)
		return false
	return true
}


function bool GamePause.BeginPause()
{
	if (global.game_mode == 0x0c && isSonicIntro() && global.level_started == 0)
	{
		// Skip AIZ 1 Sonic intro
		//  -> Note that the Knuckles intro has its own handler
		timer.alldata = 0
		checkpoint.number = 1
		checkpoint.x = 0x13a0
		checkpoint.y = 0x041a
		Checkpoint.SaveCurrentState()
		checkpoint.camera.x = 0x1308
		checkpoint.camera.y = 0x0390
		level.restart = 1

		// Prevent game pause
		return false
	}

	// Enter game pause
	return true
}


function void GamePause.Menu()
{
	// Script implementation of game pause
	GamePause.hasRestart = !global.pause_disabled && (global.game_mode == 0x0c && global.stage_type == 0 && u8[0xffffb000 + 0x05] <= base_state.HURT) && !competition_mode.active
	GamePause.hasOptions = !Game.isTimeAttack()

	// Pause currently playing game music and sounds
	Audio.pauseContext(AudioContext.CONTEXT_MUSIC)
	Audio.pauseContext(AudioContext.CONTEXT_SOUND)

#if GAMEAPP
	// Handle skippable cutscene
	bool wasInSkippableCutscene = Game.isInSkippableCutscene()
	Game.endSkippableCutscene()
#endif

	constant float KEY_REPEAT_TIMEOUT = 0.4f
	constant float KEY_REPEAT_DELAY   = 0.125f
	float keyRepeatTimer = KEY_REPEAT_TIMEOUT
	s8 lastPressedInput = -1

	GamePause.visibility = 0.0f
	GamePause.screenshotHint = 0.0f
	GamePause.selectedEntry = 0
	GamePause.dialogEntry = 0
	GamePause.isDialogOpen = false

	float totalTime = 0.0f
	bool screenshotModeActive = false

	while (true)
	{
		// Inner loop will be exited once the player selected an entry in the menu
		while (true)
		{
			float deltaSeconds = 1.0f / 60.0f
			totalTime += deltaSeconds

			// Fade-in
			if (GamePause.visibility < 1.0f)
				GamePause.visibility = min(GamePause.visibility + deltaSeconds * 12.0f, 1.0f)

			// Dialog visibility
			if (GamePause.isDialogOpen)
				GamePause.dialogVisibility = min(GamePause.dialogVisibility + deltaSeconds * 20.0f, 1.0f)
			else
				GamePause.dialogVisibility = max(GamePause.dialogVisibility - deltaSeconds * 20.0f, 0.0f)

			// Screenshot hint visibility
			GamePause.screenshotHint = clamp((totalTime - 5.0f) * 3.0f, 0.0f, 1.0f)

			if (!screenshotModeActive)
			{
				GamePause.DrawMenu(totalTime)
			}
			else
			{
				Renderer.resetLifetimeContext(1)
			}

			enableCustomPlaneReset = false	// Maintain custom planes that were set before the pause
			waitForNextFrame()
			enableCustomPlaneReset = false	// ...also for the next frame (relevant in case of e.g. restart)

			// Undo increase of global framecounter (see "VInt.InnerUpdate"), to avoid messing up animations that rely on it
			--global.framecounter

			if (screenshotModeActive)
			{
				if (Input.buttonPressed(0, BUTTON_Y))
					screenshotModeActive = false
			}
			else
			{
				if (Input.buttonPressed(0, BUTTON_Y))
					screenshotModeActive = true

				// Open selected entry
				if (Input.buttonPressed(0, BUTTON_START) || Input.buttonPressed(0, BUTTON_A) || Input.buttonPressed(0, BUTTON_X))
					break

				if (GamePause.isDialogOpen)
				{
					// Return from dialog
					if (Input.buttonPressed(0, BUTTON_B) || Input.buttonPressed(0, BUTTON_BACK))
					{
						Audio.playAudio(0x5b)
						GamePause.isDialogOpen = false
					}
				}

				// Handle key repeat
				s8 currentInput = -1
				{
					if (Input.buttonPressed(BUTTON_UP))
						currentInput = BUTTON_UP
					else if (Input.buttonPressed(BUTTON_DOWN))
						currentInput = BUTTON_DOWN
					else if (lastPressedInput >= 0 && Input.buttonDown(lastPressedInput))
						currentInput = lastPressedInput

					lastPressedInput = currentInput

					if (currentInput == -1)
					{
						// No input at all, so reset key repeat
						keyRepeatTimer = KEY_REPEAT_TIMEOUT
					}
					else if (Input.buttonPressed(currentInput))
					{
						// Input pressed for the first frame now
						keyRepeatTimer = KEY_REPEAT_TIMEOUT
					}
					else
					{
						// Input held down
						keyRepeatTimer -= deltaSeconds
						if (keyRepeatTimer <= 0.001f)
							keyRepeatTimer = KEY_REPEAT_DELAY
						else
							currentInput = -1
					}
				}

				s8 entryChange = (currentInput == BUTTON_UP) ? -1 : (currentInput == BUTTON_DOWN) ? 1 : 0
				if (entryChange != 0)
				{
					Audio.playAudio(0x5b)

					if (GamePause.isDialogOpen)
					{
						u8 numDialogEntries = (GamePause.selectedEntry == 1) ? 3 : 2
						GamePause.dialogEntry = (GamePause.dialogEntry + numDialogEntries + entryChange) % numDialogEntries
					}
					else
					{
						while (true)
						{
							GamePause.selectedEntry = (GamePause.selectedEntry + GamePause.NUM_ENTRIES + entryChange) % GamePause.NUM_ENTRIES
							if (GamePause.IsValidEntry(GamePause.selectedEntry))
								break
						}
					}
				}
			}
		}

		// Evaluate which entry was chosen
		if (GamePause.isDialogOpen)
		{
			// Player chose a dialog entry
			if (GamePause.selectedEntry == 1)
			{
				if (GamePause.dialogEntry == 1)
				{
					restartAtCheckpoint()
					break
				}
				else if (GamePause.dialogEntry == 2)
				{
					restartLevel()
					break
				}
				else
				{
					// Close dialog again
					GamePause.isDialogOpen = false
				}
			}
			else if (GamePause.selectedEntry == 3)
			{
				if (GamePause.dialogEntry == 1)
				{
				#if GAMEAPP
					// TODO: Properly fade out the game
					Game.returnToMainMenu()
					yieldExecution()
				#endif
					break
				}
				else
				{
					// Close dialog again
					GamePause.isDialogOpen = false
				}
			}
		}
		else
		{
			// Player chose a normal entry
			if (GamePause.selectedEntry == 0)
			{
				// Leave this menu again and continue gameplay
				break
			}
			else if (GamePause.selectedEntry == 1)
			{
				if (Game.isTimeAttack())
				{
					global.game.paused = false	// Done here already so the menu can fade out during the following screen fade
					Audio.resumeContext(AudioContext.CONTEXT_MUSIC)
					Audio.resumeContext(AudioContext.CONTEXT_SOUND)
					restartTimeAttack()
					break
				}
				else
				{
					// First open the dialog menu for Restart
					GamePause.isDialogOpen = true
					Audio.playAudio(0x5b)
				}
			}
			else if (GamePause.selectedEntry == 2)
			{
			#if GAMEAPP
				// Open in-game options
				// TODO: How about a quick fade-out here as well?
				Game.openOptionsMenu()
			#endif
			}
			else if (GamePause.selectedEntry == 3)
			{
				// First open the dialog menu for Exit Game
				GamePause.isDialogOpen = true
				Audio.playAudio(0x5b)
			}
		}
	}

	Renderer.resetLifetimeContext(1)

	// Resume game audio
	Audio.resumeContext(AudioContext.CONTEXT_MUSIC)
	Audio.resumeContext(AudioContext.CONTEXT_SOUND)

#if GAMEAPP
	if (wasInSkippableCutscene)
		Game.startSkippableCutscene()
#endif
}


function void GamePause.UpdateFadeOut()
{
	// Fading already done?
	if (GamePause.visibility <= 0.0f)
		return

	// Don't fade out during pause, only afterwards
	if (global.game.paused)
		return

	// Fade-out
	float deltaSeconds = 1.0f / 60.0f
	GamePause.visibility = max(GamePause.visibility - deltaSeconds * 12.0f, 0.0f)
	GamePause.dialogVisibility = max(GamePause.dialogVisibility - deltaSeconds * 12.0f, 0.0f)

	// Draw menu unless it just got invisible
	if (GamePause.visibility > 0.0f)
	{
		GamePause.DrawMenu(0.0f)
	}
	else
	{
		Renderer.resetLifetimeContext(1)
	}
}


function void GamePause.DrawMenu(float time)
{
	constant array<string> ENTRY_TEXTS = { "Continue", "Restart", "Options", "Exit Game" }
	constant u16 LINE_HEIGHT = 26
	constant u16 DIALOG_LINE_HEIGHT = 15

	u8 numEntries = 2 + u8(GamePause.hasRestart) + u8(GamePause.hasOptions)

	u16 rightAnchor = getScreenWidth() + Math.roundToInt((1.0f - GamePause.visibility) * 160)
	u16 py = getScreenHeight() - numEntries * LINE_HEIGHT

	// Use lifetime context 1 for everything rendered by the pause menu
	//  -> This allows for selectively clearing these sprites, texts, etc. in each frame without touching the game's rendered content
	Renderer.resetLifetimeContext(1)
	Renderer.setLifetimeContext(1)

	// Ensure that the game pause menu always renders onto the full screen, #contributed by nabbup / Raine
	Renderer.resetViewport(0xfeff)

	Renderer.drawSprite("pause_screen_upper", rightAnchor - 210, 0, 0, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, 0xff00)
	Renderer.drawSprite("pause_screen_lower", rightAnchor - 190, py - 8, 0, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, 0xff00)

	for (u8 k = 0; k < GamePause.NUM_ENTRIES; ++k)
	{
		if (!GamePause.IsValidEntry(k))
			continue

		u32 color = 0xb0b0b0e0
		if (GamePause.selectedEntry == k)
			color = ((time % 0.5f) < 0.25f) ? 0xffff00ff : 0xffffffff

		Renderer.drawText(GamePause.MENU_FONT, rightAnchor - 16, py + 11, ENTRY_TEXTS[k], color, 6, 0, 0xff01, false)

		py += LINE_HEIGHT
	}

	if (GamePause.dialogVisibility > 0.0f)
	{
		u8 numDialogEntries = (GamePause.selectedEntry == 1) ? 3 : (GamePause.selectedEntry == 3) ? 2 : 0
		if (numDialogEntries > 0)
		{
			u16 px = rightAnchor - 191 + Math.roundToInt((1.0f - GamePause.dialogVisibility) * 50.0f) - GamePause.NUM_ENTRIES * 9
			py = getScreenHeight() - 1 - numDialogEntries * DIALOG_LINE_HEIGHT

			if (numDialogEntries <= 2)
			{
				Renderer.drawSprite("pause_screen_dialog", px - 66, py - 8, 0, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, 0xff00, 0, Math.roundToInt(GamePause.dialogVisibility * 255.0f))
			}
			else
			{
				py -= 15
				Renderer.drawSprite("pause_screen_dialog3", px - 68, py - 8, 0, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, 0xff00, 0, Math.roundToInt(GamePause.dialogVisibility * 255.0f))
				px += 5
			}

			constant array<string> DIALOG_TEXTS = { "Continue", "Last Checkpoint", "Restart Act",   "Continue", "Exit to Menu" }
			u8 firstText = (GamePause.selectedEntry == 1) ? 0 : 3

			for (u8 line = 0; line < numDialogEntries; ++line)
			{
				u32 color = 0xa0c0d0a0
				if (line == GamePause.dialogEntry)
					color = ((time % 0.5f) < 0.25f) ? 0xffff00ff : 0xffffffff
				color = (color & 0xffffff00) + Math.roundToInt((color & 0xff) * GamePause.dialogVisibility)	// Multiply alpha with dialog visibility

				Renderer.drawText(GamePause.DIALOG_FONT, px, py, DIALOG_TEXTS[firstText + line], color, 2, 0, 0xff01, false)
				py += DIALOG_LINE_HEIGHT
				px -= DIALOG_LINE_HEIGHT / 3
			}
		}
	}

	if (GamePause.screenshotHint > 0.0f)
	{
		float hintVisibility = GamePause.screenshotHint * GamePause.visibility
		py = getScreenHeight() - 5 + Math.roundToInt(Math.lerp(20, -2, hintVisibility))

		Renderer.drawRect(0, py - 9, 175, 20, 0x000000d0, 0xff00, false)
		Renderer.drawSprite("@input_icon_button_Y", 12, py - 1, 0, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, 0xff01)
		Renderer.drawText(GamePause.TINY_FONT, 24, py, "Hide menu for clean screenshots", 0xa0d0ffff, 4, 0, 0xff01, false)
	}
}


#else	// STANDALONE


//-------------------------------------------------------//
// Game pause (original implementation)                  //
//-------------------------------------------------------//

//# address-hook(0x0013e4) end(0x0014e4)
function void UpdateGamePause()
{
	// This is only used in outro; and there's no actual need to prevent game pause there
	if (global.pause_disabled)
		return

	if (lives_counter <= 0)
	{
		global.game.paused = false
		return
	}

	if (!global.game.paused)
	{
		// Start button pressed?
		if ((control.pad1.pressed & CONTROL_START) == 0)
			return

		// Entering game pause
		global.game.paused = true
	}

	syncZ80_variantB(0x01)

	while (true)
	{
		global.frame_state = 0x10
		waitForNextFrame()
	@EntryPoint:

		if (pausecheats.unlocked)
		{
			if (control.pad1.pressed & CONTROL_A)
			{
				global.game_mode = 0x04		// Title Screen
				break
			}

			if (control.pad1.state & CONTROL_B || control.pad1.pressed & CONTROL_C)
			{
				// Single step
				global.game.paused = true
				syncZ80_variantB(0x80)
				return
			}
		}

		// In competition mode, button B during pause quits the stage
		if (global.zone >= 0x0e && global.zone <= 0x12)
		{
			if ((control.pad1.pressed & CONTROL_B) && (competition_mode.game_mode < 0))
			{
				global.game_mode = 0xc0		// Competition Mode Level Select, fading
				break
			}
		}

		if (control.pad1.pressed & CONTROL_START)
			break
	}

	syncZ80_variantB(0x80)

	global.game.paused = false
}

#endif
