name: Build Sonic 3 A.I.R. - Windows

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - Actions_test

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Find and set MSBuild path
      run: |
        $msbuildPath = Get-Command msbuild.exe | Select-Object -ExpandProperty Source
        if (-not $msbuildPath) {
          throw "MSBuild.exe not found"
        }
        [System.Environment]::SetEnvironmentVariable('msbuildPath', $msbuildPath, [System.EnvironmentVariableTarget]::Process)
      shell: pwsh

    - name: Build external libraries
      run: |
        cd framework/external
        ./build_externals_windows.bat

    - name: Verify output
      run: |
        if (-not (Test-Path -Path "framework/lib/x64")) { throw "x64 directory not found" }
        if (-not (Test-Path -Path "framework/lib/x64d")) { throw "x64d directory not found" }
        if (-not (Test-Path -Path "framework/lib/x86")) { throw "x86 directory not found" }
        if (-not (Test-Path -Path "framework/lib/x86d")) { throw "x86d directory not found" }

        $expectedDirs = @("libogg", "libvorbis", "minizip", "sdl", "zlib")
        $libDirs = @("x64", "x64d", "x86", "x86d")

        foreach ($libDir in $libDirs) {
          foreach ($expectedDir in $expectedDirs) {
            if (-not (Test-Path -Path "framework/lib/$libDir/$expectedDir")) {
              throw "$expectedDir directory not found in $libDir"
            }
          }
        }

        Write-Output "All required directories and files are present."
      shell: pwsh
